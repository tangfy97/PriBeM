class org.bouncycastle.crypto.generators.DHParametersHelper extends java.lang.Object
{
    private static final java.math.BigInteger ONE;
    private static final java.math.BigInteger TWO;

    void <init>()
    {
        org.bouncycastle.crypto.generators.DHParametersHelper r0;

        r0 := @this: org.bouncycastle.crypto.generators.DHParametersHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.math.BigInteger[] generateSafePrimes(int, int, java.security.SecureRandom)
    {
        java.math.BigInteger[] $r1;
        java.security.SecureRandom r0;
        int i0, i1, i2;
        java.math.BigInteger $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        r0 := @parameter2: java.security.SecureRandom;

        i1 = i0 - 1;

     label1:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,int,java.util.Random)>(i1, 2, r0);

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r4 = <org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger ONE>;

        $r5 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r4);

        $z1 = virtualinvoke $r5.<java.math.BigInteger: boolean isProbablePrime(int)>(i2);

        if $z1 == 0 goto label1;

        if i2 <= 2 goto label2;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean isProbablePrime(int)>(i2);

        if $z0 == 0 goto label1;

        goto label2;

     label2:
        $r1 = newarray (java.math.BigInteger)[2];

        $r1[0] = $r5;

        $r1[1] = $r2;

        return $r1;
    }

    static java.math.BigInteger selectGenerator(java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        java.security.SecureRandom r3;
        java.math.BigInteger r0, $r1, $r2, r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1;

        r0 := @parameter0: java.math.BigInteger;

        r4 := @parameter1: java.math.BigInteger;

        r3 := @parameter2: java.security.SecureRandom;

        $r1 = <org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO>;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

     label1:
        $r7 = <org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO>;

        $r8 = staticinvoke <org.bouncycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r7, $r2, r3);

        $r9 = <org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO>;

        $r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r9, r0);

        $r11 = <org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r10.<java.math.BigInteger: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label1;

        $r5 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r4, r0);

        $r6 = <org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger ONE>;

        $z0 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        return $r8;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger ONE> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO> = $r1;

        return;
    }
}
