public final class org.apache.cxf.common.util.URIParserUtil extends java.lang.Object
{
    private static final java.util.Set KEYWORDS;
    private static final java.lang.String EXCLUDED_CHARS;
    private static final java.lang.String HEX_DIGITS;

    private void <init>()
    {
        org.apache.cxf.common.util.URIParserUtil r0;

        r0 := @this: org.apache.cxf.common.util.URIParserUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean isExcluded(char)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i6;
        java.lang.String $r0;
        boolean $z0;

        c0 := @parameter0: char;

        $i2 = (int) c0;

        if $i2 <= 32 goto label1;

        $i3 = (int) c0;

        if $i3 >= 127 goto label1;

        $r0 = "<>\"{}|\\^`";

        $i4 = (int) c0;

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>($i4);

        $i6 = (int) -1;

        if $i1 == $i6 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static java.net.URL[] pathToURLs(java.lang.String)
    {
        java.net.MalformedURLException $r6;
        java.net.URL r8;
        java.io.File $r3;
        java.net.URL[] r7, r9;
        java.util.StringTokenizer $r0;
        int $i0, $i1, $i2, i3;
        java.lang.String r1, $r2, $r4;
        java.net.URI $r5;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        $r2 = <java.io.File: java.lang.String pathSeparator>;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, $r2);

        $i0 = virtualinvoke $r0.<java.util.StringTokenizer: int countTokens()>();

        r7 = newarray (java.net.URL)[$i0];

        i3 = 0;

     label1:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label7;

        $r3 = new java.io.File;

        $r4 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        r8 = null;

     label2:
        $r5 = virtualinvoke $r3.<java.io.File: java.net.URI toURI()>();

        r8 = virtualinvoke $r5.<java.net.URI: java.net.URL toURL()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.net.MalformedURLException: void printStackTrace()>();

     label5:
        if r8 == null goto label6;

        $i2 = i3;

        i3 = i3 + 1;

        r7[$i2] = r8;

     label6:
        goto label1;

     label7:
        $i1 = lengthof r7;

        if $i1 == i3 goto label8;

        r9 = newarray (java.net.URL)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r9, 0, i3);

        r7 = r9;

     label8:
        return r7;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    public static java.lang.String parsePackageName(java.lang.String, java.lang.String)
    {
        int $i0;
        java.lang.String r0, r1, $r2, $r3, r4;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r3 = r0;

        goto label2;

     label1:
        $r3 = null;

     label2:
        r4 = $r3;

        if $r3 != null goto label3;

        r4 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.lang.String getPackageName(java.lang.String)>(r1);

     label3:
        return r4;
    }

    public static java.lang.String getPackageName(java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r1, $r2, $r21;
        java.lang.StringBuilder $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15;
        java.lang.String $r0, $r3, $r5, $r6, $r8, $r9, $r13, $r15, $r16, $r17, $r18, r19, r20, r22, $r24, r25, $r26, r27, r28;
        java.lang.Object $r4, $r7, $r14, $r23;

        r19 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r19.<java.lang.String: int indexOf(int)>(58);

        r20 = "";

        if $i0 < 0 goto label02;

        $r16 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r20 = $r16;

        $r17 = "http";

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r16);

        if $z3 != 0 goto label01;

        $r18 = "urn";

        $z4 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r16);

        if $z4 == 0 goto label02;

     label01:
        $i11 = $i0 + 1;

        r19 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int)>($i11);

     label02:
        $r21 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.util.List tokenize(java.lang.String,java.lang.String)>(r19, "/: ");

        $i12 = interfaceinvoke $r21.<java.util.List: int size()>();

        if $i12 != 0 goto label03;

        return "cxf";

     label03:
        $i1 = interfaceinvoke $r21.<java.util.List: int size()>();

        if $i1 <= 1 goto label04;

        $i6 = interfaceinvoke $r21.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        $r14 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>($i7);

        r22 = (java.lang.String) $r14;

        $i8 = virtualinvoke r22.<java.lang.String: int lastIndexOf(int)>(46);

        if $i8 <= 0 goto label04;

        $r15 = virtualinvoke r22.<java.lang.String: java.lang.String replace(char,char)>(46, 95);

        $i9 = interfaceinvoke $r21.<java.util.List: int size()>();

        $i10 = $i9 - 1;

        interfaceinvoke $r21.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i10, $r15);

     label04:
        $r23 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(0);

        $r24 = (java.lang.String) $r23;

        r25 = $r24;

        $i13 = virtualinvoke $r24.<java.lang.String: int indexOf(int)>(58);

        if $i13 < 0 goto label05;

        r25 = virtualinvoke $r24.<java.lang.String: java.lang.String substring(int,int)>(0, $i13);

     label05:
        $r13 = r25;

        $r0 = "urn";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r20);

        if $z0 == 0 goto label06;

        $r26 = ".-";

        goto label07;

     label06:
        $r26 = ".";

     label07:
        $r1 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.util.List tokenize(java.lang.String,java.lang.String)>($r13, $r26);

        $r2 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.util.List reverse(java.util.List)>($r1);

        $r3 = "www";

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i3);

        $r5 = (java.lang.String) $r4;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z1 == 0 goto label08;

        $i4 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i5);

     label08:
        interfaceinvoke $r21.<java.util.List: boolean addAll(int,java.util.Collection)>(1, $r2);

        interfaceinvoke $r21.<java.util.List: java.lang.Object remove(int)>(0);

        i14 = 0;

     label09:
        $i15 = interfaceinvoke $r21.<java.util.List: int size()>();

        if i14 >= $i15 goto label11;

        $r7 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i14);

        r27 = (java.lang.String) $r7;

        $r8 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.lang.String removeIllegalIdentifierChars(java.lang.String)>(r27);

        r28 = $r8;

        $z2 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: boolean containsReservedKeywords(java.lang.String)>($r8);

        if $z2 == 0 goto label10;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r28 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r9 = virtualinvoke r28.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r21.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i14, $r9);

        i14 = i14 + 1;

        goto label09;

     label11:
        $r6 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.lang.String combine(java.util.List,char)>($r21, 46);

        return $r6;
    }

    public static java.lang.String getNamespace(java.lang.String)
    {
        java.lang.String[] r10;
        java.util.StringTokenizer $r12;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i8;
        java.lang.String r0, $r3, $r6, $r8, $r9, r11;
        java.lang.StringBuilder $r5, $r7, $r13, $r14;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r12 = new java.util.StringTokenizer;

        specialinvoke $r12.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, ".");

        $i1 = virtualinvoke $r12.<java.util.StringTokenizer: int countTokens()>();

        if $i1 != 0 goto label3;

        r10 = newarray (java.lang.String)[0];

        goto label5;

     label3:
        $i2 = virtualinvoke $r12.<java.util.StringTokenizer: int countTokens()>();

        r10 = newarray (java.lang.String)[$i2];

        $i3 = virtualinvoke $r12.<java.util.StringTokenizer: int countTokens()>();

        i4 = $i3 - 1;

     label4:
        if i4 < 0 goto label5;

        $r9 = virtualinvoke $r12.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r10[i4] = $r9;

        $i8 = (int) -1;

        i4 = i4 + $i8;

        goto label4;

     label5:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://");

        r11 = "";

        i5 = 0;

     label6:
        $i6 = lengthof r10;

        if i5 >= $i6 goto label8;

        if i5 != 1 goto label7;

        r11 = ".";

     label7:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r6 = r10[i5];

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        i5 = i5 + 1;

        goto label6;

     label8:
        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static java.util.List tokenize(java.lang.String, java.lang.String)
    {
        java.util.StringTokenizer $r0;
        java.lang.String r1, r2, $r4;
        java.util.ArrayList $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r3;
    }

    private static java.lang.String removeIllegalIdentifierChars(java.lang.String)
    {
        char $c1;
        int $i0, i2;
        java.lang.StringBuilder $r0, $r3, $r4, $r5;
        java.lang.String r1, $r2, $r6;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label5;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if i2 != 0 goto label2;

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c1);

        if $z1 != 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        goto label4;

     label2:
        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c1);

        if $z0 != 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private static java.lang.String combine(java.util.List, char)
    {
        char c1;
        java.util.List r1;
        int $i0, i2;
        java.lang.StringBuilder $r0;
        java.lang.Object $r2, $r5;
        java.lang.String $r3, $r4, $r6;

        r1 := @parameter0: java.util.List;

        c1 := @parameter1: char;

        $r0 = new java.lang.StringBuilder;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.String) $r2;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        i2 = 1;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 >= $i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (java.lang.String) $r5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static java.util.List reverse(java.util.List)
    {
        java.util.List r1;
        int $i0, i1, $i3;
        java.lang.Object $r2;
        java.util.ArrayList $r3;

        r1 := @parameter0: java.util.List;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label2:
        return $r3;
    }

    public static boolean containsReservedKeywords(java.lang.String)
    {
        java.util.Set $r1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.cxf.common.util.URIParserUtil: java.util.Set KEYWORDS>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z0;
    }

    public static java.lang.String escapeChars(java.lang.String)
    {
        byte[] $r4;
        short $s5, $s13;
        byte $b4, $b8, $b9;
        int $i0, $i1, $i3, $i6, i11, i12, $i14, $i15;
        java.lang.String r1, $r2, $r3, $r5, $r6;
        boolean $z0;
        char $c2, $c7, $c10;
        java.lang.StringBuilder $r8;
        java.io.UnsupportedEncodingException $r7;

        r1 := @parameter0: java.lang.String;

        $r8 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i0);

        i11 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i11 >= $i1 goto label8;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i11);

        $z0 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: boolean isExcluded(char)>($c2);

        if $z0 == 0 goto label6;

     label2:
        $r3 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c2);

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        i12 = 0;

     label3:
        $i3 = lengthof $r4;

        if i12 >= $i3 goto label4;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");

        $r5 = "0123456789abcdef";

        $b4 = $r4[i12];

        $s13 = (short) $b4;

        $s5 = $s13 & 255;

        $i14 = (int) $s5;

        $i6 = $i14 >> 4;

        $c7 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($i6);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        $r6 = "0123456789abcdef";

        $b8 = $r4[i12];

        $b9 = $b8 & 15;

        $i15 = (int) $b9;

        $c10 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i15);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10);

        i12 = i12 + 1;

        goto label3;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        goto label7;

     label6:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label7:
        i11 = i11 + 1;

        goto label1;

     label8:
        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

        catch java.io.UnsupportedEncodingException from label2 to label4 with label5;
    }

    public static java.lang.String normalize(java.lang.String)
    {
        java.net.URL $r24, r25, $r33, $r37;
        java.net.URISyntaxException $r6;
        java.net.URI $r2, $r3, $r20, $r21;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r9;
        java.lang.StringBuilder $r15, $r16, $r18, $r19, $r35, $r36;
        int $i0, $i2;
        java.lang.String r1, $r4, $r5, $r7, $r8, $r10, $r11, $r22, $r23, r26, $r27, r28, $r30, $r31, $r32;
        java.net.MalformedURLException $r12;
        java.io.File $r34;

        r1 := @parameter0: java.lang.String;

        r25 = null;

     label01:
        $r33 = new java.net.URL;

        specialinvoke $r33.<java.net.URL: void <init>(java.lang.String)>(r1);

        r25 = $r33;

        $r2 = virtualinvoke $r33.<java.net.URL: java.net.URI toURI()>();

        $r3 = virtualinvoke $r2.<java.net.URI: java.net.URI normalize()>();

        $r4 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        r26 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.lang.String escapeChars(java.lang.String)>($r5);

     label02:
        goto label15;

     label03:
        $r12 := @caughtexception;

     label04:
        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("classpath:");

        if $z0 == 0 goto label07;

        $r23 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(10);

        $r24 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.net.URL getResource(java.lang.String,java.lang.Class)>($r23, class "Lorg/apache/cxf/common/util/URIParserUtil;");

        if $r24 == null goto label05;

        $r27 = virtualinvoke $r24.<java.net.URL: java.lang.String toExternalForm()>();

        goto label06;

     label05:
        $r27 = r1;

     label06:
        return $r27;

     label07:
        $r34 = new java.io.File;

        specialinvoke $r34.<java.io.File: void <init>(java.lang.String)>(r1);

        $z1 = virtualinvoke $r34.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label09;

        $r20 = virtualinvoke $r34.<java.io.File: java.net.URI toURI()>();

        $r21 = virtualinvoke $r20.<java.net.URI: java.net.URI normalize()>();

        $r22 = virtualinvoke $r21.<java.net.URI: java.lang.String toString()>();

     label08:
        return $r22;

     label09:
        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(":");

        $i2 = (int) -1;

        if $i0 == $i2 goto label10;

        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z2 != 0 goto label10;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:/");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r28 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label10:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r28 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        $r37 = new java.net.URL;

        specialinvoke $r37.<java.net.URL: void <init>(java.lang.String)>(r28);

        $r30 = virtualinvoke $r37.<java.net.URL: java.lang.String toString()>();

        $r31 = virtualinvoke $r30.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        $r32 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.lang.String escapeChars(java.lang.String)>($r31);

     label12:
        return $r32;

     label13:
        $r9 := @caughtexception;

        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        $r11 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.lang.String escapeChars(java.lang.String)>($r10);

        return $r11;

     label14:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r25.<java.net.URL: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        r26 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.lang.String escapeChars(java.lang.String)>($r8);

     label15:
        return r26;

        catch java.net.MalformedURLException from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label06 with label13;
        catch java.lang.Exception from label07 to label08 with label13;
        catch java.lang.Exception from label09 to label12 with label13;
        catch java.net.URISyntaxException from label01 to label02 with label14;
    }

    public static java.lang.String getAbsoluteURI(java.lang.String)
    {
        java.lang.String r0, $r2, $r3, $r4, $r7, $r9, $r11, $r13;
        java.net.URI $r1, $r6, $r8, $r10;
        boolean $z0, $z1;
        java.io.File $r5;
        java.lang.Exception $r12;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.net.URI;

        specialinvoke $r1.<java.net.URI: void <init>(java.lang.String)>(r0);

        $r2 = "file";

        $r3 = virtualinvoke $r1.<java.net.URI: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke $r1.<java.net.URI: boolean isOpaque()>();

        if $z1 != 0 goto label3;

        $r10 = virtualinvoke $r1.<java.net.URI: java.net.URI normalize()>();

        $r11 = virtualinvoke $r10.<java.net.URI: java.lang.String toString()>();

     label2:
        return $r11;

     label3:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("");

        $r6 = virtualinvoke $r5.<java.io.File: java.net.URI toURI()>();

        $r7 = virtualinvoke $r1.<java.net.URI: java.lang.String getPath()>();

        $r8 = virtualinvoke $r6.<java.net.URI: java.net.URI resolve(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.net.URI: java.lang.String toString()>();

     label4:
        return $r9;

     label5:
        $r4 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.lang.String normalize(java.lang.String)>(r0);

     label6:
        return $r4;

     label7:
        $r12 := @caughtexception;

        $r13 = staticinvoke <org.apache.cxf.common.util.URIParserUtil: java.lang.String normalize(java.lang.String)>(r0);

        return $r13;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.lang.String[] $r1;
        java.util.List $r2;

        <org.apache.cxf.common.util.URIParserUtil: java.lang.String HEX_DIGITS> = "0123456789abcdef";

        <org.apache.cxf.common.util.URIParserUtil: java.lang.String EXCLUDED_CHARS> = "<>\"{}|\\^`";

        $r0 = new java.util.HashSet;

        $r1 = newarray (java.lang.String)[53];

        $r1[0] = "abstract";

        $r1[1] = "boolean";

        $r1[2] = "break";

        $r1[3] = "byte";

        $r1[4] = "case";

        $r1[5] = "catch";

        $r1[6] = "char";

        $r1[7] = "class";

        $r1[8] = "const";

        $r1[9] = "continue";

        $r1[10] = "default";

        $r1[11] = "do";

        $r1[12] = "double";

        $r1[13] = "else";

        $r1[14] = "extends";

        $r1[15] = "final";

        $r1[16] = "finally";

        $r1[17] = "float";

        $r1[18] = "for";

        $r1[19] = "goto";

        $r1[20] = "if";

        $r1[21] = "implements";

        $r1[22] = "import";

        $r1[23] = "instanceof";

        $r1[24] = "int";

        $r1[25] = "interface";

        $r1[26] = "long";

        $r1[27] = "native";

        $r1[28] = "new";

        $r1[29] = "package";

        $r1[30] = "private";

        $r1[31] = "protected";

        $r1[32] = "public";

        $r1[33] = "return";

        $r1[34] = "short";

        $r1[35] = "static";

        $r1[36] = "strictfp";

        $r1[37] = "super";

        $r1[38] = "switch";

        $r1[39] = "synchronized";

        $r1[40] = "this";

        $r1[41] = "throw";

        $r1[42] = "throws";

        $r1[43] = "transient";

        $r1[44] = "try";

        $r1[45] = "void";

        $r1[46] = "volatile";

        $r1[47] = "while";

        $r1[48] = "true";

        $r1[49] = "false";

        $r1[50] = "null";

        $r1[51] = "assert";

        $r1[52] = "enum";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        <org.apache.cxf.common.util.URIParserUtil: java.util.Set KEYWORDS> = $r0;

        return;
    }
}
