public final class org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream extends org.apache.batik.ext.awt.image.codec.util.SeekableStream
{
    private java.io.InputStream stream;
    private java.io.File cacheFile;
    private java.io.RandomAccessFile cache;
    private int bufLen;
    private byte[] buf;
    private long length;
    private long pointer;
    private boolean foundEOF;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r1;
        java.io.RandomAccessFile $r5;
        java.io.File $r3, $r4, $r6;
        int $i0;
        org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream r0;
        java.io.InputStream r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream;

        r2 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: int bufLen> = 1024;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: int bufLen>;

        $r1 = newarray (byte)[$i0];

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: byte[] buf> = $r1;

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long length> = 0L;

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer> = 0L;

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: boolean foundEOF> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.InputStream stream> = r2;

        $r3 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("jai-FCSS-", ".tmp");

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.File cacheFile> = $r3;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.File cacheFile>;

        virtualinvoke $r4.<java.io.File: void deleteOnExit()>();

        $r5 = new java.io.RandomAccessFile;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.File cacheFile>;

        specialinvoke $r5.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r6, "rw");

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.RandomAccessFile cache> = $r5;

        return;
    }

    private long readUntil(long) throws java.io.IOException
    {
        java.io.RandomAccessFile $r1, $r4, $r5, $r7;
        byte[] $r3, $r6;
        byte $b2, $b5;
        boolean $z0;
        long l0, $l1, $l3, $l4, $l7, $l8, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, l20;
        int $i6, $i9, $i10, $i21, $i23, $i24;
        org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream r0;
        java.io.InputStream $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream;

        l0 := @parameter0: long;

        $l1 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long length>;

        $b2 = l0 cmp $l1;

        $i21 = (int) $b2;

        if $i21 >= 0 goto label1;

        return l0;

     label1:
        $z0 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: boolean foundEOF>;

        if $z0 == 0 goto label2;

        $l19 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long length>;

        return $l19;

     label2:
        $l3 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long length>;

        l20 = l0 - $l3;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.RandomAccessFile cache>;

        $l4 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long length>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>($l4);

        goto label5;

     label3:
        $r2 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.InputStream stream>;

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: byte[] buf>;

        $i6 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: int bufLen>;

        $l7 = (long) $i6;

        $l8 = staticinvoke <java.lang.Math: long min(long,long)>(l20, $l7);

        $i9 = (int) $l8;

        $i10 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r3, 0, $i9);

        $i23 = (int) -1;

        if $i10 != $i23 goto label4;

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: boolean foundEOF> = 1;

        $l18 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long length>;

        return $l18;

     label4:
        $r5 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.RandomAccessFile cache>;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.RandomAccessFile cache>;

        $l11 = virtualinvoke $r4.<java.io.RandomAccessFile: long length()>();

        $l12 = (long) $i10;

        $l13 = $l11 + $l12;

        virtualinvoke $r5.<java.io.RandomAccessFile: void setLength(long)>($l13);

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.RandomAccessFile cache>;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: byte[] buf>;

        virtualinvoke $r7.<java.io.RandomAccessFile: void write(byte[],int,int)>($r6, 0, $i10);

        $l14 = (long) $i10;

        l20 = l20 - $l14;

        $l16 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long length>;

        $l15 = (long) $i10;

        $l17 = $l16 + $l15;

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long length> = $l17;

     label5:
        $b5 = l20 cmp 0L;

        $i24 = (int) $b5;

        if $i24 > 0 goto label3;

        return l0;
    }

    public boolean canSeekBackwards()
    {
        org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream;

        return 1;
    }

    public long getFilePointer()
    {
        long $l0;
        org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream;

        $l0 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer>;

        return $l0;
    }

    public void seek(long) throws java.io.IOException
    {
        byte $b1;
        int $i2;
        long l0;
        java.io.IOException $r3;
        org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream r0;
        java.lang.String $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        $r3 = new java.io.IOException;

        $r2 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("FileCacheSeekableStream0");

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer> = l0;

        return;
    }

    public int read() throws java.io.IOException
    {
        java.io.RandomAccessFile $r1, $r2;
        long $l0, l1, $l2, $l4, $l5;
        byte $b3;
        int $i6, $i7, $i9;
        org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream;

        $l0 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer>;

        l1 = $l0 + 1L;

        $l2 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long readUntil(long)>(l1);

        $b3 = $l2 cmp l1;

        $i7 = (int) $b3;

        if $i7 < 0 goto label1;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.RandomAccessFile cache>;

        $l4 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer>;

        $l5 = $l4 + 1L;

        r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer> = $l5;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>($l4);

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.RandomAccessFile cache>;

        $i6 = virtualinvoke $r2.<java.io.RandomAccessFile: int read()>();

        return $i6;

     label1:
        $i9 = (int) -1;

        return $i9;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r0;
        java.io.RandomAccessFile $r2, $r3;
        java.lang.IndexOutOfBoundsException $r7;
        long $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14;
        java.lang.NullPointerException $r6;
        int i0, $i1, $i2, i15, i16, $i18;
        org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream r1;

        r1 := @this: org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i15 := @parameter2: int;

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label1:
        if i0 < 0 goto label2;

        if i15 < 0 goto label2;

        $i2 = i0 + i15;

        $i1 = lengthof r0;

        if $i2 <= $i1 goto label3;

     label2:
        $r7 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r7;

     label3:
        if i15 != 0 goto label4;

        return 0;

     label4:
        $l4 = r1.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer>;

        $l3 = (long) i15;

        $l5 = $l4 + $l3;

        $l6 = specialinvoke r1.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long readUntil(long)>($l5);

        $l9 = (long) i15;

        $l7 = r1.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer>;

        $l8 = $l6 - $l7;

        $l10 = staticinvoke <java.lang.Math: long min(long,long)>($l9, $l8);

        i16 = (int) $l10;

        if i16 <= 0 goto label5;

        $r2 = r1.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.RandomAccessFile cache>;

        $l11 = r1.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer>;

        virtualinvoke $r2.<java.io.RandomAccessFile: void seek(long)>($l11);

        $r3 = r1.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.RandomAccessFile cache>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void readFully(byte[],int,int)>(r0, i0, i16);

        $l13 = r1.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer>;

        $l12 = (long) i16;

        $l14 = $l13 + $l12;

        r1.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: long pointer> = $l14;

        return i16;

     label5:
        $i18 = (int) -1;

        return $i18;
    }

    public void close() throws java.io.IOException
    {
        java.io.RandomAccessFile $r1;
        org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream r0;
        java.io.File $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream;

        specialinvoke r0.<java.io.InputStream: void close()>();

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.RandomAccessFile cache>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: java.io.File cacheFile>;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        return;
    }
}
