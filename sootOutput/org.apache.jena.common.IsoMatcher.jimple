public class org.apache.jena.common.IsoMatcher extends java.lang.Object
{
    static boolean DEBUG;
    private final java.util.List tuples1;
    private final java.util.List tuples2;
    private final com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest nodeTest;

    public static boolean isomorphic(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r7;
        java.util.List $r2, $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1, $r4;
        org.apache.jena.common.IsoMatcher $r6;
        com.hp.hpl.jena.graph.Graph r0, r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

        $r2 = staticinvoke <org.apache.jena.common.IsoMatcher: java.util.List tuplesTriples(java.util.Iterator)>($r1);

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

        $r5 = staticinvoke <org.apache.jena.common.IsoMatcher: java.util.List tuplesTriples(java.util.Iterator)>($r4);

        $r6 = new org.apache.jena.common.IsoMatcher;

        $r7 = <com.hp.hpl.jena.sparql.util.NodeUtils: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameTerm>;

        specialinvoke $r6.<org.apache.jena.common.IsoMatcher: void <init>(java.util.List,java.util.List,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r2, $r5, $r7);

        $z0 = specialinvoke $r6.<org.apache.jena.common.IsoMatcher: boolean match()>();

        return $z0;
    }

    public static boolean isomorphic(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        java.util.Iterator $r1, $r4;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r7;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0, r3;
        java.util.List $r2, $r5;
        org.apache.jena.common.IsoMatcher $r6;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r3 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator find()>();

        $r2 = staticinvoke <org.apache.jena.common.IsoMatcher: java.util.List tuplesQuads(java.util.Iterator)>($r1);

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator find()>();

        $r5 = staticinvoke <org.apache.jena.common.IsoMatcher: java.util.List tuplesQuads(java.util.Iterator)>($r4);

        $r6 = new org.apache.jena.common.IsoMatcher;

        $r7 = <com.hp.hpl.jena.sparql.util.NodeUtils: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameTerm>;

        specialinvoke $r6.<org.apache.jena.common.IsoMatcher: void <init>(java.util.List,java.util.List,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r2, $r5, $r7);

        $z0 = specialinvoke $r6.<org.apache.jena.common.IsoMatcher: boolean match()>();

        return $z0;
    }

    public static boolean isomorphic(java.util.List, java.util.List)
    {
        java.util.List r4, r5;
        org.apache.jena.common.IsoMatcher $r2;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r3;
        java.util.ArrayList $r0, $r1;
        boolean $z0;

        r4 := @parameter0: java.util.List;

        r5 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r4);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r5);

        $r2 = new org.apache.jena.common.IsoMatcher;

        $r3 = <com.hp.hpl.jena.sparql.util.NodeUtils: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameTerm>;

        specialinvoke $r2.<org.apache.jena.common.IsoMatcher: void <init>(java.util.List,java.util.List,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r0, $r1, $r3);

        $z0 = specialinvoke $r2.<org.apache.jena.common.IsoMatcher: boolean match()>();

        return $z0;
    }

    private static java.util.List tuplesTriples(java.util.Iterator)
    {
        com.hp.hpl.jena.graph.Node[] $r4;
        java.util.Iterator r1;
        org.apache.jena.atlas.lib.Tuple $r8;
        com.hp.hpl.jena.graph.Node $r5, $r6, $r7;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.graph.Triple r3;
        java.lang.Object $r2;
        boolean $z0;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        $r4 = newarray (com.hp.hpl.jena.graph.Node)[3];

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4[0] = $r5;

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4[1] = $r6;

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r4[2] = $r7;

        $r8 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>($r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return $r0;
    }

    private static java.util.List tuplesQuads(java.util.Iterator)
    {
        com.hp.hpl.jena.graph.Node[] $r4;
        java.util.Iterator r1;
        org.apache.jena.atlas.lib.Tuple $r9;
        com.hp.hpl.jena.graph.Node $r5, $r6, $r7, $r8;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.core.Quad r3;
        java.lang.Object $r2;
        boolean $z0;

        r1 := @parameter0: java.util.Iterator;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.core.Quad) $r2;

        $r4 = newarray (com.hp.hpl.jena.graph.Node)[4];

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r4[0] = $r5;

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4[1] = $r6;

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4[2] = $r7;

        $r8 = virtualinvoke r3.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r4[3] = $r8;

        $r9 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>($r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return $r0;
    }

    private void <init>(java.util.List, java.util.List, com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)
    {
        java.util.List r1, r2;
        org.apache.jena.common.IsoMatcher r0;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest r3;

        r0 := @this: org.apache.jena.common.IsoMatcher;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.common.IsoMatcher: java.util.List tuples1> = r1;

        r0.<org.apache.jena.common.IsoMatcher: java.util.List tuples2> = r2;

        r0.<org.apache.jena.common.IsoMatcher: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest nodeTest> = r3;

        return;
    }

    private boolean match()
    {
        java.util.List $r2, $r3;
        org.apache.jena.common.IsoMatcher r0;
        org.apache.jena.common.IsoMatcher$Mapping $r1;
        boolean $z0;

        r0 := @this: org.apache.jena.common.IsoMatcher;

        $r3 = r0.<org.apache.jena.common.IsoMatcher: java.util.List tuples1>;

        $r2 = r0.<org.apache.jena.common.IsoMatcher: java.util.List tuples2>;

        $r1 = <org.apache.jena.common.IsoMatcher$Mapping: org.apache.jena.common.IsoMatcher$Mapping rootMapping>;

        $z0 = specialinvoke r0.<org.apache.jena.common.IsoMatcher: boolean match(java.util.List,java.util.List,org.apache.jena.common.IsoMatcher$Mapping)>($r3, $r2, $r1);

        return $z0;
    }

    private boolean match(java.util.List, java.util.List, org.apache.jena.common.IsoMatcher$Mapping)
    {
        org.apache.jena.common.IsoMatcher$Cause r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.List r0, r1, $r8;
        java.lang.StringBuilder $r15, $r17, $r19, $r22, $r24, $r25, $r28, $r30, $r31, $r33, $r35, $r36, $r38, $r40, $r41;
        org.apache.jena.atlas.lib.Tuple r5, $r21;
        org.apache.jena.common.IsoMatcher$Mapping r7, $r12, $r18;
        java.util.ArrayList $r2;
        org.apache.jena.common.IsoMatcher r6;
        int $i0, $i1;
        java.lang.String $r20, $r26, $r32, $r37, $r42;
        java.io.PrintStream $r13, $r14, $r16, $r23, $r27, $r29, $r34, $r39;
        java.util.Iterator $r3, $r9;
        java.lang.Object $r4, $r10;

        r6 := @this: org.apache.jena.common.IsoMatcher;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r7 := @parameter2: org.apache.jena.common.IsoMatcher$Mapping;

        $z0 = <org.apache.jena.common.IsoMatcher: boolean DEBUG>;

        if $z0 == 0 goto label01;

        $r27 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>("match: ");

        $r29 = <java.lang.System: java.io.PrintStream out>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r32);

        $r34 = <java.lang.System: java.io.PrintStream out>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r37);

        $r39 = <java.lang.System: java.io.PrintStream out>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r39.<java.io.PrintStream: void println(java.lang.String)>($r42);

     label01:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label02;

        return 0;

     label02:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.jena.atlas.lib.Tuple) $r4;

        $z2 = <org.apache.jena.common.IsoMatcher: boolean DEBUG>;

        if $z2 == 0 goto label03;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  t1 = ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r26);

     label03:
        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r5);

        $r8 = specialinvoke r6.<org.apache.jena.common.IsoMatcher: java.util.List match(org.apache.jena.atlas.lib.Tuple,java.util.Collection,org.apache.jena.common.IsoMatcher$Mapping)>(r5, r1, r7);

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z8 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label10;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.jena.common.IsoMatcher$Cause) $r10;

        $z3 = <org.apache.jena.common.IsoMatcher: boolean DEBUG>;

        if $z3 == 0 goto label05;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Try: ");

        $r18 = r11.<org.apache.jena.common.IsoMatcher$Cause: org.apache.jena.common.IsoMatcher$Mapping mapping>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r20);

     label05:
        $r21 = r11.<org.apache.jena.common.IsoMatcher$Cause: org.apache.jena.atlas.lib.Tuple tuple>;

        interfaceinvoke r1.<java.util.List: boolean remove(java.lang.Object)>($r21);

        $z4 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label06;

        return 1;

     label06:
        $r12 = r11.<org.apache.jena.common.IsoMatcher$Cause: org.apache.jena.common.IsoMatcher$Mapping mapping>;

        $z5 = specialinvoke r6.<org.apache.jena.common.IsoMatcher: boolean match(java.util.List,java.util.List,org.apache.jena.common.IsoMatcher$Mapping)>($r2, r1, $r12);

        if $z5 == 0 goto label08;

        $z7 = <org.apache.jena.common.IsoMatcher: boolean DEBUG>;

        if $z7 == 0 goto label07;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("Yes");

     label07:
        return 1;

     label08:
        $z6 = <org.apache.jena.common.IsoMatcher: boolean DEBUG>;

        if $z6 == 0 goto label09;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("No");

     label09:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label04;

     label10:
        return 0;

     label11:
        return 1;
    }

    private java.util.List match(org.apache.jena.atlas.lib.Tuple, java.util.Collection, org.apache.jena.common.IsoMatcher$Mapping)
    {
        java.util.Iterator $r2;
        org.apache.jena.atlas.lib.Tuple r4, r6;
        java.util.Collection r1;
        org.apache.jena.common.IsoMatcher$Mapping r7, $r8;
        org.apache.jena.common.IsoMatcher$Cause $r9;
        java.util.ArrayList $r0;
        org.apache.jena.common.IsoMatcher r5;
        java.lang.Object $r3;
        boolean $z0;

        r5 := @this: org.apache.jena.common.IsoMatcher;

        r6 := @parameter0: org.apache.jena.atlas.lib.Tuple;

        r1 := @parameter1: java.util.Collection;

        r7 := @parameter2: org.apache.jena.common.IsoMatcher$Mapping;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.jena.atlas.lib.Tuple) $r3;

        $r8 = specialinvoke r5.<org.apache.jena.common.IsoMatcher: org.apache.jena.common.IsoMatcher$Mapping gen(org.apache.jena.atlas.lib.Tuple,org.apache.jena.atlas.lib.Tuple,org.apache.jena.common.IsoMatcher$Mapping)>(r6, r4, r7);

        if $r8 == null goto label2;

        $r9 = new org.apache.jena.common.IsoMatcher$Cause;

        specialinvoke $r9.<org.apache.jena.common.IsoMatcher$Cause: void <init>(org.apache.jena.atlas.lib.Tuple,org.apache.jena.common.IsoMatcher$Mapping)>(r4, $r8);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    private org.apache.jena.common.IsoMatcher$Mapping gen(org.apache.jena.atlas.lib.Tuple, org.apache.jena.atlas.lib.Tuple, org.apache.jena.common.IsoMatcher$Mapping)
    {
        org.apache.jena.atlas.lib.Tuple r0, r1;
        org.apache.jena.common.IsoMatcher$Mapping r2, $r9, r10;
        com.hp.hpl.jena.graph.Node r4, r6;
        org.apache.jena.common.IsoMatcher r7;
        int $i0, $i1, $i2, i3;
        boolean $z0;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r8;
        java.lang.Object $r3, $r5;

        r7 := @this: org.apache.jena.common.IsoMatcher;

        r0 := @parameter0: org.apache.jena.atlas.lib.Tuple;

        r1 := @parameter1: org.apache.jena.atlas.lib.Tuple;

        r2 := @parameter2: org.apache.jena.common.IsoMatcher$Mapping;

        $i0 = virtualinvoke r0.<org.apache.jena.atlas.lib.Tuple: int size()>();

        $i1 = virtualinvoke r1.<org.apache.jena.atlas.lib.Tuple: int size()>();

        if $i0 == $i1 goto label1;

        return null;

     label1:
        r10 = r2;

        i3 = 0;

     label2:
        $i2 = virtualinvoke r0.<org.apache.jena.atlas.lib.Tuple: int size()>();

        if i3 >= $i2 goto label4;

        $r3 = virtualinvoke r0.<org.apache.jena.atlas.lib.Tuple: java.lang.Object get(int)>(i3);

        r4 = (com.hp.hpl.jena.graph.Node) $r3;

        $r5 = virtualinvoke r1.<org.apache.jena.atlas.lib.Tuple: java.lang.Object get(int)>(i3);

        r6 = (com.hp.hpl.jena.graph.Node) $r5;

        $r8 = r7.<org.apache.jena.common.IsoMatcher: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest nodeTest>;

        $z0 = interfaceinvoke $r8.<com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest: boolean equal(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r4, r6);

        if $z0 != 0 goto label3;

        $r9 = specialinvoke r7.<org.apache.jena.common.IsoMatcher: org.apache.jena.common.IsoMatcher$Mapping gen(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,org.apache.jena.common.IsoMatcher$Mapping)>(r4, r6, r10);

        r10 = $r9;

        if $r9 != null goto label3;

        return null;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return r10;
    }

    private org.apache.jena.common.IsoMatcher$Mapping gen(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, org.apache.jena.common.IsoMatcher$Mapping)
    {
        org.apache.jena.common.IsoMatcher$Mapping r2, $r4, $r7;
        com.hp.hpl.jena.graph.Node r0, r1, $r3;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r6;
        org.apache.jena.common.IsoMatcher r5;
        boolean $z0, $z1, $z2, $z3;

        r5 := @this: org.apache.jena.common.IsoMatcher;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: org.apache.jena.common.IsoMatcher$Mapping;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label5;

        $r3 = virtualinvoke r2.<org.apache.jena.common.IsoMatcher$Mapping: com.hp.hpl.jena.graph.Node map(com.hp.hpl.jena.graph.Node)>(r0);

        if $r3 == null goto label3;

        $r6 = r5.<org.apache.jena.common.IsoMatcher: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest nodeTest>;

        $z3 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest: boolean equal(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r3);

        if $z3 == 0 goto label1;

        $r7 = r2;

        goto label2;

     label1:
        $r7 = null;

     label2:
        return $r7;

     label3:
        $z2 = virtualinvoke r2.<org.apache.jena.common.IsoMatcher$Mapping: boolean revmapped(com.hp.hpl.jena.graph.Node)>(r1);

        if $z2 == 0 goto label4;

        return null;

     label4:
        $r4 = new org.apache.jena.common.IsoMatcher$Mapping;

        specialinvoke $r4.<org.apache.jena.common.IsoMatcher$Mapping: void <init>(org.apache.jena.common.IsoMatcher$Mapping,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r0, r1);

        return $r4;

     label5:
        return null;
    }

    static void <clinit>()
    {
        <org.apache.jena.common.IsoMatcher: boolean DEBUG> = 0;

        return;
    }
}
