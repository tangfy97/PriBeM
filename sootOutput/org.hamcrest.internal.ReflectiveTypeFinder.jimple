public class org.hamcrest.internal.ReflectiveTypeFinder extends java.lang.Object
{
    private final java.lang.String methodName;
    private final int expectedNumberOfParameters;
    private final int typedParameter;

    public void <init>(java.lang.String, int, int)
    {
        org.hamcrest.internal.ReflectiveTypeFinder r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.hamcrest.internal.ReflectiveTypeFinder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.hamcrest.internal.ReflectiveTypeFinder: java.lang.String methodName> = r1;

        r0.<org.hamcrest.internal.ReflectiveTypeFinder: int expectedNumberOfParameters> = i0;

        r0.<org.hamcrest.internal.ReflectiveTypeFinder: int typedParameter> = i1;

        return;
    }

    public java.lang.Class findExpectedType(java.lang.Class)
    {
        org.hamcrest.internal.ReflectiveTypeFinder r4;
        java.lang.Error $r1;
        java.lang.reflect.Method[] $r9;
        int i0, i1;
        java.lang.String $r5, $r8;
        java.lang.reflect.Method r10;
        boolean $z0;
        java.lang.Class r0, $r11, r12;
        java.lang.StringBuilder $r2, $r3, $r6, $r7;

        r4 := @this: org.hamcrest.internal.ReflectiveTypeFinder;

        r0 := @parameter0: java.lang.Class;

        r12 = r0;

     label1:
        if r12 == class "Ljava/lang/Object;" goto label5;

        $r9 = virtualinvoke r12.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r9;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r10 = $r9[i1];

        $z0 = virtualinvoke r4.<org.hamcrest.internal.ReflectiveTypeFinder: boolean canObtainExpectedTypeFrom(java.lang.reflect.Method)>(r10);

        if $z0 == 0 goto label3;

        $r11 = virtualinvoke r4.<org.hamcrest.internal.ReflectiveTypeFinder: java.lang.Class expectedTypeFrom(java.lang.reflect.Method)>(r10);

        return $r11;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        r12 = virtualinvoke r12.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label5:
        $r1 = new java.lang.Error;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot determine correct type for ");

        $r5 = r4.<org.hamcrest.internal.ReflectiveTypeFinder: java.lang.String methodName>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("() method.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.Error: void <init>(java.lang.String)>($r8);

        throw $r1;
    }

    protected boolean canObtainExpectedTypeFrom(java.lang.reflect.Method)
    {
        org.hamcrest.internal.ReflectiveTypeFinder r2;
        java.lang.Class[] $r4;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2;

        r2 := @this: org.hamcrest.internal.ReflectiveTypeFinder;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = r2.<org.hamcrest.internal.ReflectiveTypeFinder: java.lang.String methodName>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r4;

        $i0 = r2.<org.hamcrest.internal.ReflectiveTypeFinder: int expectedNumberOfParameters>;

        if $i1 != $i0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean isSynthetic()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    protected java.lang.Class expectedTypeFrom(java.lang.reflect.Method)
    {
        org.hamcrest.internal.ReflectiveTypeFinder r2;
        int $i0;
        java.lang.Class[] $r1;
        java.lang.Class $r3;
        java.lang.reflect.Method r0;

        r2 := @this: org.hamcrest.internal.ReflectiveTypeFinder;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = r2.<org.hamcrest.internal.ReflectiveTypeFinder: int typedParameter>;

        $r3 = $r1[$i0];

        return $r3;
    }
}
