public abstract class org.springframework.aop.support.ClassFilters extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.aop.support.ClassFilters r0;

        r0 := @this: org.springframework.aop.support.ClassFilters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.springframework.aop.ClassFilter union(org.springframework.aop.ClassFilter, org.springframework.aop.ClassFilter)
    {
        org.springframework.aop.ClassFilter r0, r1;
        org.springframework.aop.ClassFilter[] $r3;
        org.springframework.aop.support.ClassFilters$UnionClassFilter $r2;

        r0 := @parameter0: org.springframework.aop.ClassFilter;

        r1 := @parameter1: org.springframework.aop.ClassFilter;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "First ClassFilter must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Second ClassFilter must not be null");

        $r2 = new org.springframework.aop.support.ClassFilters$UnionClassFilter;

        $r3 = newarray (org.springframework.aop.ClassFilter)[2];

        $r3[0] = r0;

        $r3[1] = r1;

        specialinvoke $r2.<org.springframework.aop.support.ClassFilters$UnionClassFilter: void <init>(org.springframework.aop.ClassFilter[])>($r3);

        return $r2;
    }

    public static org.springframework.aop.ClassFilter union(org.springframework.aop.ClassFilter[])
    {
        org.springframework.aop.ClassFilter[] r0;
        org.springframework.aop.support.ClassFilters$UnionClassFilter $r1;

        r0 := @parameter0: org.springframework.aop.ClassFilter[];

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>(r0, "ClassFilter array must not be empty");

        $r1 = new org.springframework.aop.support.ClassFilters$UnionClassFilter;

        specialinvoke $r1.<org.springframework.aop.support.ClassFilters$UnionClassFilter: void <init>(org.springframework.aop.ClassFilter[])>(r0);

        return $r1;
    }

    public static org.springframework.aop.ClassFilter intersection(org.springframework.aop.ClassFilter, org.springframework.aop.ClassFilter)
    {
        org.springframework.aop.ClassFilter r0, r1;
        org.springframework.aop.support.ClassFilters$IntersectionClassFilter $r2;
        org.springframework.aop.ClassFilter[] $r3;

        r0 := @parameter0: org.springframework.aop.ClassFilter;

        r1 := @parameter1: org.springframework.aop.ClassFilter;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "First ClassFilter must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Second ClassFilter must not be null");

        $r2 = new org.springframework.aop.support.ClassFilters$IntersectionClassFilter;

        $r3 = newarray (org.springframework.aop.ClassFilter)[2];

        $r3[0] = r0;

        $r3[1] = r1;

        specialinvoke $r2.<org.springframework.aop.support.ClassFilters$IntersectionClassFilter: void <init>(org.springframework.aop.ClassFilter[])>($r3);

        return $r2;
    }

    public static org.springframework.aop.ClassFilter intersection(org.springframework.aop.ClassFilter[])
    {
        org.springframework.aop.support.ClassFilters$IntersectionClassFilter $r1;
        org.springframework.aop.ClassFilter[] r0;

        r0 := @parameter0: org.springframework.aop.ClassFilter[];

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>(r0, "ClassFilter array must not be empty");

        $r1 = new org.springframework.aop.support.ClassFilters$IntersectionClassFilter;

        specialinvoke $r1.<org.springframework.aop.support.ClassFilters$IntersectionClassFilter: void <init>(org.springframework.aop.ClassFilter[])>(r0);

        return $r1;
    }
}
