public class com.jhlabs.image.MirrorFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private float opacity;
    private float centreY;
    private float distance;
    private float angle;
    private float rotation;
    private float gap;

    public void <init>()
    {
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.MirrorFilter: float opacity> = 1.0F;

        r0.<com.jhlabs.image.MirrorFilter: float centreY> = 0.5F;

        return;
    }

    public void setAngle(float)
    {
        float f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MirrorFilter: float angle> = f0;

        return;
    }

    public float getAngle()
    {
        float $f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        $f0 = r0.<com.jhlabs.image.MirrorFilter: float angle>;

        return $f0;
    }

    public void setDistance(float)
    {
        float f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MirrorFilter: float distance> = f0;

        return;
    }

    public float getDistance()
    {
        float $f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        $f0 = r0.<com.jhlabs.image.MirrorFilter: float distance>;

        return $f0;
    }

    public void setRotation(float)
    {
        float f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MirrorFilter: float rotation> = f0;

        return;
    }

    public float getRotation()
    {
        float $f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        $f0 = r0.<com.jhlabs.image.MirrorFilter: float rotation>;

        return $f0;
    }

    public void setGap(float)
    {
        float f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MirrorFilter: float gap> = f0;

        return;
    }

    public float getGap()
    {
        float $f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        $f0 = r0.<com.jhlabs.image.MirrorFilter: float gap>;

        return $f0;
    }

    public void setOpacity(float)
    {
        float f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MirrorFilter: float opacity> = f0;

        return;
    }

    public float getOpacity()
    {
        float $f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        $f0 = r0.<com.jhlabs.image.MirrorFilter: float opacity>;

        return $f0;
    }

    public void setCentreY(float)
    {
        float f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MirrorFilter: float centreY> = f0;

        return;
    }

    public float getCentreY()
    {
        float $f0;
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        $f0 = r0.<com.jhlabs.image.MirrorFilter: float centreY>;

        return $f0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.Color $r5, $r6;
        java.awt.AlphaComposite $r7;
        com.jhlabs.image.MirrorFilter r1;
        java.awt.Graphics2D $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.awt.Shape $r3;
        java.awt.image.BufferedImage r0, r8;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.awt.GradientPaint $r4;

        r1 := @this: com.jhlabs.image.MirrorFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r8 := @parameter1: java.awt.image.BufferedImage;

        if r8 != null goto label1;

        r8 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $f1 = r1.<com.jhlabs.image.MirrorFilter: float centreY>;

        $f0 = (float) $i1;

        $f2 = $f1 * $f0;

        $i7 = (int) $f2;

        $f4 = r1.<com.jhlabs.image.MirrorFilter: float gap>;

        $f3 = (float) $i1;

        $f5 = $f4 * $f3;

        $i8 = (int) $f5;

        $r2 = virtualinvoke r8.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r3 = virtualinvoke $r2.<java.awt.Graphics: java.awt.Shape getClip()>();

        virtualinvoke $r2.<java.awt.Graphics: void clipRect(int,int,int,int)>(0, 0, $i0, $i7);

        virtualinvoke $r2.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r0, null);

        virtualinvoke $r2.<java.awt.Graphics: void setClip(java.awt.Shape)>($r3);

        $i4 = $i7 + $i8;

        $i2 = $i1 - $i7;

        $i3 = $i2 - $i8;

        virtualinvoke $r2.<java.awt.Graphics: void clipRect(int,int,int,int)>(0, $i4, $i0, $i3);

        $i5 = 2 * $i7;

        $i6 = $i5 + $i8;

        virtualinvoke $r2.<java.awt.Graphics2D: void translate(int,int)>(0, $i6);

        virtualinvoke $r2.<java.awt.Graphics2D: void scale(double,double)>(1.0, -1.0);

        virtualinvoke $r2.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r0, null);

        $r4 = new java.awt.GradientPaint;

        $r5 = new java.awt.Color;

        specialinvoke $r5.<java.awt.Color: void <init>(float,float,float,float)>(1.0F, 0.0F, 0.0F, 0.0F);

        $f7 = (float) $i7;

        $r6 = new java.awt.Color;

        $f6 = r1.<com.jhlabs.image.MirrorFilter: float opacity>;

        specialinvoke $r6.<java.awt.Color: void <init>(float,float,float,float)>(0.0F, 1.0F, 0.0F, $f6);

        specialinvoke $r4.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color)>(0.0F, 0.0F, $r5, 0.0F, $f7, $r6);

        virtualinvoke $r2.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r4);

        $r7 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int)>(6);

        virtualinvoke $r2.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r7);

        virtualinvoke $r2.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i0, $i7);

        virtualinvoke $r2.<java.awt.Graphics: void setClip(java.awt.Shape)>($r3);

        virtualinvoke $r2.<java.awt.Graphics: void dispose()>();

        return r8;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.MirrorFilter r0;

        r0 := @this: com.jhlabs.image.MirrorFilter;

        return "Effects/Mirror...";
    }
}
