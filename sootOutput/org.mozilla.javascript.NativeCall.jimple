public final class org.mozilla.javascript.NativeCall extends org.mozilla.javascript.IdScriptableObject
{
    static final long serialVersionUID;
    private static final java.lang.Object CALL_TAG;
    private static final int Id_constructor;
    private static final int MAX_PROTOTYPE_ID;
    org.mozilla.javascript.NativeFunction function;
    java.lang.Object[] originalArgs;
    transient org.mozilla.javascript.NativeCall parentActivationCall;

    static void init(org.mozilla.javascript.Scriptable, boolean)
    {
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.NativeCall $r0;
        boolean z0;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        z0 := @parameter1: boolean;

        $r0 = new org.mozilla.javascript.NativeCall;

        specialinvoke $r0.<org.mozilla.javascript.NativeCall: void <init>()>();

        virtualinvoke $r0.<org.mozilla.javascript.NativeCall: org.mozilla.javascript.IdFunctionObject exportAsJSClass(int,org.mozilla.javascript.Scriptable,boolean)>(1, r1, z0);

        return;
    }

    void <init>()
    {
        org.mozilla.javascript.NativeCall r0;

        r0 := @this: org.mozilla.javascript.NativeCall;

        specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: void <init>()>();

        return;
    }

    void <init>(org.mozilla.javascript.NativeFunction, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Object[] r3, $r8;
        org.mozilla.javascript.NativeFunction r1;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r4, $r7;
        org.mozilla.javascript.Arguments $r6;
        org.mozilla.javascript.NativeCall r0;
        boolean $z0, $z1;
        org.mozilla.javascript.Scriptable r2;
        java.lang.Object $r5, $r9;

        r0 := @this: org.mozilla.javascript.NativeCall;

        r1 := @parameter0: org.mozilla.javascript.NativeFunction;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: void <init>()>();

        r0.<org.mozilla.javascript.NativeCall: org.mozilla.javascript.NativeFunction function> = r1;

        virtualinvoke r0.<org.mozilla.javascript.NativeCall: void setParentScope(org.mozilla.javascript.Scriptable)>(r2);

        if r3 != null goto label01;

        $r8 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        goto label02;

     label01:
        $r8 = r3;

     label02:
        r0.<org.mozilla.javascript.NativeCall: java.lang.Object[] originalArgs> = $r8;

        $i0 = virtualinvoke r1.<org.mozilla.javascript.NativeFunction: int getParamAndVarCount()>();

        $i1 = virtualinvoke r1.<org.mozilla.javascript.NativeFunction: int getParamCount()>();

        if $i0 == 0 goto label06;

        i3 = 0;

     label03:
        if i3 == $i1 goto label06;

        $r7 = virtualinvoke r1.<org.mozilla.javascript.NativeFunction: java.lang.String getParamOrVarName(int)>(i3);

        $i2 = lengthof r3;

        if i3 >= $i2 goto label04;

        $r9 = r3[i3];

        goto label05;

     label04:
        $r9 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

     label05:
        virtualinvoke r0.<org.mozilla.javascript.NativeCall: void defineProperty(java.lang.String,java.lang.Object,int)>($r7, $r9, 4);

        i3 = i3 + 1;

        goto label03;

     label06:
        $z0 = specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: boolean has(java.lang.String,org.mozilla.javascript.Scriptable)>("arguments", r0);

        if $z0 != 0 goto label07;

        $r6 = new org.mozilla.javascript.Arguments;

        specialinvoke $r6.<org.mozilla.javascript.Arguments: void <init>(org.mozilla.javascript.NativeCall)>(r0);

        virtualinvoke r0.<org.mozilla.javascript.NativeCall: void defineProperty(java.lang.String,java.lang.Object,int)>("arguments", $r6, 4);

     label07:
        if $i0 == 0 goto label10;

        i4 = $i1;

     label08:
        if i4 == $i0 goto label10;

        $r4 = virtualinvoke r1.<org.mozilla.javascript.NativeFunction: java.lang.String getParamOrVarName(int)>(i4);

        $z1 = specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: boolean has(java.lang.String,org.mozilla.javascript.Scriptable)>($r4, r0);

        if $z1 != 0 goto label09;

        $r5 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        virtualinvoke r0.<org.mozilla.javascript.NativeCall: void defineProperty(java.lang.String,java.lang.Object,int)>($r4, $r5, 4);

     label09:
        i4 = i4 + 1;

        goto label08;

     label10:
        return;
    }

    public java.lang.String getClassName()
    {
        org.mozilla.javascript.NativeCall r0;

        r0 := @this: org.mozilla.javascript.NativeCall;

        return "Call";
    }

    protected int findPrototypeId(java.lang.String)
    {
        byte $b0;
        java.lang.String r0;
        org.mozilla.javascript.NativeCall r1;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.NativeCall;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("constructor");

        if $z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        return $b0;
    }

    protected void initPrototypeId(int)
    {
        int i0;
        java.lang.Object $r3;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r0;
        org.mozilla.javascript.NativeCall r2;

        r2 := @this: org.mozilla.javascript.NativeCall;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r0;

     label2:
        $r3 = <org.mozilla.javascript.NativeCall: java.lang.Object CALL_TAG>;

        virtualinvoke r2.<org.mozilla.javascript.NativeCall: void initPrototypeMethod(java.lang.Object,int,java.lang.String,int)>($r3, i0, "constructor", 1);

        return;
    }

    public java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Object[] r11;
        org.mozilla.javascript.Context r5;
        org.mozilla.javascript.EvaluatorException $r9;
        java.lang.IllegalArgumentException $r2;
        org.mozilla.javascript.IdFunctionObject r0;
        org.mozilla.javascript.Scriptable r4, r7, $r8;
        int $i0;
        java.lang.Object $r1, $r12;
        java.lang.String $r3;
        org.mozilla.javascript.NativeCall $r6, r10;
        boolean $z0;

        r10 := @this: org.mozilla.javascript.NativeCall;

        r0 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        r5 := @parameter1: org.mozilla.javascript.Context;

        r7 := @parameter2: org.mozilla.javascript.Scriptable;

        r4 := @parameter3: org.mozilla.javascript.Scriptable;

        r11 := @parameter4: java.lang.Object[];

        $r1 = <org.mozilla.javascript.NativeCall: java.lang.Object CALL_TAG>;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: boolean hasTag(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r12 = specialinvoke r10.<org.mozilla.javascript.IdScriptableObject: java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r0, r5, r7, r4, r11);

        return $r12;

     label1:
        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: int methodId()>();

        if $i0 != 1 goto label3;

        if r4 == null goto label2;

        $r9 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.only.from.new", "Call");

        throw $r9;

     label2:
        staticinvoke <org.mozilla.javascript.ScriptRuntime: void checkDeprecated(org.mozilla.javascript.Context,java.lang.String)>(r5, "Call");

        $r6 = new org.mozilla.javascript.NativeCall;

        specialinvoke $r6.<org.mozilla.javascript.NativeCall: void <init>()>();

        $r8 = staticinvoke <org.mozilla.javascript.NativeCall: org.mozilla.javascript.Scriptable getObjectPrototype(org.mozilla.javascript.Scriptable)>(r7);

        virtualinvoke $r6.<org.mozilla.javascript.NativeCall: void setPrototype(org.mozilla.javascript.Scriptable)>($r8);

        return $r6;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.mozilla.javascript.NativeCall: int MAX_PROTOTYPE_ID> = 1;

        <org.mozilla.javascript.NativeCall: int Id_constructor> = 1;

        <org.mozilla.javascript.NativeCall: long serialVersionUID> = -7471457301304454454L;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.mozilla.javascript.NativeCall: java.lang.Object CALL_TAG> = $r0;

        return;
    }
}
