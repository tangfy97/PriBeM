class org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder extends java.lang.Object
{
    public final java.lang.Object[] rawArguments;
    public final java.lang.Object[] arguments;
    public final java.lang.Object[] preparedArguments;
    public boolean resolveNecessary;

    public void <init>(int)
    {
        java.lang.Object[] $r1, $r2, $r3;
        int i0;
        org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder r0;

        r0 := @this: org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: boolean resolveNecessary> = 0;

        $r1 = newarray (java.lang.Object)[i0];

        r0.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] rawArguments> = $r1;

        $r2 = newarray (java.lang.Object)[i0];

        r0.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] arguments> = $r2;

        $r3 = newarray (java.lang.Object)[i0];

        r0.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] preparedArguments> = $r3;

        return;
    }

    public void <init>(java.lang.Object[])
    {
        java.lang.Object[] r1;
        org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder r0;

        r0 := @this: org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: boolean resolveNecessary> = 0;

        r0.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] rawArguments> = r1;

        r0.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] arguments> = r1;

        r0.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] preparedArguments> = r1;

        return;
    }

    public int getTypeDifferenceWeight(java.lang.Class[])
    {
        java.lang.Object[] $r2, $r3;
        java.lang.Class[] r0;
        org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder r1;
        int $i0, $i1, i2, $i3;

        r1 := @this: org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder;

        r0 := @parameter0: java.lang.Class[];

        $r2 = r1.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] arguments>;

        $i0 = staticinvoke <org.springframework.util.MethodInvoker: int getTypeDifferenceWeight(java.lang.Class[],java.lang.Object[])>(r0, $r2);

        $r3 = r1.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] rawArguments>;

        $i1 = staticinvoke <org.springframework.util.MethodInvoker: int getTypeDifferenceWeight(java.lang.Class[],java.lang.Object[])>(r0, $r3);

        i2 = $i1 - 1024;

        if i2 >= $i0 goto label1;

        $i3 = i2;

        goto label2;

     label1:
        $i3 = $i0;

     label2:
        return $i3;
    }

    public int getAssignabilityWeight(java.lang.Class[])
    {
        java.lang.Object[] $r2, $r5;
        java.lang.Class[] r0;
        org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder r1;
        int $i0, $i1, i2, i3;
        java.lang.Object $r3, $r6;
        java.lang.Class $r4, $r7;
        boolean $z0, $z1;

        r1 := @this: org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder;

        r0 := @parameter0: java.lang.Class[];

        i2 = 0;

        goto label3;

     label1:
        $r4 = r0[i2];

        $r2 = r1.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] arguments>;

        $r3 = $r2[i2];

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>($r4, $r3);

        if $z0 != 0 goto label2;

        return 2147483647;

     label2:
        i2 = i2 + 1;

     label3:
        $i0 = lengthof r0;

        if i2 < $i0 goto label1;

        i3 = 0;

        goto label6;

     label4:
        $r7 = r0[i3];

        $r5 = r1.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] rawArguments>;

        $r6 = $r5[i3];

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>($r7, $r6);

        if $z1 != 0 goto label5;

        return 2147483135;

     label5:
        i3 = i3 + 1;

     label6:
        $i1 = lengthof r0;

        if i3 < $i1 goto label4;

        return 2147482623;
    }

    public void storeCache(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        java.lang.Throwable $r6;
        java.lang.Object[] $r4, $r5;
        org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder r3;
        java.lang.Object $r1, r2;
        boolean $z0;

        r3 := @this: org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder;

        r0 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r2 := @parameter1: java.lang.Object;

        $r1 = r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object constructorArgumentLock>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object resolvedConstructorOrFactoryMethod> = r2;

        r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean constructorArgumentsResolved> = 1;

        $z0 = r3.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: boolean resolveNecessary>;

        if $z0 == 0 goto label2;

        $r5 = r3.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] preparedArguments>;

        r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object[] preparedConstructorArguments> = $r5;

        goto label3;

     label2:
        $r4 = r3.<org.springframework.beans.factory.support.ConstructorResolver$ArgumentsHolder: java.lang.Object[] arguments>;

        r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object[] resolvedConstructorArguments> = $r4;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
}
