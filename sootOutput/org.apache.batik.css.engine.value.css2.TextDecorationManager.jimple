public class org.apache.batik.css.engine.value.css2.TextDecorationManager extends org.apache.batik.css.engine.value.AbstractValueManager
{
    protected static final org.apache.batik.css.engine.value.StringMap values;

    public void <init>()
    {
        org.apache.batik.css.engine.value.css2.TextDecorationManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.TextDecorationManager;

        specialinvoke r0.<org.apache.batik.css.engine.value.AbstractValueManager: void <init>()>();

        return;
    }

    public boolean isInheritedProperty()
    {
        org.apache.batik.css.engine.value.css2.TextDecorationManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.TextDecorationManager;

        return 0;
    }

    public boolean isAnimatableProperty()
    {
        org.apache.batik.css.engine.value.css2.TextDecorationManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.TextDecorationManager;

        return 1;
    }

    public boolean isAdditiveProperty()
    {
        org.apache.batik.css.engine.value.css2.TextDecorationManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.TextDecorationManager;

        return 0;
    }

    public int getPropertyType()
    {
        org.apache.batik.css.engine.value.css2.TextDecorationManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.TextDecorationManager;

        return 18;
    }

    public java.lang.String getPropertyName()
    {
        org.apache.batik.css.engine.value.css2.TextDecorationManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.TextDecorationManager;

        return "text-decoration";
    }

    public org.apache.batik.css.engine.value.Value getDefaultValue()
    {
        org.apache.batik.css.engine.value.css2.TextDecorationManager r1;
        org.apache.batik.css.engine.value.Value $r0;

        r1 := @this: org.apache.batik.css.engine.value.css2.TextDecorationManager;

        $r0 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r0;
    }

    public org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.CSSEngine r16;
        short $s0, $s1, $s2, $s3;
        org.w3c.dom.DOMException $r3, $r12, $r15;
        org.w3c.css.sac.LexicalUnit $r10, r17;
        int $i4, $i5;
        java.lang.String $r0, $r4, $r5, $r6, $r11;
        boolean $z0;
        org.apache.batik.css.engine.value.Value $r9, $r13, $r14;
        org.apache.batik.css.engine.value.ListValue $r18;
        org.apache.batik.css.engine.value.css2.TextDecorationManager r2;
        java.lang.Object $r8;
        org.apache.batik.css.engine.value.StringMap $r7;

        r2 := @this: org.apache.batik.css.engine.value.css2.TextDecorationManager;

        r17 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r16 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        $s0 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i4 = (int) $s0;

        lookupswitch($i4)
        {
            case 12: goto label1;
            case 35: goto label2;
            default: goto label8;
        };

     label1:
        $r14 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        return $r14;

     label2:
        $r0 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z0 == 0 goto label3;

        $r13 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r13;

     label3:
        $r18 = new org.apache.batik.css.engine.value.ListValue;

        specialinvoke $r18.<org.apache.batik.css.engine.value.ListValue: void <init>(char)>(32);

     label4:
        $s1 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i5 = (int) $s1;

        if $i5 != 35 goto label6;

        $r4 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String intern()>();

        $r7 = <org.apache.batik.css.engine.value.css2.TextDecorationManager: org.apache.batik.css.engine.value.StringMap values>;

        $r8 = virtualinvoke $r7.<org.apache.batik.css.engine.value.StringMap: java.lang.Object get(java.lang.String)>($r6);

        if $r8 != null goto label5;

        $r11 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r12 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>($r11);

        throw $r12;

     label5:
        $r9 = (org.apache.batik.css.engine.value.Value) $r8;

        virtualinvoke $r18.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r9);

        $r10 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        r17 = $r10;

        goto label7;

     label6:
        $s2 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r3 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s2);

        throw $r3;

     label7:
        if $r10 != null goto label4;

        return $r18;

     label8:
        $s3 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r15 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s3);

        throw $r15;
    }

    public org.apache.batik.css.engine.value.Value createStringValue(short, java.lang.String, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.value.Value $r1;
        org.apache.batik.css.engine.CSSEngine r5;
        short s0;
        org.apache.batik.css.engine.value.css2.TextDecorationManager r2;
        org.w3c.dom.DOMException $r3, $r4;
        int $i1;
        java.lang.String r0;
        boolean $z0;

        r2 := @this: org.apache.batik.css.engine.value.css2.TextDecorationManager;

        s0 := @parameter0: short;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        $i1 = (int) s0;

        if $i1 == 21 goto label1;

        $r4 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidStringTypeDOMException(short)>(s0);

        throw $r4;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>(r0);

        throw $r3;

     label2:
        $r1 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.batik.css.engine.value.Value $r1, $r3, $r5, $r7;
        org.apache.batik.css.engine.value.StringMap $r0, $r2, $r4, $r6, $r8;

        $r0 = new org.apache.batik.css.engine.value.StringMap;

        specialinvoke $r0.<org.apache.batik.css.engine.value.StringMap: void <init>()>();

        <org.apache.batik.css.engine.value.css2.TextDecorationManager: org.apache.batik.css.engine.value.StringMap values> = $r0;

        $r2 = <org.apache.batik.css.engine.value.css2.TextDecorationManager: org.apache.batik.css.engine.value.StringMap values>;

        $r1 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value BLINK_VALUE>;

        virtualinvoke $r2.<org.apache.batik.css.engine.value.StringMap: java.lang.Object put(java.lang.String,java.lang.Object)>("blink", $r1);

        $r4 = <org.apache.batik.css.engine.value.css2.TextDecorationManager: org.apache.batik.css.engine.value.StringMap values>;

        $r3 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value LINE_THROUGH_VALUE>;

        virtualinvoke $r4.<org.apache.batik.css.engine.value.StringMap: java.lang.Object put(java.lang.String,java.lang.Object)>("line-through", $r3);

        $r6 = <org.apache.batik.css.engine.value.css2.TextDecorationManager: org.apache.batik.css.engine.value.StringMap values>;

        $r5 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value OVERLINE_VALUE>;

        virtualinvoke $r6.<org.apache.batik.css.engine.value.StringMap: java.lang.Object put(java.lang.String,java.lang.Object)>("overline", $r5);

        $r8 = <org.apache.batik.css.engine.value.css2.TextDecorationManager: org.apache.batik.css.engine.value.StringMap values>;

        $r7 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value UNDERLINE_VALUE>;

        virtualinvoke $r8.<org.apache.batik.css.engine.value.StringMap: java.lang.Object put(java.lang.String,java.lang.Object)>("underline", $r7);

        return;
    }
}
