class org.joda.time.format.DateTimeFormatterBuilder$Fraction extends java.lang.Object implements org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser
{
    private final org.joda.time.DateTimeFieldType iFieldType;
    protected int iMinDigits;
    protected int iMaxDigits;

    protected void <init>(org.joda.time.DateTimeFieldType, int, int)
    {
        int i0, i1;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType> = r1;

        if i1 <= 18 goto label1;

        i1 = 18;

     label1:
        r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits> = i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> = i1;

        return;
    }

    public int estimatePrintedLength()
    {
        int $i0;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

        return $i0;
    }

    public void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.DateTimeZone r4;
        org.joda.time.Chronology r2;
        long l0;
        java.io.IOException $r3;
        java.lang.StringBuffer r1;
        java.util.Locale r5;
        int i1;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r1 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r4 := @parameter4: org.joda.time.DateTimeZone;

        r5 := @parameter5: java.util.Locale;

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(r1, null, l0, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.DateTimeZone r3;
        java.util.Locale r4;
        java.io.Writer r1;
        org.joda.time.Chronology r2;
        int i1;
        long l0;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r1 := @parameter0: java.io.Writer;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(null, r1, l0, r2);

        return;
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.Chronology $r1, $r4;
        long $l0;
        java.io.IOException $r5;
        java.lang.StringBuffer r3;
        java.util.Locale r6;
        org.joda.time.ReadablePartial r0;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r2;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r3 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: org.joda.time.ReadablePartial;

        r6 := @parameter2: java.util.Locale;

        $r1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke $r1.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, 0L);

     label1:
        $r4 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(r3, null, $l0, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        java.util.Locale r5;
        org.joda.time.ReadablePartial r0;
        org.joda.time.Chronology $r1, $r4;
        java.io.Writer r3;
        long $l0;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r2;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r3 := @parameter0: java.io.Writer;

        r0 := @parameter1: org.joda.time.ReadablePartial;

        r5 := @parameter2: java.util.Locale;

        $r1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke $r1.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, 0L);

        $r4 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(null, r3, $l0, $r4);

        return;
    }

    protected void printTo(java.lang.StringBuffer, java.io.Writer, long, org.joda.time.Chronology) throws java.io.IOException
    {
        byte $b2, $b7;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        java.io.Writer r6;
        long l0, $l1, l3, $l4, $l6;
        long[] $r4;
        java.lang.StringBuffer r5;
        int i5, $i8, $i11, $i13, i14, i15, i16, $i17, i18, i19, $i21, $i23, $i25, $i27, $i28, $i30, $i32, $i33;
        java.lang.String r8;
        org.joda.time.Chronology r1;
        char $c9, $c10, $c12;
        java.lang.RuntimeException $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r5 := @parameter0: java.lang.StringBuffer;

        r6 := @parameter1: java.io.Writer;

        l0 := @parameter2: long;

        r1 := @parameter3: org.joda.time.Chronology;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1);

        i14 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits>;

     label01:
        $l1 = virtualinvoke $r3.<org.joda.time.DateTimeField: long remainder(long)>(l0);

     label02:
        goto label06;

     label03:
        $r7 := @caughtexception;

        if r5 == null goto label04;

        staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.StringBuffer,int)>(r5, i14);

        goto label05;

     label04:
        staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void printUnknownString(java.io.Writer,int)>(r6, i14);

     label05:
        return;

     label06:
        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label10;

        if r5 == null goto label08;

     label07:
        $i21 = (int) -1;

        i14 = i14 + $i21;

        if i14 < 0 goto label09;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label07;

     label08:
        $i23 = (int) -1;

        i14 = i14 + $i23;

        if i14 < 0 goto label09;

        virtualinvoke r6.<java.io.Writer: void write(int)>(48);

        goto label08;

     label09:
        return;

     label10:
        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>($l1, $r3);

        l3 = $r4[0];

        $l4 = $r4[1];

        i5 = (int) $l4;

        $l6 = l3 & 2147483647L;

        $b7 = $l6 cmp l3;

        if $b7 != 0 goto label11;

        $i13 = (int) l3;

        r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i13);

        goto label12;

     label11:
        r8 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l3);

     label12:
        $i8 = virtualinvoke r8.<java.lang.String: int length()>();

        i15 = $i8;

        i16 = i5;

     label13:
        if $i8 >= i16 goto label16;

        if r5 == null goto label14;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label15;

     label14:
        virtualinvoke r6.<java.io.Writer: void write(int)>(48);

     label15:
        $i25 = (int) -1;

        i14 = i14 + $i25;

        $i27 = (int) -1;

        i16 = i16 + $i27;

        goto label13;

     label16:
        if i14 >= i16 goto label24;

     label17:
        if i14 >= i16 goto label19;

        if i15 <= 1 goto label19;

        $i11 = i15 - 1;

        $c12 = virtualinvoke r8.<java.lang.String: char charAt(int)>($i11);

        $i28 = (int) $c12;

        if $i28 == 48 goto label18;

        goto label19;

     label18:
        $i30 = (int) -1;

        i16 = i16 + $i30;

        $i32 = (int) -1;

        i15 = i15 + $i32;

        goto label17;

     label19:
        $i17 = virtualinvoke r8.<java.lang.String: int length()>();

        if i15 >= $i17 goto label24;

        if r5 == null goto label21;

        i18 = 0;

     label20:
        if i18 >= i15 goto label23;

        $c10 = virtualinvoke r8.<java.lang.String: char charAt(int)>(i18);

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10);

        i18 = i18 + 1;

        goto label20;

     label21:
        i19 = 0;

     label22:
        if i19 >= i15 goto label23;

        $c9 = virtualinvoke r8.<java.lang.String: char charAt(int)>(i19);

        $i33 = (int) $c9;

        virtualinvoke r6.<java.io.Writer: void write(int)>($i33);

        i19 = i19 + 1;

        goto label22;

     label23:
        return;

     label24:
        if r5 == null goto label25;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        goto label26;

     label25:
        virtualinvoke r6.<java.io.Writer: void write(java.lang.String)>(r8);

     label26:
        return;

        catch java.lang.RuntimeException from label01 to label02 with label03;
    }

    private long[] getFractionData(long, org.joda.time.DateTimeField)
    {
        long $l0, l1, $l2, $l3, $l4, l6, $l7, $l8, l10, l11, l12;
        long[] $r3;
        byte $b9;
        int i5, $i14;
        org.joda.time.DateTimeField r0;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r2;
        org.joda.time.DurationField $r1;

        r2 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        l1 := @parameter0: long;

        r0 := @parameter1: org.joda.time.DateTimeField;

        $r1 = virtualinvoke r0.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>();

        i5 = r2.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

     label01:
        tableswitch(i5)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label11;
            case 10: goto label12;
            case 11: goto label13;
            case 12: goto label14;
            case 13: goto label15;
            case 14: goto label16;
            case 15: goto label17;
            case 16: goto label18;
            case 17: goto label19;
            case 18: goto label20;
            default: goto label02;
        };

     label02:
        l6 = 1L;

        l12 = 1L;

        l11 = 1L;

        l10 = 1L;

        goto label21;

     label03:
        l6 = 10L;

        l12 = 10L;

        l11 = 10L;

        l10 = 10L;

        goto label21;

     label04:
        l6 = 100L;

        l12 = 100L;

        l11 = 100L;

        l10 = 100L;

        goto label21;

     label05:
        l6 = 1000L;

        l12 = 1000L;

        l11 = 1000L;

        l10 = 1000L;

        goto label21;

     label06:
        l6 = 10000L;

        l12 = 10000L;

        l11 = 10000L;

        l10 = 10000L;

        goto label21;

     label07:
        l6 = 100000L;

        l12 = 100000L;

        l11 = 100000L;

        l10 = 100000L;

        goto label21;

     label08:
        l6 = 1000000L;

        l12 = 1000000L;

        l11 = 1000000L;

        l10 = 1000000L;

        goto label21;

     label09:
        l6 = 10000000L;

        l12 = 10000000L;

        l11 = 10000000L;

        l10 = 10000000L;

        goto label21;

     label10:
        l6 = 100000000L;

        l12 = 100000000L;

        l11 = 100000000L;

        l10 = 100000000L;

        goto label21;

     label11:
        l6 = 1000000000L;

        l12 = 1000000000L;

        l11 = 1000000000L;

        l10 = 1000000000L;

        goto label21;

     label12:
        l6 = 10000000000L;

        l12 = 10000000000L;

        l11 = 10000000000L;

        l10 = 10000000000L;

        goto label21;

     label13:
        l6 = 100000000000L;

        l12 = 100000000000L;

        l11 = 100000000000L;

        l10 = 100000000000L;

        goto label21;

     label14:
        l6 = 1000000000000L;

        l12 = 1000000000000L;

        l11 = 1000000000000L;

        l10 = 1000000000000L;

        goto label21;

     label15:
        l6 = 10000000000000L;

        l12 = 10000000000000L;

        l11 = 10000000000000L;

        l10 = 10000000000000L;

        goto label21;

     label16:
        l6 = 100000000000000L;

        l12 = 100000000000000L;

        l11 = 100000000000000L;

        l10 = 100000000000000L;

        goto label21;

     label17:
        l6 = 1000000000000000L;

        l12 = 1000000000000000L;

        l11 = 1000000000000000L;

        l10 = 1000000000000000L;

        goto label21;

     label18:
        l6 = 10000000000000000L;

        l12 = 10000000000000000L;

        l11 = 10000000000000000L;

        l10 = 10000000000000000L;

        goto label21;

     label19:
        l6 = 100000000000000000L;

        l12 = 100000000000000000L;

        l11 = 100000000000000000L;

        l10 = 100000000000000000L;

        goto label21;

     label20:
        l6 = 1000000000000000000L;

        l12 = 1000000000000000000L;

        l11 = 1000000000000000000L;

        l10 = 1000000000000000000L;

     label21:
        $l7 = $l0 * l10;

        $l8 = $l7 / l11;

        $b9 = $l8 cmp $l0;

        if $b9 != 0 goto label22;

        goto label23;

     label22:
        $i14 = (int) -1;

        i5 = i5 + $i14;

        goto label01;

     label23:
        $r3 = newarray (long)[2];

        $l2 = l1 * l12;

        $l3 = $l2 / $l0;

        $r3[0] = $l3;

        $l4 = (long) i5;

        $r3[1] = $l4;

        return $r3;
    }

    public int estimateParsedLength()
    {
        int $i0;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

        return $i0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)
    {
        byte $b6;
        org.joda.time.DateTimeFieldType $r2, $r8;
        org.joda.time.DateTimeField $r4;
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        long $l5, l13, $l15, $l16, l17, l18, $l20;
        int $i0, $i1, i2, $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i14, i19, $i21, $i22, $i23, $i25, $i26, $i28;
        org.joda.time.format.DateTimeParserBucket r1;
        java.lang.String r5;
        org.joda.time.DurationField $r6, $r9, $r10;
        org.joda.time.Chronology $r3;
        char $c12;
        org.joda.time.field.PreciseDateTimeField $r11;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r5 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>;

        $r3 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

        $i1 = virtualinvoke r5.<java.lang.String: int length()>();

        $i3 = $i1 - i2;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i3);

        l17 = 0L;

        $r6 = virtualinvoke $r4.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $l5 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>();

        l18 = $l5 * 10L;

        i19 = 0;

     label1:
        if i19 >= $i4 goto label3;

        $i11 = i2 + i19;

        $c12 = virtualinvoke r5.<java.lang.String: char charAt(int)>($i11);

        $i21 = (int) $c12;

        if $i21 < 48 goto label3;

        $i22 = (int) $c12;

        if $i22 <= 57 goto label2;

        goto label3;

     label2:
        i19 = i19 + 1;

        l13 = l18 / 10L;

        $i23 = (int) $c12;

        $i14 = $i23 - 48;

        $l15 = (long) $i14;

        $l16 = $l15 * l13;

        l17 = l17 + $l16;

        l18 = l13;

        goto label1;

     label3:
        $l20 = l17 / 10L;

        if i19 != 0 goto label4;

        $i25 = (int) -1;

        $i10 = i2 ^ $i25;

        return $i10;

     label4:
        $b6 = $l20 cmp 2147483647L;

        $i26 = (int) $b6;

        if $i26 <= 0 goto label5;

        $i28 = (int) -1;

        $i9 = i2 ^ $i28;

        return $i9;

     label5:
        $r11 = new org.joda.time.field.PreciseDateTimeField;

        $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $r9 = <org.joda.time.field.MillisDurationField: org.joda.time.DurationField INSTANCE>;

        $r10 = virtualinvoke $r4.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        specialinvoke $r11.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r8, $r9, $r10);

        $i7 = (int) $l20;

        virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>($r11, $i7);

        $i8 = i2 + i19;

        return $i8;
    }
}
