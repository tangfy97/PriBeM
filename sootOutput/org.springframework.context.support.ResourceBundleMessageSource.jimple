public class org.springframework.context.support.ResourceBundleMessageSource extends org.springframework.context.support.AbstractMessageSource implements org.springframework.beans.factory.BeanClassLoaderAware
{
    private java.lang.String[] basenames;
    private java.lang.ClassLoader bundleClassLoader;
    private java.lang.ClassLoader beanClassLoader;
    private final java.util.Map cachedResourceBundles;
    private final java.util.Map cachedBundleMessageFormats;

    public void <init>()
    {
        org.springframework.context.support.ResourceBundleMessageSource r0;
        java.lang.String[] $r1;
        java.util.HashMap $r3, $r4;
        java.lang.ClassLoader $r2;

        r0 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        specialinvoke r0.<org.springframework.context.support.AbstractMessageSource: void <init>()>();

        $r1 = newarray (java.lang.String)[0];

        r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String[] basenames> = $r1;

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.ClassLoader beanClassLoader> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.Map cachedResourceBundles> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.Map cachedBundleMessageFormats> = $r4;

        return;
    }

    public void setBasename(java.lang.String)
    {
        org.springframework.context.support.ResourceBundleMessageSource r0;
        java.lang.String[] $r1;
        java.lang.String r2;

        r0 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.springframework.context.support.ResourceBundleMessageSource: void setBasenames(java.lang.String[])>($r1);

        return;
    }

    public void setBasenames(java.lang.String[])
    {
        java.lang.String[] r0, $r2, $r3, $r5;
        org.springframework.context.support.ResourceBundleMessageSource r1;
        int $i0, $i1, i2;
        java.lang.String r4, $r6;

        r1 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label3;

        $i0 = lengthof r0;

        $r3 = newarray (java.lang.String)[$i0];

        r1.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String[] basenames> = $r3;

        i2 = 0;

        goto label2;

     label1:
        r4 = r0[i2];

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r4, "Basename must not be empty");

        $r5 = r1.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String[] basenames>;

        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $r5[i2] = $r6;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r0;

        if i2 < $i1 goto label1;

        goto label4;

     label3:
        $r2 = newarray (java.lang.String)[0];

        r1.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String[] basenames> = $r2;

     label4:
        return;
    }

    public void setBundleClassLoader(java.lang.ClassLoader)
    {
        org.springframework.context.support.ResourceBundleMessageSource r0;
        java.lang.ClassLoader r1;

        r0 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.ClassLoader bundleClassLoader> = r1;

        return;
    }

    protected java.lang.ClassLoader getBundleClassLoader()
    {
        org.springframework.context.support.ResourceBundleMessageSource r0;
        java.lang.ClassLoader $r1, $r2;

        r0 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        $r1 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.ClassLoader bundleClassLoader>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.ClassLoader bundleClassLoader>;

        goto label2;

     label1:
        $r2 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.ClassLoader beanClassLoader>;

     label2:
        return $r2;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        org.springframework.context.support.ResourceBundleMessageSource r0;
        java.lang.ClassLoader r1, $r2;

        r0 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        r1 := @parameter0: java.lang.ClassLoader;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

     label2:
        r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.ClassLoader beanClassLoader> = $r2;

        return;
    }

    protected java.lang.String resolveCodeWithoutArguments(java.lang.String, java.util.Locale)
    {
        java.lang.String[] $r1, $r2;
        org.springframework.context.support.ResourceBundleMessageSource r0;
        java.util.ResourceBundle $r5;
        java.util.Locale r3;
        int $i0, i1;
        java.lang.String $r4, r6, r7;

        r0 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        r6 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Locale;

        r7 = null;

        i1 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String[] basenames>;

        $r4 = $r2[i1];

        $r5 = virtualinvoke r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.ResourceBundle getResourceBundle(java.lang.String,java.util.Locale)>($r4, r3);

        if $r5 == null goto label2;

        r7 = specialinvoke r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String getStringOrNull(java.util.ResourceBundle,java.lang.String)>($r5, r6);

     label2:
        i1 = i1 + 1;

     label3:
        if r7 != null goto label4;

        $r1 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String[] basenames>;

        $i0 = lengthof $r1;

        if i1 < $i0 goto label1;

     label4:
        return r7;
    }

    protected java.text.MessageFormat resolveCode(java.lang.String, java.util.Locale)
    {
        java.lang.String[] $r1, $r2;
        java.text.MessageFormat r7;
        org.springframework.context.support.ResourceBundleMessageSource r0;
        java.util.ResourceBundle $r5;
        java.util.Locale r3;
        int $i0, i1;
        java.lang.String $r4, r6;

        r0 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        r6 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Locale;

        r7 = null;

        i1 = 0;

        goto label3;

     label1:
        $r2 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String[] basenames>;

        $r4 = $r2[i1];

        $r5 = virtualinvoke r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.ResourceBundle getResourceBundle(java.lang.String,java.util.Locale)>($r4, r3);

        if $r5 == null goto label2;

        r7 = virtualinvoke r0.<org.springframework.context.support.ResourceBundleMessageSource: java.text.MessageFormat getMessageFormat(java.util.ResourceBundle,java.lang.String,java.util.Locale)>($r5, r6, r3);

     label2:
        i1 = i1 + 1;

     label3:
        if r7 != null goto label4;

        $r1 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String[] basenames>;

        $i0 = lengthof $r1;

        if i1 < $i0 goto label1;

     label4:
        return r7;
    }

    protected java.util.ResourceBundle getResourceBundle(java.lang.String, java.util.Locale)
    {
        java.lang.Throwable $r10;
        java.util.HashMap $r7;
        org.springframework.context.support.ResourceBundleMessageSource r0;
        java.util.ResourceBundle $r6, r21;
        java.util.Locale r5;
        java.util.Map $r1, $r3, $r8, r20;
        java.lang.String r2, $r17, $r19;
        boolean $z0;
        java.util.MissingResourceException $r11;
        java.lang.Object $r4, $r9;
        org.apache.commons.logging.Log $r12, $r14;
        java.lang.StringBuilder $r13, $r15, $r16, $r18;

        r0 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.Locale;

        $r1 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.Map cachedResourceBundles>;

        entermonitor $r1;

     label01:
        $r3 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.Map cachedResourceBundles>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r20 = (java.util.Map) $r4;

        if r20 == null goto label03;

        $r9 = interfaceinvoke r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r21 = (java.util.ResourceBundle) $r9;

        if r21 == null goto label03;

        exitmonitor $r1;

     label02:
        return r21;

     label03:
        $r6 = virtualinvoke r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.ResourceBundle doGetBundle(java.lang.String,java.util.Locale)>(r2, r5);

        if r20 != null goto label04;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r20 = $r7;

        $r8 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.Map cachedResourceBundles>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r7);

     label04:
        interfaceinvoke r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r6);

     label05:
        exitmonitor $r1;

     label06:
        return $r6;

     label07:
        $r11 := @caughtexception;

        $r12 = r0.<org.springframework.context.support.ResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label08;

        $r14 = r0.<org.springframework.context.support.ResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("ResourceBundle [");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not found for MessageSource: ");

        $r17 = virtualinvoke $r11.<java.util.MissingResourceException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r19);

     label08:
        exitmonitor $r1;

     label09:
        return null;

     label10:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label11:
        throw $r10;

        catch java.util.MissingResourceException from label03 to label05 with label07;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected java.util.ResourceBundle doGetBundle(java.lang.String, java.util.Locale) throws java.util.MissingResourceException
    {
        org.springframework.context.support.ResourceBundleMessageSource r2;
        java.util.ResourceBundle $r4;
        java.util.Locale r1;
        java.lang.String r0;
        java.lang.ClassLoader $r3;

        r2 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $r3 = virtualinvoke r2.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.ClassLoader getBundleClassLoader()>();

        $r4 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r0, r1, $r3);

        return $r4;
    }

    protected java.text.MessageFormat getMessageFormat(java.util.ResourceBundle, java.lang.String, java.util.Locale) throws java.util.MissingResourceException
    {
        java.lang.Throwable $r13;
        java.util.HashMap $r8, $r9;
        java.text.MessageFormat $r7, r16;
        org.springframework.context.support.ResourceBundleMessageSource r0;
        java.util.ResourceBundle r2;
        java.util.Locale r6;
        java.util.Map $r1, $r3, $r10, r14, r15;
        java.lang.String r5, $r17;
        java.lang.Object $r4, $r11, $r12;

        r0 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        r2 := @parameter0: java.util.ResourceBundle;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: java.util.Locale;

        $r1 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.Map cachedBundleMessageFormats>;

        entermonitor $r1;

     label01:
        $r3 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.Map cachedBundleMessageFormats>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r14 = (java.util.Map) $r4;

        r15 = null;

        if r14 == null goto label03;

        $r11 = interfaceinvoke r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r15 = (java.util.Map) $r11;

        if r15 == null goto label03;

        $r12 = interfaceinvoke r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r16 = (java.text.MessageFormat) $r12;

        if r16 == null goto label03;

        exitmonitor $r1;

     label02:
        return r16;

     label03:
        $r17 = specialinvoke r0.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String getStringOrNull(java.util.ResourceBundle,java.lang.String)>(r2, r5);

        if $r17 == null goto label07;

        if r14 != null goto label04;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r14 = $r9;

        $r10 = r0.<org.springframework.context.support.ResourceBundleMessageSource: java.util.Map cachedBundleMessageFormats>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r9);

     label04:
        if r15 != null goto label05;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r15 = $r8;

        interfaceinvoke r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r8);

     label05:
        $r7 = virtualinvoke r0.<org.springframework.context.support.ResourceBundleMessageSource: java.text.MessageFormat createMessageFormat(java.lang.String,java.util.Locale)>($r17, r6);

        interfaceinvoke r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r7);

        exitmonitor $r1;

     label06:
        return $r7;

     label07:
        exitmonitor $r1;

     label08:
        return null;

     label09:
        $r13 := @caughtexception;

        exitmonitor $r1;

     label10:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private java.lang.String getStringOrNull(java.util.ResourceBundle, java.lang.String)
    {
        org.springframework.context.support.ResourceBundleMessageSource r4;
        java.util.ResourceBundle r0;
        java.util.MissingResourceException $r3;
        java.lang.String r1, $r2;

        r4 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        r0 := @parameter0: java.util.ResourceBundle;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.util.MissingResourceException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        java.lang.String[] $r6;
        org.springframework.context.support.ResourceBundleMessageSource r1;
        java.lang.StringBuilder $r0, $r5, $r8, $r9;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r7, $r10;

        r1 := @this: org.springframework.context.support.ResourceBundleMessageSource;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": basenames=[");

        $r6 = r1.<org.springframework.context.support.ResourceBundleMessageSource: java.lang.String[] basenames>;

        $r7 = staticinvoke <org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
