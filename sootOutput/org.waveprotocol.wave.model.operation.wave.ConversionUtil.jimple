public final class org.waveprotocol.wave.model.operation.wave.ConversionUtil extends java.lang.Object
{

    public static org.waveprotocol.wave.model.operation.wave.WaveletOperation fromCoreWaveletOperation(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext, org.waveprotocol.wave.model.operation.core.CoreWaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r13;
        org.waveprotocol.wave.model.document.operation.DocOp $r7;
        org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant $r11;
        org.waveprotocol.wave.model.wave.ParticipantId $r9, $r12;
        org.waveprotocol.wave.model.operation.core.CoreAddParticipant $r8;
        org.waveprotocol.wave.model.operation.core.CoreWaveletOperation r0;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r3;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r4;
        java.lang.IllegalArgumentException $r1;
        org.waveprotocol.wave.model.operation.wave.NoOp $r2;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r6;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r10;
        org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation r14;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        r0 := @parameter1: org.waveprotocol.wave.model.operation.core.CoreWaveletOperation;

        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant;

        if $z0 == 0 goto label1;

        $r11 = (org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant) r0;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r13 = new org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        specialinvoke $r13.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>(r3, $r12);

        return $r13;

     label1:
        $z1 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreAddParticipant;

        if $z1 == 0 goto label2;

        $r8 = (org.waveprotocol.wave.model.operation.core.CoreAddParticipant) r0;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.operation.core.CoreAddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r10 = new org.waveprotocol.wave.model.operation.wave.AddParticipant;

        specialinvoke $r10.<org.waveprotocol.wave.model.operation.wave.AddParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>(r3, $r9);

        return $r10;

     label2:
        $z2 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation;

        if $z2 == 0 goto label3;

        r14 = (org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation) r0;

        $r4 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r5 = virtualinvoke r14.<org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation: java.lang.String getDocumentId()>();

        $r6 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r7 = virtualinvoke r14.<org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation: org.waveprotocol.wave.model.document.operation.DocOp getOperation()>();

        specialinvoke $r6.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>(r3, $r7);

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r5, $r6);

        return $r4;

     label3:
        $z3 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreNoOp;

        if $z3 == 0 goto label4;

        $r2 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        specialinvoke $r2.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>(r3);

        return $r2;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown operation type");

        throw $r1;
    }

    public static org.waveprotocol.wave.model.operation.core.CoreWaveletOperation toCoreWaveletOperation(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r13;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        org.waveprotocol.wave.model.document.operation.DocOp $r7;
        org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant $r15;
        org.waveprotocol.wave.model.wave.ParticipantId $r11, $r14;
        org.waveprotocol.wave.model.operation.core.CoreAddParticipant $r12;
        org.waveprotocol.wave.model.operation.core.CoreNoOp $r2, $r5;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r3;
        java.lang.String $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r16;
        java.lang.IllegalArgumentException $r1, $r4;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r6;
        org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation $r8;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r10;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        if $z0 == 0 goto label1;

        $r13 = (org.waveprotocol.wave.model.operation.wave.RemoveParticipant) r0;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r15 = new org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant;

        specialinvoke $r15.<org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant: void <init>(org.waveprotocol.wave.model.wave.ParticipantId)>($r14);

        return $r15;

     label1:
        $z1 = r0 instanceof org.waveprotocol.wave.model.operation.wave.AddParticipant;

        if $z1 == 0 goto label2;

        $r10 = (org.waveprotocol.wave.model.operation.wave.AddParticipant) r0;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r12 = new org.waveprotocol.wave.model.operation.core.CoreAddParticipant;

        specialinvoke $r12.<org.waveprotocol.wave.model.operation.core.CoreAddParticipant: void <init>(org.waveprotocol.wave.model.wave.ParticipantId)>($r11);

        return $r12;

     label2:
        $z2 = r0 instanceof org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        if $z2 == 0 goto label5;

        r16 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r0;

        $r3 = virtualinvoke r16.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation getBlipOp()>();

        $z4 = $r3 instanceof org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        if $z4 == 0 goto label3;

        $r6 = (org.waveprotocol.wave.model.operation.wave.BlipContentOperation) $r3;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp getContentOp()>();

        $r8 = new org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation;

        $r9 = virtualinvoke r16.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        specialinvoke $r8.<org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.document.operation.DocOp)>($r9, $r7);

        return $r8;

     label3:
        $z5 = $r3 instanceof org.waveprotocol.wave.model.operation.wave.SubmitBlip;

        if $z5 == 0 goto label4;

        $r5 = <org.waveprotocol.wave.model.operation.core.CoreNoOp: org.waveprotocol.wave.model.operation.core.CoreNoOp INSTANCE>;

        return $r5;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown blip operation type");

        throw $r4;

     label5:
        $z3 = r0 instanceof org.waveprotocol.wave.model.operation.wave.NoOp;

        if $z3 == 0 goto label6;

        $r2 = <org.waveprotocol.wave.model.operation.core.CoreNoOp: org.waveprotocol.wave.model.operation.core.CoreNoOp INSTANCE>;

        return $r2;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown wavelet operation type");

        throw $r1;
    }

    private void <init>()
    {
        org.waveprotocol.wave.model.operation.wave.ConversionUtil r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.ConversionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
