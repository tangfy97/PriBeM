class ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord extends java.lang.Object implements java.lang.Comparable
{
    int number;
    int type;
    final ucar.nc2.iosp.grid.GridEnsembleCoord this$0;

    private void <init>(ucar.nc2.iosp.grid.GridEnsembleCoord, int, int)
    {
        ucar.nc2.iosp.grid.GridEnsembleCoord r1;
        int i0, i1;
        ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord r0;

        r0 := @this: ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord;

        r1 := @parameter0: ucar.nc2.iosp.grid.GridEnsembleCoord;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: ucar.nc2.iosp.grid.GridEnsembleCoord this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int number> = i0;

        r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int type> = i1;

        return;
    }

    public int compareTo(ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord)
    {
        int $i0, $i1, i2, $i3, $i4, $i5;
        ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord r0, r1;

        r0 := @this: ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord;

        r1 := @parameter0: ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord;

        $i1 = r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int number>;

        $i0 = r1.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int number>;

        i2 = $i1 - $i0;

        if i2 != 0 goto label1;

        $i4 = r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int type>;

        $i3 = r1.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int type>;

        $i5 = $i4 - $i3;

        goto label2;

     label1:
        $i5 = i2;

     label2:
        return $i5;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1, $i2, $i3;
        ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord r0, r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;

        r0 := @this: ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

     label2:
        return 0;

     label3:
        r4 = (ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord) r1;

        $i1 = r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int number>;

        $i0 = r4.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int number>;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        $i3 = r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int type>;

        $i2 = r4.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int type>;

        if $i3 == $i2 goto label5;

        return 0;

     label5:
        return 1;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2, $i3;
        ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord r0;

        r0 := @this: ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord;

        $i0 = r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int number>;

        $i2 = 1000 * $i0;

        $i1 = r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int type>;

        $i3 = $i2 + $i1;

        return $i3;
    }

    public java.lang.String toString()
    {
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5;
        ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord r2;
        java.lang.String $r6;

        r2 := @this: ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("number=");

        $i0 = r2.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int number>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type=");

        $i1 = r2.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int type>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord r0, $r2;
        java.lang.Object r1;

        r0 := @this: ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord;

        r1 := @parameter0: java.lang.Object;

        $r2 = (ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord) r1;

        $i0 = virtualinvoke r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: int compareTo(ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord)>($r2);

        return $i0;
    }

    void <init>(ucar.nc2.iosp.grid.GridEnsembleCoord, int, int, ucar.nc2.iosp.grid.GridEnsembleCoord$1)
    {
        ucar.nc2.iosp.grid.GridEnsembleCoord r1;
        int i0, i1;
        ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord r0;
        ucar.nc2.iosp.grid.GridEnsembleCoord$1 r2;

        r0 := @this: ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord;

        r1 := @parameter0: ucar.nc2.iosp.grid.GridEnsembleCoord;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: ucar.nc2.iosp.grid.GridEnsembleCoord$1;

        specialinvoke r0.<ucar.nc2.iosp.grid.GridEnsembleCoord$EnsCoord: void <init>(ucar.nc2.iosp.grid.GridEnsembleCoord,int,int)>(r1, i0, i1);

        return;
    }
}
