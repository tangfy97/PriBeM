public class org.xmpp.packet.Message extends org.xmpp.packet.Packet
{

    public void <init>()
    {
        org.dom4j.Document $r2;
        org.xmpp.packet.Message r0;
        org.dom4j.Element $r3;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.xmpp.packet.Message;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>()>();

        $r1 = <org.xmpp.packet.Message: org.dom4j.DocumentFactory docFactory>;

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Element addElement(java.lang.String)>("message");

        r0.<org.xmpp.packet.Message: org.dom4j.Element element> = $r3;

        return;
    }

    public void <init>(org.dom4j.Element)
    {
        org.dom4j.Element r1;
        org.xmpp.packet.Message r0;

        r0 := @this: org.xmpp.packet.Message;

        r1 := @parameter0: org.dom4j.Element;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>(org.dom4j.Element)>(r1);

        return;
    }

    public void <init>(org.dom4j.Element, boolean)
    {
        org.dom4j.Element r1;
        org.xmpp.packet.Message r0;
        boolean z0;

        r0 := @this: org.xmpp.packet.Message;

        r1 := @parameter0: org.dom4j.Element;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>(org.dom4j.Element,boolean)>(r1, z0);

        return;
    }

    private void <init>(org.xmpp.packet.Message)
    {
        org.dom4j.Document $r5;
        org.xmpp.packet.JID $r6, $r7;
        org.dom4j.DocumentFactory $r4;
        org.xmpp.packet.Message r0, r1;
        org.dom4j.Element $r2, $r3;

        r0 := @this: org.xmpp.packet.Message;

        r1 := @parameter0: org.xmpp.packet.Message;

        specialinvoke r0.<org.xmpp.packet.Packet: void <init>()>();

        $r2 = r1.<org.xmpp.packet.Message: org.dom4j.Element element>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element createCopy()>();

        $r4 = <org.xmpp.packet.Message: org.dom4j.DocumentFactory docFactory>;

        $r5 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        interfaceinvoke $r5.<org.dom4j.Document: void add(org.dom4j.Element)>($r3);

        r0.<org.xmpp.packet.Message: org.dom4j.Element element> = $r3;

        $r6 = r1.<org.xmpp.packet.Message: org.xmpp.packet.JID toJID>;

        r0.<org.xmpp.packet.Message: org.xmpp.packet.JID toJID> = $r6;

        $r7 = r1.<org.xmpp.packet.Message: org.xmpp.packet.JID fromJID>;

        r0.<org.xmpp.packet.Message: org.xmpp.packet.JID fromJID> = $r7;

        return;
    }

    public org.xmpp.packet.Message$Type getType()
    {
        org.xmpp.packet.Message$Type $r3, $r4;
        org.xmpp.packet.Message r0;
        org.dom4j.Element $r1;
        java.lang.String $r2;

        r0 := @this: org.xmpp.packet.Message;

        $r1 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("type");

        if $r2 == null goto label1;

        $r4 = staticinvoke <org.xmpp.packet.Message$Type: org.xmpp.packet.Message$Type valueOf(java.lang.String)>($r2);

        return $r4;

     label1:
        $r3 = <org.xmpp.packet.Message$Type: org.xmpp.packet.Message$Type normal>;

        return $r3;
    }

    public void setType(org.xmpp.packet.Message$Type)
    {
        org.xmpp.packet.Message$Type r1;
        org.xmpp.packet.Message r0;
        org.dom4j.Element $r2;
        java.lang.String $r3;

        r0 := @this: org.xmpp.packet.Message;

        r1 := @parameter0: org.xmpp.packet.Message$Type;

        $r2 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<org.xmpp.packet.Message$Type: java.lang.String toString()>();

     label2:
        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("type", $r3);

        return;
    }

    public java.lang.String getSubject()
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.xmpp.packet.Message r0;

        r0 := @this: org.xmpp.packet.Message;

        $r1 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String elementText(java.lang.String)>("subject");

        return $r2;
    }

    public void setSubject(java.lang.String)
    {
        org.xmpp.packet.Message r0;
        org.dom4j.Element $r1, $r2, $r4, $r5, r6;
        java.lang.String r3;

        r0 := @this: org.xmpp.packet.Message;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("subject");

        r6 = $r2;

        if r3 != null goto label1;

        if $r2 == null goto label1;

        $r5 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        interfaceinvoke $r5.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r2);

        return;

     label1:
        if r3 != null goto label2;

        return;

     label2:
        if $r2 != null goto label3;

        $r4 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        r6 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("subject");

     label3:
        interfaceinvoke r6.<org.dom4j.Element: void setText(java.lang.String)>(r3);

        return;
    }

    public java.lang.String getBody()
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.xmpp.packet.Message r0;

        r0 := @this: org.xmpp.packet.Message;

        $r1 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String elementText(java.lang.String)>("body");

        return $r2;
    }

    public void setBody(java.lang.String)
    {
        org.xmpp.packet.Message r0;
        org.dom4j.Element $r1, $r2, $r4, $r5, r6;
        java.lang.String r3;

        r0 := @this: org.xmpp.packet.Message;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("body");

        r6 = $r2;

        if r3 != null goto label2;

        if $r2 == null goto label1;

        $r5 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        interfaceinvoke $r5.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r2);

     label1:
        return;

     label2:
        if r3 != null goto label3;

        return;

     label3:
        if $r2 != null goto label4;

        $r4 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        r6 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("body");

     label4:
        interfaceinvoke r6.<org.dom4j.Element: void setText(java.lang.String)>(r3);

        return;
    }

    public java.lang.String getThread()
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.xmpp.packet.Message r0;

        r0 := @this: org.xmpp.packet.Message;

        $r1 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String elementText(java.lang.String)>("thread");

        return $r2;
    }

    public void setThread(java.lang.String)
    {
        org.xmpp.packet.Message r0;
        org.dom4j.Element $r1, $r2, $r4, $r5, r6;
        java.lang.String r3;

        r0 := @this: org.xmpp.packet.Message;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("thread");

        r6 = $r2;

        if r3 != null goto label2;

        if $r2 == null goto label1;

        $r5 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        interfaceinvoke $r5.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r2);

     label1:
        return;

     label2:
        if $r2 != null goto label3;

        $r4 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        r6 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("thread");

     label3:
        interfaceinvoke r6.<org.dom4j.Element: void setText(java.lang.String)>(r3);

        return;
    }

    public org.dom4j.Element getChildElement(java.lang.String, java.lang.String)
    {
        java.util.Iterator $r3;
        org.xmpp.packet.Message r0;
        org.dom4j.Element $r2, r5;
        java.lang.Object $r4;
        java.lang.String r1, $r6, r7;
        boolean $z0, $z1;

        r0 := @this: org.xmpp.packet.Message;

        r1 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        $r2 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>(r1);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.dom4j.Element) $r4;

        $r6 = interfaceinvoke r5.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public org.dom4j.Element addChildElement(java.lang.String, java.lang.String)
    {
        org.xmpp.packet.Message r0;
        org.dom4j.Element $r3, $r4;
        java.lang.String r1, r2;

        r0 := @this: org.xmpp.packet.Message;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmpp.packet.Message: org.dom4j.Element element>;

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.xmpp.packet.Message createCopy()
    {
        org.xmpp.packet.Message $r0, r1;

        r1 := @this: org.xmpp.packet.Message;

        $r0 = new org.xmpp.packet.Message;

        specialinvoke $r0.<org.xmpp.packet.Message: void <init>(org.xmpp.packet.Message)>(r1);

        return $r0;
    }

    public volatile org.xmpp.packet.Packet createCopy()
    {
        org.xmpp.packet.Message r0, $r1;

        r0 := @this: org.xmpp.packet.Message;

        $r1 = virtualinvoke r0.<org.xmpp.packet.Message: org.xmpp.packet.Message createCopy()>();

        return $r1;
    }
}
