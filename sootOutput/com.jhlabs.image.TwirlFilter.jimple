public class com.jhlabs.image.TwirlFilter extends com.jhlabs.image.TransformFilter
{
    static final long serialVersionUID;
    private float angle;
    private float centreX;
    private float centreY;
    private float radius;
    private float radius2;
    private float icentreX;
    private float icentreY;

    public void <init>()
    {
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        specialinvoke r0.<com.jhlabs.image.TransformFilter: void <init>()>();

        r0.<com.jhlabs.image.TwirlFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.TwirlFilter: float centreX> = 0.5F;

        r0.<com.jhlabs.image.TwirlFilter: float centreY> = 0.5F;

        r0.<com.jhlabs.image.TwirlFilter: float radius> = 100.0F;

        r0.<com.jhlabs.image.TwirlFilter: float radius2> = 0.0F;

        virtualinvoke r0.<com.jhlabs.image.TransformFilter: void setEdgeAction(int)>(1);

        return;
    }

    public void setAngle(float)
    {
        float f0;
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.TwirlFilter: float angle> = f0;

        return;
    }

    public float getAngle()
    {
        float $f0;
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        $f0 = r0.<com.jhlabs.image.TwirlFilter: float angle>;

        return $f0;
    }

    public void setCentreX(float)
    {
        float f0;
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.TwirlFilter: float centreX> = f0;

        return;
    }

    public float getCentreX()
    {
        float $f0;
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        $f0 = r0.<com.jhlabs.image.TwirlFilter: float centreX>;

        return $f0;
    }

    public void setCentreY(float)
    {
        float f0;
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.TwirlFilter: float centreY> = f0;

        return;
    }

    public float getCentreY()
    {
        float $f0;
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        $f0 = r0.<com.jhlabs.image.TwirlFilter: float centreY>;

        return $f0;
    }

    public void setCentre(java.awt.geom.Point2D)
    {
        com.jhlabs.image.TwirlFilter r0;
        java.awt.geom.Point2D r1;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        r0.<com.jhlabs.image.TwirlFilter: float centreX> = $f0;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        r0.<com.jhlabs.image.TwirlFilter: float centreY> = $f1;

        return;
    }

    public java.awt.geom.Point2D getCentre()
    {
        com.jhlabs.image.TwirlFilter r1;
        java.awt.geom.Point2D$Float $r0;
        float $f0, $f1;

        r1 := @this: com.jhlabs.image.TwirlFilter;

        $r0 = new java.awt.geom.Point2D$Float;

        $f1 = r1.<com.jhlabs.image.TwirlFilter: float centreX>;

        $f0 = r1.<com.jhlabs.image.TwirlFilter: float centreY>;

        specialinvoke $r0.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f1, $f0);

        return $r0;
    }

    public void setRadius(float)
    {
        float f0;
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.TwirlFilter: float radius> = f0;

        return;
    }

    public float getRadius()
    {
        float $f0;
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        $f0 = r0.<com.jhlabs.image.TwirlFilter: float radius>;

        return $f0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        byte $b2;
        int $i0, $i1;
        com.jhlabs.image.TwirlFilter r0;
        java.awt.image.BufferedImage r1, r2, $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r2 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $f1 = (float) $i0;

        $f0 = r0.<com.jhlabs.image.TwirlFilter: float centreX>;

        $f2 = $f1 * $f0;

        r0.<com.jhlabs.image.TwirlFilter: float icentreX> = $f2;

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        $f4 = (float) $i1;

        $f3 = r0.<com.jhlabs.image.TwirlFilter: float centreY>;

        $f5 = $f4 * $f3;

        r0.<com.jhlabs.image.TwirlFilter: float icentreY> = $f5;

        $f6 = r0.<com.jhlabs.image.TwirlFilter: float radius>;

        $b2 = $f6 cmpl 0.0F;

        if $b2 != 0 goto label1;

        $f11 = r0.<com.jhlabs.image.TwirlFilter: float icentreX>;

        $f10 = r0.<com.jhlabs.image.TwirlFilter: float icentreY>;

        $f12 = staticinvoke <java.lang.Math: float min(float,float)>($f11, $f10);

        r0.<com.jhlabs.image.TwirlFilter: float radius> = $f12;

     label1:
        $f8 = r0.<com.jhlabs.image.TwirlFilter: float radius>;

        $f7 = r0.<com.jhlabs.image.TwirlFilter: float radius>;

        $f9 = $f8 * $f7;

        r0.<com.jhlabs.image.TwirlFilter: float radius2> = $f9;

        $r3 = specialinvoke r0.<com.jhlabs.image.TransformFilter: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r1, r2);

        return $r3;
    }

    protected void transformInverse(int, int, float[])
    {
        byte $b2;
        float $f0, $f1, f2, $f3, $f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, f27, f28;
        float[] r1;
        int i0, i1, $i3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        $f1 = (float) i0;

        $f0 = r0.<com.jhlabs.image.TwirlFilter: float icentreX>;

        f2 = $f1 - $f0;

        $f4 = (float) i1;

        $f3 = r0.<com.jhlabs.image.TwirlFilter: float icentreY>;

        f5 = $f4 - $f3;

        $f7 = f2 * f2;

        $f6 = f5 * f5;

        f27 = $f7 + $f6;

        $f8 = r0.<com.jhlabs.image.TwirlFilter: float radius2>;

        $b2 = f27 cmpl $f8;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label1;

        $f25 = (float) i0;

        r1[0] = $f25;

        $f26 = (float) i1;

        r1[1] = $f26;

        goto label2;

     label1:
        $d0 = (double) f27;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f28 = (float) $d1;

        $d3 = (double) f5;

        $d2 = (double) f2;

        $d4 = staticinvoke <java.lang.Math: double atan2(double,double)>($d3, $d2);

        $f15 = (float) $d4;

        $f11 = r0.<com.jhlabs.image.TwirlFilter: float angle>;

        $f9 = r0.<com.jhlabs.image.TwirlFilter: float radius>;

        $f10 = $f9 - f28;

        $f13 = $f11 * $f10;

        $f12 = r0.<com.jhlabs.image.TwirlFilter: float radius>;

        $f14 = $f13 / $f12;

        f16 = $f15 + $f14;

        $f17 = r0.<com.jhlabs.image.TwirlFilter: float icentreX>;

        $d5 = (double) f16;

        $d6 = staticinvoke <java.lang.Math: double cos(double)>($d5);

        $f18 = (float) $d6;

        $f19 = f28 * $f18;

        $f20 = $f17 + $f19;

        r1[0] = $f20;

        $f21 = r0.<com.jhlabs.image.TwirlFilter: float icentreY>;

        $d7 = (double) f16;

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d7);

        $f22 = (float) $d8;

        $f23 = f28 * $f22;

        $f24 = $f21 + $f23;

        r1[1] = $f24;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.TwirlFilter r0;

        r0 := @this: com.jhlabs.image.TwirlFilter;

        return "Distort/Twirl...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.TwirlFilter: long serialVersionUID> = 1550445062822803342L;

        return;
    }
}
