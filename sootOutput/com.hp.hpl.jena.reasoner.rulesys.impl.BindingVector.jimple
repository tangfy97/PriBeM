public class com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment
{
    protected com.hp.hpl.jena.graph.Node[] environment;

    public void <init>(int)
    {
        int i0;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r0;
        com.hp.hpl.jena.graph.Node[] $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (com.hp.hpl.jena.graph.Node)[i0];

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment> = $r1;

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.Node[])
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r0;
        com.hp.hpl.jena.graph.Node[] r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment> = r1;

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r0, r1;
        com.hp.hpl.jena.graph.Node[] r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $i0 = lengthof r2;

        $r3 = newarray (com.hp.hpl.jena.graph.Node)[$i0];

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment> = $r3;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, $i1);

        return;
    }

    public com.hp.hpl.jena.graph.Node[] getEnvironment()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r0;
        com.hp.hpl.jena.graph.Node[] $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r6, $r8, $r9, $r12, r13;
        java.util.ArrayList $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r7;
        int $i0, $i1, $i2, i3;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.graph.Node[] $r2, $r11;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r10;
        java.lang.Object $r1;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r4, r14;

        r7 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label2;

        $r11 = r7.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $r10 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        $i2 = virtualinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        r13 = $r11[$i2];

        $z4 = r13 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z4 == 0 goto label1;

        $r12 = virtualinvoke r7.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)>(r13);

        return $r12;

     label1:
        return r13;

     label2:
        $z1 = r0 instanceof com.hp.hpl.jena.graph.Node_ANY;

        if $z1 == 0 goto label3;

        return null;

     label3:
        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>(r0);

        if $z2 == 0 goto label8;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r14 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r1;

        $z3 = virtualinvoke r14.<com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isGround()>();

        if $z3 == 0 goto label4;

        return r0;

     label4:
        $r2 = virtualinvoke r14.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r3 = new java.util.ArrayList;

        $i0 = lengthof $r2;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        i3 = 0;

     label5:
        $i1 = lengthof $r2;

        if i3 >= $i1 goto label7;

        $r8 = $r2[i3];

        $r9 = virtualinvoke r7.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)>($r8);

        if $r9 != null goto label6;

        return null;

     label6:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        i3 = i3 + 1;

        goto label5;

     label7:
        $r4 = new com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r5 = virtualinvoke r14.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: void <init>(java.lang.String,java.util.List)>($r5, $r3);

        $r6 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node makeFunctorNode(com.hp.hpl.jena.reasoner.rulesys.Functor)>($r4);

        return $r6;

     label8:
        return r0;
    }

    public com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r0;
        com.hp.hpl.jena.graph.Node r1, $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)>(r1);

        if $r2 != null goto label1;

        return r1;

     label1:
        return $r2;
    }

    public boolean bind(int, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node[] $r1, $r4, $r6;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r5;
        com.hp.hpl.jena.graph.Node r2, r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r0;
        int i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        i0 := @parameter0: int;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        r2 = $r1[i0];

        if r2 != null goto label1;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $r6[i0] = r3;

        return 1;

     label1:
        $z0 = r2 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label2;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $r4[i0] = r3;

        $r5 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r2;

        $i1 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: boolean bind(int,com.hp.hpl.jena.graph.Node)>($i1, r3);

        return $z2;

     label2:
        $z1 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r3);

        return $z1;
    }

    public boolean bind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r3;
        com.hp.hpl.jena.graph.Node r0, r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r2;
        int $i0;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label1;

        $r3 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        $i0 = virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $z2 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: boolean bind(int,com.hp.hpl.jena.graph.Node)>($i0, r1);

        return $z2;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r1);

        return $z1;
    }

    public com.hp.hpl.jena.reasoner.TriplePattern partInstantiate(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5, $r6, $r7, $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r1;
        com.hp.hpl.jena.reasoner.TriplePattern $r0, r2;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r0 = new com.hp.hpl.jena.reasoner.TriplePattern;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r3);

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r5);

        $r7 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r8 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r7);

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r6, $r8);

        return $r0;
    }

    public com.hp.hpl.jena.graph.Triple instantiate(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5, $r6, $r7, r9, r10, r11;
        com.hp.hpl.jena.graph.Triple $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r0;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r2);

        r9 = $r3;

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        r9 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

     label1:
        $r4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r4);

        r10 = $r5;

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label2;

        r10 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

     label2:
        $r6 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>($r6);

        r11 = $r7;

        $z2 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z2 == 0 goto label3;

        r11 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

     label3:
        $r8 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r8.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r9, r10, r11);

        return $r8;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.graph.Node[] $r2, $r4, $r6;
        com.hp.hpl.jena.graph.Node $r5, $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r1;
        java.lang.StringBuffer $r0;
        int $i0, i1;
        java.lang.String $r3, $r8;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label4;

        $r4 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $r5 = $r4[i1];

        if $r5 != null goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        goto label3;

     label2:
        $r6 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $r7 = $r6[i1];

        $r8 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r7);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i1 = i1 + 1;

        goto label1;

     label4:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector unify(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.TriplePattern, int)
    {
        com.hp.hpl.jena.graph.Node $r3, $r5, $r6, $r7, $r8, $r9, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.hp.hpl.jena.graph.Node[] r0, r1, $r18, $r19;
        com.hp.hpl.jena.reasoner.TriplePattern r2, r4;
        com.hp.hpl.jena.reasoner.rulesys.Functor r12, r15;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector $r10, $r13;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String $r16, $r17;
        java.lang.Object $r11, $r14;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r4 := @parameter1: com.hp.hpl.jena.reasoner.TriplePattern;

        i0 := @parameter2: int;

        r0 = newarray (com.hp.hpl.jena.graph.Node)[i0];

        r1 = newarray (com.hp.hpl.jena.graph.Node)[i0];

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $z0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: boolean unify(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.graph.Node[])>($r3, $r5, r0, r1);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r6 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r7 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: boolean unify(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.graph.Node[])>($r6, $r7, r0, r1);

        if $z1 != 0 goto label02;

        return null;

     label02:
        $r8 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r9 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r8);

        if $z2 == 0 goto label11;

        $r11 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r12 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r11;

        $z4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r9);

        if $z4 == 0 goto label08;

        $r14 = virtualinvoke $r9.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r15 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r14;

        $r16 = virtualinvoke r12.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r17 = virtualinvoke r15.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $z8 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z8 != 0 goto label03;

        return null;

     label03:
        $r18 = virtualinvoke r12.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r19 = virtualinvoke r15.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $i2 = lengthof $r18;

        $i1 = lengthof $r19;

        if $i2 == $i1 goto label04;

        return null;

     label04:
        i4 = 0;

     label05:
        $i3 = lengthof $r18;

        if i4 >= $i3 goto label07;

        $r21 = $r18[i4];

        $r20 = $r19[i4];

        $z9 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: boolean unify(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.graph.Node[])>($r21, $r20, r0, r1);

        if $z9 != 0 goto label06;

        return null;

     label06:
        i4 = i4 + 1;

        goto label05;

     label07:
        goto label10;

     label08:
        $z5 = $r9 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z5 == 0 goto label09;

        $r13 = new com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        specialinvoke $r13.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: void <init>(com.hp.hpl.jena.graph.Node[])>(r0);

        $z6 = virtualinvoke r12.<com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isGround(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r13);

        if $z6 == 0 goto label10;

        $z7 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: boolean unify(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.graph.Node[])>($r8, $r9, r0, r1);

        if $z7 != 0 goto label10;

        return null;

     label09:
        return null;

     label10:
        goto label12;

     label11:
        $z3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: boolean unify(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.graph.Node[])>($r8, $r9, r0, r1);

        if $z3 != 0 goto label12;

        return null;

     label12:
        $r10 = new com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        specialinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: void <init>(com.hp.hpl.jena.graph.Node[])>(r1);

        return $r10;
    }

    private static boolean unify(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node[], com.hp.hpl.jena.graph.Node[])
    {
        com.hp.hpl.jena.graph.Node r0, r1, $r9, r10, r11, r12;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r2, $r5, $r6, $r7, $r8;
        com.hp.hpl.jena.graph.Node[] r3, r4;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node[];

        r4 := @parameter3: com.hp.hpl.jena.graph.Node[];

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label09;

        $r6 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        $i2 = virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $z5 = r1 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z5 == 0 goto label05;

        $r8 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r1;

        $i4 = virtualinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        if $i4 >= 0 goto label01;

        return 1;

     label01:
        $r9 = r3[$i4];

        if $r9 != null goto label02;

        r3[$i4] = r0;

        goto label04;

     label02:
        r10 = r3[$i4];

        if $i2 != $i4 goto label03;

        $z8 = r10 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z8 != 0 goto label04;

     label03:
        r4[$i2] = r10;

     label04:
        goto label08;

     label05:
        r11 = r4[$i2];

        if r11 != null goto label06;

        r4[$i2] = r1;

        goto label08;

     label06:
        $z6 = r11 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z6 == 0 goto label07;

        $r7 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r11;

        $i3 = virtualinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        r4[$i3] = r1;

        r4[$i2] = r1;

        goto label08;

     label07:
        $z7 = virtualinvoke r11.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r1);

        return $z7;

     label08:
        return 1;

     label09:
        $z1 = r1 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z1 == 0 goto label14;

        $r2 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r1;

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        if $i0 >= 0 goto label10;

        return 1;

     label10:
        r12 = r3[$i0];

        if r12 != null goto label11;

        r3[$i0] = r0;

        goto label13;

     label11:
        $z3 = r12 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z3 == 0 goto label12;

        $r5 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r12;

        $i1 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        r4[$i1] = r0;

        r3[$i0] = r0;

        goto label13;

     label12:
        $z4 = virtualinvoke r12.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r0);

        return $z4;

     label13:
        return 1;

     label14:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r1);

        return $z2;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.graph.Node[] r2, $r4, $r5, $r6;
        com.hp.hpl.jena.graph.Node r7, r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector $r1, r3;
        int $i0, $i1, $i2, i3;
        java.lang.Object r0;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = (com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector) r0;

        r2 = $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $r4 = r3.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $i1 = lengthof $r4;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        i3 = 0;

     label3:
        $r5 = r3.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $i2 = lengthof $r5;

        if i3 >= $i2 goto label6;

        $r6 = r3.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        r7 = $r6[i3];

        r8 = r2[i3];

        if r7 != null goto label4;

        if r8 == null goto label5;

        return 0;

     label4:
        $z1 = virtualinvoke r7.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r8);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        return 1;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.graph.Node[] $r1, $r2;
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r0;
        int $i0, $i1, i2, i3, $i4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        i2 = 0;

        i3 = 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label4;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: com.hp.hpl.jena.graph.Node[] environment>;

        r3 = $r2[i3];

        $i1 = i2 << 1;

        if r3 != null goto label2;

        $i4 = 21372;

        goto label3;

     label2:
        $i4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: int hashCode()>();

     label3:
        i2 = $i1 ^ $i4;

        i3 = i3 + 1;

        goto label1;

     label4:
        return i2;
    }
}
