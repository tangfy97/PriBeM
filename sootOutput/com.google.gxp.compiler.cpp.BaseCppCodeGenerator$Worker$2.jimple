final class com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 extends java.lang.Object implements com.google.gxp.compiler.base.TypeVisitor
{
    final com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker this$0;

    void <init>(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r1;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String visitBooleanType(com.google.gxp.compiler.base.BooleanType)
    {
        com.google.gxp.compiler.base.BooleanType r1;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.BooleanType;

        return "bool";
    }

    public java.lang.String visitBundleType(com.google.gxp.compiler.base.BundleType)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;
        com.google.gxp.compiler.base.BundleType r1;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.BundleType;

        return "int";
    }

    public java.lang.String visitContentType(com.google.gxp.compiler.base.ContentType)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r7;
        com.google.gxp.compiler.schema.Schema $r2;
        java.lang.StringBuilder $r0, $r4, $r5;
        java.lang.String $r3, $r6;
        com.google.gxp.compiler.base.ContentType r1;

        r7 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.ContentType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.google.gxp.compiler.base.ContentType: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.schema.Schema: java.lang.String getCppType()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String visitInstanceType(com.google.gxp.compiler.base.InstanceType)
    {
        com.google.gxp.compiler.base.InstanceType r2;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r1;
        com.google.gxp.compiler.base.TemplateName $r4;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker $r3;
        java.lang.StringBuilder $r0, $r6, $r7;
        java.lang.String $r5, $r8;

        r1 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r2 := @parameter0: com.google.gxp.compiler.base.InstanceType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r1.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker this$0>;

        $r4 = virtualinvoke r2.<com.google.gxp.compiler.base.InstanceType: com.google.gxp.compiler.base.TemplateName getTemplateName()>();

        $r5 = virtualinvoke $r3.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r4);

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::Interface");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String visitNativeType(com.google.gxp.compiler.base.NativeType)
    {
        com.google.gxp.compiler.alerts.AlertSink $r2;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;
        java.lang.String $r4;
        com.google.gxp.compiler.base.NativeType r3;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker $r1;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r3 := @parameter0: com.google.gxp.compiler.base.NativeType;

        $r1 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker this$0>;

        $r2 = staticinvoke <com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: com.google.gxp.compiler.alerts.AlertSink access$200(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker)>($r1);

        $r4 = staticinvoke <com.google.gxp.compiler.cpp.CppUtil: java.lang.String validateType(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.NativeType)>($r2, r3);

        return $r4;
    }

    public java.lang.String visitTemplateType(com.google.gxp.compiler.base.TemplateType)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;
        com.google.gxp.compiler.base.TemplateType r1;
        com.google.gxp.compiler.base.TemplateName $r3;
        java.lang.String $r4;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker $r2;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.TemplateType;

        $r2 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker this$0>;

        $r3 = virtualinvoke r1.<com.google.gxp.compiler.base.TemplateType: com.google.gxp.compiler.base.TemplateName getTemplateName()>();

        $r4 = virtualinvoke $r2.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r3);

        return $r4;
    }

    public volatile java.lang.Object visitTemplateType(com.google.gxp.compiler.base.TemplateType)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;
        com.google.gxp.compiler.base.TemplateType r1;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.TemplateType;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: java.lang.String visitTemplateType(com.google.gxp.compiler.base.TemplateType)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitNativeType(com.google.gxp.compiler.base.NativeType)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;
        java.lang.String $r2;
        com.google.gxp.compiler.base.NativeType r1;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.NativeType;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: java.lang.String visitNativeType(com.google.gxp.compiler.base.NativeType)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitInstanceType(com.google.gxp.compiler.base.InstanceType)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;
        com.google.gxp.compiler.base.InstanceType r1;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.InstanceType;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: java.lang.String visitInstanceType(com.google.gxp.compiler.base.InstanceType)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitContentType(com.google.gxp.compiler.base.ContentType)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;
        java.lang.String $r2;
        com.google.gxp.compiler.base.ContentType r1;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.ContentType;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: java.lang.String visitContentType(com.google.gxp.compiler.base.ContentType)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBundleType(com.google.gxp.compiler.base.BundleType)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;
        com.google.gxp.compiler.base.BundleType r1;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.BundleType;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: java.lang.String visitBundleType(com.google.gxp.compiler.base.BundleType)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBooleanType(com.google.gxp.compiler.base.BooleanType)
    {
        com.google.gxp.compiler.base.BooleanType r1;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 r0;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.BooleanType;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: java.lang.String visitBooleanType(com.google.gxp.compiler.base.BooleanType)>(r1);

        return $r2;
    }
}
