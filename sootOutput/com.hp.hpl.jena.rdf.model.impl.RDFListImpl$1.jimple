final class com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1 extends com.hp.hpl.jena.enhanced.Implementation
{

    void <init>()
    {
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1 r0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1;

        specialinvoke r0.<com.hp.hpl.jena.enhanced.Implementation: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.enhanced.EnhNode wrap(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.shared.JenaException $r3;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl $r9;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.enhanced.EnhGraph r2;
        com.hp.hpl.jena.rdf.model.Property $r12, $r13;
        java.lang.String $r8;
        com.hp.hpl.jena.ontology.OntModel $r10;
        boolean $z0, $z1;
        com.hp.hpl.jena.ontology.Profile $r11;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1 r0;
        com.hp.hpl.jena.rdf.model.Resource $r14, $r15;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1: boolean canWrap(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        if $z0 == 0 goto label2;

        $r9 = new com.hp.hpl.jena.rdf.model.impl.RDFListImpl;

        specialinvoke $r9.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        $z1 = r2 instanceof com.hp.hpl.jena.ontology.OntModel;

        if $z1 == 0 goto label1;

        $r10 = (com.hp.hpl.jena.ontology.OntModel) r2;

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property FIRST()>();

        $r9.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property m_listFirst> = $r12;

        $r13 = interfaceinvoke $r11.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property REST()>();

        $r9.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Property m_listRest> = $r13;

        $r14 = interfaceinvoke $r11.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource NIL()>();

        $r9.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource m_listNil> = $r14;

        $r15 = interfaceinvoke $r11.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource LIST()>();

        $r9.<com.hp.hpl.jena.rdf.model.impl.RDFListImpl: com.hp.hpl.jena.rdf.model.Resource m_listType> = $r15;

     label1:
        return $r9;

     label2:
        $r3 = new com.hp.hpl.jena.shared.JenaException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert node ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to RDFList");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public boolean canWrap(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.graph.Node r2, $r3, $r4, $r5, $r6, $r7, $r9, $r11;
        com.hp.hpl.jena.enhanced.EnhGraph r0;
        com.hp.hpl.jena.rdf.model.Property $r8, r15, r16;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.ontology.OntModel $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.ontology.Profile $r13;
        com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1 r14;
        com.hp.hpl.jena.rdf.model.Resource $r10, r17;

        r14 := @this: com.hp.hpl.jena.rdf.model.impl.RDFListImpl$1;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.enhanced.EnhGraph: com.hp.hpl.jena.graph.Graph asGraph()>();

        r15 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property first>;

        r16 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property rest>;

        r17 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource nil>;

        $z0 = r0 instanceof com.hp.hpl.jena.ontology.OntModel;

        if $z0 == 0 goto label1;

        $r12 = (com.hp.hpl.jena.ontology.OntModel) r0;

        $r13 = interfaceinvoke $r12.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        r15 = interfaceinvoke $r13.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property FIRST()>();

        r16 = interfaceinvoke $r13.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Property REST()>();

        r17 = interfaceinvoke $r13.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource NIL()>();

     label1:
        $r3 = interfaceinvoke r17.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $z1 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        $r4 = interfaceinvoke r15.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, $r4, $r5);

        if $z2 != 0 goto label2;

        $r6 = interfaceinvoke r16.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $r7 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z3 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, $r6, $r7);

        if $z3 != 0 goto label2;

        $r8 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r10 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource List>;

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        $z4 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, $r9, $r11);

        if $z4 == 0 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;
    }
}
