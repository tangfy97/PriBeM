public class groovyjarjarantlr.ASTFactory extends java.lang.Object
{
    protected java.lang.String theASTNodeType;
    protected java.lang.Class theASTNodeTypeClass;
    protected java.util.Hashtable tokenTypeToASTClassMap;
    static java.lang.Class class$antlr$CommonAST;
    static java.lang.Class class$antlr$Token;

    public void <init>()
    {
        groovyjarjarantlr.ASTFactory r0;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovyjarjarantlr.ASTFactory: java.lang.String theASTNodeType> = null;

        r0.<groovyjarjarantlr.ASTFactory: java.lang.Class theASTNodeTypeClass> = null;

        r0.<groovyjarjarantlr.ASTFactory: java.util.Hashtable tokenTypeToASTClassMap> = null;

        return;
    }

    public void <init>(java.util.Hashtable)
    {
        groovyjarjarantlr.ASTFactory r0;
        java.util.Hashtable r1;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        r1 := @parameter0: java.util.Hashtable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovyjarjarantlr.ASTFactory: java.lang.String theASTNodeType> = null;

        r0.<groovyjarjarantlr.ASTFactory: java.lang.Class theASTNodeTypeClass> = null;

        r0.<groovyjarjarantlr.ASTFactory: java.util.Hashtable tokenTypeToASTClassMap> = null;

        virtualinvoke r0.<groovyjarjarantlr.ASTFactory: void setTokenTypeToASTClassMap(java.util.Hashtable)>(r1);

        return;
    }

    public void setTokenTypeASTNodeType(int, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Integer $r4, $r6;
        java.lang.StringBuffer $r11, $r12, $r13;
        int i0;
        java.lang.String r2, $r14;
        groovyjarjarantlr.ASTFactory r0;
        java.util.Hashtable $r1, $r5, $r7, $r8;
        java.lang.IllegalArgumentException $r10;
        java.lang.Exception $r9;
        java.lang.Class $r3;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<groovyjarjarantlr.ASTFactory: java.util.Hashtable tokenTypeToASTClassMap>;

        if $r1 != null goto label1;

        $r8 = new java.util.Hashtable;

        specialinvoke $r8.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.ASTFactory: java.util.Hashtable tokenTypeToASTClassMap> = $r8;

     label1:
        if r2 != null goto label2;

        $r7 = r0.<groovyjarjarantlr.ASTFactory: java.util.Hashtable tokenTypeToASTClassMap>;

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r6);

        return;

     label2:
        $r3 = staticinvoke <groovyjarjarantlr.Utils: java.lang.Class loadClass(java.lang.String)>(r2);

        $r5 = r0.<groovyjarjarantlr.ASTFactory: java.util.Hashtable tokenTypeToASTClassMap>;

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid class, ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public java.lang.Class getASTNodeType(int)
    {
        java.lang.Integer $r5;
        int i0;
        java.lang.Class $r2, $r3, $r4, r8, $r9;
        java.lang.Object $r7;
        groovyjarjarantlr.ASTFactory r0;
        java.util.Hashtable $r1, $r6;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.ASTFactory: java.util.Hashtable tokenTypeToASTClassMap>;

        if $r1 == null goto label1;

        $r6 = r0.<groovyjarjarantlr.ASTFactory: java.util.Hashtable tokenTypeToASTClassMap>;

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(i0);

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        r8 = (java.lang.Class) $r7;

        if r8 == null goto label1;

        return r8;

     label1:
        $r2 = r0.<groovyjarjarantlr.ASTFactory: java.lang.Class theASTNodeTypeClass>;

        if $r2 == null goto label2;

        $r4 = r0.<groovyjarjarantlr.ASTFactory: java.lang.Class theASTNodeTypeClass>;

        return $r4;

     label2:
        $r3 = <groovyjarjarantlr.ASTFactory: java.lang.Class class$antlr$CommonAST>;

        if $r3 != null goto label3;

        $r9 = staticinvoke <groovyjarjarantlr.ASTFactory: java.lang.Class class$(java.lang.String)>("groovyjarjarantlr.CommonAST");

        <groovyjarjarantlr.ASTFactory: java.lang.Class class$antlr$CommonAST> = $r9;

        goto label4;

     label3:
        $r9 = <groovyjarjarantlr.ASTFactory: java.lang.Class class$antlr$CommonAST>;

     label4:
        return $r9;
    }

    public void addASTChild(groovyjarjarantlr.ASTPair, groovyjarjarantlr.collections.AST)
    {
        groovyjarjarantlr.ASTPair r1;
        groovyjarjarantlr.collections.AST r0, $r2, $r3, $r4, $r5;
        groovyjarjarantlr.ASTFactory r6;

        r6 := @this: groovyjarjarantlr.ASTFactory;

        r1 := @parameter0: groovyjarjarantlr.ASTPair;

        r0 := @parameter1: groovyjarjarantlr.collections.AST;

        if r0 == null goto label4;

        $r2 = r1.<groovyjarjarantlr.ASTPair: groovyjarjarantlr.collections.AST root>;

        if $r2 != null goto label1;

        r1.<groovyjarjarantlr.ASTPair: groovyjarjarantlr.collections.AST root> = r0;

        goto label3;

     label1:
        $r3 = r1.<groovyjarjarantlr.ASTPair: groovyjarjarantlr.collections.AST child>;

        if $r3 != null goto label2;

        $r5 = r1.<groovyjarjarantlr.ASTPair: groovyjarjarantlr.collections.AST root>;

        interfaceinvoke $r5.<groovyjarjarantlr.collections.AST: void setFirstChild(groovyjarjarantlr.collections.AST)>(r0);

        goto label3;

     label2:
        $r4 = r1.<groovyjarjarantlr.ASTPair: groovyjarjarantlr.collections.AST child>;

        interfaceinvoke $r4.<groovyjarjarantlr.collections.AST: void setNextSibling(groovyjarjarantlr.collections.AST)>(r0);

     label3:
        r1.<groovyjarjarantlr.ASTPair: groovyjarjarantlr.collections.AST child> = r0;

        virtualinvoke r1.<groovyjarjarantlr.ASTPair: void advanceChildToEnd()>();

     label4:
        return;
    }

    public groovyjarjarantlr.collections.AST create()
    {
        groovyjarjarantlr.collections.AST $r1;
        groovyjarjarantlr.ASTFactory r0;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST create(int)>(0);

        return $r1;
    }

    public groovyjarjarantlr.collections.AST create(int)
    {
        int i0;
        java.lang.Class $r1;
        groovyjarjarantlr.collections.AST $r2;
        groovyjarjarantlr.ASTFactory r0;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: java.lang.Class getASTNodeType(int)>(i0);

        $r2 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST create(java.lang.Class)>($r1);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: void initialize(int,java.lang.String)>(i0, "");

     label1:
        return $r2;
    }

    public groovyjarjarantlr.collections.AST create(int, java.lang.String)
    {
        int i0;
        java.lang.String r2;
        groovyjarjarantlr.collections.AST $r1;
        groovyjarjarantlr.ASTFactory r0;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST create(int)>(i0);

        if $r1 == null goto label1;

        interfaceinvoke $r1.<groovyjarjarantlr.collections.AST: void initialize(int,java.lang.String)>(i0, r2);

     label1:
        return $r1;
    }

    public groovyjarjarantlr.collections.AST create(int, java.lang.String, java.lang.String)
    {
        int i0;
        java.lang.String r1, r3;
        groovyjarjarantlr.collections.AST $r2;
        groovyjarjarantlr.ASTFactory r0;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST create(java.lang.String)>(r1);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: void initialize(int,java.lang.String)>(i0, r3);

     label1:
        return $r2;
    }

    public groovyjarjarantlr.collections.AST create(groovyjarjarantlr.collections.AST)
    {
        int $i0;
        groovyjarjarantlr.collections.AST r0, $r2;
        groovyjarjarantlr.ASTFactory r1;

        r1 := @this: groovyjarjarantlr.ASTFactory;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke r0.<groovyjarjarantlr.collections.AST: int getType()>();

        $r2 = virtualinvoke r1.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST create(int)>($i0);

        if $r2 == null goto label2;

        interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: void initialize(groovyjarjarantlr.collections.AST)>(r0);

     label2:
        return $r2;
    }

    public groovyjarjarantlr.collections.AST create(groovyjarjarantlr.Token)
    {
        int $i0;
        groovyjarjarantlr.collections.AST $r2;
        groovyjarjarantlr.ASTFactory r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        r1 := @parameter0: groovyjarjarantlr.Token;

        $i0 = virtualinvoke r1.<groovyjarjarantlr.Token: int getType()>();

        $r2 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST create(int)>($i0);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: void initialize(groovyjarjarantlr.Token)>(r1);

     label1:
        return $r2;
    }

    public groovyjarjarantlr.collections.AST create(groovyjarjarantlr.Token, java.lang.String)
    {
        java.lang.String r2;
        groovyjarjarantlr.collections.AST $r3;
        groovyjarjarantlr.ASTFactory r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST createUsingCtor(groovyjarjarantlr.Token,java.lang.String)>(r1, r2);

        return $r3;
    }

    public groovyjarjarantlr.collections.AST create(java.lang.String)
    {
        java.lang.IllegalArgumentException $r5;
        java.lang.Exception $r4;
        java.lang.StringBuffer $r6, $r7, $r8;
        java.lang.Class $r1;
        java.lang.String r0, $r9;
        groovyjarjarantlr.collections.AST $r3;
        groovyjarjarantlr.ASTFactory r2;

        r2 := @this: groovyjarjarantlr.ASTFactory;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <groovyjarjarantlr.Utils: java.lang.Class loadClass(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid class, ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        $r3 = virtualinvoke r2.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST create(java.lang.Class)>($r1);

        return $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected groovyjarjarantlr.collections.AST createUsingCtor(groovyjarjarantlr.Token, java.lang.String)
    {
        java.lang.Object[] $r5;
        java.lang.NoSuchMethodException $r14;
        java.lang.reflect.Constructor $r4;
        java.lang.StringBuffer $r10, $r11, $r12;
        java.lang.String r0, $r13;
        groovyjarjarantlr.Token r6;
        groovyjarjarantlr.ASTFactory r15;
        java.lang.Class[] $r2;
        java.lang.IllegalArgumentException $r9;
        java.lang.Exception $r8;
        java.lang.Class $r1, $r3, $r17;
        java.lang.Object $r7;
        groovyjarjarantlr.collections.AST $r16, r18;

        r15 := @this: groovyjarjarantlr.ASTFactory;

        r6 := @parameter0: groovyjarjarantlr.Token;

        r0 := @parameter1: java.lang.String;

     label1:
        $r1 = staticinvoke <groovyjarjarantlr.Utils: java.lang.Class loadClass(java.lang.String)>(r0);

        $r2 = newarray (java.lang.Class)[1];

        $r3 = <groovyjarjarantlr.ASTFactory: java.lang.Class class$antlr$Token>;

        if $r3 != null goto label2;

        $r17 = staticinvoke <groovyjarjarantlr.ASTFactory: java.lang.Class class$(java.lang.String)>("groovyjarjarantlr.Token");

        <groovyjarjarantlr.ASTFactory: java.lang.Class class$antlr$Token> = $r17;

        goto label3;

     label2:
        $r17 = <groovyjarjarantlr.ASTFactory: java.lang.Class class$antlr$Token>;

     label3:
        $r2[0] = $r17;

     label4:
        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r6;

        $r7 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        r18 = (groovyjarjarantlr.collections.AST) $r7;

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;

        $r16 = virtualinvoke r15.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST create(java.lang.Class)>($r1);

        r18 = $r16;

        if $r16 == null goto label7;

        interfaceinvoke $r16.<groovyjarjarantlr.collections.AST: void initialize(groovyjarjarantlr.Token)>(r6);

     label7:
        goto label9;

     label8:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid class or can\'t make instance, ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label9:
        return r18;

        catch java.lang.NoSuchMethodException from label4 to label5 with label6;
        catch java.lang.Exception from label1 to label7 with label8;
    }

    protected groovyjarjarantlr.collections.AST create(java.lang.Class)
    {
        java.lang.Exception $r2;
        java.lang.StringBuffer $r4, $r5, $r7;
        java.lang.Class r0;
        java.lang.Object $r1;
        java.lang.String $r6, $r8;
        groovyjarjarantlr.collections.AST r9;
        groovyjarjarantlr.ASTFactory r3;

        r3 := @this: groovyjarjarantlr.ASTFactory;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        r9 = (groovyjarjarantlr.collections.AST) $r1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t create AST Node ");

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<groovyjarjarantlr.ASTFactory: void error(java.lang.String)>($r8);

        return null;

     label4:
        return r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public groovyjarjarantlr.collections.AST dup(groovyjarjarantlr.collections.AST)
    {
        java.lang.Class $r2;
        groovyjarjarantlr.collections.AST r0, $r3;
        groovyjarjarantlr.ASTFactory r1;

        r1 := @this: groovyjarjarantlr.ASTFactory;

        r0 := @parameter0: groovyjarjarantlr.collections.AST;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST create(java.lang.Class)>($r2);

        interfaceinvoke $r3.<groovyjarjarantlr.collections.AST: void initialize(groovyjarjarantlr.collections.AST)>(r0);

        return $r3;
    }

    public groovyjarjarantlr.collections.AST dupList(groovyjarjarantlr.collections.AST)
    {
        groovyjarjarantlr.collections.AST $r1, $r2, $r3, r4, r5;
        groovyjarjarantlr.ASTFactory r0;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        r4 := @parameter0: groovyjarjarantlr.collections.AST;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST dupTree(groovyjarjarantlr.collections.AST)>(r4);

        r5 = $r1;

     label1:
        if r4 == null goto label2;

        $r2 = interfaceinvoke r4.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        r4 = $r2;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST dupTree(groovyjarjarantlr.collections.AST)>($r2);

        interfaceinvoke r5.<groovyjarjarantlr.collections.AST: void setNextSibling(groovyjarjarantlr.collections.AST)>($r3);

        r5 = interfaceinvoke r5.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label1;

     label2:
        return $r1;
    }

    public groovyjarjarantlr.collections.AST dupTree(groovyjarjarantlr.collections.AST)
    {
        groovyjarjarantlr.collections.AST r1, $r2, $r3, $r4;
        groovyjarjarantlr.ASTFactory r0;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        r1 := @parameter0: groovyjarjarantlr.collections.AST;

        $r2 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST dup(groovyjarjarantlr.collections.AST)>(r1);

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        $r4 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST dupList(groovyjarjarantlr.collections.AST)>($r3);

        interfaceinvoke $r2.<groovyjarjarantlr.collections.AST: void setFirstChild(groovyjarjarantlr.collections.AST)>($r4);

     label1:
        return $r2;
    }

    public groovyjarjarantlr.collections.AST make(groovyjarjarantlr.collections.AST[])
    {
        groovyjarjarantlr.collections.AST[] r0;
        int $i0, i1, $i2;
        groovyjarjarantlr.collections.AST $r1, $r2, $r3, $r4, r6, r7, $r8;
        groovyjarjarantlr.ASTFactory r5;

        r5 := @this: groovyjarjarantlr.ASTFactory;

        r0 := @parameter0: groovyjarjarantlr.collections.AST[];

        if r0 == null goto label01;

        $i0 = lengthof r0;

        if $i0 != 0 goto label02;

     label01:
        return null;

     label02:
        r6 = r0[0];

        r7 = null;

        if r6 == null goto label03;

        interfaceinvoke r6.<groovyjarjarantlr.collections.AST: void setFirstChild(groovyjarjarantlr.collections.AST)>(null);

     label03:
        i1 = 1;

     label04:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label10;

        $r1 = r0[i1];

        if $r1 != null goto label05;

        goto label09;

     label05:
        if r6 != null goto label06;

        $r4 = r0[i1];

        r7 = $r4;

        r6 = $r4;

        goto label08;

     label06:
        if r7 != null goto label07;

        $r3 = r0[i1];

        interfaceinvoke r6.<groovyjarjarantlr.collections.AST: void setFirstChild(groovyjarjarantlr.collections.AST)>($r3);

        r7 = interfaceinvoke r6.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getFirstChild()>();

        goto label08;

     label07:
        $r2 = r0[i1];

        interfaceinvoke r7.<groovyjarjarantlr.collections.AST: void setNextSibling(groovyjarjarantlr.collections.AST)>($r2);

        r7 = interfaceinvoke r7.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

     label08:
        $r8 = interfaceinvoke r7.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        if $r8 == null goto label09;

        r7 = interfaceinvoke r7.<groovyjarjarantlr.collections.AST: groovyjarjarantlr.collections.AST getNextSibling()>();

        goto label08;

     label09:
        i1 = i1 + 1;

        goto label04;

     label10:
        return r6;
    }

    public groovyjarjarantlr.collections.AST make(groovyjarjarantlr.collections.impl.ASTArray)
    {
        groovyjarjarantlr.collections.impl.ASTArray r1;
        groovyjarjarantlr.collections.AST $r3;
        groovyjarjarantlr.ASTFactory r0;
        groovyjarjarantlr.collections.AST[] $r2;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.ASTArray;

        $r2 = r1.<groovyjarjarantlr.collections.impl.ASTArray: groovyjarjarantlr.collections.AST[] array>;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.ASTFactory: groovyjarjarantlr.collections.AST make(groovyjarjarantlr.collections.AST[])>($r2);

        return $r3;
    }

    public void makeASTRoot(groovyjarjarantlr.ASTPair, groovyjarjarantlr.collections.AST)
    {
        groovyjarjarantlr.ASTPair r1;
        groovyjarjarantlr.collections.AST r0, $r2, $r3;
        groovyjarjarantlr.ASTFactory r4;

        r4 := @this: groovyjarjarantlr.ASTFactory;

        r1 := @parameter0: groovyjarjarantlr.ASTPair;

        r0 := @parameter1: groovyjarjarantlr.collections.AST;

        if r0 == null goto label1;

        $r2 = r1.<groovyjarjarantlr.ASTPair: groovyjarjarantlr.collections.AST root>;

        interfaceinvoke r0.<groovyjarjarantlr.collections.AST: void addChild(groovyjarjarantlr.collections.AST)>($r2);

        $r3 = r1.<groovyjarjarantlr.ASTPair: groovyjarjarantlr.collections.AST root>;

        r1.<groovyjarjarantlr.ASTPair: groovyjarjarantlr.collections.AST child> = $r3;

        virtualinvoke r1.<groovyjarjarantlr.ASTPair: void advanceChildToEnd()>();

        r1.<groovyjarjarantlr.ASTPair: groovyjarjarantlr.collections.AST root> = r0;

     label1:
        return;
    }

    public void setASTNodeClass(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r2;
        groovyjarjarantlr.ASTFactory r1;

        r1 := @this: groovyjarjarantlr.ASTFactory;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        r1.<groovyjarjarantlr.ASTFactory: java.lang.Class theASTNodeTypeClass> = r0;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        r1.<groovyjarjarantlr.ASTFactory: java.lang.String theASTNodeType> = $r2;

     label1:
        return;
    }

    public void setASTNodeClass(java.lang.String)
    {
        java.lang.Exception $r3;
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.Class $r2;
        java.lang.String r1, $r7;
        groovyjarjarantlr.ASTFactory r0;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        r1 := @parameter0: java.lang.String;

        r0.<groovyjarjarantlr.ASTFactory: java.lang.String theASTNodeType> = r1;

     label1:
        $r2 = staticinvoke <groovyjarjarantlr.Utils: java.lang.Class loadClass(java.lang.String)>(r1);

        r0.<groovyjarjarantlr.ASTFactory: java.lang.Class theASTNodeTypeClass> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t find/access AST Node type");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.ASTFactory: void error(java.lang.String)>($r7);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setASTNodeType(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.ASTFactory r0;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<groovyjarjarantlr.ASTFactory: void setASTNodeClass(java.lang.String)>(r1);

        return;
    }

    public java.util.Hashtable getTokenTypeToASTClassMap()
    {
        groovyjarjarantlr.ASTFactory r0;
        java.util.Hashtable $r1;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        $r1 = r0.<groovyjarjarantlr.ASTFactory: java.util.Hashtable tokenTypeToASTClassMap>;

        return $r1;
    }

    public void setTokenTypeToASTClassMap(java.util.Hashtable)
    {
        groovyjarjarantlr.ASTFactory r0;
        java.util.Hashtable r1;

        r0 := @this: groovyjarjarantlr.ASTFactory;

        r1 := @parameter0: java.util.Hashtable;

        r0.<groovyjarjarantlr.ASTFactory: java.util.Hashtable tokenTypeToASTClassMap> = r1;

        return;
    }

    public void error(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;
        groovyjarjarantlr.ASTFactory r2;

        r2 := @this: groovyjarjarantlr.ASTFactory;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
