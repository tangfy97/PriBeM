public class ucar.nc2.ft.point.standard.plug.Cosmic extends ucar.nc2.ft.point.standard.TableConfigurerImpl
{

    public void <init>()
    {
        ucar.nc2.ft.point.standard.plug.Cosmic r0;

        r0 := @this: ucar.nc2.ft.point.standard.plug.Cosmic;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableConfigurerImpl: void <init>()>();

        return;
    }

    public boolean isMine(ucar.nc2.constants.FeatureType, ucar.nc2.dataset.NetcdfDataset)
    {
        java.lang.String $r1;
        ucar.nc2.dataset.NetcdfDataset r0;
        ucar.nc2.constants.FeatureType r3;
        boolean $z0, $z1;
        ucar.nc2.ft.point.standard.plug.Cosmic r2;

        r2 := @this: ucar.nc2.ft.point.standard.plug.Cosmic;

        r3 := @parameter0: ucar.nc2.constants.FeatureType;

        r0 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "center", null);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("UCAR/CDAAC");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public ucar.nc2.ft.point.standard.TableConfig getConfig(ucar.nc2.constants.FeatureType, ucar.nc2.dataset.NetcdfDataset, java.util.Formatter) throws java.io.IOException
    {
        ucar.nc2.ft.point.standard.PointConfigXML $r0;
        java.util.Formatter r6;
        ucar.nc2.ft.point.standard.TableConfig $r7, $r8, $r9;
        java.lang.String $r2, $r3, $r4;
        ucar.nc2.dataset.NetcdfDataset r1;
        ucar.nc2.constants.FeatureType r5;
        boolean $z0, $z1, $z2;
        ucar.nc2.ft.point.standard.plug.Cosmic r10;

        r10 := @this: ucar.nc2.ft.point.standard.plug.Cosmic;

        r5 := @parameter0: ucar.nc2.constants.FeatureType;

        r1 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        r6 := @parameter2: java.util.Formatter;

        $r0 = new ucar.nc2.ft.point.standard.PointConfigXML;

        specialinvoke $r0.<ucar.nc2.ft.point.standard.PointConfigXML: void <init>()>();

        $r2 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String getConventionUsed()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Cosmic1");

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r0.<ucar.nc2.ft.point.standard.PointConfigXML: ucar.nc2.ft.point.standard.TableConfig readConfigXMLfromResource(java.lang.String,ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,java.util.Formatter)>("resources/nj22/pointConfig/Cosmic1.xml", r5, r1, r6);

        return $r9;

     label1:
        $r3 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String getConventionUsed()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Cosmic2");

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke $r0.<ucar.nc2.ft.point.standard.PointConfigXML: ucar.nc2.ft.point.standard.TableConfig readConfigXMLfromResource(java.lang.String,ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,java.util.Formatter)>("resources/nj22/pointConfig/Cosmic2.xml", r5, r1, r6);

        return $r8;

     label2:
        $r4 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String getConventionUsed()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Cosmic3");

        if $z2 == 0 goto label3;

        $r7 = virtualinvoke $r0.<ucar.nc2.ft.point.standard.PointConfigXML: ucar.nc2.ft.point.standard.TableConfig readConfigXMLfromResource(java.lang.String,ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,java.util.Formatter)>("resources/nj22/pointConfig/Cosmic3.xml", r5, r1, r6);

        return $r7;

     label3:
        return null;
    }
}
