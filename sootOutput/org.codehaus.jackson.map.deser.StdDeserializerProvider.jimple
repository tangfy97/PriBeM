public class org.codehaus.jackson.map.deser.StdDeserializerProvider extends org.codehaus.jackson.map.DeserializerProvider
{
    protected final java.util.concurrent.ConcurrentHashMap _cachedDeserializers;
    protected final java.util.HashMap _incompleteDeserializers;
    protected final org.codehaus.jackson.map.util.RootNameLookup _rootNames;
    protected org.codehaus.jackson.map.DeserializerFactory _factory;

    public void <init>()
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.deser.BeanDeserializerFactory $r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 = <org.codehaus.jackson.map.deser.BeanDeserializerFactory: org.codehaus.jackson.map.deser.BeanDeserializerFactory instance>;

        specialinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: void <init>(org.codehaus.jackson.map.DeserializerFactory)>($r1);

        return;
    }

    public void <init>(org.codehaus.jackson.map.DeserializerFactory)
    {
        org.codehaus.jackson.map.DeserializerFactory r3;
        org.codehaus.jackson.map.util.RootNameLookup $r4;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.HashMap $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r3 := @parameter0: org.codehaus.jackson.map.DeserializerFactory;

        specialinvoke r0.<org.codehaus.jackson.map.DeserializerProvider: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(64, 0.75F, 2);

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.concurrent.ConcurrentHashMap _cachedDeserializers> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(8);

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers> = $r2;

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory> = r3;

        $r4 = new org.codehaus.jackson.map.util.RootNameLookup;

        specialinvoke $r4.<org.codehaus.jackson.map.util.RootNameLookup: void <init>()>();

        r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.util.RootNameLookup _rootNames> = $r4;

        return;
    }

    public org.codehaus.jackson.map.DeserializerProvider withAdditionalDeserializers(org.codehaus.jackson.map.Deserializers)
    {
        org.codehaus.jackson.map.DeserializerFactory $r2, $r3;
        org.codehaus.jackson.map.Deserializers r1;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0, $r4;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.Deserializers;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.DeserializerFactory withAdditionalDeserializers(org.codehaus.jackson.map.Deserializers)>(r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.deser.StdDeserializerProvider withFactory(org.codehaus.jackson.map.DeserializerFactory)>($r3);

        return $r4;
    }

    public org.codehaus.jackson.map.DeserializerProvider withAdditionalKeyDeserializers(org.codehaus.jackson.map.KeyDeserializers)
    {
        org.codehaus.jackson.map.DeserializerFactory $r2, $r3;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0, $r4;
        org.codehaus.jackson.map.KeyDeserializers r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.KeyDeserializers;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.DeserializerFactory withAdditionalKeyDeserializers(org.codehaus.jackson.map.KeyDeserializers)>(r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.deser.StdDeserializerProvider withFactory(org.codehaus.jackson.map.DeserializerFactory)>($r3);

        return $r4;
    }

    public org.codehaus.jackson.map.DeserializerProvider withDeserializerModifier(org.codehaus.jackson.map.deser.BeanDeserializerModifier)
    {
        org.codehaus.jackson.map.DeserializerFactory $r2, $r3;
        org.codehaus.jackson.map.deser.BeanDeserializerModifier r1;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0, $r4;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.deser.BeanDeserializerModifier;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.DeserializerFactory withDeserializerModifier(org.codehaus.jackson.map.deser.BeanDeserializerModifier)>(r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.deser.StdDeserializerProvider withFactory(org.codehaus.jackson.map.DeserializerFactory)>($r3);

        return $r4;
    }

    public org.codehaus.jackson.map.DeserializerProvider withAbstractTypeResolver(org.codehaus.jackson.map.AbstractTypeResolver)
    {
        org.codehaus.jackson.map.DeserializerFactory $r2, $r3;
        org.codehaus.jackson.map.AbstractTypeResolver r1;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0, $r4;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.AbstractTypeResolver;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.DeserializerFactory withAbstractTypeResolver(org.codehaus.jackson.map.AbstractTypeResolver)>(r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.deser.StdDeserializerProvider withFactory(org.codehaus.jackson.map.DeserializerFactory)>($r3);

        return $r4;
    }

    public org.codehaus.jackson.map.DeserializerProvider withValueInstantiators(org.codehaus.jackson.map.deser.ValueInstantiators)
    {
        org.codehaus.jackson.map.DeserializerFactory $r2, $r3;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0, $r4;
        org.codehaus.jackson.map.deser.ValueInstantiators r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.deser.ValueInstantiators;

        $r2 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.DeserializerFactory withValueInstantiators(org.codehaus.jackson.map.deser.ValueInstantiators)>(r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.deser.StdDeserializerProvider withFactory(org.codehaus.jackson.map.DeserializerFactory)>($r3);

        return $r4;
    }

    public org.codehaus.jackson.map.deser.StdDeserializerProvider withFactory(org.codehaus.jackson.map.DeserializerFactory)
    {
        java.lang.IllegalStateException $r4;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0, $r2;
        org.codehaus.jackson.map.DeserializerFactory r3;
        java.lang.Class $r1, $r7;
        java.lang.StringBuilder $r5, $r6, $r9, $r10;
        java.lang.String $r8, $r11;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r3 := @parameter0: org.codehaus.jackson.map.DeserializerFactory;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == class "Lorg/codehaus/jackson/map/deser/StdDeserializerProvider;" goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DeserializerProvider of type ");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not override \'withFactory()\' method");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label1:
        $r2 = new org.codehaus.jackson.map.deser.StdDeserializerProvider;

        specialinvoke $r2.<org.codehaus.jackson.map.deser.StdDeserializerProvider: void <init>(org.codehaus.jackson.map.DeserializerFactory)>(r3);

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType mapAbstractType(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.DeserializerFactory $r3;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.type.JavaType r2, $r4;
        org.codehaus.jackson.map.DeserializationConfig r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.type.JavaType mapAbstractType(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>(r1, r2);

        return $r4;
    }

    public org.codehaus.jackson.io.SerializedString findExpectedRootName(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.util.RootNameLookup $r3;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.io.SerializedString $r4;
        org.codehaus.jackson.map.DeserializationConfig r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r2 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.util.RootNameLookup _rootNames>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.util.RootNameLookup: org.codehaus.jackson.io.SerializedString findRootName(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.MapperConfig)>(r1, r2);

        return $r4;
    }

    public org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.DeserializationConfig r3;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.ContextualDeserializer $r6, $r7;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.JsonDeserializer $r2, $r5, r8, r9;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r3 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r4 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _findCachedDeserializer(org.codehaus.jackson.type.JavaType)>(r1);

        r8 = $r2;

        if $r2 == null goto label2;

        $z1 = $r2 instanceof org.codehaus.jackson.map.ContextualDeserializer;

        if $z1 == 0 goto label1;

        $r7 = (org.codehaus.jackson.map.ContextualDeserializer) $r2;

        r8 = interfaceinvoke $r7.<org.codehaus.jackson.map.ContextualDeserializer: org.codehaus.jackson.map.JsonDeserializer createContextual(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.BeanProperty)>(r3, r4);

     label1:
        return r8;

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _createAndCacheValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r3, r1, r4);

        r9 = $r5;

        if $r5 != null goto label3;

        r9 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _handleUnknownValueDeserializer(org.codehaus.jackson.type.JavaType)>(r1);

     label3:
        $z0 = r9 instanceof org.codehaus.jackson.map.ContextualDeserializer;

        if $z0 == 0 goto label4;

        $r6 = (org.codehaus.jackson.map.ContextualDeserializer) r9;

        r9 = interfaceinvoke $r6.<org.codehaus.jackson.map.ContextualDeserializer: org.codehaus.jackson.map.JsonDeserializer createContextual(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.BeanProperty)>(r3, r4);

     label4:
        return r9;
    }

    public org.codehaus.jackson.map.JsonDeserializer findTypedValueDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.BeanProperty r3;
        org.codehaus.jackson.map.DeserializerFactory $r5;
        org.codehaus.jackson.map.TypeDeserializer $r6;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.JsonDeserializer $r4;
        org.codehaus.jackson.map.deser.StdDeserializerProvider$WrappedDeserializer $r7;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, r2, r3);

        $r5 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, r2, r3);

        if $r6 == null goto label1;

        $r7 = new org.codehaus.jackson.map.deser.StdDeserializerProvider$WrappedDeserializer;

        specialinvoke $r7.<org.codehaus.jackson.map.deser.StdDeserializerProvider$WrappedDeserializer: void <init>(org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>($r6, $r4);

        return $r7;

     label1:
        return $r4;
    }

    public org.codehaus.jackson.map.KeyDeserializer findKeyDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.BeanProperty r3;
        org.codehaus.jackson.map.DeserializerFactory $r4;
        org.codehaus.jackson.map.KeyDeserializer $r5, $r6, r8;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.ContextualKeyDeserializer $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.KeyDeserializer createKeyDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, r2, r3);

        r8 = $r5;

        $z0 = $r5 instanceof org.codehaus.jackson.map.ContextualKeyDeserializer;

        if $z0 == 0 goto label1;

        $r7 = (org.codehaus.jackson.map.ContextualKeyDeserializer) $r5;

        r8 = interfaceinvoke $r7.<org.codehaus.jackson.map.ContextualKeyDeserializer: org.codehaus.jackson.map.KeyDeserializer createContextual(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.BeanProperty)>(r1, r3);

     label1:
        if r8 != null goto label2;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.KeyDeserializer _handleUnknownKeyDeserializer(org.codehaus.jackson.type.JavaType)>(r2);

        return $r6;

     label2:
        return r8;
    }

    public boolean hasValueDeserializerFor(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.JsonDeserializer $r2, r5;
        org.codehaus.jackson.map.DeserializationConfig r3;
        java.lang.Exception $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r3 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _findCachedDeserializer(org.codehaus.jackson.type.JavaType)>(r1);

        r5 = $r2;

        if $r2 != null goto label4;

     label1:
        r5 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _createAndCacheValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r3, r1, null);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        return 0;

     label4:
        if r5 == null goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int cachedDeserializersCount()
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        int $i0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.concurrent.ConcurrentHashMap _cachedDeserializers>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }

    public void flushCachedDeserializers()
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.concurrent.ConcurrentHashMap _cachedDeserializers>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }

    protected org.codehaus.jackson.map.JsonDeserializer _findCachedDeserializer(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.codehaus.jackson.type.JavaType r0;
        java.lang.Object $r3;
        org.codehaus.jackson.map.JsonDeserializer $r4;
        java.lang.IllegalArgumentException $r5;

        r1 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r1.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.concurrent.ConcurrentHashMap _cachedDeserializers>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (org.codehaus.jackson.map.JsonDeserializer) $r3;

        return $r4;
    }

    protected org.codehaus.jackson.map.JsonDeserializer _createAndCacheValueDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        java.lang.Throwable $r12, $r13;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.HashMap $r1, $r4, $r8, $r9, $r10, $r14, $r15;
        org.codehaus.jackson.map.DeserializationConfig r5;
        int $i0, $i1, $i2;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.JsonDeserializer $r3, $r7, r16;
        org.codehaus.jackson.map.BeanProperty r6;
        java.lang.Object $r11;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r5 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r6 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        entermonitor $r1;

     label01:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _findCachedDeserializer(org.codehaus.jackson.type.JavaType)>(r2);

        if $r3 == null goto label03;

        exitmonitor $r1;

     label02:
        return $r3;

     label03:
        $r4 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        $i0 = virtualinvoke $r4.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label05;

        $r10 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r16 = (org.codehaus.jackson.map.JsonDeserializer) $r11;

        if r16 == null goto label05;

        exitmonitor $r1;

     label04:
        return r16;

     label05:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _createAndCache2(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r5, r2, r6);

     label06:
        if $i0 != 0 goto label07;

        $r8 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        $i1 = virtualinvoke $r8.<java.util.HashMap: int size()>();

        if $i1 <= 0 goto label07;

        $r9 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

     label07:
        exitmonitor $r1;

     label08:
        return $r7;

     label09:
        $r13 := @caughtexception;

     label10:
        if $i0 != 0 goto label11;

        $r14 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        $i2 = virtualinvoke $r14.<java.util.HashMap: int size()>();

        if $i2 <= 0 goto label11;

        $r15 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        virtualinvoke $r15.<java.util.HashMap: void clear()>();

     label11:
        throw $r13;

     label12:
        $r12 := @caughtexception;

        exitmonitor $r1;

     label13:
        throw $r12;

        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label08 with label12;
        catch java.lang.Throwable from label09 to label13 with label12;
    }

    protected org.codehaus.jackson.map.JsonDeserializer _createAndCache2(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ResolvableDeserializer $r8;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0;
        java.util.HashMap $r7, $r9;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.JsonMappingException $r16;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r13;
        org.codehaus.jackson.type.JavaType r2;
        java.lang.Boolean $r14;
        org.codehaus.jackson.map.JsonDeserializer $r4;
        java.lang.String $r17;
        boolean $z0, z1, z3, $z4, $z5;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r10;
        java.util.concurrent.ConcurrentHashMap $r6;
        java.lang.IllegalArgumentException $r15;
        org.codehaus.jackson.map.BeanProperty r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r11;
        java.lang.Class $r5, $r12;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

     label01:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.JsonDeserializer _createDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, r2, r3);

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

        $r16 = new org.codehaus.jackson.map.JsonMappingException;

        $r17 = virtualinvoke $r15.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        specialinvoke $r16.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation,java.lang.Throwable)>($r17, null, $r15);

        throw $r16;

     label04:
        if $r4 != null goto label05;

        return null;

     label05:
        z1 = $r4 instanceof org.codehaus.jackson.map.ResolvableDeserializer;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        if $r5 != class "Lorg/codehaus/jackson/map/deser/BeanDeserializer;" goto label06;

        $z5 = 1;

        $z4 = 1;

        goto label07;

     label06:
        $z5 = 0;

        $z4 = 0;

     label07:
        z3 = $z5;

        if $z4 != 0 goto label08;

        $r10 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_ANNOTATIONS>;

        $z0 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r10);

        if $z0 == 0 goto label08;

        $r11 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r12 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass construct(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>($r12, $r11, null);

        $r14 = virtualinvoke $r11.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Boolean findCachability(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r13);

        if $r14 == null goto label08;

        z3 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

     label08:
        if z1 == 0 goto label09;

        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        $r8 = (org.codehaus.jackson.map.ResolvableDeserializer) $r4;

        virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: void _resolveDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.ResolvableDeserializer)>(r1, $r8);

        $r9 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.HashMap _incompleteDeserializers>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

     label09:
        if z3 == 0 goto label10;

        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: java.util.concurrent.ConcurrentHashMap _cachedDeserializers>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

     label10:
        return $r4;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
    }

    protected org.codehaus.jackson.map.JsonDeserializer _createDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.codehaus.jackson.map.DeserializerFactory $r6, $r8, $r10, $r13, $r15, $r18, $r21, $r23;
        org.codehaus.jackson.map.DeserializationConfig r4;
        org.codehaus.jackson.map.type.MapLikeType r25;
        org.codehaus.jackson.type.JavaType r0;
        org.codehaus.jackson.map.JsonDeserializer $r7, $r9, $r11, $r14, $r16, $r19, $r22, $r24;
        org.codehaus.jackson.map.type.CollectionLikeType r26;
        org.codehaus.jackson.map.type.CollectionType $r12;
        org.codehaus.jackson.map.BeanProperty r5;
        org.codehaus.jackson.map.type.MapType $r17;
        java.lang.Class $r1, $r2;
        org.codehaus.jackson.map.type.ArrayType $r20;

        r3 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r4 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        r5 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isEnumType()>();

        if $z0 == 0 goto label1;

        $r23 = r3.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r24 = virtualinvoke $r23.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createEnumDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r4, r3, r0, r5);

        return $r24;

     label1:
        $z1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z1 == 0 goto label6;

        $z3 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z3 == 0 goto label2;

        $r21 = r3.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r20 = (org.codehaus.jackson.map.type.ArrayType) r0;

        $r22 = virtualinvoke $r21.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createArrayDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.BeanProperty)>(r4, r3, $r20, r5);

        return $r22;

     label2:
        $z4 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isMapLikeType()>();

        if $z4 == 0 goto label4;

        r25 = (org.codehaus.jackson.map.type.MapLikeType) r0;

        $z7 = virtualinvoke r25.<org.codehaus.jackson.map.type.MapLikeType: boolean isTrueMapType()>();

        if $z7 == 0 goto label3;

        $r18 = r3.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r17 = (org.codehaus.jackson.map.type.MapType) r25;

        $r19 = virtualinvoke $r18.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createMapDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.type.MapType,org.codehaus.jackson.map.BeanProperty)>(r4, r3, $r17, r5);

        return $r19;

     label3:
        $r15 = r3.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r16 = virtualinvoke $r15.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createMapLikeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.type.MapLikeType,org.codehaus.jackson.map.BeanProperty)>(r4, r3, r25, r5);

        return $r16;

     label4:
        $z5 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isCollectionLikeType()>();

        if $z5 == 0 goto label6;

        r26 = (org.codehaus.jackson.map.type.CollectionLikeType) r0;

        $z6 = virtualinvoke r26.<org.codehaus.jackson.map.type.CollectionLikeType: boolean isTrueCollectionType()>();

        if $z6 == 0 goto label5;

        $r13 = r3.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r12 = (org.codehaus.jackson.map.type.CollectionType) r26;

        $r14 = virtualinvoke $r13.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createCollectionDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.type.CollectionType,org.codehaus.jackson.map.BeanProperty)>(r4, r3, $r12, r5);

        return $r14;

     label5:
        $r10 = r3.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createCollectionLikeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.type.CollectionLikeType,org.codehaus.jackson.map.BeanProperty)>(r4, r3, r26, r5);

        return $r11;

     label6:
        $r1 = class "Lorg/codehaus/jackson/JsonNode;";

        $r2 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z2 == 0 goto label7;

        $r8 = r3.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createTreeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r4, r3, r0, r5);

        return $r9;

     label7:
        $r6 = r3.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.DeserializerFactory _factory>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.DeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createBeanDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r4, r3, r0, r5);

        return $r7;
    }

    protected void _resolveDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.ResolvableDeserializer) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r2;
        org.codehaus.jackson.map.ResolvableDeserializer r0;
        org.codehaus.jackson.map.DeserializationConfig r1;

        r2 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r0 := @parameter1: org.codehaus.jackson.map.ResolvableDeserializer;

        interfaceinvoke r0.<org.codehaus.jackson.map.ResolvableDeserializer: void resolve(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider)>(r1, r2);

        return;
    }

    protected org.codehaus.jackson.map.JsonDeserializer _handleUnknownValueDeserializer(org.codehaus.jackson.type.JavaType) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r12;
        org.codehaus.jackson.map.JsonMappingException $r2, $r7;
        org.codehaus.jackson.type.JavaType r0;
        java.lang.Class $r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10;
        java.lang.String $r6, $r11;
        boolean $z0;

        r12 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: boolean isConcrete(java.lang.Class)>($r1);

        if $z0 != 0 goto label1;

        $r7 = new org.codehaus.jackson.map.JsonMappingException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a Value deserializer for abstract type ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $r2 = new org.codehaus.jackson.map.JsonMappingException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a Value deserializer for type ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    protected org.codehaus.jackson.map.KeyDeserializer _handleUnknownKeyDeserializer(org.codehaus.jackson.type.JavaType) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.JsonMappingException $r0;
        org.codehaus.jackson.map.deser.StdDeserializerProvider r6;
        org.codehaus.jackson.type.JavaType r3;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r6 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r3 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r0 = new org.codehaus.jackson.map.JsonMappingException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a (Map) Key deserializer for type ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public volatile org.codehaus.jackson.map.DeserializerProvider withFactory(org.codehaus.jackson.map.DeserializerFactory)
    {
        org.codehaus.jackson.map.deser.StdDeserializerProvider r0, $r2;
        org.codehaus.jackson.map.DeserializerFactory r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializerProvider;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializerFactory;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializerProvider: org.codehaus.jackson.map.deser.StdDeserializerProvider withFactory(org.codehaus.jackson.map.DeserializerFactory)>(r1);

        return $r2;
    }
}
