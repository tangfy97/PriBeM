public class org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel extends java.lang.Object implements org.waveprotocol.box.server.rpc.ClientRpcChannel
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final org.waveprotocol.box.server.rpc.MessageExpectingChannel protoChannel;
    private final java.util.concurrent.atomic.AtomicInteger lastSequenceNumber;
    private final com.google.common.collect.BiMap activeMethodMap;

    public void <init>(java.net.SocketAddress, java.util.concurrent.ExecutorService) throws java.io.IOException
    {
        org.waveprotocol.box.server.rpc.Rpc$RpcFinished $r10;
        java.net.SocketAddress r3;
        org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel$1 $r4;
        org.waveprotocol.box.server.rpc.MessageExpectingChannel $r9, $r11;
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.waveprotocol.wave.util.logging.Log $r13;
        java.lang.String $r16;
        java.util.concurrent.ExecutorService r8;
        org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel r0;
        java.net.InetSocketAddress $r5;
        com.google.common.collect.HashBiMap $r2;
        org.waveprotocol.box.server.rpc.WebSocketClientChannel $r7;
        com.sixfire.websocket.WebSocket $r6;
        java.lang.StringBuilder $r12, $r14, $r15;

        r0 := @this: org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel;

        r3 := @parameter0: java.net.SocketAddress;

        r8 := @parameter1: java.util.concurrent.ExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: java.util.concurrent.atomic.AtomicInteger lastSequenceNumber> = $r1;

        $r2 = staticinvoke <com.google.common.collect.HashBiMap: com.google.common.collect.HashBiMap create()>();

        r0.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: com.google.common.collect.BiMap activeMethodMap> = $r2;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "null serverAddress");

        $r4 = new org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel$1;

        specialinvoke $r4.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel$1: void <init>(org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel)>(r0);

        $r5 = (java.net.InetSocketAddress) r3;

        $r6 = specialinvoke r0.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: com.sixfire.websocket.WebSocket openWebSocket(java.net.InetSocketAddress)>($r5);

        $r7 = new org.waveprotocol.box.server.rpc.WebSocketClientChannel;

        specialinvoke $r7.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: void <init>(com.sixfire.websocket.WebSocket,org.waveprotocol.box.server.rpc.ProtoCallback,java.util.concurrent.ExecutorService)>($r6, $r4, r8);

        r0.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: org.waveprotocol.box.server.rpc.MessageExpectingChannel protoChannel> = $r7;

        $r9 = r0.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: org.waveprotocol.box.server.rpc.MessageExpectingChannel protoChannel>;

        $r10 = staticinvoke <org.waveprotocol.box.server.rpc.Rpc$RpcFinished: org.waveprotocol.box.server.rpc.Rpc$RpcFinished getDefaultInstance()>();

        virtualinvoke $r9.<org.waveprotocol.box.server.rpc.MessageExpectingChannel: void expectMessage(com.google.protobuf.Message)>($r10);

        $r11 = r0.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: org.waveprotocol.box.server.rpc.MessageExpectingChannel protoChannel>;

        virtualinvoke $r11.<org.waveprotocol.box.server.rpc.MessageExpectingChannel: void startAsyncRead()>();

        $r13 = <org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: org.waveprotocol.wave.util.logging.Log LOG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opened a new WebSocketClientRpcChannel to ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r16);

        return;
    }

    public void <init>(java.net.SocketAddress) throws java.io.IOException
    {
        org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel r0;
        java.net.SocketAddress r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel;

        r1 := @parameter0: java.net.SocketAddress;

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        specialinvoke r0.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: void <init>(java.net.SocketAddress,java.util.concurrent.ExecutorService)>(r1, $r2);

        return;
    }

    public com.google.protobuf.RpcController newRpcController()
    {
        org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel r1;
        org.waveprotocol.box.server.rpc.ClientRpcController $r0;

        r1 := @this: org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel;

        $r0 = new org.waveprotocol.box.server.rpc.ClientRpcController;

        specialinvoke $r0.<org.waveprotocol.box.server.rpc.ClientRpcController: void <init>(org.waveprotocol.box.server.rpc.ClientRpcChannel)>(r1);

        return $r0;
    }

    public void callMethod(com.google.protobuf.Descriptors$MethodDescriptor, com.google.protobuf.RpcController, com.google.protobuf.Message, com.google.protobuf.Message, com.google.protobuf.RpcCallback)
    {
        com.google.protobuf.DescriptorProtos$MethodOptions $r12;
        java.lang.Integer $r20;
        java.util.concurrent.atomic.AtomicInteger $r9;
        org.waveprotocol.wave.util.logging.Log $r22;
        boolean $z0, $z1;
        org.waveprotocol.box.server.rpc.ClientRpcController$RpcState $r10;
        com.google.protobuf.Descriptors$MethodDescriptor r11;
        com.google.common.collect.BiMap $r18, $r19;
        com.google.protobuf.RpcController r0;
        com.google.protobuf.GeneratedMessage$GeneratedExtension $r13;
        java.lang.StringBuilder $r2, $r3, $r5, $r21, $r23, $r24, $r25, $r27, $r28, $r30;
        java.lang.Throwable $r35;
        com.google.protobuf.RpcCallback r16;
        org.waveprotocol.box.server.rpc.MessageExpectingChannel $r29, $r34;
        org.waveprotocol.box.server.rpc.ClientRpcController r7;
        int $i0;
        java.lang.Boolean $r15;
        java.lang.String $r6, $r26, $r31;
        org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel r8;
        java.lang.IllegalArgumentException $r1;
        org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel$2 $r17;
        com.google.protobuf.Message r32, r33;
        java.lang.Class $r4;
        java.lang.Object $r14;

        r8 := @this: org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel;

        r11 := @parameter0: com.google.protobuf.Descriptors$MethodDescriptor;

        r0 := @parameter1: com.google.protobuf.RpcController;

        r32 := @parameter2: com.google.protobuf.Message;

        r33 := @parameter3: com.google.protobuf.Message;

        r16 := @parameter4: com.google.protobuf.RpcCallback;

        $z0 = r0 instanceof org.waveprotocol.box.server.rpc.ClientRpcController;

        if $z0 == 0 goto label1;

        r7 = (org.waveprotocol.box.server.rpc.ClientRpcController) r0;

        goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ClientRpcController, got: ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        $r9 = r8.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: java.util.concurrent.atomic.AtomicInteger lastSequenceNumber>;

        $i0 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r10 = new org.waveprotocol.box.server.rpc.ClientRpcController$RpcState;

        $r12 = virtualinvoke r11.<com.google.protobuf.Descriptors$MethodDescriptor: com.google.protobuf.DescriptorProtos$MethodOptions getOptions()>();

        $r13 = <org.waveprotocol.box.server.rpc.Rpc: com.google.protobuf.GeneratedMessage$GeneratedExtension isStreamingRpc>;

        $r14 = virtualinvoke $r12.<com.google.protobuf.DescriptorProtos$MethodOptions: java.lang.Object getExtension(com.google.protobuf.GeneratedMessage$GeneratedExtension)>($r13);

        $r15 = (java.lang.Boolean) $r14;

        $z1 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();

        $r17 = new org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel$2;

        specialinvoke $r17.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel$2: void <init>(org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel,int)>(r8, $i0);

        specialinvoke $r10.<org.waveprotocol.box.server.rpc.ClientRpcController$RpcState: void <init>(org.waveprotocol.box.server.rpc.ClientRpcChannel,boolean,com.google.protobuf.RpcCallback,java.lang.Runnable)>(r8, $z1, r16, $r17);

        virtualinvoke r7.<org.waveprotocol.box.server.rpc.ClientRpcController: void configure(org.waveprotocol.box.server.rpc.ClientRpcController$RpcState)>($r10);

        $r18 = r8.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: com.google.common.collect.BiMap activeMethodMap>;

        entermonitor $r18;

     label3:
        $r19 = r8.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: com.google.common.collect.BiMap activeMethodMap>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r19.<com.google.common.collect.BiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r7);

        exitmonitor $r18;

     label4:
        goto label7;

     label5:
        $r35 := @caughtexception;

        exitmonitor $r18;

     label6:
        throw $r35;

     label7:
        $r22 = <org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: org.waveprotocol.wave.util.logging.Log LOG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling a new RPC (seq ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), method ");

        $r26 = virtualinvoke r11.<com.google.protobuf.Descriptors$MethodDescriptor: java.lang.String getFullName()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r29 = r8.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: org.waveprotocol.box.server.rpc.MessageExpectingChannel protoChannel>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>($r31);

        $r34 = r8.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: org.waveprotocol.box.server.rpc.MessageExpectingChannel protoChannel>;

        virtualinvoke $r34.<org.waveprotocol.box.server.rpc.MessageExpectingChannel: void sendMessage(int,com.google.protobuf.Message,com.google.protobuf.Message)>($i0, r32, r33);

        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private com.sixfire.websocket.WebSocket openWebSocket(java.net.InetSocketAddress) throws java.io.IOException
    {
        java.lang.IllegalStateException $r11;
        org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel r12;
        java.net.URISyntaxException $r4;
        java.net.InetSocketAddress r1;
        int $i0;
        com.sixfire.websocket.WebSocket $r3;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        org.waveprotocol.wave.util.logging.Log $r6;
        java.net.URI $r0;
        java.lang.String $r2, $r10;

        r12 := @this: org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel;

        r1 := @parameter0: java.net.InetSocketAddress;

     label1:
        $r0 = new java.net.URI;

        $r2 = virtualinvoke r1.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        $i0 = virtualinvoke r1.<java.net.InetSocketAddress: int getPort()>();

        specialinvoke $r0.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>("ws", null, $r2, $i0, "/socket", null, null);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r6 = <org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: org.waveprotocol.wave.util.logging.Log LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create ws:// uri from given address (");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r10, $r4);

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r11;

     label4:
        $r3 = new com.sixfire.websocket.WebSocket;

        specialinvoke $r3.<com.sixfire.websocket.WebSocket: void <init>(java.net.URI)>($r0);

        virtualinvoke $r3.<com.sixfire.websocket.WebSocket: void connect()>();

        return $r3;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    static com.google.common.collect.BiMap access$000(org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel)
    {
        com.google.common.collect.BiMap $r1;
        org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel r0;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel;

        $r1 = r0.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: com.google.common.collect.BiMap activeMethodMap>;

        return $r1;
    }

    static org.waveprotocol.box.server.rpc.MessageExpectingChannel access$100(org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel)
    {
        org.waveprotocol.box.server.rpc.MessageExpectingChannel $r1;
        org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel r0;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel;

        $r1 = r0.<org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: org.waveprotocol.box.server.rpc.MessageExpectingChannel protoChannel>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/rpc/WebSocketClientRpcChannel;");

        <org.waveprotocol.box.server.rpc.WebSocketClientRpcChannel: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
