public class org.mozilla.javascript.ContextFactory extends java.lang.Object
{
    private static volatile boolean hasCustomGlobal;
    private static org.mozilla.javascript.ContextFactory global;
    private volatile boolean sealed;
    private final java.lang.Object listenersLock;
    private volatile java.lang.Object listeners;
    private boolean disabledListening;
    private java.lang.ClassLoader applicationClassLoader;

    public void <init>()
    {
        java.lang.Object $r1;
        org.mozilla.javascript.ContextFactory r0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listenersLock> = $r1;

        return;
    }

    public static org.mozilla.javascript.ContextFactory getGlobal()
    {
        org.mozilla.javascript.ContextFactory $r0;

        $r0 = <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory global>;

        return $r0;
    }

    public static boolean hasExplicitGlobal()
    {
        boolean $z0;

        $z0 = <org.mozilla.javascript.ContextFactory: boolean hasCustomGlobal>;

        return $z0;
    }

    public static void initGlobal(org.mozilla.javascript.ContextFactory)
    {
        java.lang.IllegalStateException $r1;
        java.lang.IllegalArgumentException $r2;
        org.mozilla.javascript.ContextFactory r0;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.ContextFactory;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $z0 = <org.mozilla.javascript.ContextFactory: boolean hasCustomGlobal>;

        if $z0 == 0 goto label2;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label2:
        <org.mozilla.javascript.ContextFactory: boolean hasCustomGlobal> = 1;

        <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory global> = r0;

        return;
    }

    protected org.mozilla.javascript.Context makeContext()
    {
        org.mozilla.javascript.Context $r0;
        org.mozilla.javascript.ContextFactory r1;

        r1 := @this: org.mozilla.javascript.ContextFactory;

        $r0 = new org.mozilla.javascript.Context;

        specialinvoke $r0.<org.mozilla.javascript.Context: void <init>()>();

        return $r0;
    }

    protected boolean hasFeature(org.mozilla.javascript.Context, int)
    {
        org.mozilla.javascript.Context r0;
        java.lang.IllegalArgumentException $r1;
        int i0, $i1, $i2, $i3;
        java.lang.String $r2;
        org.mozilla.javascript.ContextFactory r3;
        boolean $z0, $z1, $z2;

        r3 := @this: org.mozilla.javascript.ContextFactory;

        r0 := @parameter0: org.mozilla.javascript.Context;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label10;
            case 6: goto label11;
            case 7: goto label15;
            case 8: goto label16;
            case 9: goto label17;
            default: goto label18;
        };

     label01:
        $i3 = virtualinvoke r0.<org.mozilla.javascript.Context: int getLanguageVersion()>();

        if $i3 == 100 goto label02;

        if $i3 == 110 goto label02;

        if $i3 != 120 goto label03;

     label02:
        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        return $z0;

     label05:
        return 0;

     label06:
        return 0;

     label07:
        $i2 = virtualinvoke r0.<org.mozilla.javascript.Context: int getLanguageVersion()>();

        if $i2 != 120 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        return $z1;

     label10:
        return 1;

     label11:
        $i1 = virtualinvoke r0.<org.mozilla.javascript.Context: int getLanguageVersion()>();

        if $i1 == 0 goto label12;

        if $i1 < 160 goto label13;

     label12:
        $z2 = 1;

        goto label14;

     label13:
        $z2 = 0;

     label14:
        return $z2;

     label15:
        return 0;

     label16:
        return 0;

     label17:
        return 0;

     label18:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    protected org.mozilla.javascript.GeneratedClassLoader createClassLoader(java.lang.ClassLoader)
    {
        org.mozilla.javascript.DefiningClassLoader $r0;
        java.lang.ClassLoader r1;
        org.mozilla.javascript.ContextFactory r2;

        r2 := @this: org.mozilla.javascript.ContextFactory;

        r1 := @parameter0: java.lang.ClassLoader;

        $r0 = new org.mozilla.javascript.DefiningClassLoader;

        specialinvoke $r0.<org.mozilla.javascript.DefiningClassLoader: void <init>(java.lang.ClassLoader)>(r1);

        return $r0;
    }

    public final java.lang.ClassLoader getApplicationClassLoader()
    {
        java.lang.ClassLoader $r1;
        org.mozilla.javascript.ContextFactory r0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        $r1 = r0.<org.mozilla.javascript.ContextFactory: java.lang.ClassLoader applicationClassLoader>;

        return $r1;
    }

    public final void initApplicationClassLoader(java.lang.ClassLoader)
    {
        java.lang.IllegalStateException $r3;
        java.lang.ClassLoader r0, $r2;
        java.lang.IllegalArgumentException $r4, $r5;
        org.mozilla.javascript.ContextFactory r1;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.ContextFactory;

        r0 := @parameter0: java.lang.ClassLoader;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("loader is null");

        throw $r5;

     label1:
        $z0 = staticinvoke <org.mozilla.javascript.Kit: boolean testIfCanLoadRhinoClasses(java.lang.ClassLoader)>(r0);

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Loader can not resolve Rhino classes");

        throw $r4;

     label2:
        $r2 = r1.<org.mozilla.javascript.ContextFactory: java.lang.ClassLoader applicationClassLoader>;

        if $r2 == null goto label3;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("applicationClassLoader can only be set once");

        throw $r3;

     label3:
        virtualinvoke r1.<org.mozilla.javascript.ContextFactory: void checkNotSealed()>();

        r1.<org.mozilla.javascript.ContextFactory: java.lang.ClassLoader applicationClassLoader> = r0;

        return;
    }

    protected java.lang.Object doTopCall(org.mozilla.javascript.Callable, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        org.mozilla.javascript.Scriptable r2, r3;
        java.lang.Object[] r4;
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.Callable r0;
        java.lang.Object $r5;
        org.mozilla.javascript.ContextFactory r6;

        r6 := @this: org.mozilla.javascript.ContextFactory;

        r0 := @parameter0: org.mozilla.javascript.Callable;

        r1 := @parameter1: org.mozilla.javascript.Context;

        r2 := @parameter2: org.mozilla.javascript.Scriptable;

        r3 := @parameter3: org.mozilla.javascript.Scriptable;

        r4 := @parameter4: java.lang.Object[];

        $r5 = interfaceinvoke r0.<org.mozilla.javascript.Callable: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r1, r2, r3, r4);

        return $r5;
    }

    protected void observeInstructionCount(org.mozilla.javascript.Context, int)
    {
        int i0;
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.ContextFactory r0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        r1 := @parameter0: org.mozilla.javascript.Context;

        i0 := @parameter1: int;

        return;
    }

    protected void onContextCreated(org.mozilla.javascript.Context)
    {
        org.mozilla.javascript.Context r3;
        int i0;
        java.lang.Object r1, $r2;
        org.mozilla.javascript.ContextFactory$Listener $r4;
        org.mozilla.javascript.ContextFactory r0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        r3 := @parameter0: org.mozilla.javascript.Context;

        r1 = r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listeners>;

        i0 = 0;

     label1:
        $r2 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Object getListener(java.lang.Object,int)>(r1, i0);

        $r4 = (org.mozilla.javascript.ContextFactory$Listener) $r2;

        if $r4 != null goto label2;

        goto label3;

     label2:
        interfaceinvoke $r4.<org.mozilla.javascript.ContextFactory$Listener: void contextCreated(org.mozilla.javascript.Context)>(r3);

        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    protected void onContextReleased(org.mozilla.javascript.Context)
    {
        org.mozilla.javascript.Context r3;
        int i0;
        java.lang.Object r1, $r2;
        org.mozilla.javascript.ContextFactory$Listener $r4;
        org.mozilla.javascript.ContextFactory r0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        r3 := @parameter0: org.mozilla.javascript.Context;

        r1 = r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listeners>;

        i0 = 0;

     label1:
        $r2 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Object getListener(java.lang.Object,int)>(r1, i0);

        $r4 = (org.mozilla.javascript.ContextFactory$Listener) $r2;

        if $r4 != null goto label2;

        goto label3;

     label2:
        interfaceinvoke $r4.<org.mozilla.javascript.ContextFactory$Listener: void contextReleased(org.mozilla.javascript.Context)>(r3);

        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public final void addListener(org.mozilla.javascript.ContextFactory$Listener)
    {
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r5;
        java.lang.Object $r1, $r3, $r4;
        org.mozilla.javascript.ContextFactory$Listener r2;
        org.mozilla.javascript.ContextFactory r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        r2 := @parameter0: org.mozilla.javascript.ContextFactory$Listener;

        virtualinvoke r0.<org.mozilla.javascript.ContextFactory: void checkNotSealed()>();

        $r1 = r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listenersLock>;

        entermonitor $r1;

     label1:
        $z0 = r0.<org.mozilla.javascript.ContextFactory: boolean disabledListening>;

        if $z0 == 0 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label2:
        $r3 = r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listeners>;

        $r4 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Object addListener(java.lang.Object,java.lang.Object)>($r3, r2);

        r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listeners> = $r4;

        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void removeListener(org.mozilla.javascript.ContextFactory$Listener)
    {
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r5;
        java.lang.Object $r1, $r3, $r4;
        org.mozilla.javascript.ContextFactory$Listener r2;
        org.mozilla.javascript.ContextFactory r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        r2 := @parameter0: org.mozilla.javascript.ContextFactory$Listener;

        virtualinvoke r0.<org.mozilla.javascript.ContextFactory: void checkNotSealed()>();

        $r1 = r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listenersLock>;

        entermonitor $r1;

     label1:
        $z0 = r0.<org.mozilla.javascript.ContextFactory: boolean disabledListening>;

        if $z0 == 0 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label2:
        $r3 = r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listeners>;

        $r4 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Object removeListener(java.lang.Object,java.lang.Object)>($r3, r2);

        r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listeners> = $r4;

        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    final void disableContextListening()
    {
        java.lang.Throwable $r2;
        java.lang.Object $r1;
        org.mozilla.javascript.ContextFactory r0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        virtualinvoke r0.<org.mozilla.javascript.ContextFactory: void checkNotSealed()>();

        $r1 = r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listenersLock>;

        entermonitor $r1;

     label1:
        r0.<org.mozilla.javascript.ContextFactory: boolean disabledListening> = 1;

        r0.<org.mozilla.javascript.ContextFactory: java.lang.Object listeners> = null;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final boolean isSealed()
    {
        org.mozilla.javascript.ContextFactory r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        $z0 = r0.<org.mozilla.javascript.ContextFactory: boolean sealed>;

        return $z0;
    }

    public final void seal()
    {
        org.mozilla.javascript.ContextFactory r0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        virtualinvoke r0.<org.mozilla.javascript.ContextFactory: void checkNotSealed()>();

        r0.<org.mozilla.javascript.ContextFactory: boolean sealed> = 1;

        return;
    }

    protected final void checkNotSealed()
    {
        java.lang.IllegalStateException $r1;
        org.mozilla.javascript.ContextFactory r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        $z0 = r0.<org.mozilla.javascript.ContextFactory: boolean sealed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public final java.lang.Object call(org.mozilla.javascript.ContextAction)
    {
        java.lang.Object $r2;
        org.mozilla.javascript.ContextAction r1;
        org.mozilla.javascript.ContextFactory r0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        r1 := @parameter0: org.mozilla.javascript.ContextAction;

        $r2 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object call(org.mozilla.javascript.ContextFactory,org.mozilla.javascript.ContextAction)>(r0, r1);

        return $r2;
    }

    public final org.mozilla.javascript.Context enter()
    {
        org.mozilla.javascript.Context $r1;
        org.mozilla.javascript.ContextFactory r0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.ContextFactory: org.mozilla.javascript.Context enter(org.mozilla.javascript.Context)>(null);

        return $r1;
    }

    public final org.mozilla.javascript.Context enter(org.mozilla.javascript.Context)
    {
        org.mozilla.javascript.Context r0, $r2;
        org.mozilla.javascript.ContextFactory r1;

        r1 := @this: org.mozilla.javascript.ContextFactory;

        r0 := @parameter0: org.mozilla.javascript.Context;

        $r2 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context enter(org.mozilla.javascript.Context,org.mozilla.javascript.ContextFactory)>(r0, r1);

        return $r2;
    }

    public final void exit()
    {
        org.mozilla.javascript.ContextFactory r0;

        r0 := @this: org.mozilla.javascript.ContextFactory;

        staticinvoke <org.mozilla.javascript.Context: void exit(org.mozilla.javascript.ContextFactory)>(r0);

        return;
    }

    static void <clinit>()
    {
        org.mozilla.javascript.ContextFactory $r0;

        $r0 = new org.mozilla.javascript.ContextFactory;

        specialinvoke $r0.<org.mozilla.javascript.ContextFactory: void <init>()>();

        <org.mozilla.javascript.ContextFactory: org.mozilla.javascript.ContextFactory global> = $r0;

        return;
    }
}
