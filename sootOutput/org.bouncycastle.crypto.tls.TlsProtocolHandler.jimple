public class org.bouncycastle.crypto.tls.TlsProtocolHandler extends java.lang.Object
{
    private static final java.math.BigInteger ONE;
    private static final java.math.BigInteger TWO;
    private static final short RL_CHANGE_CIPHER_SPEC;
    private static final short RL_ALERT;
    private static final short RL_HANDSHAKE;
    private static final short RL_APPLICATION_DATA;
    private static final short HP_HELLO_REQUEST;
    private static final short HP_CLIENT_HELLO;
    private static final short HP_SERVER_HELLO;
    private static final short HP_CERTIFICATE;
    private static final short HP_SERVER_KEY_EXCHANGE;
    private static final short HP_CERTIFICATE_REQUEST;
    private static final short HP_SERVER_HELLO_DONE;
    private static final short HP_CERTIFICATE_VERIFY;
    private static final short HP_CLIENT_KEY_EXCHANGE;
    private static final short HP_FINISHED;
    private static final short CS_CLIENT_HELLO_SEND;
    private static final short CS_SERVER_HELLO_RECEIVED;
    private static final short CS_SERVER_CERTIFICATE_RECEIVED;
    private static final short CS_SERVER_KEY_EXCHANGE_RECEIVED;
    private static final short CS_CERTIFICATE_REQUEST_RECEIVED;
    private static final short CS_SERVER_HELLO_DONE_RECEIVED;
    private static final short CS_CLIENT_KEY_EXCHANGE_SEND;
    private static final short CS_CLIENT_VERIFICATION_SEND;
    private static final short CS_CLIENT_CHANGE_CIPHER_SPEC_SEND;
    private static final short CS_CLIENT_FINISHED_SEND;
    private static final short CS_SERVER_CHANGE_CIPHER_SPEC_RECEIVED;
    private static final short CS_DONE;
    protected static final short AP_close_notify;
    protected static final short AP_unexpected_message;
    protected static final short AP_bad_record_mac;
    protected static final short AP_decryption_failed;
    protected static final short AP_record_overflow;
    protected static final short AP_decompression_failure;
    protected static final short AP_handshake_failure;
    protected static final short AP_bad_certificate;
    protected static final short AP_unsupported_certificate;
    protected static final short AP_certificate_revoked;
    protected static final short AP_certificate_expired;
    protected static final short AP_certificate_unknown;
    protected static final short AP_illegal_parameter;
    protected static final short AP_unknown_ca;
    protected static final short AP_access_denied;
    protected static final short AP_decode_error;
    protected static final short AP_decrypt_error;
    protected static final short AP_export_restriction;
    protected static final short AP_protocol_version;
    protected static final short AP_insufficient_security;
    protected static final short AP_internal_error;
    protected static final short AP_user_canceled;
    protected static final short AP_no_renegotiation;
    protected static final short AL_warning;
    protected static final short AL_fatal;
    private static final byte[] emptybuf;
    private static final java.lang.String TLS_ERROR_MESSAGE;
    private org.bouncycastle.crypto.tls.ByteQueue applicationDataQueue;
    private org.bouncycastle.crypto.tls.ByteQueue changeCipherSpecQueue;
    private org.bouncycastle.crypto.tls.ByteQueue alertQueue;
    private org.bouncycastle.crypto.tls.ByteQueue handshakeQueue;
    private org.bouncycastle.crypto.tls.RecordStream rs;
    private java.security.SecureRandom random;
    private org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey;
    private org.bouncycastle.crypto.tls.TlsInputStream tlsInputStream;
    private org.bouncycastle.crypto.tls.TlsOuputStream tlsOutputStream;
    private boolean closed;
    private boolean failedWithError;
    private boolean appDataReady;
    private boolean extendedClientHello;
    private byte[] clientRandom;
    private byte[] serverRandom;
    private byte[] ms;
    private org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite;
    private java.math.BigInteger SRP_A;
    private byte[] SRP_identity;
    private byte[] SRP_password;
    private java.math.BigInteger Yc;
    private byte[] pms;
    private org.bouncycastle.crypto.tls.CertificateVerifyer verifyer;
    private short connection_state;

    public void <init>(java.io.InputStream, java.io.OutputStream)
    {
        org.bouncycastle.crypto.tls.RecordStream $r9;
        java.io.OutputStream r11;
        byte[] $r8;
        org.bouncycastle.crypto.tls.ByteQueue $r1, $r2, $r3, $r4;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        java.security.SecureRandom $r6, $r7;
        org.bouncycastle.crypto.prng.ThreadedSeedGenerator $r5;
        java.io.InputStream r10;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        r10 := @parameter0: java.io.InputStream;

        r11 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.bouncycastle.crypto.tls.ByteQueue;

        specialinvoke $r1.<org.bouncycastle.crypto.tls.ByteQueue: void <init>()>();

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue applicationDataQueue> = $r1;

        $r2 = new org.bouncycastle.crypto.tls.ByteQueue;

        specialinvoke $r2.<org.bouncycastle.crypto.tls.ByteQueue: void <init>()>();

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue changeCipherSpecQueue> = $r2;

        $r3 = new org.bouncycastle.crypto.tls.ByteQueue;

        specialinvoke $r3.<org.bouncycastle.crypto.tls.ByteQueue: void <init>()>();

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue alertQueue> = $r3;

        $r4 = new org.bouncycastle.crypto.tls.ByteQueue;

        specialinvoke $r4.<org.bouncycastle.crypto.tls.ByteQueue: void <init>()>();

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue handshakeQueue> = $r4;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = null;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsInputStream tlsInputStream> = null;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsOuputStream tlsOutputStream> = null;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed> = 0;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean failedWithError> = 0;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean appDataReady> = 0;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite> = null;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.CertificateVerifyer verifyer> = null;

        $r5 = new org.bouncycastle.crypto.prng.ThreadedSeedGenerator;

        specialinvoke $r5.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator: void <init>()>();

        $r6 = new java.security.SecureRandom;

        specialinvoke $r6.<java.security.SecureRandom: void <init>()>();

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.security.SecureRandom random> = $r6;

        $r7 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.security.SecureRandom random>;

        $r8 = virtualinvoke $r5.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator: byte[] generateSeed(int,boolean)>(20, 1);

        virtualinvoke $r7.<java.security.SecureRandom: void setSeed(byte[])>($r8);

        $r9 = new org.bouncycastle.crypto.tls.RecordStream;

        specialinvoke $r9.<org.bouncycastle.crypto.tls.RecordStream: void <init>(org.bouncycastle.crypto.tls.TlsProtocolHandler,java.io.InputStream,java.io.OutputStream)>(r0, r10, r11);

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs> = $r9;

        return;
    }

    public void <init>(java.io.InputStream, java.io.OutputStream, java.security.SecureRandom)
    {
        org.bouncycastle.crypto.tls.RecordStream $r6;
        java.io.OutputStream r8;
        org.bouncycastle.crypto.tls.ByteQueue $r1, $r2, $r3, $r4;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        java.security.SecureRandom r5;
        java.io.InputStream r7;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        r7 := @parameter0: java.io.InputStream;

        r8 := @parameter1: java.io.OutputStream;

        r5 := @parameter2: java.security.SecureRandom;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.bouncycastle.crypto.tls.ByteQueue;

        specialinvoke $r1.<org.bouncycastle.crypto.tls.ByteQueue: void <init>()>();

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue applicationDataQueue> = $r1;

        $r2 = new org.bouncycastle.crypto.tls.ByteQueue;

        specialinvoke $r2.<org.bouncycastle.crypto.tls.ByteQueue: void <init>()>();

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue changeCipherSpecQueue> = $r2;

        $r3 = new org.bouncycastle.crypto.tls.ByteQueue;

        specialinvoke $r3.<org.bouncycastle.crypto.tls.ByteQueue: void <init>()>();

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue alertQueue> = $r3;

        $r4 = new org.bouncycastle.crypto.tls.ByteQueue;

        specialinvoke $r4.<org.bouncycastle.crypto.tls.ByteQueue: void <init>()>();

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue handshakeQueue> = $r4;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = null;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsInputStream tlsInputStream> = null;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsOuputStream tlsOutputStream> = null;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed> = 0;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean failedWithError> = 0;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean appDataReady> = 0;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite> = null;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.CertificateVerifyer verifyer> = null;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.security.SecureRandom random> = r5;

        $r6 = new org.bouncycastle.crypto.tls.RecordStream;

        specialinvoke $r6.<org.bouncycastle.crypto.tls.RecordStream: void <init>(org.bouncycastle.crypto.tls.TlsProtocolHandler,java.io.InputStream,java.io.OutputStream)>(r0, r7, r8);

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs> = $r6;

        return;
    }

    protected void processData(short, byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.bouncycastle.crypto.tls.ByteQueue $r2, $r3, $r4, $r5;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        short s0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        s0 := @parameter0: short;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = (int) s0;

        tableswitch($i3)
        {
            case 20: goto label1;
            case 21: goto label2;
            case 22: goto label3;
            case 23: goto label4;
            default: goto label6;
        };

     label1:
        $r5 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue changeCipherSpecQueue>;

        virtualinvoke $r5.<org.bouncycastle.crypto.tls.ByteQueue: void addData(byte[],int,int)>(r1, i1, i2);

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void processChangeCipherSpec()>();

        goto label6;

     label2:
        $r4 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue alertQueue>;

        virtualinvoke $r4.<org.bouncycastle.crypto.tls.ByteQueue: void addData(byte[],int,int)>(r1, i1, i2);

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void processAlert()>();

        goto label6;

     label3:
        $r3 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue handshakeQueue>;

        virtualinvoke $r3.<org.bouncycastle.crypto.tls.ByteQueue: void addData(byte[],int,int)>(r1, i1, i2);

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void processHandshake()>();

        goto label6;

     label4:
        $z0 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean appDataReady>;

        if $z0 != 0 goto label5;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label5:
        $r2 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue applicationDataQueue>;

        virtualinvoke $r2.<org.bouncycastle.crypto.tls.ByteQueue: void addData(byte[],int,int)>(r1, i1, i2);

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void processApplicationData()>();

        goto label6;

     label6:
        return;
    }

    private void processHandshake() throws java.io.IOException
    {
        byte[] r2, r6, $r12, $r13, $r16, $r18, $r19, $r20, $r22, $r23, $r29, $r30, $r47, $r48, $r50, $r53, r68, r69, r70, r71, $r72, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r90, $r91, $r92, $r93, $r94, $r97, $r98, $r100;
        java.lang.Integer $r107;
        byte $b8, $b9;
        java.math.BigInteger $r15, $r17;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        java.io.ByteArrayOutputStream $r111;
        short $s1, $s6, $s10, $s11, $s13, $s14, $s15, $s16, $s17, $s18, $s19, $s20, $s22, $s27, $s36;
        org.bouncycastle.crypto.tls.Certificate $r38;
        org.bouncycastle.crypto.tls.RecordStream $r10, $r55, $r57, $r59, $r61, $r73, $r86, $r88, $r95, $r101;
        java.io.ByteArrayInputStream $r103, $r104, $r106;
        org.bouncycastle.crypto.tls.TlsCipherSuite $r14, $r31, $r32, $r37, $r43, $r49, $r87, $r89, $r102;
        org.bouncycastle.asn1.x509.X509CertificateStructure r65;
        int $i0, $i2, $i3, $i4, $i5, $i7, $i12, $i21, $i23, $i24, $i25, i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51;
        org.bouncycastle.crypto.tls.TlsRSASigner $r112, $r114;
        java.security.SecureRandom $r21, $r27;
        org.bouncycastle.crypto.tls.CombinedHash $r11, $r56, $r58, $r60, $r62, $r96;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter $r28, $r41, $r42, $r44, $r45, $r46;
        org.bouncycastle.crypto.InvalidCipherTextException $r63;
        java.lang.RuntimeException $r64;
        org.bouncycastle.asn1.x509.SubjectPublicKeyInfo $r40;
        org.bouncycastle.crypto.tls.CertificateVerifyer $r66;
        org.bouncycastle.crypto.params.ParametersWithRandom $r110;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6, $z7;
        org.bouncycastle.asn1.x509.X509CertificateStructure[] $r39, $r67;
        org.bouncycastle.crypto.encodings.PKCS1Encoding $r109;
        java.util.Hashtable $r105;
        org.bouncycastle.crypto.tls.ByteQueue $r1, $r3, $r5, $r7, $r8;
        org.bouncycastle.crypto.tls.TlsDSSSigner $r113, $r115;
        org.bouncycastle.crypto.engines.RSABlindedEngine $r108;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

     label01:
        z5 = 0;

        $r1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue handshakeQueue>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.tls.ByteQueue: int size()>();

        if $i0 < 4 goto label67;

        r2 = newarray (byte)[4];

        $r3 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue handshakeQueue>;

        virtualinvoke $r3.<org.bouncycastle.crypto.tls.ByteQueue: void read(byte[],int,int,int)>(r2, 0, 4, 0);

        $r103 = new java.io.ByteArrayInputStream;

        specialinvoke $r103.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        $s1 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r103);

        $i2 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: int readUint24(java.io.InputStream)>($r103);

        $r5 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue handshakeQueue>;

        $i3 = virtualinvoke $r5.<org.bouncycastle.crypto.tls.ByteQueue: int size()>();

        $i4 = $i2 + 4;

        if $i3 < $i4 goto label67;

        r6 = newarray (byte)[$i2];

        $r7 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue handshakeQueue>;

        virtualinvoke $r7.<org.bouncycastle.crypto.tls.ByteQueue: void read(byte[],int,int,int)>(r6, 0, $i2, 4);

        $r8 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue handshakeQueue>;

        $i5 = $i2 + 4;

        virtualinvoke $r8.<org.bouncycastle.crypto.tls.ByteQueue: void removeData(int)>($i5);

        $i37 = (int) $s1;

        if $i37 == 20 goto label02;

        $r55 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r56 = $r55.<org.bouncycastle.crypto.tls.RecordStream: org.bouncycastle.crypto.tls.CombinedHash hash1>;

        virtualinvoke $r56.<org.bouncycastle.crypto.tls.CombinedHash: void update(byte[],int,int)>(r2, 0, 4);

        $r57 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r58 = $r57.<org.bouncycastle.crypto.tls.RecordStream: org.bouncycastle.crypto.tls.CombinedHash hash2>;

        virtualinvoke $r58.<org.bouncycastle.crypto.tls.CombinedHash: void update(byte[],int,int)>(r2, 0, 4);

        $r59 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r60 = $r59.<org.bouncycastle.crypto.tls.RecordStream: org.bouncycastle.crypto.tls.CombinedHash hash1>;

        virtualinvoke $r60.<org.bouncycastle.crypto.tls.CombinedHash: void update(byte[],int,int)>(r6, 0, $i2);

        $r61 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r62 = $r61.<org.bouncycastle.crypto.tls.RecordStream: org.bouncycastle.crypto.tls.CombinedHash hash2>;

        virtualinvoke $r62.<org.bouncycastle.crypto.tls.CombinedHash: void update(byte[],int,int)>(r6, 0, $i2);

     label02:
        $r104 = new java.io.ByteArrayInputStream;

        specialinvoke $r104.<java.io.ByteArrayInputStream: void <init>(byte[])>(r6);

        $i38 = (int) $s1;

        tableswitch($i38)
        {
            case 0: goto label66;
            case 1: goto label66;
            case 2: goto label26;
            case 3: goto label66;
            case 4: goto label66;
            case 5: goto label66;
            case 6: goto label66;
            case 7: goto label66;
            case 8: goto label66;
            case 9: goto label66;
            case 10: goto label66;
            case 11: goto label03;
            case 12: goto label50;
            case 13: goto label61;
            case 14: goto label33;
            case 15: goto label66;
            case 16: goto label66;
            case 17: goto label66;
            case 18: goto label66;
            case 19: goto label66;
            case 20: goto label19;
            default: goto label66;
        };

     label03:
        $s18 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state>;

        $i39 = (int) $s18;

        lookupswitch($i39)
        {
            case 2: goto label04;
            default: goto label17;
        };

     label04:
        $r38 = staticinvoke <org.bouncycastle.crypto.tls.Certificate: org.bouncycastle.crypto.tls.Certificate parse(java.io.InputStream)>($r104);

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void assertEmpty(java.io.ByteArrayInputStream)>($r104);

        $r39 = $r38.<org.bouncycastle.crypto.tls.Certificate: org.bouncycastle.asn1.x509.X509CertificateStructure[] certs>;

        r65 = $r39[0];

        $r40 = virtualinvoke r65.<org.bouncycastle.asn1.x509.X509CertificateStructure: org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

     label05:
        $r41 = staticinvoke <org.bouncycastle.crypto.util.PublicKeyFactory: org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)>($r40);

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey> = $r41;

     label06:
        goto label08;

     label07:
        $r64 := @caughtexception;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 43);

     label08:
        $r42 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $z0 = virtualinvoke $r42.<org.bouncycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        if $z0 == 0 goto label09;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 80);

     label09:
        $r43 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite>;

        $s19 = virtualinvoke $r43.<org.bouncycastle.crypto.tls.TlsCipherSuite: short getKeyExchangeAlgorithm()>();

        $i40 = (int) $s19;

        tableswitch($i40)
        {
            case 1: goto label10;
            case 2: goto label15;
            case 3: goto label14;
            case 4: goto label15;
            case 5: goto label12;
            case 6: goto label15;
            case 7: goto label15;
            case 8: goto label15;
            case 9: goto label15;
            case 10: goto label15;
            case 11: goto label12;
            case 12: goto label14;
            default: goto label15;
        };

     label10:
        $r46 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $z3 = $r46 instanceof org.bouncycastle.crypto.params.RSAKeyParameters;

        if $z3 != 0 goto label11;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 46);

     label11:
        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void validateKeyUsage(org.bouncycastle.asn1.x509.X509CertificateStructure,int)>(r65, 32);

        goto label16;

     label12:
        $r44 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $z1 = $r44 instanceof org.bouncycastle.crypto.params.RSAKeyParameters;

        if $z1 != 0 goto label13;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 46);

     label13:
        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void validateKeyUsage(org.bouncycastle.asn1.x509.X509CertificateStructure,int)>(r65, 128);

        goto label16;

     label14:
        $r45 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $z2 = $r45 instanceof org.bouncycastle.crypto.params.DSAPublicKeyParameters;

        if $z2 != 0 goto label16;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 46);

        goto label16;

     label15:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 43);

     label16:
        $r66 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.CertificateVerifyer verifyer>;

        $r67 = virtualinvoke $r38.<org.bouncycastle.crypto.tls.Certificate: org.bouncycastle.asn1.x509.X509CertificateStructure[] getCerts()>();

        $z6 = interfaceinvoke $r66.<org.bouncycastle.crypto.tls.CertificateVerifyer: boolean isValid(org.bouncycastle.asn1.x509.X509CertificateStructure[])>($r67);

        if $z6 != 0 goto label18;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 90);

        goto label18;

     label17:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label18:
        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 3;

        z5 = 1;

        goto label67;

     label19:
        $s6 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state>;

        $i41 = (int) $s6;

        lookupswitch($i41)
        {
            case 11: goto label20;
            default: goto label24;
        };

     label20:
        r68 = newarray (byte)[12];

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void readFully(byte[],java.io.InputStream)>(r68, $r104);

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void assertEmpty(java.io.ByteArrayInputStream)>($r104);

        r69 = newarray (byte)[12];

        r70 = newarray (byte)[36];

        $r10 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r11 = $r10.<org.bouncycastle.crypto.tls.RecordStream: org.bouncycastle.crypto.tls.CombinedHash hash2>;

        virtualinvoke $r11.<org.bouncycastle.crypto.tls.CombinedHash: int doFinal(byte[],int)>(r70, 0);

        $r12 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] ms>;

        $r13 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] toByteArray(java.lang.String)>("server finished");

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void PRF(byte[],byte[],byte[],byte[])>($r12, $r13, r70, r69);

        i26 = 0;

     label21:
        $i7 = lengthof r68;

        if i26 >= $i7 goto label23;

        $b9 = r68[i26];

        $b8 = r69[i26];

        $i42 = (int) $b9;

        $i43 = (int) $b8;

        if $i42 == $i43 goto label22;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 40);

     label22:
        i26 = i26 + 1;

        goto label21;

     label23:
        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 12;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean appDataReady> = 1;

        z5 = 1;

        goto label25;

     label24:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label25:
        goto label67;

     label26:
        $s20 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state>;

        $i44 = (int) $s20;

        lookupswitch($i44)
        {
            case 1: goto label27;
            default: goto label31;
        };

     label27:
        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void checkVersion(java.io.InputStream,org.bouncycastle.crypto.tls.TlsProtocolHandler)>($r104, r0);

        $r47 = newarray (byte)[32];

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] serverRandom> = $r47;

        $r48 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] serverRandom>;

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void readFully(byte[],java.io.InputStream)>($r48, $r104);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r104);

        $i21 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r104);

        $r49 = staticinvoke <org.bouncycastle.crypto.tls.TlsCipherSuiteManager: org.bouncycastle.crypto.tls.TlsCipherSuite getCipherSuite(int,org.bouncycastle.crypto.tls.TlsProtocolHandler)>($i21, r0);

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite> = $r49;

        $s22 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: short readUint8(java.io.InputStream)>($r104);

        if $s22 == 0 goto label28;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 47);

     label28:
        $z4 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean extendedClientHello>;

        if $z4 == 0 goto label30;

        $i23 = virtualinvoke $r104.<java.io.ByteArrayInputStream: int available()>();

        if $i23 <= 0 goto label30;

        $r50 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r104);

        $r105 = new java.util.Hashtable;

        specialinvoke $r105.<java.util.Hashtable: void <init>()>();

        $r106 = new java.io.ByteArrayInputStream;

        specialinvoke $r106.<java.io.ByteArrayInputStream: void <init>(byte[])>($r50);

     label29:
        $i24 = virtualinvoke $r106.<java.io.ByteArrayInputStream: int available()>();

        if $i24 <= 0 goto label30;

        $i25 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: int readUint16(java.io.InputStream)>($r106);

        $r53 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>($r106);

        $r107 = new java.lang.Integer;

        specialinvoke $r107.<java.lang.Integer: void <init>(int)>($i25);

        virtualinvoke $r105.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r107, $r53);

        goto label29;

     label30:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void assertEmpty(java.io.ByteArrayInputStream)>($r104);

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 2;

        z5 = 1;

        goto label32;

     label31:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label32:
        goto label67;

     label33:
        $s10 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state>;

        $i45 = (int) $s10;

        tableswitch($i45)
        {
            case 3: goto label34;
            case 4: goto label35;
            case 5: goto label35;
            default: goto label48;
        };

     label34:
        $r31 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite>;

        $s13 = virtualinvoke $r31.<org.bouncycastle.crypto.tls.TlsCipherSuite: short getKeyExchangeAlgorithm()>();

        if $s13 == 1 goto label35;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label35:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void assertEmpty(java.io.ByteArrayInputStream)>($r104);

        $s27 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state>;

        $i46 = (int) $s27;

        if $i46 != 5 goto label36;

        $z7 = 1;

        goto label37;

     label36:
        $z7 = 0;

     label37:
        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 6;

        if $z7 == 0 goto label38;

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void sendClientCertificate()>();

     label38:
        $r14 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite>;

        $s11 = virtualinvoke $r14.<org.bouncycastle.crypto.tls.TlsCipherSuite: short getKeyExchangeAlgorithm()>();

        $i47 = (int) $s11;

        tableswitch($i47)
        {
            case 1: goto label39;
            case 2: goto label46;
            case 3: goto label44;
            case 4: goto label46;
            case 5: goto label44;
            case 6: goto label46;
            case 7: goto label46;
            case 8: goto label46;
            case 9: goto label46;
            case 10: goto label45;
            case 11: goto label45;
            case 12: goto label45;
            default: goto label46;
        };

     label39:
        $r19 = newarray (byte)[48];

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] pms> = $r19;

        $r21 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.security.SecureRandom random>;

        $r20 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] pms>;

        virtualinvoke $r21.<java.security.SecureRandom: void nextBytes(byte[])>($r20);

        $r22 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] pms>;

        $r22[0] = 3;

        $r23 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] pms>;

        $r23[1] = 1;

        $r108 = new org.bouncycastle.crypto.engines.RSABlindedEngine;

        specialinvoke $r108.<org.bouncycastle.crypto.engines.RSABlindedEngine: void <init>()>();

        $r109 = new org.bouncycastle.crypto.encodings.PKCS1Encoding;

        specialinvoke $r109.<org.bouncycastle.crypto.encodings.PKCS1Encoding: void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher)>($r108);

        $r110 = new org.bouncycastle.crypto.params.ParametersWithRandom;

        $r28 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        $r27 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.security.SecureRandom random>;

        specialinvoke $r110.<org.bouncycastle.crypto.params.ParametersWithRandom: void <init>(org.bouncycastle.crypto.CipherParameters,java.security.SecureRandom)>($r28, $r27);

        virtualinvoke $r109.<org.bouncycastle.crypto.encodings.PKCS1Encoding: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r110);

        r71 = null;

     label40:
        $r30 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] pms>;

        $r29 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] pms>;

        $i12 = lengthof $r29;

        r71 = virtualinvoke $r109.<org.bouncycastle.crypto.encodings.PKCS1Encoding: byte[] processBlock(byte[],int,int)>($r30, 0, $i12);

     label41:
        goto label43;

     label42:
        $r63 := @caughtexception;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 80);

     label43:
        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void sendClientKeyExchange(byte[])>(r71);

        goto label47;

     label44:
        $r17 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.math.BigInteger Yc>;

        $r18 = staticinvoke <org.bouncycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r17);

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void sendClientKeyExchange(byte[])>($r18);

        goto label47;

     label45:
        $r15 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.math.BigInteger SRP_A>;

        $r16 = staticinvoke <org.bouncycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r15);

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void sendClientKeyExchange(byte[])>($r16);

        goto label47;

     label46:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label47:
        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 7;

        $r72 = newarray (byte)[1];

        $r72[0] = 1;

        $r73 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $i28 = lengthof $r72;

        virtualinvoke $r73.<org.bouncycastle.crypto.tls.RecordStream: void writeMessage(short,byte[],int,int)>(20, $r72, 0, $i28);

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 9;

        $r74 = newarray (byte)[48];

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] ms> = $r74;

        $r75 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $i29 = lengthof $r75;

        $r76 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] serverRandom>;

        $i30 = lengthof $r76;

        $i31 = $i29 + $i30;

        $r77 = newarray (byte)[$i31];

        $r78 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $r79 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $i32 = lengthof $r79;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r78, 0, $r77, 0, $i32);

        $r80 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] serverRandom>;

        $r81 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $i33 = lengthof $r81;

        $r82 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] serverRandom>;

        $i34 = lengthof $r82;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r80, 0, $r77, $i33, $i34);

        $r83 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] pms>;

        $r84 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] toByteArray(java.lang.String)>("master secret");

        $r85 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] ms>;

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void PRF(byte[],byte[],byte[],byte[])>($r83, $r84, $r77, $r85);

        $r86 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r87 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite>;

        $r86.<org.bouncycastle.crypto.tls.RecordStream: org.bouncycastle.crypto.tls.TlsCipherSuite writeSuite> = $r87;

        $r88 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r89 = $r88.<org.bouncycastle.crypto.tls.RecordStream: org.bouncycastle.crypto.tls.TlsCipherSuite writeSuite>;

        $r90 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] ms>;

        $r91 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $r92 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] serverRandom>;

        virtualinvoke $r89.<org.bouncycastle.crypto.tls.TlsCipherSuite: void init(byte[],byte[],byte[])>($r90, $r91, $r92);

        $r93 = newarray (byte)[12];

        $r94 = newarray (byte)[36];

        $r95 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r96 = $r95.<org.bouncycastle.crypto.tls.RecordStream: org.bouncycastle.crypto.tls.CombinedHash hash1>;

        virtualinvoke $r96.<org.bouncycastle.crypto.tls.CombinedHash: int doFinal(byte[],int)>($r94, 0);

        $r97 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] ms>;

        $r98 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] toByteArray(java.lang.String)>("client finished");

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void PRF(byte[],byte[],byte[],byte[])>($r97, $r98, $r94, $r93);

        $r111 = new java.io.ByteArrayOutputStream;

        specialinvoke $r111.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(20, $r111);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint24(int,java.io.OutputStream)>(12, $r111);

        virtualinvoke $r111.<java.io.ByteArrayOutputStream: void write(byte[])>($r93);

        $r100 = virtualinvoke $r111.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r101 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $i35 = lengthof $r100;

        virtualinvoke $r101.<org.bouncycastle.crypto.tls.RecordStream: void writeMessage(short,byte[],int,int)>(22, $r100, 0, $i35);

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 10;

        z5 = 1;

        goto label49;

     label48:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 40);

     label49:
        goto label67;

     label50:
        $s16 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state>;

        $i48 = (int) $s16;

        lookupswitch($i48)
        {
            case 2: goto label51;
            case 3: goto label52;
            default: goto label59;
        };

     label51:
        $r37 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite>;

        $s17 = virtualinvoke $r37.<org.bouncycastle.crypto.tls.TlsCipherSuite: short getKeyExchangeAlgorithm()>();

        $i49 = (int) $s17;

        if $i49 == 10 goto label52;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label52:
        $r102 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite>;

        $s36 = virtualinvoke $r102.<org.bouncycastle.crypto.tls.TlsCipherSuite: short getKeyExchangeAlgorithm()>();

        $i50 = (int) $s36;

        tableswitch($i50)
        {
            case 3: goto label54;
            case 4: goto label58;
            case 5: goto label53;
            case 6: goto label58;
            case 7: goto label58;
            case 8: goto label58;
            case 9: goto label58;
            case 10: goto label55;
            case 11: goto label56;
            case 12: goto label57;
            default: goto label58;
        };

     label53:
        $r112 = new org.bouncycastle.crypto.tls.TlsRSASigner;

        specialinvoke $r112.<org.bouncycastle.crypto.tls.TlsRSASigner: void <init>()>();

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void processDHEKeyExchange(java.io.ByteArrayInputStream,org.bouncycastle.crypto.Signer)>($r104, $r112);

        goto label60;

     label54:
        $r113 = new org.bouncycastle.crypto.tls.TlsDSSSigner;

        specialinvoke $r113.<org.bouncycastle.crypto.tls.TlsDSSSigner: void <init>()>();

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void processDHEKeyExchange(java.io.ByteArrayInputStream,org.bouncycastle.crypto.Signer)>($r104, $r113);

        goto label60;

     label55:
        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void processSRPKeyExchange(java.io.ByteArrayInputStream,org.bouncycastle.crypto.Signer)>($r104, null);

        goto label60;

     label56:
        $r114 = new org.bouncycastle.crypto.tls.TlsRSASigner;

        specialinvoke $r114.<org.bouncycastle.crypto.tls.TlsRSASigner: void <init>()>();

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void processSRPKeyExchange(java.io.ByteArrayInputStream,org.bouncycastle.crypto.Signer)>($r104, $r114);

        goto label60;

     label57:
        $r115 = new org.bouncycastle.crypto.tls.TlsDSSSigner;

        specialinvoke $r115.<org.bouncycastle.crypto.tls.TlsDSSSigner: void <init>()>();

        specialinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void processSRPKeyExchange(java.io.ByteArrayInputStream,org.bouncycastle.crypto.Signer)>($r104, $r115);

        goto label60;

     label58:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

        goto label60;

     label59:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label60:
        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 4;

        z5 = 1;

        goto label67;

     label61:
        $s14 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state>;

        $i51 = (int) $s14;

        lookupswitch($i51)
        {
            case 3: goto label62;
            case 4: goto label63;
            default: goto label64;
        };

     label62:
        $r32 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsCipherSuite chosenCipherSuite>;

        $s15 = virtualinvoke $r32.<org.bouncycastle.crypto.tls.TlsCipherSuite: short getKeyExchangeAlgorithm()>();

        if $s15 == 1 goto label63;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label63:
        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r104);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>($r104);

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void assertEmpty(java.io.ByteArrayInputStream)>($r104);

        goto label65;

     label64:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label65:
        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 5;

        z5 = 1;

        goto label67;

     label66:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

     label67:
        if z5 != 0 goto label01;

        return;

        catch java.lang.RuntimeException from label05 to label06 with label07;
        catch org.bouncycastle.crypto.InvalidCipherTextException from label40 to label41 with label42;
    }

    private void processApplicationData()
    {
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        return;
    }

    private void processAlert() throws java.io.IOException
    {
        org.bouncycastle.crypto.tls.RecordStream $r5;
        byte[] r2;
        org.bouncycastle.crypto.tls.ByteQueue $r1, $r3, $r4;
        java.io.IOException $r8;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        java.lang.Exception $r7;
        short s2, s4;
        byte $b1, $b3;
        int $i0, $i5;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue alertQueue>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.tls.ByteQueue: int size()>();

        if $i0 < 2 goto label8;

        r2 = newarray (byte)[2];

        $r3 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue alertQueue>;

        virtualinvoke $r3.<org.bouncycastle.crypto.tls.ByteQueue: void read(byte[],int,int,int)>(r2, 0, 2, 0);

        $r4 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue alertQueue>;

        virtualinvoke $r4.<org.bouncycastle.crypto.tls.ByteQueue: void removeData(int)>(2);

        $b1 = r2[0];

        s2 = (short) $b1;

        $b3 = r2[1];

        s4 = (short) $b3;

        $i5 = (int) s2;

        if $i5 != 2 goto label6;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean failedWithError> = 1;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed> = 1;

     label2:
        $r5 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        virtualinvoke $r5.<org.bouncycastle.crypto.tls.RecordStream: void close()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Internal TLS error, this could be an attack");

        throw $r8;

     label6:
        if s4 != 0 goto label7;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(1, 0);

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private void processChangeCipherSpec() throws java.io.IOException
    {
        org.bouncycastle.crypto.tls.RecordStream $r5, $r7;
        byte[] r2;
        org.bouncycastle.crypto.tls.ByteQueue $r1, $r3, $r4;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        short $s2;
        byte $b1;
        int $i0, $i3;
        org.bouncycastle.crypto.tls.TlsCipherSuite $r6;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue changeCipherSpecQueue>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.tls.ByteQueue: int size()>();

        if $i0 <= 0 goto label5;

        r2 = newarray (byte)[1];

        $r3 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue changeCipherSpecQueue>;

        virtualinvoke $r3.<org.bouncycastle.crypto.tls.ByteQueue: void read(byte[],int,int,int)>(r2, 0, 1, 0);

        $r4 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue changeCipherSpecQueue>;

        virtualinvoke $r4.<org.bouncycastle.crypto.tls.ByteQueue: void removeData(int)>(1);

        $b1 = r2[0];

        if $b1 == 1 goto label2;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 10);

        goto label4;

     label2:
        $s2 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state>;

        $i3 = (int) $s2;

        if $i3 != 10 goto label3;

        $r7 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r5 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r6 = $r5.<org.bouncycastle.crypto.tls.RecordStream: org.bouncycastle.crypto.tls.TlsCipherSuite writeSuite>;

        $r7.<org.bouncycastle.crypto.tls.RecordStream: org.bouncycastle.crypto.tls.TlsCipherSuite readSuite> = $r6;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 11;

        goto label4;

     label3:
        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 40);

     label4:
        goto label1;

     label5:
        return;
    }

    private void processDHEKeyExchange(java.io.ByteArrayInputStream, org.bouncycastle.crypto.Signer) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4, $r11, $r13, $r14, $r15, $r16, $r35;
        org.bouncycastle.crypto.Signer r1;
        java.security.SecureRandom $r26;
        org.bouncycastle.crypto.io.SignerInputStream $r17;
        java.io.ByteArrayInputStream r0;
        org.bouncycastle.crypto.AsymmetricCipherKeyPair $r27;
        java.math.BigInteger $r6, $r7, $r8, $r9, $r10, $r19, $r20, $r21, $r22, $r30, $r34;
        boolean $z0, $z1;
        org.bouncycastle.crypto.CipherParameters $r28, $r32;
        org.bouncycastle.crypto.params.DHPublicKeyParameters $r29, $r33;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r5;
        org.bouncycastle.crypto.params.DHParameters $r23;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter $r12;
        org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator $r24;
        org.bouncycastle.crypto.params.DHKeyGenerationParameters $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.bouncycastle.crypto.agreement.DHBasicAgreement $r31;
        java.io.InputStream r18;

        r5 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        r0 := @parameter0: java.io.ByteArrayInputStream;

        r1 := @parameter1: org.bouncycastle.crypto.Signer;

        r18 = r0;

        if r1 == null goto label1;

        $r12 = r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        interfaceinvoke r1.<org.bouncycastle.crypto.Signer: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, $r12);

        $r14 = r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $r13 = r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $i3 = lengthof $r13;

        interfaceinvoke r1.<org.bouncycastle.crypto.Signer: void update(byte[],int,int)>($r14, 0, $i3);

        $r16 = r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] serverRandom>;

        $r15 = r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] serverRandom>;

        $i4 = lengthof $r15;

        interfaceinvoke r1.<org.bouncycastle.crypto.Signer: void update(byte[],int,int)>($r16, 0, $i4);

        $r17 = new org.bouncycastle.crypto.io.SignerInputStream;

        specialinvoke $r17.<org.bouncycastle.crypto.io.SignerInputStream: void <init>(java.io.InputStream,org.bouncycastle.crypto.Signer)>(r0, r1);

        r18 = $r17;

     label1:
        $r2 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>(r18);

        $r3 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>(r18);

        $r4 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>(r18);

        if r1 == null goto label2;

        $r11 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>(r0);

        $z0 = interfaceinvoke r1.<org.bouncycastle.crypto.Signer: boolean verifySignature(byte[])>($r11);

        if $z0 != 0 goto label2;

        virtualinvoke r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 42);

     label2:
        virtualinvoke r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void assertEmpty(java.io.ByteArrayInputStream)>(r0);

        $r19 = new java.math.BigInteger;

        specialinvoke $r19.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        $r20 = new java.math.BigInteger;

        specialinvoke $r20.<java.math.BigInteger: void <init>(int,byte[])>(1, $r3);

        $r21 = new java.math.BigInteger;

        specialinvoke $r21.<java.math.BigInteger: void <init>(int,byte[])>(1, $r4);

        $z1 = virtualinvoke $r19.<java.math.BigInteger: boolean isProbablePrime(int)>(10);

        if $z1 != 0 goto label3;

        virtualinvoke r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 47);

     label3:
        $r6 = <org.bouncycastle.crypto.tls.TlsProtocolHandler: java.math.BigInteger TWO>;

        $i0 = virtualinvoke $r20.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i0 < 0 goto label4;

        $r9 = <org.bouncycastle.crypto.tls.TlsProtocolHandler: java.math.BigInteger TWO>;

        $r10 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        $i2 = virtualinvoke $r20.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r10);

        if $i2 <= 0 goto label5;

     label4:
        virtualinvoke r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 47);

     label5:
        $r22 = <org.bouncycastle.crypto.tls.TlsProtocolHandler: java.math.BigInteger TWO>;

        $i5 = virtualinvoke $r21.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r22);

        if $i5 < 0 goto label6;

        $r7 = <org.bouncycastle.crypto.tls.TlsProtocolHandler: java.math.BigInteger ONE>;

        $r8 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r7);

        $i1 = virtualinvoke $r21.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r8);

        if $i1 <= 0 goto label7;

     label6:
        virtualinvoke r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 47);

     label7:
        $r23 = new org.bouncycastle.crypto.params.DHParameters;

        specialinvoke $r23.<org.bouncycastle.crypto.params.DHParameters: void <init>(java.math.BigInteger,java.math.BigInteger)>($r19, $r20);

        $r24 = new org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator;

        specialinvoke $r24.<org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator: void <init>()>();

        $r25 = new org.bouncycastle.crypto.params.DHKeyGenerationParameters;

        $r26 = r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.security.SecureRandom random>;

        specialinvoke $r25.<org.bouncycastle.crypto.params.DHKeyGenerationParameters: void <init>(java.security.SecureRandom,org.bouncycastle.crypto.params.DHParameters)>($r26, $r23);

        virtualinvoke $r24.<org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r25);

        $r27 = virtualinvoke $r24.<org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator: org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r28 = virtualinvoke $r27.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: org.bouncycastle.crypto.CipherParameters getPublic()>();

        $r29 = (org.bouncycastle.crypto.params.DHPublicKeyParameters) $r28;

        $r30 = virtualinvoke $r29.<org.bouncycastle.crypto.params.DHPublicKeyParameters: java.math.BigInteger getY()>();

        r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.math.BigInteger Yc> = $r30;

        $r31 = new org.bouncycastle.crypto.agreement.DHBasicAgreement;

        specialinvoke $r31.<org.bouncycastle.crypto.agreement.DHBasicAgreement: void <init>()>();

        $r32 = virtualinvoke $r27.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: org.bouncycastle.crypto.CipherParameters getPrivate()>();

        virtualinvoke $r31.<org.bouncycastle.crypto.agreement.DHBasicAgreement: void init(org.bouncycastle.crypto.CipherParameters)>($r32);

        $r33 = new org.bouncycastle.crypto.params.DHPublicKeyParameters;

        specialinvoke $r33.<org.bouncycastle.crypto.params.DHPublicKeyParameters: void <init>(java.math.BigInteger,org.bouncycastle.crypto.params.DHParameters)>($r21, $r23);

        $r34 = virtualinvoke $r31.<org.bouncycastle.crypto.agreement.DHBasicAgreement: java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters)>($r33);

        $r35 = staticinvoke <org.bouncycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r34);

        r5.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] pms> = $r35;

        return;
    }

    private void processSRPKeyExchange(java.io.ByteArrayInputStream, org.bouncycastle.crypto.Signer) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4, $r5, $r7, $r9, $r10, $r11, $r12, $r22, $r23, $r26;
        org.bouncycastle.crypto.Signer r1;
        org.bouncycastle.crypto.agreement.srp.SRP6Client $r19;
        org.bouncycastle.crypto.CryptoException $r14;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter $r8;
        java.security.SecureRandom $r21;
        org.bouncycastle.crypto.io.SignerInputStream $r13;
        java.io.ByteArrayInputStream r0;
        int $i0, $i1;
        java.math.BigInteger $r16, $r17, $r18, $r24, $r25;
        org.bouncycastle.crypto.digests.SHA1Digest $r20;
        boolean $z0;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r6;
        java.io.InputStream r15;

        r6 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        r0 := @parameter0: java.io.ByteArrayInputStream;

        r1 := @parameter1: org.bouncycastle.crypto.Signer;

        r15 = r0;

        if r1 == null goto label1;

        $r8 = r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey>;

        interfaceinvoke r1.<org.bouncycastle.crypto.Signer: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, $r8);

        $r10 = r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $r9 = r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $i0 = lengthof $r9;

        interfaceinvoke r1.<org.bouncycastle.crypto.Signer: void update(byte[],int,int)>($r10, 0, $i0);

        $r12 = r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] serverRandom>;

        $r11 = r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] serverRandom>;

        $i1 = lengthof $r11;

        interfaceinvoke r1.<org.bouncycastle.crypto.Signer: void update(byte[],int,int)>($r12, 0, $i1);

        $r13 = new org.bouncycastle.crypto.io.SignerInputStream;

        specialinvoke $r13.<org.bouncycastle.crypto.io.SignerInputStream: void <init>(java.io.InputStream,org.bouncycastle.crypto.Signer)>(r0, r1);

        r15 = $r13;

     label1:
        $r2 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>(r15);

        $r3 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>(r15);

        $r4 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque8(java.io.InputStream)>(r15);

        $r5 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>(r15);

        if r1 == null goto label2;

        $r7 = staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: byte[] readOpaque16(java.io.InputStream)>(r0);

        $z0 = interfaceinvoke r1.<org.bouncycastle.crypto.Signer: boolean verifySignature(byte[])>($r7);

        if $z0 != 0 goto label2;

        virtualinvoke r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 42);

     label2:
        virtualinvoke r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void assertEmpty(java.io.ByteArrayInputStream)>(r0);

        $r16 = new java.math.BigInteger;

        specialinvoke $r16.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        $r17 = new java.math.BigInteger;

        specialinvoke $r17.<java.math.BigInteger: void <init>(int,byte[])>(1, $r3);

        $r18 = new java.math.BigInteger;

        specialinvoke $r18.<java.math.BigInteger: void <init>(int,byte[])>(1, $r5);

        $r19 = new org.bouncycastle.crypto.agreement.srp.SRP6Client;

        specialinvoke $r19.<org.bouncycastle.crypto.agreement.srp.SRP6Client: void <init>()>();

        $r20 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r20.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        $r21 = r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.security.SecureRandom random>;

        virtualinvoke $r19.<org.bouncycastle.crypto.agreement.srp.SRP6Client: void init(java.math.BigInteger,java.math.BigInteger,org.bouncycastle.crypto.Digest,java.security.SecureRandom)>($r16, $r17, $r20, $r21);

        $r22 = r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] SRP_identity>;

        $r23 = r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] SRP_password>;

        $r24 = virtualinvoke $r19.<org.bouncycastle.crypto.agreement.srp.SRP6Client: java.math.BigInteger generateClientCredentials(byte[],byte[],byte[])>($r4, $r22, $r23);

        r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.math.BigInteger SRP_A> = $r24;

     label3:
        $r25 = virtualinvoke $r19.<org.bouncycastle.crypto.agreement.srp.SRP6Client: java.math.BigInteger calculateSecret(java.math.BigInteger)>($r18);

        $r26 = staticinvoke <org.bouncycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r25);

        r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] pms> = $r26;

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        virtualinvoke r6.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 47);

     label6:
        return;

        catch org.bouncycastle.crypto.CryptoException from label3 to label4 with label5;
    }

    private void validateKeyUsage(org.bouncycastle.asn1.x509.X509CertificateStructure, int) throws java.io.IOException
    {
        byte[] $r6;
        org.bouncycastle.asn1.x509.TBSCertificateStructure $r1;
        org.bouncycastle.asn1.x509.X509Extensions $r2;
        org.bouncycastle.asn1.x509.X509Extension $r4;
        org.bouncycastle.asn1.DERBitString $r5;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r7;
        short s1, $s4;
        byte $b0;
        int i2, $i3, $i5;
        org.bouncycastle.asn1.x509.X509CertificateStructure r0;
        org.bouncycastle.asn1.DERObjectIdentifier $r3;

        r7 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        r0 := @parameter0: org.bouncycastle.asn1.x509.X509CertificateStructure;

        i2 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.bouncycastle.asn1.x509.X509CertificateStructure: org.bouncycastle.asn1.x509.TBSCertificateStructure getTBSCertificate()>();

        $r2 = virtualinvoke $r1.<org.bouncycastle.asn1.x509.TBSCertificateStructure: org.bouncycastle.asn1.x509.X509Extensions getExtensions()>();

        if $r2 == null goto label1;

        $r3 = <org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.DERObjectIdentifier KeyUsage>;

        $r4 = virtualinvoke $r2.<org.bouncycastle.asn1.x509.X509Extensions: org.bouncycastle.asn1.x509.X509Extension getExtension(org.bouncycastle.asn1.DERObjectIdentifier)>($r3);

        if $r4 == null goto label1;

        $r5 = staticinvoke <org.bouncycastle.asn1.x509.KeyUsage: org.bouncycastle.asn1.DERBitString getInstance(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<org.bouncycastle.asn1.DERBitString: byte[] getBytes()>();

        $b0 = $r6[0];

        $s4 = (short) $b0;

        s1 = $s4 & 255;

        $i5 = (int) s1;

        $i3 = $i5 & i2;

        if $i3 == i2 goto label1;

        virtualinvoke r7.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 46);

     label1:
        return;
    }

    private void sendClientCertificate() throws java.io.IOException
    {
        org.bouncycastle.crypto.tls.RecordStream $r3;
        byte[] $r1;
        java.io.ByteArrayOutputStream $r0;
        int $i0;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r2;

        r2 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(11, $r0);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint24(int,java.io.OutputStream)>(3, $r0);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint24(int,java.io.OutputStream)>(0, $r0);

        $r1 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r3 = r2.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $i0 = lengthof $r1;

        virtualinvoke $r3.<org.bouncycastle.crypto.tls.RecordStream: void writeMessage(short,byte[],int,int)>(22, $r1, 0, $i0);

        return;
    }

    private void sendClientKeyExchange(byte[]) throws java.io.IOException
    {
        org.bouncycastle.crypto.tls.RecordStream $r4;
        byte[] r1, $r2;
        java.io.ByteArrayOutputStream $r0;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r3;
        int $i0, $i1, $i2;

        r3 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        r1 := @parameter0: byte[];

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(16, $r0);

        $i0 = lengthof r1;

        $i1 = $i0 + 2;

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint24(int,java.io.OutputStream)>($i1, $r0);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r4 = r3.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $i2 = lengthof $r2;

        virtualinvoke $r4.<org.bouncycastle.crypto.tls.RecordStream: void writeMessage(short,byte[],int,int)>(22, $r2, 0, $i2);

        return;
    }

    public void connect(org.bouncycastle.crypto.tls.CertificateVerifyer) throws java.io.IOException
    {
        org.bouncycastle.crypto.tls.RecordStream $r16, $r19;
        byte[] $r2, $r3, $r5, $r6, $r7, $r8, $r10, $r11, $r14, $r15, $r22, $r26, r27;
        org.bouncycastle.crypto.tls.TlsInputStream $r32;
        java.util.Enumeration $r21;
        org.bouncycastle.crypto.tls.TlsOuputStream $r33;
        org.bouncycastle.crypto.tls.CertificateVerifyer r1;
        java.lang.Integer r24;
        java.security.SecureRandom $r4;
        byte $b4, $b6, $b8, $b9;
        boolean $z0, $z1, $z2, $z3;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        java.io.ByteArrayOutputStream $r28, $r30, $r31;
        long $l0, $l1;
        short $s13;
        int i2, $i3, $i5, $i7, $i10, $i11, $i12, $i14;
        java.util.Hashtable $r29;
        java.lang.Object $r23, $r25;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        r1 := @parameter0: org.bouncycastle.crypto.tls.CertificateVerifyer;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.CertificateVerifyer verifyer> = r1;

        $r2 = newarray (byte)[32];

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom> = $r2;

        $r4 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: java.security.SecureRandom random>;

        $r3 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r3);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = $l0 / 1000L;

        i2 = (int) $l1;

        $r5 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $i3 = i2 >> 24;

        $b4 = (byte) $i3;

        $r5[0] = $b4;

        $r6 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $i5 = i2 >> 16;

        $b6 = (byte) $i5;

        $r6[1] = $b6;

        $r7 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $i7 = i2 >> 8;

        $b8 = (byte) $i7;

        $r7[2] = $b8;

        $r8 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        $b9 = (byte) i2;

        $r8[3] = $b9;

        $r28 = new java.io.ByteArrayOutputStream;

        specialinvoke $r28.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeVersion(java.io.OutputStream)>($r28);

        $r10 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] clientRandom>;

        virtualinvoke $r28.<java.io.ByteArrayOutputStream: void write(byte[])>($r10);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(0, $r28);

        staticinvoke <org.bouncycastle.crypto.tls.TlsCipherSuiteManager: void writeCipherSuites(java.io.OutputStream)>($r28);

        $r11 = newarray (byte)[1];

        $r11[0] = 0;

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeOpaque8(byte[],java.io.OutputStream)>($r11, $r28);

        $r29 = new java.util.Hashtable;

        specialinvoke $r29.<java.util.Hashtable: void <init>()>();

        $z0 = virtualinvoke $r29.<java.util.Hashtable: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean extendedClientHello> = $z3;

        $z1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean extendedClientHello>;

        if $z1 == 0 goto label5;

        $r30 = new java.io.ByteArrayOutputStream;

        specialinvoke $r30.<java.io.ByteArrayOutputStream: void <init>()>();

        $r21 = virtualinvoke $r29.<java.util.Hashtable: java.util.Enumeration keys()>();

     label3:
        $z2 = interfaceinvoke $r21.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 == 0 goto label4;

        $r23 = interfaceinvoke $r21.<java.util.Enumeration: java.lang.Object nextElement()>();

        r24 = (java.lang.Integer) $r23;

        $r25 = virtualinvoke $r29.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r24);

        $r26 = (byte[]) $r25;

        r27 = (byte[]) $r26;

        $i12 = virtualinvoke r24.<java.lang.Integer: int intValue()>();

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint16(int,java.io.OutputStream)>($i12, $r30);

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>(r27, $r30);

        goto label3;

     label4:
        $r22 = virtualinvoke $r30.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeOpaque16(byte[],java.io.OutputStream)>($r22, $r28);

     label5:
        $r31 = new java.io.ByteArrayOutputStream;

        specialinvoke $r31.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint8(short,java.io.OutputStream)>(1, $r31);

        $i10 = virtualinvoke $r28.<java.io.ByteArrayOutputStream: int size()>();

        staticinvoke <org.bouncycastle.crypto.tls.TlsUtils: void writeUint24(int,java.io.OutputStream)>($i10, $r31);

        $r14 = virtualinvoke $r28.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r31.<java.io.ByteArrayOutputStream: void write(byte[])>($r14);

        $r15 = virtualinvoke $r31.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r16 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $i11 = lengthof $r15;

        virtualinvoke $r16.<org.bouncycastle.crypto.tls.RecordStream: void writeMessage(short,byte[],int,int)>(22, $r15, 0, $i11);

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state> = 1;

     label6:
        $s13 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: short connection_state>;

        $i14 = (int) $s13;

        if $i14 == 12 goto label7;

        $r19 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        virtualinvoke $r19.<org.bouncycastle.crypto.tls.RecordStream: void readData()>();

        goto label6;

     label7:
        $r32 = new org.bouncycastle.crypto.tls.TlsInputStream;

        specialinvoke $r32.<org.bouncycastle.crypto.tls.TlsInputStream: void <init>(org.bouncycastle.crypto.tls.TlsProtocolHandler)>(r0);

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsInputStream tlsInputStream> = $r32;

        $r33 = new org.bouncycastle.crypto.tls.TlsOuputStream;

        specialinvoke $r33.<org.bouncycastle.crypto.tls.TlsOuputStream: void <init>(org.bouncycastle.crypto.tls.TlsProtocolHandler)>(r0);

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsOuputStream tlsOutputStream> = $r33;

        return;
    }

    protected int readApplicationData(byte[], int, int) throws java.io.IOException
    {
        org.bouncycastle.crypto.tls.RecordStream $r6;
        byte[] r3;
        int $i0, $i1, $i2, i3, i4, $i6;
        boolean $z0, $z1, $z2, $z3;
        org.bouncycastle.crypto.tls.ByteQueue $r1, $r2, $r4, $r5;
        java.io.IOException $r9, $r10;
        java.lang.RuntimeException $r8;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        r3 := @parameter0: byte[];

        i3 := @parameter1: int;

        i4 := @parameter2: int;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue applicationDataQueue>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.tls.ByteQueue: int size()>();

        if $i0 != 0 goto label9;

        $z0 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean failedWithError>;

        if $z0 == 0 goto label2;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Internal TLS error, this could be an attack");

        throw $r10;

     label2:
        $z1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed>;

        if $z1 == 0 goto label3;

        $i6 = (int) -1;

        return $i6;

     label3:
        $r6 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        virtualinvoke $r6.<org.bouncycastle.crypto.tls.RecordStream: void readData()>();

     label4:
        goto label1;

     label5:
        $r9 := @caughtexception;

        $z3 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed>;

        if $z3 != 0 goto label6;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 80);

     label6:
        throw $r9;

     label7:
        $r8 := @caughtexception;

        $z2 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed>;

        if $z2 != 0 goto label8;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 80);

     label8:
        throw $r8;

     label9:
        $r2 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue applicationDataQueue>;

        $i1 = virtualinvoke $r2.<org.bouncycastle.crypto.tls.ByteQueue: int size()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i1);

        $r4 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue applicationDataQueue>;

        virtualinvoke $r4.<org.bouncycastle.crypto.tls.ByteQueue: void read(byte[],int,int,int)>(r3, i3, $i2, 0);

        $r5 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.ByteQueue applicationDataQueue>;

        virtualinvoke $r5.<org.bouncycastle.crypto.tls.ByteQueue: void removeData(int)>($i2);

        return $i2;

        catch java.io.IOException from label3 to label4 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label7;
    }

    protected void writeData(byte[], int, int) throws java.io.IOException
    {
        org.bouncycastle.crypto.tls.RecordStream $r2, $r4;
        byte[] $r1, r3;
        int $i0, i1, i2;
        boolean $z0, $z1, $z2, $z3;
        java.io.IOException $r5, $r6, $r8;
        java.lang.RuntimeException $r7;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        r3 := @parameter0: byte[];

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean failedWithError>;

        if $z0 == 0 goto label01;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Internal TLS error, this could be an attack");

        throw $r6;

     label01:
        $z1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed>;

        if $z1 == 0 goto label02;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Sorry, connection has been closed, you cannot write more data");

        throw $r5;

     label02:
        $r2 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        $r1 = <org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] emptybuf>;

        virtualinvoke $r2.<org.bouncycastle.crypto.tls.RecordStream: void writeMessage(short,byte[],int,int)>(23, $r1, 0, 0);

     label03:
        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(i2, 16384);

     label04:
        $r4 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        virtualinvoke $r4.<org.bouncycastle.crypto.tls.RecordStream: void writeMessage(short,byte[],int,int)>(23, r3, i1, $i0);

     label05:
        goto label10;

     label06:
        $r8 := @caughtexception;

        $z3 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed>;

        if $z3 != 0 goto label07;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 80);

     label07:
        throw $r8;

     label08:
        $r7 := @caughtexception;

        $z2 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed>;

        if $z2 != 0 goto label09;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 80);

     label09:
        throw $r7;

     label10:
        i1 = i1 + $i0;

        i2 = i2 - $i0;

        if i2 > 0 goto label03;

        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.RuntimeException from label04 to label05 with label08;
    }

    public org.bouncycastle.crypto.tls.TlsOuputStream getTlsOuputStream()
    {
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        org.bouncycastle.crypto.tls.TlsOuputStream $r1;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        $r1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsOuputStream tlsOutputStream>;

        return $r1;
    }

    public java.io.OutputStream getOutputStream()
    {
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        org.bouncycastle.crypto.tls.TlsOuputStream $r1;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        $r1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsOuputStream tlsOutputStream>;

        return $r1;
    }

    public org.bouncycastle.crypto.tls.TlsInputStream getTlsInputStream()
    {
        org.bouncycastle.crypto.tls.TlsInputStream $r1;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        $r1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsInputStream tlsInputStream>;

        return $r1;
    }

    public java.io.InputStream getInputStream()
    {
        org.bouncycastle.crypto.tls.TlsInputStream $r1;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        $r1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.TlsInputStream tlsInputStream>;

        return $r1;
    }

    protected void failWithError(short, short) throws java.io.IOException
    {
        org.bouncycastle.crypto.tls.RecordStream $r3, $r4;
        byte[] r2;
        java.io.IOException $r6, $r7;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        short s0, s2;
        byte $b1, $b3;
        int $i4, $i5;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        s0 := @parameter0: short;

        s2 := @parameter1: short;

        $z0 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed>;

        if $z0 != 0 goto label3;

        r2 = newarray (byte)[2];

        $b1 = (byte) s0;

        r2[0] = $b1;

        $b3 = (byte) s2;

        r2[1] = $b3;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed> = 1;

        $i4 = (int) s0;

        if $i4 != 2 goto label1;

        r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean failedWithError> = 1;

     label1:
        $r3 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        virtualinvoke $r3.<org.bouncycastle.crypto.tls.RecordStream: void writeMessage(short,byte[],int,int)>(21, r2, 0, 2);

        $r4 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        virtualinvoke $r4.<org.bouncycastle.crypto.tls.RecordStream: void close()>();

        $i5 = (int) s0;

        if $i5 != 2 goto label2;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Internal TLS error, this could be an attack");

        throw $r6;

     label2:
        goto label4;

     label3:
        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Internal TLS error, this could be an attack");

        throw $r7;

     label4:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        $z0 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: boolean closed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(1, 0);

     label1:
        return;
    }

    protected void assertEmpty(java.io.ByteArrayInputStream) throws java.io.IOException
    {
        int $i0;
        java.io.ByteArrayInputStream r0;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r1;

        r1 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        r0 := @parameter0: java.io.ByteArrayInputStream;

        $i0 = virtualinvoke r0.<java.io.ByteArrayInputStream: int available()>();

        if $i0 <= 0 goto label1;

        virtualinvoke r1.<org.bouncycastle.crypto.tls.TlsProtocolHandler: void failWithError(short,short)>(2, 50);

     label1:
        return;
    }

    protected void flush() throws java.io.IOException
    {
        org.bouncycastle.crypto.tls.RecordStream $r1;
        org.bouncycastle.crypto.tls.TlsProtocolHandler r0;

        r0 := @this: org.bouncycastle.crypto.tls.TlsProtocolHandler;

        $r1 = r0.<org.bouncycastle.crypto.tls.TlsProtocolHandler: org.bouncycastle.crypto.tls.RecordStream rs>;

        virtualinvoke $r1.<org.bouncycastle.crypto.tls.RecordStream: void flush()>();

        return;
    }

    static void <clinit>()
    {
        byte[] $r2;
        java.math.BigInteger $r0, $r1;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: java.lang.String TLS_ERROR_MESSAGE> = "Internal TLS error, this could be an attack";

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AL_fatal> = 2;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AL_warning> = 1;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_no_renegotiation> = 100;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_user_canceled> = 90;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_internal_error> = 80;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_insufficient_security> = 71;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_protocol_version> = 70;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_export_restriction> = 60;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_decrypt_error> = 51;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_decode_error> = 50;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_access_denied> = 49;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_unknown_ca> = 48;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_illegal_parameter> = 47;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_certificate_unknown> = 46;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_certificate_expired> = 45;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_certificate_revoked> = 44;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_unsupported_certificate> = 43;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_bad_certificate> = 42;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_handshake_failure> = 40;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_decompression_failure> = 30;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_record_overflow> = 22;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_decryption_failed> = 21;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_bad_record_mac> = 20;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_unexpected_message> = 10;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short AP_close_notify> = 0;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_DONE> = 12;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_SERVER_CHANGE_CIPHER_SPEC_RECEIVED> = 11;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_CLIENT_FINISHED_SEND> = 10;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_CLIENT_CHANGE_CIPHER_SPEC_SEND> = 9;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_CLIENT_VERIFICATION_SEND> = 8;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_CLIENT_KEY_EXCHANGE_SEND> = 7;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_SERVER_HELLO_DONE_RECEIVED> = 6;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_CERTIFICATE_REQUEST_RECEIVED> = 5;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_SERVER_KEY_EXCHANGE_RECEIVED> = 4;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_SERVER_CERTIFICATE_RECEIVED> = 3;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_SERVER_HELLO_RECEIVED> = 2;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short CS_CLIENT_HELLO_SEND> = 1;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short HP_FINISHED> = 20;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short HP_CLIENT_KEY_EXCHANGE> = 16;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short HP_CERTIFICATE_VERIFY> = 15;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short HP_SERVER_HELLO_DONE> = 14;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short HP_CERTIFICATE_REQUEST> = 13;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short HP_SERVER_KEY_EXCHANGE> = 12;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short HP_CERTIFICATE> = 11;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short HP_SERVER_HELLO> = 2;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short HP_CLIENT_HELLO> = 1;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short HP_HELLO_REQUEST> = 0;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short RL_APPLICATION_DATA> = 23;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short RL_HANDSHAKE> = 22;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short RL_ALERT> = 21;

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: short RL_CHANGE_CIPHER_SPEC> = 20;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: java.math.BigInteger ONE> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: java.math.BigInteger TWO> = $r1;

        $r2 = newarray (byte)[0];

        <org.bouncycastle.crypto.tls.TlsProtocolHandler: byte[] emptybuf> = $r2;

        return;
    }
}
