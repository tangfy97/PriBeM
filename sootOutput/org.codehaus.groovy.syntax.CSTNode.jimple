public abstract class org.codehaus.groovy.syntax.CSTNode extends java.lang.Object
{

    public void <init>()
    {
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getMeaning()
    {
        int $i0;
        org.codehaus.groovy.syntax.Token $r1;
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.Token getRoot(boolean)>(1);

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: int getMeaning()>();

        return $i0;
    }

    public org.codehaus.groovy.syntax.CSTNode setMeaning(int)
    {
        int i0;
        org.codehaus.groovy.syntax.Token $r1;
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.Token getRoot()>();

        virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.CSTNode setMeaning(int)>(i0);

        return r0;
    }

    public int getType()
    {
        int $i0;
        org.codehaus.groovy.syntax.Token $r1;
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.Token getRoot(boolean)>(1);

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: int getType()>();

        return $i0;
    }

    public boolean canMean(int)
    {
        int $i0, i1;
        org.codehaus.groovy.syntax.CSTNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int getMeaning()>();

        $z0 = staticinvoke <org.codehaus.groovy.syntax.Types: boolean canMean(int,int)>($i0, i1);

        return $z0;
    }

    public boolean isA(int)
    {
        int $i0, i1;
        org.codehaus.groovy.syntax.CSTNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int getMeaning()>();

        $z0 = staticinvoke <org.codehaus.groovy.syntax.Types: boolean ofType(int,int)>($i0, i1);

        return $z0;
    }

    public boolean isOneOf(int[])
    {
        int[] r1;
        int $i0, $i1, $i2, i3;
        org.codehaus.groovy.syntax.CSTNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int getMeaning()>();

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label3;

        $i2 = r1[i3];

        $z0 = staticinvoke <org.codehaus.groovy.syntax.Types: boolean ofType(int,int)>($i0, $i2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isAllOf(int[])
    {
        int[] r1;
        int $i0, $i1, $i2, i3;
        org.codehaus.groovy.syntax.CSTNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int getMeaning()>();

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label3;

        $i2 = r1[i3];

        $z0 = staticinvoke <org.codehaus.groovy.syntax.Types: boolean ofType(int,int)>($i0, $i2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    public int getMeaningAs(int[])
    {
        int[] r0;
        int $i0, $i1, $i2, i3;
        org.codehaus.groovy.syntax.CSTNode r1;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.syntax.CSTNode;

        r0 := @parameter0: int[];

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $i1 = r0[i3];

        $z0 = virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: boolean isA(int)>($i1);

        if $z0 == 0 goto label2;

        $i2 = r0[i3];

        return $i2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    boolean matches(int)
    {
        int i0;
        org.codehaus.groovy.syntax.CSTNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: boolean isA(int)>(i0);

        return $z0;
    }

    boolean matches(int, int)
    {
        int i0, i1;
        org.codehaus.groovy.syntax.CSTNode r0, $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: boolean isA(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode get(int,boolean)>(1, 1);

        $z1 = virtualinvoke $r1.<org.codehaus.groovy.syntax.CSTNode: boolean isA(int)>(i1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    boolean matches(int, int, int)
    {
        org.codehaus.groovy.syntax.CSTNode r0, $r1;
        int i0, i1, i2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: boolean matches(int,int)>(i0, i1);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode get(int,boolean)>(2, 1);

        $z1 = virtualinvoke $r1.<org.codehaus.groovy.syntax.CSTNode: boolean isA(int)>(i2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    boolean matches(int, int, int, int)
    {
        org.codehaus.groovy.syntax.CSTNode r0, $r1;
        int i0, i1, i2, i3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: boolean matches(int,int,int)>(i0, i1, i2);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode get(int,boolean)>(3, 1);

        $z1 = virtualinvoke $r1.<org.codehaus.groovy.syntax.CSTNode: boolean isA(int)>(i3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    boolean matches(int, int, int, int, int)
    {
        org.codehaus.groovy.syntax.CSTNode r0, $r1;
        int i0, i1, i2, i3, i4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: boolean matches(int,int,int,int)>(i0, i1, i2, i3);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode get(int,boolean)>(4, 1);

        $z1 = virtualinvoke $r1.<org.codehaus.groovy.syntax.CSTNode: boolean isA(int)>(i4);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEmpty()
    {
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        return 0;
    }

    public abstract int size();

    public boolean hasChildren()
    {
        int $i0;
        org.codehaus.groovy.syntax.CSTNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int children()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int children()
    {
        int $i0, $i1;
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int size()>();

        if $i0 <= 1 goto label1;

        $i1 = $i0 - 1;

        return $i1;

     label1:
        return 0;
    }

    public abstract org.codehaus.groovy.syntax.CSTNode get(int);

    public org.codehaus.groovy.syntax.CSTNode get(int, boolean)
    {
        int i0;
        org.codehaus.groovy.syntax.CSTNode r0, $r1, r2;
        boolean z0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode get(int)>(i0);

        r2 = $r1;

        if $r1 != null goto label1;

        if z0 == 0 goto label1;

        r2 = <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token NULL>;

     label1:
        return r2;
    }

    public abstract org.codehaus.groovy.syntax.Token getRoot();

    public org.codehaus.groovy.syntax.Token getRoot(boolean)
    {
        org.codehaus.groovy.syntax.Token $r1, r2;
        org.codehaus.groovy.syntax.CSTNode r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.Token getRoot()>();

        r2 = $r1;

        if $r1 != null goto label1;

        if z0 == 0 goto label1;

        r2 = <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token NULL>;

     label1:
        return r2;
    }

    public java.lang.String getRootText()
    {
        java.lang.String $r2;
        org.codehaus.groovy.syntax.Token $r1;
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.Token getRoot(boolean)>(1);

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: java.lang.String getText()>();

        return $r2;
    }

    public java.lang.String getDescription()
    {
        int $i0;
        java.lang.String $r1;
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int getMeaning()>();

        $r1 = staticinvoke <org.codehaus.groovy.syntax.Types: java.lang.String getDescription(int)>($i0);

        return $r1;
    }

    public int getStartLine()
    {
        int $i0;
        org.codehaus.groovy.syntax.Token $r1;
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.Token getRoot(boolean)>(1);

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: int getStartLine()>();

        return $i0;
    }

    public int getStartColumn()
    {
        int $i0;
        org.codehaus.groovy.syntax.Token $r1;
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.Token getRoot(boolean)>(1);

        $i0 = virtualinvoke $r1.<org.codehaus.groovy.syntax.Token: int getStartColumn()>();

        return $i0;
    }

    public void markAsExpression()
    {
        org.codehaus.groovy.GroovyBugError $r0;
        org.codehaus.groovy.syntax.CSTNode r1;

        r1 := @this: org.codehaus.groovy.syntax.CSTNode;

        $r0 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r0.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("markAsExpression() not supported for this CSTNode type");

        throw $r0;
    }

    public boolean isAnExpression()
    {
        org.codehaus.groovy.syntax.CSTNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: boolean isA(int)>(1910);

        return $z0;
    }

    public org.codehaus.groovy.syntax.CSTNode add(org.codehaus.groovy.syntax.CSTNode)
    {
        org.codehaus.groovy.GroovyBugError $r0;
        org.codehaus.groovy.syntax.CSTNode r1, r2;

        r1 := @this: org.codehaus.groovy.syntax.CSTNode;

        r2 := @parameter0: org.codehaus.groovy.syntax.CSTNode;

        $r0 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r0.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("add() not supported for this CSTNode type");

        throw $r0;
    }

    public void addChildrenOf(org.codehaus.groovy.syntax.CSTNode)
    {
        int $i0, i1;
        org.codehaus.groovy.syntax.CSTNode r0, r1, $r2;

        r1 := @this: org.codehaus.groovy.syntax.CSTNode;

        r0 := @parameter0: org.codehaus.groovy.syntax.CSTNode;

        i1 = 1;

     label1:
        $i0 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode get(int)>(i1);

        virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode add(org.codehaus.groovy.syntax.CSTNode)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.codehaus.groovy.syntax.CSTNode set(int, org.codehaus.groovy.syntax.CSTNode)
    {
        org.codehaus.groovy.GroovyBugError $r0;
        int i0;
        org.codehaus.groovy.syntax.CSTNode r1, r2;

        r1 := @this: org.codehaus.groovy.syntax.CSTNode;

        i0 := @parameter0: int;

        r2 := @parameter1: org.codehaus.groovy.syntax.CSTNode;

        $r0 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r0.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("set() not supported for this CSTNode type");

        throw $r0;
    }

    public abstract org.codehaus.groovy.syntax.Reduction asReduction();

    public java.lang.String toString()
    {
        java.io.PrintWriter $r2;
        java.io.StringWriter $r0;
        java.lang.String $r3;
        org.codehaus.groovy.syntax.CSTNode r1;

        r1 := @this: org.codehaus.groovy.syntax.CSTNode;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r2 = new java.io.PrintWriter;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: void write(java.io.PrintWriter)>($r2);

        virtualinvoke $r0.<java.io.StringWriter: void flush()>();

        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }

    public void write(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        org.codehaus.groovy.syntax.CSTNode r0;

        r0 := @this: org.codehaus.groovy.syntax.CSTNode;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<org.codehaus.groovy.syntax.CSTNode: void write(java.io.PrintWriter,java.lang.String)>(r1, "");

        return;
    }

    protected void write(java.io.PrintWriter, java.lang.String)
    {
        boolean $z0;
        java.io.PrintWriter r0;
        org.codehaus.groovy.syntax.Token $r3;
        org.codehaus.groovy.syntax.CSTNode r1, $r14;
        java.lang.StringBuffer $r7, $r8, $r11, $r12, $r17, $r18, $r20, $r22, $r23, $r24, $r25, $r29, $r30, $r31, $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i12;
        java.lang.String r2, $r4, $r5, $r9, $r13, $r16, $r19, $r26, $r27, r28;

        r1 := @this: org.codehaus.groovy.syntax.CSTNode;

        r0 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("(");

        $z0 = virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: boolean isEmpty()>();

        if $z0 != 0 goto label08;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.Token getRoot(boolean)>(1);

        $i0 = virtualinvoke $r3.<org.codehaus.groovy.syntax.Token: int getType()>();

        $i1 = virtualinvoke $r3.<org.codehaus.groovy.syntax.Token: int getMeaning()>();

        $r4 = staticinvoke <org.codehaus.groovy.syntax.Types: java.lang.String getDescription(int)>($i0);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        if $i1 == $i0 goto label01;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(" as ");

        $r27 = staticinvoke <org.codehaus.groovy.syntax.Types: java.lang.String getDescription(int)>($i1);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r27);

     label01:
        $i2 = virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: int getStartLine()>();

        $i12 = (int) -1;

        if $i2 <= $i12 goto label02;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" at ");

        $i6 = virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: int getStartLine()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i7 = virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: int getStartColumn()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i7);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r26);

     label02:
        $r5 = virtualinvoke $r3.<org.codehaus.groovy.syntax.Token: java.lang.String getText()>();

        r28 = $r5;

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i3 <= 0 goto label04;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        if $i3 <= 40 goto label03;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, 17);

        $r17 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $i5 = $i3 - 17;

        $r19 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>($i5, $i3);

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        r28 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

     label03:
        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(" \"");

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(r28);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("\" ");

        goto label05;

     label04:
        $i4 = virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: int children()>();

        if $i4 <= 0 goto label05;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(": ");

     label05:
        $i8 = virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: int size()>();

        if $i8 <= 1 goto label08;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("");

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        i9 = 1;

     label06:
        if i9 >= $i8 goto label07;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r9);

        virtualinvoke r0.<java.io.PrintWriter: void print(int)>(i9);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        $r14 = virtualinvoke r1.<org.codehaus.groovy.syntax.CSTNode: org.codehaus.groovy.syntax.CSTNode get(int,boolean)>(i9, 1);

        virtualinvoke $r14.<org.codehaus.groovy.syntax.CSTNode: void write(java.io.PrintWriter,java.lang.String)>(r0, $r13);

        i9 = i9 + 1;

        goto label06;

     label07:
        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(r2);

     label08:
        $i10 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i10 <= 0 goto label09;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(")");

        goto label10;

     label09:
        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(")");

     label10:
        return;
    }
}
