public class ucar.nc2.ft.point.standard.Table$TableParentIndex extends ucar.nc2.ft.point.standard.Table$TableStructure
{
    private java.util.Map indexMap;
    private java.lang.String parentIndexName;

    void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.ft.point.standard.TableConfig)
    {
        java.util.HashMap $r7;
        long $l0, $l1;
        java.lang.Integer $r10, $r12, $r15;
        java.util.ArrayList $r13;
        ucar.nc2.ft.point.standard.TableConfig r2;
        java.util.Map $r9, $r14;
        int $i2, $i3, i4;
        ucar.nc2.Variable $r5;
        java.lang.String $r3, $r4, $r8;
        boolean $z0;
        ucar.nc2.ft.point.standard.Table$TableParentIndex r0;
        java.io.IOException $r16;
        java.lang.RuntimeException $r17;
        ucar.ma2.Array $r6;
        java.util.List r18;
        java.lang.Object $r11;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.ft.point.standard.Table$TableParentIndex;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.ft.point.standard.TableConfig;

        specialinvoke r0.<ucar.nc2.ft.point.standard.Table$TableStructure: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r1, r2);

        $r3 = r2.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String parentIndex>;

        r0.<ucar.nc2.ft.point.standard.Table$TableParentIndex: java.lang.String parentIndexName> = $r3;

     label1:
        $r4 = r2.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String parentIndex>;

        $r5 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        i4 = 0;

        $r7 = new java.util.HashMap;

        $l0 = virtualinvoke $r6.<ucar.ma2.Array: long getSize()>();

        $l1 = 2L * $l0;

        $i2 = (int) $l1;

        specialinvoke $r7.<java.util.HashMap: void <init>(int)>($i2);

        r0.<ucar.nc2.ft.point.standard.Table$TableParentIndex: java.util.Map indexMap> = $r7;

     label2:
        $z0 = virtualinvoke $r6.<ucar.ma2.Array: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i3 = virtualinvoke $r6.<ucar.ma2.Array: int nextInt()>();

        $r9 = r0.<ucar.nc2.ft.point.standard.Table$TableParentIndex: java.util.Map indexMap>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r18 = (java.util.List) $r11;

        if r18 != null goto label3;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r18 = $r13;

        $r14 = r0.<ucar.nc2.ft.point.standard.Table$TableParentIndex: java.util.Map indexMap>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r13);

     label3:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>($r12);

        i4 = i4 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r16);

        throw $r17;

     label6:
        $r8 = r2.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String parentIndex>;

        virtualinvoke r0.<ucar.nc2.ft.point.standard.Table$TableParentIndex: void checkNonDataVariable(java.lang.String)>($r8);

        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    protected void showTableExtraInfo(java.lang.String, java.util.Formatter)
    {
        ucar.nc2.ft.point.standard.Table$TableParentIndex r3;
        java.lang.Object[] $r1;
        java.lang.Integer $r6;
        java.util.Formatter r0;
        java.util.Map $r5;
        int $i0;
        java.lang.String r2, $r4;

        r3 := @this: ucar.nc2.ft.point.standard.Table$TableParentIndex;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Formatter;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r2;

        $r4 = r3.<ucar.nc2.ft.point.standard.Table$TableParentIndex: java.lang.String parentIndexName>;

        $r1[1] = $r4;

        $r5 = r3.<ucar.nc2.ft.point.standard.Table$TableParentIndex: java.util.Map indexMap>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[2] = $r6;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%sparentIndexName=%s, indexMap.size=%d%n", $r1);

        return;
    }

    public ucar.ma2.StructureDataIterator getStructureDataIterator(ucar.nc2.ft.point.standard.Cursor, int) throws java.io.IOException
    {
        ucar.nc2.ft.point.standard.Table$TableParentIndex r1;
        java.lang.Integer $r3;
        ucar.nc2.ft.point.StructureDataIteratorIndexed $r5;
        java.util.ArrayList $r7;
        java.util.List r8;
        ucar.nc2.dataset.StructureDS $r6;
        java.util.Map $r2;
        int $i0, i1;
        ucar.nc2.ft.point.standard.Cursor r0;
        java.lang.Object $r4;

        r1 := @this: ucar.nc2.ft.point.standard.Table$TableParentIndex;

        r0 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Cursor: int getParentRecnum()>();

        $r2 = r1.<ucar.nc2.ft.point.standard.Table$TableParentIndex: java.util.Map indexMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (java.util.List) $r4;

        if r8 != null goto label1;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r8 = $r7;

     label1:
        $r5 = new ucar.nc2.ft.point.StructureDataIteratorIndexed;

        $r6 = r1.<ucar.nc2.ft.point.standard.Table$TableParentIndex: ucar.nc2.dataset.StructureDS struct>;

        specialinvoke $r5.<ucar.nc2.ft.point.StructureDataIteratorIndexed: void <init>(ucar.nc2.Structure,java.util.List)>($r6, r8);

        return $r5;
    }

    public java.lang.String getName()
    {
        ucar.nc2.ft.point.standard.Table$TableParentIndex r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r3, $r6;

        r2 := @this: ucar.nc2.ft.point.standard.Table$TableParentIndex;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Indexed(");

        $r3 = r2.<ucar.nc2.ft.point.standard.Table$TableParentIndex: java.lang.String parentIndexName>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
