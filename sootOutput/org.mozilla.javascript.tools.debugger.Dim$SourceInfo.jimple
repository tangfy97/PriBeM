public class org.mozilla.javascript.tools.debugger.Dim$SourceInfo extends java.lang.Object
{
    private static final boolean[] EMPTY_BOOLEAN_ARRAY;
    private java.lang.String source;
    private java.lang.String url;
    private int minLine;
    private boolean[] breakableLines;
    private boolean[] breakpoints;
    private org.mozilla.javascript.tools.debugger.Dim$FunctionSource[] functionSources;

    private void <init>(java.lang.String, org.mozilla.javascript.debug.DebuggableScript[], java.lang.String)
    {
        java.lang.IllegalStateException $r23;
        int[][] r4;
        org.mozilla.javascript.debug.DebuggableScript[] r3;
        org.mozilla.javascript.tools.debugger.Dim$FunctionSource[] $r8, $r12;
        int[] r5, $r19, r20, r21;
        org.mozilla.javascript.debug.DebuggableScript $r9, $r18;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;
        org.mozilla.javascript.tools.debugger.Dim$FunctionSource $r24;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, $i21, $i23, $i25;
        java.lang.String r1, r2, $r10, $r15, r22;
        boolean[] $r6, $r7, $r13, $r16, $r17;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.mozilla.javascript.debug.DebuggableScript[];

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: java.lang.String source> = r1;

        r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: java.lang.String url> = r2;

        i0 = lengthof r3;

        r4 = newarray (int[])[i0];

        i8 = 0;

     label01:
        if i8 == i0 goto label02;

        $r18 = r3[i8];

        $r19 = interfaceinvoke $r18.<org.mozilla.javascript.debug.DebuggableScript: int[] getLineNumbers()>();

        r4[i8] = $r19;

        i8 = i8 + 1;

        goto label01;

     label02:
        i9 = 0;

        $i21 = (int) -1;

        i10 = $i21;

        r5 = newarray (int)[i0];

        i11 = 0;

     label03:
        if i11 == i0 goto label13;

        r20 = r4[i11];

        if r20 == null goto label04;

        $i4 = lengthof r20;

        if $i4 != 0 goto label05;

     label04:
        $i23 = (int) -1;

        r5[i11] = $i23;

        goto label12;

     label05:
        $i5 = r20[0];

        i12 = $i5;

        i13 = $i5;

        i14 = 1;

     label06:
        $i6 = lengthof r20;

        if i14 == $i6 goto label09;

        i7 = r20[i14];

        if i7 >= i13 goto label07;

        i13 = i7;

        goto label08;

     label07:
        if i7 <= i12 goto label08;

        i12 = i7;

     label08:
        i14 = i14 + 1;

        goto label06;

     label09:
        r5[i11] = i13;

        if i9 <= i10 goto label10;

        i9 = i13;

        i10 = i12;

        goto label12;

     label10:
        if i13 >= i9 goto label11;

        i9 = i13;

     label11:
        if i12 <= i10 goto label12;

        i10 = i12;

     label12:
        i11 = i11 + 1;

        goto label03;

     label13:
        if i9 <= i10 goto label14;

        $i25 = (int) -1;

        r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: int minLine> = $i25;

        $r16 = <org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] EMPTY_BOOLEAN_ARRAY>;

        r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakableLines> = $r16;

        $r17 = <org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] EMPTY_BOOLEAN_ARRAY>;

        r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints> = $r17;

        goto label19;

     label14:
        if i9 >= 0 goto label15;

        $r23 = new java.lang.IllegalStateException;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i9);

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r23;

     label15:
        r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: int minLine> = i9;

        i15 = i10 + 1;

        $r6 = newarray (boolean)[i15];

        r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakableLines> = $r6;

        $r7 = newarray (boolean)[i15];

        r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints> = $r7;

        i16 = 0;

     label16:
        if i16 == i0 goto label19;

        r21 = r4[i16];

        if r21 == null goto label18;

        $i2 = lengthof r21;

        if $i2 == 0 goto label18;

        i17 = 0;

     label17:
        $i3 = lengthof r21;

        if i17 == $i3 goto label18;

        i18 = r21[i17];

        $r13 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakableLines>;

        $r13[i18] = 1;

        i17 = i17 + 1;

        goto label17;

     label18:
        i16 = i16 + 1;

        goto label16;

     label19:
        $r8 = newarray (org.mozilla.javascript.tools.debugger.Dim$FunctionSource)[i0];

        r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: org.mozilla.javascript.tools.debugger.Dim$FunctionSource[] functionSources> = $r8;

        i19 = 0;

     label20:
        if i19 == i0 goto label22;

        $r9 = r3[i19];

        $r10 = interfaceinvoke $r9.<org.mozilla.javascript.debug.DebuggableScript: java.lang.String getFunctionName()>();

        r22 = $r10;

        if $r10 != null goto label21;

        r22 = "";

     label21:
        $r12 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: org.mozilla.javascript.tools.debugger.Dim$FunctionSource[] functionSources>;

        $r24 = new org.mozilla.javascript.tools.debugger.Dim$FunctionSource;

        $i1 = r5[i19];

        specialinvoke $r24.<org.mozilla.javascript.tools.debugger.Dim$FunctionSource: void <init>(org.mozilla.javascript.tools.debugger.Dim$SourceInfo,int,java.lang.String,org.mozilla.javascript.tools.debugger.Dim$1)>(r0, $i1, r22, null);

        $r12[i19] = $r24;

        i19 = i19 + 1;

        goto label20;

     label22:
        return;
    }

    public java.lang.String source()
    {
        java.lang.String $r1;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: java.lang.String source>;

        return $r1;
    }

    public java.lang.String url()
    {
        java.lang.String $r1;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: java.lang.String url>;

        return $r1;
    }

    public int functionSourcesTop()
    {
        int $i0;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;
        org.mozilla.javascript.tools.debugger.Dim$FunctionSource[] $r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: org.mozilla.javascript.tools.debugger.Dim$FunctionSource[] functionSources>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public org.mozilla.javascript.tools.debugger.Dim$FunctionSource functionSource(int)
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;
        org.mozilla.javascript.tools.debugger.Dim$FunctionSource[] $r1;
        int i0;
        org.mozilla.javascript.tools.debugger.Dim$FunctionSource $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: org.mozilla.javascript.tools.debugger.Dim$FunctionSource[] functionSources>;

        $r2 = $r1[i0];

        return $r2;
    }

    private void copyBreakpointsFrom(org.mozilla.javascript.tools.debugger.Dim$SourceInfo)
    {
        boolean[] $r1, $r3, $r4, $r5, $r6;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0, r2;
        int $i0, i1, i2;
        boolean $z0;

        r2 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        i1 = lengthof $r1;

        $r3 = r2.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        $i0 = lengthof $r3;

        if i1 <= $i0 goto label1;

        $r6 = r2.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        i1 = lengthof $r6;

     label1:
        i2 = 0;

     label2:
        if i2 == i1 goto label4;

        $r4 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        $z0 = $r4[i2];

        if $z0 == 0 goto label3;

        $r5 = r2.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        $r5[i2] = 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return;
    }

    public boolean breakableLine(int)
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;
        int i0, $i1;
        boolean[] $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakableLines>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakableLines>;

        $z0 = $r2[i0];

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean 'breakpoint'(int)
    {
        boolean[] $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;
        int i0, $i1;
        java.lang.String $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean breakableLine(int)>(i0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        $z1 = $r2[i0];

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean 'breakpoint'(int, boolean)
    {
        java.lang.Throwable $r6;
        boolean[] $r1, $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;
        int i0;
        java.lang.String $r5;
        boolean $z0, z1, $z2, z3;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        i0 := @parameter0: int;

        z1 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean breakableLine(int)>(i0);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        entermonitor $r1;

     label2:
        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        $z2 = $r2[i0];

        if $z2 == z1 goto label3;

        $r3 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        $r3[i0] = z1;

        z3 = 1;

        goto label4;

     label3:
        z3 = 0;

     label4:
        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r6;

     label8:
        return z3;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void removeAllBreakpoints()
    {
        java.lang.Throwable $r4;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;
        boolean[] $r1, $r2, $r3;
        int $i0, i1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        entermonitor $r1;

     label1:
        i1 = 0;

     label2:
        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        $i0 = lengthof $r2;

        if i1 == $i0 goto label3;

        $r3 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        $r3[i1] = 0;

        i1 = i1 + 1;

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void <init>(java.lang.String, org.mozilla.javascript.debug.DebuggableScript[], java.lang.String, org.mozilla.javascript.tools.debugger.Dim$1)
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;
        org.mozilla.javascript.debug.DebuggableScript[] r2;
        org.mozilla.javascript.tools.debugger.Dim$1 r4;
        java.lang.String r1, r3;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.mozilla.javascript.debug.DebuggableScript[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.mozilla.javascript.tools.debugger.Dim$1;

        specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: void <init>(java.lang.String,org.mozilla.javascript.debug.DebuggableScript[],java.lang.String)>(r1, r2, r3);

        return;
    }

    static void access$200(org.mozilla.javascript.tools.debugger.Dim$SourceInfo, org.mozilla.javascript.tools.debugger.Dim$SourceInfo)
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0, r1;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        r1 := @parameter1: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: void copyBreakpointsFrom(org.mozilla.javascript.tools.debugger.Dim$SourceInfo)>(r1);

        return;
    }

    static boolean[] access$2500(org.mozilla.javascript.tools.debugger.Dim$SourceInfo)
    {
        boolean[] $r1;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r0;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] breakpoints>;

        return $r1;
    }

    static void <clinit>()
    {
        boolean[] $r0;

        $r0 = newarray (boolean)[0];

        <org.mozilla.javascript.tools.debugger.Dim$SourceInfo: boolean[] EMPTY_BOOLEAN_ARRAY> = $r0;

        return;
    }
}
