final class com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2 extends java.lang.Object implements com.google.gxp.compiler.base.ImplementsVisitor
{
    final com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker this$0;

    void <init>(com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2 r0;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker r1;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2;

        r1 := @parameter0: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker;

        r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String visitUnboundImplementsDeclaration(com.google.gxp.compiler.base.UnboundImplementsDeclaration)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2 r2;
        com.google.gxp.compiler.base.UnboundImplementsDeclaration r1;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;

        r2 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundImplementsDeclaration;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitBoundImplementsDeclaration(com.google.gxp.compiler.base.BoundImplementsDeclaration)
    {
        com.google.gxp.compiler.base.BoundImplementsDeclaration r0;
        com.google.gxp.compiler.base.Implementable $r1;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r2;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2 r4;
        java.lang.String $r3;

        r4 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2;

        r0 := @parameter0: com.google.gxp.compiler.base.BoundImplementsDeclaration;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.BoundImplementsDeclaration: com.google.gxp.compiler.base.Implementable getImplementable()>();

        $r2 = interfaceinvoke $r1.<com.google.gxp.compiler.base.Implementable: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.base.TemplateName$FullyQualified: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String visitNativeImplementsDeclaration(com.google.gxp.compiler.base.NativeImplementsDeclaration)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker $r2;
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2 r0;
        java.lang.String $r4;
        com.google.gxp.compiler.base.NativeType $r3;
        com.google.gxp.compiler.base.NativeImplementsDeclaration r1;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.NativeImplementsDeclaration;

        $r2 = r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker this$0>;

        $r3 = virtualinvoke r1.<com.google.gxp.compiler.base.NativeImplementsDeclaration: com.google.gxp.compiler.base.NativeType getNativeType()>();

        $r4 = virtualinvoke $r2.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker: java.lang.String toJavaType(com.google.gxp.compiler.base.Type)>($r3);

        return $r4;
    }

    public volatile java.lang.Object visitNativeImplementsDeclaration(com.google.gxp.compiler.base.NativeImplementsDeclaration)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2 r0;
        java.lang.String $r2;
        com.google.gxp.compiler.base.NativeImplementsDeclaration r1;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.NativeImplementsDeclaration;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2: java.lang.String visitNativeImplementsDeclaration(com.google.gxp.compiler.base.NativeImplementsDeclaration)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBoundImplementsDeclaration(com.google.gxp.compiler.base.BoundImplementsDeclaration)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2 r0;
        com.google.gxp.compiler.base.BoundImplementsDeclaration r1;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundImplementsDeclaration;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2: java.lang.String visitBoundImplementsDeclaration(com.google.gxp.compiler.base.BoundImplementsDeclaration)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitUnboundImplementsDeclaration(com.google.gxp.compiler.base.UnboundImplementsDeclaration)
    {
        com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2 r0;
        com.google.gxp.compiler.base.UnboundImplementsDeclaration r1;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundImplementsDeclaration;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.BaseJavaCodeGenerator$TemplateWorker$2: java.lang.String visitUnboundImplementsDeclaration(com.google.gxp.compiler.base.UnboundImplementsDeclaration)>(r1);

        return $r2;
    }
}
