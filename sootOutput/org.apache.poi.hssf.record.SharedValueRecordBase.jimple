public abstract class org.apache.poi.hssf.record.SharedValueRecordBase extends org.apache.poi.hssf.record.StandardRecord
{
    private org.apache.poi.hssf.util.CellRangeAddress8Bit _range;

    protected void <init>(org.apache.poi.hssf.util.CellRangeAddress8Bit)
    {
        org.apache.poi.hssf.util.CellRangeAddress8Bit r1;
        org.apache.poi.hssf.record.SharedValueRecordBase r0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        r1 := @parameter0: org.apache.poi.hssf.util.CellRangeAddress8Bit;

        specialinvoke r0.<org.apache.poi.hssf.record.StandardRecord: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("range must be supplied.");

        throw $r2;

     label1:
        r0.<org.apache.poi.hssf.record.SharedValueRecordBase: org.apache.poi.hssf.util.CellRangeAddress8Bit _range> = r1;

        return;
    }

    protected void <init>()
    {
        org.apache.poi.hssf.util.CellRangeAddress8Bit $r1;
        org.apache.poi.hssf.record.SharedValueRecordBase r0;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        $r1 = new org.apache.poi.hssf.util.CellRangeAddress8Bit;

        specialinvoke $r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: void <init>(int,int,int,int)>(0, 0, 0, 0);

        specialinvoke r0.<org.apache.poi.hssf.record.SharedValueRecordBase: void <init>(org.apache.poi.hssf.util.CellRangeAddress8Bit)>($r1);

        return;
    }

    public void <init>(org.apache.poi.util.LittleEndianInput)
    {
        org.apache.poi.hssf.util.CellRangeAddress8Bit $r1;
        org.apache.poi.util.LittleEndianInput r2;
        org.apache.poi.hssf.record.SharedValueRecordBase r0;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        r2 := @parameter0: org.apache.poi.util.LittleEndianInput;

        specialinvoke r0.<org.apache.poi.hssf.record.StandardRecord: void <init>()>();

        $r1 = new org.apache.poi.hssf.util.CellRangeAddress8Bit;

        specialinvoke $r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: void <init>(org.apache.poi.util.LittleEndianInput)>(r2);

        r0.<org.apache.poi.hssf.record.SharedValueRecordBase: org.apache.poi.hssf.util.CellRangeAddress8Bit _range> = $r1;

        return;
    }

    public final org.apache.poi.hssf.util.CellRangeAddress8Bit getRange()
    {
        org.apache.poi.hssf.util.CellRangeAddress8Bit $r1;
        org.apache.poi.hssf.record.SharedValueRecordBase r0;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        $r1 = r0.<org.apache.poi.hssf.record.SharedValueRecordBase: org.apache.poi.hssf.util.CellRangeAddress8Bit _range>;

        return $r1;
    }

    public final int getFirstRow()
    {
        org.apache.poi.hssf.util.CellRangeAddress8Bit $r1;
        int $i0;
        org.apache.poi.hssf.record.SharedValueRecordBase r0;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        $r1 = r0.<org.apache.poi.hssf.record.SharedValueRecordBase: org.apache.poi.hssf.util.CellRangeAddress8Bit _range>;

        $i0 = virtualinvoke $r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getFirstRow()>();

        return $i0;
    }

    public final int getLastRow()
    {
        org.apache.poi.hssf.util.CellRangeAddress8Bit $r1;
        int $i0;
        org.apache.poi.hssf.record.SharedValueRecordBase r0;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        $r1 = r0.<org.apache.poi.hssf.record.SharedValueRecordBase: org.apache.poi.hssf.util.CellRangeAddress8Bit _range>;

        $i0 = virtualinvoke $r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getLastRow()>();

        return $i0;
    }

    public final int getFirstColumn()
    {
        org.apache.poi.hssf.record.SharedValueRecordBase r0;
        short $s1;
        org.apache.poi.hssf.util.CellRangeAddress8Bit $r1;
        int $i0, $i2;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        $r1 = r0.<org.apache.poi.hssf.record.SharedValueRecordBase: org.apache.poi.hssf.util.CellRangeAddress8Bit _range>;

        $i0 = virtualinvoke $r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getFirstColumn()>();

        $s1 = (short) $i0;

        $i2 = (int) $s1;

        return $i2;
    }

    public final int getLastColumn()
    {
        org.apache.poi.hssf.record.SharedValueRecordBase r0;
        short $s1;
        org.apache.poi.hssf.util.CellRangeAddress8Bit $r1;
        int $i0, $i2;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        $r1 = r0.<org.apache.poi.hssf.record.SharedValueRecordBase: org.apache.poi.hssf.util.CellRangeAddress8Bit _range>;

        $i0 = virtualinvoke $r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getLastColumn()>();

        $s1 = (short) $i0;

        $i2 = (int) $s1;

        return $i2;
    }

    protected int getDataSize()
    {
        int $i0, $i1;
        org.apache.poi.hssf.record.SharedValueRecordBase r0;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        $i0 = virtualinvoke r0.<org.apache.poi.hssf.record.SharedValueRecordBase: int getExtraDataSize()>();

        $i1 = 6 + $i0;

        return $i1;
    }

    protected abstract int getExtraDataSize();

    protected abstract void serializeExtraData(org.apache.poi.util.LittleEndianOutput);

    public void serialize(org.apache.poi.util.LittleEndianOutput)
    {
        org.apache.poi.hssf.util.CellRangeAddress8Bit $r2;
        org.apache.poi.hssf.record.SharedValueRecordBase r0;
        org.apache.poi.util.LittleEndianOutput r1;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        r1 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        $r2 = r0.<org.apache.poi.hssf.record.SharedValueRecordBase: org.apache.poi.hssf.util.CellRangeAddress8Bit _range>;

        virtualinvoke $r2.<org.apache.poi.hssf.util.CellRangeAddress8Bit: void serialize(org.apache.poi.util.LittleEndianOutput)>(r1);

        virtualinvoke r0.<org.apache.poi.hssf.record.SharedValueRecordBase: void serializeExtraData(org.apache.poi.util.LittleEndianOutput)>(r1);

        return;
    }

    public final boolean isInRange(int, int)
    {
        org.apache.poi.hssf.record.SharedValueRecordBase r0;
        org.apache.poi.hssf.util.CellRangeAddress8Bit r1;
        int $i0, i1, $i2, $i3, i4, $i5;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        i1 := @parameter0: int;

        i4 := @parameter1: int;

        r1 = r0.<org.apache.poi.hssf.record.SharedValueRecordBase: org.apache.poi.hssf.util.CellRangeAddress8Bit _range>;

        $i0 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getFirstRow()>();

        if $i0 > i1 goto label1;

        $i2 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getLastRow()>();

        if $i2 < i1 goto label1;

        $i3 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getFirstColumn()>();

        if $i3 > i4 goto label1;

        $i5 = virtualinvoke r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getLastColumn()>();

        if $i5 < i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isFirstCell(int, int)
    {
        org.apache.poi.hssf.record.SharedValueRecordBase r0;
        org.apache.poi.hssf.util.CellRangeAddress8Bit $r1;
        int $i0, i1, $i2, i3;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.SharedValueRecordBase;

        i1 := @parameter0: int;

        i3 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.record.SharedValueRecordBase: org.apache.poi.hssf.util.CellRangeAddress8Bit getRange()>();

        $i0 = virtualinvoke $r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getFirstRow()>();

        if $i0 != i1 goto label1;

        $i2 = virtualinvoke $r1.<org.apache.poi.hssf.util.CellRangeAddress8Bit: int getFirstColumn()>();

        if $i2 != i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
