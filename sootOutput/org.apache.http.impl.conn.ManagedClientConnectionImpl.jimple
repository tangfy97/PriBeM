class org.apache.http.impl.conn.ManagedClientConnectionImpl extends java.lang.Object implements org.apache.http.conn.ManagedClientConnection
{
    private final org.apache.http.conn.ClientConnectionManager manager;
    private final org.apache.http.conn.ClientConnectionOperator operator;
    private volatile org.apache.http.impl.conn.HttpPoolEntry poolEntry;
    private volatile boolean reusable;
    private volatile long duration;

    void <init>(org.apache.http.conn.ClientConnectionManager, org.apache.http.conn.ClientConnectionOperator, org.apache.http.impl.conn.HttpPoolEntry)
    {
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.conn.ClientConnectionManager r1;
        org.apache.http.conn.ClientConnectionOperator r2;
        org.apache.http.impl.conn.HttpPoolEntry r3;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r1 := @parameter0: org.apache.http.conn.ClientConnectionManager;

        r2 := @parameter1: org.apache.http.conn.ClientConnectionOperator;

        r3 := @parameter2: org.apache.http.impl.conn.HttpPoolEntry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection manager may not be null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection operator may not be null");

        throw $r5;

     label2:
        if r3 != null goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP pool entry may not be null");

        throw $r4;

     label3:
        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.ClientConnectionManager manager> = r1;

        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.ClientConnectionOperator operator> = r2;

        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry> = r3;

        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean reusable> = 0;

        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: long duration> = 9223372036854775807L;

        return;
    }

    org.apache.http.impl.conn.HttpPoolEntry getPoolEntry()
    {
        org.apache.http.impl.conn.HttpPoolEntry $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        return $r1;
    }

    org.apache.http.impl.conn.HttpPoolEntry detach()
    {
        org.apache.http.impl.conn.HttpPoolEntry r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r1 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry> = null;

        return r1;
    }

    public org.apache.http.conn.ClientConnectionManager getManager()
    {
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.conn.ClientConnectionManager $r1;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.ClientConnectionManager manager>;

        return $r1;
    }

    private org.apache.http.conn.OperatedClientConnection getConnection()
    {
        org.apache.http.conn.OperatedClientConnection $r3;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.impl.conn.HttpPoolEntry r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r1 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getConnection()>();

        $r3 = (org.apache.http.conn.OperatedClientConnection) $r2;

        return $r3;
    }

    private org.apache.http.conn.OperatedClientConnection ensureConnection()
    {
        org.apache.http.conn.OperatedClientConnection $r3;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.impl.conn.HttpPoolEntry r1;
        java.lang.Object $r2;
        org.apache.http.impl.conn.ConnectionShutdownException $r4;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r1 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if r1 != null goto label1;

        $r4 = new org.apache.http.impl.conn.ConnectionShutdownException;

        specialinvoke $r4.<org.apache.http.impl.conn.ConnectionShutdownException: void <init>()>();

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getConnection()>();

        $r3 = (org.apache.http.conn.OperatedClientConnection) $r2;

        return $r3;
    }

    private org.apache.http.impl.conn.HttpPoolEntry ensurePoolEntry()
    {
        org.apache.http.impl.conn.HttpPoolEntry r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.impl.conn.ConnectionShutdownException $r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r1 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if r1 != null goto label1;

        $r2 = new org.apache.http.impl.conn.ConnectionShutdownException;

        specialinvoke $r2.<org.apache.http.impl.conn.ConnectionShutdownException: void <init>()>();

        throw $r2;

     label1:
        return r1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.http.conn.OperatedClientConnection r3;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.conn.routing.RouteTracker $r4;
        org.apache.http.impl.conn.HttpPoolEntry r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r1 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getConnection()>();

        r3 = (org.apache.http.conn.OperatedClientConnection) $r2;

        $r4 = virtualinvoke r1.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        virtualinvoke $r4.<org.apache.http.conn.routing.RouteTracker: void reset()>();

        interfaceinvoke r3.<org.apache.http.conn.OperatedClientConnection: void close()>();

     label1:
        return;
    }

    public void shutdown() throws java.io.IOException
    {
        org.apache.http.conn.OperatedClientConnection r3;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.conn.routing.RouteTracker $r4;
        org.apache.http.impl.conn.HttpPoolEntry r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r1 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getConnection()>();

        r3 = (org.apache.http.conn.OperatedClientConnection) $r2;

        $r4 = virtualinvoke r1.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        virtualinvoke $r4.<org.apache.http.conn.routing.RouteTracker: void reset()>();

        interfaceinvoke r3.<org.apache.http.conn.OperatedClientConnection: void shutdown()>();

     label1:
        return;
    }

    public boolean isOpen()
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection getConnection()>();

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: boolean isOpen()>();

        return $z0;

     label1:
        return 0;
    }

    public boolean isStale()
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection getConnection()>();

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: boolean isStale()>();

        return $z0;

     label1:
        return 1;
    }

    public void setSocketTimeout(int)
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        int i0;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: void setSocketTimeout(int)>(i0);

        return;
    }

    public int getSocketTimeout()
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        int $i0;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $i0 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: int getSocketTimeout()>();

        return $i0;
    }

    public org.apache.http.HttpConnectionMetrics getMetrics()
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.HttpConnectionMetrics $r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $r2 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()>();

        return $r2;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: void flush()>();

        return;
    }

    public boolean isResponseAvailable(int) throws java.io.IOException
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $z0 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: boolean isResponseAvailable(int)>(i0);

        return $z0;
    }

    public void receiveResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.HttpResponse r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r2 := @parameter0: org.apache.http.HttpResponse;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)>(r2);

        return;
    }

    public org.apache.http.HttpResponse receiveResponseHeader() throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.HttpResponse $r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $r2 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: org.apache.http.HttpResponse receiveResponseHeader()>();

        return $r2;
    }

    public void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.HttpEntityEnclosingRequest r2;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r2 := @parameter0: org.apache.http.HttpEntityEnclosingRequest;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>(r2);

        return;
    }

    public void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.HttpRequest r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r2 := @parameter0: org.apache.http.HttpRequest;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>(r2);

        return;
    }

    public java.net.InetAddress getLocalAddress()
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        java.net.InetAddress $r2;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $r2 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: java.net.InetAddress getLocalAddress()>();

        return $r2;
    }

    public int getLocalPort()
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        int $i0;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $i0 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: int getLocalPort()>();

        return $i0;
    }

    public java.net.InetAddress getRemoteAddress()
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        java.net.InetAddress $r2;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $r2 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: java.net.InetAddress getRemoteAddress()>();

        return $r2;
    }

    public int getRemotePort()
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        int $i0;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $i0 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: int getRemotePort()>();

        return $i0;
    }

    public boolean isSecure()
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $z0 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: boolean isSecure()>();

        return $z0;
    }

    public javax.net.ssl.SSLSession getSSLSession()
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        java.net.Socket $r2;
        javax.net.ssl.SSLSession r4;
        javax.net.ssl.SSLSocket $r3;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        r4 = null;

        $r2 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: java.net.Socket getSocket()>();

        $z0 = $r2 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label1;

        $r3 = (javax.net.ssl.SSLSocket) $r2;

        r4 = virtualinvoke $r3.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

     label1:
        return r4;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.protocol.HttpContext $r3;
        java.lang.Object $r4;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r2 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $z0 = $r1 instanceof org.apache.http.protocol.HttpContext;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.http.protocol.HttpContext) $r1;

        $r4 = interfaceinvoke $r3.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>(r2);

        return $r4;

     label1:
        return null;
    }

    public java.lang.Object removeAttribute(java.lang.String)
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.protocol.HttpContext $r3;
        java.lang.Object $r4;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r2 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $z0 = $r1 instanceof org.apache.http.protocol.HttpContext;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.http.protocol.HttpContext) $r1;

        $r4 = interfaceinvoke $r3.<org.apache.http.protocol.HttpContext: java.lang.Object removeAttribute(java.lang.String)>(r2);

        return $r4;

     label1:
        return null;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.protocol.HttpContext $r4;
        java.lang.Object r3;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()>();

        $z0 = $r1 instanceof org.apache.http.protocol.HttpContext;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.http.protocol.HttpContext) $r1;

        interfaceinvoke $r4.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>(r2, r3);

     label1:
        return;
    }

    public org.apache.http.conn.routing.HttpRoute getRoute()
    {
        org.apache.http.impl.conn.HttpPoolEntry $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.conn.routing.HttpRoute $r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry ensurePoolEntry()>();

        $r2 = virtualinvoke $r1.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.HttpRoute getEffectiveRoute()>();

        return $r2;
    }

    public void open(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.lang.Throwable $r21, $r22;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r2;
        java.lang.IllegalStateException $r17;
        org.apache.http.conn.routing.RouteTracker $r5, $r15;
        org.apache.http.conn.routing.HttpRoute r0;
        java.io.InterruptedIOException $r16;
        java.net.InetAddress $r11;
        org.apache.http.conn.ClientConnectionOperator $r10;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r19, $r20;
        org.apache.http.conn.OperatedClientConnection r8;
        org.apache.http.protocol.HttpContext r12;
        org.apache.http.params.HttpParams r1;
        org.apache.http.impl.conn.HttpPoolEntry $r3, $r4, $r6, $r13, $r14;
        java.lang.Object $r7;
        org.apache.http.impl.conn.ConnectionShutdownException $r18;
        org.apache.http.HttpHost $r9, $r23;

        r2 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r0 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        r12 := @parameter1: org.apache.http.protocol.HttpContext;

        r1 := @parameter2: org.apache.http.params.HttpParams;

        if r0 != null goto label01;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Route may not be null");

        throw $r20;

     label01:
        if r1 != null goto label02;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r19;

     label02:
        entermonitor r2;

     label03:
        $r3 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r3 != null goto label04;

        $r18 = new org.apache.http.impl.conn.ConnectionShutdownException;

        specialinvoke $r18.<org.apache.http.impl.conn.ConnectionShutdownException: void <init>()>();

        throw $r18;

     label04:
        $r4 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r5 = virtualinvoke $r4.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        $z0 = virtualinvoke $r5.<org.apache.http.conn.routing.RouteTracker: boolean isConnected()>();

        if $z0 == 0 goto label05;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection already open");

        throw $r17;

     label05:
        $r6 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r7 = virtualinvoke $r6.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getConnection()>();

        r8 = (org.apache.http.conn.OperatedClientConnection) $r7;

        exitmonitor r2;

     label06:
        goto label09;

     label07:
        $r22 := @caughtexception;

        exitmonitor r2;

     label08:
        throw $r22;

     label09:
        $r9 = virtualinvoke r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()>();

        $r10 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.ClientConnectionOperator operator>;

        if $r9 == null goto label10;

        $r23 = $r9;

        goto label11;

     label10:
        $r23 = virtualinvoke r0.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()>();

     label11:
        $r11 = virtualinvoke r0.<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress getLocalAddress()>();

        interfaceinvoke $r10.<org.apache.http.conn.ClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>(r8, $r23, $r11, r12, r1);

        entermonitor r2;

     label12:
        $r13 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r13 != null goto label13;

        $r16 = new java.io.InterruptedIOException;

        specialinvoke $r16.<java.io.InterruptedIOException: void <init>()>();

        throw $r16;

     label13:
        $r14 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r15 = virtualinvoke $r14.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        if $r9 != null goto label14;

        $z2 = interfaceinvoke r8.<org.apache.http.conn.OperatedClientConnection: boolean isSecure()>();

        virtualinvoke $r15.<org.apache.http.conn.routing.RouteTracker: void connectTarget(boolean)>($z2);

        goto label15;

     label14:
        $z1 = interfaceinvoke r8.<org.apache.http.conn.OperatedClientConnection: boolean isSecure()>();

        virtualinvoke $r15.<org.apache.http.conn.routing.RouteTracker: void connectProxy(org.apache.http.HttpHost,boolean)>($r9, $z1);

     label15:
        exitmonitor r2;

     label16:
        goto label19;

     label17:
        $r21 := @caughtexception;

        exitmonitor r2;

     label18:
        throw $r21;

     label19:
        return;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label12 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void tunnelTarget(boolean, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.lang.Throwable $r17, $r18;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r1;
        java.lang.IllegalStateException $r13, $r14;
        org.apache.http.conn.routing.RouteTracker $r4, $r11;
        java.io.InterruptedIOException $r12;
        boolean $z0, $z1, z2;
        java.lang.IllegalArgumentException $r16;
        org.apache.http.conn.OperatedClientConnection r8;
        org.apache.http.params.HttpParams r0;
        org.apache.http.impl.conn.HttpPoolEntry $r2, $r3, $r6, $r9, $r10;
        java.lang.Object $r7;
        org.apache.http.impl.conn.ConnectionShutdownException $r15;
        org.apache.http.HttpHost $r5;

        r1 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        z2 := @parameter0: boolean;

        r0 := @parameter1: org.apache.http.params.HttpParams;

        if r0 != null goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r16;

     label01:
        entermonitor r1;

     label02:
        $r2 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r2 != null goto label03;

        $r15 = new org.apache.http.impl.conn.ConnectionShutdownException;

        specialinvoke $r15.<org.apache.http.impl.conn.ConnectionShutdownException: void <init>()>();

        throw $r15;

     label03:
        $r3 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r4 = virtualinvoke $r3.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        $z0 = virtualinvoke $r4.<org.apache.http.conn.routing.RouteTracker: boolean isConnected()>();

        if $z0 != 0 goto label04;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection not open");

        throw $r14;

     label04:
        $z1 = virtualinvoke $r4.<org.apache.http.conn.routing.RouteTracker: boolean isTunnelled()>();

        if $z1 == 0 goto label05;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is already tunnelled");

        throw $r13;

     label05:
        $r5 = virtualinvoke $r4.<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getTargetHost()>();

        $r6 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r7 = virtualinvoke $r6.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getConnection()>();

        r8 = (org.apache.http.conn.OperatedClientConnection) $r7;

        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r18 := @caughtexception;

        exitmonitor r1;

     label08:
        throw $r18;

     label09:
        interfaceinvoke r8.<org.apache.http.conn.OperatedClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>(null, $r5, z2, r0);

        entermonitor r1;

     label10:
        $r9 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r9 != null goto label11;

        $r12 = new java.io.InterruptedIOException;

        specialinvoke $r12.<java.io.InterruptedIOException: void <init>()>();

        throw $r12;

     label11:
        $r10 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r11 = virtualinvoke $r10.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        virtualinvoke $r11.<org.apache.http.conn.routing.RouteTracker: void tunnelTarget(boolean)>(z2);

        exitmonitor r1;

     label12:
        goto label15;

     label13:
        $r17 := @caughtexception;

        exitmonitor r1;

     label14:
        throw $r17;

     label15:
        return;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void tunnelProxy(org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.lang.Throwable $r17, $r18;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r2;
        java.lang.IllegalStateException $r13;
        org.apache.http.conn.routing.RouteTracker $r5, $r11;
        java.io.InterruptedIOException $r12;
        boolean $z0, z1;
        java.lang.IllegalArgumentException $r15, $r16;
        org.apache.http.conn.OperatedClientConnection r8;
        org.apache.http.params.HttpParams r1;
        org.apache.http.impl.conn.HttpPoolEntry $r3, $r4, $r6, $r9, $r10;
        java.lang.Object $r7;
        org.apache.http.impl.conn.ConnectionShutdownException $r14;
        org.apache.http.HttpHost r0;

        r2 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r0 := @parameter0: org.apache.http.HttpHost;

        z1 := @parameter1: boolean;

        r1 := @parameter2: org.apache.http.params.HttpParams;

        if r0 != null goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Next proxy amy not be null");

        throw $r16;

     label01:
        if r1 != null goto label02;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r15;

     label02:
        entermonitor r2;

     label03:
        $r3 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r3 != null goto label04;

        $r14 = new org.apache.http.impl.conn.ConnectionShutdownException;

        specialinvoke $r14.<org.apache.http.impl.conn.ConnectionShutdownException: void <init>()>();

        throw $r14;

     label04:
        $r4 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r5 = virtualinvoke $r4.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        $z0 = virtualinvoke $r5.<org.apache.http.conn.routing.RouteTracker: boolean isConnected()>();

        if $z0 != 0 goto label05;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection not open");

        throw $r13;

     label05:
        $r6 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r7 = virtualinvoke $r6.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getConnection()>();

        r8 = (org.apache.http.conn.OperatedClientConnection) $r7;

        exitmonitor r2;

     label06:
        goto label09;

     label07:
        $r18 := @caughtexception;

        exitmonitor r2;

     label08:
        throw $r18;

     label09:
        interfaceinvoke r8.<org.apache.http.conn.OperatedClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>(null, r0, z1, r1);

        entermonitor r2;

     label10:
        $r9 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r9 != null goto label11;

        $r12 = new java.io.InterruptedIOException;

        specialinvoke $r12.<java.io.InterruptedIOException: void <init>()>();

        throw $r12;

     label11:
        $r10 = r2.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r11 = virtualinvoke $r10.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        virtualinvoke $r11.<org.apache.http.conn.routing.RouteTracker: void tunnelProxy(org.apache.http.HttpHost,boolean)>(r0, z1);

        exitmonitor r2;

     label12:
        goto label15;

     label13:
        $r17 := @caughtexception;

        exitmonitor r2;

     label14:
        throw $r17;

     label15:
        return;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void layerProtocol(org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.lang.Throwable $r20, $r21;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r1;
        java.lang.IllegalStateException $r15, $r16, $r17;
        org.apache.http.conn.routing.RouteTracker $r4, $r13;
        java.io.InterruptedIOException $r14;
        org.apache.http.conn.ClientConnectionOperator $r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r19;
        org.apache.http.conn.OperatedClientConnection r8;
        org.apache.http.protocol.HttpContext r9;
        org.apache.http.params.HttpParams r0;
        org.apache.http.impl.conn.HttpPoolEntry $r2, $r3, $r6, $r11, $r12;
        java.lang.Object $r7;
        org.apache.http.impl.conn.ConnectionShutdownException $r18;
        org.apache.http.HttpHost $r5;

        r1 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r9 := @parameter0: org.apache.http.protocol.HttpContext;

        r0 := @parameter1: org.apache.http.params.HttpParams;

        if r0 != null goto label01;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r19;

     label01:
        entermonitor r1;

     label02:
        $r2 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r2 != null goto label03;

        $r18 = new org.apache.http.impl.conn.ConnectionShutdownException;

        specialinvoke $r18.<org.apache.http.impl.conn.ConnectionShutdownException: void <init>()>();

        throw $r18;

     label03:
        $r3 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r4 = virtualinvoke $r3.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        $z0 = virtualinvoke $r4.<org.apache.http.conn.routing.RouteTracker: boolean isConnected()>();

        if $z0 != 0 goto label04;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection not open");

        throw $r17;

     label04:
        $z1 = virtualinvoke $r4.<org.apache.http.conn.routing.RouteTracker: boolean isTunnelled()>();

        if $z1 != 0 goto label05;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Protocol layering without a tunnel not supported");

        throw $r16;

     label05:
        $z2 = virtualinvoke $r4.<org.apache.http.conn.routing.RouteTracker: boolean isLayered()>();

        if $z2 == 0 goto label06;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Multiple protocol layering not supported");

        throw $r15;

     label06:
        $r5 = virtualinvoke $r4.<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getTargetHost()>();

        $r6 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r7 = virtualinvoke $r6.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getConnection()>();

        r8 = (org.apache.http.conn.OperatedClientConnection) $r7;

        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r21 := @caughtexception;

        exitmonitor r1;

     label09:
        throw $r21;

     label10:
        $r10 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.ClientConnectionOperator operator>;

        interfaceinvoke $r10.<org.apache.http.conn.ClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>(r8, $r5, r9, r0);

        entermonitor r1;

     label11:
        $r11 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r11 != null goto label12;

        $r14 = new java.io.InterruptedIOException;

        specialinvoke $r14.<java.io.InterruptedIOException: void <init>()>();

        throw $r14;

     label12:
        $r12 = r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r13 = virtualinvoke $r12.<org.apache.http.impl.conn.HttpPoolEntry: org.apache.http.conn.routing.RouteTracker getTracker()>();

        $z3 = interfaceinvoke r8.<org.apache.http.conn.OperatedClientConnection: boolean isSecure()>();

        virtualinvoke $r13.<org.apache.http.conn.routing.RouteTracker: void layerProtocol(boolean)>($z3);

        exitmonitor r1;

     label13:
        goto label16;

     label14:
        $r20 := @caughtexception;

        exitmonitor r1;

     label15:
        throw $r20;

     label16:
        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label11 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public java.lang.Object getState()
    {
        org.apache.http.impl.conn.HttpPoolEntry $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry ensurePoolEntry()>();

        $r2 = virtualinvoke $r1.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getState()>();

        return $r2;
    }

    public void setState(java.lang.Object)
    {
        org.apache.http.impl.conn.HttpPoolEntry $r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        java.lang.Object r2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry ensurePoolEntry()>();

        virtualinvoke $r1.<org.apache.http.impl.conn.HttpPoolEntry: void setState(java.lang.Object)>(r2);

        return;
    }

    public void markReusable()
    {
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean reusable> = 1;

        return;
    }

    public void unmarkReusable()
    {
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean reusable> = 0;

        return;
    }

    public boolean isMarkedReusable()
    {
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $z0 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean reusable>;

        return $z0;
    }

    public void setIdleDuration(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r1;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        byte $b1;
        int $i3;
        long l0, $l2;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $b1 = l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label1;

        $l2 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: long duration> = $l2;

        goto label2;

     label1:
        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: long duration> = -1L;

     label2:
        return;
    }

    public void releaseConnection()
    {
        java.util.concurrent.TimeUnit $r2;
        java.lang.Throwable $r4;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.conn.ClientConnectionManager $r3;
        org.apache.http.impl.conn.HttpPoolEntry $r1;
        long $l0;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        entermonitor r0;

     label1:
        $r1 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r1 != null goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.ClientConnectionManager manager>;

        $l0 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: long duration>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r3.<org.apache.http.conn.ClientConnectionManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)>(r0, $l0, $r2);

        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry> = null;

        exitmonitor r0;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        exitmonitor r0;

     label6:
        throw $r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void abortConnection()
    {
        java.lang.Throwable $r7;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r0;
        org.apache.http.conn.ClientConnectionManager $r6;
        long $l0;
        java.io.IOException $r8;
        org.apache.http.conn.OperatedClientConnection r4;
        java.util.concurrent.TimeUnit $r5;
        org.apache.http.impl.conn.HttpPoolEntry $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.http.impl.conn.ManagedClientConnectionImpl;

        entermonitor r0;

     label01:
        $r1 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        if $r1 != null goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean reusable> = 0;

        $r2 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry>;

        $r3 = virtualinvoke $r2.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getConnection()>();

        r4 = (org.apache.http.conn.OperatedClientConnection) $r3;

     label04:
        interfaceinvoke r4.<org.apache.http.conn.OperatedClientConnection: void shutdown()>();

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

     label07:
        $r6 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.ClientConnectionManager manager>;

        $l0 = r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: long duration>;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r6.<org.apache.http.conn.ClientConnectionManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)>(r0, $l0, $r5);

        r0.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry poolEntry> = null;

        exitmonitor r0;

     label08:
        goto label11;

     label09:
        $r7 := @caughtexception;

        exitmonitor r0;

     label10:
        throw $r7;

     label11:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }
}
