public class javax.activation.DataHandler extends java.lang.Object implements java.awt.datatransfer.Transferable
{
    private final javax.activation.DataSource ds;
    private final java.awt.datatransfer.DataFlavor flavor;
    private javax.activation.CommandMap commandMap;
    private javax.activation.DataContentHandler dch;
    private javax.activation.DataContentHandlerFactory originalFactory;
    private static javax.activation.DataContentHandlerFactory factory;

    public void <init>(javax.activation.DataSource)
    {
        java.lang.Throwable $r5;
        javax.activation.DataContentHandlerFactory $r1;
        javax.activation.ActivationDataFlavor $r3;
        javax.activation.DataSource r2;
        java.lang.String $r4;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        r2 := @parameter0: javax.activation.DataSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        entermonitor class "Ljavax/activation/DataHandler;";

     label1:
        $r1 = <javax.activation.DataHandler: javax.activation.DataContentHandlerFactory factory>;

        r0.<javax.activation.DataHandler: javax.activation.DataContentHandlerFactory originalFactory> = $r1;

        exitmonitor class "Ljavax/activation/DataHandler;";

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor class "Ljavax/activation/DataHandler;";

     label4:
        throw $r5;

     label5:
        r0.<javax.activation.DataHandler: javax.activation.DataSource ds> = r2;

        $r3 = new javax.activation.ActivationDataFlavor;

        $r4 = interfaceinvoke r2.<javax.activation.DataSource: java.lang.String getContentType()>();

        specialinvoke $r3.<javax.activation.ActivationDataFlavor: void <init>(java.lang.String,java.lang.String)>($r4, null);

        r0.<javax.activation.DataHandler: java.awt.datatransfer.DataFlavor flavor> = $r3;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void <init>(java.lang.Object, java.lang.String)
    {
        java.lang.Throwable $r7;
        javax.activation.DataContentHandlerFactory $r1;
        javax.activation.ActivationDataFlavor $r5;
        javax.activation.DataHandler r0;
        java.lang.Object r3;
        java.lang.Class $r6;
        java.lang.String r4;
        javax.activation.DataHandler$ObjectDataSource $r2;

        r0 := @this: javax.activation.DataHandler;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        entermonitor class "Ljavax/activation/DataHandler;";

     label1:
        $r1 = <javax.activation.DataHandler: javax.activation.DataContentHandlerFactory factory>;

        r0.<javax.activation.DataHandler: javax.activation.DataContentHandlerFactory originalFactory> = $r1;

        exitmonitor class "Ljavax/activation/DataHandler;";

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        exitmonitor class "Ljavax/activation/DataHandler;";

     label4:
        throw $r7;

     label5:
        $r2 = new javax.activation.DataHandler$ObjectDataSource;

        specialinvoke $r2.<javax.activation.DataHandler$ObjectDataSource: void <init>(javax.activation.DataHandler,java.lang.Object,java.lang.String)>(r0, r3, r4);

        r0.<javax.activation.DataHandler: javax.activation.DataSource ds> = $r2;

        $r5 = new javax.activation.ActivationDataFlavor;

        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r5.<javax.activation.ActivationDataFlavor: void <init>(java.lang.Class,java.lang.String)>($r6, null);

        r0.<javax.activation.DataHandler: java.awt.datatransfer.DataFlavor flavor> = $r5;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void <init>(java.net.URL)
    {
        java.lang.Throwable $r7;
        javax.activation.DataContentHandlerFactory $r1;
        javax.activation.ActivationDataFlavor $r4;
        java.net.URL r3;
        javax.activation.DataHandler r0;
        javax.activation.URLDataSource $r2;
        javax.activation.DataSource $r5;
        java.lang.String $r6;

        r0 := @this: javax.activation.DataHandler;

        r3 := @parameter0: java.net.URL;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        entermonitor class "Ljavax/activation/DataHandler;";

     label1:
        $r1 = <javax.activation.DataHandler: javax.activation.DataContentHandlerFactory factory>;

        r0.<javax.activation.DataHandler: javax.activation.DataContentHandlerFactory originalFactory> = $r1;

        exitmonitor class "Ljavax/activation/DataHandler;";

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        exitmonitor class "Ljavax/activation/DataHandler;";

     label4:
        throw $r7;

     label5:
        $r2 = new javax.activation.URLDataSource;

        specialinvoke $r2.<javax.activation.URLDataSource: void <init>(java.net.URL)>(r3);

        r0.<javax.activation.DataHandler: javax.activation.DataSource ds> = $r2;

        $r4 = new javax.activation.ActivationDataFlavor;

        $r5 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r6 = interfaceinvoke $r5.<javax.activation.DataSource: java.lang.String getContentType()>();

        specialinvoke $r4.<javax.activation.ActivationDataFlavor: void <init>(java.lang.String,java.lang.String)>($r6, null);

        r0.<javax.activation.DataHandler: java.awt.datatransfer.DataFlavor flavor> = $r4;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public javax.activation.DataSource getDataSource()
    {
        javax.activation.DataSource $r1;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        $r1 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        return $r1;
    }

    public java.lang.String getName()
    {
        javax.activation.DataSource $r1;
        java.lang.String $r2;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        $r1 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r2 = interfaceinvoke $r1.<javax.activation.DataSource: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.String getContentType()
    {
        javax.activation.DataSource $r1;
        java.lang.String $r2;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        $r1 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r2 = interfaceinvoke $r1.<javax.activation.DataSource: java.lang.String getContentType()>();

        return $r2;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        javax.activation.DataSource $r1;
        javax.activation.DataHandler r0;
        java.io.InputStream $r2;

        r0 := @this: javax.activation.DataHandler;

        $r1 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r2 = interfaceinvoke $r1.<javax.activation.DataSource: java.io.InputStream getInputStream()>();

        return $r2;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.lang.Throwable $r10;
        byte[] r12;
        javax.activation.DataHandler r0;
        int $i0, $i2;
        javax.activation.DataContentHandler $r5;
        java.lang.String $r7, $r9;
        javax.activation.DataHandler$ObjectDataSource r11;
        boolean $z0;
        java.io.OutputStream r3;
        javax.activation.DataSource $r1, $r4;
        java.lang.Object $r6;
        javax.activation.UnsupportedDataTypeException $r13;
        java.io.InputStream $r2;

        r0 := @this: javax.activation.DataHandler;

        r3 := @parameter0: java.io.OutputStream;

        $r1 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $z0 = $r1 instanceof javax.activation.DataHandler$ObjectDataSource;

        if $z0 == 0 goto label2;

        $r4 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        r11 = (javax.activation.DataHandler$ObjectDataSource) $r4;

        $r5 = specialinvoke r0.<javax.activation.DataHandler: javax.activation.DataContentHandler getDataContentHandler()>();

        if $r5 != null goto label1;

        $r13 = new javax.activation.UnsupportedDataTypeException;

        $r9 = staticinvoke <javax.activation.DataHandler$ObjectDataSource: java.lang.String access$000(javax.activation.DataHandler$ObjectDataSource)>(r11);

        specialinvoke $r13.<javax.activation.UnsupportedDataTypeException: void <init>(java.lang.String)>($r9);

        throw $r13;

     label1:
        $r6 = staticinvoke <javax.activation.DataHandler$ObjectDataSource: java.lang.Object access$100(javax.activation.DataHandler$ObjectDataSource)>(r11);

        $r7 = staticinvoke <javax.activation.DataHandler$ObjectDataSource: java.lang.String access$000(javax.activation.DataHandler$ObjectDataSource)>(r11);

        interfaceinvoke $r5.<javax.activation.DataContentHandler: void writeTo(java.lang.Object,java.lang.String,java.io.OutputStream)>($r6, $r7, r3);

        goto label7;

     label2:
        r12 = newarray (byte)[1024];

        $r2 = virtualinvoke r0.<javax.activation.DataHandler: java.io.InputStream getInputStream()>();

     label3:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r12);

        $i2 = (int) -1;

        if $i0 == $i2 goto label4;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r12, 0, $i0);

        goto label3;

     label4:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label7;

     label5:
        $r10 := @caughtexception;

     label6:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        throw $r10;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        java.io.OutputStream $r2;
        javax.activation.DataSource $r1;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        $r1 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r2 = interfaceinvoke $r1.<javax.activation.DataSource: java.io.OutputStream getOutputStream()>();

        return $r2;
    }

    public synchronized java.awt.datatransfer.DataFlavor[] getTransferDataFlavors()
    {
        java.awt.datatransfer.DataFlavor[] $r2;
        javax.activation.DataContentHandler $r1;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        $r1 = specialinvoke r0.<javax.activation.DataHandler: javax.activation.DataContentHandler getDataContentHandler()>();

        $r2 = interfaceinvoke $r1.<javax.activation.DataContentHandler: java.awt.datatransfer.DataFlavor[] getTransferDataFlavors()>();

        return $r2;
    }

    public boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor)
    {
        java.awt.datatransfer.DataFlavor r2, r3;
        java.awt.datatransfer.DataFlavor[] $r1;
        int $i0, i1;
        javax.activation.DataHandler r0;
        boolean $z0;

        r0 := @this: javax.activation.DataHandler;

        r3 := @parameter0: java.awt.datatransfer.DataFlavor;

        $r1 = virtualinvoke r0.<javax.activation.DataHandler: java.awt.datatransfer.DataFlavor[] getTransferDataFlavors()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        r2 = $r1[i1];

        $z0 = virtualinvoke r2.<java.awt.datatransfer.DataFlavor: boolean equals(java.awt.datatransfer.DataFlavor)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor) throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException
    {
        java.awt.datatransfer.UnsupportedFlavorException $r4;
        java.awt.datatransfer.DataFlavor r2, $r3;
        javax.activation.DataHandler r0;
        javax.activation.DataSource $r5, $r6, $r8, $r11;
        java.lang.Object $r10, $r12;
        javax.activation.DataContentHandler $r1;
        javax.activation.DataHandler$ObjectDataSource $r9;
        boolean $z0, $z1;
        java.io.InputStream $r7;

        r0 := @this: javax.activation.DataHandler;

        r2 := @parameter0: java.awt.datatransfer.DataFlavor;

        $r1 = specialinvoke r0.<javax.activation.DataHandler: javax.activation.DataContentHandler getDataContentHandler()>();

        if $r1 == null goto label1;

        $r11 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r12 = interfaceinvoke $r1.<javax.activation.DataContentHandler: java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor,javax.activation.DataSource)>(r2, $r11);

        return $r12;

     label1:
        $r3 = r0.<javax.activation.DataHandler: java.awt.datatransfer.DataFlavor flavor>;

        $z0 = virtualinvoke $r3.<java.awt.datatransfer.DataFlavor: boolean match(java.awt.datatransfer.DataFlavor)>(r2);

        if $z0 == 0 goto label3;

        $r5 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $z1 = $r5 instanceof javax.activation.DataHandler$ObjectDataSource;

        if $z1 == 0 goto label2;

        $r8 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r9 = (javax.activation.DataHandler$ObjectDataSource) $r8;

        $r10 = staticinvoke <javax.activation.DataHandler$ObjectDataSource: java.lang.Object access$100(javax.activation.DataHandler$ObjectDataSource)>($r9);

        return $r10;

     label2:
        $r6 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r7 = interfaceinvoke $r6.<javax.activation.DataSource: java.io.InputStream getInputStream()>();

        return $r7;

     label3:
        $r4 = new java.awt.datatransfer.UnsupportedFlavorException;

        specialinvoke $r4.<java.awt.datatransfer.UnsupportedFlavorException: void <init>(java.awt.datatransfer.DataFlavor)>(r2);

        throw $r4;
    }

    public javax.activation.CommandInfo[] getPreferredCommands()
    {
        javax.activation.CommandMap $r1;
        javax.activation.CommandInfo[] $r4;
        javax.activation.DataSource $r2;
        java.lang.String $r3;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        $r1 = specialinvoke r0.<javax.activation.DataHandler: javax.activation.CommandMap getCommandMap()>();

        $r2 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r3 = interfaceinvoke $r2.<javax.activation.DataSource: java.lang.String getContentType()>();

        $r4 = virtualinvoke $r1.<javax.activation.CommandMap: javax.activation.CommandInfo[] getPreferredCommands(java.lang.String)>($r3);

        return $r4;
    }

    public javax.activation.CommandInfo[] getAllCommands()
    {
        javax.activation.CommandMap $r1;
        javax.activation.CommandInfo[] $r4;
        javax.activation.DataSource $r2;
        java.lang.String $r3;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        $r1 = specialinvoke r0.<javax.activation.DataHandler: javax.activation.CommandMap getCommandMap()>();

        $r2 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r3 = interfaceinvoke $r2.<javax.activation.DataSource: java.lang.String getContentType()>();

        $r4 = virtualinvoke $r1.<javax.activation.CommandMap: javax.activation.CommandInfo[] getAllCommands(java.lang.String)>($r3);

        return $r4;
    }

    public javax.activation.CommandInfo getCommand(java.lang.String)
    {
        javax.activation.CommandMap $r1;
        javax.activation.CommandInfo $r5;
        javax.activation.DataSource $r2;
        java.lang.String $r3, r4;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        r4 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<javax.activation.DataHandler: javax.activation.CommandMap getCommandMap()>();

        $r2 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r3 = interfaceinvoke $r2.<javax.activation.DataSource: java.lang.String getContentType()>();

        $r5 = virtualinvoke $r1.<javax.activation.CommandMap: javax.activation.CommandInfo getCommand(java.lang.String,java.lang.String)>($r3, r4);

        return $r5;
    }

    public java.lang.Object getContent() throws java.io.IOException
    {
        javax.activation.DataHandler r0;
        javax.activation.DataSource $r1, $r3, $r5, $r7;
        java.lang.Object $r6, $r9;
        javax.activation.DataContentHandler $r2;
        javax.activation.DataHandler$ObjectDataSource $r8;
        boolean $z0;
        java.io.InputStream $r4;

        r0 := @this: javax.activation.DataHandler;

        $r1 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $z0 = $r1 instanceof javax.activation.DataHandler$ObjectDataSource;

        if $z0 == 0 goto label1;

        $r7 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r8 = (javax.activation.DataHandler$ObjectDataSource) $r7;

        $r9 = staticinvoke <javax.activation.DataHandler$ObjectDataSource: java.lang.Object access$100(javax.activation.DataHandler$ObjectDataSource)>($r8);

        return $r9;

     label1:
        $r2 = specialinvoke r0.<javax.activation.DataHandler: javax.activation.DataContentHandler getDataContentHandler()>();

        if $r2 == null goto label2;

        $r5 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r6 = interfaceinvoke $r2.<javax.activation.DataContentHandler: java.lang.Object getContent(javax.activation.DataSource)>($r5);

        return $r6;

     label2:
        $r3 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r4 = interfaceinvoke $r3.<javax.activation.DataSource: java.io.InputStream getInputStream()>();

        return $r4;
    }

    public java.lang.Object getBean(javax.activation.CommandInfo)
    {
        javax.activation.CommandInfo r0;
        java.lang.Class $r2;
        java.lang.Object $r4;
        java.lang.ClassNotFoundException $r5;
        java.io.IOException $r6;
        java.lang.ClassLoader $r3;
        javax.activation.DataHandler r1;

        r1 := @this: javax.activation.DataHandler;

        r0 := @parameter0: javax.activation.CommandInfo;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke r0.<javax.activation.CommandInfo: java.lang.Object getCommandObject(javax.activation.DataHandler,java.lang.ClassLoader)>(r1, $r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        return null;

     label4:
        $r5 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }

    public synchronized void setCommandMap(javax.activation.CommandMap)
    {
        javax.activation.CommandMap r1;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        r1 := @parameter0: javax.activation.CommandMap;

        r0.<javax.activation.DataHandler: javax.activation.CommandMap commandMap> = r1;

        r0.<javax.activation.DataHandler: javax.activation.DataContentHandler dch> = null;

        return;
    }

    private synchronized javax.activation.CommandMap getCommandMap()
    {
        javax.activation.CommandMap $r1, $r2;
        javax.activation.DataHandler r0;

        r0 := @this: javax.activation.DataHandler;

        $r1 = r0.<javax.activation.DataHandler: javax.activation.CommandMap commandMap>;

        if $r1 == null goto label1;

        $r2 = r0.<javax.activation.DataHandler: javax.activation.CommandMap commandMap>;

        goto label2;

     label1:
        $r2 = staticinvoke <javax.activation.CommandMap: javax.activation.CommandMap getDefaultCommandMap()>();

     label2:
        return $r2;
    }

    private synchronized javax.activation.DataContentHandler getDataContentHandler()
    {
        java.lang.Throwable $r16;
        javax.activation.DataContentHandlerFactory $r1, $r2, $r14, $r15;
        javax.activation.DataHandler r0;
        javax.activation.CommandMap $r8, $r9, $r11;
        javax.activation.DataContentHandler $r3, $r7, $r10, $r12, $r13, $r17;
        java.lang.String $r5, $r6;
        javax.activation.DataSource $r4;

        r0 := @this: javax.activation.DataHandler;

        entermonitor class "Ljavax/activation/DataHandler;";

     label1:
        $r2 = <javax.activation.DataHandler: javax.activation.DataContentHandlerFactory factory>;

        $r1 = r0.<javax.activation.DataHandler: javax.activation.DataContentHandlerFactory originalFactory>;

        if $r2 == $r1 goto label2;

        r0.<javax.activation.DataHandler: javax.activation.DataContentHandler dch> = null;

        $r14 = <javax.activation.DataHandler: javax.activation.DataContentHandlerFactory factory>;

        r0.<javax.activation.DataHandler: javax.activation.DataContentHandlerFactory originalFactory> = $r14;

     label2:
        $r15 = r0.<javax.activation.DataHandler: javax.activation.DataContentHandlerFactory originalFactory>;

        exitmonitor class "Ljavax/activation/DataHandler;";

     label3:
        goto label6;

     label4:
        $r16 := @caughtexception;

        exitmonitor class "Ljavax/activation/DataHandler;";

     label5:
        throw $r16;

     label6:
        $r3 = r0.<javax.activation.DataHandler: javax.activation.DataContentHandler dch>;

        if $r3 != null goto label9;

        $r4 = r0.<javax.activation.DataHandler: javax.activation.DataSource ds>;

        $r5 = interfaceinvoke $r4.<javax.activation.DataSource: java.lang.String getContentType()>();

        $r6 = specialinvoke r0.<javax.activation.DataHandler: java.lang.String getMimeType(java.lang.String)>($r5);

        if $r15 == null goto label7;

        $r13 = interfaceinvoke $r15.<javax.activation.DataContentHandlerFactory: javax.activation.DataContentHandler createDataContentHandler(java.lang.String)>($r6);

        r0.<javax.activation.DataHandler: javax.activation.DataContentHandler dch> = $r13;

     label7:
        $r7 = r0.<javax.activation.DataHandler: javax.activation.DataContentHandler dch>;

        if $r7 != null goto label9;

        $r8 = r0.<javax.activation.DataHandler: javax.activation.CommandMap commandMap>;

        if $r8 == null goto label8;

        $r11 = r0.<javax.activation.DataHandler: javax.activation.CommandMap commandMap>;

        $r12 = virtualinvoke $r11.<javax.activation.CommandMap: javax.activation.DataContentHandler createDataContentHandler(java.lang.String)>($r6);

        r0.<javax.activation.DataHandler: javax.activation.DataContentHandler dch> = $r12;

        goto label9;

     label8:
        $r9 = staticinvoke <javax.activation.CommandMap: javax.activation.CommandMap getDefaultCommandMap()>();

        $r10 = virtualinvoke $r9.<javax.activation.CommandMap: javax.activation.DataContentHandler createDataContentHandler(java.lang.String)>($r6);

        r0.<javax.activation.DataHandler: javax.activation.DataContentHandler dch> = $r10;

     label9:
        $r17 = r0.<javax.activation.DataHandler: javax.activation.DataContentHandler dch>;

        return $r17;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private java.lang.String getMimeType(java.lang.String)
    {
        javax.activation.MimeTypeParseException $r3;
        javax.activation.MimeType $r0;
        java.lang.String r1, $r2;
        javax.activation.DataHandler r4;

        r4 := @this: javax.activation.DataHandler;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new javax.activation.MimeType;

        specialinvoke $r0.<javax.activation.MimeType: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<javax.activation.MimeType: java.lang.String getBaseType()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return r1;

        catch javax.activation.MimeTypeParseException from label1 to label2 with label3;
    }

    public static synchronized void setDataContentHandlerFactory(javax.activation.DataContentHandlerFactory)
    {
        javax.activation.DataContentHandlerFactory $r0, r2;
        java.lang.Error $r3;
        java.lang.SecurityManager $r1;

        r2 := @parameter0: javax.activation.DataContentHandlerFactory;

        $r0 = <javax.activation.DataHandler: javax.activation.DataContentHandlerFactory factory>;

        if $r0 == null goto label1;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("javax.activation.DataHandler.setDataContentHandlerFactory has already been defined");

        throw $r3;

     label1:
        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r1 == null goto label2;

        virtualinvoke $r1.<java.lang.SecurityManager: void checkSetFactory()>();

     label2:
        <javax.activation.DataHandler: javax.activation.DataContentHandlerFactory factory> = r2;

        return;
    }

    static javax.activation.DataContentHandler access$200(javax.activation.DataHandler)
    {
        javax.activation.DataContentHandler $r1;
        javax.activation.DataHandler r0;

        r0 := @parameter0: javax.activation.DataHandler;

        $r1 = specialinvoke r0.<javax.activation.DataHandler: javax.activation.DataContentHandler getDataContentHandler()>();

        return $r1;
    }
}
