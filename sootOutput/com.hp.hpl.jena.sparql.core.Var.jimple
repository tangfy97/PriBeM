public class com.hp.hpl.jena.sparql.core.Var extends com.hp.hpl.jena.graph.Node_Variable
{
    public static com.hp.hpl.jena.sparql.core.Var ANON;

    public static com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.sparql.core.Var $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.sparql.core.Var;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.Var: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node_Variable)
    {
        com.hp.hpl.jena.sparql.core.Var $r1, $r2;
        com.hp.hpl.jena.graph.Node_Variable r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node_Variable;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.core.Var;

        if $z0 == 0 goto label1;

        $r2 = (com.hp.hpl.jena.sparql.core.Var) r0;

        return $r2;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.core.Var;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.Var: void <init>(com.hp.hpl.jena.graph.Node_Variable)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.Var$NotAVariableException $r1;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.Var $r6, $r8;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        com.hp.hpl.jena.graph.Node_Variable $r7;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.core.Var;

        if $z0 == 0 goto label1;

        $r8 = (com.hp.hpl.jena.sparql.core.Var) r0;

        return $r8;

     label1:
        $z1 = r0 instanceof com.hp.hpl.jena.graph.Node_Variable;

        if $z1 == 0 goto label2;

        $r6 = new com.hp.hpl.jena.sparql.core.Var;

        $r7 = (com.hp.hpl.jena.graph.Node_Variable) r0;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.core.Var: void <init>(com.hp.hpl.jena.graph.Node_Variable)>($r7);

        return $r6;

     label2:
        $r1 = new com.hp.hpl.jena.sparql.core.Var$NotAVariableException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Node: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.Var$NotAVariableException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.core.Var r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        return r0;
    }

    public static com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.sparql.expr.ExprVar)
    {
        com.hp.hpl.jena.sparql.core.Var $r0;
        com.hp.hpl.jena.sparql.expr.ExprVar r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r0 = new com.hp.hpl.jena.sparql.core.Var;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.Var: void <init>(com.hp.hpl.jena.sparql.expr.ExprVar)>(r1);

        return $r0;
    }

    public static com.hp.hpl.jena.graph.Node lookup(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.graph.Node r0, $r3;
        com.hp.hpl.jena.sparql.core.Var $r1;
        boolean $z0;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.graph.Node lookup(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var)>(r2, $r1);

        return $r3;
    }

    public static com.hp.hpl.jena.graph.Node lookup(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.core.Var r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        return r1;
    }

    private void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.sparql.core.Var r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.graph.Node_Variable: void <init>(java.lang.String)>(r1);

        return;
    }

    private void <init>(com.hp.hpl.jena.graph.Node_Variable)
    {
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.core.Var r0;
        com.hp.hpl.jena.graph.Node_Variable r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node_Variable;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node_Variable: java.lang.String getName()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.Var: void <init>(java.lang.String)>($r2);

        return;
    }

    private void <init>(com.hp.hpl.jena.sparql.expr.ExprVar)
    {
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.core.Var r0;
        com.hp.hpl.jena.sparql.expr.ExprVar r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprVar: java.lang.String getVarName()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.Var: void <init>(java.lang.String)>($r2);

        return;
    }

    public com.hp.hpl.jena.graph.Node asNode()
    {
        com.hp.hpl.jena.sparql.core.Var r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        return r0;
    }

    public java.lang.String getVarName()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.sparql.core.Var r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        return $r1;
    }

    public int hashCode()
    {
        int $i0;
        com.hp.hpl.jena.sparql.core.Var r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        $i0 = specialinvoke r0.<com.hp.hpl.jena.graph.Node_Variable: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.sparql.core.Var r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.core.Var;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = specialinvoke r0.<com.hp.hpl.jena.graph.Node_Variable: boolean equals(java.lang.Object)>(r1);

        return $z1;
    }

    public boolean isNamedVar()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.sparql.core.Var r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isNamedVarName(java.lang.String)>($r1);

        return $z0;
    }

    public boolean isBlankNodeVar()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.sparql.core.Var r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVarName(java.lang.String)>($r1);

        return $z0;
    }

    public boolean isAllocVar()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.sparql.core.Var r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isAllocVarName(java.lang.String)>($r1);

        return $z0;
    }

    public boolean isAnonVar()
    {
        com.hp.hpl.jena.sparql.core.Var r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Var;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isAnonVar(com.hp.hpl.jena.sparql.core.Var)>(r0);

        return $z0;
    }

    public static java.lang.String canonical(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("?");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        return $r2;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("$");

        if $z1 == 0 goto label2;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        return $r1;

     label2:
        return r0;
    }

    public static boolean isVar(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.Var$NotAVariableException $r1;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.core.Var;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label2;

        $r1 = new com.hp.hpl.jena.sparql.core.Var$NotAVariableException;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.Var$NotAVariableException: void <init>(java.lang.String)>("Node_variable (not a Var) found");

        throw $r1;

     label2:
        return 0;
    }

    public static boolean isRenamedVar(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isRenamedVar(java.lang.String)>($r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean isRenamedVar(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        return $z0;
    }

    public static boolean isNamedVar(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isNamedVarName(java.lang.String)>($r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean isNamedVarName(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVarName(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isAllocVarName(java.lang.String)>(r0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVarName(java.lang.String)>($r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean isBlankNodeVarName(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("?");

        return $z0;
    }

    public static boolean isAllocVar(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isAllocVarName(java.lang.String)>($r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean isAllocVarName(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        return $z0;
    }

    public static java.util.List varList(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.lang.Object $r3;
        java.lang.String r4;
        com.hp.hpl.jena.sparql.core.Var $r5;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    public static boolean isAnonVar(com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.sparql.core.Var r0, $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r1 = <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var ANON>;

        if r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.util.List varNames(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.lang.Object $r3;
        java.lang.String $r5;
        com.hp.hpl.jena.sparql.core.Var r4;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.Var) $r3;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getVarName()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.core.Var $r0;

        $r0 = new com.hp.hpl.jena.sparql.core.Var;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.Var: void <init>(java.lang.String)>("?_");

        <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var ANON> = $r0;

        return;
    }
}
