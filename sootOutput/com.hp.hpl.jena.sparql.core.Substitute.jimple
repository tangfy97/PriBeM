public class com.hp.hpl.jena.sparql.core.Substitute extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.core.Substitute r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.Substitute;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op substitute(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker $r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;
        boolean $z0;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: boolean isNotNeeded(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.Substitute$OpSubstituteWorker: void <init>(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op)>($r1, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op substitute(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r2;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.core.Var r0;
        com.hp.hpl.jena.sparql.algebra.Op r3, $r4;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r0 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        r1 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r0, r1);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.sparql.algebra.Op substitute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r3, $r2);

        return $r4;
    }

    public static com.hp.hpl.jena.sparql.core.BasicPattern substitute(com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1, r2;
        com.hp.hpl.jena.graph.Triple r5, $r6;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: boolean isNotNeeded(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Triple substitute(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r5, r0);

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r6);

        goto label2;

     label3:
        return $r1;
    }

    public static com.hp.hpl.jena.graph.Triple substitute(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5, $r6, $r7;
        com.hp.hpl.jena.graph.Triple r1, r8, $r9;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: boolean isNotNeeded(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r2, r0);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r3, r0);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r4, r0);

        r8 = r1;

        if $r5 != $r2 goto label2;

        if $r6 != $r3 goto label2;

        if $r7 == $r4 goto label3;

     label2:
        $r9 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r9.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, $r6, $r7);

        r8 = $r9;

     label3:
        return r8;
    }

    public static com.hp.hpl.jena.sparql.core.TriplePath substitute(com.hp.hpl.jena.sparql.core.TriplePath, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.core.TriplePath r0, $r6, $r8, r11;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r4, $r5;
        com.hp.hpl.jena.graph.Triple $r9, $r10;
        com.hp.hpl.jena.sparql.engine.binding.Binding r3;
        com.hp.hpl.jena.sparql.path.Path $r7;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.TriplePath;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: boolean isTriple()>();

        if $z0 == 0 goto label1;

        $r8 = new com.hp.hpl.jena.sparql.core.TriplePath;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Triple asTriple()>();

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Triple substitute(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r9, r3);

        specialinvoke $r8.<com.hp.hpl.jena.sparql.core.TriplePath: void <init>(com.hp.hpl.jena.graph.Triple)>($r10);

        return $r8;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getObject()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1, r3);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r2, r3);

        r11 = r0;

        if $r4 != $r1 goto label2;

        if $r5 == $r2 goto label3;

     label2:
        $r6 = new com.hp.hpl.jena.sparql.core.TriplePath;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.sparql.path.Path getPath()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.core.TriplePath: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r4, $r7, $r5);

        r11 = $r6;

     label3:
        return r11;
    }

    public static com.hp.hpl.jena.sparql.core.Quad substitute(com.hp.hpl.jena.sparql.core.Quad, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        com.hp.hpl.jena.sparql.core.Quad r1, r10, $r11;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: boolean isNotNeeded(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r2, r0);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r3, r0);

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r4, r0);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r5, r0);

        r10 = r1;

        if $r7 != $r3 goto label2;

        if $r8 != $r4 goto label2;

        if $r9 != $r5 goto label2;

        if $r6 == $r2 goto label3;

     label2:
        $r11 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r6, $r7, $r8, $r9);

        r10 = $r11;

     label3:
        return r10;
    }

    public static com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        com.hp.hpl.jena.graph.Node r1, $r2;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.graph.Node lookup(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node)>(r0, r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.pfunction.PropFuncArg substitute(com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.graph.Node r7, $r8, $r10, $r11;
        java.util.ArrayList $r2;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1, $r5, $r9;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        java.util.List $r3;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: boolean isNotNeeded(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z1 == 0 goto label2;

        $r9 = new com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r10, r0);

        specialinvoke $r9.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: void <init>(com.hp.hpl.jena.graph.Node)>($r11);

        return $r9;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Node substitute(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r7, r0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label3;

     label4:
        $r5 = new com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: void <init>(java.util.List)>($r2);

        return $r5;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr substitute(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        com.hp.hpl.jena.sparql.expr.Expr r1, $r2;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: boolean isNotNeeded(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.ExprList substitute(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        com.hp.hpl.jena.sparql.expr.ExprList r1, $r2;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: boolean isNotNeeded(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.ExprList copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0);

        return $r2;
    }

    private static boolean isNotNeeded(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: boolean isEmpty()>();

        return $z0;
    }
}
