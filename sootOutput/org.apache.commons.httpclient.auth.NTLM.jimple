final class org.apache.commons.httpclient.auth.NTLM extends java.lang.Object
{
    public static final java.lang.String DEFAULT_CHARSET;
    private byte[] currentResponse;
    private int currentPosition;
    private java.lang.String credentialCharset;

    void <init>()
    {
        org.apache.commons.httpclient.auth.NTLM r0;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition> = 0;

        r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String credentialCharset> = "ASCII";

        return;
    }

    public final java.lang.String getResponseFor(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        byte[] $r7;
        org.apache.commons.httpclient.auth.NTLM r1;
        java.lang.String r0, r2, r3, $r4, r5, r6, r8;
        boolean $z0;

        r1 := @this: org.apache.commons.httpclient.auth.NTLM;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        if r0 == null goto label1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        r8 = virtualinvoke r1.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getType1Message(java.lang.String,java.lang.String)>(r2, r3);

        goto label3;

     label2:
        $r7 = virtualinvoke r1.<org.apache.commons.httpclient.auth.NTLM: byte[] parseType2Message(java.lang.String)>(r0);

        r8 = virtualinvoke r1.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[])>(r5, r6, r2, r3, $r7);

     label3:
        return r8;
    }

    private javax.crypto.Cipher getCipher(byte[]) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        byte[] $r2, r10;
        org.apache.commons.httpclient.auth.NTLM r1;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.Cipher $r0;
        javax.crypto.NoSuchPaddingException $r4;
        java.security.NoSuchAlgorithmException $r8;
        org.apache.commons.httpclient.auth.AuthenticationException $r5, $r7, $r9;
        java.security.InvalidKeyException $r6;

        r1 := @this: org.apache.commons.httpclient.auth.NTLM;

        r10 := @parameter0: byte[];

     label1:
        $r0 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/ECB/NoPadding");

        $r2 = specialinvoke r1.<org.apache.commons.httpclient.auth.NTLM: byte[] setupKey(byte[])>(r10);

        $r3 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "DES");

        virtualinvoke $r0.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r3);

     label2:
        return $r0;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.apache.commons.httpclient.auth.AuthenticationException;

        specialinvoke $r9.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>("DES encryption is not available.", $r8);

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.httpclient.auth.AuthenticationException;

        specialinvoke $r7.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid key for DES encryption.", $r6);

        throw $r7;

     label5:
        $r4 := @caughtexception;

        $r5 = new org.apache.commons.httpclient.auth.AuthenticationException;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>("NoPadding option for DES is not available.", $r4);

        throw $r5;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label4;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label5;
    }

    private byte[] setupKey(byte[])
    {
        byte[] r0, r1;
        byte $b0, $b3, $b4, $b5, $b6, $b13, $b14, $b15, $b16, $b23, $b24, $b25, $b26, $b33, $b34, $b35, $b36, $b43, $b44, $b45, $b46, $b53, $b54, $b55, $b56, $b63, $b64, $b65, $b66, $b68, $b70;
        short $s7, $s17, $s27, $s37, $s47, $s57, $s74, $s77, $s80, $s83, $s86, $s89;
        int $i1, $i2, $i8, $i9, $i10, $i11, $i12, $i18, $i19, $i20, $i21, $i22, $i28, $i29, $i30, $i31, $i32, $i38, $i39, $i40, $i41, $i42, $i48, $i49, $i50, $i51, $i52, $i58, $i59, $i60, $i61, $i62, $i67, $i69, i71, $i72, $i73, $i75, $i76, $i78, $i79, $i81, $i82, $i84, $i85, $i87, $i88, $i90, $i91;
        org.apache.commons.httpclient.auth.NTLM r2;

        r2 := @this: org.apache.commons.httpclient.auth.NTLM;

        r1 := @parameter0: byte[];

        r0 = newarray (byte)[8];

        $b0 = r1[0];

        $i72 = (int) $b0;

        $i1 = $i72 >> 1;

        $i2 = $i1 & 255;

        $b3 = (byte) $i2;

        r0[0] = $b3;

        $b4 = r1[0];

        $b5 = $b4 & 1;

        $i73 = (int) $b5;

        $i10 = $i73 << 6;

        $b6 = r1[1];

        $s74 = (short) $b6;

        $s7 = $s74 & 255;

        $i75 = (int) $s7;

        $i8 = $i75 >> 2;

        $i9 = $i8 & 255;

        $i11 = $i10 | $i9;

        $i12 = $i11 & 255;

        $b13 = (byte) $i12;

        r0[1] = $b13;

        $b14 = r1[1];

        $b15 = $b14 & 3;

        $i76 = (int) $b15;

        $i20 = $i76 << 5;

        $b16 = r1[2];

        $s77 = (short) $b16;

        $s17 = $s77 & 255;

        $i78 = (int) $s17;

        $i18 = $i78 >> 3;

        $i19 = $i18 & 255;

        $i21 = $i20 | $i19;

        $i22 = $i21 & 255;

        $b23 = (byte) $i22;

        r0[2] = $b23;

        $b24 = r1[2];

        $b25 = $b24 & 7;

        $i79 = (int) $b25;

        $i30 = $i79 << 4;

        $b26 = r1[3];

        $s80 = (short) $b26;

        $s27 = $s80 & 255;

        $i81 = (int) $s27;

        $i28 = $i81 >> 4;

        $i29 = $i28 & 255;

        $i31 = $i30 | $i29;

        $i32 = $i31 & 255;

        $b33 = (byte) $i32;

        r0[3] = $b33;

        $b34 = r1[3];

        $b35 = $b34 & 15;

        $i82 = (int) $b35;

        $i40 = $i82 << 3;

        $b36 = r1[4];

        $s83 = (short) $b36;

        $s37 = $s83 & 255;

        $i84 = (int) $s37;

        $i38 = $i84 >> 5;

        $i39 = $i38 & 255;

        $i41 = $i40 | $i39;

        $i42 = $i41 & 255;

        $b43 = (byte) $i42;

        r0[4] = $b43;

        $b44 = r1[4];

        $b45 = $b44 & 31;

        $i85 = (int) $b45;

        $i50 = $i85 << 2;

        $b46 = r1[5];

        $s86 = (short) $b46;

        $s47 = $s86 & 255;

        $i87 = (int) $s47;

        $i48 = $i87 >> 6;

        $i49 = $i48 & 255;

        $i51 = $i50 | $i49;

        $i52 = $i51 & 255;

        $b53 = (byte) $i52;

        r0[5] = $b53;

        $b54 = r1[5];

        $b55 = $b54 & 63;

        $i88 = (int) $b55;

        $i60 = $i88 << 1;

        $b56 = r1[6];

        $s89 = (short) $b56;

        $s57 = $s89 & 255;

        $i90 = (int) $s57;

        $i58 = $i90 >> 7;

        $i59 = $i58 & 255;

        $i61 = $i60 | $i59;

        $i62 = $i61 & 255;

        $b63 = (byte) $i62;

        r0[6] = $b63;

        $b64 = r1[6];

        $b65 = $b64 & 127;

        $b66 = (byte) $b65;

        r0[7] = $b66;

        i71 = 0;

     label1:
        $i67 = lengthof r0;

        if i71 >= $i67 goto label2;

        $b68 = r0[i71];

        $i91 = (int) $b68;

        $i69 = $i91 << 1;

        $b70 = (byte) $i69;

        r0[i71] = $b70;

        i71 = i71 + 1;

        goto label1;

     label2:
        return r0;
    }

    private byte[] encrypt(byte[], byte[]) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        byte[] r1, r3, $r4;
        org.apache.commons.httpclient.auth.NTLM r0;
        javax.crypto.IllegalBlockSizeException $r7;
        javax.crypto.Cipher $r2;
        javax.crypto.BadPaddingException $r5;
        org.apache.commons.httpclient.auth.AuthenticationException $r6, $r8;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        r1 := @parameter0: byte[];

        r3 := @parameter1: byte[];

        $r2 = specialinvoke r0.<org.apache.commons.httpclient.auth.NTLM: javax.crypto.Cipher getCipher(byte[])>(r1);

     label1:
        $r4 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.commons.httpclient.auth.AuthenticationException;

        specialinvoke $r8.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid block size for DES encryption.", $r7);

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.httpclient.auth.AuthenticationException;

        specialinvoke $r6.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String,java.lang.Throwable)>("Data not padded correctly for DES encryption.", $r5);

        throw $r6;

        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch javax.crypto.BadPaddingException from label1 to label2 with label4;
    }

    private void prepareResponse(int)
    {
        int i0;
        byte[] $r1;
        org.apache.commons.httpclient.auth.NTLM r0;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        i0 := @parameter0: int;

        $r1 = newarray (byte)[i0];

        r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse> = $r1;

        r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition> = 0;

        return;
    }

    private void addByte(byte)
    {
        byte[] $r1;
        byte b0;
        org.apache.commons.httpclient.auth.NTLM r0;
        int $i1, $i2, $i3;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        b0 := @parameter0: byte;

        $r1 = r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse>;

        $i1 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        $r1[$i1] = b0;

        $i2 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition> = $i3;

        return;
    }

    private void addBytes(byte[])
    {
        byte[] r0, $r2;
        org.apache.commons.httpclient.auth.NTLM r1;
        byte $b1;
        int $i0, $i2, $i3, $i4, i5;

        r1 := @this: org.apache.commons.httpclient.auth.NTLM;

        r0 := @parameter0: byte[];

        i5 = 0;

     label1:
        $i0 = lengthof r0;

        if i5 >= $i0 goto label2;

        $r2 = r1.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse>;

        $i2 = r1.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        $b1 = r0[i5];

        $r2[$i2] = $b1;

        $i3 = r1.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        $i4 = $i3 + 1;

        r1.<org.apache.commons.httpclient.auth.NTLM: int currentPosition> = $i4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    private java.lang.String getResponse()
    {
        byte[] $r1, $r2, r4, $r5, r6;
        org.apache.commons.httpclient.auth.NTLM r0;
        byte $b4;
        int $i0, $i1, $i2, $i3, i5;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 = r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        if $i1 <= $i0 goto label3;

        $i2 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        r4 = newarray (byte)[$i2];

        i5 = 0;

     label1:
        $i3 = r0.<org.apache.commons.httpclient.auth.NTLM: int currentPosition>;

        if i5 >= $i3 goto label2;

        $r5 = r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse>;

        $b4 = $r5[i5];

        r4[i5] = $b4;

        i5 = i5 + 1;

        goto label1;

     label2:
        r6 = r4;

        goto label4;

     label3:
        r6 = r0.<org.apache.commons.httpclient.auth.NTLM: byte[] currentResponse>;

     label4:
        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>(r6);

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getAsciiString(byte[])>($r2);

        return $r3;
    }

    public java.lang.String getType1Message(java.lang.String, java.lang.String)
    {
        byte[] $r2, $r3, $r5, $r6, $r7, $r8, $r9;
        byte $b5, $b6, $b7, $b8, $b11, $b12, $b14, $b15, $b16, $b17, $b18, $b19;
        int $i0, $i1, $i2, i3, i4, $i9, $i10, $i13;
        java.lang.String $r0, $r1, $r10, r11, r12;
        org.apache.commons.httpclient.auth.NTLM r4;

        r4 := @this: org.apache.commons.httpclient.auth.NTLM;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String;

        $r0 = virtualinvoke r11.<java.lang.String: java.lang.String toUpperCase()>();

        $r1 = virtualinvoke r12.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r0, "ASCII");

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r1, "ASCII");

        $i0 = lengthof $r2;

        $i2 = 32 + $i0;

        $i1 = lengthof $r3;

        i3 = $i2 + $i1;

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void prepareResponse(int)>(i3);

        $r5 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>("NTLMSSP", "ASCII");

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r5);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(1);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(6);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(82);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        i4 = lengthof $r3;

        $r6 = specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i4);

        $b5 = $r6[0];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b5);

        $b6 = $r6[1];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b6);

        $b7 = $r6[0];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b7);

        $b8 = $r6[1];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b8);

        $i9 = lengthof $r2;

        $i10 = $i9 + 32;

        $r7 = specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>($i10);

        $b11 = $r7[0];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b11);

        $b12 = $r7[1];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b12);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $i13 = lengthof $r2;

        $r8 = specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>($i13);

        $b14 = $r8[0];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b14);

        $b15 = $r8[1];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b15);

        $b16 = $r8[0];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b16);

        $b17 = $r8[1];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b17);

        $r9 = specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(32);

        $b18 = $r9[0];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b18);

        $b19 = $r9[1];

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>($b19);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r2);

        specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r3);

        $r10 = specialinvoke r4.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getResponse()>();

        return $r10;
    }

    public byte[] parseType2Message(java.lang.String)
    {
        byte[] $r1, $r2, r3;
        org.apache.commons.httpclient.auth.NTLM r4;
        byte $b1;
        int $i0, i2;
        java.lang.String r0;

        r4 := @this: org.apache.commons.httpclient.auth.NTLM;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>(r0, "ASCII");

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r1);

        r3 = newarray (byte)[8];

        i2 = 0;

     label1:
        if i2 >= 8 goto label2;

        $i0 = i2 + 24;

        $b1 = $r2[$i0];

        r3[i2] = $b1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;
    }

    public java.lang.String getType3Message(java.lang.String, java.lang.String, java.lang.String, java.lang.String, byte[]) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        byte[] $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, r26, $r27;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, i10;
        java.lang.String $r0, $r1, $r2, $r6, r25, $r28, r29, r30, r31;
        org.apache.commons.httpclient.auth.NTLM r5;

        r5 := @this: org.apache.commons.httpclient.auth.NTLM;

        r29 := @parameter0: java.lang.String;

        r25 := @parameter1: java.lang.String;

        r30 := @parameter2: java.lang.String;

        r31 := @parameter3: java.lang.String;

        r26 := @parameter4: byte[];

        $r0 = virtualinvoke r31.<java.lang.String: java.lang.String toUpperCase()>();

        $r1 = virtualinvoke r30.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = virtualinvoke r29.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r0, "ASCII");

        $r4 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r1, "ASCII");

        $r6 = r5.<org.apache.commons.httpclient.auth.NTLM: java.lang.String credentialCharset>;

        $r7 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r2, $r6);

        i0 = lengthof $r3;

        i1 = lengthof $r4;

        i2 = lengthof $r7;

        $i3 = 88 + i0;

        $i4 = $i3 + i2;

        i5 = $i4 + i1;

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void prepareResponse(int)>(i5);

        $r8 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>("NTLMSSP", "ASCII");

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r8);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(3);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $r9 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(24);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r9);

        $r10 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(24);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r10);

        $i6 = i5 - 24;

        $r11 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>($i6);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r11);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $r12 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r12);

        $r13 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r13);

        $r14 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i5);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r14);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $r15 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r15);

        $r16 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r16);

        $r17 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(64);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r17);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $r18 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i2);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r18);

        $r19 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i2);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r19);

        $i7 = 64 + i0;

        $r20 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>($i7);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r20);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        $r21 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i1);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r21);

        $r22 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i1);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r22);

        $i8 = 64 + i0;

        $i9 = $i8 + i2;

        $r23 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>($i9);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r23);

        i10 = 0;

     label1:
        if i10 >= 6 goto label2;

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        i10 = i10 + 1;

        goto label1;

     label2:
        $r24 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] convertShort(int)>(i5);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r24);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(6);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(82);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addByte(byte)>(0);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r3);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r7);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r4);

        $r27 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>(r25, r26);

        specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: void addBytes(byte[])>($r27);

        $r28 = specialinvoke r5.<org.apache.commons.httpclient.auth.NTLM: java.lang.String getResponse()>();

        return $r28;
    }

    private byte[] hashPassword(java.lang.String, byte[]) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        byte[] $r4, r5, r6, $r7, $r8, $r9, r10, r11, r12;
        byte $b3, $b5, $b7, $b9;
        int $i0, $i1, $i2, $i4, $i6, $i8, i10, i11, i12, i13, i14, i15, i16;
        java.lang.String r0, $r1, $r3;
        org.apache.commons.httpclient.auth.NTLM r2;

        r2 := @this: org.apache.commons.httpclient.auth.NTLM;

        r0 := @parameter0: java.lang.String;

        r11 := @parameter1: byte[];

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = r2.<org.apache.commons.httpclient.auth.NTLM: java.lang.String credentialCharset>;

        $r4 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getBytes(java.lang.String,java.lang.String)>($r1, $r3);

        r5 = newarray (byte)[7];

        r6 = newarray (byte)[7];

        i10 = lengthof $r4;

        if i10 <= 7 goto label01;

        i10 = 7;

     label01:
        i11 = 0;

     label02:
        if i11 >= i10 goto label03;

        $b9 = $r4[i11];

        r5[i11] = $b9;

        i11 = i11 + 1;

        goto label02;

     label03:
        if i11 >= 7 goto label04;

        r5[i11] = 0;

        i11 = i11 + 1;

        goto label03;

     label04:
        i12 = lengthof $r4;

        if i12 <= 14 goto label05;

        i12 = 14;

     label05:
        i13 = 7;

     label06:
        if i13 >= i12 goto label07;

        $i8 = i13 - 7;

        $b7 = $r4[i13];

        r6[$i8] = $b7;

        i13 = i13 + 1;

        goto label06;

     label07:
        if i13 >= 14 goto label08;

        $i6 = i13 - 7;

        r6[$i6] = 0;

        i13 = i13 + 1;

        goto label07;

     label08:
        $r7 = newarray (byte)[8];

        $r7[0] = 75;

        $r7[1] = 71;

        $r7[2] = 83;

        $r7[3] = 33;

        $r7[4] = 64;

        $r7[5] = 35;

        $r7[6] = 36;

        $r7[7] = 37;

        $r8 = specialinvoke r2.<org.apache.commons.httpclient.auth.NTLM: byte[] encrypt(byte[],byte[])>(r5, $r7);

        $r9 = specialinvoke r2.<org.apache.commons.httpclient.auth.NTLM: byte[] encrypt(byte[],byte[])>(r6, $r7);

        r10 = newarray (byte)[21];

        i14 = 0;

     label09:
        $i0 = lengthof $r8;

        if i14 >= $i0 goto label10;

        $b5 = $r8[i14];

        r10[i14] = $b5;

        i14 = i14 + 1;

        goto label09;

     label10:
        i15 = 0;

     label11:
        $i1 = lengthof $r9;

        if i15 >= $i1 goto label12;

        $i4 = i15 + 8;

        $b3 = $r9[i15];

        r10[$i4] = $b3;

        i15 = i15 + 1;

        goto label11;

     label12:
        i16 = 0;

     label13:
        if i16 >= 5 goto label14;

        $i2 = i16 + 16;

        r10[$i2] = 0;

        i16 = i16 + 1;

        goto label13;

     label14:
        r12 = newarray (byte)[24];

        specialinvoke r2.<org.apache.commons.httpclient.auth.NTLM: void calcResp(byte[],byte[],byte[])>(r10, r11, r12);

        return r12;
    }

    private void calcResp(byte[], byte[], byte[]) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        byte[] r0, r1, r2, r4, $r5, $r6, $r7, r8, r9;
        byte $b0, $b2, $b4, $b6, $b8, $b9;
        int $i1, $i3, $i5, $i7, i10, i11, i12, i13, i14, i15;
        org.apache.commons.httpclient.auth.NTLM r3;

        r3 := @this: org.apache.commons.httpclient.auth.NTLM;

        r9 := @parameter0: byte[];

        r4 := @parameter1: byte[];

        r8 := @parameter2: byte[];

        r0 = newarray (byte)[7];

        r1 = newarray (byte)[7];

        r2 = newarray (byte)[7];

        i10 = 0;

     label01:
        if i10 >= 7 goto label02;

        $b9 = r9[i10];

        r0[i10] = $b9;

        i10 = i10 + 1;

        goto label01;

     label02:
        i11 = 0;

     label03:
        if i11 >= 7 goto label04;

        $i7 = i11 + 7;

        $b8 = r9[$i7];

        r1[i11] = $b8;

        i11 = i11 + 1;

        goto label03;

     label04:
        i12 = 0;

     label05:
        if i12 >= 7 goto label06;

        $i5 = i12 + 14;

        $b6 = r9[$i5];

        r2[i12] = $b6;

        i12 = i12 + 1;

        goto label05;

     label06:
        $r5 = specialinvoke r3.<org.apache.commons.httpclient.auth.NTLM: byte[] encrypt(byte[],byte[])>(r0, r4);

        $r6 = specialinvoke r3.<org.apache.commons.httpclient.auth.NTLM: byte[] encrypt(byte[],byte[])>(r1, r4);

        $r7 = specialinvoke r3.<org.apache.commons.httpclient.auth.NTLM: byte[] encrypt(byte[],byte[])>(r2, r4);

        i13 = 0;

     label07:
        if i13 >= 8 goto label08;

        $b4 = $r5[i13];

        r8[i13] = $b4;

        i13 = i13 + 1;

        goto label07;

     label08:
        i14 = 0;

     label09:
        if i14 >= 8 goto label10;

        $i3 = i14 + 8;

        $b2 = $r6[i14];

        r8[$i3] = $b2;

        i14 = i14 + 1;

        goto label09;

     label10:
        i15 = 0;

     label11:
        if i15 >= 8 goto label12;

        $i1 = i15 + 16;

        $b0 = $r7[i15];

        r8[$i1] = $b0;

        i15 = i15 + 1;

        goto label11;

     label12:
        return;
    }

    private byte[] convertShort(int)
    {
        byte[] r0;
        org.apache.commons.httpclient.auth.NTLM r6;
        byte $b3, $b5;
        java.lang.StringBuffer $r3, $r4, $r5;
        int i0, $i1, $i2, $i4;
        java.lang.String $r1, $r2, r7;

        r6 := @this: org.apache.commons.httpclient.auth.NTLM;

        i0 := @parameter0: int;

        r0 = newarray (byte)[2];

        r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>(i0, 16);

     label1:
        $i1 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i1 >= 4 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label1;

     label2:
        $r1 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(2, 4);

        $r2 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r1, 16);

        $b3 = (byte) $i2;

        r0[0] = $b3;

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $b5 = (byte) $i4;

        r0[1] = $b5;

        return r0;
    }

    public java.lang.String getCredentialCharset()
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.auth.NTLM r0;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        $r1 = r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String credentialCharset>;

        return $r1;
    }

    public void setCredentialCharset(java.lang.String)
    {
        java.lang.String r1;
        org.apache.commons.httpclient.auth.NTLM r0;

        r0 := @this: org.apache.commons.httpclient.auth.NTLM;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.commons.httpclient.auth.NTLM: java.lang.String credentialCharset> = r1;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.httpclient.auth.NTLM: java.lang.String DEFAULT_CHARSET> = "ASCII";

        return;
    }
}
