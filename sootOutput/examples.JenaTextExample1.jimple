public class examples.JenaTextExample1 extends java.lang.Object
{
    static org.slf4j.Logger log;

    public void <init>()
    {
        examples.JenaTextExample1 r0;

        r0 := @this: examples.JenaTextExample1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void main(java.lang.String[])
    {
        com.hp.hpl.jena.query.Dataset $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <org.apache.jena.query.text.TextQuery: void init()>();

        $r0 = staticinvoke <examples.JenaTextExample1: com.hp.hpl.jena.query.Dataset createCode()>();

        staticinvoke <examples.JenaTextExample1: void loadData(com.hp.hpl.jena.query.Dataset,java.lang.String)>($r0, "data.ttl");

        staticinvoke <examples.JenaTextExample1: void queryData(com.hp.hpl.jena.query.Dataset)>($r0);

        return;
    }

    public static com.hp.hpl.jena.query.Dataset createCode()
    {
        org.slf4j.Logger $r0;
        org.apache.jena.query.text.EntityDefinition $r2;
        com.hp.hpl.jena.rdf.model.Property $r3;
        com.hp.hpl.jena.query.Dataset $r1, $r6;
        org.apache.lucene.store.RAMDirectory $r5;
        com.hp.hpl.jena.graph.Node $r4;

        $r0 = <examples.JenaTextExample1: org.slf4j.Logger log>;

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Construct an in-memory dataset with in-memory lucene index using code");

        $r1 = staticinvoke <com.hp.hpl.jena.query.DatasetFactory: com.hp.hpl.jena.query.Dataset createMem()>();

        $r2 = new org.apache.jena.query.text.EntityDefinition;

        $r3 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property label>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke $r2.<org.apache.jena.query.text.EntityDefinition: void <init>(java.lang.String,java.lang.String,com.hp.hpl.jena.graph.Node)>("uri", "text", $r4);

        $r5 = new org.apache.lucene.store.RAMDirectory;

        specialinvoke $r5.<org.apache.lucene.store.RAMDirectory: void <init>()>();

        $r6 = staticinvoke <org.apache.jena.query.text.TextDatasetFactory: com.hp.hpl.jena.query.Dataset createLucene(com.hp.hpl.jena.query.Dataset,org.apache.lucene.store.Directory,org.apache.jena.query.text.EntityDefinition)>($r1, $r5, $r2);

        return $r6;
    }

    public static com.hp.hpl.jena.query.Dataset createAssembler()
    {
        com.hp.hpl.jena.query.Dataset $r1;
        org.slf4j.Logger $r0;

        $r0 = <examples.JenaTextExample1: org.slf4j.Logger log>;

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Construct text dataset using an assembler description");

        $r1 = staticinvoke <com.hp.hpl.jena.query.DatasetFactory: com.hp.hpl.jena.query.Dataset assemble(java.lang.String,java.lang.String)>("text-config.ttl", "http://localhost/jena_example/#text_dataset");

        return $r1;
    }

    public static void loadData(com.hp.hpl.jena.query.Dataset, java.lang.String)
    {
        java.lang.Throwable $r9;
        org.slf4j.Logger $r0, $r6;
        java.lang.Object[] $r5;
        java.lang.Double $r7;
        long $l0, $l1, $l2;
        com.hp.hpl.jena.query.ReadWrite $r2;
        com.hp.hpl.jena.rdf.model.Model $r3;
        com.hp.hpl.jena.query.Dataset r1;
        java.lang.String r4, $r8;
        double $d0, d1;

        r1 := @parameter0: com.hp.hpl.jena.query.Dataset;

        r4 := @parameter1: java.lang.String;

        $r0 = <examples.JenaTextExample1: org.slf4j.Logger log>;

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Start loading");

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r2 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite WRITE>;

        interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: void begin(com.hp.hpl.jena.query.ReadWrite)>($r2);

     label1:
        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: com.hp.hpl.jena.rdf.model.Model getDefaultModel()>();

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void read(com.hp.hpl.jena.rdf.model.Model,java.lang.String)>($r3, r4);

        interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: void commit()>();

     label2:
        interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: void end()>();

        goto label5;

     label3:
        $r9 := @caughtexception;

     label4:
        interfaceinvoke r1.<com.hp.hpl.jena.query.Dataset: void end()>();

        throw $r9;

     label5:
        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = $l1 - $l0;

        $d0 = (double) $l2;

        d1 = $d0 / 1000000.0;

        $r6 = <examples.JenaTextExample1: org.slf4j.Logger log>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Finish loading - %.2fms", $r5);

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r8);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void queryData(com.hp.hpl.jena.query.Dataset)
    {
        java.lang.Throwable $r18;
        com.hp.hpl.jena.query.Query $r12;
        java.lang.Object[] $r14;
        java.lang.Double $r16;
        long $l0, $l1, $l2;
        java.lang.String[] $r1, $r3;
        java.lang.String $r2, $r4, $r11, $r17;
        double $d0, d1;
        org.slf4j.Logger $r0, $r15;
        com.hp.hpl.jena.query.ReadWrite $r6;
        com.hp.hpl.jena.query.Dataset r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        com.hp.hpl.jena.query.QueryExecution $r13;

        r5 := @parameter0: com.hp.hpl.jena.query.Dataset;

        $r0 = <examples.JenaTextExample1: org.slf4j.Logger log>;

        interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("START");

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "PREFIX : <http://example/>";

        $r1[1] = "PREFIX text: <http://jena.apache.org/text#>";

        $r1[2] = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>";

        $r2 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String strjoinNL(java.lang.String[])>($r1);

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "SELECT * ";

        $r3[1] = " { ?s text:query (rdfs:label \'X1\') ;";

        $r3[2] = "      rdfs:label ?label";

        $r3[3] = " }";

        $r4 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String strjoinNL(java.lang.String[])>($r3);

        $r6 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite READ>;

        interfaceinvoke r5.<com.hp.hpl.jena.query.Dataset: void begin(com.hp.hpl.jena.query.ReadWrite)>($r6);

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String)>($r11);

        $r13 = staticinvoke <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.Dataset)>($r12, r5);

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void executeQuery(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.QueryExecution)>($r12, $r13);

     label2:
        interfaceinvoke r5.<com.hp.hpl.jena.query.Dataset: void end()>();

        goto label5;

     label3:
        $r18 := @caughtexception;

     label4:
        interfaceinvoke r5.<com.hp.hpl.jena.query.Dataset: void end()>();

        throw $r18;

     label5:
        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = $l1 - $l0;

        $d0 = (double) $l2;

        d1 = $d0 / 1000000.0;

        $r15 = <examples.JenaTextExample1: org.slf4j.Logger log>;

        $r14 = newarray (java.lang.Object)[1];

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r14[0] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("FINISH - %.2fms", $r14);

        interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String)>($r17);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        staticinvoke <org.apache.jena.atlas.logging.Log: boolean setLog4j()>();

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("JenaTextExample");

        <examples.JenaTextExample1: org.slf4j.Logger log> = $r0;

        return;
    }
}
