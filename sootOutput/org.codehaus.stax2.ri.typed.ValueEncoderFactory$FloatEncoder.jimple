final class org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder extends org.codehaus.stax2.ri.typed.ValueEncoderFactory$TypedScalarEncoder
{
    float _value;

    protected void <init>()
    {
        org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder r0;

        r0 := @this: org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder;

        specialinvoke r0.<org.codehaus.stax2.ri.typed.ValueEncoderFactory$TypedScalarEncoder: void <init>()>();

        return;
    }

    protected void reset(float)
    {
        float f0;
        org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder r0;

        r0 := @this: org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder;

        f0 := @parameter0: float;

        r0.<org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder: float _value> = f0;

        return;
    }

    public int encodeMore(char[], int, int)
    {
        org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder r0;
        int i0, $i1, i2;
        char[] r1;
        float $f0;

        r0 := @this: org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $f0 = r0.<org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder: float _value>;

        $i1 = staticinvoke <org.codehaus.stax2.ri.typed.NumberUtil: int writeFloat(float,char[],int)>($f0, r1, i0);

        return $i1;
    }

    public int encodeMore(byte[], int, int)
    {
        byte[] r1;
        org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder r0;
        int i0, $i1, i2;
        float $f0;

        r0 := @this: org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $f0 = r0.<org.codehaus.stax2.ri.typed.ValueEncoderFactory$FloatEncoder: float _value>;

        $i1 = staticinvoke <org.codehaus.stax2.ri.typed.NumberUtil: int writeFloat(float,byte[],int)>($f0, r1, i0);

        return $i1;
    }
}
