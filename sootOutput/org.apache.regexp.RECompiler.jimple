public class org.apache.regexp.RECompiler extends java.lang.Object
{
    char[] instruction;
    int lenInstruction;
    java.lang.String pattern;
    int len;
    int idx;
    int parens;
    static final int NODE_NORMAL;
    static final int NODE_NULLABLE;
    static final int NODE_TOPLEVEL;
    static final int ESC_MASK;
    static final int ESC_BACKREF;
    static final int ESC_COMPLEX;
    static final int ESC_CLASS;
    int maxBrackets;
    static final int bracketUnbounded;
    int brackets;
    int[] bracketStart;
    int[] bracketEnd;
    int[] bracketMin;
    int[] bracketOpt;
    static java.util.Hashtable hashPOSIX;

    public void <init>()
    {
        org.apache.regexp.RECompiler r0;
        char[] $r1;

        r0 := @this: org.apache.regexp.RECompiler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.regexp.RECompiler: int maxBrackets> = 10;

        r0.<org.apache.regexp.RECompiler: int brackets> = 0;

        r0.<org.apache.regexp.RECompiler: int[] bracketStart> = null;

        r0.<org.apache.regexp.RECompiler: int[] bracketEnd> = null;

        r0.<org.apache.regexp.RECompiler: int[] bracketMin> = null;

        r0.<org.apache.regexp.RECompiler: int[] bracketOpt> = null;

        $r1 = newarray (char)[128];

        r0.<org.apache.regexp.RECompiler: char[] instruction> = $r1;

        r0.<org.apache.regexp.RECompiler: int lenInstruction> = 0;

        return;
    }

    void ensure(int)
    {
        org.apache.regexp.RECompiler r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        char[] $r1, r2, $r3;

        r0 := @this: org.apache.regexp.RECompiler;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        i6 = lengthof $r1;

        $i1 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $i2 = $i1 + i0;

        if $i2 < i6 goto label3;

        goto label2;

     label1:
        i6 = i6 * 2;

     label2:
        $i3 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $i4 = $i3 + i0;

        if $i4 >= i6 goto label1;

        r2 = newarray (char)[i6];

        $r3 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i5 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i5);

        r0.<org.apache.regexp.RECompiler: char[] instruction> = r2;

     label3:
        return;
    }

    void emit(char)
    {
        org.apache.regexp.RECompiler r0;
        int $i0, $i1;
        char[] $r1;
        char c2;

        r0 := @this: org.apache.regexp.RECompiler;

        c2 := @parameter0: char;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void ensure(int)>(1);

        $r1 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i0 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $i1 = $i0 + 1;

        r0.<org.apache.regexp.RECompiler: int lenInstruction> = $i1;

        $r1[$i0] = c2;

        return;
    }

    void nodeInsert(char, int, int)
    {
        org.apache.regexp.RECompiler r0;
        int i0, $i1, $i2, $i3, $i5, i6, $i8, $i9, $i10, $i11;
        char c4, $c7;
        char[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.regexp.RECompiler;

        c4 := @parameter0: char;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void ensure(int)>(3);

        $r2 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $r1 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i3 = i0 + 3;

        $i1 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $i2 = $i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r1, $i3, $i2);

        $r3 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i5 = i0 + 0;

        $r3[$i5] = c4;

        $r4 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i8 = i0 + 1;

        $c7 = (char) i6;

        $r4[$i8] = $c7;

        $r5 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i9 = i0 + 2;

        $r5[$i9] = 0;

        $i10 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $i11 = $i10 + 3;

        r0.<org.apache.regexp.RECompiler: int lenInstruction> = $i11;

        return;
    }

    void setNextOfEnd(int, int)
    {
        org.apache.regexp.RECompiler r0;
        short $s3;
        int $i0, $i1, $i2, $i5, $i6, $i7, $i8, i9, i10, $i12;
        char $c4, c11;
        char[] $r1, $r2, $r3;

        r0 := @this: org.apache.regexp.RECompiler;

        i9 := @parameter0: int;

        i10 := @parameter1: int;

        $r1 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i0 = i9 + 2;

        c11 = $r1[$i0];

        goto label3;

     label1:
        if i9 != i10 goto label2;

        i10 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

     label2:
        $i12 = (int) c11;

        $i8 = i9 + $i12;

        i9 = $i8;

        $r3 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i7 = $i8 + 2;

        c11 = $r3[$i7];

     label3:
        if c11 == 0 goto label4;

        $i6 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        if i9 < $i6 goto label1;

     label4:
        $i1 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        if i9 >= $i1 goto label5;

        $r2 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i5 = i9 + 2;

        $i2 = i10 - i9;

        $s3 = (short) $i2;

        $c4 = (char) $s3;

        $r2[$i5] = $c4;

     label5:
        return;
    }

    int node(char, int)
    {
        org.apache.regexp.RECompiler r0;
        int $i0, $i2, $i3, i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        char c1, $c5;
        char[] $r1, $r2, $r3;

        r0 := @this: org.apache.regexp.RECompiler;

        c1 := @parameter0: char;

        i4 := @parameter1: int;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void ensure(int)>(3);

        $r1 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i0 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $i2 = $i0 + 0;

        $r1[$i2] = c1;

        $r2 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i3 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $i6 = $i3 + 1;

        $c5 = (char) i4;

        $r2[$i6] = $c5;

        $r3 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i7 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $i8 = $i7 + 2;

        $r3[$i8] = 0;

        $i9 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $i10 = $i9 + 3;

        r0.<org.apache.regexp.RECompiler: int lenInstruction> = $i10;

        $i11 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $i12 = $i11 - 3;

        return $i12;
    }

    void internalError() throws java.lang.Error
    {
        java.lang.Error $r0;
        org.apache.regexp.RECompiler r1;

        r1 := @this: org.apache.regexp.RECompiler;

        $r0 = new java.lang.Error;

        specialinvoke $r0.<java.lang.Error: void <init>(java.lang.String)>("Internal error!");

        throw $r0;
    }

    void syntaxError(java.lang.String) throws org.apache.regexp.RESyntaxException
    {
        org.apache.regexp.RECompiler r2;
        org.apache.regexp.RESyntaxException $r0;
        java.lang.String r1;

        r2 := @this: org.apache.regexp.RECompiler;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.regexp.RESyntaxException;

        specialinvoke $r0.<org.apache.regexp.RESyntaxException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    void allocBrackets()
    {
        org.apache.regexp.RECompiler r0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7, $i9, $i11, $i13;

        r0 := @this: org.apache.regexp.RECompiler;

        $r1 = r0.<org.apache.regexp.RECompiler: int[] bracketStart>;

        if $r1 != null goto label3;

        $i0 = r0.<org.apache.regexp.RECompiler: int maxBrackets>;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.regexp.RECompiler: int[] bracketStart> = $r2;

        $i1 = r0.<org.apache.regexp.RECompiler: int maxBrackets>;

        $r3 = newarray (int)[$i1];

        r0.<org.apache.regexp.RECompiler: int[] bracketEnd> = $r3;

        $i2 = r0.<org.apache.regexp.RECompiler: int maxBrackets>;

        $r4 = newarray (int)[$i2];

        r0.<org.apache.regexp.RECompiler: int[] bracketMin> = $r4;

        $i3 = r0.<org.apache.regexp.RECompiler: int maxBrackets>;

        $r5 = newarray (int)[$i3];

        r0.<org.apache.regexp.RECompiler: int[] bracketOpt> = $r5;

        i5 = 0;

        goto label2;

     label1:
        $r9 = r0.<org.apache.regexp.RECompiler: int[] bracketStart>;

        $r8 = r0.<org.apache.regexp.RECompiler: int[] bracketEnd>;

        $r7 = r0.<org.apache.regexp.RECompiler: int[] bracketMin>;

        $r6 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i7 = (int) -1;

        $r6[i5] = $i7;

        $i9 = (int) -1;

        $r7[i5] = $i9;

        $i11 = (int) -1;

        $r8[i5] = $i11;

        $i13 = (int) -1;

        $r9[i5] = $i13;

        i5 = i5 + 1;

     label2:
        $i4 = r0.<org.apache.regexp.RECompiler: int maxBrackets>;

        if i5 < $i4 goto label1;

     label3:
        return;
    }

    synchronized void reallocBrackets()
    {
        org.apache.regexp.RECompiler r0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8, $i10, $i12, $i14;

        r0 := @this: org.apache.regexp.RECompiler;

        $r1 = r0.<org.apache.regexp.RECompiler: int[] bracketStart>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void allocBrackets()>();

     label1:
        $i0 = r0.<org.apache.regexp.RECompiler: int maxBrackets>;

        $i5 = $i0 * 2;

        $r6 = newarray (int)[$i5];

        $r7 = newarray (int)[$i5];

        $r8 = newarray (int)[$i5];

        $r9 = newarray (int)[$i5];

        i6 = r0.<org.apache.regexp.RECompiler: int brackets>;

        goto label3;

     label2:
        $i8 = (int) -1;

        $r9[i6] = $i8;

        $i10 = (int) -1;

        $r8[i6] = $i10;

        $i12 = (int) -1;

        $r7[i6] = $i12;

        $i14 = (int) -1;

        $r6[i6] = $i14;

        i6 = i6 + 1;

     label3:
        if i6 < $i5 goto label2;

        $r2 = r0.<org.apache.regexp.RECompiler: int[] bracketStart>;

        $i1 = r0.<org.apache.regexp.RECompiler: int brackets>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r6, 0, $i1);

        $r3 = r0.<org.apache.regexp.RECompiler: int[] bracketEnd>;

        $i2 = r0.<org.apache.regexp.RECompiler: int brackets>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r7, 0, $i2);

        $r4 = r0.<org.apache.regexp.RECompiler: int[] bracketMin>;

        $i3 = r0.<org.apache.regexp.RECompiler: int brackets>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r8, 0, $i3);

        $r5 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i4 = r0.<org.apache.regexp.RECompiler: int brackets>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r9, 0, $i4);

        r0.<org.apache.regexp.RECompiler: int[] bracketStart> = $r6;

        r0.<org.apache.regexp.RECompiler: int[] bracketEnd> = $r7;

        r0.<org.apache.regexp.RECompiler: int[] bracketMin> = $r8;

        r0.<org.apache.regexp.RECompiler: int[] bracketOpt> = $r9;

        r0.<org.apache.regexp.RECompiler: int maxBrackets> = $i5;

        return;
    }

    void bracket() throws org.apache.regexp.RESyntaxException
    {
        org.apache.regexp.RECompiler r0;
        java.lang.StringBuffer $r23;
        java.lang.String $r2, $r3, $r4, $r6, $r9, $r10, $r11, $r12, $r14, $r16, $r17, $r18, $r19;
        java.lang.NumberFormatException $r20, $r21;
        int[] $r1, $r5, $r7, $r8, $r13, $r15;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i32, $i33, $i35, $i37, $i38, $i39, $i40, $i41, $i43, $i44, $i45, $i46, $i48, $i49, $i51, $i53, $i54, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i65, $i66;
        char $c9, $c13, $c29, $c31, $c34, $c36, $c42, $c47, $c50, $c52, $c55;

        r0 := @this: org.apache.regexp.RECompiler;

        $i1 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i0 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i1 >= $i0 goto label01;

        $r19 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i53 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i54 = $i53 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i54;

        $c55 = virtualinvoke $r19.<java.lang.String: char charAt(int)>($i53);

        $i60 = (int) $c55;

        if $i60 == 123 goto label02;

     label01:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void internalError()>();

     label02:
        $i56 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i57 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i56 >= $i57 goto label03;

        $r18 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i51 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c52 = virtualinvoke $r18.<java.lang.String: char charAt(int)>($i51);

        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c52);

        if $z3 != 0 goto label04;

     label03:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Expected digit");

     label04:
        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        goto label06;

     label05:
        $r17 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i48 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i49 = $i48 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i49;

        $c50 = virtualinvoke $r17.<java.lang.String: char charAt(int)>($i48);

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c50);

     label06:
        $i3 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i2 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i3 >= $i2 goto label07;

        $r16 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i46 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c47 = virtualinvoke $r16.<java.lang.String: char charAt(int)>($i46);

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c47);

        if $z2 != 0 goto label05;

     label07:
        $r1 = r0.<org.apache.regexp.RECompiler: int[] bracketMin>;

        $i4 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $r2 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r1[$i4] = $i5;

     label08:
        goto label10;

     label09:
        $r21 := @caughtexception;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Expected valid number");

     label10:
        $i7 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i6 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i7 < $i6 goto label11;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Expected comma or right bracket");

     label11:
        $r3 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i8 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c9 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i8);

        $i61 = (int) $c9;

        if $i61 != 125 goto label12;

        $i43 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i44 = $i43 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i44;

        $r15 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i45 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $r15[$i45] = 0;

        return;

     label12:
        $i11 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i10 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i11 >= $i10 goto label13;

        $r14 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i40 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i41 = $i40 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i41;

        $c42 = virtualinvoke $r14.<java.lang.String: char charAt(int)>($i40);

        $i62 = (int) $c42;

        if $i62 == 44 goto label14;

     label13:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Expected comma");

     label14:
        $i58 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i59 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i58 < $i59 goto label15;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Expected comma or right bracket");

     label15:
        $r4 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i12 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c13 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i12);

        $i63 = (int) $c13;

        if $i63 != 125 goto label16;

        $i37 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i38 = $i37 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i38;

        $r13 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i39 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i65 = (int) -1;

        $r13[$i39] = $i65;

        return;

     label16:
        $i15 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i14 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i15 >= $i14 goto label17;

        $r12 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i35 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c36 = virtualinvoke $r12.<java.lang.String: char charAt(int)>($i35);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c36);

        if $z1 != 0 goto label18;

     label17:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Expected digit");

     label18:
        virtualinvoke $r23.<java.lang.StringBuffer: void setLength(int)>(0);

        goto label20;

     label19:
        $r11 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i32 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i33 = $i32 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i33;

        $c34 = virtualinvoke $r11.<java.lang.String: char charAt(int)>($i32);

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c34);

     label20:
        $i17 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i16 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i17 >= $i16 goto label21;

        $r10 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i30 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c31 = virtualinvoke $r10.<java.lang.String: char charAt(int)>($i30);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c31);

        if $z0 != 0 goto label19;

     label21:
        $r5 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i18 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $r6 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        $i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7 = r0.<org.apache.regexp.RECompiler: int[] bracketMin>;

        $i20 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i21 = $r7[$i20];

        $i22 = $i19 - $i21;

        $r5[$i18] = $i22;

     label22:
        goto label24;

     label23:
        $r20 := @caughtexception;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Expected valid number");

     label24:
        $r8 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i23 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i24 = $r8[$i23];

        if $i24 >= 0 goto label25;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Bad range");

     label25:
        $i26 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i25 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i26 >= $i25 goto label26;

        $r9 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i27 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i28 = $i27 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i28;

        $c29 = virtualinvoke $r9.<java.lang.String: char charAt(int)>($i27);

        $i66 = (int) $c29;

        if $i66 == 125 goto label27;

     label26:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Missing close brace");

     label27:
        return;

        catch java.lang.NumberFormatException from label07 to label08 with label09;
        catch java.lang.NumberFormatException from label21 to label22 with label23;
    }

    int escape() throws org.apache.regexp.RESyntaxException
    {
        byte $b42;
        org.apache.regexp.RECompiler r0;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r15;
        java.lang.String $r1, $r2, $r3, $r9, $r10, $r11, $r12, $r13, $r14;
        boolean $z0, $z1, $z2;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i38, $i39, $i41, i43, i44, $i45, $i46, $i47, $i48, i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63;
        char $c1, $c9, $c12, $c13, $c24, $c28, $c33, $c37, $c40;

        r0 := @this: org.apache.regexp.RECompiler;

        $r1 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i0 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i50 = (int) $c1;

        if $i50 == 92 goto label01;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void internalError()>();

     label01:
        $i2 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i4 = $i2 + 1;

        $i3 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i4 != $i3 goto label02;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Escape terminates string");

     label02:
        $i5 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i6 = $i5 + 2;

        r0.<org.apache.regexp.RECompiler: int idx> = $i6;

        $r2 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i7 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i8 = $i7 - 1;

        $c9 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i8);

        $i51 = (int) $c9;

        tableswitch($i51)
        {
            case 48: goto label18;
            case 49: goto label18;
            case 50: goto label18;
            case 51: goto label18;
            case 52: goto label18;
            case 53: goto label18;
            case 54: goto label18;
            case 55: goto label18;
            case 56: goto label18;
            case 57: goto label18;
            case 58: goto label23;
            case 59: goto label23;
            case 60: goto label23;
            case 61: goto label23;
            case 62: goto label23;
            case 63: goto label23;
            case 64: goto label23;
            case 65: goto label23;
            case 66: goto label03;
            case 67: goto label23;
            case 68: goto label04;
            case 69: goto label23;
            case 70: goto label23;
            case 71: goto label23;
            case 72: goto label23;
            case 73: goto label23;
            case 74: goto label23;
            case 75: goto label23;
            case 76: goto label23;
            case 77: goto label23;
            case 78: goto label23;
            case 79: goto label23;
            case 80: goto label23;
            case 81: goto label23;
            case 82: goto label23;
            case 83: goto label04;
            case 84: goto label23;
            case 85: goto label23;
            case 86: goto label23;
            case 87: goto label04;
            case 88: goto label23;
            case 89: goto label23;
            case 90: goto label23;
            case 91: goto label23;
            case 92: goto label23;
            case 93: goto label23;
            case 94: goto label23;
            case 95: goto label23;
            case 96: goto label23;
            case 97: goto label23;
            case 98: goto label03;
            case 99: goto label23;
            case 100: goto label04;
            case 101: goto label23;
            case 102: goto label17;
            case 103: goto label23;
            case 104: goto label23;
            case 105: goto label23;
            case 106: goto label23;
            case 107: goto label23;
            case 108: goto label23;
            case 109: goto label23;
            case 110: goto label15;
            case 111: goto label23;
            case 112: goto label23;
            case 113: goto label23;
            case 114: goto label16;
            case 115: goto label04;
            case 116: goto label14;
            case 117: goto label05;
            case 118: goto label23;
            case 119: goto label04;
            case 120: goto label05;
            default: goto label23;
        };

     label03:
        return 1048574;

     label04:
        return 1048573;

     label05:
        $i52 = (int) $c9;

        if $i52 != 117 goto label06;

        $b42 = 4;

        goto label07;

     label06:
        $b42 = 2;

     label07:
        i43 = $b42;

        i44 = 0;

        goto label12;

     label08:
        $r3 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i11 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c12 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i11);

        $i53 = (int) $c12;

        if $i53 < 48 goto label09;

        $i54 = (int) $c12;

        if $i54 > 57 goto label09;

        $i17 = i44 << 4;

        $i55 = (int) $c12;

        $i18 = $i17 + $i55;

        i44 = $i18 - 48;

        goto label11;

     label09:
        $c13 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c12);

        $i56 = (int) $c13;

        if $i56 < 97 goto label10;

        $i57 = (int) $c13;

        if $i57 > 102 goto label10;

        $i15 = i44 << 4;

        $i58 = (int) $c13;

        $i14 = $i58 - 97;

        $i16 = $i15 + $i14;

        i44 = $i16 + 10;

        goto label11;

     label10:
        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i43);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" hexadecimal digits after \\");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>($r9);

     label11:
        $i45 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i46 = $i45 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i46;

     label12:
        $i47 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i48 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i47 >= $i48 goto label13;

        $i10 = i43;

        i43 = i43 - 1;

        if $i10 > 0 goto label08;

     label13:
        return i44;

     label14:
        return 9;

     label15:
        return 10;

     label16:
        return 13;

     label17:
        return 12;

     label18:
        $i20 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i19 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i20 >= $i19 goto label19;

        $r14 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i39 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c40 = virtualinvoke $r14.<java.lang.String: char charAt(int)>($i39);

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c40);

        if $z2 != 0 goto label20;

     label19:
        $i59 = (int) $c9;

        if $i59 != 48 goto label22;

     label20:
        $i60 = (int) $c9;

        $i41 = $i60 - 48;

        i49 = $i41;

        $i22 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i21 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i22 >= $i21 goto label21;

        $r10 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i23 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c24 = virtualinvoke $r10.<java.lang.String: char charAt(int)>($i23);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c24);

        if $z0 == 0 goto label21;

        $i27 = $i41 << 3;

        $r11 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i25 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i26 = $i25 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i26;

        $c28 = virtualinvoke $r11.<java.lang.String: char charAt(int)>($i25);

        $i61 = (int) $c28;

        $i29 = $i61 - 48;

        i49 = $i27 + $i29;

        $i31 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i30 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i31 >= $i30 goto label21;

        $r12 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i32 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c33 = virtualinvoke $r12.<java.lang.String: char charAt(int)>($i32);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c33);

        if $z1 == 0 goto label21;

        $i36 = i49 << 3;

        $r13 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i34 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i35 = $i34 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i35;

        $c37 = virtualinvoke $r13.<java.lang.String: char charAt(int)>($i34);

        $i62 = (int) $c37;

        $i38 = $i62 - 48;

        i49 = $i36 + $i38;

     label21:
        return i49;

     label22:
        return 1048575;

     label23:
        $i63 = (int) $c9;

        return $i63;
    }

    int characterClass() throws org.apache.regexp.RESyntaxException
    {
        java.lang.StringBuffer $r19, $r20, $r21, $r28;
        int[] $r3, $r4;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i15, $i17, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $i41, $i43, $i44, $i45, $i46, $i47, $i49, $i50, $i52, $i53, $i54, $i56, $i57, $i59, $i61, $i62, $i63, $i64, $i66, $i67, i68, $i69, $i70, $i71, $i72, $i74, i75, $i77, $i78, $i79, i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i91, $i92, $i94, $i96, $i98, $i99, $i101, $i102, $i103, $i104, $i105, $i106;
        java.lang.Object $r17;
        java.lang.Character r26;
        org.apache.regexp.RECompiler$RERange $r29;
        org.apache.regexp.RECompiler r0;
        java.lang.String $r1, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r22, $r23, $r24, $r25;
        char[] $r2;
        boolean z0, z1, $z2, z3, z4, z5;
        java.util.Hashtable $r16;
        char $c1, $c10, $c14, $c16, $c18, $c20, $c27, $c31, c32, $c38, $c42, $c48, $c51, $c55, $c58, $c60, $c65, c73, c76;

        r0 := @this: org.apache.regexp.RECompiler;

        $r1 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i0 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i81 = (int) $c1;

        if $i81 == 91 goto label01;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void internalError()>();

     label01:
        $i2 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i4 = $i2 + 1;

        $i3 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i4 >= $i3 goto label02;

        $r25 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i63 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i64 = $i63 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i64;

        $c65 = virtualinvoke $r25.<java.lang.String: char charAt(int)>($i64);

        $i82 = (int) $c65;

        if $i82 != 93 goto label03;

     label02:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Empty or unterminated class");

     label03:
        $i66 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i67 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i66 >= $i67 goto label09;

        $r11 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i41 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c42 = virtualinvoke $r11.<java.lang.String: char charAt(int)>($i41);

        $i83 = (int) $c42;

        if $i83 != 58 goto label09;

        $i43 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i44 = $i43 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i44;

        i68 = r0.<org.apache.regexp.RECompiler: int idx>;

        goto label05;

     label04:
        $i61 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i62 = $i61 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i62;

     label05:
        $i46 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i45 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i46 >= $i45 goto label06;

        $r23 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i57 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c58 = virtualinvoke $r23.<java.lang.String: char charAt(int)>($i57);

        $i84 = (int) $c58;

        if $i84 < 97 goto label06;

        $r24 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i59 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c60 = virtualinvoke $r24.<java.lang.String: char charAt(int)>($i59);

        $i85 = (int) $c60;

        if $i85 <= 122 goto label04;

     label06:
        $i69 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i70 = $i69 + 1;

        $i71 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i70 >= $i71 goto label08;

        $r12 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i47 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c48 = virtualinvoke $r12.<java.lang.String: char charAt(int)>($i47);

        $i86 = (int) $c48;

        if $i86 != 58 goto label08;

        $r13 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i49 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i50 = $i49 + 1;

        $c51 = virtualinvoke $r13.<java.lang.String: char charAt(int)>($i50);

        $i87 = (int) $c51;

        if $i87 != 93 goto label08;

        $r14 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i52 = r0.<org.apache.regexp.RECompiler: int idx>;

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(i68, $i52);

        $r16 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r17 = virtualinvoke $r16.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r15);

        r26 = (java.lang.Character) $r17;

        if r26 == null goto label07;

        $i53 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i54 = $i53 + 2;

        r0.<org.apache.regexp.RECompiler: int idx> = $i54;

        $c55 = virtualinvoke r26.<java.lang.Character: char charValue()>();

        $i88 = (int) $c55;

        $i56 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(80, $i88);

        return $i56;

     label07:
        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid POSIX character class \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>($r22);

     label08:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Invalid POSIX character class syntax");

     label09:
        $i72 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(91, 0);

        c73 = 65535;

        z0 = 1;

        z1 = 0;

        z5 = 0;

        z4 = 0;

        z3 = 0;

        $i74 = r0.<org.apache.regexp.RECompiler: int idx>;

        i75 = 0;

        $r29 = new org.apache.regexp.RECompiler$RERange;

        specialinvoke $r29.<org.apache.regexp.RECompiler$RERange: void <init>(org.apache.regexp.RECompiler)>(r0);

        goto label37;

     label10:
        $r6 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i19 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c20 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i19);

        $i89 = (int) $c20;

        lookupswitch($i89)
        {
            case 45: goto label27;
            case 92: goto label15;
            case 94: goto label11;
            default: goto label31;
        };

     label11:
        if z0 != 0 goto label12;

        $z2 = 1;

        goto label13;

     label12:
        $z2 = 0;

     label13:
        z0 = $z2;

        $i21 = r0.<org.apache.regexp.RECompiler: int idx>;

        if $i21 != $i74 goto label14;

        $i91 = (int) 65535;

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(0, $i91, 1);

     label14:
        $i22 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i23 = $i22 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i23;

        goto label37;

     label15:
        $i24 = virtualinvoke r0.<org.apache.regexp.RECompiler: int escape()>();

        tableswitch($i24)
        {
            case 1048573: goto label17;
            case 1048574: goto label16;
            case 1048575: goto label16;
            default: goto label26;
        };

     label16:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Bad character class");

     label17:
        if z3 == 0 goto label18;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Bad character class");

     label18:
        $r7 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i25 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i26 = $i25 - 1;

        $c27 = virtualinvoke $r7.<java.lang.String: char charAt(int)>($i26);

        $i92 = (int) $c27;

        lookupswitch($i92)
        {
            case 68: goto label21;
            case 83: goto label19;
            case 87: goto label20;
            case 100: goto label24;
            case 115: goto label22;
            case 119: goto label23;
            default: goto label25;
        };

     label19:
        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(0, 7, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(char,boolean)>(11, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(14, 31, z0);

        $i94 = (int) 65535;

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(33, $i94, z0);

        goto label25;

     label20:
        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(0, 47, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(58, 64, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(91, 94, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(char,boolean)>(96, z0);

        $i96 = (int) 65535;

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(123, $i96, z0);

        goto label25;

     label21:
        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(0, 47, z0);

        $i98 = (int) 65535;

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(58, $i98, z0);

        goto label25;

     label22:
        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(char,boolean)>(9, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(char,boolean)>(13, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(char,boolean)>(12, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(char,boolean)>(10, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(char,boolean)>(8, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(char,boolean)>(32, z0);

        goto label25;

     label23:
        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(97, 122, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(65, 90, z0);

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(char,boolean)>(95, z0);

     label24:
        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(48, 57, z0);

     label25:
        c73 = 65535;

        goto label37;

     label26:
        c76 = (char) $i24;

        goto label32;

     label27:
        if z5 == 0 goto label28;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Bad class range");

     label28:
        z1 = 1;

        z5 = 1;

        z4 = 1;

        z3 = 1;

        $i99 = (int) c73;

        $i101 = (int) 65535;

        if $i99 != $i101 goto label29;

        $i77 = 0;

        goto label30;

     label29:
        $i77 = c73;

     label30:
        i75 = $i77;

        $i33 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i35 = $i33 + 1;

        $i34 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i35 >= $i34 goto label37;

        $r9 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i36 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i37 = $i36 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i37;

        $c38 = virtualinvoke $r9.<java.lang.String: char charAt(int)>($i37);

        $i102 = (int) $c38;

        if $i102 != 93 goto label37;

        c76 = 65535;

        goto label32;

     label31:
        $r10 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i39 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i40 = $i39 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i40;

        c76 = virtualinvoke $r10.<java.lang.String: char charAt(int)>($i39);

     label32:
        if z4 == 0 goto label34;

        c32 = c76;

        $i103 = (int) c76;

        if i75 < $i103 goto label33;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Bad character class");

     label33:
        $i104 = (int) c32;

        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>(i75, $i104, z0);

        c73 = 65535;

        z1 = 0;

        z5 = 0;

        z4 = 0;

        z3 = 0;

        goto label37;

     label34:
        $i29 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i28 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i29 >= $i28 goto label35;

        $r8 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i30 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c31 = virtualinvoke $r8.<java.lang.String: char charAt(int)>($i30);

        $i105 = (int) $c31;

        if $i105 == 45 goto label36;

     label35:
        virtualinvoke $r29.<org.apache.regexp.RECompiler$RERange: void include(char,boolean)>(c76, z0);

     label36:
        c73 = c76;

     label37:
        $i78 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i79 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i78 >= $i79 goto label38;

        $r5 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i17 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c18 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($i17);

        $i106 = (int) $c18;

        if $i106 != 93 goto label10;

     label38:
        $i6 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i5 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i6 != $i5 goto label39;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Unterminated character class");

     label39:
        $i7 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i8 = $i7 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i8;

        $r2 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i11 = $i72 + 1;

        $i9 = $r29.<org.apache.regexp.RECompiler$RERange: int num>;

        $c10 = (char) $i9;

        $r2[$i11] = $c10;

        i80 = 0;

        goto label41;

     label40:
        $r3 = $r29.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i13 = $r3[i80];

        $c14 = (char) $i13;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void emit(char)>($c14);

        $r4 = $r29.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i15 = $r4[i80];

        $c16 = (char) $i15;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void emit(char)>($c16);

        i80 = i80 + 1;

     label41:
        $i12 = $r29.<org.apache.regexp.RECompiler$RERange: int num>;

        if i80 < $i12 goto label40;

        return $i72;
    }

    int atom() throws org.apache.regexp.RESyntaxException
    {
        org.apache.regexp.RECompiler r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i12, $i13, $i14, $i16, $i17, $i18, i19, i21, $i22, i24, $i25, $i26, $i27, $i28, $i29;
        java.lang.String $r2, $r3, $r4, $r5, $r6;
        char $c6, $c7, $c11, $c15, c20, $c23;
        char[] $r1;

        r0 := @this: org.apache.regexp.RECompiler;

        $i0 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(65, 0);

        i19 = 0;

        goto label11;

     label01:
        $i1 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i3 = $i1 + 1;

        $i2 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i3 >= $i2 goto label05;

        $r3 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i12 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i13 = $i12 + 1;

        c20 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i13);

        $r4 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i14 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c15 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i14);

        $i27 = (int) $c15;

        if $i27 != 92 goto label03;

        i21 = r0.<org.apache.regexp.RECompiler: int idx>;

        virtualinvoke r0.<org.apache.regexp.RECompiler: int escape()>();

        $i17 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i16 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i17 >= $i16 goto label02;

        $r5 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i18 = r0.<org.apache.regexp.RECompiler: int idx>;

        c20 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($i18);

     label02:
        r0.<org.apache.regexp.RECompiler: int idx> = i21;

     label03:
        $i28 = (int) c20;

        lookupswitch($i28)
        {
            case 42: goto label04;
            case 43: goto label04;
            case 63: goto label04;
            case 123: goto label04;
            default: goto label05;
        };

     label04:
        if i19 == 0 goto label05;

        goto label12;

     label05:
        $r6 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i22 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c23 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i22);

        $i29 = (int) $c23;

        lookupswitch($i29)
        {
            case 36: goto label06;
            case 40: goto label06;
            case 41: goto label06;
            case 42: goto label07;
            case 43: goto label07;
            case 46: goto label06;
            case 63: goto label07;
            case 91: goto label06;
            case 92: goto label08;
            case 93: goto label06;
            case 94: goto label06;
            case 123: goto label07;
            case 124: goto label06;
            default: goto label10;
        };

     label06:
        goto label12;

     label07:
        if i19 != 0 goto label12;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Missing operand to closure");

        goto label12;

     label08:
        i24 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i4 = virtualinvoke r0.<org.apache.regexp.RECompiler: int escape()>();

        $i5 = $i4 & 1048560;

        if $i5 != 1048560 goto label09;

        r0.<org.apache.regexp.RECompiler: int idx> = i24;

        goto label12;

     label09:
        $c6 = (char) $i4;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void emit(char)>($c6);

        i19 = i19 + 1;

        goto label11;

     label10:
        $r2 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i9 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i10 = $i9 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i10;

        $c11 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i9);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void emit(char)>($c11);

        i19 = i19 + 1;

     label11:
        $i25 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i26 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i25 < $i26 goto label01;

     label12:
        if i19 != 0 goto label13;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void internalError()>();

     label13:
        $r1 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i8 = $i0 + 1;

        $c7 = (char) i19;

        $r1[$i8] = $c7;

        return $i0;
    }

    int terminal(int[]) throws org.apache.regexp.RESyntaxException
    {
        int[] r3;
        org.apache.regexp.RECompiler r0;
        int $i0, $i2, $i3, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i35, $i36, $i38, $i40;
        java.lang.String $r1, $r2, $r4, $r5;
        char $c1, $c4, c6, $c15, $c26;

        r0 := @this: org.apache.regexp.RECompiler;

        r3 := @parameter0: int[];

        $r1 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i0 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i30 = (int) $c1;

        lookupswitch($i30)
        {
            case 0: goto label07;
            case 36: goto label01;
            case 40: goto label03;
            case 41: goto label04;
            case 42: goto label08;
            case 43: goto label08;
            case 46: goto label01;
            case 63: goto label08;
            case 91: goto label02;
            case 92: goto label09;
            case 93: goto label06;
            case 94: goto label01;
            case 123: goto label08;
            case 124: goto label05;
            default: goto label14;
        };

     label01:
        $r5 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i24 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i25 = $i24 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i25;

        $c26 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($i24);

        $i27 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>($c26, 0);

        return $i27;

     label02:
        $i22 = virtualinvoke r0.<org.apache.regexp.RECompiler: int characterClass()>();

        return $i22;

     label03:
        $i23 = virtualinvoke r0.<org.apache.regexp.RECompiler: int expr(int[])>(r3);

        return $i23;

     label04:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Unexpected close paren");

     label05:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void internalError()>();

     label06:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Mismatched class");

     label07:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Unexpected end of input");

     label08:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Missing operand to closure");

     label09:
        $i28 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i29 = virtualinvoke r0.<org.apache.regexp.RECompiler: int escape()>();

        tableswitch($i29)
        {
            case 1048573: goto label10;
            case 1048574: goto label10;
            case 1048575: goto label11;
            default: goto label13;
        };

     label10:
        $i11 = r3[0];

        $i32 = (int) -2;

        $i12 = $i11 & $i32;

        r3[0] = $i12;

        $r4 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i13 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i14 = $i13 - 1;

        $c15 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i14);

        $i33 = (int) $c15;

        $i16 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(92, $i33);

        return $i16;

     label11:
        $r2 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i2 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i3 = $i2 - 1;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i3);

        $i34 = (int) $c4;

        $i5 = $i34 - 48;

        c6 = (char) $i5;

        $i7 = r0.<org.apache.regexp.RECompiler: int parens>;

        $i35 = (int) c6;

        if $i7 > $i35 goto label12;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Bad backreference");

     label12:
        $i8 = r3[0];

        $i9 = $i8 | 1;

        r3[0] = $i9;

        $i36 = (int) c6;

        $i10 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(35, $i36);

        return $i10;

     label13:
        r0.<org.apache.regexp.RECompiler: int idx> = $i28;

        $i17 = r3[0];

        $i38 = (int) -2;

        $i18 = $i17 & $i38;

        r3[0] = $i18;

     label14:
        $i19 = r3[0];

        $i40 = (int) -2;

        $i20 = $i19 & $i40;

        r3[0] = $i20;

        $i21 = virtualinvoke r0.<org.apache.regexp.RECompiler: int atom()>();

        return $i21;
    }

    int closure(int[]) throws org.apache.regexp.RESyntaxException
    {
        org.apache.regexp.RECompiler r0;
        java.lang.String $r3, $r27;
        char[] $r28;
        int[] $r1, r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r29;
        boolean z0, z1, z2, z3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i60, $i61, $i62, $i63, $i64, $i65, i66, $i67, $i69, $i70, $i71, $i72, i73, $i74, $i75, i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i85, $i86;
        char $c8, $c59, $c68;

        r0 := @this: org.apache.regexp.RECompiler;

        r2 := @parameter0: int[];

        i0 = r0.<org.apache.regexp.RECompiler: int idx>;

        $r1 = newarray (int)[1];

        $r1[0] = 0;

        $i1 = virtualinvoke r0.<org.apache.regexp.RECompiler: int terminal(int[])>($r1);

        $i3 = r2[0];

        $i2 = $r1[0];

        $i4 = $i3 | $i2;

        r2[0] = $i4;

        $i6 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i5 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i6 < $i5 goto label01;

        return $i1;

     label01:
        z0 = 1;

        z3 = 1;

        z2 = 1;

        $r3 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i7 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c8 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i7);

        i66 = $c8;

        $i79 = (int) $c8;

        lookupswitch($i79)
        {
            case 42: goto label02;
            case 43: goto label03;
            case 63: goto label02;
            case 123: goto label04;
            default: goto label07;
        };

     label02:
        $i64 = r2[0];

        $i65 = $i64 | 1;

        r2[0] = $i65;

     label03:
        $i62 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i63 = $i62 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i63;

     label04:
        $r28 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i67 = $i1 + 0;

        $c68 = $r28[$i67];

        $i80 = (int) $c68;

        if $i80 == 94 goto label05;

        $i81 = (int) $c68;

        if $i81 != 36 goto label06;

     label05:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Bad closure operand");

     label06:
        $i69 = $r1[0];

        $i70 = $i69 & 1;

        if $i70 == 0 goto label07;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Closure operand can\'t be nullable");

     label07:
        $i71 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i72 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i71 >= $i72 goto label08;

        $r27 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i58 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c59 = virtualinvoke $r27.<java.lang.String: char charAt(int)>($i58);

        $i82 = (int) $c59;

        if $i82 != 63 goto label08;

        $i60 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i61 = $i60 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i61;

        z0 = 0;

        z3 = 0;

        z2 = 0;

     label08:
        if z2 == 0 goto label31;

        $i83 = (int) $c8;

        lookupswitch($i83)
        {
            case 42: goto label26;
            case 43: goto label29;
            case 63: goto label26;
            case 123: goto label09;
            default: goto label30;
        };

     label09:
        z1 = 0;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void allocBrackets()>();

        i73 = 0;

        goto label12;

     label10:
        $r4 = r0.<org.apache.regexp.RECompiler: int[] bracketStart>;

        $i12 = $r4[i73];

        $i11 = r0.<org.apache.regexp.RECompiler: int idx>;

        if $i12 != $i11 goto label11;

        z1 = 1;

        goto label13;

     label11:
        i73 = i73 + 1;

     label12:
        $i10 = r0.<org.apache.regexp.RECompiler: int brackets>;

        if i73 < $i10 goto label10;

     label13:
        if z1 != 0 goto label15;

        $i47 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i46 = r0.<org.apache.regexp.RECompiler: int maxBrackets>;

        if $i47 < $i46 goto label14;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void reallocBrackets()>();

     label14:
        $r25 = r0.<org.apache.regexp.RECompiler: int[] bracketStart>;

        $i49 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i48 = r0.<org.apache.regexp.RECompiler: int idx>;

        $r25[$i49] = $i48;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void bracket()>();

        $r26 = r0.<org.apache.regexp.RECompiler: int[] bracketEnd>;

        $i51 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i50 = r0.<org.apache.regexp.RECompiler: int idx>;

        $r26[$i51] = $i50;

        $i52 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i53 = $i52 + 1;

        r0.<org.apache.regexp.RECompiler: int brackets> = $i53;

        i73 = $i52;

     label15:
        $r29 = r0.<org.apache.regexp.RECompiler: int[] bracketMin>;

        $i74 = $r29[i73];

        $i75 = $i74 - 1;

        $r29[i73] = $i75;

        if $i74 <= 0 goto label21;

        $r12 = r0.<org.apache.regexp.RECompiler: int[] bracketMin>;

        $i30 = $r12[i73];

        if $i30 > 0 goto label16;

        $r23 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i44 = $r23[i73];

        if $i44 == 0 goto label20;

     label16:
        i76 = 0;

        goto label19;

     label17:
        if i76 == i73 goto label18;

        $r13 = r0.<org.apache.regexp.RECompiler: int[] bracketStart>;

        $i32 = $r13[i76];

        $i31 = r0.<org.apache.regexp.RECompiler: int idx>;

        if $i32 >= $i31 goto label18;

        $r14 = r0.<org.apache.regexp.RECompiler: int[] bracketStart>;

        $i33 = $r14[i76];

        if $i33 < i0 goto label18;

        $i34 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i35 = $i34 - 1;

        r0.<org.apache.regexp.RECompiler: int brackets> = $i35;

        $r16 = r0.<org.apache.regexp.RECompiler: int[] bracketStart>;

        $r15 = r0.<org.apache.regexp.RECompiler: int[] bracketStart>;

        $i36 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i37 = $r15[$i36];

        $r16[i76] = $i37;

        $r18 = r0.<org.apache.regexp.RECompiler: int[] bracketEnd>;

        $r17 = r0.<org.apache.regexp.RECompiler: int[] bracketEnd>;

        $i38 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i39 = $r17[$i38];

        $r18[i76] = $i39;

        $r20 = r0.<org.apache.regexp.RECompiler: int[] bracketMin>;

        $r19 = r0.<org.apache.regexp.RECompiler: int[] bracketMin>;

        $i40 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i41 = $r19[$i40];

        $r20[i76] = $i41;

        $r22 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $r21 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i42 = r0.<org.apache.regexp.RECompiler: int brackets>;

        $i43 = $r21[$i42];

        $r22[i76] = $i43;

     label18:
        i76 = i76 + 1;

     label19:
        $i77 = r0.<org.apache.regexp.RECompiler: int brackets>;

        if i76 < $i77 goto label17;

        r0.<org.apache.regexp.RECompiler: int idx> = i0;

        goto label30;

     label20:
        $r24 = r0.<org.apache.regexp.RECompiler: int[] bracketEnd>;

        $i45 = $r24[i73];

        r0.<org.apache.regexp.RECompiler: int idx> = $i45;

        goto label30;

     label21:
        $r5 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i13 = $r5[i73];

        $i85 = (int) -1;

        if $i13 != $i85 goto label22;

        i66 = 42;

        $r10 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $r10[i73] = 0;

        $r11 = r0.<org.apache.regexp.RECompiler: int[] bracketEnd>;

        $i29 = $r11[i73];

        r0.<org.apache.regexp.RECompiler: int idx> = $i29;

        goto label26;

     label22:
        $r6 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i14 = $r6[i73];

        $i15 = $i14 - 1;

        $r6[i73] = $i15;

        if $i14 <= 0 goto label25;

        $r8 = r0.<org.apache.regexp.RECompiler: int[] bracketOpt>;

        $i17 = $r8[i73];

        if $i17 <= 0 goto label23;

        r0.<org.apache.regexp.RECompiler: int idx> = i0;

        goto label24;

     label23:
        $r9 = r0.<org.apache.regexp.RECompiler: int[] bracketEnd>;

        $i18 = $r9[i73];

        r0.<org.apache.regexp.RECompiler: int idx> = $i18;

     label24:
        i66 = 63;

        goto label26;

     label25:
        r0.<org.apache.regexp.RECompiler: int lenInstruction> = $i1;

        virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(78, 0);

        $r7 = r0.<org.apache.regexp.RECompiler: int[] bracketEnd>;

        $i16 = $r7[i73];

        r0.<org.apache.regexp.RECompiler: int idx> = $i16;

        goto label30;

     label26:
        if z3 != 0 goto label27;

        goto label30;

     label27:
        if i66 != 63 goto label28;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void nodeInsert(char,int,int)>(124, 0, $i1);

        $i26 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(124, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i1, $i26);

        $i27 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(78, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i1, $i27);

        $i28 = $i1 + 3;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i28, $i27);

     label28:
        if i66 != 42 goto label30;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void nodeInsert(char,int,int)>(124, 0, $i1);

        $i19 = $i1 + 3;

        $i20 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(124, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i19, $i20);

        $i21 = $i1 + 3;

        $i22 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(71, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i21, $i22);

        $i23 = $i1 + 3;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i23, $i1);

        $i24 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(124, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i1, $i24);

        $i25 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(78, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i1, $i25);

        goto label30;

     label29:
        $i54 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(124, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i1, $i54);

        $i55 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(71, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i55, $i1);

        $i56 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(124, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i54, $i56);

        $i57 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(78, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i1, $i57);

     label30:
        goto label36;

     label31:
        $i9 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(69, 0);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i1, $i9);

        $i86 = (int) $c8;

        lookupswitch($i86)
        {
            case 42: goto label33;
            case 43: goto label34;
            case 63: goto label32;
            default: goto label35;
        };

     label32:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void nodeInsert(char,int,int)>(47, 0, $i1);

        goto label35;

     label33:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void nodeInsert(char,int,int)>(56, 0, $i1);

        goto label35;

     label34:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void nodeInsert(char,int,int)>(61, 0, $i1);

     label35:
        $i78 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i1, $i78);

     label36:
        return $i1;
    }

    int branch(int[]) throws org.apache.regexp.RESyntaxException
    {
        org.apache.regexp.RECompiler r0;
        int[] r1, r2;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i8, i9, $i10, $i11, $i13, $i15, $i16, $i17, $i19;
        java.lang.String $r3, $r4;
        boolean z0;
        char $c4, $c6;

        r0 := @this: org.apache.regexp.RECompiler;

        r2 := @parameter0: int[];

        $i0 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(124, 0);

        $i13 = (int) -1;

        i9 = $i13;

        r1 = newarray (int)[1];

        z0 = 1;

        goto label4;

     label1:
        r1[0] = 0;

        $i7 = virtualinvoke r0.<org.apache.regexp.RECompiler: int closure(int[])>(r1);

        $i8 = r1[0];

        if $i8 != 0 goto label2;

        z0 = 0;

     label2:
        $i15 = (int) -1;

        if i9 == $i15 goto label3;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>(i9, $i7);

     label3:
        i9 = $i7;

     label4:
        $i10 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i11 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i10 >= $i11 goto label5;

        $r3 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i3 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c4 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i3);

        $i16 = (int) $c4;

        if $i16 == 124 goto label5;

        $r4 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i5 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c6 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i5);

        $i17 = (int) $c6;

        if $i17 != 41 goto label1;

     label5:
        $i19 = (int) -1;

        if i9 != $i19 goto label6;

        virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(78, 0);

     label6:
        if z0 == 0 goto label7;

        $i1 = r2[0];

        $i2 = $i1 | 1;

        r2[0] = $i2;

     label7:
        return $i0;
    }

    int expr(int[]) throws org.apache.regexp.RESyntaxException
    {
        byte b33, b48, b49;
        org.apache.regexp.RECompiler r0;
        java.lang.String $r4, $r5, $r6, $r7, $r8;
        char[] $r2, $r3, $r9;
        int[] r1;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i9, $i10, $i11, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i31, $i32, i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, i44, i45, $i46, $i51, $i52, $i53, $i54, $i56, $i58, $i59, $i60, $i61, $i62;
        char $c5, $c8, $c12, $c16, $c21, $c27, $c30, c47;

        r0 := @this: org.apache.regexp.RECompiler;

        r1 := @parameter0: int[];

        b33 = -1;

        b49 = -1;

        b48 = -1;

        $i51 = (int) -1;

        i34 = $i51;

        i0 = r0.<org.apache.regexp.RECompiler: int parens>;

        $i1 = r1[0];

        $i2 = $i1 & 2;

        if $i2 != 0 goto label02;

        $r6 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i20 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c21 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i20);

        $i52 = (int) $c21;

        if $i52 != 40 goto label02;

        $i22 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i24 = $i22 + 2;

        $i23 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i24 >= $i23 goto label01;

        $r7 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i25 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i26 = $i25 + 1;

        $c27 = virtualinvoke $r7.<java.lang.String: char charAt(int)>($i26);

        $i53 = (int) $c27;

        if $i53 != 63 goto label01;

        $r8 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i28 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i29 = $i28 + 2;

        $c30 = virtualinvoke $r8.<java.lang.String: char charAt(int)>($i29);

        $i54 = (int) $c30;

        if $i54 != 58 goto label01;

        b33 = 2;

        b49 = 2;

        b48 = 2;

        $i31 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i32 = $i31 + 3;

        r0.<org.apache.regexp.RECompiler: int idx> = $i32;

        i34 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(60, 0);

        goto label02;

     label01:
        b33 = 1;

        b49 = 1;

        b48 = 1;

        $i35 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i36 = $i35 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i36;

        $i37 = r0.<org.apache.regexp.RECompiler: int parens>;

        $i38 = $i37 + 1;

        r0.<org.apache.regexp.RECompiler: int parens> = $i38;

        i34 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(40, $i37);

     label02:
        $i39 = r1[0];

        $i56 = (int) -3;

        $i40 = $i39 & $i56;

        r1[0] = $i40;

        $i41 = virtualinvoke r0.<org.apache.regexp.RECompiler: int branch(int[])>(r1);

        $i58 = (int) -1;

        if i34 != $i58 goto label03;

        i34 = $i41;

        goto label05;

     label03:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>(i34, $i41);

        goto label05;

     label04:
        $i17 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i18 = $i17 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i18;

        $i19 = virtualinvoke r0.<org.apache.regexp.RECompiler: int branch(int[])>(r1);

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>(i34, $i19);

     label05:
        $i42 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i43 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i42 >= $i43 goto label06;

        $r5 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i15 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c16 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($i15);

        $i59 = (int) $c16;

        if $i59 == 124 goto label04;

     label06:
        if b48 <= 0 goto label10;

        $i10 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i9 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i10 >= $i9 goto label07;

        $r4 = r0.<org.apache.regexp.RECompiler: java.lang.String pattern>;

        $i11 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c12 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i11);

        $i60 = (int) $c12;

        if $i60 != 41 goto label07;

        $i13 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i14 = $i13 + 1;

        r0.<org.apache.regexp.RECompiler: int idx> = $i14;

        goto label08;

     label07:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Missing close paren");

     label08:
        if b49 != 1 goto label09;

        i44 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(41, i0);

        goto label11;

     label09:
        i44 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(62, 0);

        goto label11;

     label10:
        i44 = virtualinvoke r0.<org.apache.regexp.RECompiler: int node(char,int)>(69, 0);

     label11:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>(i34, i44);

        i45 = i34;

        $r9 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i46 = i34 + 2;

        c47 = $r9[$i46];

        goto label14;

     label12:
        $r2 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i4 = i45 + 0;

        $c5 = $r2[$i4];

        $i61 = (int) $c5;

        if $i61 != 124 goto label13;

        $i7 = i45 + 3;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void setNextOfEnd(int,int)>($i7, i44);

     label13:
        $r3 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i6 = i45 + 2;

        $c8 = $r3[$i6];

        c47 = $c8;

        $i62 = (int) $c8;

        i45 = i45 + $i62;

     label14:
        if c47 == 0 goto label15;

        $i3 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        if i45 < $i3 goto label12;

     label15:
        return i34;
    }

    public org.apache.regexp.REProgram compile(java.lang.String) throws org.apache.regexp.RESyntaxException
    {
        org.apache.regexp.REProgram $r6;
        char $c4;
        org.apache.regexp.RECompiler r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8;
        char[] $r3, $r4;
        java.lang.String r1;

        r0 := @this: org.apache.regexp.RECompiler;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.regexp.RECompiler: java.lang.String pattern> = r1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r0.<org.apache.regexp.RECompiler: int len> = $i0;

        r0.<org.apache.regexp.RECompiler: int idx> = 0;

        r0.<org.apache.regexp.RECompiler: int lenInstruction> = 0;

        r0.<org.apache.regexp.RECompiler: int parens> = 1;

        r0.<org.apache.regexp.RECompiler: int brackets> = 0;

        $r2 = newarray (int)[1];

        $r2[0] = 2;

        virtualinvoke r0.<org.apache.regexp.RECompiler: int expr(int[])>($r2);

        $i2 = r0.<org.apache.regexp.RECompiler: int idx>;

        $i1 = r0.<org.apache.regexp.RECompiler: int len>;

        if $i2 == $i1 goto label2;

        $i3 = r0.<org.apache.regexp.RECompiler: int idx>;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i3);

        $i8 = (int) $c4;

        if $i8 != 41 goto label1;

        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Unmatched close paren");

     label1:
        virtualinvoke r0.<org.apache.regexp.RECompiler: void syntaxError(java.lang.String)>("Unexpected input remains");

     label2:
        $i5 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        $r3 = newarray (char)[$i5];

        $r4 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i6 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i6);

        $r6 = new org.apache.regexp.REProgram;

        $i7 = r0.<org.apache.regexp.RECompiler: int parens>;

        specialinvoke $r6.<org.apache.regexp.REProgram: void <init>(int,char[])>($i7, $r3);

        return $r6;
    }

    static void <clinit>()
    {
        java.lang.Character $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27;
        java.util.Hashtable $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28;

        <org.apache.regexp.RECompiler: int bracketUnbounded> = -1;

        <org.apache.regexp.RECompiler: int ESC_CLASS> = 1048573;

        <org.apache.regexp.RECompiler: int ESC_COMPLEX> = 1048574;

        <org.apache.regexp.RECompiler: int ESC_BACKREF> = 1048575;

        <org.apache.regexp.RECompiler: int ESC_MASK> = 1048560;

        <org.apache.regexp.RECompiler: int NODE_TOPLEVEL> = 2;

        <org.apache.regexp.RECompiler: int NODE_NULLABLE> = 1;

        <org.apache.regexp.RECompiler: int NODE_NORMAL> = 0;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX> = $r0;

        $r2 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r1 = new java.lang.Character;

        specialinvoke $r1.<java.lang.Character: void <init>(char)>(119);

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("alnum", $r1);

        $r4 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r3 = new java.lang.Character;

        specialinvoke $r3.<java.lang.Character: void <init>(char)>(97);

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("alpha", $r3);

        $r6 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r5 = new java.lang.Character;

        specialinvoke $r5.<java.lang.Character: void <init>(char)>(98);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("blank", $r5);

        $r8 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r7 = new java.lang.Character;

        specialinvoke $r7.<java.lang.Character: void <init>(char)>(99);

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("cntrl", $r7);

        $r10 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r9 = new java.lang.Character;

        specialinvoke $r9.<java.lang.Character: void <init>(char)>(100);

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("digit", $r9);

        $r12 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r11 = new java.lang.Character;

        specialinvoke $r11.<java.lang.Character: void <init>(char)>(103);

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("graph", $r11);

        $r14 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r13 = new java.lang.Character;

        specialinvoke $r13.<java.lang.Character: void <init>(char)>(108);

        virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("lower", $r13);

        $r16 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r15 = new java.lang.Character;

        specialinvoke $r15.<java.lang.Character: void <init>(char)>(112);

        virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("print", $r15);

        $r18 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r17 = new java.lang.Character;

        specialinvoke $r17.<java.lang.Character: void <init>(char)>(33);

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("punct", $r17);

        $r20 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r19 = new java.lang.Character;

        specialinvoke $r19.<java.lang.Character: void <init>(char)>(115);

        virtualinvoke $r20.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("space", $r19);

        $r22 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r21 = new java.lang.Character;

        specialinvoke $r21.<java.lang.Character: void <init>(char)>(117);

        virtualinvoke $r22.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("upper", $r21);

        $r24 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r23 = new java.lang.Character;

        specialinvoke $r23.<java.lang.Character: void <init>(char)>(120);

        virtualinvoke $r24.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("xdigit", $r23);

        $r26 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r25 = new java.lang.Character;

        specialinvoke $r25.<java.lang.Character: void <init>(char)>(106);

        virtualinvoke $r26.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("javastart", $r25);

        $r28 = <org.apache.regexp.RECompiler: java.util.Hashtable hashPOSIX>;

        $r27 = new java.lang.Character;

        specialinvoke $r27.<java.lang.Character: void <init>(char)>(107);

        virtualinvoke $r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("javapart", $r27);

        return;
    }
}
