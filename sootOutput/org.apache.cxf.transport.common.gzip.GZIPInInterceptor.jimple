public class org.apache.cxf.transport.common.gzip.GZIPInInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    private static final java.util.ResourceBundle BUNDLE;
    private static final java.util.logging.Logger LOG;

    public void <init>()
    {
        org.apache.cxf.transport.common.gzip.GZIPInInterceptor r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.cxf.transport.common.gzip.GZIPInInterceptor;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>("receive");

        $r1 = class "Lorg/apache/cxf/interceptor/AttachmentInInterceptor;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.cxf.transport.common.gzip.GZIPInInterceptor: void addBefore(java.lang.String)>($r2);

        return;
    }

    public void handleMessage(org.apache.cxf.message.Message) throws org.apache.cxf.interceptor.Fault
    {
        java.util.zip.GZIPInputStream $r8;
        java.lang.Object[] $r23;
        org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip $r14;
        org.apache.cxf.common.i18n.Message $r22;
        org.apache.cxf.interceptor.Fault $r21;
        java.util.ResourceBundle $r24;
        java.util.Map $r3, $r4;
        java.lang.String $r1, $r15, r17;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r10;
        org.apache.cxf.message.Message r0;
        java.util.Set $r9;
        java.io.IOException $r20;
        java.util.logging.Logger $r6;
        org.apache.cxf.message.Exchange $r12;
        java.util.List $r5, r25;
        org.apache.cxf.endpoint.Endpoint $r13;
        org.apache.cxf.transport.common.gzip.GZIPInInterceptor r11;
        java.lang.Object $r2, $r7, $r16, $r19;
        java.io.InputStream $r18;

        r11 := @this: org.apache.cxf.transport.common.gzip.GZIPInInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = <org.apache.cxf.message.Message: java.lang.String PROTOCOL_HEADERS>;

        $r2 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.util.Map) $r2;

        $r4 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map)>($r3);

        if $r4 == null goto label10;

        $r5 = staticinvoke <org.apache.cxf.helpers.HttpHeaderHelper: java.util.List getHeader(java.util.Map,java.lang.String)>($r4, "Content-Encoding");

        r25 = $r5;

        if $r5 != null goto label01;

        $r19 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("SOAPJMS_contentEncoding");

        r25 = (java.util.List) $r19;

     label01:
        if r25 == null goto label10;

        $z0 = interfaceinvoke r25.<java.util.List: boolean contains(java.lang.Object)>("gzip");

        if $z0 != 0 goto label02;

        $z4 = interfaceinvoke r25.<java.util.List: boolean contains(java.lang.Object)>("x-gzip");

        if $z4 == 0 goto label10;

     label02:
        $r6 = <org.apache.cxf.transport.common.gzip.GZIPInInterceptor: java.util.logging.Logger LOG>;

        virtualinvoke $r6.<java.util.logging.Logger: void fine(java.lang.String)>("Uncompressing response");

        $r7 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/io/InputStream;");

        $r18 = (java.io.InputStream) $r7;

        if $r18 != null goto label04;

     label03:
        return;

     label04:
        $r8 = new java.util.zip.GZIPInputStream;

        specialinvoke $r8.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r18);

        interfaceinvoke r0.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/io/InputStream;", $r8);

        $r9 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r16 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r16;

        $z3 = virtualinvoke r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Content-Encoding");

        if $z3 == 0 goto label06;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r17);

        goto label07;

     label06:
        goto label05;

     label07:
        $z2 = virtualinvoke r11.<org.apache.cxf.transport.common.gzip.GZIPInInterceptor: boolean isRequestor(org.apache.cxf.message.Message)>(r0);

        if $z2 == 0 goto label08;

        $r12 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r13 = interfaceinvoke $r12.<org.apache.cxf.message.Exchange: org.apache.cxf.endpoint.Endpoint getEndpoint()>();

        $r15 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor: java.lang.String USE_GZIP_KEY>;

        $r14 = <org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip: org.apache.cxf.transport.common.gzip.GZIPOutInterceptor$UseGzip YES>;

        interfaceinvoke $r13.<org.apache.cxf.endpoint.Endpoint: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r14);

     label08:
        goto label10;

     label09:
        $r20 := @caughtexception;

        $r21 = new org.apache.cxf.interceptor.Fault;

        $r22 = new org.apache.cxf.common.i18n.Message;

        $r24 = <org.apache.cxf.transport.common.gzip.GZIPInInterceptor: java.util.ResourceBundle BUNDLE>;

        $r23 = newarray (java.lang.Object)[0];

        specialinvoke $r22.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("COULD_NOT_UNZIP", $r24, $r23);

        specialinvoke $r21.<org.apache.cxf.interceptor.Fault: void <init>(org.apache.cxf.common.i18n.Message,java.lang.Throwable)>($r22, $r20);

        throw $r21;

     label10:
        return;

        catch java.io.IOException from label02 to label03 with label09;
        catch java.io.IOException from label04 to label08 with label09;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle $r0;
        java.util.logging.Logger $r1;

        $r0 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class)>(class "Lorg/apache/cxf/transport/common/gzip/GZIPInInterceptor;");

        <org.apache.cxf.transport.common.gzip.GZIPInInterceptor: java.util.ResourceBundle BUNDLE> = $r0;

        $r1 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/transport/common/gzip/GZIPInInterceptor;");

        <org.apache.cxf.transport.common.gzip.GZIPInInterceptor: java.util.logging.Logger LOG> = $r1;

        return;
    }
}
