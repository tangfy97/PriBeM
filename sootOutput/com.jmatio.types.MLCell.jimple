public class com.jmatio.types.MLCell extends com.jmatio.types.MLArray
{
    private java.util.ArrayList cells;

    public void <init>(java.lang.String, int[])
    {
        java.lang.String r1;
        int[] r2;
        com.jmatio.types.MLCell r0;

        r0 := @this: com.jmatio.types.MLCell;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        specialinvoke r0.<com.jmatio.types.MLCell: void <init>(java.lang.String,int[],int,int)>(r1, r2, 1, 0);

        return;
    }

    public void <init>(java.lang.String, int[], int, int)
    {
        java.util.ArrayList $r3, $r5;
        int[] r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        com.jmatio.types.MLEmptyArray $r4;
        java.lang.String r1;
        com.jmatio.types.MLCell r0;

        r0 := @this: com.jmatio.types.MLCell;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.jmatio.types.MLArray: void <init>(java.lang.String,int[],int,int)>(r1, r2, i0, i1);

        $r3 = new java.util.ArrayList;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLCell: int getM()>();

        $i3 = virtualinvoke r0.<com.jmatio.types.MLCell: int getN()>();

        $i4 = $i2 * $i3;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i4);

        r0.<com.jmatio.types.MLCell: java.util.ArrayList cells> = $r3;

        i8 = 0;

     label1:
        $i5 = virtualinvoke r0.<com.jmatio.types.MLCell: int getM()>();

        $i6 = virtualinvoke r0.<com.jmatio.types.MLCell: int getN()>();

        $i7 = $i5 * $i6;

        if i8 >= $i7 goto label2;

        $r5 = r0.<com.jmatio.types.MLCell: java.util.ArrayList cells>;

        $r4 = new com.jmatio.types.MLEmptyArray;

        specialinvoke $r4.<com.jmatio.types.MLEmptyArray: void <init>()>();

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        i8 = i8 + 1;

        goto label1;

     label2:
        return;
    }

    public void set(com.jmatio.types.MLArray, int, int)
    {
        com.jmatio.types.MLArray r2;
        int i0, i1, $i2;
        com.jmatio.types.MLCell r0;
        java.util.ArrayList $r1;

        r0 := @this: com.jmatio.types.MLCell;

        r2 := @parameter0: com.jmatio.types.MLArray;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<com.jmatio.types.MLCell: java.util.ArrayList cells>;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLCell: int getIndex(int,int)>(i0, i1);

        virtualinvoke $r1.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i2, r2);

        return;
    }

    public void set(com.jmatio.types.MLArray, int)
    {
        com.jmatio.types.MLArray r1;
        int i0;
        com.jmatio.types.MLCell r0;
        java.util.ArrayList $r2;

        r0 := @this: com.jmatio.types.MLCell;

        r1 := @parameter0: com.jmatio.types.MLArray;

        i0 := @parameter1: int;

        $r2 = r0.<com.jmatio.types.MLCell: java.util.ArrayList cells>;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return;
    }

    public com.jmatio.types.MLArray get(int, int)
    {
        com.jmatio.types.MLArray $r3;
        int i0, i1, $i2;
        java.lang.Object $r2;
        com.jmatio.types.MLCell r0;
        java.util.ArrayList $r1;

        r0 := @this: com.jmatio.types.MLCell;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.jmatio.types.MLCell: java.util.ArrayList cells>;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLCell: int getIndex(int,int)>(i0, i1);

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r3 = (com.jmatio.types.MLArray) $r2;

        return $r3;
    }

    public com.jmatio.types.MLArray get(int)
    {
        com.jmatio.types.MLArray $r3;
        int i0;
        java.lang.Object $r2;
        com.jmatio.types.MLCell r0;
        java.util.ArrayList $r1;

        r0 := @this: com.jmatio.types.MLCell;

        i0 := @parameter0: int;

        $r1 = r0.<com.jmatio.types.MLCell: java.util.ArrayList cells>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (com.jmatio.types.MLArray) $r2;

        return $r3;
    }

    public int getIndex(int, int)
    {
        int i0, i1, $i2, $i3, $i4;
        com.jmatio.types.MLCell r0;

        r0 := @this: com.jmatio.types.MLCell;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.jmatio.types.MLCell: int getM()>();

        $i3 = i1 * $i2;

        $i4 = i0 + $i3;

        return $i4;
    }

    public java.util.ArrayList cells()
    {
        com.jmatio.types.MLCell r0;
        java.util.ArrayList $r1;

        r0 := @this: com.jmatio.types.MLCell;

        $r1 = r0.<com.jmatio.types.MLCell: java.util.ArrayList cells>;

        return $r1;
    }

    public java.lang.String contentToString()
    {
        com.jmatio.types.MLArray $r8;
        java.lang.StringBuffer $r0;
        int $i0, $i1, i2, i3;
        java.lang.StringBuilder $r1, $r4, $r5;
        java.lang.String $r3, $r6, $r7;
        com.jmatio.types.MLCell r2;

        r2 := @this: com.jmatio.types.MLCell;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<com.jmatio.types.MLCell: java.lang.String name>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = \n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        i2 = 0;

     label1:
        $i0 = virtualinvoke r2.<com.jmatio.types.MLCell: int getM()>();

        if i2 >= $i0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        i3 = 0;

     label2:
        $i1 = virtualinvoke r2.<com.jmatio.types.MLCell: int getN()>();

        if i3 >= $i1 goto label3;

        $r8 = virtualinvoke r2.<com.jmatio.types.MLCell: com.jmatio.types.MLArray get(int,int)>(i2, i3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i2 = i2 + 1;

        goto label1;

     label4:
        $r7 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }
}
