public abstract class org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration extends org.eclipse.jdt.internal.compiler.ast.ASTNode implements org.eclipse.jdt.internal.compiler.problem.ProblemSeverities, org.eclipse.jdt.internal.compiler.impl.ReferenceContext
{
    public org.eclipse.jdt.internal.compiler.lookup.MethodScope scope;
    public char[] selector;
    public int declarationSourceStart;
    public int declarationSourceEnd;
    public int modifiers;
    public int modifiersSourceStart;
    public org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations;
    public org.eclipse.jdt.internal.compiler.ast.Argument[] arguments;
    public org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions;
    public org.eclipse.jdt.internal.compiler.ast.Statement[] statements;
    public int explicitDeclarations;
    public org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding;
    public boolean ignoreFurtherInvestigation;
    public org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc;
    public int bodyStart;
    public int bodyEnd;
    public org.eclipse.jdt.internal.compiler.CompilationResult compilationResult;

    void <init>(org.eclipse.jdt.internal.compiler.CompilationResult)
    {
        int $i1;
        org.eclipse.jdt.internal.compiler.CompilationResult r1;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.CompilationResult;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.ASTNode: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean ignoreFurtherInvestigation> = 0;

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyEnd> = $i1;

        r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult> = r1;

        return;
    }

    public void abort(int, org.eclipse.jdt.core.compiler.CategorizedProblem)
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem r2;
        org.eclipse.jdt.internal.compiler.CompilationResult $r3, $r5, $r7, $r9;
        org.eclipse.jdt.internal.compiler.problem.AbortType $r0;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit $r4;
        org.eclipse.jdt.internal.compiler.problem.AbortMethod $r8;
        int i0;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r1;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r6;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        i0 := @parameter0: int;

        r2 := @parameter1: org.eclipse.jdt.core.compiler.CategorizedProblem;

        tableswitch(i0)
        {
            case 2: goto label1;
            case 3: goto label4;
            case 4: goto label2;
            case 5: goto label4;
            case 6: goto label4;
            case 7: goto label4;
            case 8: goto label3;
            default: goto label4;
        };

     label1:
        $r6 = new org.eclipse.jdt.internal.compiler.problem.AbortCompilation;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.problem.AbortCompilation: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.core.compiler.CategorizedProblem)>($r7, r2);

        throw $r6;

     label2:
        $r4 = new org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.core.compiler.CategorizedProblem)>($r5, r2);

        throw $r4;

     label3:
        $r0 = new org.eclipse.jdt.internal.compiler.problem.AbortType;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.problem.AbortType: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.core.compiler.CategorizedProblem)>($r3, r2);

        throw $r0;

     label4:
        $r8 = new org.eclipse.jdt.internal.compiler.problem.AbortMethod;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.problem.AbortMethod: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.core.compiler.CategorizedProblem)>($r9, r2);

        throw $r8;
    }

    public abstract void analyseCode(org.eclipse.jdt.internal.compiler.lookup.ClassScope, org.eclipse.jdt.internal.compiler.flow.InitializationFlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo);

    public void bindArguments()
    {
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding $r12;
        org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[][] r21;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r9, $r19;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r8;
        org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] $r11, $r13, $r14;
        org.eclipse.jdt.internal.compiler.ast.Argument[] $r1, $r4, $r17, $r18, $r22;
        boolean $z0, $z1, $z2, z3;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r2, $r3, $r6, $r15, $r16;
        org.eclipse.jdt.internal.compiler.ast.Argument r5, $r20;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r10;
        int i0, i1, i2, $i3, i4;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] $r7;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        if $r1 == null goto label13;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        if $r2 != null goto label03;

        i0 = 0;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        i1 = lengthof $r17;

        goto label02;

     label01:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        $r20 = $r18[i0];

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Argument: void bind(org.eclipse.jdt.internal.compiler.lookup.MethodScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,boolean)>($r19, null, 1);

        i0 = i0 + 1;

     label02:
        if i0 < i1 goto label01;

        return;

     label03:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $z0 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isAbstract()>();

        if $z0 != 0 goto label04;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $z1 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isNative()>();

        if $z1 != 0 goto label04;

        $z2 = 0;

        goto label05;

     label04:
        $z2 = 1;

     label05:
        z3 = $z2;

        r21 = (org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[][]) null;

        i2 = 0;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        $i3 = lengthof $r22;

        goto label12;

     label06:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        r5 = $r4[i2];

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $r7 = $r6.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] parameters>;

        $r8 = $r7[i2];

        virtualinvoke r5.<org.eclipse.jdt.internal.compiler.ast.Argument: void bind(org.eclipse.jdt.internal.compiler.lookup.MethodScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,boolean)>($r9, $r8, z3);

        $r10 = r5.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        if $r10 == null goto label10;

        if r21 != null goto label09;

        r21 = newarray (org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[])[$i3];

        i4 = 0;

        goto label08;

     label07:
        $r14 = <org.eclipse.jdt.internal.compiler.lookup.Binding: org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] NO_ANNOTATIONS>;

        r21[i4] = $r14;

        i4 = i4 + 1;

     label08:
        if i4 < i2 goto label07;

     label09:
        $r12 = r5.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding binding>;

        $r13 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] getAnnotations()>();

        r21[i2] = $r13;

        goto label11;

     label10:
        if r21 == null goto label11;

        $r11 = <org.eclipse.jdt.internal.compiler.lookup.Binding: org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] NO_ANNOTATIONS>;

        r21[i2] = $r11;

     label11:
        i2 = i2 + 1;

     label12:
        if i2 < $i3 goto label06;

        if r21 == null goto label13;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: void setParameterAnnotations(org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[][])>(r21);

     label13:
        return;
    }

    public void bindThrownExceptions()
    {
        char[][] r13, $r14, $r15;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] $r4, $r7, $r11, $r20;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r1, $r5, $r8, $r18;
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r2, $r3, $r6, $r10, $r19;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r9, $r22;
        int i0, i1, i2, $i3, i4, i5, i6;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding r12, $r21;
        char[] r16, $r17;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        if $r1 == null goto label9;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        if $r2 == null goto label9;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] thrownExceptions>;

        if $r4 == null goto label9;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        i0 = lengthof $r5;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $r7 = $r6.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] thrownExceptions>;

        i1 = lengthof $r7;

        if i1 != i0 goto label3;

        i4 = 0;

        goto label2;

     label1:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        $r22 = $r18[i4];

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $r20 = $r19.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] thrownExceptions>;

        $r21 = $r20[i4];

        $r22.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r21;

        i4 = i4 + 1;

     label2:
        if i4 < i1 goto label1;

        goto label9;

     label3:
        i5 = 0;

        i6 = 0;

        goto label8;

     label4:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        r9 = $r8[i6];

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] thrownExceptions>;

        r12 = $r11[i5];

        r13 = r12.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: char[][] compoundName>;

        if r13 != null goto label5;

        goto label7;

     label5:
        $z0 = r9 instanceof org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;

        if $z0 == 0 goto label6;

        i2 = lengthof r13;

        $r15 = virtualinvoke r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        r16 = $r15[0];

        $i3 = i2 - 1;

        $r17 = r13[$i3];

        $z2 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[],char[])>(r16, $r17);

        if $z2 == 0 goto label7;

        r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = r12;

        i5 = i5 + 1;

        goto label7;

     label6:
        $r14 = virtualinvoke r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: char[][] getTypeName()>();

        $z1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: boolean equals(char[][],char[][])>($r14, r13);

        if $z1 == 0 goto label7;

        r9.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = r12;

        i5 = i5 + 1;

     label7:
        i6 = i6 + 1;

     label8:
        if i6 >= i0 goto label9;

        if i5 < i1 goto label4;

     label9:
        return;
    }

    public org.eclipse.jdt.internal.compiler.CompilationResult compilationResult()
    {
        org.eclipse.jdt.internal.compiler.CompilationResult $r1;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        return $r1;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.ClassScope, org.eclipse.jdt.internal.compiler.ClassFile)
    {
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r4, $r10, $r18;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r3, $r8, $r14, $r22;
        org.eclipse.jdt.internal.compiler.ClassFile r0;
        org.eclipse.jdt.internal.compiler.CompilationResult $r6, $r12, $r16, $r17, $r20;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r5, $r11, $r19;
        org.eclipse.jdt.core.compiler.CategorizedProblem[] $r7, $r13, $r21, r25, r26, r27;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r24;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream $r1, $r23;
        org.eclipse.jdt.internal.compiler.problem.AbortMethod $r9, $r15;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r2;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        r24 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.ClassFile;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.codegen.CodeStream codeStream>;

        $r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: boolean wideMode> = 0;

        $z0 = r2.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean ignoreFurtherInvestigation>;

        if $z0 == 0 goto label2;

        $r3 = r2.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = r2.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration referenceCompilationUnit()>();

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] getProblems()>();

        $i0 = lengthof $r7;

        r25 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r25, 0, $i0);

        $r8 = r2.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ClassFile: void addProblemMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.core.compiler.CategorizedProblem[])>(r2, $r8, r25);

        return;

     label2:
        i5 = r0.<org.eclipse.jdt.internal.compiler.ClassFile: int contentsOffset>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: void generateCode(org.eclipse.jdt.internal.compiler.ClassFile)>(r0);

     label3:
        goto label9;

     label4:
        $r15 := @caughtexception;

        $r17 = $r15.<org.eclipse.jdt.internal.compiler.problem.AbortMethod: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        $r16 = <org.eclipse.jdt.internal.compiler.codegen.CodeStream: org.eclipse.jdt.internal.compiler.CompilationResult RESTART_IN_WIDE_MODE>;

        if $r17 != $r16 goto label8;

     label5:
        r0.<org.eclipse.jdt.internal.compiler.ClassFile: int contentsOffset> = i5;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ClassFile: int methodCount>;

        $i4 = $i3 - 1;

        r0.<org.eclipse.jdt.internal.compiler.ClassFile: int methodCount> = $i4;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.codegen.CodeStream codeStream>;

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void resetInWideMode()>();

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: void generateCode(org.eclipse.jdt.internal.compiler.ClassFile)>(r0);

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        $r10 = r2.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration referenceCompilationUnit()>();

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        $r13 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] getAllProblems()>();

        $i1 = lengthof $r13;

        r26 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r26, 0, $i1);

        $r14 = r2.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ClassFile: void addProblemMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.core.compiler.CategorizedProblem[],int)>(r2, $r14, r26, i5);

        goto label9;

     label8:
        $r18 = r2.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration referenceCompilationUnit()>();

        $r20 = $r19.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        $r21 = virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.core.compiler.CategorizedProblem[] getAllProblems()>();

        $i2 = lengthof $r21;

        r27 = newarray (org.eclipse.jdt.core.compiler.CategorizedProblem)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, r27, 0, $i2);

        $r22 = r2.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ClassFile: void addProblemMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.lookup.MethodBinding,org.eclipse.jdt.core.compiler.CategorizedProblem[],int)>(r2, $r22, r27, i5);

     label9:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortMethod from label2 to label3 with label4;
        catch org.eclipse.jdt.internal.compiler.problem.AbortMethod from label5 to label6 with label7;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.ClassFile)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r10, $r16, $r17;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding $r23;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r8, $r11, $r13, $r18;
        org.eclipse.jdt.internal.compiler.ast.Statement $r19;
        byte $b7;
        org.eclipse.jdt.internal.compiler.ast.Argument[] $r9, $r20, $r21;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r2, $r3, $r4, $r5, $r7;
        org.eclipse.jdt.internal.compiler.ast.Argument $r22;
        org.eclipse.jdt.internal.compiler.ClassFile r0;
        org.eclipse.jdt.internal.compiler.CompilationResult $r15;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r14;
        int i0, $i1, i2, $i3, $i4, $i5, i6, i8, i9, i10, i11;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r6;
        org.eclipse.jdt.internal.compiler.problem.AbortMethod $r12;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ClassFile;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ClassFile: void generateMethodInfoHeader(org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>($r2);

        i0 = r0.<org.eclipse.jdt.internal.compiler.ClassFile: int contentsOffset>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $i1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ClassFile: int generateMethodInfoAttribute(org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>($r3);

        i6 = $i1;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $z0 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isNative()>();

        if $z0 != 0 goto label11;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $z1 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isAbstract()>();

        if $z1 != 0 goto label11;

        i2 = r0.<org.eclipse.jdt.internal.compiler.ClassFile: int contentsOffset>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ClassFile: void generateCodeAttributeHeader()>();

        r6 = r0.<org.eclipse.jdt.internal.compiler.ClassFile: org.eclipse.jdt.internal.compiler.codegen.CodeStream codeStream>;

        virtualinvoke r6.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void reset(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,org.eclipse.jdt.internal.compiler.ClassFile)>(r1, r0);

        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $z2 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isStatic()>();

        if $z2 == 0 goto label01;

        $b7 = 0;

        goto label02;

     label01:
        $b7 = 1;

     label02:
        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: void computeLocalVariablePositions(int,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>($b7, r6);

        $r9 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        if $r9 == null goto label05;

        i8 = 0;

        $r20 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        i9 = lengthof $r20;

        goto label04;

     label03:
        $r21 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        $r22 = $r21[i8];

        $r23 = $r22.<org.eclipse.jdt.internal.compiler.ast.Argument: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding binding>;

        virtualinvoke r6.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void addVisibleLocalVariable(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>($r23);

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: void recordInitializationStartPC(int)>(0);

        i8 = i8 + 1;

     label04:
        if i8 < i9 goto label03;

     label05:
        $r10 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r10 == null goto label08;

        i10 = 0;

        $r16 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        i11 = lengthof $r16;

        goto label07;

     label06:
        $r17 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r19 = $r17[i10];

        $r18 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Statement: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>($r18, r6);

        i10 = i10 + 1;

     label07:
        if i10 < i11 goto label06;

     label08:
        $z3 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean ignoreFurtherInvestigation>;

        if $z3 == 0 goto label09;

        $r12 = new org.eclipse.jdt.internal.compiler.problem.AbortMethod;

        $r13 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r14 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration referenceCompilationUnit()>();

        $r15 = $r14.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.problem.AbortMethod: void <init>(org.eclipse.jdt.internal.compiler.CompilationResult,org.eclipse.jdt.core.compiler.CategorizedProblem)>($r15, null);

        throw $r12;

     label09:
        $i3 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bits>;

        $i4 = $i3 & 64;

        if $i4 == 0 goto label10;

        virtualinvoke r6.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void return_()>();

     label10:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        virtualinvoke r6.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void exitUserScope(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r11);

        $i5 = r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceEnd>;

        virtualinvoke r6.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(0, $i5);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ClassFile: void completeCodeAttribute(int)>(i2);

        i6 = $i1 + 1;

        goto label12;

     label11:
        specialinvoke r1.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: void checkArgumentsSize()>();

     label12:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ClassFile: void completeMethodInfo(int,int)>(i0, i6);

        return;
    }

    private void checkArgumentsSize()
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r6;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding $r11, $r13;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r5, $r7, $r9;
        int i0, i1, i2;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r3;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r1;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding[] $r8, $r10;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r4, $r14;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] r2;
        org.eclipse.jdt.internal.compiler.ast.LocalDeclaration $r12;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        r2 = $r1.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding[] parameters>;

        i1 = 1;

        i2 = 0;

        i0 = lengthof r2;

        goto label6;

     label1:
        r3 = r2[i2];

        $r4 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding LONG>;

        if r3 == $r4 goto label2;

        $r14 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding DOUBLE>;

        if r3 != $r14 goto label3;

     label2:
        i1 = i1 + 2;

        goto label4;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 <= 255 goto label5;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r8 = $r7.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding[] locals>;

        $r13 = $r8[i2];

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding[] locals>;

        $r11 = $r10[i2];

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: org.eclipse.jdt.internal.compiler.ast.LocalDeclaration declaration>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void noMoreAvailableSpaceForArgument(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r13, $r12);

     label5:
        i2 = i2 + 1;

     label6:
        if i2 < i0 goto label1;

        return;
    }

    public boolean hasErrors()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean ignoreFurtherInvestigation>;

        return $z0;
    }

    public boolean isAbstract()
    {
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r1, $r2;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $z0 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isAbstract()>();

        return $z0;

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isAnnotationMethod()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        return 0;
    }

    public boolean isClinit()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        return 0;
    }

    public boolean isConstructor()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        return 0;
    }

    public boolean isDefaultConstructor()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        return 0;
    }

    public boolean isInitializationMethod()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        return 0;
    }

    public boolean isMethod()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        return 0;
    }

    public boolean isNative()
    {
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r1, $r2;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $z0 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isNative()>();

        return $z0;

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers>;

        $i1 = $i0 & 256;

        if $i1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isStatic()
    {
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r1, $r2;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $z0 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: boolean isStatic()>();

        return $z0;

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public abstract void parseStatements(org.eclipse.jdt.internal.compiler.parser.Parser, org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration);

    public java.lang.StringBuffer print(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r1, $r17;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r3, $r16;
        java.lang.StringBuffer r2, $r5, $r7;
        int i0, $i1, $i2, $i3, i4, i5, i6, $i7, i8, $i9;
        org.eclipse.jdt.internal.compiler.ast.Argument[] $r8, $r12, $r18;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter[] $r4;
        org.eclipse.jdt.internal.compiler.ast.TypeReference[] $r9, $r10, $r19;
        org.eclipse.jdt.internal.compiler.ast.Argument $r13;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r11;
        org.eclipse.jdt.internal.compiler.ast.TypeParameter $r14, $r15;
        char[] $r6;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.StringBuffer;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        if $r1 == null goto label01;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Javadoc: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(i0, r2);

     label01:
        staticinvoke <org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r2);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers>;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: java.lang.StringBuffer printModifiers(int,java.lang.StringBuffer)>($i1, r2);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        if $r3 == null goto label02;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: java.lang.StringBuffer printAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[],java.lang.StringBuffer)>($r16, r2);

     label02:
        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters()>();

        if $r4 == null goto label05;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        $i3 = lengthof $r4;

        i4 = $i3 - 1;

        i5 = 0;

        goto label04;

     label03:
        $r14 = $r4[i5];

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r2);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        i5 = i5 + 1;

     label04:
        if i5 < i4 goto label03;

        $r15 = $r4[i4];

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.TypeParameter: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r2);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

     label05:
        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: java.lang.StringBuffer printReturnType(int,java.lang.StringBuffer)>(0, r2);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: char[] selector>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        if $r8 == null goto label09;

        i6 = 0;

        goto label08;

     label06:
        if i6 <= 0 goto label07;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label07:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        $r13 = $r12[i6];

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Argument: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r2);

        i6 = i6 + 1;

     label08:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Argument[] arguments>;

        $i7 = lengthof $r18;

        if i6 < $i7 goto label06;

     label09:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        if $r9 == null goto label13;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" throws ");

        i8 = 0;

        goto label12;

     label10:
        if i8 <= 0 goto label11;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label11:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        $r11 = $r10[i8];

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.TypeReference: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r2);

        i8 = i8 + 1;

     label12:
        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions>;

        $i9 = lengthof $r19;

        if i8 < $i9 goto label10;

     label13:
        $i2 = i0 + 1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: java.lang.StringBuffer printBody(int,java.lang.StringBuffer)>($i2, r2);

        return r2;
    }

    public java.lang.StringBuffer printBody(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r3, $r5, $r6;
        org.eclipse.jdt.internal.compiler.ast.Statement $r7;
        java.lang.StringBuffer r1, $r2, $r4;
        int $i0, $i1, i2, $i3, i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        i2 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isAbstract()>();

        if $z0 != 0 goto label1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers>;

        $i1 = $i0 & 16777216;

        if $i1 == 0 goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        return $r2;

     label2:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" {");

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r3 == null goto label5;

        i4 = 0;

        goto label4;

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r7 = $r6[i4];

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Statement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>(i2, r1);

        i4 = i4 + 1;

     label4:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $i3 = lengthof $r5;

        if i4 < $i3 goto label3;

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        if i2 != 0 goto label6;

        $i5 = 0;

        goto label7;

     label6:
        $i5 = i2 - 1;

     label7:
        $r4 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>($i5, r1);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        return r1;
    }

    public java.lang.StringBuffer printReturnType(int, java.lang.StringBuffer)
    {
        int i0;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r1;
        java.lang.StringBuffer r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        return r0;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r11;
        org.eclipse.jdt.internal.compiler.ast.Annotation[] $r3;
        long $l0, $l1, $l5;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r4, $r8, $r10;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r13;
        byte $b2, $b6;
        int $i3, $i4, $i7;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r1, $r2, $r5, $r6, $r7;
        org.eclipse.jdt.internal.compiler.problem.AbortMethod $r12;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        r13 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        if $r1 != null goto label1;

        r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean ignoreFurtherInvestigation> = 1;

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: void bindArguments()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: void bindThrownExceptions()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: void resolveJavadoc()>();

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: void resolveAnnotations(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.ast.Annotation[],org.eclipse.jdt.internal.compiler.lookup.Binding)>($r4, $r3, $r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: void resolveStatements()>();

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        if $r5 == null goto label4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $l0 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: long getAnnotationTagBits()>();

        $l1 = $l0 & 70368744177664L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label4;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $i3 = $r7.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: int modifiers>;

        $i4 = $i3 & 1048576;

        if $i4 == 0 goto label4;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $l5 = $r9.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b6 = $l5 cmp 3211264L;

        $i7 = (int) $b6;

        if $i7 < 0 goto label4;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void missingDeprecatedAnnotationForMethod(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)>(r0);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean ignoreFurtherInvestigation> = 1;

     label4:
        return;

        catch org.eclipse.jdt.internal.compiler.problem.AbortMethod from label1 to label2 with label3;
    }

    public void resolveJavadoc()
    {
        org.eclipse.jdt.internal.compiler.ast.Javadoc $r2, $r15;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r11;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r8, $r10, $r14;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i9, $i11;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding $r1, $r3, $r5, $r7, $r12;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r4, $r6;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r13;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        if $r2 == null goto label2;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc>;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Javadoc: void resolve(org.eclipse.jdt.internal.compiler.lookup.MethodScope)>($r14);

        return;

     label2:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding declaringClass>;

        if $r4 == null goto label4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $r6 = $r5.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding declaringClass>;

        $z0 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isLocalType()>();

        if $z0 != 0 goto label4;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $i0 = $r7.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: int modifiers>;

        i7 = $i0 & 7;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.lookup.ClassScope classScope()>();

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $i1 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: int computeSeverity(int)>(-1610612250);

        $i9 = (int) -1;

        if $i1 == $i9 goto label4;

        if $r9 == null goto label3;

        $r13 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.lookup.ClassScope: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration referenceType()>();

        i7 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int computeOuterMostVisibility(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration,int)>($r13, i7);

     label3:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding>;

        $i2 = $r12.<org.eclipse.jdt.internal.compiler.lookup.MethodBinding: int modifiers>;

        $i11 = (int) -8;

        $i3 = $i2 & $i11;

        $i6 = $i3 | i7;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int sourceStart>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int sourceEnd>;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void javadocMissing(int,int,int,int)>($i5, $i4, $i1, $i6);

     label4:
        return;
    }

    public void resolveStatements()
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r1, $r4, $r5;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r3;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r2, $r6;
        org.eclipse.jdt.internal.compiler.ast.Statement $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r1 == null goto label3;

        i7 = 0;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        i6 = lengthof $r4;

        goto label2;

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r7 = $r5[i7];

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Statement: void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r6);

        i7 = i7 + 1;

     label2:
        if i7 < i6 goto label1;

        goto label4;

     label3:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bits>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label4;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: org.eclipse.jdt.internal.compiler.lookup.MethodScope scope>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart>;

        $i5 = $i2 - 1;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyEnd>;

        $i4 = $i3 + 1;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void undocumentedEmptyBlock(int,int)>($i5, $i4);

     label4:
        return;
    }

    public void tagAsHavingErrors()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean ignoreFurtherInvestigation> = 1;

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        org.eclipse.jdt.internal.compiler.ASTVisitor r1;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        return;
    }

    public org.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters()
    {
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        return null;
    }
}
