public class com.hp.hpl.jena.sparql.pfunction.library.splitIRI extends com.hp.hpl.jena.sparql.pfunction.PropertyFunctionEval
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArgType $r1, $r2;
        com.hp.hpl.jena.sparql.pfunction.library.splitIRI r0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.splitIRI;

        $r2 = <com.hp.hpl.jena.sparql.pfunction.PropFuncArgType: com.hp.hpl.jena.sparql.pfunction.PropFuncArgType PF_ARG_SINGLE>;

        $r1 = <com.hp.hpl.jena.sparql.pfunction.PropFuncArgType: com.hp.hpl.jena.sparql.pfunction.PropFuncArgType PF_ARG_LIST>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropertyFunctionEval: void <init>(com.hp.hpl.jena.sparql.pfunction.PropFuncArgType,com.hp.hpl.jena.sparql.pfunction.PropFuncArgType)>($r2, $r1);

        return;
    }

    public void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.query.QueryBuildException $r3, $r13, $r19;
        com.hp.hpl.jena.sparql.pfunction.library.splitIRI r5;
        com.hp.hpl.jena.graph.Node r25;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0, r1;
        int $i0, $i1;
        java.lang.String $r6, $r12, $r15, $r18, $r21, $r24;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r26;
        boolean $z0, $z1;
        java.util.List $r2, $r9;
        java.lang.StringBuilder $r4, $r7, $r8, $r10, $r11, $r14, $r16, $r17, $r20, $r22, $r23;

        r5 := @this: com.hp.hpl.jena.sparql.pfunction.library.splitIRI;

        r0 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r25 := @parameter1: com.hp.hpl.jena.graph.Node;

        r1 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r26 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isList()>();

        if $z0 == 0 goto label1;

        $r19 = new com.hp.hpl.jena.query.QueryBuildException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r5);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subject must be a single node or variable, not a list");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isList()>();

        if $z1 != 0 goto label2;

        $r13 = new com.hp.hpl.jena.query.QueryBuildException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r5);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object must be a list of two elements");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label2:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 == 2 goto label3;

        $r3 = new com.hp.hpl.jena.query.QueryBuildException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object is a list but it has ");

        $r9 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" elements - should be 2");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r12);

        throw $r3;

     label3:
        return;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluated(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.query.QueryException $r13;
        com.hp.hpl.jena.graph.Node $r1, $r4, $r5, $r7, $r10, r19;
        com.hp.hpl.jena.sparql.pfunction.library.splitIRI r6;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0, r8;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r2;
        java.lang.String $r16, $r18;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.engine.binding.Binding r11;
        java.lang.StringBuilder $r14, $r15, $r17;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3, $r9, $r12;

        r6 := @this: com.hp.hpl.jena.sparql.pfunction.library.splitIRI;

        r11 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r19 := @parameter2: com.hp.hpl.jena.graph.Node;

        r8 := @parameter3: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r2 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label4;

     label2:
        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r2);

     label3:
        return $r3;

     label4:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $z2 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z2 == 0 goto label6;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $r12 = specialinvoke r6.<com.hp.hpl.jena.sparql.pfunction.library.splitIRI: com.hp.hpl.jena.sparql.engine.QueryIterator subjectIsIRI(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r10, r8, r11, r2);

     label5:
        return $r12;

     label6:
        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $r9 = specialinvoke r6.<com.hp.hpl.jena.sparql.pfunction.library.splitIRI: com.hp.hpl.jena.sparql.engine.QueryIterator subjectIsVariable(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7, r8, r2);

     label7:
        return $r9;

     label8:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected problems in splitIRI: ");

        $r16 = virtualinvoke $r13.<com.hp.hpl.jena.query.QueryException: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r6, $r18);

        return null;

        catch com.hp.hpl.jena.query.QueryException from label1 to label3 with label8;
        catch com.hp.hpl.jena.query.QueryException from label4 to label5 with label8;
        catch com.hp.hpl.jena.query.QueryException from label6 to label7 with label8;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator subjectIsIRI(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r0, $r4, $r5, $r13, $r15, r19;
        com.hp.hpl.jena.sparql.pfunction.library.splitIRI r18;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r3;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap r20;
        java.lang.String $r1, $r2, $r9, $r16, $r17, r21;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.hp.hpl.jena.sparql.core.Var $r12, $r14;
        com.hp.hpl.jena.sparql.engine.binding.Binding r6;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r8, $r10, $r11;

        r18 := @this: com.hp.hpl.jena.sparql.pfunction.library.splitIRI;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r6 := @parameter2: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r7 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getNameSpace()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLocalName()>();

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg(int)>(0);

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg(int)>(1);

        r19 = $r5;

        r20 = null;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r4);

        if $z0 != 0 goto label01;

        $z6 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r5);

        if $z6 == 0 goto label02;

     label01:
        r20 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create(com.hp.hpl.jena.sparql.engine.binding.Binding)>(r6);

     label02:
        $z7 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r4);

        if $z7 == 0 goto label03;

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r4);

        $r15 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r1);

        interfaceinvoke r20.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r14, $r15);

        $z5 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z5 == 0 goto label07;

        $r16 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        $r17 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        if $r16 != $r17 goto label07;

        r19 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r1);

        goto label07;

     label03:
        r21 = null;

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label04;

        r21 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

     label04:
        $z2 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label05;

        r21 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: java.lang.String stringLiteral(com.hp.hpl.jena.graph.Node)>($r4);

     label05:
        if r21 == null goto label06;

        $z3 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z3 != 0 goto label07;

     label06:
        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7);

        return $r8;

     label07:
        $z8 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r19);

        if $z8 == 0 goto label08;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r19);

        $r13 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>($r2);

        interfaceinvoke r20.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r12, $r13);

        goto label10;

     label08:
        $r9 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeUtils: java.lang.String stringLiteral(com.hp.hpl.jena.graph.Node)>(r19);

        if $r9 == null goto label09;

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z4 != 0 goto label10;

     label09:
        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7);

        return $r10;

     label10:
        if r20 != null goto label11;

        goto label11;

     label11:
        $r11 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator result(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r20, r7);

        return $r11;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator subjectIsVariable(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r4;
        com.hp.hpl.jena.sparql.pfunction.library.splitIRI r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.splitIRI;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r1 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, "Subject to property function splitURI is not a bound nor a constant.");

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1);

        return $r2;
    }
}
