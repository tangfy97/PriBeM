final class kodkod.util.nodes.AnnotatedNode$2 extends kodkod.ast.visitor.AbstractDetector
{
    final kodkod.util.nodes.AnnotatedNode this$0;

    void <init>(kodkod.util.nodes.AnnotatedNode, java.util.Set)
    {
        java.util.Set $r2;
        kodkod.util.nodes.AnnotatedNode$2 r0;
        kodkod.util.nodes.AnnotatedNode r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$2;

        r1 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        $r2 := @parameter1: java.util.Set;

        r0.<kodkod.util.nodes.AnnotatedNode$2: kodkod.util.nodes.AnnotatedNode this$0> = r1;

        specialinvoke r0.<kodkod.ast.visitor.AbstractDetector: void <init>(java.util.Set)>($r2);

        return;
    }

    public java.lang.Boolean visit(kodkod.ast.IntToExprCast)
    {
        kodkod.util.nodes.AnnotatedNode$2 r0;
        java.lang.Boolean $r2, $r3;
        kodkod.ast.IntToExprCast r1;
        boolean $z0;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$2;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        $r3 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$2: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z0);

        return $r3;
    }

    public java.lang.Boolean visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.util.nodes.AnnotatedNode$2 r3;
        kodkod.ast.operator.ExprCastOperator $r1, $r2;
        kodkod.ast.ExprToIntCast r0;
        java.lang.Boolean $r4, $r5;
        boolean $z0;

        r3 := @this: kodkod.util.nodes.AnnotatedNode$2;

        r0 := @parameter0: kodkod.ast.ExprToIntCast;

        $r1 = virtualinvoke r0.<kodkod.ast.ExprToIntCast: kodkod.ast.operator.ExprCastOperator op()>();

        $r2 = <kodkod.ast.operator.ExprCastOperator: kodkod.ast.operator.ExprCastOperator CARDINALITY>;

        if $r1 != $r2 goto label1;

        specialinvoke r3.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.ExprToIntCast)>(r0);

     label1:
        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        $r5 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode$2: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r0, $z0);

        return $r5;
    }

    public java.lang.Boolean visit(kodkod.ast.ConstantExpression)
    {
        kodkod.util.nodes.AnnotatedNode$2 r2;
        kodkod.ast.ConstantExpression r0;
        kodkod.ast.Expression $r1;
        java.lang.Boolean $r3;

        r2 := @this: kodkod.util.nodes.AnnotatedNode$2;

        r0 := @parameter0: kodkod.ast.ConstantExpression;

        $r1 = <kodkod.ast.Expression: kodkod.ast.Expression INTS>;

        if r0 != $r1 goto label1;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label2:
        return $r3;
    }
}
