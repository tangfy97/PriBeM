public abstract class com.hp.hpl.jena.rdf.arp.states.Frame extends com.hp.hpl.jena.rdf.arp.impl.ParserSupport implements com.hp.hpl.jena.rdf.arp.impl.Names, com.hp.hpl.jena.rdf.arp.states.FrameI, com.hp.hpl.jena.rdf.arp.ARPErrorNumbers
{
    final com.hp.hpl.jena.rdf.arp.states.FrameI parent;
    protected boolean nonWhiteMsgGiven;
    public com.hp.hpl.jena.rdf.arp.impl.Taint taint;

    public com.hp.hpl.jena.rdf.arp.states.FrameI getParent()
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;
        com.hp.hpl.jena.rdf.arp.states.FrameI $r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.states.FrameI parent>;

        return $r1;
    }

    public void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI, com.hp.hpl.jena.rdf.arp.impl.AttributeLexer) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer r3;
        com.hp.hpl.jena.rdf.arp.states.FrameI r1;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r2;
        com.hp.hpl.jena.rdf.arp.impl.TaintImpl $r6;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext $r4, $r5;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.states.FrameI;

        r3 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.arp.states.FrameI: com.hp.hpl.jena.rdf.arp.impl.XMLHandler getXMLHandler()>();

        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.arp.states.FrameI: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext getXMLContext()>();

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext xml(com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>($r4);

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void <init>(com.hp.hpl.jena.rdf.arp.impl.XMLHandler,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>($r2, $r5);

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: boolean nonWhiteMsgGiven> = 0;

        $r6 = new com.hp.hpl.jena.rdf.arp.impl.TaintImpl;

        specialinvoke $r6.<com.hp.hpl.jena.rdf.arp.impl.TaintImpl: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.impl.Taint taint> = $r6;

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.states.FrameI parent> = r1;

        return;
    }

    public void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;
        com.hp.hpl.jena.rdf.arp.states.FrameI r1;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r2;
        com.hp.hpl.jena.rdf.arp.impl.TaintImpl $r4;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r3;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.states.FrameI;

        r3 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.arp.states.FrameI: com.hp.hpl.jena.rdf.arp.impl.XMLHandler getXMLHandler()>();

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void <init>(com.hp.hpl.jena.rdf.arp.impl.XMLHandler,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>($r2, r3);

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: boolean nonWhiteMsgGiven> = 0;

        $r4 = new com.hp.hpl.jena.rdf.arp.impl.TaintImpl;

        specialinvoke $r4.<com.hp.hpl.jena.rdf.arp.impl.TaintImpl: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.impl.Taint taint> = $r4;

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.states.FrameI parent> = r1;

        return;
    }

    public void <init>(com.hp.hpl.jena.rdf.arp.impl.XMLHandler, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler r1;
        com.hp.hpl.jena.rdf.arp.impl.TaintImpl $r3;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.XMLHandler;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void <init>(com.hp.hpl.jena.rdf.arp.impl.XMLHandler,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r1, r2);

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: boolean nonWhiteMsgGiven> = 0;

        $r3 = new com.hp.hpl.jena.rdf.arp.impl.TaintImpl;

        specialinvoke $r3.<com.hp.hpl.jena.rdf.arp.impl.TaintImpl: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.impl.Taint taint> = $r3;

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.states.FrameI parent> = null;

        return;
    }

    protected void warning(int, java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;
        com.hp.hpl.jena.rdf.arp.impl.Taint $r2;
        int i0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>($r2, i0, r1);

        return;
    }

    public void afterChild()
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;
        com.hp.hpl.jena.rdf.arp.impl.TaintImpl $r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        $r1 = new com.hp.hpl.jena.rdf.arp.impl.TaintImpl;

        specialinvoke $r1.<com.hp.hpl.jena.rdf.arp.impl.TaintImpl: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.impl.Taint taint> = $r1;

        return;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;
        int i0, i1;
        char[] r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void endElement() throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5, r6, r7;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A processing instruction is in RDF content. No processing was done. ");

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: java.lang.String suggestParsetypeLiteral()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(null, 119, $r5);

        return;
    }

    void processPropertyAttributes(com.hp.hpl.jena.rdf.arp.impl.AttributeLexer, org.xml.sax.Attributes, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI $r14, $r18;
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer r0;
        org.xml.sax.Attributes r2;
        int $i0, $i1, i2;
        java.lang.String $r1, $r3, $r4, $r9, $r12, $r13, $r17, $r20;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.rdf.arp.states.Frame r5;
        com.hp.hpl.jena.rdf.arp.impl.URIReference $r6, $r16;
        com.hp.hpl.jena.rdf.arp.impl.ANode $r15;
        com.hp.hpl.jena.rdf.arp.impl.ARPString $r19;
        java.lang.StringBuilder $r8, $r10, $r11;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r7;

        r5 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        r2 := @parameter1: org.xml.sax.Attributes;

        r7 := @parameter2: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String type>;

        if $r1 == null goto label1;

        $r14 = (com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI) r5;

        $r15 = <com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.impl.ANode RDF_TYPE>;

        $r13 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String type>;

        $r16 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.URIReference: com.hp.hpl.jena.rdf.arp.impl.URIReference resolve(com.hp.hpl.jena.rdf.arp.states.Frame,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext,java.lang.String)>(r5, r7, $r13);

        interfaceinvoke $r14.<com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI: void aPredAndObj(com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode)>($r15, $r16);

     label1:
        $i0 = interfaceinvoke r2.<org.xml.sax.Attributes: int getLength()>();

        $i1 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: int count>;

        if $i1 == $i0 goto label7;

        i2 = 0;

     label2:
        if i2 >= $i0 goto label7;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: boolean done(int)>(i2);

        if $z0 != 0 goto label6;

        $r3 = interfaceinvoke r2.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i2);

        $r4 = interfaceinvoke r2.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>(i2);

        $r6 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.URIReference: com.hp.hpl.jena.rdf.arp.impl.URIReference fromQName(com.hp.hpl.jena.rdf.arp.states.Frame,java.lang.String,java.lang.String)>(r5, $r3, $r4);

        if $r3 == null goto label3;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 == 0 goto label4;

     label3:
        virtualinvoke r5.<com.hp.hpl.jena.rdf.arp.states.Frame: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>($r6, 102, "Unqualified property attributes are not allowed. Property treated as a relative URI.");

     label4:
        $r17 = <com.hp.hpl.jena.rdf.arp.states.Frame: java.lang.String rdfns>;

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z3 == 0 goto label5;

        $z1 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.QNameLexer: boolean isKnownRDFProperty(java.lang.String)>($r4);

        if $z1 != 0 goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = interfaceinvoke r2.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i2);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a recognized RDF property or type.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<com.hp.hpl.jena.rdf.arp.states.Frame: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>($r6, 103, $r12);

     label5:
        $r18 = (com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI) r5;

        $r19 = new com.hp.hpl.jena.rdf.arp.impl.ARPString;

        $r20 = interfaceinvoke r2.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i2);

        specialinvoke $r19.<com.hp.hpl.jena.rdf.arp.impl.ARPString: void <init>(com.hp.hpl.jena.rdf.arp.states.Frame,java.lang.String,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r5, $r20, r7);

        interfaceinvoke $r18.<com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI: void aPredAndObj(com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode)>($r6, $r19);

     label6:
        i2 = i2 + 1;

        goto label2;

     label7:
        return;
    }

    public void abort()
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        return;
    }

    protected com.hp.hpl.jena.rdf.arp.states.FrameI rdfStartElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.Taint $r5, $r8, $r11;
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer $r6, $r10;
        org.xml.sax.Attributes r7;
        int $i0, $i1;
        java.lang.String r2, r3, r4;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r12;
        com.hp.hpl.jena.rdf.arp.states.WantTopLevelDescription $r13;
        boolean $z0;
        com.hp.hpl.jena.rdf.arp.states.Frame r1;
        com.hp.hpl.jena.rdf.arp.impl.ElementLexer $r0;
        com.hp.hpl.jena.rdf.arp.states.LookingForRDF $r9;

        r1 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r7 := @parameter3: org.xml.sax.Attributes;

        $r0 = new com.hp.hpl.jena.rdf.arp.impl.ElementLexer;

        $r5 = r1.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        specialinvoke $r0.<com.hp.hpl.jena.rdf.arp.impl.ElementLexer: void <init>(com.hp.hpl.jena.rdf.arp.impl.Taint,com.hp.hpl.jena.rdf.arp.states.Frame,java.lang.String,java.lang.String,java.lang.String,int,int,boolean)>($r5, r1, r2, r3, r4, 4096, 0, 0);

        $z0 = $r0.<com.hp.hpl.jena.rdf.arp.impl.ElementLexer: boolean goodMatch>;

        if $z0 == 0 goto label2;

        $r10 = new com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        specialinvoke $r10.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: void <init>(com.hp.hpl.jena.rdf.arp.states.Frame,int,int)>(r1, 7, 0);

        $r11 = r1.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        $i0 = virtualinvoke $r10.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: int processSpecials(com.hp.hpl.jena.rdf.arp.impl.Taint,org.xml.sax.Attributes)>($r11, r7);

        $i1 = interfaceinvoke r7.<org.xml.sax.Attributes: int getLength()>();

        if $i0 == $i1 goto label1;

        virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.states.Frame: void warning(int,java.lang.String)>(201, "Illegal attributes on rdf:RDF");

     label1:
        $r12 = r1.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        virtualinvoke $r12.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: void startRDF()>();

        $r13 = new com.hp.hpl.jena.rdf.arp.states.WantTopLevelDescription;

        specialinvoke $r13.<com.hp.hpl.jena.rdf.arp.states.WantTopLevelDescription: void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI,com.hp.hpl.jena.rdf.arp.impl.AttributeLexer)>(r1, $r10);

        return $r13;

     label2:
        $r6 = new com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        specialinvoke $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: void <init>(com.hp.hpl.jena.rdf.arp.states.Frame,int,int)>(r1, 3, 0);

        $r8 = r1.<com.hp.hpl.jena.rdf.arp.states.Frame: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        virtualinvoke $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: int processSpecials(com.hp.hpl.jena.rdf.arp.impl.Taint,org.xml.sax.Attributes)>($r8, r7);

        $r9 = new com.hp.hpl.jena.rdf.arp.states.LookingForRDF;

        specialinvoke $r9.<com.hp.hpl.jena.rdf.arp.states.LookingForRDF: void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI,com.hp.hpl.jena.rdf.arp.impl.AttributeLexer)>(r1, $r6);

        return $r9;
    }

    java.lang.String suggestParsetypeLiteral()
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        return " Maybe there should be an rdf:parseType=\'Literal\' for embedding mixed XML content in RDF.";
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.Frame r0;
        int i0, i1;
        char[] r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9;
        java.lang.String $r4, $r7, $r10;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.Frame;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.hp.hpl.jena.rdf.arp.states.Frame: boolean nonWhiteMsgGiven>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: boolean isWhite(char[],int,int)>(r1, i0, i1);

        if $z1 != 0 goto label1;

        r0.<com.hp.hpl.jena.rdf.arp.states.Frame: boolean nonWhiteMsgGiven> = 1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting XML start or end element(s). String data \"");

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not allowed.");

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: java.lang.String suggestParsetypeLiteral()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Maybe a striping error.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: void warning(int,java.lang.String)>(202, $r10);

     label1:
        return;
    }
}
