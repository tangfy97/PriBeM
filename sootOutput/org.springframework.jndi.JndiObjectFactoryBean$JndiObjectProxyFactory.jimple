class org.springframework.jndi.JndiObjectFactoryBean$JndiObjectProxyFactory extends java.lang.Object
{

    private void <init>()
    {
        org.springframework.jndi.JndiObjectFactoryBean$JndiObjectProxyFactory r0;

        r0 := @this: org.springframework.jndi.JndiObjectFactoryBean$JndiObjectProxyFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.Object createJndiObjectProxy(org.springframework.jndi.JndiObjectFactoryBean) throws javax.naming.NamingException
    {
        java.lang.IllegalStateException $r15;
        org.springframework.jndi.JndiObjectTargetSource $r0;
        int i0, $i1, i2;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.jndi.JndiObjectFactoryBean r1;
        java.lang.Class[] $r6, $r9, $r16;
        org.springframework.jndi.JndiTemplate $r2, $r14;
        org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor $r13;
        org.springframework.aop.framework.ProxyFactory $r5;
        java.lang.Class $r4, $r7, r10;
        java.lang.Object $r12;
        java.lang.ClassLoader $r8, $r11;

        r1 := @parameter0: org.springframework.jndi.JndiObjectFactoryBean;

        $r0 = new org.springframework.jndi.JndiObjectTargetSource;

        specialinvoke $r0.<org.springframework.jndi.JndiObjectTargetSource: void <init>()>();

        $r2 = virtualinvoke r1.<org.springframework.jndi.JndiObjectFactoryBean: org.springframework.jndi.JndiTemplate getJndiTemplate()>();

        virtualinvoke $r0.<org.springframework.jndi.JndiObjectTargetSource: void setJndiTemplate(org.springframework.jndi.JndiTemplate)>($r2);

        $r3 = virtualinvoke r1.<org.springframework.jndi.JndiObjectFactoryBean: java.lang.String getJndiName()>();

        virtualinvoke $r0.<org.springframework.jndi.JndiObjectTargetSource: void setJndiName(java.lang.String)>($r3);

        $r4 = virtualinvoke r1.<org.springframework.jndi.JndiObjectFactoryBean: java.lang.Class getExpectedType()>();

        virtualinvoke $r0.<org.springframework.jndi.JndiObjectTargetSource: void setExpectedType(java.lang.Class)>($r4);

        $z0 = virtualinvoke r1.<org.springframework.jndi.JndiObjectFactoryBean: boolean isResourceRef()>();

        virtualinvoke $r0.<org.springframework.jndi.JndiObjectTargetSource: void setResourceRef(boolean)>($z0);

        $z1 = staticinvoke <org.springframework.jndi.JndiObjectFactoryBean: boolean access$0(org.springframework.jndi.JndiObjectFactoryBean)>(r1);

        virtualinvoke $r0.<org.springframework.jndi.JndiObjectTargetSource: void setLookupOnStartup(boolean)>($z1);

        $z2 = staticinvoke <org.springframework.jndi.JndiObjectFactoryBean: boolean access$1(org.springframework.jndi.JndiObjectFactoryBean)>(r1);

        virtualinvoke $r0.<org.springframework.jndi.JndiObjectTargetSource: void setCache(boolean)>($z2);

        virtualinvoke $r0.<org.springframework.jndi.JndiObjectTargetSource: void afterPropertiesSet()>();

        $r5 = new org.springframework.aop.framework.ProxyFactory;

        specialinvoke $r5.<org.springframework.aop.framework.ProxyFactory: void <init>()>();

        $r6 = staticinvoke <org.springframework.jndi.JndiObjectFactoryBean: java.lang.Class[] access$2(org.springframework.jndi.JndiObjectFactoryBean)>(r1);

        if $r6 == null goto label1;

        $r16 = staticinvoke <org.springframework.jndi.JndiObjectFactoryBean: java.lang.Class[] access$2(org.springframework.jndi.JndiObjectFactoryBean)>(r1);

        virtualinvoke $r5.<org.springframework.aop.framework.ProxyFactory: void setInterfaces(java.lang.Class[])>($r16);

        goto label6;

     label1:
        $r7 = virtualinvoke $r0.<org.springframework.jndi.JndiObjectTargetSource: java.lang.Class getTargetClass()>();

        if $r7 != null goto label2;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot deactivate \'lookupOnStartup\' without specifying a \'proxyInterface\' or \'expectedType\'");

        throw $r15;

     label2:
        $r8 = staticinvoke <org.springframework.jndi.JndiObjectFactoryBean: java.lang.ClassLoader access$3(org.springframework.jndi.JndiObjectFactoryBean)>(r1);

        $r9 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class,java.lang.ClassLoader)>($r7, $r8);

        i0 = lengthof $r9;

        i2 = 0;

        goto label5;

     label3:
        r10 = $r9[i2];

        $i1 = virtualinvoke r10.<java.lang.Class: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z3 == 0 goto label4;

        virtualinvoke $r5.<org.springframework.aop.framework.ProxyFactory: void addInterface(java.lang.Class)>(r10);

     label4:
        i2 = i2 + 1;

     label5:
        if i2 < i0 goto label3;

     label6:
        $z4 = staticinvoke <org.springframework.jndi.JndiObjectFactoryBean: boolean access$4(org.springframework.jndi.JndiObjectFactoryBean)>(r1);

        if $z4 == 0 goto label7;

        $r13 = new org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor;

        $r14 = virtualinvoke r1.<org.springframework.jndi.JndiObjectFactoryBean: org.springframework.jndi.JndiTemplate getJndiTemplate()>();

        specialinvoke $r13.<org.springframework.jndi.JndiObjectFactoryBean$JndiContextExposingInterceptor: void <init>(org.springframework.jndi.JndiTemplate)>($r14);

        virtualinvoke $r5.<org.springframework.aop.framework.ProxyFactory: void addAdvice(org.aopalliance.aop.Advice)>($r13);

     label7:
        virtualinvoke $r5.<org.springframework.aop.framework.ProxyFactory: void setTargetSource(org.springframework.aop.TargetSource)>($r0);

        $r11 = staticinvoke <org.springframework.jndi.JndiObjectFactoryBean: java.lang.ClassLoader access$3(org.springframework.jndi.JndiObjectFactoryBean)>(r1);

        $r12 = virtualinvoke $r5.<org.springframework.aop.framework.ProxyFactory: java.lang.Object getProxy(java.lang.ClassLoader)>($r11);

        return $r12;
    }

    static java.lang.Object access$0(org.springframework.jndi.JndiObjectFactoryBean) throws javax.naming.NamingException
    {
        org.springframework.jndi.JndiObjectFactoryBean r0;
        java.lang.Object $r1;

        r0 := @parameter0: org.springframework.jndi.JndiObjectFactoryBean;

        $r1 = staticinvoke <org.springframework.jndi.JndiObjectFactoryBean$JndiObjectProxyFactory: java.lang.Object createJndiObjectProxy(org.springframework.jndi.JndiObjectFactoryBean)>(r0);

        return $r1;
    }
}
