public class com.hp.hpl.jena.sparql.expr.E_Cast extends com.hp.hpl.jena.sparql.expr.ExprFunction2
{
    private static final java.lang.String symbol;

    private void <init>(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.E_Cast r0;
        com.hp.hpl.jena.sparql.expr.Expr r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Cast;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction2: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,java.lang.String)>(r1, r2, "cast");

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r4, $r9;
        java.lang.String $r8, $r13;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.ARQNotImplemented $r3;
        com.hp.hpl.jena.sparql.expr.E_Cast r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12;

        r14 := @this: com.hp.hpl.jena.sparql.expr.E_Cast;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z0 != 0 goto label1;

        $r9 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cast: arg 2 is not a string: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isIRI()>();

        if $z1 != 0 goto label2;

        $r4 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cast: arg 2 is not a URI: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r3 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>()>();

        throw $r3;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.E_Cast $r0, r3;
        com.hp.hpl.jena.sparql.expr.Expr r1, r2;

        r3 := @this: com.hp.hpl.jena.sparql.expr.E_Cast;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.expr.E_Cast;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.E_Cast: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2);

        return $r0;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_Cast: java.lang.String symbol> = "cast";

        return;
    }
}
