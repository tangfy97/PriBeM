public abstract class org.eclipse.jdt.internal.compiler.ast.Reference extends org.eclipse.jdt.internal.compiler.ast.Expression
{

    public void <init>()
    {
        org.eclipse.jdt.internal.compiler.ast.Reference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Reference;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Expression: void <init>()>();

        return;
    }

    public abstract org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo, org.eclipse.jdt.internal.compiler.ast.Assignment, boolean);

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r3;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r0;
        org.eclipse.jdt.internal.compiler.ast.Reference r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.Reference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r0 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        return r0;
    }

    public org.eclipse.jdt.internal.compiler.lookup.FieldBinding fieldBinding()
    {
        org.eclipse.jdt.internal.compiler.ast.Reference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Reference;

        return null;
    }

    public void fieldStore(org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.lookup.FieldBinding, org.eclipse.jdt.internal.compiler.lookup.MethodBinding, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding r1;
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r5, $r7, $r9, $r11;
        boolean $z0, z1;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding r2;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r4, $r6, $r8, $r10;
        org.eclipse.jdt.internal.compiler.ast.Reference r3;

        r3 := @this: org.eclipse.jdt.internal.compiler.ast.Reference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.FieldBinding;

        r2 := @parameter2: org.eclipse.jdt.internal.compiler.lookup.MethodBinding;

        z1 := @parameter3: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $z0 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: boolean isStatic()>();

        if $z0 == 0 goto label05;

        if z1 == 0 goto label03;

        $r9 = r1.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding type>;

        $r8 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding LONG>;

        if $r9 == $r8 goto label01;

        $r11 = r1.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding type>;

        $r10 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding DOUBLE>;

        if $r11 != $r10 goto label02;

     label01:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup2()>();

        goto label03;

     label02:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup()>();

     label03:
        if r2 != null goto label04;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void putstatic(org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>(r1);

        goto label10;

     label04:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokestatic(org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>(r2);

        goto label10;

     label05:
        if z1 == 0 goto label08;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding type>;

        $r4 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding LONG>;

        if $r5 == $r4 goto label06;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding type>;

        $r6 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding DOUBLE>;

        if $r7 != $r6 goto label07;

     label06:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup2_x1()>();

        goto label08;

     label07:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup_x1()>();

     label08:
        if r2 != null goto label09;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void putfield(org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>(r1);

        goto label10;

     label09:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokestatic(org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>(r2);

     label10:
        $i1 = r3.<org.eclipse.jdt.internal.compiler.ast.Reference: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i1);

        return;
    }

    public abstract void generateAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.ast.Assignment, boolean);

    public abstract void generateCompoundAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.ast.Expression, int, int, boolean);

    public abstract void generatePostIncrement(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.ast.CompoundAssignment, boolean);
}
