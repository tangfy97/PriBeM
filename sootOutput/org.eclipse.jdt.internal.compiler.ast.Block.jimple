public class org.eclipse.jdt.internal.compiler.ast.Block extends org.eclipse.jdt.internal.compiler.ast.Statement
{
    public org.eclipse.jdt.internal.compiler.ast.Statement[] statements;
    public int explicitDeclarations;
    public org.eclipse.jdt.internal.compiler.lookup.BlockScope scope;

    public void <init>(int)
    {
        int i0;
        org.eclipse.jdt.internal.compiler.ast.Block r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Block;

        i0 := @parameter0: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.Block: int explicitDeclarations> = i0;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r1, $r2, $r3;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope $r5, $r7, r8;
        org.eclipse.jdt.internal.compiler.ast.Block r0;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r9;
        org.eclipse.jdt.internal.compiler.ast.Statement r4;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r6;
        int i0, i1;
        boolean $z0, z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Block;

        r8 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r6 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r9 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r1 != null goto label1;

        return r9;

     label1:
        z1 = 0;

        i1 = 0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        i0 = lengthof $r2;

        goto label5;

     label2:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        r4 = $r3[i1];

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        $z0 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.ast.Statement: boolean complainIfUnreachable(org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean)>(r9, $r5, z1);

        if $z0 != 0 goto label3;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        r9 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.ast.Statement: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r7, r6, r9);

        goto label4;

     label3:
        z1 = 1;

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label2;

        return r9;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r2, $r6, $r7;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3, $r4, $r5, $r8;
        org.eclipse.jdt.internal.compiler.ast.Block r0;
        org.eclipse.jdt.internal.compiler.ast.Statement $r9;
        int $i0, $i1, i2, $i3, i4, i5;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Block;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: int bits>;

        $i1 = $i0 & -2147483648;

        if $i1 != 0 goto label1;

        return;

     label1:
        i2 = r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r2 == null goto label4;

        i5 = 0;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        i4 = lengthof $r6;

        goto label3;

     label2:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r9 = $r7[i5];

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.Statement: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream)>($r8, r1);

        i5 = i5 + 1;

     label3:
        if i5 < i4 goto label2;

     label4:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        if $r4 == r3 goto label5;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void exitUserScope(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r5);

     label5:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i2, $i3);

        return;
    }

    public boolean isEmptyBlock()
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r1;
        org.eclipse.jdt.internal.compiler.ast.Block r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Block;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.StringBuffer printBody(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r1, $r2, $r3;
        org.eclipse.jdt.internal.compiler.ast.Block r0;
        org.eclipse.jdt.internal.compiler.ast.Statement $r5;
        java.lang.StringBuffer r4;
        int $i0, i1, $i2, i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Block;

        i1 := @parameter0: int;

        r4 := @parameter1: java.lang.StringBuffer;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r1 != null goto label1;

        return r4;

     label1:
        i3 = 0;

        goto label3;

     label2:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r5 = $r3[i3];

        $i2 = i1 + 1;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Statement: java.lang.StringBuffer printStatement(int,java.lang.StringBuffer)>($i2, r4);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i3 = i3 + 1;

     label3:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $i0 = lengthof $r2;

        if i3 < $i0 goto label2;

        return r4;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Block r1;
        java.lang.StringBuffer r0, $r2, $r3;
        int i0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.Block;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.Block: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{\n");

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.Block: java.lang.StringBuffer printBody(int,java.lang.StringBuffer)>(i0, r0);

        $r2 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.Block: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        return $r3;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r1, $r3, $r4;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2, $r5, $r8;
        org.eclipse.jdt.internal.compiler.ast.Block r0;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r7;
        org.eclipse.jdt.internal.compiler.ast.Statement $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Block;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: int bits>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $r7 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $i6 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceEnd>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void undocumentedEmptyBlock(int,int)>($i6, $i5);

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r1 == null goto label6;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: int explicitDeclarations>;

        if $i2 != 0 goto label2;

        $r8 = r2;

        goto label3;

     label2:
        $r8 = new org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: int explicitDeclarations>;

        specialinvoke $r8.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: void <init>(org.eclipse.jdt.internal.compiler.lookup.BlockScope,int)>(r2, $i3);

     label3:
        r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope> = $r8;

        i7 = 0;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $i4 = lengthof $r3;

        goto label5;

     label4:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r6 = $r4[i7];

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Statement: void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r5);

        i7 = i7 + 1;

     label5:
        if i7 < $i4 goto label4;

     label6:
        return;
    }

    public void resolveUsing(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r2, $r3, $r4;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1, $r5;
        org.eclipse.jdt.internal.compiler.ast.Block r0;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r7;
        org.eclipse.jdt.internal.compiler.ast.Statement $r6;
        int $i0, $i1, i2, $i3, $i4, i5;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Block;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: int bits>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $r7 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceStart>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: int sourceEnd>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void undocumentedEmptyBlock(int,int)>($i4, $i3);

     label1:
        r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope> = r1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r2 == null goto label4;

        i5 = 0;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        i2 = lengthof $r3;

        goto label3;

     label2:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r6 = $r4[i5];

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Statement: void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r5);

        i5 = i5 + 1;

     label3:
        if i5 < i2 goto label2;

     label4:
        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r3, $r4, $r5;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2, $r6;
        org.eclipse.jdt.internal.compiler.ast.Block r1;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.Statement $r7;
        int i0, i1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.Block;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.Block,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label3;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r3 == null goto label3;

        i1 = 0;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        i0 = lengthof $r4;

        goto label2;

     label1:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r7 = $r5[i1];

        $r6 = r1.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.lookup.BlockScope scope>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Statement: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, $r6);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.Block,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void branchChainTo(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)
    {
        org.eclipse.jdt.internal.compiler.ast.Statement[] $r1, $r2, $r3;
        org.eclipse.jdt.internal.compiler.ast.Block r0;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r4;
        org.eclipse.jdt.internal.compiler.ast.Statement $r5;
        int $i0, $i1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.Block;

        r4 := @parameter0: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        if $r1 == null goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.Block: org.eclipse.jdt.internal.compiler.ast.Statement[] statements>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        $r5 = $r3[$i1];

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Statement: void branchChainTo(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label1:
        return;
    }
}
