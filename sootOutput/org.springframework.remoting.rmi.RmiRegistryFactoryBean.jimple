public class org.springframework.remoting.rmi.RmiRegistryFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private java.lang.String host;
    private int port;
    private java.rmi.server.RMIClientSocketFactory clientSocketFactory;
    private java.rmi.server.RMIServerSocketFactory serverSocketFactory;
    private java.rmi.registry.Registry registry;
    private boolean alwaysCreate;
    private boolean created;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: int port> = 1099;

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: boolean alwaysCreate> = 0;

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: boolean created> = 0;

        return;
    }

    public void setHost(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.lang.String host> = r1;

        return;
    }

    public java.lang.String getHost()
    {
        java.lang.String $r1;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        $r1 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.lang.String host>;

        return $r1;
    }

    public void setPort(int)
    {
        int i0;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        i0 := @parameter0: int;

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: int port> = i0;

        return;
    }

    public int getPort()
    {
        int $i0;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        $i0 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: int port>;

        return $i0;
    }

    public void setClientSocketFactory(java.rmi.server.RMIClientSocketFactory)
    {
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;
        java.rmi.server.RMIClientSocketFactory r1;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        r1 := @parameter0: java.rmi.server.RMIClientSocketFactory;

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIClientSocketFactory clientSocketFactory> = r1;

        return;
    }

    public void setServerSocketFactory(java.rmi.server.RMIServerSocketFactory)
    {
        java.rmi.server.RMIServerSocketFactory r1;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        r1 := @parameter0: java.rmi.server.RMIServerSocketFactory;

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIServerSocketFactory serverSocketFactory> = r1;

        return;
    }

    public void setAlwaysCreate(boolean)
    {
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: boolean alwaysCreate> = z0;

        return;
    }

    public void afterPropertiesSet() throws java.lang.Exception
    {
        java.rmi.registry.Registry $r7;
        java.lang.IllegalArgumentException $r9;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;
        int $i0;
        java.rmi.server.RMIServerSocketFactory $r4, $r8, $r10, $r12;
        java.lang.String $r6;
        java.rmi.server.RMIClientSocketFactory $r1, $r2, $r3, $r5, $r11;
        boolean $z0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        $r1 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        $z0 = $r1 instanceof java.rmi.server.RMIServerSocketFactory;

        if $z0 == 0 goto label1;

        $r11 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        $r12 = (java.rmi.server.RMIServerSocketFactory) $r11;

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIServerSocketFactory serverSocketFactory> = $r12;

     label1:
        $r2 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        if $r2 == null goto label2;

        $r10 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIServerSocketFactory serverSocketFactory>;

        if $r10 == null goto label3;

     label2:
        $r3 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        if $r3 != null goto label4;

        $r8 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIServerSocketFactory serverSocketFactory>;

        if $r8 == null goto label4;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Both RMIClientSocketFactory and RMIServerSocketFactory or none required");

        throw $r9;

     label4:
        $r6 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.lang.String host>;

        $i0 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: int port>;

        $r5 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        $r4 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.server.RMIServerSocketFactory serverSocketFactory>;

        $r7 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.registry.Registry getRegistry(java.lang.String,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)>($r6, $i0, $r5, $r4);

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.registry.Registry registry> = $r7;

        return;
    }

    protected java.rmi.registry.Registry getRegistry(java.lang.String, int, java.rmi.server.RMIClientSocketFactory, java.rmi.server.RMIServerSocketFactory) throws java.rmi.RemoteException
    {
        java.rmi.registry.Registry $r4, $r6;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r1;
        int i0;
        java.rmi.server.RMIServerSocketFactory r3;
        java.lang.String r0, $r13;
        boolean $z0;
        org.apache.commons.logging.Log $r5, $r8;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12;
        java.rmi.server.RMIClientSocketFactory r2;

        r1 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.rmi.server.RMIClientSocketFactory;

        r3 := @parameter3: java.rmi.server.RMIServerSocketFactory;

        if r0 == null goto label2;

        $r5 = r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Looking for RMI registry at port \'");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of host [");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r13);

     label1:
        $r6 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(java.lang.String,int,java.rmi.server.RMIClientSocketFactory)>(r0, i0, r2);

        virtualinvoke r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: void testRegistry(java.rmi.registry.Registry)>($r6);

        return $r6;

     label2:
        $r4 = virtualinvoke r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.registry.Registry getRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)>(i0, r2, r3);

        return $r4;
    }

    protected java.rmi.registry.Registry getRegistry(int, java.rmi.server.RMIClientSocketFactory, java.rmi.server.RMIServerSocketFactory) throws java.rmi.RemoteException
    {
        java.lang.Throwable $r13;
        java.rmi.registry.Registry $r2, $r4, $r12, $r17;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r1;
        int i0;
        java.rmi.server.RMIServerSocketFactory r11;
        java.lang.String $r9;
        boolean $z0, $z1;
        java.rmi.RemoteException $r14;
        org.apache.commons.logging.Log $r3, $r6, $r10, $r15, $r16;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.rmi.server.RMIClientSocketFactory r0;

        r1 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        i0 := @parameter0: int;

        r0 := @parameter1: java.rmi.server.RMIClientSocketFactory;

        r11 := @parameter2: java.rmi.server.RMIServerSocketFactory;

        if r0 == null goto label10;

        $z0 = r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: boolean alwaysCreate>;

        if $z0 == 0 goto label01;

        $r10 = r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Creating new RMI registry");

        r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: boolean created> = 1;

        $r12 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry createRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)>(i0, r0, r11);

        return $r12;

     label01:
        $r3 = r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z1 == 0 goto label02;

        $r6 = r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Looking for RMI registry at port \'");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', using custom socket factory");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r9);

     label02:
        entermonitor class "Ljava/rmi/registry/LocateRegistry;";

     label03:
        $r4 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(java.lang.String,int,java.rmi.server.RMIClientSocketFactory)>(null, i0, r0);

        virtualinvoke r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: void testRegistry(java.rmi.registry.Registry)>($r4);

     label04:
        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label05:
        return $r4;

     label06:
        $r14 := @caughtexception;

        $r15 = r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("RMI registry access threw exception", $r14);

        $r16 = r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Could not detect RMI registry - creating new one");

        r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: boolean created> = 1;

        $r17 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry createRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)>(i0, r0, r11);

        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label07:
        return $r17;

     label08:
        $r13 := @caughtexception;

        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label09:
        throw $r13;

     label10:
        $r2 = virtualinvoke r1.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.registry.Registry getRegistry(int)>(i0);

        return $r2;

        catch java.rmi.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    protected java.rmi.registry.Registry getRegistry(int) throws java.rmi.RemoteException
    {
        java.lang.Throwable $r10;
        java.rmi.registry.Registry $r2, $r9, $r14;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;
        int i0;
        java.lang.String $r7;
        boolean $z0, $z1;
        java.rmi.RemoteException $r11;
        org.apache.commons.logging.Log $r1, $r4, $r8, $r12, $r13;
        java.lang.StringBuilder $r3, $r5, $r6;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        i0 := @parameter0: int;

        $z0 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: boolean alwaysCreate>;

        if $z0 == 0 goto label1;

        $r8 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Creating new RMI registry");

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: boolean created> = 1;

        $r9 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry createRegistry(int)>(i0);

        return $r9;

     label1:
        $r1 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Looking for RMI registry at port \'");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r7);

     label2:
        entermonitor class "Ljava/rmi/registry/LocateRegistry;";

     label3:
        $r2 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(int)>(i0);

        virtualinvoke r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: void testRegistry(java.rmi.registry.Registry)>($r2);

     label4:
        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label5:
        return $r2;

     label6:
        $r11 := @caughtexception;

        $r12 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("RMI registry access threw exception", $r11);

        $r13 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Could not detect RMI registry - creating new one");

        r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: boolean created> = 1;

        $r14 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry createRegistry(int)>(i0);

        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label7:
        return $r14;

     label8:
        $r10 := @caughtexception;

        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label9:
        throw $r10;

        catch java.rmi.RemoteException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    protected void testRegistry(java.rmi.registry.Registry) throws java.rmi.RemoteException
    {
        java.rmi.registry.Registry r0;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r1;

        r1 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        r0 := @parameter0: java.rmi.registry.Registry;

        interfaceinvoke r0.<java.rmi.registry.Registry: java.lang.String[] list()>();

        return;
    }

    public java.rmi.registry.Registry getObject() throws java.lang.Exception
    {
        java.rmi.registry.Registry $r1;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        $r1 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.registry.Registry registry>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        java.lang.Class $r3;
        java.rmi.registry.Registry $r1, $r2;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        $r1 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.registry.Registry registry>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.registry.Registry registry>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r3 = class "Ljava/rmi/registry/Registry;";

     label2:
        return $r3;
    }

    public boolean isSingleton()
    {
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        return 1;
    }

    public void destroy() throws java.rmi.RemoteException
    {
        org.apache.commons.logging.Log $r1;
        java.rmi.registry.Registry $r2;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;
        boolean $z0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        $z0 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: boolean created>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Unexporting RMI registry");

        $r2 = r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.registry.Registry registry>;

        staticinvoke <java.rmi.server.UnicastRemoteObject: boolean unexportObject(java.rmi.Remote,boolean)>($r2, 1);

     label1:
        return;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        java.rmi.registry.Registry $r1;
        org.springframework.remoting.rmi.RmiRegistryFactoryBean r0;

        r0 := @this: org.springframework.remoting.rmi.RmiRegistryFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiRegistryFactoryBean: java.rmi.registry.Registry getObject()>();

        return $r1;
    }
}
