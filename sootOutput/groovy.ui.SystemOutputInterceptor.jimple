public class groovy.ui.SystemOutputInterceptor extends java.io.FilterOutputStream
{
    private groovy.lang.Closure callback;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$groovy$ui$SystemOutputInterceptor;

    public void <init>(groovy.lang.Closure)
    {
        java.io.PrintStream $r1;
        groovy.lang.Closure r2;
        groovy.ui.SystemOutputInterceptor r0;
        java.lang.AssertionError $r3;
        boolean $z0;

        r0 := @this: groovy.ui.SystemOutputInterceptor;

        r2 := @parameter0: groovy.lang.Closure;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r1);

        $z0 = <groovy.ui.SystemOutputInterceptor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        r0.<groovy.ui.SystemOutputInterceptor: groovy.lang.Closure callback> = r2;

        return;
    }

    public void start()
    {
        java.io.PrintStream $r0;
        groovy.ui.SystemOutputInterceptor r1;

        r1 := @this: groovy.ui.SystemOutputInterceptor;

        $r0 = new java.io.PrintStream;

        specialinvoke $r0.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>($r0);

        return;
    }

    public void stop()
    {
        java.io.OutputStream $r1;
        java.io.PrintStream $r2;
        groovy.ui.SystemOutputInterceptor r0;

        r0 := @this: groovy.ui.SystemOutputInterceptor;

        $r1 = r0.<groovy.ui.SystemOutputInterceptor: java.io.OutputStream out>;

        $r2 = (java.io.PrintStream) $r1;

        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>($r2);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r6;
        byte[] r2;
        groovy.lang.Closure $r3;
        int i0, i1;
        java.lang.Boolean r5;
        java.lang.Object $r4;
        groovy.ui.SystemOutputInterceptor r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: groovy.ui.SystemOutputInterceptor;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<groovy.ui.SystemOutputInterceptor: groovy.lang.Closure callback>;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int)>(r2, i0, i1);

        $r4 = virtualinvoke $r3.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r1);

        r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<groovy.ui.SystemOutputInterceptor: java.io.OutputStream out>;

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[],int,int)>(r2, i0, i1);

     label1:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.OutputStream $r5;
        groovy.lang.Closure $r1;
        char $c1;
        int i0;
        java.lang.Boolean r4;
        java.lang.Object $r3;
        groovy.ui.SystemOutputInterceptor r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: groovy.ui.SystemOutputInterceptor;

        i0 := @parameter0: int;

        $r1 = r0.<groovy.ui.SystemOutputInterceptor: groovy.lang.Closure callback>;

        $c1 = (char) i0;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c1);

        $r3 = virtualinvoke $r1.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>($r2);

        r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<groovy.ui.SystemOutputInterceptor: java.io.OutputStream out>;

        virtualinvoke $r5.<java.io.OutputStream: void write(int)>(i0);

     label1:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <groovy.ui.SystemOutputInterceptor: java.lang.Class class$groovy$ui$SystemOutputInterceptor>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <groovy.ui.SystemOutputInterceptor: java.lang.Class class$(java.lang.String)>("groovy.ui.SystemOutputInterceptor");

        <groovy.ui.SystemOutputInterceptor: java.lang.Class class$groovy$ui$SystemOutputInterceptor> = $r1;

        goto label2;

     label1:
        $r1 = <groovy.ui.SystemOutputInterceptor: java.lang.Class class$groovy$ui$SystemOutputInterceptor>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <groovy.ui.SystemOutputInterceptor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
