public final class org.apache.poi.poifs.storage.BATBlock extends org.apache.poi.poifs.storage.BigBlock
{
    private int[] _values;
    private boolean _has_free_sectors;
    private int ourBlockIndex;

    private void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)
    {
        org.apache.poi.poifs.storage.BATBlock r0;
        org.apache.poi.poifs.common.POIFSBigBlockSize r1;
        int[] $r2, $r3;
        int $i0, $i2;

        r0 := @this: org.apache.poi.poifs.storage.BATBlock;

        r1 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        specialinvoke r0.<org.apache.poi.poifs.storage.BigBlock: void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)>(r1);

        $i0 = virtualinvoke r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBATEntriesPerBlock()>();

        $r2 = newarray (int)[$i0];

        r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values> = $r2;

        r0.<org.apache.poi.poifs.storage.BATBlock: boolean _has_free_sectors> = 1;

        $r3 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i2 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, $i2);

        return;
    }

    private void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize, int[], int, int)
    {
        org.apache.poi.poifs.storage.BATBlock r0;
        org.apache.poi.poifs.common.POIFSBigBlockSize r1;
        int[] $r2, r3, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, i6;

        r0 := @this: org.apache.poi.poifs.storage.BATBlock;

        r1 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        r3 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.poi.poifs.storage.BATBlock: void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)>(r1);

        i6 = i0;

     label1:
        if i6 >= i1 goto label2;

        $r4 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i5 = i6 - i0;

        $i4 = r3[i6];

        $r4[$i5] = $i4;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i3 = i1 - i0;

        $r2 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i2 = lengthof $r2;

        if $i3 != $i2 goto label3;

        specialinvoke r0.<org.apache.poi.poifs.storage.BATBlock: void recomputeFree()>();

     label3:
        return;
    }

    private void recomputeFree()
    {
        org.apache.poi.poifs.storage.BATBlock r0;
        int[] $r1, $r2;
        int $i0, $i1, i2, $i4;
        boolean z0;

        r0 := @this: org.apache.poi.poifs.storage.BATBlock;

        z0 = 0;

        i2 = 0;

     label1:
        $r1 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label3;

        $r2 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i1 = $r2[i2];

        $i4 = (int) -1;

        if $i1 != $i4 goto label2;

        z0 = 1;

        goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        r0.<org.apache.poi.poifs.storage.BATBlock: boolean _has_free_sectors> = z0;

        return;
    }

    public static org.apache.poi.poifs.storage.BATBlock createBATBlock(org.apache.poi.poifs.common.POIFSBigBlockSize, java.nio.ByteBuffer)
    {
        byte[] r2;
        org.apache.poi.poifs.storage.BATBlock $r0;
        java.nio.ByteBuffer r4;
        org.apache.poi.poifs.common.POIFSBigBlockSize r1;
        int[] $r3, $r5;
        int $i0, $i1, i2;

        r1 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        r4 := @parameter1: java.nio.ByteBuffer;

        $r0 = new org.apache.poi.poifs.storage.BATBlock;

        specialinvoke $r0.<org.apache.poi.poifs.storage.BATBlock: void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)>(r1);

        r2 = newarray (byte)[4];

        i2 = 0;

     label1:
        $r3 = $r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i0 = lengthof $r3;

        if i2 >= $i0 goto label2;

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

        $r5 = $r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i1 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[])>(r2);

        $r5[i2] = $i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        specialinvoke $r0.<org.apache.poi.poifs.storage.BATBlock: void recomputeFree()>();

        return $r0;
    }

    public static org.apache.poi.poifs.storage.BATBlock createEmptyBATBlock(org.apache.poi.poifs.common.POIFSBigBlockSize, boolean)
    {
        org.apache.poi.poifs.storage.BATBlock $r2;
        org.apache.poi.poifs.common.POIFSBigBlockSize r1;
        int $i1;
        boolean z0;

        r1 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        z0 := @parameter1: boolean;

        $r2 = new org.apache.poi.poifs.storage.BATBlock;

        specialinvoke $r2.<org.apache.poi.poifs.storage.BATBlock: void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)>(r1);

        if z0 == 0 goto label1;

        $i1 = (int) -2;

        specialinvoke $r2.<org.apache.poi.poifs.storage.BATBlock: void setXBATChain(org.apache.poi.poifs.common.POIFSBigBlockSize,int)>(r1, $i1);

     label1:
        return $r2;
    }

    public static org.apache.poi.poifs.storage.BATBlock[] createBATBlocks(org.apache.poi.poifs.common.POIFSBigBlockSize, int[])
    {
        org.apache.poi.poifs.storage.BATBlock $r3;
        org.apache.poi.poifs.storage.BATBlock[] r2;
        org.apache.poi.poifs.common.POIFSBigBlockSize r0;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i9;

        r0 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        r1 := @parameter1: int[];

        $i0 = lengthof r1;

        $i1 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: int calculateStorageRequirements(org.apache.poi.poifs.common.POIFSBigBlockSize,int)>(r0, $i0);

        r2 = newarray (org.apache.poi.poifs.storage.BATBlock)[$i1];

        i6 = 0;

        i7 = lengthof r1;

        $i2 = virtualinvoke r0.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBATEntriesPerBlock()>();

        i8 = 0;

     label1:
        $i3 = lengthof r1;

        if i8 >= $i3 goto label4;

        $i4 = i6;

        i6 = i6 + 1;

        $r3 = new org.apache.poi.poifs.storage.BATBlock;

        $i5 = i8;

        if i7 <= $i2 goto label2;

        $i9 = i8 + $i2;

        goto label3;

     label2:
        $i9 = lengthof r1;

     label3:
        specialinvoke $r3.<org.apache.poi.poifs.storage.BATBlock: void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize,int[],int,int)>(r0, r1, $i5, $i9);

        r2[$i4] = $r3;

        i7 = i7 - $i2;

        i8 = i8 + $i2;

        goto label1;

     label4:
        return r2;
    }

    public static org.apache.poi.poifs.storage.BATBlock[] createXBATBlocks(org.apache.poi.poifs.common.POIFSBigBlockSize, int[], int)
    {
        org.apache.poi.poifs.storage.BATBlock $r3, $r4, $r6;
        org.apache.poi.poifs.storage.BATBlock[] r2;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, i11, i12, i13, $i14, i15, $i17;
        org.apache.poi.poifs.common.POIFSBigBlockSize r0;

        r0 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        r1 := @parameter1: int[];

        i6 := @parameter2: int;

        $i0 = lengthof r1;

        $i1 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: int calculateXBATStorageRequirements(org.apache.poi.poifs.common.POIFSBigBlockSize,int)>(r0, $i0);

        r2 = newarray (org.apache.poi.poifs.storage.BATBlock)[$i1];

        i11 = 0;

        i12 = lengthof r1;

        $i2 = virtualinvoke r0.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getXBATEntriesPerBlock()>();

        if $i1 == 0 goto label7;

        i13 = 0;

     label1:
        $i3 = lengthof r1;

        if i13 >= $i3 goto label4;

        $i9 = i11;

        i11 = i11 + 1;

        $r6 = new org.apache.poi.poifs.storage.BATBlock;

        $i10 = i13;

        if i12 <= $i2 goto label2;

        $i14 = i13 + $i2;

        goto label3;

     label2:
        $i14 = lengthof r1;

     label3:
        specialinvoke $r6.<org.apache.poi.poifs.storage.BATBlock: void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize,int[],int,int)>(r0, r1, $i10, $i14);

        r2[$i9] = $r6;

        i12 = i12 - $i2;

        i13 = i13 + $i2;

        goto label1;

     label4:
        i15 = 0;

     label5:
        $i4 = lengthof r2;

        $i5 = $i4 - 1;

        if i15 >= $i5 goto label6;

        $r4 = r2[i15];

        $i7 = i6 + i15;

        $i8 = $i7 + 1;

        specialinvoke $r4.<org.apache.poi.poifs.storage.BATBlock: void setXBATChain(org.apache.poi.poifs.common.POIFSBigBlockSize,int)>(r0, $i8);

        i15 = i15 + 1;

        goto label5;

     label6:
        $r3 = r2[i15];

        $i17 = (int) -2;

        specialinvoke $r3.<org.apache.poi.poifs.storage.BATBlock: void setXBATChain(org.apache.poi.poifs.common.POIFSBigBlockSize,int)>(r0, $i17);

     label7:
        return r2;
    }

    public static int calculateStorageRequirements(org.apache.poi.poifs.common.POIFSBigBlockSize, int)
    {
        org.apache.poi.poifs.common.POIFSBigBlockSize r0;
        int $i0, i1, $i2, $i3, $i4;

        r0 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBATEntriesPerBlock()>();

        $i2 = i1 + $i0;

        $i3 = $i2 - 1;

        $i4 = $i3 / $i0;

        return $i4;
    }

    public static int calculateXBATStorageRequirements(org.apache.poi.poifs.common.POIFSBigBlockSize, int)
    {
        org.apache.poi.poifs.common.POIFSBigBlockSize r0;
        int $i0, i1, $i2, $i3, $i4;

        r0 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getXBATEntriesPerBlock()>();

        $i2 = i1 + $i0;

        $i3 = $i2 - 1;

        $i4 = $i3 / $i0;

        return $i4;
    }

    public static long calculateMaximumSize(org.apache.poi.poifs.common.POIFSBigBlockSize, int)
    {
        long $l3, $l5, $l6, l7;
        org.apache.poi.poifs.common.POIFSBigBlockSize r0;
        int i0, $i1, $i2, $i4;

        r0 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBATEntriesPerBlock()>();

        $i2 = i0 * $i1;

        $l3 = (long) $i2;

        l7 = 1L + $l3;

        $i4 = virtualinvoke r0.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        $l5 = (long) $i4;

        $l6 = l7 * $l5;

        return $l6;
    }

    public static long calculateMaximumSize(org.apache.poi.poifs.storage.HeaderBlock)
    {
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1;
        int $i0;
        long $l1;
        org.apache.poi.poifs.storage.HeaderBlock r0;

        r0 := @parameter0: org.apache.poi.poifs.storage.HeaderBlock;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.storage.HeaderBlock: org.apache.poi.poifs.common.POIFSBigBlockSize getBigBlockSize()>();

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.storage.HeaderBlock: int getBATCount()>();

        $l1 = staticinvoke <org.apache.poi.poifs.storage.BATBlock: long calculateMaximumSize(org.apache.poi.poifs.common.POIFSBigBlockSize,int)>($r1, $i0);

        return $l1;
    }

    public static org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex getBATBlockAndIndex(int, org.apache.poi.poifs.storage.HeaderBlock, java.util.List)
    {
        org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex $r2;
        org.apache.poi.poifs.storage.BATBlock $r5;
        java.util.List r3;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1;
        int i0, $i1, $i2, i3, $i4, i5;
        java.lang.Object $r4;
        org.apache.poi.poifs.storage.HeaderBlock r0;
        double $d0, $d1;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.poi.poifs.storage.HeaderBlock;

        r3 := @parameter2: java.util.List;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.storage.HeaderBlock: org.apache.poi.poifs.common.POIFSBigBlockSize getBigBlockSize()>();

        $i1 = virtualinvoke $r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBATEntriesPerBlock()>();

        $i2 = i0 / $i1;

        $d0 = (double) $i2;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        i3 = (int) $d1;

        $i4 = virtualinvoke $r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBATEntriesPerBlock()>();

        i5 = i0 % $i4;

        $r2 = new org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (org.apache.poi.poifs.storage.BATBlock) $r4;

        specialinvoke $r2.<org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex: void <init>(int,org.apache.poi.poifs.storage.BATBlock,org.apache.poi.poifs.storage.BATBlock$1)>(i5, $r5, null);

        return $r2;
    }

    public static org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex getSBATBlockAndIndex(int, org.apache.poi.poifs.storage.HeaderBlock, java.util.List)
    {
        org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex $r2;
        org.apache.poi.poifs.storage.BATBlock $r5;
        java.util.List r3;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1;
        int i0, $i1, $i2, i3, $i4, i5;
        java.lang.Object $r4;
        org.apache.poi.poifs.storage.HeaderBlock r0;
        double $d0, $d1;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.poi.poifs.storage.HeaderBlock;

        r3 := @parameter2: java.util.List;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.storage.HeaderBlock: org.apache.poi.poifs.common.POIFSBigBlockSize getBigBlockSize()>();

        $i1 = virtualinvoke $r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBATEntriesPerBlock()>();

        $i2 = i0 / $i1;

        $d0 = (double) $i2;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        i3 = (int) $d1;

        $i4 = virtualinvoke $r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBATEntriesPerBlock()>();

        i5 = i0 % $i4;

        $r2 = new org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (org.apache.poi.poifs.storage.BATBlock) $r4;

        specialinvoke $r2.<org.apache.poi.poifs.storage.BATBlock$BATBlockAndIndex: void <init>(int,org.apache.poi.poifs.storage.BATBlock,org.apache.poi.poifs.storage.BATBlock$1)>(i5, $r5, null);

        return $r2;
    }

    private void setXBATChain(org.apache.poi.poifs.common.POIFSBigBlockSize, int)
    {
        org.apache.poi.poifs.storage.BATBlock r1;
        org.apache.poi.poifs.common.POIFSBigBlockSize r0;
        int[] $r2;
        int $i0, i1;

        r1 := @this: org.apache.poi.poifs.storage.BATBlock;

        r0 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getXBATEntriesPerBlock()>();

        $r2 = r1.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $r2[$i0] = i1;

        return;
    }

    public boolean hasFreeSectors()
    {
        org.apache.poi.poifs.storage.BATBlock r0;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.storage.BATBlock;

        $z0 = r0.<org.apache.poi.poifs.storage.BATBlock: boolean _has_free_sectors>;

        return $z0;
    }

    public int getValueAt(int)
    {
        org.apache.poi.poifs.storage.BATBlock r0;
        int[] $r1, $r2, $r9;
        int i0, $i1, $i2, $i3;
        java.lang.String $r12;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r10, $r11;

        r0 := @this: org.apache.poi.poifs.storage.BATBlock;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i1 = lengthof $r1;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to fetch offset ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BAT only contains ");

        $r9 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i3 = lengthof $r9;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r12);

        throw $r3;

     label1:
        $r2 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i2 = $r2[i0];

        return $i2;
    }

    public void setValueAt(int, int)
    {
        org.apache.poi.poifs.storage.BATBlock r0;
        int[] $r1, $r2;
        int i0, i1, i2, $i4, $i6;

        r0 := @this: org.apache.poi.poifs.storage.BATBlock;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        i1 = $r1[i0];

        $r2 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $r2[i0] = i2;

        $i4 = (int) -1;

        if i2 != $i4 goto label1;

        r0.<org.apache.poi.poifs.storage.BATBlock: boolean _has_free_sectors> = 1;

        return;

     label1:
        $i6 = (int) -1;

        if i1 != $i6 goto label2;

        specialinvoke r0.<org.apache.poi.poifs.storage.BATBlock: void recomputeFree()>();

     label2:
        return;
    }

    public void setOurBlockIndex(int)
    {
        int i0;
        org.apache.poi.poifs.storage.BATBlock r0;

        r0 := @this: org.apache.poi.poifs.storage.BATBlock;

        i0 := @parameter0: int;

        r0.<org.apache.poi.poifs.storage.BATBlock: int ourBlockIndex> = i0;

        return;
    }

    public int getOurBlockIndex()
    {
        int $i0;
        org.apache.poi.poifs.storage.BATBlock r0;

        r0 := @this: org.apache.poi.poifs.storage.BATBlock;

        $i0 = r0.<org.apache.poi.poifs.storage.BATBlock: int ourBlockIndex>;

        return $i0;
    }

    void writeData(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r2;
        org.apache.poi.poifs.storage.BATBlock r1;

        r1 := @this: org.apache.poi.poifs.storage.BATBlock;

        r0 := @parameter0: java.io.OutputStream;

        $r2 = specialinvoke r1.<org.apache.poi.poifs.storage.BATBlock: byte[] serialize()>();

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r2);

        return;
    }

    void writeData(java.nio.ByteBuffer) throws java.io.IOException
    {
        byte[] $r2;
        org.apache.poi.poifs.storage.BATBlock r1;
        java.nio.ByteBuffer r0;

        r1 := @this: org.apache.poi.poifs.storage.BATBlock;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r2 = specialinvoke r1.<org.apache.poi.poifs.storage.BATBlock: byte[] serialize()>();

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r2);

        return;
    }

    private byte[] serialize()
    {
        byte[] r2;
        org.apache.poi.poifs.storage.BATBlock r0;
        org.apache.poi.poifs.common.POIFSBigBlockSize $r1;
        int[] $r3, $r4;
        int $i0, $i1, $i2, i3, i4;

        r0 := @this: org.apache.poi.poifs.storage.BATBlock;

        $r1 = r0.<org.apache.poi.poifs.storage.BATBlock: org.apache.poi.poifs.common.POIFSBigBlockSize bigBlockSize>;

        $i0 = virtualinvoke $r1.<org.apache.poi.poifs.common.POIFSBigBlockSize: int getBigBlockSize()>();

        r2 = newarray (byte)[$i0];

        i3 = 0;

        i4 = 0;

     label1:
        $r3 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i1 = lengthof $r3;

        if i4 >= $i1 goto label2;

        $r4 = r0.<org.apache.poi.poifs.storage.BATBlock: int[] _values>;

        $i2 = $r4[i4];

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>(r2, i3, $i2);

        i3 = i3 + 4;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r2;
    }

    public volatile void writeBlocks(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.poi.poifs.storage.BATBlock r0;

        r0 := @this: org.apache.poi.poifs.storage.BATBlock;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.poi.poifs.storage.BigBlock: void writeBlocks(java.io.OutputStream)>(r1);

        return;
    }
}
