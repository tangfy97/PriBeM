final class org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager extends java.lang.Object implements org.waveprotocol.wave.model.document.indexed.DocumentHandler
{
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet handlers;
    private boolean isPaused;

    private void <init>()
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet handlers> = $r1;

        r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager: boolean isPaused> = 0;

        return;
    }

    public void onDocumentEvents(org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler r4;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager;

        r5 := @parameter0: org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle;

        $z0 = r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager: boolean isPaused>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet handlers>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.document.indexed.DocumentHandler) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.document.indexed.DocumentHandler: void onDocumentEvents(org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle)>(r5);

        goto label2;

     label3:
        return;
    }

    void addHandler(org.waveprotocol.wave.model.document.indexed.DocumentHandler)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.DocumentHandler;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet handlers>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    void removeHandler(org.waveprotocol.wave.model.document.indexed.DocumentHandler)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.DocumentHandler;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager: org.waveprotocol.wave.model.util.CopyOnWriteSet handlers>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void setPaused(boolean)
    {
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager;

        z0 := @parameter0: boolean;

        r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager: boolean isPaused> = z0;

        return;
    }

    void <init>(org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$1)
    {
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$1 r1;
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$1;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager: void <init>()>();

        return;
    }

    static void access$100(org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager, boolean)
    {
        org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument$DocumentHandlerManager: void setPaused(boolean)>(z0);

        return;
    }
}
