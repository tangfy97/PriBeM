class com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource extends java.lang.Object implements com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource
{
    int hash;
    com.hp.hpl.jena.graph.Node node;

    public java.lang.String toString()
    {
        int $i0;
        com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource r2;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r4;

        r2 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $i0 = r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource: int hash>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public int myHashCodeFromStatement()
    {
        int $i0;
        com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource;

        $i0 = r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource: int hash>;

        return $i0;
    }

    void <init>(com.hp.hpl.jena.graph.Node)
    {
        int $i0;
        com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource r0;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource: int hash> = $i0;

        r0.<com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource: com.hp.hpl.jena.graph.Node node> = r1;

        return;
    }

    public boolean mightBeEqual(com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4;
        int $i0, $i1;
        com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource r1, r2;
        com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource r0;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource;

        if r0 == null goto label3;

        $z0 = r0 instanceof com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource;

        if $z0 == 0 goto label3;

        r1 = (com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource) r0;

        $i1 = r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource: int hash>;

        $i0 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource: int hash>;

        if $i1 != $i0 goto label1;

        $r4 = r2.<com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource: com.hp.hpl.jena.graph.Node node>;

        $r3 = r1.<com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource: com.hp.hpl.jena.graph.Node node>;

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }
}
