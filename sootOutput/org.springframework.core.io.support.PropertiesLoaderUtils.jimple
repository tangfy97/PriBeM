public abstract class org.springframework.core.io.support.PropertiesLoaderUtils extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.core.io.support.PropertiesLoaderUtils r0;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Properties loadProperties(org.springframework.core.io.Resource) throws java.io.IOException
    {
        java.util.Properties $r0;
        org.springframework.core.io.Resource r1;

        r1 := @parameter0: org.springframework.core.io.Resource;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        staticinvoke <org.springframework.core.io.support.PropertiesLoaderUtils: void fillProperties(java.util.Properties,org.springframework.core.io.Resource)>($r0, r1);

        return $r0;
    }

    public static void fillProperties(java.util.Properties, org.springframework.core.io.Resource) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        java.util.Properties r2;
        org.springframework.core.io.Resource r0;
        java.io.InputStream $r1;

        r2 := @parameter0: java.util.Properties;

        r0 := @parameter1: org.springframework.core.io.Resource;

        $r1 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

     label1:
        virtualinvoke r2.<java.util.Properties: void load(java.io.InputStream)>($r1);

        goto label3;

     label2:
        $r3 := @caughtexception;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        throw $r3;

     label3:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public static java.util.Properties loadAllProperties(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        java.util.Properties $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadAllProperties(java.lang.String,java.lang.ClassLoader)>(r0, null);

        return $r1;
    }

    public static java.util.Properties loadAllProperties(java.lang.String, java.lang.ClassLoader) throws java.io.IOException
    {
        java.lang.Throwable $r8;
        java.util.Properties $r2;
        java.util.Enumeration $r3;
        java.net.URL r5;
        java.net.URLConnection $r6;
        java.lang.Object $r4;
        java.lang.String r0;
        java.lang.ClassLoader r1, r9;
        java.io.InputStream $r7, r10;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Resource name must not be null");

        r9 = r1;

        if r1 != null goto label1;

        r9 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

     label1:
        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        $r3 = virtualinvoke r9.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r0);

        goto label7;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.net.URL) $r4;

        r10 = null;

     label3:
        $r6 = virtualinvoke r5.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke $r6.<java.net.URLConnection: void setUseCaches(boolean)>(0);

        $r7 = virtualinvoke $r6.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        r10 = $r7;

        virtualinvoke $r2.<java.util.Properties: void load(java.io.InputStream)>($r7);

        goto label6;

     label4:
        $r8 := @caughtexception;

        if r10 == null goto label5;

        virtualinvoke r10.<java.io.InputStream: void close()>();

     label5:
        throw $r8;

     label6:
        if $r7 == null goto label7;

        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label7:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label2;

        return $r2;

        catch java.lang.Throwable from label3 to label4 with label4;
    }
}
