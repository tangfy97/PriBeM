class org.bouncycastle.math.ec.ReferenceMultiplier extends java.lang.Object implements org.bouncycastle.math.ec.ECMultiplier
{

    void <init>()
    {
        org.bouncycastle.math.ec.ReferenceMultiplier r0;

        r0 := @this: org.bouncycastle.math.ec.ReferenceMultiplier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.bouncycastle.math.ec.ECPoint multiply(org.bouncycastle.math.ec.ECPoint, java.math.BigInteger, org.bouncycastle.math.ec.PreCompInfo)
    {
        org.bouncycastle.math.ec.ECCurve $r0;
        org.bouncycastle.math.ec.ReferenceMultiplier r2;
        org.bouncycastle.math.ec.ECPoint r4, r5;
        org.bouncycastle.math.ec.PreCompInfo r3;
        int $i0, i1;
        java.math.BigInteger r1;
        boolean $z0;

        r2 := @this: org.bouncycastle.math.ec.ReferenceMultiplier;

        r4 := @parameter0: org.bouncycastle.math.ec.ECPoint;

        r1 := @parameter1: java.math.BigInteger;

        r3 := @parameter2: org.bouncycastle.math.ec.PreCompInfo;

        $r0 = virtualinvoke r4.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECCurve getCurve()>();

        r5 = virtualinvoke $r0.<org.bouncycastle.math.ec.ECCurve: org.bouncycastle.math.ec.ECPoint getInfinity()>();

        $i0 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i1);

        if $z0 == 0 goto label2;

        r5 = virtualinvoke r5.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint)>(r4);

     label2:
        r4 = virtualinvoke r4.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint twice()>();

        i1 = i1 + 1;

        goto label1;

     label3:
        return r5;
    }
}
