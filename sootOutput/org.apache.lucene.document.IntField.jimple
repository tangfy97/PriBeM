public final class org.apache.lucene.document.IntField extends org.apache.lucene.document.Field
{
    public static final org.apache.lucene.document.FieldType TYPE_NOT_STORED;
    public static final org.apache.lucene.document.FieldType TYPE_STORED;

    public void <init>(java.lang.String, int, org.apache.lucene.document.Field$Store)
    {
        org.apache.lucene.document.Field$Store r2, $r3;
        org.apache.lucene.document.FieldType $r5;
        int i0;
        java.lang.String r1;
        org.apache.lucene.document.IntField r0;
        java.lang.Integer $r4;

        r0 := @this: org.apache.lucene.document.IntField;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.lucene.document.Field$Store;

        $r3 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        if r2 != $r3 goto label1;

        $r5 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_STORED>;

        goto label2;

     label1:
        $r5 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_NOT_STORED>;

     label2:
        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,org.apache.lucene.document.FieldType)>(r1, $r5);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.apache.lucene.document.IntField: java.lang.Object fieldsData> = $r4;

        return;
    }

    public void <init>(java.lang.String, int, org.apache.lucene.document.FieldType)
    {
        org.apache.lucene.document.FieldType$NumericType $r3, $r4, $r9;
        org.apache.lucene.document.FieldType r2;
        java.lang.IllegalArgumentException $r6;
        java.lang.Integer $r5;
        int i0;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String r1, $r11;
        org.apache.lucene.document.IntField r0;

        r0 := @this: org.apache.lucene.document.IntField;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.lucene.document.FieldType;

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,org.apache.lucene.document.FieldType)>(r1, r2);

        $r3 = virtualinvoke r2.<org.apache.lucene.document.FieldType: org.apache.lucene.document.FieldType$NumericType numericType()>();

        $r4 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType INT>;

        if $r3 == $r4 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type.numericType() must be INT but got ");

        $r9 = virtualinvoke r2.<org.apache.lucene.document.FieldType: org.apache.lucene.document.FieldType$NumericType numericType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.apache.lucene.document.IntField: java.lang.Object fieldsData> = $r5;

        return;
    }

    static void <clinit>()
    {
        org.apache.lucene.document.FieldType $r0, $r1, $r2, $r3, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r16, $r17, $r18;
        org.apache.lucene.document.FieldType$NumericType $r6, $r15;
        org.apache.lucene.index.FieldInfo$IndexOptions $r4, $r13;

        $r0 = new org.apache.lucene.document.FieldType;

        specialinvoke $r0.<org.apache.lucene.document.FieldType: void <init>()>();

        <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_NOT_STORED> = $r0;

        $r1 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_NOT_STORED>;

        virtualinvoke $r1.<org.apache.lucene.document.FieldType: void setIndexed(boolean)>(1);

        $r2 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_NOT_STORED>;

        virtualinvoke $r2.<org.apache.lucene.document.FieldType: void setTokenized(boolean)>(1);

        $r3 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_NOT_STORED>;

        virtualinvoke $r3.<org.apache.lucene.document.FieldType: void setOmitNorms(boolean)>(1);

        $r5 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_NOT_STORED>;

        $r4 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        virtualinvoke $r5.<org.apache.lucene.document.FieldType: void setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions)>($r4);

        $r7 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_NOT_STORED>;

        $r6 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType INT>;

        virtualinvoke $r7.<org.apache.lucene.document.FieldType: void setNumericType(org.apache.lucene.document.FieldType$NumericType)>($r6);

        $r8 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_NOT_STORED>;

        virtualinvoke $r8.<org.apache.lucene.document.FieldType: void freeze()>();

        $r9 = new org.apache.lucene.document.FieldType;

        specialinvoke $r9.<org.apache.lucene.document.FieldType: void <init>()>();

        <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_STORED> = $r9;

        $r10 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_STORED>;

        virtualinvoke $r10.<org.apache.lucene.document.FieldType: void setIndexed(boolean)>(1);

        $r11 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_STORED>;

        virtualinvoke $r11.<org.apache.lucene.document.FieldType: void setTokenized(boolean)>(1);

        $r12 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_STORED>;

        virtualinvoke $r12.<org.apache.lucene.document.FieldType: void setOmitNorms(boolean)>(1);

        $r14 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_STORED>;

        $r13 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        virtualinvoke $r14.<org.apache.lucene.document.FieldType: void setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions)>($r13);

        $r16 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_STORED>;

        $r15 = <org.apache.lucene.document.FieldType$NumericType: org.apache.lucene.document.FieldType$NumericType INT>;

        virtualinvoke $r16.<org.apache.lucene.document.FieldType: void setNumericType(org.apache.lucene.document.FieldType$NumericType)>($r15);

        $r17 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_STORED>;

        virtualinvoke $r17.<org.apache.lucene.document.FieldType: void setStored(boolean)>(1);

        $r18 = <org.apache.lucene.document.IntField: org.apache.lucene.document.FieldType TYPE_STORED>;

        virtualinvoke $r18.<org.apache.lucene.document.FieldType: void freeze()>();

        return;
    }
}
