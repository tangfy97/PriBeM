public class org.apache.commons.collections.ListUtils extends java.lang.Object
{
    public static final java.util.List EMPTY_LIST;

    public void <init>()
    {
        org.apache.commons.collections.ListUtils r0;

        r0 := @this: org.apache.commons.collections.ListUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List intersection(java.util.List, java.util.List)
    {
        java.util.List r1, r4;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.ArrayList $r0;
        boolean $z0, $z1;

        r4 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r4.<java.util.List: boolean contains(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public static java.util.List subtract(java.util.List, java.util.List)
    {
        java.util.List r1, r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean remove(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.List sum(java.util.List, java.util.List)
    {
        java.util.List r0, r1, $r2, $r3, $r4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <org.apache.commons.collections.ListUtils: java.util.List union(java.util.List,java.util.List)>(r0, r1);

        $r3 = staticinvoke <org.apache.commons.collections.ListUtils: java.util.List intersection(java.util.List,java.util.List)>(r0, r1);

        $r4 = staticinvoke <org.apache.commons.collections.ListUtils: java.util.List subtract(java.util.List,java.util.List)>($r2, $r3);

        return $r4;
    }

    public static java.util.List union(java.util.List, java.util.List)
    {
        java.util.List r1, r2;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r2);

        return $r0;
    }

    public static boolean isEqualList(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r2, $r3;
        java.util.Collection r0, r1;
        int $i0, $i1;
        java.lang.Object $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 == null goto label2;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 == $i1 goto label3;

     label2:
        return 0;

     label3:
        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $r4 != null goto label5;

        if $r5 != null goto label6;

        goto label4;

     label5:
        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z3 != 0 goto label4;

     label6:
        return 0;

     label7:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label8;

        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label8;

        $z5 = 1;

        goto label9;

     label8:
        $z5 = 0;

     label9:
        return $z5;
    }

    public static int hashCodeForList(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        int $i0, i1, $i2;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        return 0;

     label1:
        i1 = 1;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = 31 * i1;

        if $r2 != null goto label3;

        $i2 = 0;

        goto label4;

     label3:
        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label4:
        i1 = $i0 + $i2;

        goto label2;

     label5:
        return i1;
    }

    public static java.util.List retainAll(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection r1, r2;
        java.util.ArrayList $r0;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.util.Collection;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r2.<java.util.Collection: int size()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i2);

        $r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public static java.util.List removeAll(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1, r4;
        java.lang.Object $r3;
        java.util.ArrayList $r0;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        r4 := @parameter1: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r4.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public static java.util.List synchronizedList(java.util.List)
    {
        java.util.List r0, $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <org.apache.commons.collections.list.SynchronizedList: java.util.List decorate(java.util.List)>(r0);

        return $r1;
    }

    public static java.util.List unmodifiableList(java.util.List)
    {
        java.util.List r0, $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <org.apache.commons.collections.list.UnmodifiableList: java.util.List decorate(java.util.List)>(r0);

        return $r1;
    }

    public static java.util.List predicatedList(java.util.List, org.apache.commons.collections.Predicate)
    {
        org.apache.commons.collections.Predicate r1;
        java.util.List r0, $r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.apache.commons.collections.Predicate;

        $r2 = staticinvoke <org.apache.commons.collections.list.PredicatedList: java.util.List decorate(java.util.List,org.apache.commons.collections.Predicate)>(r0, r1);

        return $r2;
    }

    public static java.util.List typedList(java.util.List, java.lang.Class)
    {
        java.util.List r0, $r2;
        java.lang.Class r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.apache.commons.collections.list.TypedList: java.util.List decorate(java.util.List,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static java.util.List transformedList(java.util.List, org.apache.commons.collections.Transformer)
    {
        java.util.List r0, $r2;
        org.apache.commons.collections.Transformer r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.apache.commons.collections.Transformer;

        $r2 = staticinvoke <org.apache.commons.collections.list.TransformedList: java.util.List decorate(java.util.List,org.apache.commons.collections.Transformer)>(r0, r1);

        return $r2;
    }

    public static java.util.List lazyList(java.util.List, org.apache.commons.collections.Factory)
    {
        java.util.List r0, $r2;
        org.apache.commons.collections.Factory r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.apache.commons.collections.Factory;

        $r2 = staticinvoke <org.apache.commons.collections.list.LazyList: java.util.List decorate(java.util.List,org.apache.commons.collections.Factory)>(r0, r1);

        return $r2;
    }

    public static java.util.List fixedSizeList(java.util.List)
    {
        java.util.List r0, $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <org.apache.commons.collections.list.FixedSizeList: java.util.List decorate(java.util.List)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        java.util.List $r0;

        $r0 = <java.util.Collections: java.util.List EMPTY_LIST>;

        <org.apache.commons.collections.ListUtils: java.util.List EMPTY_LIST> = $r0;

        return;
    }
}
