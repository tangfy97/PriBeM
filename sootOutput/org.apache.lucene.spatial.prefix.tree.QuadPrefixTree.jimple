public class org.apache.lucene.spatial.prefix.tree.QuadPrefixTree extends org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree
{
    public static final int MAX_LEVELS_POSSIBLE;
    public static final int DEFAULT_MAX_LEVELS;
    private final double xmin;
    private final double xmax;
    private final double ymin;
    private final double ymax;
    private final double xmid;
    private final double ymid;
    private final double gridW;
    public final double gridH;
    final double[] levelW;
    final double[] levelH;
    final int[] levelS;
    final int[] levelN;
    static final boolean $assertionsDisabled;

    public void <init>(com.spatial4j.core.context.SpatialContext, com.spatial4j.core.shape.Rectangle, int)
    {
        int[] $r5, $r6, $r9, $r10, $r16, $r17, $r18, $r19;
        com.spatial4j.core.shape.Rectangle r2;
        com.spatial4j.core.context.SpatialContext r1;
        double[] $r3, $r4, $r7, $r8, $r11, $r12, $r13, $r14, $r15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        r1 := @parameter0: com.spatial4j.core.context.SpatialContext;

        r2 := @parameter1: com.spatial4j.core.shape.Rectangle;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree: void <init>(com.spatial4j.core.context.SpatialContext,int)>(r1, i0);

        $d0 = interfaceinvoke r2.<com.spatial4j.core.shape.Rectangle: double getMinX()>();

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double xmin> = $d0;

        $d1 = interfaceinvoke r2.<com.spatial4j.core.shape.Rectangle: double getMaxX()>();

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double xmax> = $d1;

        $d2 = interfaceinvoke r2.<com.spatial4j.core.shape.Rectangle: double getMinY()>();

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double ymin> = $d2;

        $d3 = interfaceinvoke r2.<com.spatial4j.core.shape.Rectangle: double getMaxY()>();

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double ymax> = $d3;

        $r3 = newarray (double)[i0];

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelW> = $r3;

        $r4 = newarray (double)[i0];

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelH> = $r4;

        $r5 = newarray (int)[i0];

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelS> = $r5;

        $r6 = newarray (int)[i0];

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelN> = $r6;

        $d5 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double xmax>;

        $d4 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double xmin>;

        $d6 = $d5 - $d4;

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double gridW> = $d6;

        $d8 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double ymax>;

        $d7 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double ymin>;

        $d9 = $d8 - $d7;

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double gridH> = $d9;

        $d12 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double xmin>;

        $d10 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double gridW>;

        $d11 = $d10 / 2.0;

        $d13 = $d12 + $d11;

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double xmid> = $d13;

        $d16 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double ymin>;

        $d14 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double gridH>;

        $d15 = $d14 / 2.0;

        $d17 = $d16 + $d15;

        r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double ymid> = $d17;

        $r7 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelW>;

        $d18 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double gridW>;

        $d19 = $d18 / 2.0;

        $r7[0] = $d19;

        $r8 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelH>;

        $d20 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double gridH>;

        $d21 = $d20 / 2.0;

        $r8[0] = $d21;

        $r9 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelS>;

        $r9[0] = 2;

        $r10 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelN>;

        $r10[0] = 4;

        i10 = 1;

     label1:
        $r11 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelW>;

        $i1 = lengthof $r11;

        if i10 >= $i1 goto label2;

        $r13 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelW>;

        $r12 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelW>;

        $i2 = i10 - 1;

        $d22 = $r12[$i2];

        $d23 = $d22 / 2.0;

        $r13[i10] = $d23;

        $r15 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelH>;

        $r14 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelH>;

        $i3 = i10 - 1;

        $d24 = $r14[$i3];

        $d25 = $d24 / 2.0;

        $r15[i10] = $d25;

        $r17 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelS>;

        $r16 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelS>;

        $i4 = i10 - 1;

        $i5 = $r16[$i4];

        $i6 = $i5 * 2;

        $r17[i10] = $i6;

        $r19 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelN>;

        $r18 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelN>;

        $i7 = i10 - 1;

        $i8 = $r18[$i7];

        $i9 = $i8 * 4;

        $r19[i10] = $i9;

        i10 = i10 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(com.spatial4j.core.context.SpatialContext)
    {
        com.spatial4j.core.context.SpatialContext r1;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r0;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        r1 := @parameter0: com.spatial4j.core.context.SpatialContext;

        specialinvoke r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: void <init>(com.spatial4j.core.context.SpatialContext,int)>(r1, 12);

        return;
    }

    public void <init>(com.spatial4j.core.context.SpatialContext, int)
    {
        com.spatial4j.core.shape.Rectangle $r2;
        com.spatial4j.core.context.SpatialContext r1;
        int i0;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r0;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        r1 := @parameter0: com.spatial4j.core.context.SpatialContext;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.shape.Rectangle getWorldBounds()>();

        specialinvoke r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: void <init>(com.spatial4j.core.context.SpatialContext,com.spatial4j.core.shape.Rectangle,int)>(r1, $r2, i0);

        return;
    }

    public void printInfo(java.io.PrintStream)
    {
        double[] $r7, $r11;
        java.text.NumberFormat $r1;
        int[] $r15, $r18, $r19;
        java.util.Locale $r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r8, $r12, $r21;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r2;
        double $d0, $d1;
        java.io.PrintStream r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r13, $r14, $r16, $r17, $r20;

        r2 := @this: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        r3 := @parameter0: java.io.PrintStream;

        $r0 = <java.util.Locale: java.util.Locale ROOT>;

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>($r0);

        virtualinvoke $r1.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(5);

        virtualinvoke $r1.<java.text.NumberFormat: void setMinimumFractionDigits(int)>(5);

        virtualinvoke $r1.<java.text.NumberFormat: void setMinimumIntegerDigits(int)>(3);

        i5 = 0;

     label1:
        $i0 = r2.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int maxLevels>;

        if i5 >= $i0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\t");

        $r7 = r2.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelW>;

        $d0 = $r7[i5];

        $r8 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(double)>($d0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r11 = r2.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelH>;

        $d1 = $r11[i5];

        $r12 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(double)>($d1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r15 = r2.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelS>;

        $i1 = $r15[i5];

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r18 = r2.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelS>;

        $i3 = $r18[i5];

        $r19 = r2.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int[] levelS>;

        $i2 = $r19[i5];

        $i4 = $i3 * $i2;

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintStream: void println(java.lang.String)>($r21);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public int getLevelForDistance(double)
    {
        double[] $r1, $r2;
        byte $b0, $b4, $b5;
        int $i1, $i2, $i3, $i6, $i7, i8, $i9, $i10;
        double d0, $d1, $d2;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r0;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $i7 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int maxLevels>;

        return $i7;

     label1:
        i8 = 0;

     label2:
        $i1 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int maxLevels>;

        $i2 = $i1 - 1;

        if i8 >= $i2 goto label4;

        $r1 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelW>;

        $d1 = $r1[i8];

        $b4 = d0 cmpl $d1;

        $i9 = (int) $b4;

        if $i9 <= 0 goto label3;

        $r2 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelH>;

        $d2 = $r2[i8];

        $b5 = d0 cmpl $d2;

        $i10 = (int) $b5;

        if $i10 <= 0 goto label3;

        $i6 = i8 + 1;

        return $i6;

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        $i3 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int maxLevels>;

        return $i3;
    }

    public org.apache.lucene.spatial.prefix.tree.Cell getCell(com.spatial4j.core.shape.Point, int)
    {
        com.spatial4j.core.context.SpatialContext $r4;
        org.apache.lucene.spatial.prefix.tree.Cell $r7;
        java.util.ArrayList $r0;
        com.spatial4j.core.shape.Point r3, $r5;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.Object $r6;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r1;
        double $d0, $d1, $d2, $d3;

        r1 := @this: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        r3 := @parameter0: com.spatial4j.core.shape.Point;

        i0 := @parameter1: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(1);

        $d0 = r1.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double xmid>;

        $d1 = r1.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double ymid>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = r1.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: com.spatial4j.core.context.SpatialContext ctx>;

        $d2 = interfaceinvoke r3.<com.spatial4j.core.shape.Point: double getX()>();

        $d3 = interfaceinvoke r3.<com.spatial4j.core.shape.Point: double getY()>();

        $r5 = virtualinvoke $r4.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.shape.Point makePoint(double,double)>($d2, $d3);

        specialinvoke r1.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: void build(double,double,int,java.util.List,java.lang.StringBuilder,com.spatial4j.core.shape.Shape,int)>($d0, $d1, 0, $r0, $r2, $r5, i0);

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (org.apache.lucene.spatial.prefix.tree.Cell) $r6;

        return $r7;
    }

    public org.apache.lucene.spatial.prefix.tree.Cell getCell(java.lang.String)
    {
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell $r0;
        java.lang.String r2;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r1;

        r1 := @this: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell;

        specialinvoke $r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell: void <init>(org.apache.lucene.spatial.prefix.tree.QuadPrefixTree,java.lang.String)>(r1, r2);

        return $r0;
    }

    public org.apache.lucene.spatial.prefix.tree.Cell getCell(byte[], int, int)
    {
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell $r0;
        byte[] r2;
        int i0, i1;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r1;

        r1 := @this: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell;

        specialinvoke $r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell: void <init>(org.apache.lucene.spatial.prefix.tree.QuadPrefixTree,byte[],int,int)>(r1, r2, i0, i1);

        return $r0;
    }

    private void build(double, double, int, java.util.List, java.lang.StringBuilder, com.spatial4j.core.shape.Shape, int)
    {
        double[] $r1, $r2;
        java.lang.AssertionError $r6;
        com.spatial4j.core.shape.Shape r5;
        int i0, i1, $i2;
        boolean $z0;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r0;
        double $d0, $d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        java.util.List r3;
        java.lang.StringBuilder r4;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        d2 := @parameter0: double;

        d3 := @parameter1: double;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.List;

        r4 := @parameter4: java.lang.StringBuilder;

        r5 := @parameter5: com.spatial4j.core.shape.Shape;

        i1 := @parameter6: int;

        $z0 = <org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();

        if $i2 == i0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r1 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelW>;

        $d0 = $r1[i0];

        $d12 = $d0 / 2.0;

        $r2 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelH>;

        $d1 = $r2[i0];

        $d13 = $d1 / 2.0;

        $d5 = d2 - $d12;

        $d4 = d3 + $d13;

        specialinvoke r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: void checkBattenberg(char,double,double,int,java.util.List,java.lang.StringBuilder,com.spatial4j.core.shape.Shape,int)>(65, $d5, $d4, i0, r3, r4, r5, i1);

        $d7 = d2 + $d12;

        $d6 = d3 + $d13;

        specialinvoke r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: void checkBattenberg(char,double,double,int,java.util.List,java.lang.StringBuilder,com.spatial4j.core.shape.Shape,int)>(66, $d7, $d6, i0, r3, r4, r5, i1);

        $d9 = d2 - $d12;

        $d8 = d3 - $d13;

        specialinvoke r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: void checkBattenberg(char,double,double,int,java.util.List,java.lang.StringBuilder,com.spatial4j.core.shape.Shape,int)>(67, $d9, $d8, i0, r3, r4, r5, i1);

        $d11 = d2 + $d12;

        $d10 = d3 - $d13;

        specialinvoke r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: void checkBattenberg(char,double,double,int,java.util.List,java.lang.StringBuilder,com.spatial4j.core.shape.Shape,int)>(68, $d11, $d10, i0, r3, r4, r5, i1);

        return;
    }

    private void checkBattenberg(char, double, double, int, java.util.List, java.lang.StringBuilder, com.spatial4j.core.shape.Shape, int)
    {
        com.spatial4j.core.shape.Shape r6;
        boolean $z0;
        com.spatial4j.core.shape.Rectangle $r5;
        com.spatial4j.core.context.SpatialContext $r4;
        java.util.List r10;
        java.lang.StringBuilder r3;
        double[] $r1, $r2;
        java.lang.AssertionError $r17;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell $r11, $r14;
        int i0, $i1, i3, i4, $i5;
        com.spatial4j.core.shape.SpatialRelation $r7, $r8, $r9, $r13, $r16;
        java.lang.String $r12, $r15;
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r0;
        double $d0, $d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;
        char c2;

        r0 := @this: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        c2 := @parameter0: char;

        d2 := @parameter1: double;

        d3 := @parameter2: double;

        i0 := @parameter3: int;

        r10 := @parameter4: java.util.List;

        r3 := @parameter5: java.lang.StringBuilder;

        r6 := @parameter6: com.spatial4j.core.shape.Shape;

        i4 := @parameter7: int;

        $z0 = <org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i5 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

        if $i5 == i0 goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label1:
        $r1 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelW>;

        $d0 = $r1[i0];

        $d8 = $d0 / 2.0;

        $r2 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double[] levelH>;

        $d1 = $r2[i0];

        $d9 = $d1 / 2.0;

        $i1 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

        $r4 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: com.spatial4j.core.context.SpatialContext ctx>;

        $d7 = d2 - $d8;

        $d6 = d2 + $d8;

        $d5 = d3 - $d9;

        $d4 = d3 + $d9;

        $r5 = virtualinvoke $r4.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.shape.Rectangle makeRectangle(double,double,double,double)>($d7, $d6, $d5, $d4);

        $r7 = interfaceinvoke r6.<com.spatial4j.core.shape.Shape: com.spatial4j.core.shape.SpatialRelation relate(com.spatial4j.core.shape.Shape)>($r5);

        $r8 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation CONTAINS>;

        if $r8 != $r7 goto label2;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r14 = new org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell;

        $r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r7.<com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation transpose()>();

        specialinvoke $r14.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell: void <init>(org.apache.lucene.spatial.prefix.tree.QuadPrefixTree,java.lang.String,com.spatial4j.core.shape.SpatialRelation)>(r0, $r15, $r16);

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label5;

     label2:
        $r9 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation DISJOINT>;

        if $r9 != $r7 goto label3;

        goto label5;

     label3:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        i3 = i0 + 1;

        if i3 < i4 goto label4;

        $r11 = new org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell;

        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r7.<com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation transpose()>();

        specialinvoke $r11.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree$QuadCell: void <init>(org.apache.lucene.spatial.prefix.tree.QuadPrefixTree,java.lang.String,com.spatial4j.core.shape.SpatialRelation)>(r0, $r12, $r13);

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label5;

     label4:
        specialinvoke r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: void build(double,double,int,java.util.List,java.lang.StringBuilder,com.spatial4j.core.shape.Shape,int)>(d2, d3, i3, r10, r3, r6, i4);

     label5:
        virtualinvoke r3.<java.lang.StringBuilder: void setLength(int)>($i1);

        return;
    }

    static double access$000(org.apache.lucene.spatial.prefix.tree.QuadPrefixTree)
    {
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r0;
        double $d0;

        r0 := @parameter0: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        $d0 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double xmin>;

        return $d0;
    }

    static double access$100(org.apache.lucene.spatial.prefix.tree.QuadPrefixTree)
    {
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r0;
        double $d0;

        r0 := @parameter0: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        $d0 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double ymin>;

        return $d0;
    }

    static double access$200(org.apache.lucene.spatial.prefix.tree.QuadPrefixTree)
    {
        org.apache.lucene.spatial.prefix.tree.QuadPrefixTree r0;
        double $d0;

        r0 := @parameter0: org.apache.lucene.spatial.prefix.tree.QuadPrefixTree;

        $d0 = r0.<org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: double gridW>;

        return $d0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int DEFAULT_MAX_LEVELS> = 12;

        <org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: int MAX_LEVELS_POSSIBLE> = 50;

        $r0 = class "Lorg/apache/lucene/spatial/prefix/tree/QuadPrefixTree;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.spatial.prefix.tree.QuadPrefixTree: boolean $assertionsDisabled> = $z1;

        return;
    }
}
