public class org.springframework.expression.spel.ast.OpMinus extends org.springframework.expression.spel.ast.Operator
{

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.OpMinus r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;

        r0 := @this: org.springframework.expression.spel.ast.OpMinus;

        i0 := @parameter0: int;

        r1 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.Operator: void <init>(java.lang.String,int,org.springframework.expression.spel.ast.SpelNodeImpl[])>("-", i0, r1);

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        java.lang.Integer $r16, $r22, r31;
        java.lang.Long $r14, $r24;
        org.springframework.expression.spel.ExpressionState r3;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r2;
        java.lang.Double $r12, $r26;
        long $l5, $l6, $l7, $l13, $l14;
        org.springframework.expression.Operation $r19, $r32;
        java.lang.String $r8, $r10, r30;
        org.springframework.expression.TypedValue $r4, $r6, $r17, $r20, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40;
        java.lang.Number r27, r28, r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.springframework.expression.spel.ast.OpMinus r0;
        int $i0, $i2, $i3, $i8, $i9, $i10, $i11, $i12, $i15;
        double $d0, $d1, $d2, $d3, $d4;
        char $c1, $c4;
        java.lang.Object $r5, $r7, $r18;

        r0 := @this: org.springframework.expression.spel.ast.OpMinus;

        r3 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpMinus: org.springframework.expression.spel.ast.SpelNodeImpl getLeftOperand()>();

        $r2 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpMinus: org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()>();

        if $r2 != null goto label04;

        $r17 = virtualinvoke $r1.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r3);

        $r18 = virtualinvoke $r17.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z8 = $r18 instanceof java.lang.Number;

        if $z8 == 0 goto label03;

        r27 = (java.lang.Number) $r18;

        $z9 = $r18 instanceof java.lang.Double;

        if $z9 == 0 goto label01;

        $r34 = new org.springframework.expression.TypedValue;

        $d3 = virtualinvoke r27.<java.lang.Number: double doubleValue()>();

        $d4 = 0.0 - $d3;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        specialinvoke $r34.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r26);

        return $r34;

     label01:
        $z10 = $r18 instanceof java.lang.Long;

        if $z10 == 0 goto label02;

        $r35 = new org.springframework.expression.TypedValue;

        $l13 = virtualinvoke r27.<java.lang.Number: long longValue()>();

        $l14 = 0L - $l13;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l14);

        specialinvoke $r35.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r24);

        return $r35;

     label02:
        $r36 = new org.springframework.expression.TypedValue;

        $i11 = virtualinvoke r27.<java.lang.Number: int intValue()>();

        $i12 = 0 - $i11;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        specialinvoke $r36.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r22);

        return $r36;

     label03:
        $r19 = <org.springframework.expression.Operation: org.springframework.expression.Operation SUBTRACT>;

        $r20 = virtualinvoke r3.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue operate(org.springframework.expression.Operation,java.lang.Object,java.lang.Object)>($r19, $r18, null);

        return $r20;

     label04:
        $r4 = virtualinvoke $r1.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r3);

        $r5 = virtualinvoke $r4.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r6 = virtualinvoke $r2.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r3);

        $r7 = virtualinvoke $r6.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z0 = $r5 instanceof java.lang.Number;

        if $z0 == 0 goto label09;

        $z3 = $r7 instanceof java.lang.Number;

        if $z3 == 0 goto label09;

        r28 = (java.lang.Number) $r5;

        r29 = (java.lang.Number) $r7;

        $z4 = r28 instanceof java.lang.Double;

        if $z4 != 0 goto label05;

        $z5 = r29 instanceof java.lang.Double;

        if $z5 == 0 goto label06;

     label05:
        $r37 = new org.springframework.expression.TypedValue;

        $d0 = virtualinvoke r28.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke r29.<java.lang.Number: double doubleValue()>();

        $d2 = $d0 - $d1;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        specialinvoke $r37.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r12);

        return $r37;

     label06:
        $z6 = r28 instanceof java.lang.Long;

        if $z6 != 0 goto label07;

        $z7 = r29 instanceof java.lang.Long;

        if $z7 == 0 goto label08;

     label07:
        $r38 = new org.springframework.expression.TypedValue;

        $l5 = virtualinvoke r28.<java.lang.Number: long longValue()>();

        $l6 = virtualinvoke r29.<java.lang.Number: long longValue()>();

        $l7 = $l5 - $l6;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        specialinvoke $r38.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r14);

        return $r38;

     label08:
        $r39 = new org.springframework.expression.TypedValue;

        $i8 = virtualinvoke r28.<java.lang.Number: int intValue()>();

        $i9 = virtualinvoke r29.<java.lang.Number: int intValue()>();

        $i10 = $i8 - $i9;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        specialinvoke $r39.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r16);

        return $r39;

     label09:
        $z1 = $r5 instanceof java.lang.String;

        if $z1 == 0 goto label10;

        $z2 = $r7 instanceof java.lang.Integer;

        if $z2 == 0 goto label10;

        $r8 = (java.lang.String) $r5;

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i0 != 1 goto label10;

        r30 = (java.lang.String) $r5;

        r31 = (java.lang.Integer) $r7;

        $r40 = new org.springframework.expression.TypedValue;

        $c1 = virtualinvoke r30.<java.lang.String: char charAt(int)>(0);

        $i2 = virtualinvoke r31.<java.lang.Integer: int intValue()>();

        $i15 = (int) $c1;

        $i3 = $i15 - $i2;

        $c4 = (char) $i3;

        $r10 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c4);

        specialinvoke $r40.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r10);

        return $r40;

     label10:
        $r32 = <org.springframework.expression.Operation: org.springframework.expression.Operation SUBTRACT>;

        $r33 = virtualinvoke r3.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue operate(org.springframework.expression.Operation,java.lang.Object,java.lang.Object)>($r32, $r5, $r7);

        return $r33;
    }

    public java.lang.String toStringAST()
    {
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.String $r2, $r6, $r8;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r5;
        org.springframework.expression.spel.ast.OpMinus r0;

        r0 := @this: org.springframework.expression.spel.ast.OpMinus;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpMinus: org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r5 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpMinus: org.springframework.expression.spel.ast.SpelNodeImpl getLeftOperand()>();

        $r6 = virtualinvoke $r5.<org.springframework.expression.spel.ast.SpelNodeImpl: java.lang.String toStringAST()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label1:
        $r2 = specialinvoke r0.<org.springframework.expression.spel.ast.Operator: java.lang.String toStringAST()>();

        return $r2;
    }

    public org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()
    {
        int $i0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r3;
        org.springframework.expression.spel.ast.OpMinus r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1, $r2;

        r0 := @this: org.springframework.expression.spel.ast.OpMinus;

        $r1 = r0.<org.springframework.expression.spel.ast.OpMinus: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $i0 = lengthof $r1;

        if $i0 >= 2 goto label1;

        return null;

     label1:
        $r2 = r0.<org.springframework.expression.spel.ast.OpMinus: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r3 = $r2[1];

        return $r3;
    }
}
