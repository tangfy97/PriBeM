public final class com.google.common.io.Closeables extends java.lang.Object
{
    private static final java.util.logging.Logger logger;

    private void <init>()
    {
        com.google.common.io.Closeables r0;

        r0 := @this: com.google.common.io.Closeables;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void close(java.io.Closeable, boolean) throws java.io.IOException
    {
        java.io.Closeable r0;
        java.io.IOException $r1;
        java.util.logging.Logger $r3;
        boolean z0;
        java.util.logging.Level $r2;

        r0 := @parameter0: java.io.Closeable;

        z0 := @parameter1: boolean;

        if r0 != null goto label1;

        return;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label5;

     label3:
        $r1 := @caughtexception;

        if z0 == 0 goto label4;

        $r3 = <com.google.common.io.Closeables: java.util.logging.Logger logger>;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, "IOException thrown while closing Closeable.", $r1);

        goto label5;

     label4:
        throw $r1;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.io.IOException $r1;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r2;

        r0 := @parameter0: java.io.Closeable;

     label1:
        staticinvoke <com.google.common.io.Closeables: void close(java.io.Closeable,boolean)>(r0, 1);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r3 = <com.google.common.io.Closeables: java.util.logging.Logger logger>;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, "IOException should not have been thrown.", $r1);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/google/common/io/Closeables;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.google.common.io.Closeables: java.util.logging.Logger logger> = $r2;

        return;
    }
}
