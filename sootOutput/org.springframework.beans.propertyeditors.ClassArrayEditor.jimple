public class org.springframework.beans.propertyeditors.ClassArrayEditor extends java.beans.PropertyEditorSupport
{
    private final java.lang.ClassLoader classLoader;

    public void <init>()
    {
        org.springframework.beans.propertyeditors.ClassArrayEditor r0;

        r0 := @this: org.springframework.beans.propertyeditors.ClassArrayEditor;

        specialinvoke r0.<org.springframework.beans.propertyeditors.ClassArrayEditor: void <init>(java.lang.ClassLoader)>(null);

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1, $r2;
        org.springframework.beans.propertyeditors.ClassArrayEditor r0;

        r0 := @this: org.springframework.beans.propertyeditors.ClassArrayEditor;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.beans.PropertyEditorSupport: void <init>()>();

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

     label2:
        r0.<org.springframework.beans.propertyeditors.ClassArrayEditor: java.lang.ClassLoader classLoader> = $r2;

        return;
    }

    public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Class[] r3;
        java.lang.String[] $r2;
        org.springframework.beans.propertyeditors.ClassArrayEditor r1;
        int $i0, $i1, i2;
        java.lang.Class $r7;
        java.lang.String r0, $r4, $r5;
        java.lang.ClassLoader $r6;
        boolean $z0;

        r1 := @this: org.springframework.beans.propertyeditors.ClassArrayEditor;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r0);

        if $z0 == 0 goto label3;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>(r0);

        $i0 = lengthof $r2;

        r3 = newarray (java.lang.Class)[$i0];

        i2 = 0;

        goto label2;

     label1:
        $r4 = $r2[i2];

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r6 = r1.<org.springframework.beans.propertyeditors.ClassArrayEditor: java.lang.ClassLoader classLoader>;

        $r7 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolveClassName(java.lang.String,java.lang.ClassLoader)>($r5, $r6);

        r3[i2] = $r7;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof $r2;

        if i2 < $i1 goto label1;

        virtualinvoke r1.<org.springframework.beans.propertyeditors.ClassArrayEditor: void setValue(java.lang.Object)>(r3);

        goto label4;

     label3:
        virtualinvoke r1.<org.springframework.beans.propertyeditors.ClassArrayEditor: void setValue(java.lang.Object)>(null);

     label4:
        return;
    }

    public java.lang.String getAsText()
    {
        java.lang.Class[] r2;
        org.springframework.beans.propertyeditors.ClassArrayEditor r0;
        int i0, $i1;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: org.springframework.beans.propertyeditors.ClassArrayEditor;

        $r1 = virtualinvoke r0.<org.springframework.beans.propertyeditors.ClassArrayEditor: java.lang.Object getValue()>();

        r2 = (java.lang.Class[]) $r1;

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r2);

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

        goto label4;

     label2:
        if i0 <= 0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label3:
        $r4 = r2[i0];

        $r5 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedName(java.lang.Class)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i0 = i0 + 1;

     label4:
        $i1 = lengthof r2;

        if i0 < $i1 goto label2;

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
