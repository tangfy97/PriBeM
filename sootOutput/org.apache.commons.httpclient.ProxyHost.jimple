public class org.apache.commons.httpclient.ProxyHost extends org.apache.commons.httpclient.HttpHost
{

    public void <init>(org.apache.commons.httpclient.ProxyHost)
    {
        org.apache.commons.httpclient.ProxyHost r0, r1;

        r0 := @this: org.apache.commons.httpclient.ProxyHost;

        r1 := @parameter0: org.apache.commons.httpclient.ProxyHost;

        specialinvoke r0.<org.apache.commons.httpclient.HttpHost: void <init>(org.apache.commons.httpclient.HttpHost)>(r1);

        return;
    }

    public void <init>(java.lang.String, int)
    {
        int i0;
        org.apache.commons.httpclient.protocol.Protocol $r2;
        java.lang.String r1;
        org.apache.commons.httpclient.ProxyHost r0;

        r0 := @this: org.apache.commons.httpclient.ProxyHost;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <org.apache.commons.httpclient.protocol.Protocol: org.apache.commons.httpclient.protocol.Protocol getProtocol(java.lang.String)>("http");

        specialinvoke r0.<org.apache.commons.httpclient.HttpHost: void <init>(java.lang.String,int,org.apache.commons.httpclient.protocol.Protocol)>(r1, i0, $r2);

        return;
    }

    public void <init>(java.lang.String)
    {
        int $i1;
        java.lang.String r1;
        org.apache.commons.httpclient.ProxyHost r0;

        r0 := @this: org.apache.commons.httpclient.ProxyHost;

        r1 := @parameter0: java.lang.String;

        $i1 = (int) -1;

        specialinvoke r0.<org.apache.commons.httpclient.ProxyHost: void <init>(java.lang.String,int)>(r1, $i1);

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.Object $r1;
        org.apache.commons.httpclient.ProxyHost r0, r2;

        r0 := @this: org.apache.commons.httpclient.ProxyHost;

        $r1 = specialinvoke r0.<org.apache.commons.httpclient.HttpHost: java.lang.Object clone()>();

        r2 = (org.apache.commons.httpclient.ProxyHost) $r1;

        return r2;
    }
}
