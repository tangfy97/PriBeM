final class org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver retainResolver;
    private static final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver deleteElementEndResolver;
    private final org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor clientOperation;
    private final org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor serverOperation;
    private final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker clientAnnotationTracker;
    private final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker serverAnnotationTracker;

    void <init>()
    {
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r1, $r3;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$3 $r5;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4 $r7;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2, $r4, $r6, $r8;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.OperationNormalizer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor createNormalizer(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor)>($r1);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor clientOperation> = $r2;

        $r3 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.OperationNormalizer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor createNormalizer(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor)>($r3);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor serverOperation> = $r4;

        $r5 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$3;

        $r6 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor clientOperation>;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$3: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer,org.waveprotocol.wave.model.document.operation.DocOpCursor)>(r0, $r6);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker clientAnnotationTracker> = $r5;

        $r7 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4;

        $r8 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor serverOperation>;

        specialinvoke $r7.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$4: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer,org.waveprotocol.wave.model.document.operation.DocOpCursor)>(r0, $r8);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker serverAnnotationTracker> = $r7;

        return;
    }

    org.waveprotocol.wave.model.operation.OperationPair transformOperations(org.waveprotocol.wave.model.document.operation.DocOp, org.waveprotocol.wave.model.document.operation.DocOp) throws org.waveprotocol.wave.model.operation.TransformException
    {
        org.waveprotocol.wave.model.operation.TransformException $r13, $r26;
        org.waveprotocol.wave.model.document.operation.DocOp $r10, $r11, r28, r29;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r6, $r9;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target $r3, $r7;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        java.lang.String $r24, $r27;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer r4;
        org.waveprotocol.wave.model.operation.OperationPair $r12;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException $r25;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition $r1, $r2;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker $r5, $r8;

        r4 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer;

        r28 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        r29 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

     label1:
        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker: void <init>()>();

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition getPosition1()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition getPosition2()>();

        $r3 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $r6 = r4.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor clientOperation>;

        $r5 = r4.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker clientAnnotationTracker>;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer,org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor,org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker)>(r4, $r6, $r1, $r5);

        $r7 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $r9 = r4.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor serverOperation>;

        $r8 = r4.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker serverAnnotationTracker>;

        specialinvoke $r7.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer,org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor,org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker)>(r4, $r9, $r2, $r8);

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void setOtherTarget(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r7);

        virtualinvoke $r7.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void setOtherTarget(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>($r3);

        i10 = 0;

        i11 = 0;

     label2:
        $i0 = interfaceinvoke r28.<org.waveprotocol.wave.model.document.operation.DocOp: int size()>();

        if i10 >= $i0 goto label5;

        $i3 = i10;

        i10 = i10 + 1;

        interfaceinvoke r28.<org.waveprotocol.wave.model.document.operation.DocOp: void applyComponent(int,org.waveprotocol.wave.model.document.operation.DocOpCursor)>($i3, $r3);

     label3:
        $i4 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: int get()>();

        if $i4 <= 0 goto label2;

        $i5 = interfaceinvoke r29.<org.waveprotocol.wave.model.document.operation.DocOp: int size()>();

        if i11 < $i5 goto label4;

        $r13 = new org.waveprotocol.wave.model.operation.TransformException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ran out of ");

        $i7 = interfaceinvoke r29.<org.waveprotocol.wave.model.document.operation.DocOp: int size()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" server op components after ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $i8 = interfaceinvoke r28.<org.waveprotocol.wave.model.document.operation.DocOp: int size()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" client op components, with ");

        $i9 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: int get()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" spare positions");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.waveprotocol.wave.model.operation.TransformException: void <init>(java.lang.String)>($r24);

        throw $r13;

     label4:
        $i6 = i11;

        i11 = i11 + 1;

        interfaceinvoke r29.<org.waveprotocol.wave.model.document.operation.DocOp: void applyComponent(int,org.waveprotocol.wave.model.document.operation.DocOpCursor)>($i6, $r7);

        goto label3;

     label5:
        $i1 = interfaceinvoke r29.<org.waveprotocol.wave.model.document.operation.DocOp: int size()>();

        if i11 >= $i1 goto label6;

        $i2 = i11;

        i11 = i11 + 1;

        interfaceinvoke r29.<org.waveprotocol.wave.model.document.operation.DocOp: void applyComponent(int,org.waveprotocol.wave.model.document.operation.DocOpCursor)>($i2, $r7);

        goto label5;

     label6:
        $r10 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

        $r11 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

     label7:
        goto label9;

     label8:
        $r25 := @caughtexception;

        $r26 = new org.waveprotocol.wave.model.operation.TransformException;

        $r27 = virtualinvoke $r25.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException: java.lang.String getMessage()>();

        specialinvoke $r26.<org.waveprotocol.wave.model.operation.TransformException: void <init>(java.lang.String)>($r27);

        throw $r26;

     label9:
        $r12 = new org.waveprotocol.wave.model.operation.OperationPair;

        specialinvoke $r12.<org.waveprotocol.wave.model.operation.OperationPair: void <init>(java.lang.Object,java.lang.Object)>($r10, $r11);

        return $r12;

        catch org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$InternalTransformException from label1 to label7 with label8;
    }

    static org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver access$800()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver $r0;

        $r0 = <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver retainResolver>;

        return $r0;
    }

    static org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver access$900()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver $r0;

        $r0 = <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver deleteElementEndResolver>;

        return $r0;
    }

    static org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker access$1100(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker serverAnnotationTracker>;

        return $r1;
    }

    static org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker access$1200(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker clientAnnotationTracker>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1 $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$2 $r1;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1: void <init>()>();

        <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver retainResolver> = $r0;

        $r1 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$2;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$2: void <init>()>();

        <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver deleteElementEndResolver> = $r1;

        return;
    }
}
