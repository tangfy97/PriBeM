public class org.waveprotocol.wave.client.editor.content.ContentElement extends org.waveprotocol.wave.client.editor.content.ContentNode implements org.waveprotocol.wave.model.document.Doc$E, org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HasHandlers, org.waveprotocol.wave.client.editor.content.HasImplNodelets
{
    public static final java.lang.String COMPLEX_IMPLEMENTATION_MARKER;
    public static final org.waveprotocol.wave.model.document.util.ElementManager ELEMENT_MANAGER;
    private final java.lang.String tagName;
    private org.waveprotocol.wave.client.editor.content.ContentNode firstChild;
    private org.waveprotocol.wave.client.editor.content.ContentNode lastChild;
    private final org.waveprotocol.wave.model.util.StringMap attributes;
    private final org.waveprotocol.wave.model.util.IntMap transientData;
    private com.google.gwt.dom.client.Element containerNodelet;
    public static final java.lang.String NAME;
    public static final java.lang.String SUBMIT;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext)
    {
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext r2;
        java.util.Map $r4;
        com.google.gwt.dom.client.Element r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: com.google.gwt.dom.client.Element;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void <init>(java.lang.String,org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext,boolean)>(r1, r2, 1);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setImplNodelets(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Element)>(r3, r3);

        $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void init(java.util.Map)>($r4);

        return;
    }

    public void <init>(java.lang.String, org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext, boolean)
    {
        org.waveprotocol.wave.model.util.IntMap $r3;
        org.waveprotocol.wave.model.util.StringMap $r2;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String r4;
        boolean $z0, z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext;

        z1 := @parameter2: boolean;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void <init>(com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext)>(null, r1);

        r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode firstChild> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode lastChild> = null;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap attributes> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IntMap createIntMap()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.IntMap transientData> = $r3;

        r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element containerNodelet> = null;

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if z1 == 1 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String tagName> = r4;

        return;
    }

    public void setImplNodelets(com.google.gwt.dom.client.Element, com.google.gwt.dom.client.Element)
    {
        com.google.gwt.core.client.JavaScriptObject $r12, $r13;
        java.lang.AssertionError $r11;
        com.google.gwt.dom.client.Style $r7, $r9;
        com.google.gwt.dom.client.Element r1, r2, $r3, $r4;
        org.waveprotocol.wave.client.common.util.JsoView $r8, $r10;
        org.waveprotocol.wave.client.editor.content.ContentElement r0, $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: com.google.gwt.dom.client.Element;

        r2 := @parameter1: com.google.gwt.dom.client.Element;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setImplNodeletInner(com.google.gwt.dom.client.Element)>(r1);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setContainerNodelet(com.google.gwt.dom.client.Element)>(r2);

        if r1 == null goto label1;

        staticinvoke <org.waveprotocol.wave.client.editor.content.ContentElement: void walkImpl(com.google.gwt.dom.client.Element)>(r1);

        if r2 == r1 goto label1;

        $r7 = virtualinvoke r1.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Style getStyle()>();

        $r12 = (com.google.gwt.core.client.JavaScriptObject) $r7;

        $r8 = staticinvoke <org.waveprotocol.wave.client.common.util.JsoView: org.waveprotocol.wave.client.common.util.JsoView as(com.google.gwt.core.client.JavaScriptObject)>($r12);

        virtualinvoke $r8.<org.waveprotocol.wave.client.common.util.JsoView: void setString(java.lang.String,java.lang.String)>("white-space", "normal");

        if r2 == null goto label1;

        $r9 = virtualinvoke r1.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Style getStyle()>();

        $r13 = (com.google.gwt.core.client.JavaScriptObject) $r9;

        $r10 = staticinvoke <org.waveprotocol.wave.client.common.util.JsoView: org.waveprotocol.wave.client.common.util.JsoView as(com.google.gwt.core.client.JavaScriptObject)>($r13);

        virtualinvoke $r10.<org.waveprotocol.wave.client.common.util.JsoView: void setString(java.lang.String,java.lang.String)>("white-space", "prewrap");

        virtualinvoke r2.<com.google.gwt.dom.client.Element: void setInnerHTML(java.lang.String)>("");

     label1:
        $z0 = <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r3 == null goto label2;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>($r4);

        if $r5 == r0 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        return;
    }

    public void setBothNodelets(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: com.google.gwt.dom.client.Element;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setImplNodelets(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Element)>(r1, r1);

        return;
    }

    void init(java.util.Map)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.waveprotocol.wave.model.util.StringMap $r6;
        java.util.Map r0;
        java.lang.Object $r3, $r7, $r9;
        org.waveprotocol.wave.client.editor.content.ContentElement r5;
        java.lang.String $r8;
        boolean $z0;

        r5 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = r5.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap attributes>;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r8, $r9);

        goto label1;

     label2:
        return;
    }

    public static void walkImpl(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0, r2;
        com.google.gwt.core.client.JavaScriptObject $r1;
        java.lang.String $r3;
        com.google.gwt.dom.client.Node r4;
        boolean $z0, $z1;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        r4 = virtualinvoke r0.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getFirstChild()>();

     label1:
        if r4 == null goto label4;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r4);

        if $z0 == 0 goto label2;

        r4 = virtualinvoke r4.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getNextSibling()>();

        goto label1;

     label2:
        $r1 = virtualinvoke r4.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r2 = (com.google.gwt.dom.client.Element) $r1;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: boolean isTransparent(com.google.gwt.dom.client.Element)>(r2);

        if $z1 != 0 goto label3;

        $r3 = <org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String COMPLEX_IMPLEMENTATION_MARKER>;

        virtualinvoke r2.<com.google.gwt.dom.client.Element: void setPropertyBoolean(java.lang.String,boolean)>($r3, 1);

     label3:
        staticinvoke <org.waveprotocol.wave.client.editor.content.ContentElement: void walkImpl(com.google.gwt.dom.client.Element)>(r2);

        r4 = virtualinvoke r4.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getNextSibling()>();

        goto label1;

     label4:
        return;
    }

    public java.lang.Object getHandler(java.lang.Class)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        java.lang.Class r2;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getHandler only implemented for AgentAdapter for now");

        throw $r0;
    }

    public final java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)
    {
        org.waveprotocol.wave.model.document.util.Property r1;
        int $i0;
        org.waveprotocol.wave.model.util.IntMap $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Property;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.IntMap transientData>;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Property: int getId()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IntMap: java.lang.Object get(int)>($i0);

        return $r3;
    }

    public final void setProperty(org.waveprotocol.wave.model.document.util.Property, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.Property r1;
        int $i0;
        org.waveprotocol.wave.model.util.IntMap $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Property;

        r3 := @parameter1: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.IntMap transientData>;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Property: int getId()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IntMap: void put(int,java.lang.Object)>($i0, r3);

        return;
    }

    public com.google.gwt.dom.client.Element getImplNodelet()
    {
        com.google.gwt.dom.client.Element $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        com.google.gwt.dom.client.Node $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        $r2 = (com.google.gwt.dom.client.Element) $r1;

        return $r2;
    }

    public void setImplNodelet(com.google.gwt.dom.client.Node)
    {
        com.google.gwt.core.client.JavaScriptObject $r3;
        com.google.gwt.dom.client.Element $r2, $r4, $r5, $r6, $r7;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        com.google.gwt.dom.client.Node r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter0: com.google.gwt.dom.client.Node;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null nodelet not supported with this deprecated method, use setImplNodelets instead");

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element containerNodelet>;

        if $r2 == null goto label1;

        $r6 = r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element containerNodelet>;

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r6 != $r7 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Cannot set only the impl nodelet if the container nodelet is different");

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r0);

        if $z0 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "element cannot have text implnodelet");

        $r3 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r5 = (com.google.gwt.dom.client.Element) $r3;

        $r4 = r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element containerNodelet>;

        if $r4 == null goto label6;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: void setContainerNodelet(com.google.gwt.dom.client.Element)>($r5);

     label6:
        specialinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: void setImplNodeletInner(com.google.gwt.dom.client.Element)>($r5);

        return;
    }

    private void setImplNodeletInner(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element $r1, r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        com.google.gwt.dom.client.Node $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void swapNodelet(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Element)>($r1, r2);

        $r3 = (com.google.gwt.dom.client.Node) r2;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void setImplNodelet(com.google.gwt.dom.client.Node)>($r3);

        return;
    }

    public com.google.gwt.dom.client.Element setAutoAppendContainer(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: com.google.gwt.dom.client.Element;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void setContainerNodelet(com.google.gwt.dom.client.Element)>(r1);

        return r1;
    }

    void setContainerNodelet(com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r6;
        com.google.gwt.dom.client.Element r0, $r2, $r3, $r4, $r7;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        com.google.gwt.dom.client.Node $r5;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element containerNodelet>;

        if r0 != $r2 goto label1;

        return;

     label1:
        if r0 == null goto label5;

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: void emptyElement(com.google.gwt.dom.client.Element)>(r0);

        r6 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

     label2:
        if r6 == null goto label5;

        $z0 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z0 == 0 goto label3;

        virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node normaliseImpl()>();

     label3:
        $r5 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        if $r5 == null goto label4;

        virtualinvoke r0.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r5);

     label4:
        r6 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label2;

     label5:
        $r3 = r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element containerNodelet>;

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r3 != $r4 goto label6;

        $r7 = null;

        goto label7;

     label6:
        $r7 = r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element containerNodelet>;

     label7:
        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: void swapNodelet(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Element)>($r7, r0);

        r1.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element containerNodelet> = r0;

        return;
    }

    void swapNodelet(com.google.gwt.dom.client.Element, com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0, r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r2;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        r1 := @parameter1: com.google.gwt.dom.client.Element;

        if r0 == null goto label1;

        staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: void setBackReference(com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.content.ContentElement)>(r0, null);

     label1:
        if r1 == null goto label2;

        staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: void setBackReference(com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.editor.content.ContentElement)>(r1, r2);

     label2:
        return;
    }

    void breakBackRef(boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r3;
        com.google.gwt.dom.client.Element $r1, $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void swapNodelet(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Element)>($r1, null);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void swapNodelet(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Element)>($r2, null);

        if z0 == 0 goto label2;

        r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

     label1:
        if r3 == null goto label2;

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentNode: void breakBackRef(boolean)>(1);

        r3 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label1;

     label2:
        return;
    }

    public com.google.gwt.dom.client.Element getContainerNodelet()
    {
        com.google.gwt.dom.client.Element $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element containerNodelet>;

        return $r1;
    }

    public final java.lang.String getTagName()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String tagName>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement asElement()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        return r0;
    }

    public org.waveprotocol.wave.client.editor.content.ContentTextNode asText()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        return null;
    }

    public final org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode firstChild>;

        return $r1;
    }

    public final org.waveprotocol.wave.client.editor.content.ContentNode getLastChild()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode lastChild>;

        return $r1;
    }

    public final org.waveprotocol.wave.model.util.StringMap getAttributes()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.model.util.StringMap $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap attributes>;

        return $r1;
    }

    void setFirstChild(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode firstChild> = r1;

        return;
    }

    void setLastChild(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode lastChild> = r1;

        return;
    }

    public final java.lang.String getAttribute(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r3;
        java.lang.String r1, $r4;
        org.waveprotocol.wave.model.util.StringMap $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap attributes>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public final boolean hasAttribute(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.StringMap $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap attributes>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        return $z0;
    }

    void setAttribute(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r5;
        java.lang.AssertionError $r7;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r3;
        java.lang.String r1, r4, $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r4 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("Do not set an attribute to null, use removeAttribute instead");

        throw $r7;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap attributes>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r6 = (java.lang.String) $r3;

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap attributes>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, r4);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void notifyAttributeModified(java.lang.String,java.lang.String,java.lang.String)>(r1, $r6, r4);

        return;
    }

    void removeAttribute(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r3;
        java.lang.String r1, r4;
        org.waveprotocol.wave.model.util.StringMap $r2, $r5;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap attributes>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        r4 = (java.lang.String) $r3;

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap attributes>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>(r1);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void notifyAttributeModified(java.lang.String,java.lang.String,java.lang.String)>(r1, r4, null);

        return;
    }

    org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1, $r2, r3, $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,boolean,org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory)>(r1, $r2, r3, z0, null);

        return $r4;
    }

    org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, boolean, org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r1, r2, $r11, r24, r25, $r26, r28, r29;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6;
        com.google.gwt.dom.client.Element r4, $r23;
        java.lang.AssertionError $r15, $r27;
        java.util.ArrayList $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement r3, $r12, $r14, $r16, $r17, $r20, $r22;
        java.util.Iterator $r7, $r9;
        java.lang.IllegalArgumentException $r18, $r19, $r21;
        org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory r6;
        java.lang.Object $r8, $r10, $r13;

        r3 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentNode;

        z2 := @parameter3: boolean;

        r6 := @parameter4: org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory;

        if r0 != r1 goto label01;

        return r0;

     label01:
        if r2 == null goto label02;

        $r20 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r20 == r3 goto label02;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("insertBefore: refChild is not child of parent");

        throw $r21;

     label02:
        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isOrIsAncestorOf(org.waveprotocol.wave.client.editor.content.ContentNode)>(r3);

        if $z0 == 0 goto label03;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("insertBefore: fromIncl is or is an ancestor of parent!");

        throw $r19;

     label03:
        if r1 == null goto label04;

        $r16 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r17 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r16 == $r17 goto label04;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("insertBefore: toExcl does not have the same parent as fromIncl!");

        throw $r18;

     label04:
        $z1 = <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled>;

        if $z1 != 0 goto label05;

        if r2 == null goto label05;

        $r14 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r14 == r3 goto label05;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label05:
        $r22 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r22 == null goto label06;

        $r23 = virtualinvoke $r22.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        goto label07;

     label06:
        $r23 = null;

     label07:
        r4 = $r23;

        r24 = r0;

        if r2 != null goto label08;

        r25 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getLastChild()>();

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: void setLastChild(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        goto label09;

     label08:
        r25 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getPreviousSibling()>();

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentNode: void setPrev(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

     label09:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label10:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r24);

        $r26 = virtualinvoke r24.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        virtualinvoke r24.<org.waveprotocol.wave.client.editor.content.ContentNode: void removeFromShadowTree()>();

        if r25 != null goto label11;

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: void setFirstChild(org.waveprotocol.wave.client.editor.content.ContentNode)>(r24);

        goto label12;

     label11:
        virtualinvoke r25.<org.waveprotocol.wave.client.editor.content.ContentNode: void setNext(org.waveprotocol.wave.client.editor.content.ContentNode)>(r24);

     label12:
        virtualinvoke r24.<org.waveprotocol.wave.client.editor.content.ContentNode: void setNext(org.waveprotocol.wave.client.editor.content.ContentNode)>(r2);

        virtualinvoke r24.<org.waveprotocol.wave.client.editor.content.ContentNode: void setPrev(org.waveprotocol.wave.client.editor.content.ContentNode)>(r25);

        virtualinvoke r24.<org.waveprotocol.wave.client.editor.content.ContentNode: void setParent(org.waveprotocol.wave.client.editor.content.ContentElement)>(r3);

        r25 = r24;

        if $r26 != r1 goto label14;

        if r2 != null goto label13;

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: void setLastChild(org.waveprotocol.wave.client.editor.content.ContentNode)>(r24);

        goto label15;

     label13:
        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentNode: void setPrev(org.waveprotocol.wave.client.editor.content.ContentNode)>(r24);

        goto label15;

     label14:
        r24 = $r26;

        goto label10;

     label15:
        if r6 == null goto label18;

        $z4 = <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled>;

        if $z4 != 0 goto label17;

        if r1 != null goto label16;

        $z5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isElement()>();

        if $z5 == 0 goto label16;

        $r13 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        if $r13 == r0 goto label17;

     label16:
        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label17:
        $r12 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        interfaceinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentRawDocument$Factory: void setupBehaviour(org.waveprotocol.wave.client.editor.content.ContentElement)>($r12);

     label18:
        if z2 == 0 goto label19;

        $r11 = virtualinvoke r25.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: void implInsertBefore(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element)>(r3, r0, $r11, r2, r4);

     label19:
        if $r22 == null goto label21;

        virtualinvoke $r22.<org.waveprotocol.wave.client.editor.content.ContentElement: void notifyChildrenMutated()>();

        $r9 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label21;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r10;

        virtualinvoke r28.<org.waveprotocol.wave.client.editor.content.ContentNode: void notifyRemovedFromParent(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentElement)>($r22, r3);

        goto label20;

     label21:
        $r7 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z6 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label23;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r8;

        virtualinvoke r29.<org.waveprotocol.wave.client.editor.content.ContentNode: void notifyAddedToParent(org.waveprotocol.wave.client.editor.content.ContentElement,boolean)>($r22, 0);

        goto label22;

     label23:
        virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentElement: void notifyChildrenMutated()>();

        return r0;
    }

    void reInsertImpl()
    {
        com.google.gwt.dom.client.Element $r2;
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void implInsertBefore(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element)>(r0, $r1, null, null, $r2);

        return;
    }

    void removeChild(org.waveprotocol.wave.client.editor.content.ContentNode, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1, $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void removeChildren(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,boolean)>(r1, $r2, z0);

        return;
    }

    void removeChildren(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, r3, $r4;
        java.lang.IllegalArgumentException $r6, $r7;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, r2, $r5;
        boolean z0;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r1 == r2 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("removeChild: fromIncl is not child of parent");

        throw $r7;

     label1:
        if r3 == null goto label2;

        $r5 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r5 == r2 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("removeChild: toExcl is not child of parent");

        throw $r6;

     label2:
        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: void removeChildrenInner(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,boolean)>(r0, r3, z0);

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: void notifyChildrenMutated()>();

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        if $r4 != null goto label3;

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: void notifyEmptied()>();

     label3:
        return;
    }

    void removeChildrenInner(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1, r2, $r6, r7, r10, r11;
        java.util.Iterator $r3;
        java.util.ArrayList $r0;
        java.lang.Object $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r5, $r9;
        com.google.gwt.dom.client.Node $r8;
        boolean $z0, z1;

        r5 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        z1 := @parameter2: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r10 = r1;

     label1:
        if r10 == r2 goto label4;

        $r6 = virtualinvoke r10.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        if $r6 == null goto label2;

        $r9 = virtualinvoke r10.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentElement: void removeChildrenInner(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,boolean)>($r6, null, z1);

     label2:
        r7 = r10;

        r10 = virtualinvoke r10.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        if z1 == 0 goto label3;

        $r8 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node normaliseImpl()>();

        if $r8 == null goto label3;

        virtualinvoke $r8.<com.google.gwt.dom.client.Node: void removeFromParent()>();

     label3:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r7);

        virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentNode: void removeFromShadowTree()>();

        virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentNode: void clearNodeLinks()>();

        virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentNode: void breakBackRef(boolean)>(1);

        goto label1;

     label4:
        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

        virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.ContentNode: void notifyRemovedFromParent(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentElement)>(r5, null);

        goto label5;

     label6:
        return;
    }

    public final short getNodeType()
    {
        short $s0;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $s0 = <org.waveprotocol.wave.model.document.indexed.NodeType: short ELEMENT_NODE>;

        return $s0;
    }

    public final boolean isElement()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        return 1;
    }

    public final boolean isTextNode()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        return 0;
    }

    public boolean zipChildren(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r2, r5;
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r4;
        com.google.gwt.dom.client.Node r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r5 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter2: com.google.gwt.dom.client.Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        if r5 == null goto label1;

        $r4 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getPreviousSibling(java.lang.Object)>(r5);

        r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

     label1:
        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean zipChildrenExcludingFrom(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>(r5, r2, r3);

        return $z0;
    }

    public boolean zipChildrenExcludingFrom(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r3, r5, r30, $r37;
        com.google.gwt.dom.client.Text $r10, $r14, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, $z10;
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r7;
        com.google.gwt.dom.client.Element $r27;
        java.lang.StringBuilder $r22, $r23, $r24;
        java.lang.Throwable $r29;
        java.lang.AssertionError $r6, $r17, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r8, $r11, $r15, $r16, $r21, r32, r33;
        com.google.gwt.core.client.JavaScriptObject $r9, $r13, $r19;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r2;
        java.lang.Object $r18, $r26, $r28, $r34, $r36;
        com.google.gwt.dom.client.Node $r4, r12, r31, $r35;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r5 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r12 := @parameter2: com.google.gwt.dom.client.Node;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label01:
        z8 = 0;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()>();

        r30 = r3;

        if r3 != null goto label02;

        $r26 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getFirstChild(java.lang.Object)>(r0);

        r30 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r26;

        $r27 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r28 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getFirstChild(java.lang.Object)>($r27);

        r31 = (com.google.gwt.dom.client.Node) $r28;

        goto label03;

     label02:
        r31 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

     label03:
        if r30 == null goto label16;

        $r4 = virtualinvoke r30.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        if $r4 == r31 goto label04;

        virtualinvoke r30.<org.waveprotocol.wave.client.editor.content.ContentNode: void setImplNodelet(com.google.gwt.dom.client.Node)>(r31);

     label04:
        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r31);

        if $z1 == 0 goto label10;

        $r7 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r30;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        $r9 = virtualinvoke r31.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r10 = (com.google.gwt.dom.client.Text) $r9;

        $r11 = virtualinvoke $r10.<com.google.gwt.dom.client.Text: java.lang.String getData()>();

        r32 = $r11;

        r33 = $r11;

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

        i6 = $i0 - $i1;

     label05:
        if i6 <= 0 goto label07;

        $r18 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r31);

        r31 = (com.google.gwt.dom.client.Node) $r18;

        $z6 = <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled>;

        if $z6 != 0 goto label06;

        $z7 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r31);

        if $z7 != 0 goto label06;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>(java.lang.Object)>("Some random element!");

        throw $r25;

     label06:
        $r19 = virtualinvoke r31.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r20 = (com.google.gwt.dom.client.Text) $r19;

        $r21 = virtualinvoke $r20.<com.google.gwt.dom.client.Text: java.lang.String getData()>();

        r33 = $r21;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        r32 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $i5 = virtualinvoke $r21.<java.lang.String: int length()>();

        i6 = i6 - $i5;

        goto label05;

     label07:
        $z3 = <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled>;

        if $z3 != 0 goto label08;

        $i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        $r15 = virtualinvoke r32.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        $r16 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getNodeValueFromHtmlString(java.lang.String)>($r15);

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z5 != 0 goto label08;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>("Content & html text don\'t match!");

        throw $r17;

     label08:
        if i6 >= 0 goto label10;

        $z4 = virtualinvoke r31.<com.google.gwt.dom.client.Node: boolean equals(java.lang.Object)>(r12);

        if $z4 == 0 goto label09;

        z8 = 1;

     label09:
        $r13 = virtualinvoke r31.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r14 = (com.google.gwt.dom.client.Text) $r13;

        $i2 = virtualinvoke r33.<java.lang.String: int length()>();

        $i3 = $i2 + i6;

        virtualinvoke $r14.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Text splitText(int)>($i3);

     label10:
        $r34 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r31);

        $r35 = (com.google.gwt.dom.client.Node) $r34;

        r31 = $r35;

        $r36 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getNextSibling(java.lang.Object)>(r30);

        $r37 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r36;

        r30 = $r37;

        if $r37 != r5 goto label11;

        goto label16;

     label11:
        $z2 = <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        if $r37 != null goto label12;

        $z9 = 1;

        goto label13;

     label12:
        $z9 = 0;

     label13:
        if $r35 != null goto label14;

        $z10 = 1;

        goto label15;

     label14:
        $z10 = 0;

     label15:
        if $z9 == $z10 goto label03;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Content & Html don\'t match!");

        throw $r6;

     label16:
        if r30 == null goto label17;

        $z0 = virtualinvoke r30.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z0 == 0 goto label17;

        virtualinvoke r30.<org.waveprotocol.wave.client.editor.content.ContentNode: void setImplNodelet(com.google.gwt.dom.client.Node)>(r31);

     label17:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return z8;

     label18:
        $r29 := @caughtexception;

     label19:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r29;

        catch java.lang.Throwable from label01 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public boolean isConsistent()
    {
        com.google.gwt.dom.client.Element $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean isImplAttached()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void revertImplementation()
    {
        java.lang.Throwable $r4;
        org.waveprotocol.wave.client.editor.content.ContentNode r5;
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.Object $r2, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getFirstChild(java.lang.Object)>(r0);

        r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r2;

     label2:
        if r5 == null goto label3;

        virtualinvoke r5.<org.waveprotocol.wave.client.editor.content.ContentNode: void revertImplementation()>();

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getNextSibling(java.lang.Object)>(r5);

        r5 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r3;

        goto label2;

     label3:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void reattachImplChildren()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void onRepair()>();

     label4:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label7;

     label5:
        $r4 := @caughtexception;

     label6:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected void onRepair()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        return;
    }

    protected void reattachImplChildren()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r15;
        org.waveprotocol.wave.common.logging.Logger $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r7, $r9;
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        com.google.gwt.dom.client.Element $r2;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.Object $r11, $r13;
        com.google.gwt.dom.client.Node $r10, $r12, $r14;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        if $r2 == null goto label5;

     label1:
        $r10 = virtualinvoke $r2.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getFirstChild()>();

        if $r10 == null goto label2;

        $r14 = virtualinvoke $r2.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getFirstChild()>();

        virtualinvoke $r14.<com.google.gwt.dom.client.Node: void removeFromParent()>();

        goto label1;

     label2:
        $r11 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getFirstChild(java.lang.Object)>(r0);

        r15 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r11;

     label3:
        if r15 == null goto label4;

        $r12 = virtualinvoke r15.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        virtualinvoke $r2.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r12);

        $r13 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getNextSibling(java.lang.Object)>(r15);

        r15 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r13;

        goto label3;

     label4:
        goto label6;

     label5:
        $r3 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You need to override this method for your doodad: ");

        $r7 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String tagName>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r9);

     label6:
        return;
    }

    protected com.google.gwt.dom.client.Element revertImplNodelet()
    {
        com.google.gwt.dom.client.Element $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        return $r1;
    }

    public final void notifyChildrenMutated()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0, r2;
        java.lang.RuntimeException $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 = r0;

     label1:
        if r2 == null goto label6;

     label2:
        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: void onDescendantsMutated()>();

     label3:
        goto label5;

     label4:
        $r1 := @caughtexception;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void rethrowOrNoteErrorOnMutation(java.lang.RuntimeException)>($r1);

     label5:
        r2 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        goto label1;

     label6:
        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    protected final void notifyAttributeModified(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0, $r4, $r5;
        java.lang.String r1, r2, r3;
        java.lang.RuntimeException $r6;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void onAttributeModified(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void rethrowOrNoteErrorOnMutation(java.lang.RuntimeException)>($r6);

     label4:
        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r4 == null goto label5;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentElement: void notifyChildrenMutated()>();

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    protected final void notifyEmptied()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.RuntimeException $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void onEmptied()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: void rethrowOrNoteErrorOnMutation(java.lang.RuntimeException)>($r1);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public boolean hasName()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.model.util.StringMap $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap attributes>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>("name");

        return $z0;
    }

    public java.lang.String getName()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String getAttribute(java.lang.String)>("name");

        return $r1;
    }

    public void debugAssertHealthy()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r7;
        java.lang.AssertionError $r4, $r6;
        short $s0;
        com.google.gwt.dom.client.Element $r1, $r3, $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        com.google.gwt.dom.client.Node $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $s0 = virtualinvoke $r5.<com.google.gwt.dom.client.Element: short getNodeType()>();

        if $s0 == 1 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("ContentElement\'s implNodelet should be an element");

        throw $r6;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

     label2:
        if r7 == null goto label4;

        virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentNode: void debugAssertHealthy()>();

        $z1 = <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $r2 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        $r3 = virtualinvoke $r2.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        $z2 = virtualinvoke $r1.<com.google.gwt.dom.client.Element: boolean equals(java.lang.Object)>($r3);

        if $z2 != 0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Child\'s attach nodelet should have correct parent nodelet");

        throw $r4;

     label3:
        r7 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label2;

     label4:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void debugAssertHealthy()>();

        return;
    }

    public volatile com.google.gwt.dom.client.Node getImplNodelet()
    {
        com.google.gwt.dom.client.Element $r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        com.google.gwt.dom.client.Node $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r2 = (com.google.gwt.dom.client.Node) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.waveprotocol.wave.client.editor.content.ContentElement$1 $r2;
        java.lang.String $r1;
        boolean $z0, $z1;

        <org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String SUBMIT> = "submit";

        <org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String NAME> = "name";

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/ContentElement;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.ContentElement: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String getNextMarkerName(java.lang.String)>("cim");

        <org.waveprotocol.wave.client.editor.content.ContentElement: java.lang.String COMPLEX_IMPLEMENTATION_MARKER> = $r1;

        $r2 = new org.waveprotocol.wave.client.editor.content.ContentElement$1;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.document.util.ElementManager ELEMENT_MANAGER> = $r2;

        return;
    }
}
