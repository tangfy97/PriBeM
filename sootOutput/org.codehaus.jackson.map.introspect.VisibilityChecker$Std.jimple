public class org.codehaus.jackson.map.introspect.VisibilityChecker$Std extends java.lang.Object implements org.codehaus.jackson.map.introspect.VisibilityChecker
{
    protected static final org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT;
    protected final org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel;
    protected final org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel;
    protected final org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel;
    protected final org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel;
    protected final org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel;

    public static org.codehaus.jackson.map.introspect.VisibilityChecker$Std defaultInstance()
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std $r0;

        $r0 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        return $r0;
    }

    public void <init>(org.codehaus.jackson.annotate.JsonAutoDetect)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        org.codehaus.jackson.annotate.JsonMethod $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r8, $r9, $r10, $r11, $r12;
        org.codehaus.jackson.annotate.JsonMethod[] $r2;
        org.codehaus.jackson.annotate.JsonAutoDetect r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonMethod[] value()>();

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod GETTER>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label01;

        $r8 = interfaceinvoke r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility getterVisibility()>();

        goto label02;

     label01:
        $r8 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label02:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel> = $r8;

        $r4 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod IS_GETTER>;

        $z1 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r4);

        if $z1 == 0 goto label03;

        $r9 = interfaceinvoke r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility isGetterVisibility()>();

        goto label04;

     label03:
        $r9 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label04:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel> = $r9;

        $r5 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod SETTER>;

        $z2 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r5);

        if $z2 == 0 goto label05;

        $r10 = interfaceinvoke r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility setterVisibility()>();

        goto label06;

     label05:
        $r10 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label06:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel> = $r10;

        $r6 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod CREATOR>;

        $z3 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r6);

        if $z3 == 0 goto label07;

        $r11 = interfaceinvoke r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility creatorVisibility()>();

        goto label08;

     label07:
        $r11 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label08:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel> = $r11;

        $r7 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod FIELD>;

        $z4 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r7);

        if $z4 == 0 goto label09;

        $r12 = interfaceinvoke r1.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility fieldVisibility()>();

        goto label10;

     label09:
        $r12 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label10:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel> = $r12;

        return;
    }

    public void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r1, r2, r3, r4, r5;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        r2 := @parameter1: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        r3 := @parameter2: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        r4 := @parameter3: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        r5 := @parameter4: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel> = r1;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel> = r2;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel> = r3;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel> = r4;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel> = r5;

        return;
    }

    public void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r1, $r2, $r4, $r6, $r8, $r10, $r12;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r3, $r5, $r7, $r9, $r11;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if r1 != $r2 goto label1;

        $r3 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        $r4 = $r3.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel> = $r4;

        $r5 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        $r6 = $r5.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel> = $r6;

        $r7 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        $r8 = $r7.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel> = $r8;

        $r9 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        $r10 = $r9.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel> = $r10;

        $r11 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        $r12 = $r11.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel> = $r12;

        goto label2;

     label1:
        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel> = r1;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel> = r1;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel> = r1;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel> = r1;

        r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel> = r1;

     label2:
        return;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std 'with'(org.codehaus.jackson.annotate.JsonAutoDetect)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r1, $r4, $r6, $r8, $r10, $r12;
        org.codehaus.jackson.annotate.JsonMethod $r3, $r5, $r7, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r13, $r14, $r15, $r16, $r17;
        org.codehaus.jackson.annotate.JsonMethod[] $r2;
        org.codehaus.jackson.annotate.JsonAutoDetect r0;

        r1 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r0 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect;

        if r0 != null goto label01;

        return r1;

     label01:
        $r2 = interfaceinvoke r0.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonMethod[] value()>();

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod GETTER>;

        $z0 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r3);

        if $z0 == 0 goto label02;

        $r13 = interfaceinvoke r0.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility getterVisibility()>();

        goto label03;

     label02:
        $r13 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label03:
        $r4 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r13);

        $r5 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod IS_GETTER>;

        $z1 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r5);

        if $z1 == 0 goto label04;

        $r14 = interfaceinvoke r0.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility isGetterVisibility()>();

        goto label05;

     label04:
        $r14 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label05:
        $r6 = virtualinvoke $r4.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withIsGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r14);

        $r7 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod SETTER>;

        $z2 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r7);

        if $z2 == 0 goto label06;

        $r15 = interfaceinvoke r0.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility setterVisibility()>();

        goto label07;

     label06:
        $r15 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label07:
        $r8 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withSetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r15);

        $r9 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod CREATOR>;

        $z3 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r9);

        if $z3 == 0 goto label08;

        $r16 = interfaceinvoke r0.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility creatorVisibility()>();

        goto label09;

     label08:
        $r16 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label09:
        $r10 = virtualinvoke $r8.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withCreatorVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r16);

        $r11 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod FIELD>;

        $z4 = staticinvoke <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[],org.codehaus.jackson.annotate.JsonMethod)>($r2, $r11);

        if $z4 == 0 goto label10;

        $r17 = interfaceinvoke r0.<org.codehaus.jackson.annotate.JsonAutoDetect: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility fieldVisibility()>();

        goto label11;

     label10:
        $r17 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility NONE>;

     label11:
        $r12 = virtualinvoke $r10.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withFieldVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r17);

        return $r12;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std 'with'(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r0, $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std $r2, $r3, r4;

        r4 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r0 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r1 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if r0 != $r1 goto label1;

        $r3 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        return $r3;

     label1:
        $r2 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        specialinvoke $r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r0);

        return $r2;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withVisibility(org.codehaus.jackson.annotate.JsonMethod, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r3;
        int[] $r1;
        int $i0, $i1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r2, $r4, $r5, $r6, $r7, $r8, $r9;
        org.codehaus.jackson.annotate.JsonMethod r0;

        r2 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r0 := @parameter0: org.codehaus.jackson.annotate.JsonMethod;

        r3 := @parameter1: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r1 = <org.codehaus.jackson.map.introspect.VisibilityChecker$1: int[] $SwitchMap$org$codehaus$jackson$annotate$JsonMethod>;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.annotate.JsonMethod: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        $r9 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r3);

        return $r9;

     label2:
        $r8 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withSetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r3);

        return $r8;

     label3:
        $r7 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withCreatorVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r3);

        return $r7;

     label4:
        $r6 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withFieldVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r3);

        return $r6;

     label5:
        $r5 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withIsGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r3);

        return $r5;

     label6:
        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std 'with'(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r3);

        return $r4;

     label7:
        return r2;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r0, $r2, $r4, $r5, $r6, $r7, r9;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r1, $r3, $r8;

        r1 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r9 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r0 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if r9 != $r0 goto label1;

        $r8 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        r9 = $r8.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

     label1:
        $r2 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        if $r2 != r9 goto label2;

        return r1;

     label2:
        $r3 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r7 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $r6 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $r5 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        $r4 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r9, $r7, $r6, $r5, $r4);

        return $r3;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withIsGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r0, $r2, $r4, $r5, $r6, $r7, r9;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r1, $r3, $r8;

        r1 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r9 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r0 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if r9 != $r0 goto label1;

        $r8 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        r9 = $r8.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

     label1:
        $r2 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        if $r2 != r9 goto label2;

        return r1;

     label2:
        $r3 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r7 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $r6 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $r5 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        $r4 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r7, r9, $r6, $r5, $r4);

        return $r3;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withSetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r0, $r2, $r4, $r5, $r6, $r7, r9;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r1, $r3, $r8;

        r1 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r9 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r0 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if r9 != $r0 goto label1;

        $r8 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        r9 = $r8.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

     label1:
        $r2 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        if $r2 != r9 goto label2;

        return r1;

     label2:
        $r3 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r7 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $r6 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $r5 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        $r4 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r7, $r6, r9, $r5, $r4);

        return $r3;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withCreatorVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r0, $r2, $r4, $r5, $r6, $r7, r9;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r1, $r3, $r8;

        r1 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r9 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r0 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if r9 != $r0 goto label1;

        $r8 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        r9 = $r8.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

     label1:
        $r2 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        if $r2 != r9 goto label2;

        return r1;

     label2:
        $r3 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r7 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $r6 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $r5 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $r4 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r7, $r6, $r5, r9, $r4);

        return $r3;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker$Std withFieldVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r0, $r2, $r4, $r5, $r6, $r7, r9;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r1, $r3, $r8;

        r1 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r9 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r0 = <org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility DEFAULT>;

        if r9 != $r0 goto label1;

        $r8 = <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT>;

        r9 = $r8.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

     label1:
        $r2 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        if $r2 != r9 goto label2;

        return r1;

     label2:
        $r3 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r7 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $r6 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $r5 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $r4 = r1.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        specialinvoke $r3.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>($r7, $r6, $r5, $r4, r9);

        return $r3;
    }

    public boolean isCreatorVisible(java.lang.reflect.Member)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r2;
        java.lang.reflect.Member r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: java.lang.reflect.Member;

        $r2 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>(r1);

        return $z0;
    }

    public boolean isCreatorVisible(org.codehaus.jackson.map.introspect.AnnotatedMember)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMember r1;
        java.lang.reflect.Member $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.AnnotatedMember: java.lang.reflect.Member getMember()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean isCreatorVisible(java.lang.reflect.Member)>($r2);

        return $z0;
    }

    public boolean isFieldVisible(java.lang.reflect.Field)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Field r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: java.lang.reflect.Field;

        $r2 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>(r1);

        return $z0;
    }

    public boolean isFieldVisible(org.codehaus.jackson.map.introspect.AnnotatedField)
    {
        org.codehaus.jackson.map.introspect.AnnotatedField r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Field $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedField;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.AnnotatedField: java.lang.reflect.Field getAnnotated()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean isFieldVisible(java.lang.reflect.Field)>($r2);

        return $z0;
    }

    public boolean isGetterVisible(java.lang.reflect.Method)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>(r1);

        return $z0;
    }

    public boolean isGetterVisible(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean isGetterVisible(java.lang.reflect.Method)>($r2);

        return $z0;
    }

    public boolean isIsGetterVisible(java.lang.reflect.Method)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>(r1);

        return $z0;
    }

    public boolean isIsGetterVisible(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean isIsGetterVisible(java.lang.reflect.Method)>($r2);

        return $z0;
    }

    public boolean isSetterVisible(java.lang.reflect.Method)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.annotate.JsonAutoDetect$Visibility: boolean isVisible(java.lang.reflect.Member)>(r1);

        return $z0;
    }

    public boolean isSetterVisible(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: boolean isSetterVisible(java.lang.reflect.Method)>($r2);

        return $z0;
    }

    private static boolean hasMethod(org.codehaus.jackson.annotate.JsonMethod[], org.codehaus.jackson.annotate.JsonMethod)
    {
        int i0, i1;
        org.codehaus.jackson.annotate.JsonMethod[] r0;
        org.codehaus.jackson.annotate.JsonMethod r1, r2, $r3;

        r0 := @parameter0: org.codehaus.jackson.annotate.JsonMethod[];

        r2 := @parameter1: org.codehaus.jackson.annotate.JsonMethod;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r1 = r0[i1];

        if r1 == r2 goto label2;

        $r3 = <org.codehaus.jackson.annotate.JsonMethod: org.codehaus.jackson.annotate.JsonMethod ALL>;

        if r1 != $r3 goto label3;

     label2:
        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r2;
        java.lang.String $r18;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility $r3, $r6, $r9, $r12, $r15;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17;

        r2 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("[Visibility:");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getter: ");

        $r3 = r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _getterMinLevel>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isGetter: ");

        $r6 = r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _isGetterMinLevel>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", setter: ");

        $r9 = r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _setterMinLevel>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", creator: ");

        $r12 = r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _creatorMinLevel>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", field: ");

        $r15 = r2.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility _fieldMinLevel>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withFieldVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r2;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withFieldVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withCreatorVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r2;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withCreatorVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withSetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r2;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withSetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withIsGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r2;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withIsGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r2;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withGetterVisibility(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker withVisibility(org.codehaus.jackson.annotate.JsonMethod, org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r3;
        org.codehaus.jackson.annotate.JsonMethod r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonMethod;

        r2 := @parameter1: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std withVisibility(org.codehaus.jackson.annotate.JsonMethod,org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r1, r2);

        return $r3;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker 'with'(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r2;
        org.codehaus.jackson.annotate.JsonAutoDetect$Visibility r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect$Visibility;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std 'with'(org.codehaus.jackson.annotate.JsonAutoDetect$Visibility)>(r1);

        return $r2;
    }

    public volatile org.codehaus.jackson.map.introspect.VisibilityChecker 'with'(org.codehaus.jackson.annotate.JsonAutoDetect)
    {
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std r0, $r2;
        org.codehaus.jackson.annotate.JsonAutoDetect r1;

        r0 := @this: org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        r1 := @parameter0: org.codehaus.jackson.annotate.JsonAutoDetect;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std 'with'(org.codehaus.jackson.annotate.JsonAutoDetect)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker$Std $r0;
        org.codehaus.jackson.annotate.JsonAutoDetect $r3;

        $r0 = new org.codehaus.jackson.map.introspect.VisibilityChecker$Std;

        $r1 = class "Lorg/codehaus/jackson/map/introspect/VisibilityChecker$Std;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/annotate/JsonAutoDetect;");

        $r3 = (org.codehaus.jackson.annotate.JsonAutoDetect) $r2;

        specialinvoke $r0.<org.codehaus.jackson.map.introspect.VisibilityChecker$Std: void <init>(org.codehaus.jackson.annotate.JsonAutoDetect)>($r3);

        <org.codehaus.jackson.map.introspect.VisibilityChecker$Std: org.codehaus.jackson.map.introspect.VisibilityChecker$Std DEFAULT> = $r0;

        return;
    }
}
