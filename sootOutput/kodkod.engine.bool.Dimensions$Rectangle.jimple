final class kodkod.engine.bool.Dimensions$Rectangle extends kodkod.engine.bool.Dimensions
{
    private final int[] dimensions;

    void <init>(int[], long)
    {
        long l0;
        byte $b2, $b3;
        kodkod.util.ints.IntVector $r6;
        int[] r5;
        kodkod.engine.bool.Dimensions$Rectangle r0;
        kodkod.engine.CapacityExceededException $r8;
        int $i1, $i4, $i5;
        java.lang.StringBuilder $r3, $r7;
        java.lang.String $r4;

        r0 := @this: kodkod.engine.bool.Dimensions$Rectangle;

        r5 := @parameter0: int[];

        l0 := @parameter1: long;

        $i1 = (int) l0;

        specialinvoke r0.<kodkod.engine.bool.Dimensions: void <init>(int,kodkod.engine.bool.Dimensions)>($i1, null);

        $b2 = l0 cmp 2147483647L;

        $i4 = (int) $b2;

        if $i4 > 0 goto label1;

        $b3 = l0 cmp 0L;

        $i5 = (int) $b3;

        if $i5 > 0 goto label2;

     label1:
        $r8 = new kodkod.engine.CapacityExceededException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Matrix too large: requested capacity of ");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntVector asIntVector(int[])>(r5);

        specialinvoke $r8.<kodkod.engine.CapacityExceededException: void <init>(java.lang.String,kodkod.util.ints.IntVector)>($r4, $r6);

        throw $r8;

     label2:
        r0.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions> = r5;

        return;
    }

    void copy(int, int[], int, int)
    {
        int[] r1, $r2;
        kodkod.engine.bool.Dimensions$Rectangle r0;
        int i0, i1, i2;

        r0 := @this: kodkod.engine.bool.Dimensions$Rectangle;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, r1, i1, i2);

        return;
    }

    boolean isSquare(int, int)
    {
        int[] $r1, $r2;
        kodkod.engine.bool.Dimensions$Rectangle r0;
        int i0, i1, $i2, $i3, $i4, i5;

        r0 := @this: kodkod.engine.bool.Dimensions$Rectangle;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i5 = i0 + 1;

        goto label3;

     label1:
        $r1 = r0.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i2 = i5 - 1;

        $i4 = $r1[$i2];

        $r2 = r0.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i3 = $r2[i5];

        if $i4 == $i3 goto label2;

        return 0;

     label2:
        i5 = i5 + 1;

     label3:
        if i5 < i1 goto label1;

        return 1;
    }

    public boolean isSquare()
    {
        kodkod.engine.bool.Dimensions$Rectangle r0;

        r0 := @this: kodkod.engine.bool.Dimensions$Rectangle;

        return 0;
    }

    public int dimension(int)
    {
        int[] $r1;
        kodkod.engine.bool.Dimensions$Rectangle r0;
        int i0, $i1;

        r0 := @this: kodkod.engine.bool.Dimensions$Rectangle;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int numDimensions()
    {
        int $i0;
        int[] $r1;
        kodkod.engine.bool.Dimensions$Rectangle r0;

        r0 := @this: kodkod.engine.bool.Dimensions$Rectangle;

        $r1 = r0.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public kodkod.engine.bool.Dimensions transpose()
    {
        java.lang.UnsupportedOperationException $r5;
        long $l4;
        int[] $r1, $r2, $r3;
        kodkod.engine.bool.Dimensions$Rectangle r0, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: kodkod.engine.bool.Dimensions$Rectangle;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.Dimensions$Rectangle: int numDimensions()>();

        if $i0 == 2 goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("n!=2");

        throw $r5;

     label1:
        $r1 = newarray (int)[2];

        $r2 = r0.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i1 = $r2[1];

        $r1[0] = $i1;

        $r3 = r0.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i2 = $r3[0];

        $r1[1] = $i2;

        $r4 = new kodkod.engine.bool.Dimensions$Rectangle;

        $i3 = virtualinvoke r0.<kodkod.engine.bool.Dimensions$Rectangle: int capacity()>();

        $l4 = (long) $i3;

        specialinvoke $r4.<kodkod.engine.bool.Dimensions$Rectangle: void <init>(int[],long)>($r1, $l4);

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        int[] $r3, $r4, $r5, $r6, $r7;
        kodkod.engine.bool.Dimensions$Rectangle r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        boolean $z0;
        java.lang.Object r0;

        r2 := @this: kodkod.engine.bool.Dimensions$Rectangle;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof kodkod.engine.bool.Dimensions$Rectangle;

        if $z0 == 0 goto label6;

        r1 = (kodkod.engine.bool.Dimensions$Rectangle) r0;

        $r3 = r2.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i1 = lengthof $r3;

        $r4 = r1.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i0 = lengthof $r4;

        if $i1 != $i0 goto label1;

        $i2 = virtualinvoke r2.<kodkod.engine.bool.Dimensions$Rectangle: int capacity()>();

        $i3 = virtualinvoke r1.<kodkod.engine.bool.Dimensions$Rectangle: int capacity()>();

        if $i2 == $i3 goto label2;

     label1:
        return 0;

     label2:
        i7 = 0;

        goto label5;

     label3:
        $r6 = r2.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i6 = $r6[i7];

        $r7 = r1.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i5 = $r7[i7];

        if $i6 == $i5 goto label4;

        return 0;

     label4:
        i7 = i7 + 1;

     label5:
        $r5 = r2.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i4 = lengthof $r5;

        if i7 < $i4 goto label3;

        return 1;

     label6:
        return 0;
    }

    public int hashCode()
    {
        int[] $r1;
        kodkod.engine.bool.Dimensions$Rectangle r0;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.engine.bool.Dimensions$Rectangle;

        $r1 = r0.<kodkod.engine.bool.Dimensions$Rectangle: int[] dimensions>;

        $i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<kodkod.engine.bool.Dimensions$Rectangle: int capacity()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }
}
