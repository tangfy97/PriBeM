public final class org.apache.cxf.common.util.SortedArraySet extends java.lang.Object implements java.util.SortedSet
{
    final java.util.concurrent.atomic.AtomicReference data;

    public void <init>()
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data> = $r1;

        return;
    }

    public void clear()
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

        return;
    }

    public boolean isEmpty()
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object[] r3;
        int $i0;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference $r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (java.lang.Object[]) $r2;

        if r3 == null goto label1;

        $i0 = lengthof r3;

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.cxf.common.util.SortedArraySet r1;
        java.lang.Object[] $r4;
        org.apache.cxf.common.util.SortedArraySet$SASIterator $r0;
        java.lang.Object $r3;
        java.util.concurrent.atomic.AtomicReference $r2;

        r1 := @this: org.apache.cxf.common.util.SortedArraySet;

        $r0 = new org.apache.cxf.common.util.SortedArraySet$SASIterator;

        $r2 = r1.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (java.lang.Object[]) $r3;

        specialinvoke $r0.<org.apache.cxf.common.util.SortedArraySet$SASIterator: void <init>(org.apache.cxf.common.util.SortedArraySet,java.lang.Object[])>(r1, $r4);

        return $r0;
    }

    public int size()
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object[] r3;
        int $i0;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (java.lang.Object[]) $r2;

        if r3 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = lengthof r3;

     label2:
        return $i0;
    }

    private java.lang.Object[] newArray(int)
    {
        org.apache.cxf.common.util.SortedArraySet r2;
        java.lang.Object[] $r0, $r1;
        int i0;

        r2 := @this: org.apache.cxf.common.util.SortedArraySet;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.Object)[i0];

        $r1 = (java.lang.Object[]) $r0;

        return $r1;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.Object[] r4, $r5, $r7, r8;
        java.util.concurrent.atomic.AtomicReference $r2, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.cxf.common.util.SortedArraySet: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label4;

        $r2 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r4 = (java.lang.Object[]) $r3;

        if r4 != null goto label1;

        $r7 = specialinvoke r0.<org.apache.cxf.common.util.SortedArraySet: java.lang.Object[] newArray(int)>(1);

        r8 = $r7;

        $r7[0] = r1;

        goto label2;

     label1:
        $i0 = lengthof r4;

        $i1 = $i0 + 1;

        $r5 = specialinvoke r0.<org.apache.cxf.common.util.SortedArraySet: java.lang.Object[] newArray(int)>($i1);

        r8 = $r5;

        $i2 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r5, 0, $i2);

        $i3 = lengthof $r5;

        $i4 = $i3 - 1;

        $r5[$i4] = r1;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r5);

     label2:
        $r6 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $z1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r4, r8);

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r0.<org.apache.cxf.common.util.SortedArraySet: boolean add(java.lang.Object)>(r1);

        return $z2;

     label3:
        return 1;

     label4:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        org.apache.cxf.common.util.SortedArraySet r3;
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        boolean $z0, $z1, z2;

        r3 := @this: org.apache.cxf.common.util.SortedArraySet;

        r0 := @parameter0: java.util.Collection;

        z2 = 0;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r3.<org.apache.cxf.common.util.SortedArraySet: boolean add(java.lang.Object)>($r2);

        z2 = z2 | $z1;

        goto label1;

     label2:
        return z2;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.apache.cxf.common.util.SortedArraySet r3;
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        boolean $z0, $z1, z2;

        r3 := @this: org.apache.cxf.common.util.SortedArraySet;

        r0 := @parameter0: java.util.Collection;

        z2 = 0;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r3.<org.apache.cxf.common.util.SortedArraySet: boolean contains(java.lang.Object)>($r2);

        z2 = z2 | $z1;

        goto label1;

     label2:
        return z2;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object[] r3;
        int $i0;
        java.lang.Object $r2, r4;
        java.util.concurrent.atomic.AtomicReference $r1;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        r4 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (java.lang.Object[]) $r2;

        if r3 != null goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>(r3, r4);

        if $i0 < 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        org.apache.cxf.common.util.SortedArraySet r3;
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        boolean $z0, $z1, z2;

        r3 := @this: org.apache.cxf.common.util.SortedArraySet;

        r0 := @parameter0: java.util.Collection;

        z2 = 0;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r3.<org.apache.cxf.common.util.SortedArraySet: boolean remove(java.lang.Object)>($r2);

        z2 = z2 | $z1;

        goto label1;

     label2:
        return z2;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.util.Iterator $r1;
        java.util.Collection r3;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        r3 := @parameter0: java.util.Collection;

        z3 = 0;

        $r1 = virtualinvoke r0.<org.apache.cxf.common.util.SortedArraySet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>($r2);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.apache.cxf.common.util.SortedArraySet: boolean remove(java.lang.Object)>($r2);

        z3 = z3 | $z2;

     label2:
        goto label1;

     label3:
        return z3;
    }

    public boolean remove(java.lang.Object)
    {
        java.lang.Object[] r3, $r5;
        java.util.concurrent.atomic.AtomicReference $r1, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        boolean $z0, $z1, $z2, $z3;
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object $r2, r4;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        r4 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (java.lang.Object[]) $r2;

        if r3 != null goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>(r3, r4);

        $i9 = (int) -1;

        if $i0 == $i9 goto label4;

        $i1 = lengthof r3;

        if $i1 != 1 goto label2;

        $r7 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $z2 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r3, null);

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r0.<org.apache.cxf.common.util.SortedArraySet: boolean remove(java.lang.Object)>(r4);

        return $z3;

     label2:
        $i2 = lengthof r3;

        $i3 = $i2 - 1;

        $r5 = specialinvoke r0.<org.apache.cxf.common.util.SortedArraySet: java.lang.Object[] newArray(int)>($i3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r5, 0, $i0);

        $i7 = $i0 + 1;

        $i4 = lengthof r3;

        $i5 = $i4 - 1;

        $i6 = $i5 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, $i7, $r5, $i0, $i6);

        $r6 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $z0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r3, $r5);

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<org.apache.cxf.common.util.SortedArraySet: boolean remove(java.lang.Object)>(r4);

        return $z1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public java.lang.Object[] toArray()
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object[] r3, $r4, $r5;
        java.util.concurrent.atomic.AtomicReference $r1;
        int $i0, $i1;
        java.lang.Object $r2;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (java.lang.Object[]) $r2;

        if r3 != null goto label1;

        $r5 = newarray (java.lang.Object)[0];

        return $r5;

     label1:
        $i0 = lengthof r3;

        $r4 = specialinvoke r0.<org.apache.cxf.common.util.SortedArraySet: java.lang.Object[] newArray(int)>($i0);

        $i1 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r4, 0, $i1);

        return $r4;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] r3, $r7, $r11, $r12, r13;
        java.util.concurrent.atomic.AtomicReference $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object $r2, $r6, $r10;
        java.lang.Class $r4, $r5, $r8, $r9;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        r13 := @parameter0: java.lang.Object[];

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (java.lang.Object[]) $r2;

        if r3 != null goto label2;

        $i7 = lengthof r13;

        if $i7 == 0 goto label1;

        $r8 = virtualinvoke r13.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.Class getComponentType()>();

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r9, 0);

        $r11 = (java.lang.Object[]) $r10;

        $r12 = (java.lang.Object[]) $r11;

        return $r12;

     label1:
        return r13;

     label2:
        $i1 = lengthof r13;

        $i0 = lengthof r3;

        if $i1 >= $i0 goto label3;

        $r4 = virtualinvoke r13.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $i6 = lengthof r3;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r5, $i6);

        $r7 = (java.lang.Object[]) $r6;

        r13 = (java.lang.Object[]) $r7;

     label3:
        $i2 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r13, 0, $i2);

        $i4 = lengthof r13;

        $i3 = lengthof r3;

        if $i4 <= $i3 goto label4;

        $i5 = lengthof r3;

        r13[$i5] = null;

     label4:
        return r13;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.cxf.common.util.SortedArraySet r1, r2;
        java.lang.Object[] $r6, $r8;
        java.util.concurrent.atomic.AtomicReference $r3, $r5;
        java.lang.Object r0, $r4, $r7;
        boolean $z0, $z1;

        r2 := @this: org.apache.cxf.common.util.SortedArraySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.cxf.common.util.SortedArraySet;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.apache.cxf.common.util.SortedArraySet) r0;

        $r3 = r2.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r6 = (java.lang.Object[]) $r4;

        $r5 = r1.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r7 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r8 = (java.lang.Object[]) $r7;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r8);

        return $z1;
    }

    public java.lang.String toString()
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object[] $r3;
        java.lang.Object $r2;
        java.lang.String $r4;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (java.lang.Object[]) $r2;

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r3);

        return $r4;
    }

    public int hashCode()
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object[] $r3;
        int $i0;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (java.lang.Object[]) $r2;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r3);

        return $i0;
    }

    public java.util.Comparator comparator()
    {
        org.apache.cxf.common.util.SortedArraySet r0;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        return null;
    }

    public java.lang.Object first()
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object[] r3;
        int $i0;
        java.lang.Object $r2, $r4;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (java.lang.Object[]) $r2;

        if r3 == null goto label1;

        $i0 = lengthof r3;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = r3[0];

        return $r4;
    }

    public java.lang.Object last()
    {
        org.apache.cxf.common.util.SortedArraySet r0;
        java.lang.Object[] r3;
        java.util.concurrent.atomic.AtomicReference $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2, $r4;

        r0 := @this: org.apache.cxf.common.util.SortedArraySet;

        $r1 = r0.<org.apache.cxf.common.util.SortedArraySet: java.util.concurrent.atomic.AtomicReference data>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (java.lang.Object[]) $r2;

        if r3 == null goto label1;

        $i0 = lengthof r3;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $i1 = lengthof r3;

        $i2 = $i1 - 1;

        $r4 = r3[$i2];

        return $r4;
    }

    public java.util.SortedSet headSet(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.cxf.common.util.SortedArraySet r1;
        java.lang.Object r2;

        r1 := @this: org.apache.cxf.common.util.SortedArraySet;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.cxf.common.util.SortedArraySet r1;
        java.lang.Object r2, r3;

        r1 := @this: org.apache.cxf.common.util.SortedArraySet;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.util.SortedSet tailSet(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.cxf.common.util.SortedArraySet r1;
        java.lang.Object r2;

        r1 := @this: org.apache.cxf.common.util.SortedArraySet;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
