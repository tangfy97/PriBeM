public class org.apache.velocity.runtime.parser.node.ASTModNode extends org.apache.velocity.runtime.parser.node.ASTMathNode
{

    public void <init>(int)
    {
        int i0;
        org.apache.velocity.runtime.parser.node.ASTModNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.ASTModNode;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.ASTMathNode: void <init>(int)>(i0);

        return;
    }

    public void <init>(org.apache.velocity.runtime.parser.Parser, int)
    {
        int i0;
        org.apache.velocity.runtime.parser.Parser r1;
        org.apache.velocity.runtime.parser.node.ASTModNode r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.ASTModNode;

        r1 := @parameter0: org.apache.velocity.runtime.parser.Parser;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.ASTMathNode: void <init>(org.apache.velocity.runtime.parser.Parser,int)>(r1, i0);

        return;
    }

    public java.lang.Number perform(java.lang.Number, java.lang.Number, org.apache.velocity.context.InternalContextAdapter)
    {
        org.apache.velocity.context.InternalContextAdapter r6;
        org.apache.velocity.exception.MathException $r12;
        org.apache.velocity.runtime.log.Log $r10, $r11;
        org.apache.velocity.runtime.parser.node.ASTModNode r5;
        java.lang.StringBuffer $r3, $r4, $r8;
        java.lang.String $r7, $r9;
        java.lang.Number r0, r1, $r2;
        boolean $z0, $z1;

        r5 := @this: org.apache.velocity.runtime.parser.node.ASTModNode;

        r1 := @parameter0: java.lang.Number;

        r0 := @parameter1: java.lang.Number;

        r6 := @parameter2: org.apache.velocity.context.InternalContextAdapter;

        $z0 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: boolean isZero(java.lang.Number)>(r0);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Right side of modulus operation is zero. Must be non-zero. ");

        $r7 = virtualinvoke r5.<org.apache.velocity.runtime.parser.node.ASTModNode: java.lang.String getLocation(org.apache.velocity.context.InternalContextAdapter)>(r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $z1 = r5.<org.apache.velocity.runtime.parser.node.ASTModNode: boolean strictMode>;

        if $z1 == 0 goto label1;

        $r11 = r5.<org.apache.velocity.runtime.parser.node.ASTModNode: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r11.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object)>($r9);

        $r12 = new org.apache.velocity.exception.MathException;

        specialinvoke $r12.<org.apache.velocity.exception.MathException: void <init>(java.lang.String)>($r9);

        throw $r12;

     label1:
        $r10 = r5.<org.apache.velocity.runtime.parser.node.ASTModNode: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r10.<org.apache.velocity.runtime.log.Log: void debug(java.lang.Object)>($r9);

        return null;

     label2:
        $r2 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Number modulo(java.lang.Number,java.lang.Number)>(r1, r0);

        return $r2;
    }
}
