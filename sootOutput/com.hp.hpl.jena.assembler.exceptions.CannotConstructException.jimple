public class com.hp.hpl.jena.assembler.exceptions.CannotConstructException extends com.hp.hpl.jena.assembler.exceptions.AssemblerException
{
    protected final com.hp.hpl.jena.rdf.model.Resource type;
    protected final java.lang.Class assemblerClass;
    private static final java.lang.String rootPrefix;

    public void <init>(java.lang.Class, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Resource)
    {
        java.lang.Class r2;
        java.lang.String $r4;
        com.hp.hpl.jena.assembler.exceptions.CannotConstructException r0;
        com.hp.hpl.jena.rdf.model.Resource r1, r3;

        r0 := @this: com.hp.hpl.jena.assembler.exceptions.CannotConstructException;

        r2 := @parameter0: java.lang.Class;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r3 := @parameter2: com.hp.hpl.jena.rdf.model.Resource;

        $r4 = staticinvoke <com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.String constructMessage(java.lang.Class,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource)>(r2, r1, r3);

        specialinvoke r0.<com.hp.hpl.jena.assembler.exceptions.AssemblerException: void <init>(com.hp.hpl.jena.rdf.model.Resource,java.lang.String)>(r1, $r4);

        r0.<com.hp.hpl.jena.assembler.exceptions.CannotConstructException: com.hp.hpl.jena.rdf.model.Resource type> = r3;

        r0.<com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.Class assemblerClass> = r2;

        return;
    }

    private static java.lang.String constructMessage(java.lang.Class, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.Resource r6, r10;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r8, $r9, $r12;
        java.lang.Class r2;
        java.lang.String $r3, $r7, $r11, $r13;

        r2 := @parameter0: java.lang.Class;

        r6 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r10 := @parameter2: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the assembler ");

        $r3 = staticinvoke <com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.String getClassName(java.lang.Class)>(r2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot construct the object named ");

        $r7 = staticinvoke <com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.String nice(com.hp.hpl.jena.rdf.model.Resource)>(r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it is not of rdf:type ");

        $r11 = staticinvoke <com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.String nice(com.hp.hpl.jena.rdf.model.Resource)>(r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    private static java.lang.String getClassName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.String getPackagePrefix(java.lang.String)>($r1);

        $r3 = <com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.String rootPrefix>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.String getLeafName(java.lang.String)>($r1);

        goto label2;

     label1:
        $r4 = $r1;

     label2:
        return $r4;
    }

    private static java.lang.String getLeafName(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r1;
    }

    private static java.lang.String getPackagePrefix(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    public java.lang.Class getAssemblerClass()
    {
        java.lang.Class $r1;
        com.hp.hpl.jena.assembler.exceptions.CannotConstructException r0;

        r0 := @this: com.hp.hpl.jena.assembler.exceptions.CannotConstructException;

        $r1 = r0.<com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.Class assemblerClass>;

        return $r1;
    }

    public com.hp.hpl.jena.rdf.model.Resource getType()
    {
        com.hp.hpl.jena.assembler.exceptions.CannotConstructException r0;
        com.hp.hpl.jena.rdf.model.Resource $r1;

        r0 := @this: com.hp.hpl.jena.assembler.exceptions.CannotConstructException;

        $r1 = r0.<com.hp.hpl.jena.assembler.exceptions.CannotConstructException: com.hp.hpl.jena.rdf.model.Resource type>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r2;

        $r0 = class "Lcom/hp/hpl/jena/assembler/Assembler;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.String getPackagePrefix(java.lang.String)>($r1);

        <com.hp.hpl.jena.assembler.exceptions.CannotConstructException: java.lang.String rootPrefix> = $r2;

        return;
    }
}
