class com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment extends java.util.concurrent.locks.ReentrantLock
{
    final com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map;
    volatile int count;
    int modCount;
    int threshold;
    volatile java.util.concurrent.atomic.AtomicReferenceArray table;
    final int maxSegmentSize;
    final java.lang.ref.ReferenceQueue keyReferenceQueue;
    final java.lang.ref.ReferenceQueue valueReferenceQueue;
    final java.util.Queue recencyQueue;
    final java.util.concurrent.atomic.AtomicInteger readCount;
    final java.util.Queue evictionQueue;
    final java.util.Queue expirationQueue;
    final com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter statsCounter;

    void <init>(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap, int, int, com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.ref.ReferenceQueue $r5, $r6, $r11, $r12;
        java.util.concurrent.atomic.AtomicReferenceArray $r4;
        java.util.concurrent.atomic.AtomicInteger $r10;
        com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter r3;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$EvictionQueue $r14;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap r2;
        java.util.Queue $r7, $r8, $r9;
        java.util.concurrent.ConcurrentLinkedQueue $r13;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ExpirationQueue $r15;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r2 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter;

        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        $r10 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicInteger readCount> = $r10;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map> = r2;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int maxSegmentSize> = i0;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter statsCounter> = r3;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)>(i1);

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void initTable(java.util.concurrent.atomic.AtomicReferenceArray)>($r4);

        $z0 = virtualinvoke r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean usesKeyReferences()>();

        if $z0 == 0 goto label01;

        $r11 = new java.lang.ref.ReferenceQueue;

        $r5 = $r11;

        specialinvoke $r11.<java.lang.ref.ReferenceQueue: void <init>()>();

        goto label02;

     label01:
        $r5 = null;

     label02:
        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.ref.ReferenceQueue keyReferenceQueue> = $r5;

        $z1 = virtualinvoke r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean usesValueReferences()>();

        if $z1 == 0 goto label03;

        $r12 = new java.lang.ref.ReferenceQueue;

        $r6 = $r12;

        specialinvoke $r12.<java.lang.ref.ReferenceQueue: void <init>()>();

        goto label04;

     label03:
        $r6 = null;

     label04:
        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.ref.ReferenceQueue valueReferenceQueue> = $r6;

        $z2 = virtualinvoke r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean evictsBySize()>();

        if $z2 != 0 goto label05;

        $z5 = virtualinvoke r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean expiresAfterAccess()>();

        if $z5 == 0 goto label06;

     label05:
        $r13 = new java.util.concurrent.ConcurrentLinkedQueue;

        $r7 = $r13;

        specialinvoke $r13.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        goto label07;

     label06:
        $r7 = staticinvoke <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: java.util.Queue discardingQueue()>();

     label07:
        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue recencyQueue> = $r7;

        $z3 = virtualinvoke r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean evictsBySize()>();

        if $z3 == 0 goto label08;

        $r14 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$EvictionQueue;

        $r8 = $r14;

        specialinvoke $r14.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$EvictionQueue: void <init>()>();

        goto label09;

     label08:
        $r8 = staticinvoke <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: java.util.Queue discardingQueue()>();

     label09:
        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue evictionQueue> = $r8;

        $z4 = virtualinvoke r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean expires()>();

        if $z4 == 0 goto label10;

        $r15 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ExpirationQueue;

        $r9 = $r15;

        specialinvoke $r15.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ExpirationQueue: void <init>()>();

        goto label11;

     label10:
        $r9 = staticinvoke <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: java.util.Queue discardingQueue()>();

     label11:
        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue> = $r9;

        return;
    }

    java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)
    {
        int i0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r0;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        i0 := @parameter0: int;

        $r0 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(i0);

        return $r0;
    }

    void initTable(java.util.concurrent.atomic.AtomicReferenceArray)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;

        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i1 = $i0 * 3;

        $i2 = $i1 / 4;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int threshold> = $i2;

        $i4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int threshold>;

        $i3 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int maxSegmentSize>;

        if $i4 != $i3 goto label1;

        $i5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int threshold>;

        $i6 = $i5 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int threshold> = $i6;

     label1:
        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table> = r1;

        return;
    }

    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry newEntry(java.lang.Object, int, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1;
        int i0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3, $r5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$EntryFactory $r4;
        java.lang.Object r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r3 := @parameter2: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r4 = $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$EntryFactory entryFactory>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry newEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment,java.lang.Object,int,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r0, r2, i0, r3);

        return $r5;
    }

    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry copyEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r0, r4, $r6;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$EntryFactory $r5;
        java.lang.ref.ReferenceQueue $r7;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r1, $r8;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r3;

        r2 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r0 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        r4 := @parameter1: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r3 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r5 = $r3.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$EntryFactory entryFactory>;

        $r6 = virtualinvoke $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$EntryFactory: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry copyEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r2, r0, r4);

        $r7 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.ref.ReferenceQueue valueReferenceQueue>;

        $r8 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference copyFor(java.lang.ref.ReferenceQueue,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>($r7, $r6);

        interfaceinvoke $r6.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: void setValueReference(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>($r8);

        return $r6;
    }

    void setValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry, java.lang.Object)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r1, $r6;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r3;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength $r5;
        java.lang.Object r4;

        r2 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r0 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        r4 := @parameter1: java.lang.Object;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r3 = r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r5 = $r3.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength valueStrength>;

        $r6 = virtualinvoke $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Strength: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference referenceValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,java.lang.Object)>(r2, r0, r4);

        interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: void setValueReference(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>($r6);

        virtualinvoke r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void recordWrite(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r0);

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: void notifyNewValue(java.lang.Object)>(r4);

        return;
    }

    java.lang.Object getOrCompute(java.lang.Object, int, com.mycila.inject.internal.guava.cache.CacheLoader) throws java.util.concurrent.ExecutionException
    {
        com.mycila.inject.internal.guava.base.Equivalence $r12;
        java.util.concurrent.atomic.AtomicReferenceArray $r24;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r2, $r13, $r14, $r23;
        com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter $r4, $r17, $r28;
        com.mycila.inject.internal.guava.cache.CacheLoader r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, z8, z9;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r11, $r16, $r18;
        java.util.Queue $r20, $r21;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r29, $r30;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r9, $r25, $r26, r31;
        com.mycila.inject.internal.guava.cache.RemovalCause $r19, $r22;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference $r7, r32;
        java.lang.Object $r1, $r3, r5, $r6, $r10, $r15, $r27;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r5 := @parameter0: java.lang.Object;

        i2 := @parameter1: int;

        r8 := @parameter2: com.mycila.inject.internal.guava.cache.CacheLoader;

     label01:
        r31 = null;

        $i0 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        if $i0 == 0 goto label03;

        $r26 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getEntry(java.lang.Object,int)>(r5, i2);

        r31 = $r26;

        if $r26 == null goto label03;

        $r27 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.Object getLiveValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>($r26);

        if $r27 == null goto label03;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void recordRead(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>($r26);

        $r28 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter statsCounter>;

        interfaceinvoke $r28.<com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter: void recordHit()>();

     label02:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return $r27;

     label03:
        if r31 == null goto label04;

        $r23 = interfaceinvoke r31.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $z5 = interfaceinvoke $r23.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: boolean isComputingReference()>();

        if $z5 != 0 goto label21;

     label04:
        z6 = 1;

        z9 = 1;

        z8 = 1;

        r32 = null;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void lock()>();

     label05:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void preWriteCleanup()>();

        $i1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        $i6 = $i1 - 1;

        $r24 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i3 = virtualinvoke $r24.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i4 = $i3 - 1;

        $i7 = i2 & $i4;

        $r1 = virtualinvoke $r24.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i7);

        $r25 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r1;

        r31 = $r25;

     label06:
        if r31 == null goto label14;

        $r10 = interfaceinvoke r31.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i5 = interfaceinvoke r31.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i5 != i2 goto label13;

        if $r10 == null goto label13;

        $r11 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r12 = $r11.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $z1 = virtualinvoke $r12.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r5, $r10);

        if $z1 == 0 goto label13;

        $r13 = interfaceinvoke r31.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $z2 = interfaceinvoke $r13.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: boolean isComputingReference()>();

        if $z2 == 0 goto label07;

        z6 = 0;

        z9 = 0;

        z8 = 0;

        goto label14;

     label07:
        $r14 = interfaceinvoke r31.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r15 = interfaceinvoke $r14.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        if $r15 != null goto label08;

        $r22 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause COLLECTED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>($r10, i2, $r15, $r22);

        goto label12;

     label08:
        $r16 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z3 = virtualinvoke $r16.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean expires()>();

        if $z3 == 0 goto label09;

        $r18 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z4 = virtualinvoke $r18.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean isExpired(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r31);

        if $z4 == 0 goto label09;

        $r19 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause EXPIRED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>($r10, i2, $r15, $r19);

        goto label12;

     label09:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void recordLockedRead(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r31);

        $r17 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter statsCounter>;

        interfaceinvoke $r17.<com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter: void recordHit()>();

     label10:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

     label11:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return $r15;

     label12:
        $r20 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue evictionQueue>;

        interfaceinvoke $r20.<java.util.Queue: boolean remove(java.lang.Object)>(r31);

        $r21 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue>;

        interfaceinvoke $r21.<java.util.Queue: boolean remove(java.lang.Object)>(r31);

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = $i6;

        goto label14;

     label13:
        r31 = interfaceinvoke r31.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label06;

     label14:
        if z8 == 0 goto label16;

        $r7 = new com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        specialinvoke $r7.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: void <init>(com.mycila.inject.internal.guava.cache.CacheLoader)>(r8);

        r32 = $r7;

        if r31 != null goto label15;

        $r9 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry newEntry(java.lang.Object,int,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r5, i2, $r25);

        r31 = $r9;

        interfaceinvoke $r9.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: void setValueReference(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>($r7);

        virtualinvoke $r24.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i7, $r9);

        goto label16;

     label15:
        interfaceinvoke r31.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: void setValueReference(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>($r7);

     label16:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        goto label19;

     label17:
        $r30 := @caughtexception;

     label18:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        throw $r30;

     label19:
        if z9 == 0 goto label21;

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.Object compute(java.lang.Object,int,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference)>(r5, i2, r31, r32);

     label20:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return $r6;

     label21:
        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r31);

        if $z0 != 0 goto label22;

        $z7 = 1;

        goto label23;

     label22:
        $z7 = 0;

     label23:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z7, "Recursive computation");

        $r2 = interfaceinvoke r31.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object waitForValue()>();

        if $r3 == null goto label01;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void recordRead(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r31);

        $r4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter statsCounter>;

        interfaceinvoke $r4.<com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter: void recordConcurrentMiss()>();

     label24:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return $r3;

     label25:
        $r29 := @caughtexception;

     label26:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        throw $r29;

        catch java.lang.Throwable from label05 to label10 with label17;
        catch java.lang.Throwable from label12 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label11 with label25;
        catch java.lang.Throwable from label12 to label20 with label25;
        catch java.lang.Throwable from label21 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    java.lang.Object compute(java.lang.Object, int, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference) throws java.util.concurrent.ExecutionException
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r4;
        java.lang.Throwable $r9, $r11;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r0;
        com.mycila.inject.internal.guava.cache.RemovalCause $r8;
        long $l0, $l2, $l3, $l4, $l5, $l6, $l7;
        com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter $r5, $r7, $r10;
        int i1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference r1;
        java.lang.Object r2, $r3, $r6, r12;

        r4 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r2 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        r0 := @parameter2: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        r1 := @parameter3: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference;

        r12 = null;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label01:
        entermonitor r0;

     label02:
        $r3 = virtualinvoke r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ComputingValueReference: java.lang.Object compute(java.lang.Object,int)>(r2, i1);

        r12 = $r3;

        exitmonitor r0;

     label03:
        goto label06;

     label04:
        $r11 := @caughtexception;

        exitmonitor r0;

     label05:
        throw $r11;

     label06:
        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $r5 = r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter statsCounter>;

        $l3 = $l2 - $l0;

        interfaceinvoke $r5.<com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter: void recordLoadSuccess(long)>($l3);

        $r6 = virtualinvoke r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>(r2, i1, $r3, 1);

        if $r6 == null goto label07;

        $r8 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause REPLACED>;

        virtualinvoke r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>(r2, i1, $r3, $r8);

     label07:
        if $r3 != null goto label08;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        $r7 = r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter statsCounter>;

        $l5 = $l4 - $l0;

        interfaceinvoke $r7.<com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter: void recordLoadException(long)>($l5);

        virtualinvoke r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean clearValue(java.lang.Object,int,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>(r2, i1, r1);

     label08:
        return $r3;

     label09:
        $r9 := @caughtexception;

     label10:
        if r12 != null goto label11;

        $l6 = staticinvoke <java.lang.System: long nanoTime()>();

        $r10 = r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter statsCounter>;

        $l7 = $l6 - $l0;

        interfaceinvoke $r10.<com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter: void recordLoadException(long)>($l7);

        virtualinvoke r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean clearValue(java.lang.Object,int,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>(r2, i1, r1);

     label11:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    void tryDrainReferenceQueues()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean tryLock()>();

        if $z0 == 0 goto label5;

     label1:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void drainReferenceQueues()>();

     label2:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        goto label5;

     label3:
        $r1 := @caughtexception;

     label4:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        throw $r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void drainReferenceQueues()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean usesKeyReferences()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void drainKeyReferenceQueue()>();

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z1 = virtualinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean usesValueReferences()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void drainValueReferenceQueue()>();

     label2:
        return;
    }

    void drainKeyReferenceQueue()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.ref.Reference $r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r4;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3;
        int i0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        i0 = 0;

     label1:
        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.ref.ReferenceQueue keyReferenceQueue>;

        $r2 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r2 == null goto label3;

        r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r2;

        $r4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        virtualinvoke $r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: void reclaimKey(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r3);

        i0 = i0 + 1;

        if i0 != 16 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        return;
    }

    void drainValueReferenceQueue()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.ref.Reference $r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference r3;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r4;
        int i0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        i0 = 0;

     label1:
        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.ref.ReferenceQueue valueReferenceQueue>;

        $r2 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r2 == null goto label3;

        r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference) $r2;

        $r4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        virtualinvoke $r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: void reclaimValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>(r3);

        i0 = i0 + 1;

        if i0 != 16 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        return;
    }

    void clearReferenceQueues()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean usesKeyReferences()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void clearKeyReferenceQueue()>();

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z1 = virtualinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean usesValueReferences()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void clearValueReferenceQueue()>();

     label2:
        return;
    }

    void clearKeyReferenceQueue()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.ref.Reference $r2;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

     label1:
        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.ref.ReferenceQueue keyReferenceQueue>;

        $r2 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r2 == null goto label2;

        goto label1;

     label2:
        return;
    }

    void clearValueReferenceQueue()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.ref.Reference $r2;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

     label1:
        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.ref.ReferenceQueue valueReferenceQueue>;

        $r2 = virtualinvoke $r1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r2 == null goto label2;

        goto label1;

     label2:
        return;
    }

    void recordRead(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1, $r4;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r2;
        long $l0;
        java.util.Queue $r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r2 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean expiresAfterAccess()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $l0 = $r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: long expireAfterAccessNanos>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void recordExpirationTime(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,long)>(r2, $l0);

     label1:
        $r3 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue recencyQueue>;

        interfaceinvoke $r3.<java.util.Queue: boolean add(java.lang.Object)>(r2);

        return;
    }

    void recordLockedRead(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r1;
        long $l0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r3, $r4;
        java.util.Queue $r2, $r5;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue evictionQueue>;

        interfaceinvoke $r2.<java.util.Queue: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean expiresAfterAccess()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $l0 = $r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: long expireAfterAccessNanos>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void recordExpirationTime(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,long)>(r1, $l0);

        $r5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue>;

        interfaceinvoke $r5.<java.util.Queue: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    void recordWrite(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r1;
        long $l0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r3, $r4, $r5, $r7;
        java.util.Queue $r2, $r6;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void drainRecencyQueue()>();

        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue evictionQueue>;

        interfaceinvoke $r2.<java.util.Queue: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean expires()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z1 = virtualinvoke $r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean expiresAfterAccess()>();

        if $z1 == 0 goto label1;

        $r7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $l0 = $r7.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: long expireAfterAccessNanos>;

        goto label2;

     label1:
        $r5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $l0 = $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: long expireAfterWriteNanos>;

     label2:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void recordExpirationTime(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,long)>(r1, $l0);

        $r6 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue>;

        interfaceinvoke $r6.<java.util.Queue: boolean add(java.lang.Object)>(r1);

     label3:
        return;
    }

    void drainRecencyQueue()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r8;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r2;
        java.lang.Object $r7;
        java.util.Queue $r1, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

     label1:
        $r6 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue recencyQueue>;

        $r7 = interfaceinvoke $r6.<java.util.Queue: java.lang.Object poll()>();

        $r8 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r7;

        if $r8 == null goto label3;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue evictionQueue>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean contains(java.lang.Object)>($r8);

        if $z0 == 0 goto label2;

        $r5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue evictionQueue>;

        interfaceinvoke $r5.<java.util.Queue: boolean add(java.lang.Object)>($r8);

     label2:
        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z1 = virtualinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean expiresAfterAccess()>();

        if $z1 == 0 goto label1;

        $r3 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue>;

        $z2 = interfaceinvoke $r3.<java.util.Queue: boolean contains(java.lang.Object)>($r8);

        if $z2 == 0 goto label1;

        $r4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue>;

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r8);

        goto label1;

     label3:
        return;
    }

    void recordExpirationTime(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry, long)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r2;
        com.mycila.inject.internal.guava.base.Ticker $r3;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r0;
        long $l0, l1, $l2;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r0 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        l1 := @parameter1: long;

        $r2 = r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r3 = $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Ticker ticker>;

        $l0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.base.Ticker: long read()>();

        $l2 = $l0 + l1;

        interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: void setExpirationTime(long)>($l2);

        return;
    }

    void tryExpireEntries()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean tryLock()>();

        if $z0 == 0 goto label5;

     label1:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void expireEntries()>();

     label2:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        goto label5;

     label3:
        $r1 := @caughtexception;

     label4:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        throw $r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void expireEntries()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r6;
        com.mycila.inject.internal.guava.cache.RemovalCause $r8;
        long $l0;
        java.lang.AssertionError $r9;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r2, $r7;
        com.mycila.inject.internal.guava.base.Ticker $r3;
        int $i1;
        java.lang.Object $r5;
        java.util.Queue $r1, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void drainRecencyQueue()>();

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r3 = $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Ticker ticker>;

        $l0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.base.Ticker: long read()>();

     label2:
        $r4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue>;

        $r5 = interfaceinvoke $r4.<java.util.Queue: java.lang.Object peek()>();

        $r6 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r5;

        if $r6 == null goto label3;

        $r7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z1 = virtualinvoke $r7.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean isExpired(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,long)>($r6, $l0);

        if $z1 == 0 goto label3;

        $i1 = interfaceinvoke $r6.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        $r8 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause EXPIRED>;

        $z2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean removeEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,int,com.mycila.inject.internal.guava.cache.RemovalCause)>($r6, $i1, $r8);

        if $z2 != 0 goto label2;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label3:
        return;
    }

    void enqueueNotification(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry, com.mycila.inject.internal.guava.cache.RemovalCause)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r3;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r1;
        int $i0;
        com.mycila.inject.internal.guava.cache.RemovalCause r5;
        java.lang.Object $r2, $r4;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        r5 := @parameter1: com.mycila.inject.internal.guava.cache.RemovalCause;

        $r2 = interfaceinvoke r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i0 = interfaceinvoke r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        $r3 = interfaceinvoke r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r4 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>($r2, $i0, $r4, r5);

        return;
    }

    void enqueueNotification(java.lang.Object, int, java.lang.Object, com.mycila.inject.internal.guava.cache.RemovalCause)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r1;
        com.mycila.inject.internal.guava.cache.RemovalCause r0;
        com.mycila.inject.internal.guava.cache.RemovalNotification $r5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r2, $r8;
        com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter $r10;
        int i0;
        java.lang.Object r6, r7;
        java.util.Queue $r3, $r4, $r9;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r6 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r7 := @parameter2: java.lang.Object;

        r0 := @parameter3: com.mycila.inject.internal.guava.cache.RemovalCause;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.RemovalCause: boolean wasEvicted()>();

        if $z0 == 0 goto label1;

        $r10 = r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter statsCounter>;

        interfaceinvoke $r10.<com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter: void recordEviction()>();

     label1:
        $r2 = r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r4 = $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: java.util.Queue removalNotificationQueue>;

        $r3 = <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: java.util.Queue DISCARDING_QUEUE>;

        if $r4 == $r3 goto label2;

        $r5 = new com.mycila.inject.internal.guava.cache.RemovalNotification;

        specialinvoke $r5.<com.mycila.inject.internal.guava.cache.RemovalNotification: void <init>(java.lang.Object,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>(r6, r7, r0);

        $r8 = r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r9 = $r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: java.util.Queue removalNotificationQueue>;

        interfaceinvoke $r9.<java.util.Queue: boolean offer(java.lang.Object)>($r5);

     label2:
        return;
    }

    boolean evictEntries()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r4;
        com.mycila.inject.internal.guava.cache.RemovalCause $r5;
        java.lang.AssertionError $r6;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.util.Queue $r2;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean evictsBySize()>();

        if $z0 == 0 goto label2;

        $i1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        $i0 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int maxSegmentSize>;

        if $i1 < $i0 goto label2;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void drainRecencyQueue()>();

        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue evictionQueue>;

        $r3 = interfaceinvoke $r2.<java.util.Queue: java.lang.Object remove()>();

        r4 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r3;

        $i2 = interfaceinvoke r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        $r5 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause SIZE>;

        $z1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean removeEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,int,com.mycila.inject.internal.guava.cache.RemovalCause)>(r4, $i2, $r5);

        if $z1 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        return 1;

     label2:
        return 0;
    }

    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getFirst(int)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r3;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        i0 := @parameter0: int;

        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        $i3 = i0 & $i2;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i3);

        $r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r2;

        return $r3;
    }

    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getEntry(java.lang.Object, int)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.base.Equivalence $r4;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r2;
        int i0, $i1;
        java.lang.Object $r1, r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getFirst(int)>(i0);

     label1:
        if r5 == null goto label5;

        $i1 = interfaceinvoke r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i1 == i0 goto label2;

        goto label4;

     label2:
        $r1 = interfaceinvoke r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        if $r1 != null goto label3;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void tryDrainReferenceQueues()>();

        goto label4;

     label3:
        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r4 = $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $z0 = virtualinvoke $r4.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r3, $r1);

        if $z0 == 0 goto label4;

        return r5;

     label4:
        r5 = interfaceinvoke r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label1;

     label5:
        return null;
    }

    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getLiveEntry(java.lang.Object, int)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r3, $r4;
        int i0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getEntry(java.lang.Object,int)>(r1, i0);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean expires()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z1 = virtualinvoke $r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean isExpired(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>($r2);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void tryExpireEntries()>();

        return null;

     label2:
        return $r2;
    }

    java.lang.Object get(java.lang.Object, int)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r3;
        int $i0, i1;
        java.lang.Object r1, $r4;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r1 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

     label1:
        $i0 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        if $i0 == 0 goto label6;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getLiveEntry(java.lang.Object,int)>(r1, i1);

        if $r2 != null goto label3;

     label2:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return null;

     label3:
        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r4 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        if $r4 == null goto label4;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void recordRead(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>($r2);

        goto label5;

     label4:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void tryDrainReferenceQueues()>();

     label5:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return $r4;

     label6:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return null;

     label7:
        $r5 := @caughtexception;

     label8:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label5 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    boolean containsKey(java.lang.Object, int)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r3;
        int $i0, i1;
        java.lang.Object r1, $r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r1 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

     label1:
        $i0 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        if $i0 == 0 goto label6;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getLiveEntry(java.lang.Object,int)>(r1, i1);

        if $r2 != null goto label3;

     label2:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return 0;

     label3:
        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r4 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        if $r4 == null goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return $z0;

     label6:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return 0;

     label7:
        $r5 := @caughtexception;

     label8:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label5 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    boolean containsValue(java.lang.Object)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r6;
        com.mycila.inject.internal.guava.base.Equivalence $r5;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r8;
        java.util.concurrent.atomic.AtomicReferenceArray r7;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r3;
        int $i0, $i1, i2;
        java.lang.Object $r1, $r2, r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r4 := @parameter0: java.lang.Object;

     label01:
        $i0 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        if $i0 == 0 goto label08;

        r7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r7.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        i2 = 0;

     label02:
        if i2 >= $i1 goto label08;

        $r1 = virtualinvoke r7.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i2);

        r8 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r1;

     label03:
        if r8 == null goto label07;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.lang.Object getLiveValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r8);

        if $r2 != null goto label04;

        goto label06;

     label04:
        $r3 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r5 = $r3.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence valueEquivalence>;

        $z0 = virtualinvoke $r5.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r4, $r2);

        if $z0 == 0 goto label06;

     label05:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return 1;

     label06:
        r8 = interfaceinvoke r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label03;

     label07:
        i2 = i2 + 1;

        goto label02;

     label08:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        return 0;

     label09:
        $r6 := @caughtexception;

     label10:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postReadCleanup()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    java.lang.Object put(java.lang.Object, int, java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.base.Equivalence $r7;
        java.util.concurrent.atomic.AtomicReferenceArray $r12;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r8;
        boolean $z0, $z1, z2, $z3, $z4;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r6;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r14;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry $r3, $r13, r15;
        com.mycila.inject.internal.guava.cache.RemovalCause $r10, $r11;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16;
        java.lang.Object $r1, r2, r4, $r5, $r9;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r2 := @parameter0: java.lang.Object;

        i2 := @parameter1: int;

        r4 := @parameter2: java.lang.Object;

        z2 := @parameter3: boolean;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void lock()>();

     label01:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void preWriteCleanup()>();

        $i0 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        i16 = $i0 + 1;

        $i1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int threshold>;

        if i16 <= $i1 goto label02;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void expand()>();

        $i14 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        i16 = $i14 + 1;

     label02:
        $r12 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i3 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i4 = $i3 - 1;

        $i15 = i2 & $i4;

        $r1 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i15);

        $r13 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r1;

        r15 = $r13;

     label03:
        if r15 == null goto label12;

        $r5 = interfaceinvoke r15.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i8 = interfaceinvoke r15.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i8 != i2 goto label11;

        if $r5 == null goto label11;

        $r6 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r7 = $r6.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $z1 = virtualinvoke $r7.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r2, $r5);

        if $z1 == 0 goto label11;

        $r8 = interfaceinvoke r15.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r9 = interfaceinvoke $r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        if $r9 != null goto label07;

        $i11 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i12 = $i11 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i12;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void setValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,java.lang.Object)>(r15, r4);

        $z3 = interfaceinvoke $r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: boolean isComputingReference()>();

        if $z3 != 0 goto label04;

        $r11 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause COLLECTED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>(r2, i2, $r9, $r11);

        i16 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        goto label05;

     label04:
        $z4 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean evictEntries()>();

        if $z4 == 0 goto label05;

        $i13 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        i16 = $i13 + 1;

     label05:
        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = i16;

     label06:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return null;

     label07:
        if z2 == 0 goto label09;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void recordLockedRead(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r15);

     label08:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return $r9;

     label09:
        $i9 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i10 = $i9 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i10;

        $r10 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause REPLACED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>(r2, i2, $r9, $r10);

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void setValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,java.lang.Object)>(r15, r4);

     label10:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return $r9;

     label11:
        r15 = interfaceinvoke r15.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label03;

     label12:
        $i5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i6 = $i5 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i6;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry newEntry(java.lang.Object,int,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r2, i2, $r13);

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void setValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,java.lang.Object)>($r3, r4);

        virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i15, $r3);

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean evictEntries()>();

        if $z0 == 0 goto label13;

        $i7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        i16 = $i7 + 1;

     label13:
        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = i16;

     label14:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return null;

     label15:
        $r14 := @caughtexception;

     label16:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        throw $r14;

        catch java.lang.Throwable from label01 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    void expand()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r4, $r5, r7, $r8, r9, r10, r11;
        java.util.concurrent.atomic.AtomicReferenceArray r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, i8, $i9, $i10, i11, i12, i13, i14, i15, $i17;
        boolean $z0;
        java.lang.Object $r3, $r6;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        if $i0 < 1073741824 goto label01;

        return;

     label01:
        i11 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        $i1 = $i0 << 1;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)>($i1);

        $i2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i3 = $i2 * 3;

        $i4 = $i3 / 4;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int threshold> = $i4;

        $i5 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        i6 = $i5 - 1;

        i12 = 0;

     label02:
        if i12 >= $i0 goto label11;

        $r3 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i12);

        r4 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r3;

        if r4 == null goto label10;

        $r5 = interfaceinvoke r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        $i7 = interfaceinvoke r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        i8 = $i7 & i6;

        if $r5 != null goto label03;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i8, r4);

        goto label10;

     label03:
        r9 = r4;

        i13 = i8;

        r10 = $r5;

     label04:
        if r10 == null goto label06;

        $i10 = interfaceinvoke r10.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        i14 = $i10 & i6;

        if i14 == i13 goto label05;

        i13 = i14;

        r9 = r10;

     label05:
        r10 = interfaceinvoke r10.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label04;

     label06:
        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i13, r9);

        r11 = r4;

     label07:
        if r11 == r9 goto label10;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isCollected(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r11);

        if $z0 == 0 goto label08;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void removeCollectedEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r11);

        $i17 = (int) -1;

        i11 = i11 + $i17;

        goto label09;

     label08:
        $i9 = interfaceinvoke r11.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        i15 = $i9 & i6;

        $r6 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i15);

        r7 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r6;

        $r8 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry copyEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r11, r7);

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i15, $r8);

     label09:
        r11 = interfaceinvoke r11.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label07;

     label10:
        i12 = i12 + 1;

        goto label02;

     label11:
        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table> = $r2;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = i11;

        return;
    }

    boolean replace(java.lang.Object, int, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Equivalence $r7, $r12;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r8;
        boolean $z0, $z1, $z2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r5, $r10;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r17;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3, $r16, r18;
        com.mycila.inject.internal.guava.cache.RemovalCause $r13, $r15;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.Object $r2, $r4, r6, $r9, r11, r14;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r6 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r11 := @parameter2: java.lang.Object;

        r14 := @parameter3: java.lang.Object;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void lock()>();

     label01:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void preWriteCleanup()>();

        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i3);

        r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r2;

        r18 = r3;

     label02:
        if r18 == null goto label09;

        $r4 = interfaceinvoke r18.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i4 = interfaceinvoke r18.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i4 != i0 goto label08;

        if $r4 == null goto label08;

        $r5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r7 = $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $z0 = virtualinvoke $r7.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r6, $r4);

        if $z0 == 0 goto label08;

        $r8 = interfaceinvoke r18.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r9 = interfaceinvoke $r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        if $r9 != null goto label04;

        $z2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isCollected(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>($r8);

        if $z2 == 0 goto label03;

        $i7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i8 = $i7 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i8;

        $r15 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause COLLECTED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>($r4, i0, $r9, $r15);

        $r16 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry removeFromChain(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r3, r18);

        $i9 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        i10 = $i9 - 1;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i3, $r16);

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = i10;

     label03:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 0;

     label04:
        $r10 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r12 = $r10.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence valueEquivalence>;

        $z1 = virtualinvoke $r12.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r11, $r9);

        if $z1 == 0 goto label06;

        $i5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i6 = $i5 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i6;

        $r13 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause REPLACED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>(r6, i0, $r9, $r13);

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void setValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,java.lang.Object)>(r18, r14);

     label05:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 1;

     label06:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void recordLockedRead(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r18);

     label07:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 0;

     label08:
        r18 = interfaceinvoke r18.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label02;

     label09:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 0;

     label10:
        $r17 := @caughtexception;

     label11:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        throw $r17;

        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    java.lang.Object replace(java.lang.Object, int, java.lang.Object)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r14;
        com.mycila.inject.internal.guava.base.Equivalence $r7;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3, $r13, r15;
        com.mycila.inject.internal.guava.cache.RemovalCause $r10, $r12;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r8;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        boolean $z0, $z1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r5;
        java.lang.Object $r2, $r4, r6, $r9, r11;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r6 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r11 := @parameter2: java.lang.Object;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void lock()>();

     label1:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void preWriteCleanup()>();

        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i3);

        r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r2;

        r15 = r3;

     label2:
        if r15 == null goto label7;

        $r4 = interfaceinvoke r15.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i4 = interfaceinvoke r15.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i4 != i0 goto label6;

        if $r4 == null goto label6;

        $r5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r7 = $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $z0 = virtualinvoke $r7.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r6, $r4);

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r15.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r9 = interfaceinvoke $r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        if $r9 != null goto label4;

        $z1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isCollected(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>($r8);

        if $z1 == 0 goto label3;

        $i7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i8 = $i7 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i8;

        $r12 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause COLLECTED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>($r4, i0, $r9, $r12);

        $r13 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry removeFromChain(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r3, r15);

        $i9 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        i10 = $i9 - 1;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i3, $r13);

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = i10;

     label3:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return null;

     label4:
        $i5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i6 = $i5 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i6;

        $r10 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause REPLACED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>(r6, i0, $r9, $r10);

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void setValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,java.lang.Object)>(r15, r11);

     label5:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return $r9;

     label6:
        r15 = interfaceinvoke r15.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label2;

     label7:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return null;

     label8:
        $r14 := @caughtexception;

     label9:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        throw $r14;

        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    java.lang.Object remove(java.lang.Object, int)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r11;
        com.mycila.inject.internal.guava.base.Equivalence $r7;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3, $r10, r12;
        com.mycila.inject.internal.guava.cache.RemovalCause r13;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r8;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r5;
        java.lang.Object $r2, $r4, r6, $r9;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r6 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void lock()>();

     label01:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void preWriteCleanup()>();

        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i3);

        r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r2;

        r12 = r3;

     label02:
        if r12 == null goto label08;

        $r4 = interfaceinvoke r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i4 = interfaceinvoke r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i4 != i0 goto label07;

        if $r4 == null goto label07;

        $r5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r7 = $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $z0 = virtualinvoke $r7.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r6, $r4);

        if $z0 == 0 goto label07;

        $r8 = interfaceinvoke r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r9 = interfaceinvoke $r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        if $r9 == null goto label03;

        r13 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause EXPLICIT>;

        goto label05;

     label03:
        $z1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isCollected(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>($r8);

        if $z1 == 0 goto label04;

        r13 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause COLLECTED>;

        goto label05;

     label04:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return null;

     label05:
        $i5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i6 = $i5 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i6;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>($r4, i0, $r9, r13);

        $r10 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry removeFromChain(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r3, r12);

        $i7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        $i8 = $i7 - 1;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i3, $r10);

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = $i8;

     label06:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return $r9;

     label07:
        r12 = interfaceinvoke r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label02;

     label08:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return null;

     label09:
        $r11 := @caughtexception;

     label10:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        throw $r11;

        catch java.lang.Throwable from label01 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    boolean remove(java.lang.Object, int, java.lang.Object)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r15;
        com.mycila.inject.internal.guava.base.Equivalence $r7, $r12;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3, $r13, r16;
        com.mycila.inject.internal.guava.cache.RemovalCause $r14, r17;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r8;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1, $z2, $z3;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r5, $r10;
        java.lang.Object $r2, $r4, r6, $r9, r11;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r6 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r11 := @parameter2: java.lang.Object;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void lock()>();

     label01:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void preWriteCleanup()>();

        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i3);

        r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r2;

        r16 = r3;

     label02:
        if r16 == null goto label09;

        $r4 = interfaceinvoke r16.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i4 = interfaceinvoke r16.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i4 != i0 goto label08;

        if $r4 == null goto label08;

        $r5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r7 = $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $z0 = virtualinvoke $r7.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r6, $r4);

        if $z0 == 0 goto label08;

        $r8 = interfaceinvoke r16.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r9 = interfaceinvoke $r8.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        $r10 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r12 = $r10.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence valueEquivalence>;

        $z1 = virtualinvoke $r12.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r11, $r9);

        if $z1 == 0 goto label03;

        r17 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause EXPLICIT>;

        goto label05;

     label03:
        $z2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isCollected(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>($r8);

        if $z2 == 0 goto label04;

        r17 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause COLLECTED>;

        goto label05;

     label04:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 0;

     label05:
        $i5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i6 = $i5 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i6;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>($r4, i0, $r9, r17);

        $r13 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry removeFromChain(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r3, r16);

        $i7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        $i8 = $i7 - 1;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i3, $r13);

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = $i8;

        $r14 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause EXPLICIT>;

        if r17 != $r14 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return $z3;

     label08:
        r16 = interfaceinvoke r16.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label02;

     label09:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 0;

     label10:
        $r15 := @caughtexception;

     label11:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        throw $r15;

        catch java.lang.Throwable from label01 to label04 with label10;
        catch java.lang.Throwable from label05 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    void clear()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r11;
        com.mycila.inject.internal.guava.cache.RemovalCause $r10;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r12;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        java.util.concurrent.atomic.AtomicInteger $r7;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r9;
        int $i0, $i1, $i2, $i3, i4, i5, $i6;
        boolean $z0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r2;
        java.lang.Object $r8;
        java.util.Queue $r3, $r4, $r5, $r6;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        $i0 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        if $i0 == 0 goto label12;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void lock()>();

     label01:
        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r4 = $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: java.util.Queue removalNotificationQueue>;

        $r3 = <com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: java.util.Queue DISCARDING_QUEUE>;

        if $r4 == $r3 goto label06;

        i4 = 0;

     label02:
        $i3 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        if i4 >= $i3 goto label06;

        $r8 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i4);

        r12 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r8;

     label03:
        if r12 == null goto label05;

        $r9 = interfaceinvoke r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $z0 = interfaceinvoke $r9.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: boolean isComputingReference()>();

        if $z0 != 0 goto label04;

        $r10 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause EXPLICIT>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.RemovalCause)>(r12, $r10);

     label04:
        r12 = interfaceinvoke r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label03;

     label05:
        i4 = i4 + 1;

        goto label02;

     label06:
        i5 = 0;

     label07:
        $i6 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        if i5 >= $i6 goto label08;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i5, null);

        i5 = i5 + 1;

        goto label07;

     label08:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void clearReferenceQueues()>();

        $r5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue evictionQueue>;

        interfaceinvoke $r5.<java.util.Queue: void clear()>();

        $r6 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue>;

        interfaceinvoke $r6.<java.util.Queue: void clear()>();

        $r7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicInteger readCount>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);

        $i1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i2 = $i1 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i2;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = 0;

     label09:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        goto label12;

     label10:
        $r11 := @caughtexception;

     label11:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        throw $r11;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry removeFromChain(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r1, r4, r5, r6;
        int i0, $i2;
        java.util.Queue $r2, $r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r4 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        r1 := @parameter1: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r2 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue evictionQueue>;

        interfaceinvoke $r2.<java.util.Queue: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue>;

        interfaceinvoke $r3.<java.util.Queue: boolean remove(java.lang.Object)>(r1);

        i0 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        r5 = interfaceinvoke r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        r6 = r4;

     label1:
        if r6 == r1 goto label4;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isCollected(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r6);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void removeCollectedEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r6);

        $i2 = (int) -1;

        i0 = i0 + $i2;

        goto label3;

     label2:
        r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry copyEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r6, r5);

     label3:
        r6 = interfaceinvoke r6.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label1;

     label4:
        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = i0;

        return r5;
    }

    void removeCollectedEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r1;
        com.mycila.inject.internal.guava.cache.RemovalCause $r2;
        java.util.Queue $r3, $r4;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r2 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause COLLECTED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.RemovalCause)>(r1, $r2);

        $r3 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue evictionQueue>;

        interfaceinvoke $r3.<java.util.Queue: boolean remove(java.lang.Object)>(r1);

        $r4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.Queue expirationQueue>;

        interfaceinvoke $r4.<java.util.Queue: boolean remove(java.lang.Object)>(r1);

        return;
    }

    boolean reclaimKey(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry, int)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r10;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3, r4, $r9, r11;
        com.mycila.inject.internal.guava.cache.RemovalCause $r8;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r6;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, i7;
        java.lang.Object $r2, $r5, $r7;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r4 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void lock()>();

     label1:
        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i3);

        r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r2;

        r11 = r3;

     label2:
        if r11 == null goto label5;

        if r11 != r4 goto label4;

        $i4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i5 = $i4 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i5;

        $r5 = interfaceinvoke r11.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke r11.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r7 = interfaceinvoke $r6.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        $r8 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause COLLECTED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>($r5, i0, $r7, $r8);

        $r9 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry removeFromChain(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r3, r11);

        $i6 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        i7 = $i6 - 1;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i3, $r9);

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = i7;

     label3:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 1;

     label4:
        r11 = interfaceinvoke r11.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label2;

     label5:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 0;

     label6:
        $r10 := @caughtexception;

     label7:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    boolean reclaimValue(java.lang.Object, int, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r13;
        com.mycila.inject.internal.guava.base.Equivalence $r7;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3, $r12, r14;
        com.mycila.inject.internal.guava.cache.RemovalCause $r11;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r8, r9;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r5;
        java.lang.Object $r2, $r4, r6, $r10;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r6 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r9 := @parameter2: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void lock()>();

     label01:
        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i3);

        r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r2;

        r14 = r3;

     label02:
        if r14 == null goto label08;

        $r4 = interfaceinvoke r14.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i4 = interfaceinvoke r14.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i4 != i0 goto label07;

        if $r4 == null goto label07;

        $r5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r7 = $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $z1 = virtualinvoke $r7.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r6, $r4);

        if $z1 == 0 goto label07;

        $r8 = interfaceinvoke r14.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        if $r8 != r9 goto label05;

        $i5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i6 = $i5 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i6;

        $r10 = interfaceinvoke r9.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        $r11 = <com.mycila.inject.internal.guava.cache.RemovalCause: com.mycila.inject.internal.guava.cache.RemovalCause COLLECTED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>(r6, i0, $r10, $r11);

        $r12 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry removeFromChain(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r3, r14);

        $i7 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        i8 = $i7 - 1;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i3, $r12);

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = i8;

     label03:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        $z3 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isHeldByCurrentThread()>();

        if $z3 != 0 goto label04;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

     label04:
        return 1;

     label05:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        $z2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isHeldByCurrentThread()>();

        if $z2 != 0 goto label06;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

     label06:
        return 0;

     label07:
        r14 = interfaceinvoke r14.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label02;

     label08:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label09;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

     label09:
        return 0;

     label10:
        $r13 := @caughtexception;

     label11:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        $z4 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isHeldByCurrentThread()>();

        if $z4 != 0 goto label12;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

     label12:
        throw $r13;

        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    boolean clearValue(java.lang.Object, int, com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r11;
        com.mycila.inject.internal.guava.base.Equivalence $r7;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3, $r10, r12;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r8, r9;
        int i0, $i1, $i2, i3, $i4;
        boolean $z0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r5;
        java.lang.Object $r2, $r4, r6;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r6 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r9 := @parameter2: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void lock()>();

     label1:
        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i3);

        r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r2;

        r12 = r3;

     label2:
        if r12 == null goto label6;

        $r4 = interfaceinvoke r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i4 = interfaceinvoke r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i4 != i0 goto label5;

        if $r4 == null goto label5;

        $r5 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $r7 = $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $z0 = virtualinvoke $r7.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r6, $r4);

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        if $r8 != r9 goto label4;

        $r10 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry removeFromChain(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r3, r12);

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i3, $r10);

     label3:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 1;

     label4:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 0;

     label5:
        r12 = interfaceinvoke r12.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label2;

     label6:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        return 0;

     label7:
        $r11 := @caughtexception;

     label8:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void postWriteCleanup()>();

        throw $r11;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    boolean removeEntry(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry, int, com.mycila.inject.internal.guava.cache.RemovalCause)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r3, r4, $r9, r10;
        com.mycila.inject.internal.guava.cache.RemovalCause r8;
        java.util.concurrent.atomic.AtomicReferenceArray r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r6;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, i7;
        java.lang.Object $r2, $r5, $r7;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r4 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        i0 := @parameter1: int;

        r8 := @parameter2: com.mycila.inject.internal.guava.cache.RemovalCause;

        r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i1 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i3);

        r3 = (com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry) $r2;

        r10 = r3;

     label1:
        if r10 == null goto label3;

        if r10 != r4 goto label2;

        $i4 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount>;

        $i5 = $i4 + 1;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int modCount> = $i5;

        $r5 = interfaceinvoke r10.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke r10.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r7 = interfaceinvoke $r6.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.cache.RemovalCause)>($r5, i0, $r7, r8);

        $r9 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry removeFromChain(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r3, r10);

        $i6 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count>;

        i7 = $i6 - 1;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i3, $r9);

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: int count> = i7;

        return 1;

     label2:
        r10 = interfaceinvoke r10.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label1;

     label3:
        return 0;
    }

    boolean isCollected(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r3;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r0;
        java.lang.Object $r1;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r0 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        if $r1 != null goto label1;

        return 1;

     label1:
        $r3 = interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $z0 = virtualinvoke r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isCollected(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)>($r3);

        return $z0;
    }

    boolean isCollected(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference r0;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r0 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference;

        $z0 = interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: boolean isComputingReference()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        if $r1 != null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    java.lang.Object getLiveValue(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r4;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference $r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r5, $r6;
        java.lang.Object $r1, $r3;
        boolean $z0, $z1;

        r4 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        r0 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        if $r1 != null goto label1;

        virtualinvoke r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void tryDrainReferenceQueues()>();

        return null;

     label1:
        $r2 = interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        if $r3 != null goto label2;

        virtualinvoke r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void tryDrainReferenceQueues()>();

        return null;

     label2:
        $r5 = r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z0 = virtualinvoke $r5.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean expires()>();

        if $z0 == 0 goto label3;

        $r6 = r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        $z1 = virtualinvoke $r6.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: boolean isExpired(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ReferenceEntry)>(r0);

        if $z1 == 0 goto label3;

        virtualinvoke r4.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void tryExpireEntries()>();

        return null;

     label3:
        return $r3;
    }

    void postReadCleanup()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, $i1;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicInteger readCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $i1 = $i0 & 63;

        if $i1 != 0 goto label1;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void cleanUp()>();

     label1:
        return;
    }

    void preWriteCleanup()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void runLockedCleanup()>();

        return;
    }

    void postWriteCleanup()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void runUnlockedCleanup()>();

        return;
    }

    void cleanUp()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void runLockedCleanup()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void runUnlockedCleanup()>();

        return;
    }

    void runLockedCleanup()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        java.lang.Throwable $r2;
        java.util.concurrent.atomic.AtomicInteger $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean tryLock()>();

        if $z0 == 0 goto label5;

     label1:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void drainReferenceQueues()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void expireEntries()>();

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: java.util.concurrent.atomic.AtomicInteger readCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);

     label2:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: void unlock()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void runUnlockedCleanup()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment r0;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$Segment: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap map>;

        virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap: void processPendingNotifications()>();

     label1:
        return;
    }
}
