class org.bouncycastle.math.ec.IntArray extends java.lang.Object
{
    private int[] m_ints;

    public void <init>(int)
    {
        int i0;
        int[] $r1;
        org.bouncycastle.math.ec.IntArray r0;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[i0];

        r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints> = $r1;

        return;
    }

    public void <init>(int[])
    {
        int[] r1;
        org.bouncycastle.math.ec.IntArray r0;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints> = r1;

        return;
    }

    public void <init>(java.math.BigInteger)
    {
        java.math.BigInteger r1;
        org.bouncycastle.math.ec.IntArray r0;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        r1 := @parameter0: java.math.BigInteger;

        specialinvoke r0.<org.bouncycastle.math.ec.IntArray: void <init>(java.math.BigInteger,int)>(r1, 0);

        return;
    }

    public void <init>(java.math.BigInteger, int)
    {
        byte[] $r3;
        byte $b1, b19;
        int[] $r4, $r5, $r6, $r7, $r8;
        org.bouncycastle.math.ec.IntArray r0;
        java.math.BigInteger r1, $r2;
        boolean $z0, z1, z2, z3;
        int $i0, $i2, i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, $i21, $i23, $i25;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        r1 := @parameter0: java.math.BigInteger;

        i3 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<java.math.BigInteger: int signum()>();

        $i21 = (int) -1;

        if $i0 != $i21 goto label01;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only positive Integers allowed");

        throw $r10;

     label01:
        $r2 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label02;

        $r8 = newarray (int)[1];

        $r8[0] = 0;

        r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints> = $r8;

        return;

     label02:
        $r3 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();

        i9 = lengthof $r3;

        z1 = 0;

        z3 = 0;

        z2 = 0;

        b19 = 0;

        $b1 = $r3[0];

        if $b1 != 0 goto label03;

        $i23 = (int) -1;

        i9 = i9 + $i23;

        z1 = 1;

        z3 = 1;

        z2 = 1;

        b19 = 1;

     label03:
        $i2 = i9 + 3;

        $i8 = $i2 / 4;

        if $i8 >= i3 goto label04;

        $r7 = newarray (int)[i3];

        r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints> = $r7;

        goto label05;

     label04:
        $r4 = newarray (int)[$i8];

        r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints> = $r4;

     label05:
        $i6 = $i8 - 1;

        i10 = $i6;

        $i4 = i9 % 4;

        $i7 = $i4 + z3;

        i11 = 0;

        i12 = b19;

        if z2 >= $i7 goto label09;

     label06:
        if i12 >= $i7 goto label08;

        i13 = i11 << 8;

        i14 = $r3[i12];

        if i14 >= 0 goto label07;

        i14 = i14 + 256;

     label07:
        i11 = i13 | i14;

        i12 = i12 + 1;

        goto label06;

     label08:
        $r6 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        i10 = $i6 - 1;

        $r6[$i6] = i11;

     label09:
        if i10 < 0 goto label13;

        i15 = 0;

        i16 = 0;

     label10:
        if i16 >= 4 goto label12;

        i17 = i15 << 8;

        $i5 = i12;

        i12 = i12 + 1;

        i18 = $r3[$i5];

        if i18 >= 0 goto label11;

        i18 = i18 + 256;

     label11:
        i15 = i17 | i18;

        i16 = i16 + 1;

        goto label10;

     label12:
        $r5 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $r5[i10] = i15;

        $i25 = (int) -1;

        i10 = i10 + $i25;

        goto label09;

     label13:
        return;
    }

    public boolean isZero()
    {
        int[] $r1, $r2;
        org.bouncycastle.math.ec.IntArray r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i0 = lengthof $r1;

        if $i0 == 0 goto label1;

        $r2 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i1 = $r2[0];

        if $i1 != 0 goto label2;

        $i2 = virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: int getUsedLength()>();

        if $i2 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int getUsedLength()
    {
        int[] $r1, $r2, $r3, $r4;
        org.bouncycastle.math.ec.IntArray r0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7, $i9;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        i5 = lengthof $r1;

        if i5 >= 1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i0 = $r2[0];

        if $i0 == 0 goto label4;

     label2:
        $r4 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i7 = (int) -1;

        i5 = i5 + $i7;

        $i3 = $r4[i5];

        if $i3 != 0 goto label3;

        goto label2;

     label3:
        $i4 = i5 + 1;

        return $i4;

     label4:
        $r3 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i9 = (int) -1;

        i5 = i5 + $i9;

        $i1 = $r3[i5];

        if $i1 == 0 goto label5;

        $i2 = i5 + 1;

        return $i2;

     label5:
        if i5 > 0 goto label4;

        return 0;
    }

    public int bitLength()
    {
        int[] $r1;
        org.bouncycastle.math.ec.IntArray r0;
        int $i0, i1, $i2, $i3, $i4, i5, i6;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        $i0 = virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: int getUsedLength()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i1 = $i0 - 1;

        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        i5 = $r1[i1];

        $i2 = i1 << 5;

        i6 = $i2 + 1;

        $i3 = i5 & -65536;

        if $i3 == 0 goto label3;

        $i4 = i5 & -16777216;

        if $i4 == 0 goto label2;

        i6 = i6 + 24;

        i5 = i5 >>> 24;

        goto label4;

     label2:
        i6 = i6 + 16;

        i5 = i5 >>> 16;

        goto label4;

     label3:
        if i5 <= 255 goto label4;

        i6 = i6 + 8;

        i5 = i5 >>> 8;

     label4:
        if i5 == 1 goto label5;

        i6 = i6 + 1;

        i5 = i5 >>> 1;

        goto label4;

     label5:
        return i6;
    }

    private int[] resizedInts(int)
    {
        int[] r0, $r2, $r3;
        org.bouncycastle.math.ec.IntArray r1;
        int i0, i1, $i2;

        r1 := @this: org.bouncycastle.math.ec.IntArray;

        i0 := @parameter0: int;

        r0 = newarray (int)[i0];

        $r2 = r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        i1 = lengthof $r2;

        if i1 >= i0 goto label1;

        $i2 = i1;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        $r3 = r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r0, 0, $i2);

        return r0;
    }

    public java.math.BigInteger toBigInteger()
    {
        byte[] r2, r6;
        byte $b9, $b10, b16;
        int[] $r1, $r4;
        org.bouncycastle.math.ec.IntArray r0;
        java.math.BigInteger $r5, $r7;
        boolean z0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, i14, i15, i17, i18, i19, i20, $i22, $i24, $i26;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        $i0 = virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: int getUsedLength()>();

        if $i0 != 0 goto label01;

        $r5 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ZERO>;

        return $r5;

     label01:
        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i1 = $i0 - 1;

        i2 = $r1[$i1];

        r2 = newarray (byte)[4];

        i14 = 0;

        z0 = 0;

        i15 = 3;

     label02:
        if i15 < 0 goto label05;

        $i11 = 8 * i15;

        $i12 = i2 >>> $i11;

        b16 = (byte) $i12;

        if z0 != 0 goto label03;

        if b16 == 0 goto label04;

     label03:
        z0 = 1;

        $i13 = i14;

        i14 = i14 + 1;

        r2[$i13] = b16;

     label04:
        $i22 = (int) -1;

        i15 = i15 + $i22;

        goto label02;

     label05:
        $i3 = $i0 - 1;

        $i4 = 4 * $i3;

        i17 = $i4 + i14;

        r6 = newarray (byte)[i17];

        i18 = 0;

     label06:
        if i18 >= i14 goto label07;

        $b10 = r2[i18];

        r6[i18] = $b10;

        i18 = i18 + 1;

        goto label06;

     label07:
        i19 = $i0 - 2;

     label08:
        if i19 < 0 goto label11;

        i20 = 3;

     label09:
        if i20 < 0 goto label10;

        $i5 = i14;

        i14 = i14 + 1;

        $r4 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i7 = $r4[i19];

        $i6 = 8 * i20;

        $i8 = $i7 >>> $i6;

        $b9 = (byte) $i8;

        r6[$i5] = $b9;

        $i24 = (int) -1;

        i20 = i20 + $i24;

        goto label09;

     label10:
        $i26 = (int) -1;

        i19 = i19 + $i26;

        goto label08;

     label11:
        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,byte[])>(1, r6);

        return $r7;
    }

    public void shiftLeft()
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        org.bouncycastle.math.ec.IntArray r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        boolean z0, z1, $z2;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        $i0 = virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: int getUsedLength()>();

        i11 = $i0;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i1 = $i0 - 1;

        $i2 = $r1[$i1];

        if $i2 >= 0 goto label2;

        i11 = $i0 + 1;

        $r5 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i8 = lengthof $r5;

        if i11 <= $i8 goto label2;

        $r6 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i9 = lengthof $r6;

        $i10 = $i9 + 1;

        $r7 = specialinvoke r0.<org.bouncycastle.math.ec.IntArray: int[] resizedInts(int)>($i10);

        r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints> = $r7;

     label2:
        z1 = 0;

        i12 = 0;

     label3:
        if i12 >= i11 goto label7;

        $r2 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i3 = $r2[i12];

        if $i3 >= 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        z0 = $z2;

        $r3 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i4 = $r3[i12];

        $i5 = $i4 << 1;

        $r3[i12] = $i5;

        if z1 == 0 goto label6;

        $r4 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i6 = $r4[i12];

        $i7 = $i6 | 1;

        $r4[i12] = $i7;

     label6:
        z1 = z0;

        i12 = i12 + 1;

        goto label3;

     label7:
        return;
    }

    public org.bouncycastle.math.ec.IntArray shiftLeft(int)
    {
        int[] r1, $r2, $r3, $r5, $r6;
        org.bouncycastle.math.ec.IntArray r0, $r4;
        int $i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        java.lang.String $r12;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: int getUsedLength()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        if i1 != 0 goto label2;

        return r0;

     label2:
        if i1 <= 31 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shiftLeft() for max 31 bits , ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bit shift is not possible");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label3:
        $i2 = $i0 + 1;

        r1 = newarray (int)[$i2];

        i3 = 32 - i1;

        $r2 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i4 = $r2[0];

        $i5 = $i4 << i1;

        r1[0] = $i5;

        i15 = 1;

     label4:
        if i15 >= $i0 goto label5;

        $r5 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i9 = $r5[i15];

        $i13 = $i9 << i1;

        $r6 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i10 = i15 - 1;

        $i11 = $r6[$i10];

        $i12 = $i11 >>> i3;

        $i14 = $i13 | $i12;

        r1[i15] = $i14;

        i15 = i15 + 1;

        goto label4;

     label5:
        $r3 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i6 = $i0 - 1;

        $i7 = $r3[$i6];

        $i8 = $i7 >>> i3;

        r1[$i0] = $i8;

        $r4 = new org.bouncycastle.math.ec.IntArray;

        specialinvoke $r4.<org.bouncycastle.math.ec.IntArray: void <init>(int[])>(r1);

        return $r4;
    }

    public void addShifted(org.bouncycastle.math.ec.IntArray, int)
    {
        int[] $r2, $r3, $r4, $r5;
        org.bouncycastle.math.ec.IntArray r0, r1;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8;

        r1 := @this: org.bouncycastle.math.ec.IntArray;

        r0 := @parameter0: org.bouncycastle.math.ec.IntArray;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: int getUsedLength()>();

        i2 = $i0 + i1;

        $r2 = r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i3 = lengthof $r2;

        if i2 <= $i3 goto label1;

        $r5 = specialinvoke r1.<org.bouncycastle.math.ec.IntArray: int[] resizedInts(int)>(i2);

        r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints> = $r5;

     label1:
        i8 = 0;

     label2:
        if i8 >= $i0 goto label3;

        $r3 = r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i4 = i8 + i1;

        $i6 = $r3[$i4];

        $r4 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i5 = $r4[i8];

        $i7 = $i6 ^ $i5;

        $r3[$i4] = $i7;

        i8 = i8 + 1;

        goto label2;

     label3:
        return;
    }

    public int getLength()
    {
        int $i0;
        int[] $r1;
        org.bouncycastle.math.ec.IntArray r0;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public boolean testBit(int)
    {
        int[] $r1;
        org.bouncycastle.math.ec.IntArray r0;
        int i0, i1, i2, i3, $i4, $i5;
        boolean $z0;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        i0 := @parameter0: int;

        i1 = i0 >> 5;

        i2 = i0 & 31;

        i3 = 1 << i2;

        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i4 = $r1[i1];

        $i5 = $i4 & i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void flipBit(int)
    {
        int[] $r1;
        org.bouncycastle.math.ec.IntArray r0;
        int i0, i1, i2, i3, $i4, $i5;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        i0 := @parameter0: int;

        i1 = i0 >> 5;

        i2 = i0 & 31;

        i3 = 1 << i2;

        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i4 = $r1[i1];

        $i5 = $i4 ^ i3;

        $r1[i1] = $i5;

        return;
    }

    public void setBit(int)
    {
        int[] $r1;
        org.bouncycastle.math.ec.IntArray r0;
        int i0, i1, i2, i3, $i4, $i5;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        i0 := @parameter0: int;

        i1 = i0 >> 5;

        i2 = i0 & 31;

        i3 = 1 << i2;

        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i4 = $r1[i1];

        $i5 = $i4 | i3;

        $r1[i1] = $i5;

        return;
    }

    public org.bouncycastle.math.ec.IntArray multiply(org.bouncycastle.math.ec.IntArray, int)
    {
        int[] $r1, $r4, $r6, $r7;
        org.bouncycastle.math.ec.IntArray r0, $r2, r3, $r5;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        r3 := @parameter0: org.bouncycastle.math.ec.IntArray;

        i0 := @parameter1: int;

        $i1 = i0 + 31;

        i2 = $i1 >> 5;

        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i3 = lengthof $r1;

        if $i3 >= i2 goto label1;

        $r7 = specialinvoke r0.<org.bouncycastle.math.ec.IntArray: int[] resizedInts(int)>(i2);

        r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints> = $r7;

     label1:
        $r2 = new org.bouncycastle.math.ec.IntArray;

        $i4 = virtualinvoke r3.<org.bouncycastle.math.ec.IntArray: int getLength()>();

        $i5 = $i4 + 1;

        $r4 = specialinvoke r3.<org.bouncycastle.math.ec.IntArray: int[] resizedInts(int)>($i5);

        specialinvoke $r2.<org.bouncycastle.math.ec.IntArray: void <init>(int[])>($r4);

        $r5 = new org.bouncycastle.math.ec.IntArray;

        $i6 = i0 + i0;

        $i7 = $i6 + 31;

        $i8 = $i7 >> 5;

        specialinvoke $r5.<org.bouncycastle.math.ec.IntArray: void <init>(int)>($i8);

        i11 = 1;

        i12 = 0;

     label2:
        if i12 >= 32 goto label6;

        i13 = 0;

     label3:
        if i13 >= i2 goto label5;

        $r6 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i9 = $r6[i13];

        $i10 = $i9 & i11;

        if $i10 == 0 goto label4;

        virtualinvoke $r5.<org.bouncycastle.math.ec.IntArray: void addShifted(org.bouncycastle.math.ec.IntArray,int)>($r2, i13);

     label4:
        i13 = i13 + 1;

        goto label3;

     label5:
        i11 = i11 << 1;

        virtualinvoke $r2.<org.bouncycastle.math.ec.IntArray: void shiftLeft()>();

        i12 = i12 + 1;

        goto label2;

     label6:
        return $r5;
    }

    public void reduce(int, int[])
    {
        int[] $r1, r2;
        org.bouncycastle.math.ec.IntArray r0;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, i7, i8, $i10, $i12;
        boolean $z0;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        i0 := @parameter0: int;

        r2 := @parameter1: int[];

        $i1 = i0 + i0;

        i7 = $i1 - 2;

     label1:
        if i7 < i0 goto label4;

        $z0 = virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: boolean testBit(int)>(i7);

        if $z0 == 0 goto label3;

        i4 = i7 - i0;

        virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: void flipBit(int)>(i4);

        virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: void flipBit(int)>(i7);

        i8 = lengthof r2;

     label2:
        $i10 = (int) -1;

        i8 = i8 + $i10;

        if i8 < 0 goto label3;

        $i5 = r2[i8];

        $i6 = $i5 + i4;

        virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: void flipBit(int)>($i6);

        goto label2;

     label3:
        $i12 = (int) -1;

        i7 = i7 + $i12;

        goto label1;

     label4:
        $i2 = i0 + 31;

        $i3 = $i2 >> 5;

        $r1 = specialinvoke r0.<org.bouncycastle.math.ec.IntArray: int[] resizedInts(int)>($i3);

        r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints> = $r1;

        return;
    }

    public org.bouncycastle.math.ec.IntArray square(int)
    {
        int[] $r0, $r2, $r4, $r5, $r6, $r7, $r8;
        org.bouncycastle.math.ec.IntArray r1, $r3;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27;

        r1 := @this: org.bouncycastle.math.ec.IntArray;

        i0 := @parameter0: int;

        $r0 = newarray (int)[16];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = 4;

        $r0[3] = 5;

        $r0[4] = 16;

        $r0[5] = 17;

        $r0[6] = 20;

        $r0[7] = 21;

        $r0[8] = 64;

        $r0[9] = 65;

        $r0[10] = 68;

        $r0[11] = 69;

        $r0[12] = 80;

        $r0[13] = 81;

        $r0[14] = 84;

        $r0[15] = 85;

        $i1 = i0 + 31;

        i2 = $i1 >> 5;

        $r2 = r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i3 = lengthof $r2;

        if $i3 >= i2 goto label1;

        $r8 = specialinvoke r1.<org.bouncycastle.math.ec.IntArray: int[] resizedInts(int)>(i2);

        r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints> = $r8;

     label1:
        $r3 = new org.bouncycastle.math.ec.IntArray;

        $i4 = i2 + i2;

        specialinvoke $r3.<org.bouncycastle.math.ec.IntArray: void <init>(int)>($i4);

        i17 = 0;

     label2:
        if i17 >= i2 goto label7;

        i18 = 0;

        i19 = 0;

     label3:
        if i19 >= 4 goto label4;

        i20 = i18 >>> 8;

        $r7 = r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i14 = $r7[i17];

        $i13 = i19 * 4;

        $i15 = $i14 >>> $i13;

        i21 = $i15 & 15;

        $i16 = $r0[i21];

        i22 = $i16 << 24;

        i18 = i20 | i22;

        i19 = i19 + 1;

        goto label3;

     label4:
        $r4 = $r3.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i5 = i17 + i17;

        $r4[$i5] = i18;

        i23 = 0;

        $r5 = r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i6 = $r5[i17];

        i24 = $i6 >>> 16;

        i25 = 0;

     label5:
        if i25 >= 4 goto label6;

        i26 = i23 >>> 8;

        $i9 = i25 * 4;

        $i10 = i24 >>> $i9;

        i27 = $i10 & 15;

        $i11 = $r0[i27];

        i12 = $i11 << 24;

        i23 = i26 | i12;

        i25 = i25 + 1;

        goto label5;

     label6:
        $r6 = $r3.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i7 = i17 + i17;

        $i8 = $i7 + 1;

        $r6[$i8] = i23;

        i17 = i17 + 1;

        goto label2;

     label7:
        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        int[] $r3, $r4;
        org.bouncycastle.math.ec.IntArray r1, r2;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object r0;
        boolean $z0;

        r2 := @this: org.bouncycastle.math.ec.IntArray;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.bouncycastle.math.ec.IntArray;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.bouncycastle.math.ec.IntArray) r0;

        $i0 = virtualinvoke r2.<org.bouncycastle.math.ec.IntArray: int getUsedLength()>();

        $i1 = virtualinvoke r1.<org.bouncycastle.math.ec.IntArray: int getUsedLength()>();

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        i4 = 0;

     label3:
        if i4 >= $i0 goto label5;

        $r3 = r2.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i3 = $r3[i4];

        $r4 = r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i2 = $r4[i4];

        if $i3 == $i2 goto label4;

        return 0;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return 1;
    }

    public int hashCode()
    {
        int[] $r1;
        org.bouncycastle.math.ec.IntArray r0;
        int $i0, $i1, $i2, i3, i4;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        $i0 = virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: int getUsedLength()>();

        i3 = 1;

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        $i2 = i3 * 31;

        $r1 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i1 = $r1[i4];

        i3 = $i2 + $i1;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    public java.lang.Object clone()
    {
        int[] $r2, $r3;
        org.bouncycastle.math.ec.IntArray $r0, r1;

        r1 := @this: org.bouncycastle.math.ec.IntArray;

        $r0 = new org.bouncycastle.math.ec.IntArray;

        $r2 = r1.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $r3 = staticinvoke <org.bouncycastle.util.Arrays: int[] clone(int[])>($r2);

        specialinvoke $r0.<org.bouncycastle.math.ec.IntArray: void <init>(int[])>($r3);

        return $r0;
    }

    public java.lang.String toString()
    {
        int[] $r2, $r5;
        org.bouncycastle.math.ec.IntArray r0;
        java.lang.StringBuffer $r11;
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        java.lang.String $r3, $r4, $r6, r10;
        java.lang.StringBuilder $r8, $r9, $r12;

        r0 := @this: org.bouncycastle.math.ec.IntArray;

        $i0 = virtualinvoke r0.<org.bouncycastle.math.ec.IntArray: int getUsedLength()>();

        if $i0 != 0 goto label1;

        return "0";

     label1:
        $r11 = new java.lang.StringBuffer;

        $r2 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i1 = $i0 - 1;

        $i2 = $r2[$i1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i2);

        specialinvoke $r11.<java.lang.StringBuffer: void <init>(java.lang.String)>($r3);

        i4 = $i0 - 2;

     label2:
        if i4 < 0 goto label5;

        $r5 = r0.<org.bouncycastle.math.ec.IntArray: int[] m_ints>;

        $i3 = $r5[i4];

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i3);

        r10 = $r6;

        i5 = virtualinvoke $r6.<java.lang.String: int length()>();

     label3:
        if i5 >= 8 goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        i5 = i5 + 1;

        goto label3;

     label4:
        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        $i7 = (int) -1;

        i4 = i4 + $i7;

        goto label2;

     label5:
        $r4 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }
}
