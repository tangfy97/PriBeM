public class org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl extends java.lang.Object implements org.waveprotocol.wave.model.wave.data.core.CoreWaveViewData
{
    private final org.waveprotocol.wave.model.id.WaveId id;
    private final java.util.Map wavelets;

    public void <init>(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl r0;
        java.util.HashMap $r2;
        org.waveprotocol.wave.model.id.WaveId r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: org.waveprotocol.wave.model.id.WaveId id> = r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: java.util.Map wavelets> = $r2;

        return;
    }

    public org.waveprotocol.wave.model.id.WaveId getWaveId()
    {
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl r0;
        org.waveprotocol.wave.model.id.WaveId $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: org.waveprotocol.wave.model.id.WaveId id>;

        return $r1;
    }

    public java.lang.Iterable getWavelets()
    {
        java.util.Map $r1;
        java.util.Collection $r2, $r3;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: java.util.Map wavelets>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        java.util.Map $r2;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl $r4;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: java.util.Map wavelets>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl createWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveId $r4;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.IllegalArgumentException $r6;
        java.util.Map $r2, $r5;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl $r3;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl r0;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: java.util.Map wavelets>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate wavelet id: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r3 = new org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        $r4 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: org.waveprotocol.wave.model.id.WaveId id>;

        specialinvoke $r3.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r4, r1);

        $r5 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: java.util.Map wavelets>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return $r3;
    }

    public void removeWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.IllegalArgumentException $r4;
        java.util.Map $r2;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: java.util.Map wavelets>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not present");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        return;
    }

    public volatile org.waveprotocol.wave.model.wave.data.core.CoreWaveletData createWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl $r2;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl createWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.wave.data.core.CoreWaveletData getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl $r2;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveViewDataImpl: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl getWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r2;
    }
}
