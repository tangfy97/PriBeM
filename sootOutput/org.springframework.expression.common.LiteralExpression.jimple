public class org.springframework.expression.common.LiteralExpression extends java.lang.Object implements org.springframework.expression.Expression
{
    private final java.lang.String literalValue;

    public void <init>(java.lang.String)
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.String r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.common.LiteralExpression: java.lang.String literalValue> = r1;

        return;
    }

    public final java.lang.String getExpressionString()
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        $r1 = r0.<org.springframework.expression.common.LiteralExpression: java.lang.String literalValue>;

        return $r1;
    }

    public java.lang.String getValue()
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        $r1 = r0.<org.springframework.expression.common.LiteralExpression: java.lang.String literalValue>;

        return $r1;
    }

    public java.lang.String getValue(org.springframework.expression.EvaluationContext)
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.String $r1;
        org.springframework.expression.EvaluationContext r2;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r2 := @parameter0: org.springframework.expression.EvaluationContext;

        $r1 = r0.<org.springframework.expression.common.LiteralExpression: java.lang.String literalValue>;

        return $r1;
    }

    public java.lang.String getValue(java.lang.Object)
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Object r2;
        java.lang.String $r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.springframework.expression.common.LiteralExpression: java.lang.String literalValue>;

        return $r1;
    }

    public java.lang.Class getValueType(org.springframework.expression.EvaluationContext)
    {
        org.springframework.expression.common.LiteralExpression r0;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        return class "Ljava/lang/String;";
    }

    public org.springframework.core.convert.TypeDescriptor getValueTypeDescriptor(org.springframework.expression.EvaluationContext)
    {
        org.springframework.expression.common.LiteralExpression r1;
        org.springframework.core.convert.TypeDescriptor $r0;
        org.springframework.expression.EvaluationContext r2;

        r1 := @this: org.springframework.expression.common.LiteralExpression;

        r2 := @parameter0: org.springframework.expression.EvaluationContext;

        $r0 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/String;");

        return $r0;
    }

    public org.springframework.core.convert.TypeDescriptor getValueTypeDescriptor()
    {
        org.springframework.expression.common.LiteralExpression r1;
        org.springframework.core.convert.TypeDescriptor $r0;

        r1 := @this: org.springframework.expression.common.LiteralExpression;

        $r0 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/String;");

        return $r0;
    }

    public void setValue(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r1;
        java.lang.Object r4;
        java.lang.String $r2;
        org.springframework.expression.EvaluationException $r0;
        org.springframework.expression.EvaluationContext r3;

        r1 := @this: org.springframework.expression.common.LiteralExpression;

        r3 := @parameter0: org.springframework.expression.EvaluationContext;

        r4 := @parameter1: java.lang.Object;

        $r0 = new org.springframework.expression.EvaluationException;

        $r2 = r1.<org.springframework.expression.common.LiteralExpression: java.lang.String literalValue>;

        specialinvoke $r0.<org.springframework.expression.EvaluationException: void <init>(java.lang.String,java.lang.String)>($r2, "Cannot call setValue() on a LiteralExpression");

        throw $r0;
    }

    public java.lang.Object getValue(org.springframework.expression.EvaluationContext, java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Class r3;
        java.lang.Object $r4;
        java.lang.String $r2;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.expression.common.LiteralExpression: java.lang.String getValue(org.springframework.expression.EvaluationContext)>(r1);

        $r4 = staticinvoke <org.springframework.expression.common.ExpressionUtils: java.lang.Object convert(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Class)>(r1, $r2, r3);

        return $r4;
    }

    public java.lang.Object getValue(java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Class r2;
        java.lang.Object $r3;
        java.lang.String $r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.expression.common.LiteralExpression: java.lang.String getValue()>();

        $r3 = staticinvoke <org.springframework.expression.common.ExpressionUtils: java.lang.Object convert(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Class)>(null, $r1, r2);

        return $r3;
    }

    public boolean isWritable(org.springframework.expression.EvaluationContext)
    {
        org.springframework.expression.common.LiteralExpression r0;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        return 0;
    }

    public java.lang.Class getValueType()
    {
        org.springframework.expression.common.LiteralExpression r0;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        return class "Ljava/lang/String;";
    }

    public java.lang.Object getValue(java.lang.Object, java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Object r1, $r4;
        java.lang.Class r3;
        java.lang.String $r2;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.springframework.expression.common.LiteralExpression: java.lang.String getValue(java.lang.Object)>(r1);

        $r4 = staticinvoke <org.springframework.expression.common.ExpressionUtils: java.lang.Object convert(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Class)>(null, $r2, r3);

        return $r4;
    }

    public java.lang.String getValue(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Object r3;
        java.lang.String $r1;
        org.springframework.expression.EvaluationContext r2;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r2 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.springframework.expression.common.LiteralExpression: java.lang.String literalValue>;

        return $r1;
    }

    public java.lang.Object getValue(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Object r2, $r5;
        java.lang.Class r4;
        java.lang.String $r3;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Class;

        $r3 = virtualinvoke r0.<org.springframework.expression.common.LiteralExpression: java.lang.String getValue(org.springframework.expression.EvaluationContext,java.lang.Object)>(r1, r2);

        $r5 = staticinvoke <org.springframework.expression.common.ExpressionUtils: java.lang.Object convert(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.Class)>(null, $r3, r4);

        return $r5;
    }

    public java.lang.Class getValueType(java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Object r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: java.lang.Object;

        return class "Ljava/lang/String;";
    }

    public java.lang.Class getValueType(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Object r2;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r2 := @parameter1: java.lang.Object;

        return class "Ljava/lang/String;";
    }

    public org.springframework.core.convert.TypeDescriptor getValueTypeDescriptor(java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r1;
        java.lang.Object r2;
        org.springframework.core.convert.TypeDescriptor $r0;

        r1 := @this: org.springframework.expression.common.LiteralExpression;

        r2 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/String;");

        return $r0;
    }

    public org.springframework.core.convert.TypeDescriptor getValueTypeDescriptor(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.core.convert.TypeDescriptor $r0;
        org.springframework.expression.common.LiteralExpression r1;
        java.lang.Object r3;
        org.springframework.expression.EvaluationContext r2;

        r1 := @this: org.springframework.expression.common.LiteralExpression;

        r2 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: java.lang.Object;

        $r0 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/String;");

        return $r0;
    }

    public boolean isWritable(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Object r2;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r2 := @parameter1: java.lang.Object;

        return 0;
    }

    public void setValue(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r1;
        java.lang.Object r4, r5;
        java.lang.String $r2;
        org.springframework.expression.EvaluationException $r0;
        org.springframework.expression.EvaluationContext r3;

        r1 := @this: org.springframework.expression.common.LiteralExpression;

        r3 := @parameter0: org.springframework.expression.EvaluationContext;

        r4 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        $r0 = new org.springframework.expression.EvaluationException;

        $r2 = r1.<org.springframework.expression.common.LiteralExpression: java.lang.String literalValue>;

        specialinvoke $r0.<org.springframework.expression.EvaluationException: void <init>(java.lang.String,java.lang.String)>($r2, "Cannot call setValue() on a LiteralExpression");

        throw $r0;
    }

    public boolean isWritable(java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Object r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public void setValue(java.lang.Object, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r1;
        java.lang.Object r3, r4;
        java.lang.String $r2;
        org.springframework.expression.EvaluationException $r0;

        r1 := @this: org.springframework.expression.common.LiteralExpression;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r0 = new org.springframework.expression.EvaluationException;

        $r2 = r1.<org.springframework.expression.common.LiteralExpression: java.lang.String literalValue>;

        specialinvoke $r0.<org.springframework.expression.EvaluationException: void <init>(java.lang.String,java.lang.String)>($r2, "Cannot call setValue() on a LiteralExpression");

        throw $r0;
    }

    public volatile java.lang.Object getValue(org.springframework.expression.EvaluationContext, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Object r2;
        java.lang.String $r3;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.springframework.expression.common.LiteralExpression: java.lang.String getValue(org.springframework.expression.EvaluationContext,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public volatile java.lang.Object getValue(java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.springframework.expression.common.LiteralExpression: java.lang.String getValue(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.lang.Object getValue(org.springframework.expression.EvaluationContext) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.String $r2;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        $r2 = virtualinvoke r0.<org.springframework.expression.common.LiteralExpression: java.lang.String getValue(org.springframework.expression.EvaluationContext)>(r1);

        return $r2;
    }

    public volatile java.lang.Object getValue() throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.common.LiteralExpression r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.expression.common.LiteralExpression;

        $r1 = virtualinvoke r0.<org.springframework.expression.common.LiteralExpression: java.lang.String getValue()>();

        return $r1;
    }
}
