public final class kodkod.util.ints.HomogenousSequence extends kodkod.util.ints.AbstractSparseSequence
{
    private final kodkod.util.ints.IntSet indices;
    private final java.lang.Object value;
    private final kodkod.util.ints.EntryView view;

    public void <init>(java.lang.Object)
    {
        kodkod.util.ints.IntTreeSet $r2;
        kodkod.util.ints.EntryView $r3;
        kodkod.util.ints.HomogenousSequence r0;
        java.lang.Object r1;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value> = r1;

        $r2 = new kodkod.util.ints.IntTreeSet;

        specialinvoke $r2.<kodkod.util.ints.IntTreeSet: void <init>()>();

        r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices> = $r2;

        $r3 = new kodkod.util.ints.EntryView;

        specialinvoke $r3.<kodkod.util.ints.EntryView: void <init>(int,java.lang.Object)>(-2147483648, r1);

        r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.EntryView view> = $r3;

        return;
    }

    public void <init>(java.lang.Object, kodkod.util.ints.IntSet)
    {
        kodkod.util.ints.IntSet r2;
        kodkod.util.ints.EntryView $r3;
        kodkod.util.ints.HomogenousSequence r0;
        java.lang.Object r1;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kodkod.util.ints.IntSet;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value> = r1;

        r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices> = r2;

        $r3 = new kodkod.util.ints.EntryView;

        specialinvoke $r3.<kodkod.util.ints.EntryView: void <init>(int,java.lang.Object)>(-2147483648, r1);

        r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.EntryView view> = $r3;

        return;
    }

    private void <init>(kodkod.util.ints.HomogenousSequence)
    {
        kodkod.util.ints.IntSet $r5, $r6;
        kodkod.util.ints.HomogenousSequence r0, r1;
        java.lang.CloneNotSupportedException $r7;
        kodkod.util.ints.EntryView $r3;
        java.lang.InternalError $r8;
        java.lang.Object $r2, $r4;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        r1 := @parameter0: kodkod.util.ints.HomogenousSequence;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        $r2 = r1.<kodkod.util.ints.HomogenousSequence: java.lang.Object value>;

        r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value> = $r2;

        $r3 = new kodkod.util.ints.EntryView;

        $r4 = r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value>;

        specialinvoke $r3.<kodkod.util.ints.EntryView: void <init>(int,java.lang.Object)>(-2147483648, $r4);

        r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.EntryView view> = $r3;

     label1:
        $r5 = r1.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $r6 = interfaceinvoke $r5.<kodkod.util.ints.IntSet: kodkod.util.ints.IntSet clone()>();

        r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices> = $r6;

        goto label3;

     label2:
        $r7 := @caughtexception;

        $r8 = new java.lang.InternalError;

        specialinvoke $r8.<java.lang.InternalError: void <init>()>();

        throw $r8;

     label3:
        return;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label2;
    }

    public void <init>(kodkod.util.ints.SparseSequence)
    {
        kodkod.util.ints.HomogenousSequence r0;
        kodkod.util.ints.IndexedEntry $r3, r9;
        kodkod.util.ints.EntryView $r5;
        int $i0;
        boolean $z0, $z1, $z2;
        kodkod.util.ints.IntTreeSet $r2;
        java.util.Iterator $r7;
        kodkod.util.ints.IntSet $r12;
        java.lang.IllegalArgumentException $r13, $r14;
        kodkod.util.ints.SparseSequence r1;
        java.lang.Object $r4, $r6, $r8, $r10, $r11;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        r1 := @parameter0: kodkod.util.ints.SparseSequence;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        $z0 = interfaceinvoke r1.<kodkod.util.ints.SparseSequence: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label1:
        $r2 = new kodkod.util.ints.IntTreeSet;

        specialinvoke $r2.<kodkod.util.ints.IntTreeSet: void <init>()>();

        r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices> = $r2;

        $r3 = interfaceinvoke r1.<kodkod.util.ints.SparseSequence: kodkod.util.ints.IndexedEntry first()>();

        $r4 = interfaceinvoke $r3.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value> = $r4;

        $r5 = new kodkod.util.ints.EntryView;

        $r6 = r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value>;

        specialinvoke $r5.<kodkod.util.ints.EntryView: void <init>(int,java.lang.Object)>(-2147483648, $r6);

        r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.EntryView view> = $r5;

        $r7 = interfaceinvoke r1.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kodkod.util.ints.IndexedEntry) $r8;

        $r10 = r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value>;

        $r11 = interfaceinvoke r9.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $z2 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z2 != 0 goto label3;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r13;

     label3:
        $r12 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $i0 = interfaceinvoke r9.<kodkod.util.ints.IndexedEntry: int index()>();

        interfaceinvoke $r12.<kodkod.util.ints.IntSet: boolean add(int)>($i0);

     label4:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return;
    }

    public kodkod.util.ints.IntSet indices()
    {
        kodkod.util.ints.HomogenousSequence r0;
        kodkod.util.ints.IntSet $r1;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        return $r1;
    }

    public java.util.Iterator iterator(int, int)
    {
        kodkod.util.ints.HomogenousSequence$HomogenousIterator $r0;
        kodkod.util.ints.IntSet $r2;
        kodkod.util.ints.HomogenousSequence r1;
        int i0, i1;
        java.lang.Object $r4;
        kodkod.util.ints.IntIterator $r3;

        r1 := @this: kodkod.util.ints.HomogenousSequence;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new kodkod.util.ints.HomogenousSequence$HomogenousIterator;

        $r2 = r1.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $r3 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator(int,int)>(i0, i1);

        $r4 = r1.<kodkod.util.ints.HomogenousSequence: java.lang.Object value>;

        specialinvoke $r0.<kodkod.util.ints.HomogenousSequence$HomogenousIterator: void <init>(kodkod.util.ints.IntIterator,java.lang.Object)>($r3, $r4);

        return $r0;
    }

    public int size()
    {
        kodkod.util.ints.HomogenousSequence r0;
        int $i0;
        kodkod.util.ints.IntSet $r1;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $i0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: int size()>();

        return $i0;
    }

    public void clear()
    {
        kodkod.util.ints.HomogenousSequence r0;
        kodkod.util.ints.IntSet $r1;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        interfaceinvoke $r1.<kodkod.util.ints.IntSet: void clear()>();

        return;
    }

    public java.lang.Object put(int, java.lang.Object)
    {
        kodkod.util.ints.IntSet $r3;
        kodkod.util.ints.HomogenousSequence r0;
        java.lang.IllegalArgumentException $r4;
        int i0;
        java.lang.Object r1, $r2, $r5;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value>;

        $z0 = staticinvoke <kodkod.util.ints.HomogenousSequence: boolean equal(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $r3 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $z1 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean add(int)>(i0);

        if $z1 == 0 goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r5 = r1;

     label3:
        return $r5;
    }

    public java.lang.Object get(int)
    {
        kodkod.util.ints.IntSet $r1;
        kodkod.util.ints.HomogenousSequence r0;
        int i0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean contains(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value>;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public java.lang.Object remove(int)
    {
        kodkod.util.ints.IntSet $r1;
        kodkod.util.ints.HomogenousSequence r0;
        int i0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean remove(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value>;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public boolean containsIndex(int)
    {
        kodkod.util.ints.IntSet $r1;
        kodkod.util.ints.HomogenousSequence r0;
        int i0;
        boolean $z0;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean contains(int)>(i0);

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        kodkod.util.ints.IntSet $r1;
        kodkod.util.ints.HomogenousSequence r0;
        java.lang.Object r2, $r3;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<kodkod.util.ints.HomogenousSequence: java.lang.Object value>;

        $z1 = staticinvoke <kodkod.util.ints.HomogenousSequence: boolean equal(java.lang.Object,java.lang.Object)>($r3, r2);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public kodkod.util.ints.IndexedEntry first()
    {
        kodkod.util.ints.IntSet $r1, $r2;
        kodkod.util.ints.EntryView $r3;
        kodkod.util.ints.IndexedEntry $r4;
        kodkod.util.ints.HomogenousSequence r0;
        int $i0;
        boolean $z0;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r3 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.EntryView view>;

        $r2 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $i0 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: int min()>();

        $r4 = virtualinvoke $r3.<kodkod.util.ints.EntryView: kodkod.util.ints.IndexedEntry setIndexView(int)>($i0);

     label2:
        return $r4;
    }

    public kodkod.util.ints.IndexedEntry last()
    {
        kodkod.util.ints.IntSet $r1, $r2;
        kodkod.util.ints.EntryView $r3;
        kodkod.util.ints.IndexedEntry $r4;
        kodkod.util.ints.HomogenousSequence r0;
        int $i0;
        boolean $z0;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r3 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.EntryView view>;

        $r2 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $i0 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: int max()>();

        $r4 = virtualinvoke $r3.<kodkod.util.ints.EntryView: kodkod.util.ints.IndexedEntry setIndexView(int)>($i0);

     label2:
        return $r4;
    }

    public kodkod.util.ints.IndexedEntry ceil(int)
    {
        kodkod.util.ints.IntSet $r1, $r2, $r3;
        kodkod.util.ints.HomogenousSequence r0;
        kodkod.util.ints.EntryView $r4;
        kodkod.util.ints.IndexedEntry $r5;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $i1 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: int max()>();

        if i0 <= $i1 goto label2;

     label1:
        return null;

     label2:
        $r4 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.EntryView view>;

        $r3 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $i2 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: int ceil(int)>(i0);

        $r5 = virtualinvoke $r4.<kodkod.util.ints.EntryView: kodkod.util.ints.IndexedEntry setIndexView(int)>($i2);

        return $r5;
    }

    public kodkod.util.ints.IndexedEntry floor(int)
    {
        kodkod.util.ints.IntSet $r1, $r2, $r3;
        kodkod.util.ints.HomogenousSequence r0;
        kodkod.util.ints.EntryView $r4;
        kodkod.util.ints.IndexedEntry $r5;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $i1 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: int min()>();

        if i0 >= $i1 goto label2;

     label1:
        return null;

     label2:
        $r4 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.EntryView view>;

        $r3 = r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.IntSet indices>;

        $i2 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: int floor(int)>(i0);

        $r5 = virtualinvoke $r4.<kodkod.util.ints.EntryView: kodkod.util.ints.IndexedEntry setIndexView(int)>($i2);

        return $r5;
    }

    public kodkod.util.ints.HomogenousSequence clone()
    {
        kodkod.util.ints.HomogenousSequence $r0, r1;

        r1 := @this: kodkod.util.ints.HomogenousSequence;

        $r0 = new kodkod.util.ints.HomogenousSequence;

        specialinvoke $r0.<kodkod.util.ints.HomogenousSequence: void <init>(kodkod.util.ints.HomogenousSequence)>(r1);

        return $r0;
    }

    public volatile kodkod.util.ints.SparseSequence clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.HomogenousSequence r0, $r1;
        kodkod.util.ints.SparseSequence $r2;

        r0 := @this: kodkod.util.ints.HomogenousSequence;

        $r1 = virtualinvoke r0.<kodkod.util.ints.HomogenousSequence: kodkod.util.ints.HomogenousSequence clone()>();

        $r2 = (kodkod.util.ints.SparseSequence) $r1;

        return $r2;
    }
}
