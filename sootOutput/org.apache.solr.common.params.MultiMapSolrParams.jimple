public class org.apache.solr.common.params.MultiMapSolrParams extends org.apache.solr.common.params.SolrParams
{
    protected final java.util.Map map;

    public static void addParam(java.lang.String, java.lang.String, java.util.Map)
    {
        java.lang.String[] r3, $r5, r6, r7;
        java.util.Map r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;
        java.lang.String r1, r4;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r0 := @parameter2: java.util.Map;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.lang.String[]) $r2;

        if r6 != null goto label1;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r4;

        r7 = $r5;

        goto label2;

     label1:
        $i0 = lengthof r6;

        $i1 = $i0 + 1;

        r3 = newarray (java.lang.String)[$i1];

        $i2 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r3, 0, $i2);

        $i3 = lengthof r6;

        r3[$i3] = r4;

        r7 = r3;

     label2:
        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7);

        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.solr.common.params.MultiMapSolrParams r0;
        java.util.Map r1;

        r0 := @this: org.apache.solr.common.params.MultiMapSolrParams;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.solr.common.params.SolrParams: void <init>()>();

        r0.<org.apache.solr.common.params.MultiMapSolrParams: java.util.Map map> = r1;

        return;
    }

    public java.lang.String get(java.lang.String)
    {
        org.apache.solr.common.params.MultiMapSolrParams r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String[] r4;
        java.lang.String r1, $r5;

        r0 := @this: org.apache.solr.common.params.MultiMapSolrParams;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.params.MultiMapSolrParams: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.String[]) $r3;

        if r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = r4[0];

     label2:
        return $r5;
    }

    public java.lang.String[] getParams(java.lang.String)
    {
        org.apache.solr.common.params.MultiMapSolrParams r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String[] $r4;
        java.lang.String r1;

        r0 := @this: org.apache.solr.common.params.MultiMapSolrParams;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.solr.common.params.MultiMapSolrParams: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    public java.util.Iterator getParameterNamesIterator()
    {
        java.util.Iterator $r3;
        org.apache.solr.common.params.MultiMapSolrParams r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: org.apache.solr.common.params.MultiMapSolrParams;

        $r1 = r0.<org.apache.solr.common.params.MultiMapSolrParams: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.util.Map getMap()
    {
        org.apache.solr.common.params.MultiMapSolrParams r0;
        java.util.Map $r1;

        r0 := @this: org.apache.solr.common.params.MultiMapSolrParams;

        $r1 = r0.<org.apache.solr.common.params.MultiMapSolrParams: java.util.Map map>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.String[] r11;
        java.util.Map $r2;
        int i0, i1;
        java.lang.String $r5, r9, r12, $r15;
        boolean $z0, z1;
        java.util.Map$Entry r7;
        java.util.Iterator $r4;
        org.apache.solr.common.params.MultiMapSolrParams r1;
        java.util.Set $r3;
        java.io.IOException $r13;
        java.lang.RuntimeException $r14;
        java.lang.StringBuilder $r0;
        java.lang.Object $r6, $r8, $r10;

        r1 := @this: org.apache.solr.common.params.MultiMapSolrParams;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(128);

     label01:
        z1 = 1;

        $r2 = r1.<org.apache.solr.common.params.MultiMapSolrParams: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (java.lang.String[]) $r10;

        i0 = lengthof r11;

        i1 = 0;

     label03:
        if i1 >= i0 goto label07;

        r12 = r11[i1];

        if z1 != 0 goto label04;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

     label04:
        z1 = 0;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        if r12 != null goto label05;

        $r15 = "";

        goto label06;

     label05:
        $r15 = r12;

     label06:
        staticinvoke <org.apache.solr.common.util.StrUtils: void partialURLEncodeVal(java.lang.Appendable,java.lang.String)>($r0, $r15);

        i1 = i1 + 1;

        goto label03;

     label07:
        goto label02;

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label10:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

        catch java.io.IOException from label01 to label08 with label09;
    }
}
