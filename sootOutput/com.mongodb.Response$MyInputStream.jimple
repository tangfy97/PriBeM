class com.mongodb.Response$MyInputStream extends java.io.InputStream
{
    final java.io.InputStream _in;
    private int _toGo;
    final com.mongodb.Response this$0;

    void <init>(com.mongodb.Response, java.io.InputStream, int)
    {
        com.mongodb.Response$MyInputStream r0;
        int i0;
        com.mongodb.Response r1;
        java.io.InputStream r2;

        r0 := @this: com.mongodb.Response$MyInputStream;

        r1 := @parameter0: com.mongodb.Response;

        r2 := @parameter1: java.io.InputStream;

        i0 := @parameter2: int;

        r0.<com.mongodb.Response$MyInputStream: com.mongodb.Response this$0> = r1;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<com.mongodb.Response$MyInputStream: java.io.InputStream _in> = r2;

        r0.<com.mongodb.Response$MyInputStream: int _toGo> = i0;

        return;
    }

    public int available() throws java.io.IOException
    {
        int $i0;
        com.mongodb.Response$MyInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: com.mongodb.Response$MyInputStream;

        $r1 = r0.<com.mongodb.Response$MyInputStream: java.io.InputStream _in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public int read() throws java.io.IOException
    {
        com.mongodb.Response$MyInputStream r0;
        int $i0, $i1, $i2, $i3, $i5;
        java.io.InputStream $r1;

        r0 := @this: com.mongodb.Response$MyInputStream;

        $i0 = r0.<com.mongodb.Response$MyInputStream: int _toGo>;

        if $i0 > 0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        $r1 = r0.<com.mongodb.Response$MyInputStream: java.io.InputStream _in>;

        $i1 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $i2 = r0.<com.mongodb.Response$MyInputStream: int _toGo>;

        $i3 = $i2 - 1;

        r0.<com.mongodb.Response$MyInputStream: int _toGo> = $i3;

        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        com.mongodb.Response$MyInputStream r0;
        byte[] r1;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i9;
        java.io.InputStream $r2;

        r0 := @this: com.mongodb.Response$MyInputStream;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i0 = r0.<com.mongodb.Response$MyInputStream: int _toGo>;

        if $i0 > 0 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $r2 = r0.<com.mongodb.Response$MyInputStream: java.io.InputStream _in>;

        $i3 = r0.<com.mongodb.Response$MyInputStream: int _toGo>;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i2);

        $i5 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i1, $i4);

        $i6 = r0.<com.mongodb.Response$MyInputStream: int _toGo>;

        $i7 = $i6 - $i5;

        r0.<com.mongodb.Response$MyInputStream: int _toGo> = $i7;

        return $i5;
    }

    public void close()
    {
        com.mongodb.Response$MyInputStream r1;
        java.lang.RuntimeException $r0;

        r1 := @this: com.mongodb.Response$MyInputStream;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("can\'t close thos");

        throw $r0;
    }

    static int access$000(com.mongodb.Response$MyInputStream)
    {
        int $i0;
        com.mongodb.Response$MyInputStream r0;

        r0 := @parameter0: com.mongodb.Response$MyInputStream;

        $i0 = r0.<com.mongodb.Response$MyInputStream: int _toGo>;

        return $i0;
    }
}
