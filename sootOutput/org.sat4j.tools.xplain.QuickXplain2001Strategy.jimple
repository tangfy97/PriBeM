public class org.sat4j.tools.xplain.QuickXplain2001Strategy extends java.lang.Object implements org.sat4j.tools.xplain.MinimizationStrategy
{
    private static final long serialVersionUID;
    private boolean computationCanceled;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.sat4j.tools.xplain.QuickXplain2001Strategy r0;

        r0 := @this: org.sat4j.tools.xplain.QuickXplain2001Strategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void cancelExplanationComputation()
    {
        org.sat4j.tools.xplain.QuickXplain2001Strategy r0;

        r0 := @this: org.sat4j.tools.xplain.QuickXplain2001Strategy;

        r0.<org.sat4j.tools.xplain.QuickXplain2001Strategy: boolean computationCanceled> = 1;

        return;
    }

    public org.sat4j.specs.IVecInt explain(org.sat4j.specs.ISolver, java.util.Map, org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        java.lang.Integer $r8, $r18;
        org.sat4j.tools.xplain.QuickXplain2001Strategy r0;
        java.util.Map r2;
        boolean $z0, $z1, $z2;
        java.util.Set $r6;
        java.lang.StringBuilder $r9, $r12, $r13;
        org.sat4j.specs.IteratorInt $r15;
        org.sat4j.specs.ISolver r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12;
        java.lang.String $r11, $r14;
        java.io.PrintStream $r10, $r16, $r17, $r20;
        org.sat4j.specs.IVecInt r3, $r5;
        org.sat4j.core.VecInt $r1, $r7;
        java.lang.Object $r19;

        r0 := @this: org.sat4j.tools.xplain.QuickXplain2001Strategy;

        r4 := @parameter0: org.sat4j.specs.ISolver;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: org.sat4j.specs.IVecInt;

        r0.<org.sat4j.tools.xplain.QuickXplain2001Strategy: boolean computationCanceled> = 0;

        $r1 = new org.sat4j.core.VecInt;

        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        $i1 = interfaceinvoke r3.<org.sat4j.specs.IVecInt: int size()>();

        $i2 = $i0 + $i1;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>(int)>($i2);

        interfaceinvoke r3.<org.sat4j.specs.IVecInt: void copyTo(org.sat4j.specs.IVecInt)>($r1);

        $r5 = interfaceinvoke r4.<org.sat4j.specs.ISolver: org.sat4j.specs.IVecInt unsatExplanation()>();

        $z0 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z0 == 0 goto label3;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = interfaceinvoke r4.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initial unsat core ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>($r14);

        interfaceinvoke $r5.<org.sat4j.specs.IVecInt: void sort()>();

        $r15 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: org.sat4j.specs.IteratorInt iterator()>();

     label1:
        $z2 = interfaceinvoke $r15.<org.sat4j.specs.IteratorInt: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $i9 = interfaceinvoke $r15.<org.sat4j.specs.IteratorInt: int next()>();

        $i10 = neg $i9;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r19 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        virtualinvoke $r17.<java.io.PrintStream: void print(java.lang.Object)>($r19);

        $r20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r20.<java.io.PrintStream: void print(java.lang.String)>(" ");

        goto label1;

     label2:
        $r16 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r16.<java.io.PrintStream: void println()>();

     label3:
        $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        i11 = 0;

     label4:
        $i12 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int size()>();

        if i11 >= $i12 goto label6;

        $i7 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int get(int)>(i11);

        $i8 = neg $i7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z1 == 0 goto label5;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i8);

     label5:
        i11 = i11 + 1;

        goto label4;

     label6:
        $r7 = new org.sat4j.core.VecInt;

        $i3 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int size()>();

        specialinvoke $r7.<org.sat4j.core.VecInt: void <init>(int)>($i3);

        $i4 = interfaceinvoke r3.<org.sat4j.specs.IVecInt: int size()>();

        $i5 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int size()>();

        $i6 = $i5 - 1;

        specialinvoke r0.<org.sat4j.tools.xplain.QuickXplain2001Strategy: void computeExplanation(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int,int,org.sat4j.specs.IVecInt)>(r4, $r1, $i4, $i6, $r7);

        return $r7;
    }

    private void computeExplanation(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int, int, org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.tools.xplain.QuickXplain2001Strategy r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.sat4j.specs.TimeoutException $r4;
        org.sat4j.specs.ISolver r0;
        java.lang.AssertionError $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, i23;
        org.sat4j.specs.IVecInt r1, r3;

        r2 := @this: org.sat4j.tools.xplain.QuickXplain2001Strategy;

        r0 := @parameter0: org.sat4j.specs.ISolver;

        r1 := @parameter1: org.sat4j.specs.IVecInt;

        i0 := @parameter2: int;

        i12 := @parameter3: int;

        r3 := @parameter4: org.sat4j.specs.IVecInt;

        $z0 = interfaceinvoke r0.<org.sat4j.specs.ISolver: boolean isSatisfiable(org.sat4j.specs.IVecInt)>(r1);

        if $z0 != 0 goto label01;

        return;

     label01:
        i19 = i0;

        $i1 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i0);

        $i2 = neg $i1;

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void set(int,int)>(i0, $i2);

        $z1 = <org.sat4j.tools.xplain.QuickXplain2001Strategy: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $i18 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i0);

        if $i18 < 0 goto label02;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label02:
        $z5 = r2.<org.sat4j.tools.xplain.QuickXplain2001Strategy: boolean computationCanceled>;

        if $z5 != 0 goto label07;

        $z3 = interfaceinvoke r0.<org.sat4j.specs.ISolver: boolean isSatisfiable(org.sat4j.specs.IVecInt)>(r1);

        if $z3 == 0 goto label07;

        if i19 != i12 goto label05;

        i20 = i0;

     label03:
        if i20 > i12 goto label04;

        $i16 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i20);

        $i17 = neg $i16;

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void set(int,int)>(i20, $i17);

        i20 = i20 + 1;

        goto label03;

     label04:
        return;

     label05:
        i19 = i19 + 1;

        $z4 = <org.sat4j.tools.xplain.QuickXplain2001Strategy: boolean $assertionsDisabled>;

        if $z4 != 0 goto label06;

        $i15 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i19);

        if $i15 > 0 goto label06;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label06:
        $i13 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i19);

        $i14 = neg $i13;

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void set(int,int)>(i19, $i14);

        goto label02;

     label07:
        $i3 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i19);

        $i4 = neg $i3;

        interfaceinvoke r3.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i4);

        if i0 != i19 goto label08;

        return;

     label08:
        i21 = i19 - 1;

        $i5 = i21 + i0;

        i6 = $i5 / 2;

        if i6 >= i21 goto label11;

        i22 = i6 + 1;

     label09:
        if i22 >= i19 goto label10;

        $i10 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i22);

        $i11 = neg $i10;

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void set(int,int)>(i22, $i11);

        i22 = i22 + 1;

        goto label09;

     label10:
        $i9 = i6 + 1;

        specialinvoke r2.<org.sat4j.tools.xplain.QuickXplain2001Strategy: void computeExplanation(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int,int,org.sat4j.specs.IVecInt)>(r0, r1, $i9, i21, r3);

     label11:
        if i0 > i6 goto label14;

        i23 = i0;

     label12:
        if i23 > i6 goto label13;

        $i7 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i23);

        $i8 = neg $i7;

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void set(int,int)>(i23, $i8);

        i23 = i23 + 1;

        goto label12;

     label13:
        specialinvoke r2.<org.sat4j.tools.xplain.QuickXplain2001Strategy: void computeExplanation(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int,int,org.sat4j.specs.IVecInt)>(r0, r1, i0, i6, r3);

     label14:
        $z2 = r2.<org.sat4j.tools.xplain.QuickXplain2001Strategy: boolean computationCanceled>;

        if $z2 == 0 goto label15;

        $r4 = new org.sat4j.specs.TimeoutException;

        specialinvoke $r4.<org.sat4j.specs.TimeoutException: void <init>()>();

        throw $r4;

     label15:
        return;
    }

    public java.lang.String toString()
    {
        org.sat4j.tools.xplain.QuickXplain2001Strategy r0;

        r0 := @this: org.sat4j.tools.xplain.QuickXplain2001Strategy;

        return "QuickXplain (IJCAI WS 2001 version) minimization strategy";
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.tools.xplain.QuickXplain2001Strategy: long serialVersionUID> = 1L;

        $r0 = class "Lorg/sat4j/tools/xplain/QuickXplain2001Strategy;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.tools.xplain.QuickXplain2001Strategy: boolean $assertionsDisabled> = $z1;

        return;
    }
}
