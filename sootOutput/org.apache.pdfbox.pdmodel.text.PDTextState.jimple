public class org.apache.pdfbox.pdmodel.text.PDTextState extends java.lang.Object implements java.lang.Cloneable
{
    public static final int RENDERING_MODE_FILL_TEXT;
    public static final int RENDERING_MODE_STROKE_TEXT;
    public static final int RENDERING_MODE_FILL_THEN_STROKE_TEXT;
    public static final int RENDERING_MODE_NEITHER_FILL_NOR_STROKE_TEXT;
    public static final int RENDERING_MODE_FILL_TEXT_AND_ADD_TO_PATH_FOR_CLIPPING;
    public static final int RENDERING_MODE_STROKE_TEXT_AND_ADD_TO_PATH_FOR_CLIPPING;
    public static final int RENDERING_MODE_FILL_THEN_STROKE_TEXT_AND_ADD_TO_PATH_FOR_CLIPPING;
    public static final int RENDERING_MODE_ADD_TEXT_TO_PATH_FOR_CLIPPING;
    private float characterSpacing;
    private float wordSpacing;
    private float horizontalScaling;
    private float leading;
    private org.apache.pdfbox.pdmodel.font.PDFont font;
    private float fontSize;
    private int renderingMode;
    private float rise;
    private boolean knockout;

    public void <init>()
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float characterSpacing> = 0.0F;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float wordSpacing> = 0.0F;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float horizontalScaling> = 100.0F;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float leading> = 0.0F;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: int renderingMode> = 0;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float rise> = 0.0F;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: boolean knockout> = 1;

        return;
    }

    public float getCharacterSpacing()
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float $f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        $f0 = r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float characterSpacing>;

        return $f0;
    }

    public void setCharacterSpacing(float)
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        f0 := @parameter0: float;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float characterSpacing> = f0;

        return;
    }

    public float getWordSpacing()
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float $f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        $f0 = r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float wordSpacing>;

        return $f0;
    }

    public void setWordSpacing(float)
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        f0 := @parameter0: float;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float wordSpacing> = f0;

        return;
    }

    public float getHorizontalScalingPercent()
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float $f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        $f0 = r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float horizontalScaling>;

        return $f0;
    }

    public void setHorizontalScalingPercent(float)
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        f0 := @parameter0: float;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float horizontalScaling> = f0;

        return;
    }

    public float getLeading()
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float $f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        $f0 = r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float leading>;

        return $f0;
    }

    public void setLeading(float)
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        f0 := @parameter0: float;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float leading> = f0;

        return;
    }

    public org.apache.pdfbox.pdmodel.font.PDFont getFont()
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        org.apache.pdfbox.pdmodel.font.PDFont $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        $r1 = r0.<org.apache.pdfbox.pdmodel.text.PDTextState: org.apache.pdfbox.pdmodel.font.PDFont font>;

        return $r1;
    }

    public void setFont(org.apache.pdfbox.pdmodel.font.PDFont)
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        org.apache.pdfbox.pdmodel.font.PDFont r1;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.font.PDFont;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: org.apache.pdfbox.pdmodel.font.PDFont font> = r1;

        return;
    }

    public float getFontSize()
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float $f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        $f0 = r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float fontSize>;

        return $f0;
    }

    public void setFontSize(float)
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        f0 := @parameter0: float;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float fontSize> = f0;

        return;
    }

    public int getRenderingMode()
    {
        int $i0;
        org.apache.pdfbox.pdmodel.text.PDTextState r0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        $i0 = r0.<org.apache.pdfbox.pdmodel.text.PDTextState: int renderingMode>;

        return $i0;
    }

    public void setRenderingMode(int)
    {
        int i0;
        org.apache.pdfbox.pdmodel.text.PDTextState r0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        i0 := @parameter0: int;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: int renderingMode> = i0;

        return;
    }

    public float getRise()
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float $f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        $f0 = r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float rise>;

        return $f0;
    }

    public void setRise(float)
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        float f0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        f0 := @parameter0: float;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: float rise> = f0;

        return;
    }

    public boolean getKnockoutFlag()
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        $z0 = r0.<org.apache.pdfbox.pdmodel.text.PDTextState: boolean knockout>;

        return $z0;
    }

    public void setKnockoutFlag(boolean)
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

        z0 := @parameter0: boolean;

        r0.<org.apache.pdfbox.pdmodel.text.PDTextState: boolean knockout> = z0;

        return;
    }

    public java.lang.Object clone()
    {
        org.apache.pdfbox.pdmodel.text.PDTextState r0;
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r2;

        r0 := @this: org.apache.pdfbox.pdmodel.text.PDTextState;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.pdfbox.pdmodel.text.PDTextState: int RENDERING_MODE_ADD_TEXT_TO_PATH_FOR_CLIPPING> = 7;

        <org.apache.pdfbox.pdmodel.text.PDTextState: int RENDERING_MODE_FILL_THEN_STROKE_TEXT_AND_ADD_TO_PATH_FOR_CLIPPING> = 6;

        <org.apache.pdfbox.pdmodel.text.PDTextState: int RENDERING_MODE_STROKE_TEXT_AND_ADD_TO_PATH_FOR_CLIPPING> = 5;

        <org.apache.pdfbox.pdmodel.text.PDTextState: int RENDERING_MODE_FILL_TEXT_AND_ADD_TO_PATH_FOR_CLIPPING> = 4;

        <org.apache.pdfbox.pdmodel.text.PDTextState: int RENDERING_MODE_NEITHER_FILL_NOR_STROKE_TEXT> = 3;

        <org.apache.pdfbox.pdmodel.text.PDTextState: int RENDERING_MODE_FILL_THEN_STROKE_TEXT> = 2;

        <org.apache.pdfbox.pdmodel.text.PDTextState: int RENDERING_MODE_STROKE_TEXT> = 1;

        <org.apache.pdfbox.pdmodel.text.PDTextState: int RENDERING_MODE_FILL_TEXT> = 0;

        return;
    }
}
