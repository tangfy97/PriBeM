public class org.apache.poi.poifs.crypt.CryptoFunctions extends java.lang.Object
{
    private static final int[] InitialCodeArray;
    private static final byte[] PadArray;
    private static final int[][] EncryptionMatrix;

    public void <init>()
    {
        org.apache.poi.poifs.crypt.CryptoFunctions r0;

        r0 := @this: org.apache.poi.poifs.crypt.CryptoFunctions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] hashPassword(java.lang.String, org.apache.poi.poifs.crypt.HashAlgorithm, byte[], int)
    {
        byte[] r2, $r3;
        int i0;
        java.lang.String r0;
        org.apache.poi.poifs.crypt.HashAlgorithm r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.poi.poifs.crypt.HashAlgorithm;

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        $r3 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] hashPassword(java.lang.String,org.apache.poi.poifs.crypt.HashAlgorithm,byte[],int,boolean)>(r0, r1, r2, i0, 1);

        return $r3;
    }

    public static byte[] hashPassword(java.lang.String, org.apache.poi.poifs.crypt.HashAlgorithm, byte[], int, boolean)
    {
        byte[] r2, $r3, $r4, r5, r6, $r7, $r11, $r12;
        java.security.MessageDigest $r1;
        int i0, $i1, i2;
        java.security.DigestException $r8;
        java.lang.String r10;
        boolean z0;
        org.apache.poi.poifs.crypt.HashAlgorithm r0;
        org.apache.poi.EncryptedDocumentException $r9;

        r10 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.poi.poifs.crypt.HashAlgorithm;

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        if r10 != null goto label01;

        r10 = "VelvetSweatshop";

     label01:
        $r1 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>(r0);

        virtualinvoke $r1.<java.security.MessageDigest: void update(byte[])>(r2);

        $r3 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getUtf16LeString(java.lang.String)>(r10);

        $r4 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

        $r7 = newarray (byte)[4];

        if z0 == 0 goto label02;

        $r11 = $r7;

        goto label03;

     label02:
        $r11 = $r4;

     label03:
        r5 = $r11;

        if z0 == 0 goto label04;

        $r12 = $r4;

        goto label05;

     label04:
        $r12 = $r7;

     label05:
        r6 = $r12;

     label06:
        i2 = 0;

     label07:
        if i2 >= i0 goto label08;

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>($r7, 0, i2);

        virtualinvoke $r1.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r1.<java.security.MessageDigest: void update(byte[])>(r5);

        virtualinvoke $r1.<java.security.MessageDigest: void update(byte[])>(r6);

        $i1 = lengthof $r4;

        virtualinvoke $r1.<java.security.MessageDigest: int digest(byte[],int,int)>($r4, 0, $i1);

        i2 = i2 + 1;

        goto label07;

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        $r9 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r9.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>("error in password hashing");

        throw $r9;

     label10:
        return $r4;

        catch java.security.DigestException from label06 to label08 with label09;
    }

    public static byte[] generateIv(org.apache.poi.poifs.crypt.HashAlgorithm, byte[], byte[], int)
    {
        byte[] r0, r1, $r2, r5;
        java.security.MessageDigest $r4;
        int i0;
        org.apache.poi.poifs.crypt.HashAlgorithm r3;

        r3 := @parameter0: org.apache.poi.poifs.crypt.HashAlgorithm;

        r0 := @parameter1: byte[];

        r1 := @parameter2: byte[];

        i0 := @parameter3: int;

        r5 = r0;

        if r1 == null goto label1;

        $r4 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>(r3);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>(r0);

        r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>(r1);

     label1:
        $r2 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock36(byte[],int)>(r5, i0);

        return $r2;
    }

    public static byte[] generateKey(byte[], org.apache.poi.poifs.crypt.HashAlgorithm, byte[], int)
    {
        byte[] r2, r3, $r4, $r5;
        java.security.MessageDigest $r1;
        int i0;
        org.apache.poi.poifs.crypt.HashAlgorithm r0;

        r2 := @parameter0: byte[];

        r0 := @parameter1: org.apache.poi.poifs.crypt.HashAlgorithm;

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        $r1 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)>(r0);

        virtualinvoke $r1.<java.security.MessageDigest: void update(byte[])>(r2);

        $r4 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>(r3);

        $r5 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlock36(byte[],int)>($r4, i0);

        return $r5;
    }

    public static javax.crypto.Cipher getCipher(javax.crypto.SecretKey, org.apache.poi.poifs.crypt.CipherAlgorithm, org.apache.poi.poifs.crypt.ChainingMode, byte[], int)
    {
        byte[] r3;
        org.apache.poi.poifs.crypt.ChainingMode r2;
        int i0;
        javax.crypto.SecretKey r0;
        org.apache.poi.poifs.crypt.CipherAlgorithm r1;
        javax.crypto.Cipher $r4;

        r0 := @parameter0: javax.crypto.SecretKey;

        r1 := @parameter1: org.apache.poi.poifs.crypt.CipherAlgorithm;

        r2 := @parameter2: org.apache.poi.poifs.crypt.ChainingMode;

        r3 := @parameter3: byte[];

        i0 := @parameter4: int;

        $r4 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int,java.lang.String)>(r0, r1, r2, r3, i0, null);

        return $r4;
    }

    public static javax.crypto.Cipher getCipher(javax.crypto.SecretKey, org.apache.poi.poifs.crypt.CipherAlgorithm, org.apache.poi.poifs.crypt.ChainingMode, byte[], int, java.lang.String)
    {
        byte[] $r1, r15, $r19;
        org.apache.poi.poifs.crypt.ChainingMode r9;
        java.security.GeneralSecurityException $r31;
        java.security.spec.AlgorithmParameterSpec r35;
        boolean $z0;
        java.lang.StringBuilder $r5, $r7, $r8, $r11, $r12, $r13, $r20, $r22, $r23, $r25, $r26, $r27;
        javax.crypto.SecretKey r0;
        javax.crypto.Cipher r34;
        javax.crypto.spec.IvParameterSpec $r17;
        int i0, $i1, $i2, i3, $i4, $i5;
        java.lang.String $r3, $r6, $r10, $r14, $r21, $r24, $r28, $r29, r33;
        javax.crypto.spec.RC2ParameterSpec $r18;
        org.apache.poi.EncryptedDocumentException $r30, $r32;
        org.apache.poi.poifs.crypt.CipherAlgorithm r2, $r4, $r16;

        r0 := @parameter0: javax.crypto.SecretKey;

        r2 := @parameter1: org.apache.poi.poifs.crypt.CipherAlgorithm;

        r9 := @parameter2: org.apache.poi.poifs.crypt.ChainingMode;

        r15 := @parameter3: byte[];

        i3 := @parameter4: int;

        r33 := @parameter5: java.lang.String;

        $r1 = interfaceinvoke r0.<javax.crypto.SecretKey: byte[] getEncoded()>();

        i0 = lengthof $r1;

        if r33 != null goto label01;

        r33 = "NoPadding";

     label01:
        $r3 = r2.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String jceId>;

        $i1 = staticinvoke <javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)>($r3);

        $i2 = i0 * 8;

        if $i1 >= $i2 goto label02;

        $r30 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r30.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>("Export Restrictions in place - please install JCE Unlimited Strength Jurisdiction Policy files");

        throw $r30;

     label02:
        $r4 = <org.apache.poi.poifs.crypt.CipherAlgorithm: org.apache.poi.poifs.crypt.CipherAlgorithm rc4>;

        if r2 != $r4 goto label03;

        $r29 = r2.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String jceId>;

        r34 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r29);

        goto label05;

     label03:
        $z0 = r2.<org.apache.poi.poifs.crypt.CipherAlgorithm: boolean needsBouncyCastle>;

        if $z0 == 0 goto label04;

        staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: void registerBouncyCastle()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = r2.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String jceId>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r24 = r9.<org.apache.poi.poifs.crypt.ChainingMode: java.lang.String jceId>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        r34 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r28, "BC");

        goto label05;

     label04:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r2.<org.apache.poi.poifs.crypt.CipherAlgorithm: java.lang.String jceId>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r10 = r9.<org.apache.poi.poifs.crypt.ChainingMode: java.lang.String jceId>;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r34 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r14);

     label05:
        if r15 != null goto label06;

        virtualinvoke r34.<javax.crypto.Cipher: void init(int,java.security.Key)>(i3, r0);

        goto label09;

     label06:
        $r16 = <org.apache.poi.poifs.crypt.CipherAlgorithm: org.apache.poi.poifs.crypt.CipherAlgorithm rc2>;

        if r2 != $r16 goto label07;

        $r18 = new javax.crypto.spec.RC2ParameterSpec;

        $r19 = interfaceinvoke r0.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $i4 = lengthof $r19;

        $i5 = $i4 * 8;

        specialinvoke $r18.<javax.crypto.spec.RC2ParameterSpec: void <init>(int,byte[])>($i5, r15);

        r35 = $r18;

        goto label08;

     label07:
        $r17 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r17.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r15);

        r35 = $r17;

     label08:
        virtualinvoke r34.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(i3, r0, r35);

     label09:
        return r34;

     label10:
        $r31 := @caughtexception;

        $r32 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r32.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.Throwable)>($r31);

        throw $r32;

        catch java.security.GeneralSecurityException from label01 to label09 with label10;
    }

    public static byte[] getBlock36(byte[], int)
    {
        int i0;
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlockX(byte[],int,byte)>(r0, i0, 54);

        return $r1;
    }

    public static byte[] getBlock0(byte[], int)
    {
        int i0;
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] getBlockX(byte[],int,byte)>(r0, i0, 0);

        return $r1;
    }

    private static byte[] getBlockX(byte[], int, byte)
    {
        byte[] r0, r1;
        byte b2;
        int i0, $i1, $i3, $i4, $i5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        b2 := @parameter2: byte;

        $i1 = lengthof r0;

        if $i1 != i0 goto label1;

        return r0;

     label1:
        r1 = newarray (byte)[i0];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r1, b2);

        $i4 = lengthof r1;

        $i3 = lengthof r0;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i5);

        return r1;
    }

    public static byte[] getUtf16LeString(java.lang.String)
    {
        byte[] $r2;
        java.lang.String r0;
        java.nio.charset.Charset $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-16LE");

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        return $r2;
    }

    public static java.security.MessageDigest getMessageDigest(org.apache.poi.poifs.crypt.HashAlgorithm)
    {
        java.security.MessageDigest $r2, $r4;
        org.apache.poi.poifs.crypt.HashAlgorithm r0;
        java.security.GeneralSecurityException $r5;
        org.apache.poi.EncryptedDocumentException $r6;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @parameter0: org.apache.poi.poifs.crypt.HashAlgorithm;

     label1:
        $z0 = r0.<org.apache.poi.poifs.crypt.HashAlgorithm: boolean needsBouncyCastle>;

        if $z0 == 0 goto label3;

        staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: void registerBouncyCastle()>();

        $r3 = r0.<org.apache.poi.poifs.crypt.HashAlgorithm: java.lang.String jceId>;

        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.lang.String)>($r3, "BC");

     label2:
        return $r4;

     label3:
        $r1 = r0.<org.apache.poi.poifs.crypt.HashAlgorithm: java.lang.String jceId>;

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1);

     label4:
        return $r2;

     label5:
        $r5 := @caughtexception;

        $r6 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r6.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String,java.lang.Throwable)>("hash algo not supported", $r5);

        throw $r6;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
    }

    public static javax.crypto.Mac getMac(org.apache.poi.poifs.crypt.HashAlgorithm)
    {
        javax.crypto.Mac $r2, $r4;
        org.apache.poi.poifs.crypt.HashAlgorithm r0;
        java.security.GeneralSecurityException $r5;
        org.apache.poi.EncryptedDocumentException $r6;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @parameter0: org.apache.poi.poifs.crypt.HashAlgorithm;

     label1:
        $z0 = r0.<org.apache.poi.poifs.crypt.HashAlgorithm: boolean needsBouncyCastle>;

        if $z0 == 0 goto label3;

        staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: void registerBouncyCastle()>();

        $r3 = r0.<org.apache.poi.poifs.crypt.HashAlgorithm: java.lang.String jceHmacId>;

        $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>($r3, "BC");

     label2:
        return $r4;

     label3:
        $r1 = r0.<org.apache.poi.poifs.crypt.HashAlgorithm: java.lang.String jceHmacId>;

        $r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r1);

     label4:
        return $r2;

     label5:
        $r5 := @caughtexception;

        $r6 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r6.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String,java.lang.Throwable)>("hmac algo not supported", $r5);

        throw $r6;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
    }

    private static void registerBouncyCastle()
    {
        org.apache.poi.EncryptedDocumentException $r5;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.Exception $r4;
        java.security.Provider $r0, $r3;

        $r0 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>("BC");

        if $r0 == null goto label1;

        return;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.bouncycastle.jce.provider.BouncyCastleProvider");

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r3 = (java.security.Provider) $r2;

        staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r5.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>("Only the BouncyCastle provider supports your encryption settings - please add it to the classpath.");

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static int createXorVerifier2(java.lang.String)
    {
        byte[] r0, r3;
        int[][] $r5;
        byte $b22, $b27, b36, b37, $b38;
        int[] $r4, $r6;
        boolean $z0;
        short $s16, $s17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i28, $i29, $i33, $i34, i35, i39, i40, i41, i42, i43, i44, i45, $i46, $i47, $i48, $i50, $i52;
        java.lang.String $r1, $r2, r7;
        char $c30, $c31, $c32;

        r7 := @parameter0: java.lang.String;

        r0 = newarray (byte)[4];

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z0 != 0 goto label12;

        $i1 = virtualinvoke r7.<java.lang.String: int length()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 15);

        $r2 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        r3 = newarray (byte)[$i3];

        i35 = 0;

     label01:
        $i4 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i35 >= $i4 goto label04;

        $c30 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i35);

        $c31 = $c30 & 255;

        b36 = (byte) $c31;

        $c32 = $c30 & 65280;

        $i46 = (int) $c32;

        $i33 = $i46 >> 8;

        b37 = (byte) $i33;

        $i34 = i35;

        if b36 == 0 goto label02;

        $b38 = b36;

        goto label03;

     label02:
        $b38 = b37;

     label03:
        r3[$i34] = $b38;

        i35 = i35 + 1;

        goto label01;

     label04:
        $r4 = <org.apache.poi.poifs.crypt.CryptoFunctions: int[] InitialCodeArray>;

        $i5 = lengthof r3;

        $i6 = $i5 - 1;

        i39 = $r4[$i6];

        i40 = 0;

     label05:
        $i7 = lengthof r3;

        if i40 >= $i7 goto label09;

        $i24 = lengthof r3;

        $i25 = 15 - $i24;

        i41 = $i25 + i40;

        i42 = 0;

     label06:
        if i42 >= 7 goto label08;

        $b27 = r3[i40];

        $i26 = 1 << i42;

        $i47 = (int) $b27;

        $i28 = $i47 & $i26;

        if $i28 == 0 goto label07;

        $r5 = <org.apache.poi.poifs.crypt.CryptoFunctions: int[][] EncryptionMatrix>;

        $r6 = $r5[i41];

        $i29 = $r6[i42];

        i39 = i39 ^ $i29;

     label07:
        i42 = i42 + 1;

        goto label06;

     label08:
        i40 = i40 + 1;

        goto label05;

     label09:
        i43 = 0;

        $i8 = lengthof r3;

        i44 = $i8 - 1;

     label10:
        if i44 < 0 goto label11;

        $i18 = i43 >> 14;

        $i21 = $i18 & 1;

        $i19 = i43 << 1;

        $i20 = $i19 & 32767;

        $i23 = $i21 | $i20;

        $b22 = r3[i44];

        $i48 = (int) $b22;

        i43 = $i23 ^ $i48;

        $i50 = (int) -1;

        i44 = i44 + $i50;

        goto label10;

     label11:
        $i9 = i43 >> 14;

        $i12 = $i9 & 1;

        $i10 = i43 << 1;

        $i11 = $i10 & 32767;

        $i14 = $i12 | $i11;

        $i13 = lengthof r3;

        $i15 = $i14 ^ $i13;

        $i52 = (int) 52811;

        i45 = $i15 ^ $i52;

        $s16 = (short) i45;

        staticinvoke <org.apache.poi.util.LittleEndian: void putShort(byte[],int,short)>(r0, 0, $s16);

        $s17 = (short) i39;

        staticinvoke <org.apache.poi.util.LittleEndian: void putShort(byte[],int,short)>(r0, 2, $s17);

     label12:
        $i0 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[])>(r0);

        return $i0;
    }

    public static java.lang.String xorHashPassword(java.lang.String)
    {
        java.lang.Object[] $r1;
        int $i0;
        java.lang.String r0, $r3;
        java.lang.Integer $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: int createXorVerifier2(java.lang.String)>(r0);

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1$08X", $r1);

        return $r3;
    }

    public static java.lang.String xorHashPasswordReversed(java.lang.String)
    {
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r0, $r6;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: int createXorVerifier2(java.lang.String)>(r0);

        $r1 = newarray (java.lang.Object)[4];

        $i1 = $i0 >>> 0;

        $i2 = $i1 & 255;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[0] = $r2;

        $i3 = $i0 >>> 8;

        $i4 = $i3 & 255;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r1[1] = $r3;

        $i5 = $i0 >>> 16;

        $i6 = $i5 & 255;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r1[2] = $r4;

        $i7 = $i0 >>> 24;

        $i8 = $i7 & 255;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r1[3] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%1$02X%2$02X%3$02X%4$02X", $r1);

        return $r6;
    }

    public static int createXorVerifier1(java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: int createXorVerifier2(java.lang.String)>(r0);

        $i3 = (int) 65535;

        $i1 = $i0 & $i3;

        return $i1;
    }

    public static int createXorKey1(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: int createXorVerifier2(java.lang.String)>(r0);

        $i1 = $i0 >>> 16;

        return $i1;
    }

    public static byte[] createXorArray1(java.lang.String)
    {
        byte[] $r1, $r2, $r3, $r4, $r5;
        java.nio.charset.Charset $r0;
        byte $b9, $b12, $b14, $b15, $b16, $b17, $b18, $b19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i13, i20, $i21;
        java.lang.String r6;

        r6 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 <= 15 goto label1;

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, 15);

     label1:
        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ASCII");

        $r1 = virtualinvoke r6.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r0);

        $r5 = newarray (byte)[16];

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r5, 0, $i1);

        $r3 = <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] PadArray>;

        $i6 = lengthof $r1;

        $r2 = <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] PadArray>;

        $i3 = lengthof $r2;

        $i2 = lengthof $r1;

        $i4 = $i3 - $i2;

        $i5 = $i4 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r5, $i6, $i5);

        $i7 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: int createXorKey1(java.lang.String)>(r6);

        $r4 = newarray (byte)[2];

        $i8 = $i7 & 255;

        $b9 = (byte) $i8;

        $r4[0] = $b9;

        $i10 = $i7 >>> 8;

        $i11 = $i10 & 255;

        $b12 = (byte) $i11;

        $r4[1] = $b12;

        i20 = 0;

     label2:
        $i21 = lengthof $r5;

        if i20 >= $i21 goto label3;

        $b15 = $r5[i20];

        $i13 = i20 & 1;

        $b14 = $r4[$i13];

        $b16 = $b15 ^ $b14;

        $b17 = (byte) $b16;

        $r5[i20] = $b17;

        $b18 = $r5[i20];

        $b19 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte rotateLeft(byte,int)>($b18, 2);

        $r5[i20] = $b19;

        i20 = i20 + 1;

        goto label2;

     label3:
        return $r5;
    }

    private static byte rotateLeft(byte, int)
    {
        short $s2, $s4, $s9, $s11;
        byte b0, $b8;
        int i1, $i3, $i5, $i6, $i7, $i10, $i12;

        b0 := @parameter0: byte;

        i1 := @parameter1: int;

        $s9 = (short) b0;

        $s2 = $s9 & 255;

        $i10 = (int) $s2;

        $i6 = $i10 << i1;

        $s11 = (short) b0;

        $s4 = $s11 & 255;

        $i3 = 8 - i1;

        $i12 = (int) $s4;

        $i5 = $i12 >>> $i3;

        $i7 = $i6 | $i5;

        $b8 = (byte) $i7;

        return $b8;
    }

    static void <clinit>()
    {
        byte[] $r1;
        int[][] $r2;
        int[] $r0, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        int $i1, $i3, $i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i25, $i27, $i29, $i31, $i33, $i35, $i37, $i39, $i41, $i43, $i45, $i47, $i49, $i51, $i53, $i55, $i57, $i59, $i61, $i63, $i65, $i67, $i69, $i71, $i73, $i75, $i77, $i79, $i81, $i83, $i85, $i87, $i89, $i91, $i93;

        $r0 = newarray (int)[15];

        $i1 = (int) 57840;

        $r0[0] = $i1;

        $r0[1] = 7439;

        $i3 = (int) 52380;

        $r0[2] = $i3;

        $i5 = (int) 33984;

        $r0[3] = $i5;

        $r0[4] = 4364;

        $r0[5] = 3600;

        $i7 = (int) 61902;

        $r0[6] = $i7;

        $r0[7] = 12606;

        $r0[8] = 6258;

        $i9 = (int) 57657;

        $r0[9] = $i9;

        $i11 = (int) 54287;

        $r0[10] = $i11;

        $i13 = (int) 34041;

        $r0[11] = $i13;

        $r0[12] = 10252;

        $i15 = (int) 43370;

        $r0[13] = $i15;

        $r0[14] = 20163;

        <org.apache.poi.poifs.crypt.CryptoFunctions: int[] InitialCodeArray> = $r0;

        $r1 = newarray (byte)[15];

        $r1[0] = -69;

        $r1[1] = -1;

        $r1[2] = -1;

        $r1[3] = -70;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -71;

        $r1[7] = -128;

        $r1[8] = 0;

        $r1[9] = -66;

        $r1[10] = 15;

        $r1[11] = 0;

        $r1[12] = -65;

        $r1[13] = 15;

        $r1[14] = 0;

        <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] PadArray> = $r1;

        $r2 = newarray (int[])[15];

        $r3 = newarray (int)[7];

        $i17 = (int) 44796;

        $r3[0] = $i17;

        $r3[1] = 19929;

        $i19 = (int) 39858;

        $r3[2] = $i19;

        $r3[3] = 10053;

        $r3[4] = 20106;

        $i21 = (int) 40212;

        $r3[5] = $i21;

        $r3[6] = 10761;

        $r2[0] = $r3;

        $r4 = newarray (int)[7];

        $r4[0] = 31585;

        $i23 = (int) 63170;

        $r4[1] = $i23;

        $i25 = (int) 64933;

        $r4[2] = $i25;

        $i27 = (int) 60267;

        $r4[3] = $i27;

        $i29 = (int) 50935;

        $r4[4] = $i29;

        $i31 = (int) 40399;

        $r4[5] = $i31;

        $r4[6] = 11199;

        $r2[1] = $r4;

        $r5 = newarray (int)[7];

        $r5[0] = 17763;

        $i33 = (int) 35526;

        $r5[1] = $i33;

        $r5[2] = 1453;

        $r5[3] = 2906;

        $r5[4] = 5812;

        $r5[5] = 11624;

        $r5[6] = 23248;

        $r2[2] = $r5;

        $r6 = newarray (int)[7];

        $r6[0] = 885;

        $r6[1] = 1770;

        $r6[2] = 3540;

        $r6[3] = 7080;

        $r6[4] = 14160;

        $r6[5] = 28320;

        $i35 = (int) 56640;

        $r6[6] = $i35;

        $r2[3] = $r6;

        $r7 = newarray (int)[7];

        $i37 = (int) 55369;

        $r7[0] = $i37;

        $i39 = (int) 41139;

        $r7[1] = $i39;

        $r7[2] = 20807;

        $i41 = (int) 41614;

        $r7[3] = $i41;

        $r7[4] = 21821;

        $i43 = (int) 43642;

        $r7[5] = $i43;

        $r7[6] = 17621;

        $r2[4] = $r7;

        $r8 = newarray (int)[7];

        $r8[0] = 28485;

        $i45 = (int) 56970;

        $r8[1] = $i45;

        $i47 = (int) 44341;

        $r8[2] = $i47;

        $r8[3] = 19019;

        $i49 = (int) 38038;

        $r8[4] = $i49;

        $r8[5] = 14605;

        $r8[6] = 29210;

        $r2[5] = $r8;

        $r9 = newarray (int)[7];

        $i51 = (int) 60195;

        $r9[0] = $i51;

        $i53 = (int) 50791;

        $r9[1] = $i53;

        $i55 = (int) 40175;

        $r9[2] = $i55;

        $r9[3] = 10751;

        $r9[4] = 21502;

        $i57 = (int) 43004;

        $r9[5] = $i57;

        $r9[6] = 24537;

        $r2[6] = $r9;

        $r10 = newarray (int)[7];

        $r10[0] = 18387;

        $i59 = (int) 36774;

        $r10[1] = $i59;

        $r10[2] = 3949;

        $r10[3] = 7898;

        $r10[4] = 15796;

        $r10[5] = 31592;

        $i61 = (int) 63184;

        $r10[6] = $i61;

        $r2[7] = $r10;

        $r11 = newarray (int)[7];

        $i63 = (int) 47201;

        $r11[0] = $i63;

        $r11[1] = 24803;

        $i65 = (int) 49606;

        $r11[2] = $i65;

        $i67 = (int) 37805;

        $r11[3] = $i67;

        $r11[4] = 14203;

        $r11[5] = 28406;

        $i69 = (int) 56812;

        $r11[6] = $i69;

        $r2[8] = $r11;

        $r12 = newarray (int)[7];

        $r12[0] = 17824;

        $i71 = (int) 35648;

        $r12[1] = $i71;

        $r12[2] = 1697;

        $r12[3] = 3394;

        $r12[4] = 6788;

        $r12[5] = 13576;

        $r12[6] = 27152;

        $r2[9] = $r12;

        $r13 = newarray (int)[7];

        $i73 = (int) 43601;

        $r13[0] = $i73;

        $r13[1] = 17539;

        $i75 = (int) 35078;

        $r13[2] = $i75;

        $r13[3] = 557;

        $r13[4] = 1114;

        $r13[5] = 2228;

        $r13[6] = 4456;

        $r2[10] = $r13;

        $r14 = newarray (int)[7];

        $r14[0] = 30388;

        $i77 = (int) 60776;

        $r14[1] = $i77;

        $i79 = (int) 51953;

        $r14[2] = $i79;

        $i81 = (int) 34243;

        $r14[3] = $i81;

        $r14[4] = 7079;

        $r14[5] = 14158;

        $r14[6] = 28316;

        $r2[11] = $r14;

        $r15 = newarray (int)[7];

        $r15[0] = 14128;

        $r15[1] = 28256;

        $i83 = (int) 56512;

        $r15[2] = $i83;

        $i85 = (int) 43425;

        $r15[3] = $i85;

        $r15[4] = 17251;

        $i87 = (int) 34502;

        $r15[5] = $i87;

        $r15[6] = 7597;

        $r2[12] = $r15;

        $r16 = newarray (int)[7];

        $r16[0] = 13105;

        $r16[1] = 26210;

        $i89 = (int) 52420;

        $r16[2] = $i89;

        $i91 = (int) 35241;

        $r16[3] = $i91;

        $r16[4] = 883;

        $r16[5] = 1766;

        $r16[6] = 3532;

        $r2[13] = $r16;

        $r17 = newarray (int)[7];

        $r17[0] = 4129;

        $r17[1] = 8258;

        $r17[2] = 16516;

        $i93 = (int) 33032;

        $r17[3] = $i93;

        $r17[4] = 4657;

        $r17[5] = 9314;

        $r17[6] = 18628;

        $r2[14] = $r17;

        <org.apache.poi.poifs.crypt.CryptoFunctions: int[][] EncryptionMatrix> = $r2;

        return;
    }
}
