class org.waveprotocol.wave.client.editor.EditorImpl$14 extends java.lang.Object implements org.waveprotocol.wave.client.editor.extract.DomMutationReverter$RevertListener
{
    final org.waveprotocol.wave.client.scheduler.Scheduler$Task val$revertTask;
    final org.waveprotocol.wave.client.editor.EditorImpl this$0;

    void <init>(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.client.scheduler.Scheduler$Task)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$14 r0;
        org.waveprotocol.wave.client.editor.EditorImpl r1;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$14;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r2 := @parameter1: org.waveprotocol.wave.client.scheduler.Scheduler$Task;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$14: org.waveprotocol.wave.client.editor.EditorImpl this$0> = r1;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$14: org.waveprotocol.wave.client.scheduler.Scheduler$Task val$revertTask> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void scheduleRevert()
    {
        org.waveprotocol.wave.common.logging.Logger $r3;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        org.waveprotocol.wave.client.editor.EditorImpl$14 r0;
        org.waveprotocol.wave.common.logging.LoggerBundle $r2;
        org.waveprotocol.wave.client.scheduler.Scheduler$Task $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$14;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$14: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: boolean access$2400(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        if $z0 != 0 goto label1;

        $r2 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("WARNING: Dom removal outside of known typing context");

        $r4 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$14: org.waveprotocol.wave.client.scheduler.Scheduler$Task val$revertTask>;

        staticinvoke <org.waveprotocol.wave.client.scheduler.ScheduleCommand: void addCommand(org.waveprotocol.wave.client.scheduler.Scheduler$Task)>($r4);

     label1:
        return;
    }
}
