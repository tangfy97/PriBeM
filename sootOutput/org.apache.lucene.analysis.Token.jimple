public class org.apache.lucene.analysis.Token extends org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl implements org.apache.lucene.analysis.tokenattributes.TypeAttribute, org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute, org.apache.lucene.analysis.tokenattributes.FlagsAttribute, org.apache.lucene.analysis.tokenattributes.OffsetAttribute, org.apache.lucene.analysis.tokenattributes.PayloadAttribute, org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute
{
    private int startOffset;
    private int endOffset;
    private java.lang.String type;
    private int flags;
    private org.apache.lucene.util.BytesRef payload;
    private int positionIncrement;
    private int positionLength;
    public static final org.apache.lucene.util.AttributeSource$AttributeFactory TOKEN_ATTRIBUTE_FACTORY;

    public void <init>()
    {
        org.apache.lucene.analysis.Token r0;

        r0 := @this: org.apache.lucene.analysis.Token;

        specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void <init>()>();

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int positionLength> = 1;

        return;
    }

    public void <init>(int, int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1;

        r0 := @this: org.apache.lucene.analysis.Token;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void <init>()>();

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int positionLength> = 1;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        return;
    }

    public void <init>(int, int, java.lang.String)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void <init>()>();

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int positionLength> = 1;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = r1;

        return;
    }

    public void <init>(int, int, int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1, i2;

        r0 := @this: org.apache.lucene.analysis.Token;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void <init>()>();

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int positionLength> = 1;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        r0.<org.apache.lucene.analysis.Token: int flags> = i2;

        return;
    }

    public void <init>(java.lang.String, int, int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void <init>()>();

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int positionLength> = 1;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String)>(r1);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        return;
    }

    public void <init>(java.lang.String, int, int, java.lang.String)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void <init>()>();

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int positionLength> = 1;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String)>(r1);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = r2;

        return;
    }

    public void <init>(java.lang.String, int, int, int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1, i2;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void <init>()>();

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int positionLength> = 1;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String)>(r1);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        r0.<org.apache.lucene.analysis.Token: int flags> = i2;

        return;
    }

    public void <init>(char[], int, int, int, int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1, i2, i3;
        char[] r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: char[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void <init>()>();

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int positionLength> = 1;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        virtualinvoke r0.<org.apache.lucene.analysis.Token: void copyBuffer(char[],int,int)>(r1, i2, i3);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        return;
    }

    public void setPositionIncrement(int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Increment must be zero or greater: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = i0;

        return;
    }

    public int getPositionIncrement()
    {
        org.apache.lucene.analysis.Token r0;
        int $i0;

        r0 := @this: org.apache.lucene.analysis.Token;

        $i0 = r0.<org.apache.lucene.analysis.Token: int positionIncrement>;

        return $i0;
    }

    public void setPositionLength(int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0;

        r0 := @this: org.apache.lucene.analysis.Token;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.analysis.Token: int positionLength> = i0;

        return;
    }

    public int getPositionLength()
    {
        org.apache.lucene.analysis.Token r0;
        int $i0;

        r0 := @this: org.apache.lucene.analysis.Token;

        $i0 = r0.<org.apache.lucene.analysis.Token: int positionLength>;

        return $i0;
    }

    public final int startOffset()
    {
        org.apache.lucene.analysis.Token r0;
        int $i0;

        r0 := @this: org.apache.lucene.analysis.Token;

        $i0 = r0.<org.apache.lucene.analysis.Token: int startOffset>;

        return $i0;
    }

    public final int endOffset()
    {
        org.apache.lucene.analysis.Token r0;
        int $i0;

        r0 := @this: org.apache.lucene.analysis.Token;

        $i0 = r0.<org.apache.lucene.analysis.Token: int endOffset>;

        return $i0;
    }

    public void setOffset(int, int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1;

        r0 := @this: org.apache.lucene.analysis.Token;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        return;
    }

    public final java.lang.String type()
    {
        org.apache.lucene.analysis.Token r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        $r1 = r0.<org.apache.lucene.analysis.Token: java.lang.String type>;

        return $r1;
    }

    public final void setType(java.lang.String)
    {
        org.apache.lucene.analysis.Token r0;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = r1;

        return;
    }

    public int getFlags()
    {
        org.apache.lucene.analysis.Token r0;
        int $i0;

        r0 := @this: org.apache.lucene.analysis.Token;

        $i0 = r0.<org.apache.lucene.analysis.Token: int flags>;

        return $i0;
    }

    public void setFlags(int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0;

        r0 := @this: org.apache.lucene.analysis.Token;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.analysis.Token: int flags> = i0;

        return;
    }

    public org.apache.lucene.util.BytesRef getPayload()
    {
        org.apache.lucene.analysis.Token r0;
        org.apache.lucene.util.BytesRef $r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        $r1 = r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        return $r1;
    }

    public void setPayload(org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.analysis.Token r0;
        org.apache.lucene.util.BytesRef r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload> = r1;

        return;
    }

    public void clear()
    {
        org.apache.lucene.analysis.Token r0;

        r0 := @this: org.apache.lucene.analysis.Token;

        specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void clear()>();

        r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload> = null;

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int flags> = 0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = 0;

        r0.<org.apache.lucene.analysis.Token: int startOffset> = 0;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        return;
    }

    public org.apache.lucene.analysis.Token clone()
    {
        org.apache.lucene.analysis.Token r0, r2;
        org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl $r1;
        org.apache.lucene.util.BytesRef $r3, $r4, $r5;

        r0 := @this: org.apache.lucene.analysis.Token;

        $r1 = specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl clone()>();

        r2 = (org.apache.lucene.analysis.Token) $r1;

        $r3 = r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef clone()>();

        r2.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload> = $r5;

     label1:
        return r2;
    }

    public org.apache.lucene.analysis.Token clone(char[], int, int, int, int)
    {
        org.apache.lucene.util.BytesRef $r4, $r5, $r6;
        org.apache.lucene.analysis.Token $r0, r2;
        int i0, i1, i2, i3, $i4, $i5;
        char[] r1;
        java.lang.String $r3;

        r2 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r0 = new org.apache.lucene.analysis.Token;

        specialinvoke $r0.<org.apache.lucene.analysis.Token: void <init>(char[],int,int,int,int)>(r1, i0, i1, i2, i3);

        $i4 = r2.<org.apache.lucene.analysis.Token: int positionIncrement>;

        $r0.<org.apache.lucene.analysis.Token: int positionIncrement> = $i4;

        $i5 = r2.<org.apache.lucene.analysis.Token: int flags>;

        $r0.<org.apache.lucene.analysis.Token: int flags> = $i5;

        $r3 = r2.<org.apache.lucene.analysis.Token: java.lang.String type>;

        $r0.<org.apache.lucene.analysis.Token: java.lang.String type> = $r3;

        $r4 = r2.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        if $r4 == null goto label1;

        $r5 = r2.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef clone()>();

        $r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload> = $r6;

     label1:
        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.analysis.Token r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r3, $r4, $r5, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.util.BytesRef $r6, $r7, $r8, $r9;
        java.lang.Object r0;

        r1 := @this: org.apache.lucene.analysis.Token;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.apache.lucene.analysis.Token;

        if $z0 == 0 goto label8;

        r2 = (org.apache.lucene.analysis.Token) r0;

        $i1 = r1.<org.apache.lucene.analysis.Token: int startOffset>;

        $i0 = r2.<org.apache.lucene.analysis.Token: int startOffset>;

        if $i1 != $i0 goto label6;

        $i3 = r1.<org.apache.lucene.analysis.Token: int endOffset>;

        $i2 = r2.<org.apache.lucene.analysis.Token: int endOffset>;

        if $i3 != $i2 goto label6;

        $i5 = r1.<org.apache.lucene.analysis.Token: int flags>;

        $i4 = r2.<org.apache.lucene.analysis.Token: int flags>;

        if $i5 != $i4 goto label6;

        $i7 = r1.<org.apache.lucene.analysis.Token: int positionIncrement>;

        $i6 = r2.<org.apache.lucene.analysis.Token: int positionIncrement>;

        if $i7 != $i6 goto label6;

        $r3 = r1.<org.apache.lucene.analysis.Token: java.lang.String type>;

        if $r3 != null goto label2;

        $r10 = r2.<org.apache.lucene.analysis.Token: java.lang.String type>;

        if $r10 != null goto label6;

        goto label3;

     label2:
        $r5 = r1.<org.apache.lucene.analysis.Token: java.lang.String type>;

        $r4 = r2.<org.apache.lucene.analysis.Token: java.lang.String type>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label6;

     label3:
        $r6 = r1.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        if $r6 != null goto label4;

        $r9 = r2.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        if $r9 != null goto label6;

        goto label5;

     label4:
        $r8 = r1.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        $r7 = r2.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        $z2 = virtualinvoke $r8.<org.apache.lucene.util.BytesRef: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label6;

     label5:
        $z3 = specialinvoke r1.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        return $z4;

     label8:
        return 0;
    }

    public int hashCode()
    {
        org.apache.lucene.analysis.Token r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16;
        java.lang.String $r1, $r4;
        org.apache.lucene.util.BytesRef $r2, $r3;

        r0 := @this: org.apache.lucene.analysis.Token;

        $i0 = specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: int hashCode()>();

        $i2 = $i0 * 31;

        $i1 = r0.<org.apache.lucene.analysis.Token: int startOffset>;

        i13 = $i2 + $i1;

        $i4 = i13 * 31;

        $i3 = r0.<org.apache.lucene.analysis.Token: int endOffset>;

        i14 = $i4 + $i3;

        $i6 = i14 * 31;

        $i5 = r0.<org.apache.lucene.analysis.Token: int flags>;

        i15 = $i6 + $i5;

        $i8 = i15 * 31;

        $i7 = r0.<org.apache.lucene.analysis.Token: int positionIncrement>;

        i16 = $i8 + $i7;

        $r1 = r0.<org.apache.lucene.analysis.Token: java.lang.String type>;

        if $r1 == null goto label1;

        $i11 = i16 * 31;

        $r4 = r0.<org.apache.lucene.analysis.Token: java.lang.String type>;

        $i12 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        i16 = $i11 + $i12;

     label1:
        $r2 = r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        if $r2 == null goto label2;

        $i9 = i16 * 31;

        $r3 = r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        $i10 = virtualinvoke $r3.<org.apache.lucene.util.BytesRef: int hashCode()>();

        i16 = $i9 + $i10;

     label2:
        return i16;
    }

    private void clearNoTermBuffer()
    {
        org.apache.lucene.analysis.Token r0;

        r0 := @this: org.apache.lucene.analysis.Token;

        r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload> = null;

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int flags> = 0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = 0;

        r0.<org.apache.lucene.analysis.Token: int startOffset> = 0;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        return;
    }

    public org.apache.lucene.analysis.Token reinit(char[], int, int, int, int, java.lang.String)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1, i2, i3;
        char[] r1;
        java.lang.String r2;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: char[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r2 := @parameter5: java.lang.String;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        specialinvoke r0.<org.apache.lucene.analysis.Token: void clearNoTermBuffer()>();

        virtualinvoke r0.<org.apache.lucene.analysis.Token: void copyBuffer(char[],int,int)>(r1, i2, i3);

        r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload> = null;

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = 1;

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = r2;

        return r0;
    }

    public org.apache.lucene.analysis.Token reinit(char[], int, int, int, int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1, i2, i3;
        char[] r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: char[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        specialinvoke r0.<org.apache.lucene.analysis.Token: void clearNoTermBuffer()>();

        virtualinvoke r0.<org.apache.lucene.analysis.Token: void copyBuffer(char[],int,int)>(r1, i2, i3);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        return r0;
    }

    public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int, java.lang.String)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        virtualinvoke r0.<org.apache.lucene.analysis.Token: void clear()>();

        virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String)>(r1);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = r2;

        return r0;
    }

    public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int, int, int, java.lang.String)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1, i2, i3, $i4;
        java.lang.String r1, r2;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r2 := @parameter5: java.lang.String;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        virtualinvoke r0.<org.apache.lucene.analysis.Token: void clear()>();

        $i4 = i2 + i3;

        virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence,int,int)>(r1, i2, $i4);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = r2;

        return r0;
    }

    public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        virtualinvoke r0.<org.apache.lucene.analysis.Token: void clear()>();

        virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String)>(r1);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        return r0;
    }

    public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int, int, int)
    {
        org.apache.lucene.analysis.Token r0;
        int i0, i1, i2, i3, $i4;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<org.apache.lucene.analysis.Token: void checkOffsets(int,int)>(i0, i1);

        virtualinvoke r0.<org.apache.lucene.analysis.Token: void clear()>();

        $i4 = i2 + i3;

        virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence,int,int)>(r1, i2, $i4);

        r0.<org.apache.lucene.analysis.Token: int startOffset> = i0;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = i1;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = "word";

        return r0;
    }

    public void reinit(org.apache.lucene.analysis.Token)
    {
        org.apache.lucene.util.BytesRef $r4;
        org.apache.lucene.analysis.Token r0, r1;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: org.apache.lucene.analysis.Token;

        $r2 = virtualinvoke r1.<org.apache.lucene.analysis.Token: char[] buffer()>();

        $i0 = virtualinvoke r1.<org.apache.lucene.analysis.Token: int length()>();

        virtualinvoke r0.<org.apache.lucene.analysis.Token: void copyBuffer(char[],int,int)>($r2, 0, $i0);

        $i1 = r1.<org.apache.lucene.analysis.Token: int positionIncrement>;

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = $i1;

        $i2 = r1.<org.apache.lucene.analysis.Token: int flags>;

        r0.<org.apache.lucene.analysis.Token: int flags> = $i2;

        $i3 = r1.<org.apache.lucene.analysis.Token: int startOffset>;

        r0.<org.apache.lucene.analysis.Token: int startOffset> = $i3;

        $i4 = r1.<org.apache.lucene.analysis.Token: int endOffset>;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = $i4;

        $r3 = r1.<org.apache.lucene.analysis.Token: java.lang.String type>;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = $r3;

        $r4 = r1.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload> = $r4;

        return;
    }

    public void reinit(org.apache.lucene.analysis.Token, java.lang.String)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r1;
        org.apache.lucene.util.BytesRef $r5;
        org.apache.lucene.analysis.Token r0, r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String r2, $r4;

        r0 := @this: org.apache.lucene.analysis.Token;

        r3 := @parameter0: org.apache.lucene.analysis.Token;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.tokenattributes.CharTermAttribute setEmpty()>();

        interfaceinvoke $r1.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String)>(r2);

        $i0 = r3.<org.apache.lucene.analysis.Token: int positionIncrement>;

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = $i0;

        $i1 = r3.<org.apache.lucene.analysis.Token: int flags>;

        r0.<org.apache.lucene.analysis.Token: int flags> = $i1;

        $i2 = r3.<org.apache.lucene.analysis.Token: int startOffset>;

        r0.<org.apache.lucene.analysis.Token: int startOffset> = $i2;

        $i3 = r3.<org.apache.lucene.analysis.Token: int endOffset>;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = $i3;

        $r4 = r3.<org.apache.lucene.analysis.Token: java.lang.String type>;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = $r4;

        $r5 = r3.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload> = $r5;

        return;
    }

    public void reinit(org.apache.lucene.analysis.Token, char[], int, int)
    {
        org.apache.lucene.util.BytesRef $r4;
        org.apache.lucene.analysis.Token r0, r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        char[] r1;
        java.lang.String $r3;

        r0 := @this: org.apache.lucene.analysis.Token;

        r2 := @parameter0: org.apache.lucene.analysis.Token;

        r1 := @parameter1: char[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        virtualinvoke r0.<org.apache.lucene.analysis.Token: void copyBuffer(char[],int,int)>(r1, i0, i1);

        $i2 = r2.<org.apache.lucene.analysis.Token: int positionIncrement>;

        r0.<org.apache.lucene.analysis.Token: int positionIncrement> = $i2;

        $i3 = r2.<org.apache.lucene.analysis.Token: int flags>;

        r0.<org.apache.lucene.analysis.Token: int flags> = $i3;

        $i4 = r2.<org.apache.lucene.analysis.Token: int startOffset>;

        r0.<org.apache.lucene.analysis.Token: int startOffset> = $i4;

        $i5 = r2.<org.apache.lucene.analysis.Token: int endOffset>;

        r0.<org.apache.lucene.analysis.Token: int endOffset> = $i5;

        $r3 = r2.<org.apache.lucene.analysis.Token: java.lang.String type>;

        r0.<org.apache.lucene.analysis.Token: java.lang.String type> = $r3;

        $r4 = r2.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload> = $r4;

        return;
    }

    public void copyTo(org.apache.lucene.util.AttributeImpl)
    {
        org.apache.lucene.analysis.tokenattributes.FlagsAttribute $r7;
        org.apache.lucene.analysis.Token r1, r10;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r8;
        boolean $z0;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r3;
        org.apache.lucene.analysis.tokenattributes.PayloadAttribute $r6;
        org.apache.lucene.util.BytesRef $r4, $r5, $r11, $r12, $r13, $r14;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r2;
        org.apache.lucene.util.AttributeImpl r0;
        org.apache.lucene.analysis.tokenattributes.TypeAttribute $r9;

        r1 := @this: org.apache.lucene.analysis.Token;

        r0 := @parameter0: org.apache.lucene.util.AttributeImpl;

        $z0 = r0 instanceof org.apache.lucene.analysis.Token;

        if $z0 == 0 goto label2;

        r10 = (org.apache.lucene.analysis.Token) r0;

        virtualinvoke r10.<org.apache.lucene.analysis.Token: void reinit(org.apache.lucene.analysis.Token)>(r1);

        $r11 = r1.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        if $r11 == null goto label1;

        $r12 = r1.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        $r13 = virtualinvoke $r12.<org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef clone()>();

        r10.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload> = $r13;

     label1:
        goto label5;

     label2:
        specialinvoke r1.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void copyTo(org.apache.lucene.util.AttributeImpl)>(r0);

        $r2 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) r0;

        $i1 = r1.<org.apache.lucene.analysis.Token: int startOffset>;

        $i0 = r1.<org.apache.lucene.analysis.Token: int endOffset>;

        interfaceinvoke $r2.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i1, $i0);

        $r3 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) r0;

        $i2 = r1.<org.apache.lucene.analysis.Token: int positionIncrement>;

        interfaceinvoke $r3.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: void setPositionIncrement(int)>($i2);

        $r6 = (org.apache.lucene.analysis.tokenattributes.PayloadAttribute) r0;

        $r4 = r1.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        if $r4 != null goto label3;

        $r14 = null;

        goto label4;

     label3:
        $r5 = r1.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        $r14 = virtualinvoke $r5.<org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef clone()>();

     label4:
        interfaceinvoke $r6.<org.apache.lucene.analysis.tokenattributes.PayloadAttribute: void setPayload(org.apache.lucene.util.BytesRef)>($r14);

        $r7 = (org.apache.lucene.analysis.tokenattributes.FlagsAttribute) r0;

        $i3 = r1.<org.apache.lucene.analysis.Token: int flags>;

        interfaceinvoke $r7.<org.apache.lucene.analysis.tokenattributes.FlagsAttribute: void setFlags(int)>($i3);

        $r9 = (org.apache.lucene.analysis.tokenattributes.TypeAttribute) r0;

        $r8 = r1.<org.apache.lucene.analysis.Token: java.lang.String type>;

        interfaceinvoke $r9.<org.apache.lucene.analysis.tokenattributes.TypeAttribute: void setType(java.lang.String)>($r8);

     label5:
        return;
    }

    public void reflectWith(org.apache.lucene.util.AttributeReflector)
    {
        org.apache.lucene.util.AttributeReflector r1;
        org.apache.lucene.util.BytesRef $r5;
        java.lang.Integer $r2, $r3, $r4, $r6;
        org.apache.lucene.analysis.Token r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r7;

        r0 := @this: org.apache.lucene.analysis.Token;

        r1 := @parameter0: org.apache.lucene.util.AttributeReflector;

        specialinvoke r0.<org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl: void reflectWith(org.apache.lucene.util.AttributeReflector)>(r1);

        $i0 = r0.<org.apache.lucene.analysis.Token: int startOffset>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r1.<org.apache.lucene.util.AttributeReflector: void reflect(java.lang.Class,java.lang.String,java.lang.Object)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;", "startOffset", $r2);

        $i1 = r0.<org.apache.lucene.analysis.Token: int endOffset>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r1.<org.apache.lucene.util.AttributeReflector: void reflect(java.lang.Class,java.lang.String,java.lang.Object)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;", "endOffset", $r3);

        $i2 = r0.<org.apache.lucene.analysis.Token: int positionIncrement>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke r1.<org.apache.lucene.util.AttributeReflector: void reflect(java.lang.Class,java.lang.String,java.lang.Object)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;", "positionIncrement", $r4);

        $r5 = r0.<org.apache.lucene.analysis.Token: org.apache.lucene.util.BytesRef payload>;

        interfaceinvoke r1.<org.apache.lucene.util.AttributeReflector: void reflect(java.lang.Class,java.lang.String,java.lang.Object)>(class "Lorg/apache/lucene/analysis/tokenattributes/PayloadAttribute;", "payload", $r5);

        $i3 = r0.<org.apache.lucene.analysis.Token: int flags>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke r1.<org.apache.lucene.util.AttributeReflector: void reflect(java.lang.Class,java.lang.String,java.lang.Object)>(class "Lorg/apache/lucene/analysis/tokenattributes/FlagsAttribute;", "flags", $r6);

        $r7 = r0.<org.apache.lucene.analysis.Token: java.lang.String type>;

        interfaceinvoke r1.<org.apache.lucene.util.AttributeReflector: void reflect(java.lang.Class,java.lang.String,java.lang.Object)>(class "Lorg/apache/lucene/analysis/tokenattributes/TypeAttribute;", "type", $r7);

        return;
    }

    private void checkOffsets(int, int)
    {
        java.lang.IllegalArgumentException $r0;
        org.apache.lucene.analysis.Token r7;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r7 := @this: org.apache.lucene.analysis.Token;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i1 >= i0 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startOffset must be non-negative, and endOffset must be >= startOffset, startOffset=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",endOffset=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label2:
        return;
    }

    public volatile org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl clone()
    {
        org.apache.lucene.analysis.Token r0, $r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.Token clone()>();

        return $r1;
    }

    public volatile org.apache.lucene.util.AttributeImpl clone()
    {
        org.apache.lucene.analysis.Token r0, $r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.Token clone()>();

        return $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.analysis.Token r0, $r1;

        r0 := @this: org.apache.lucene.analysis.Token;

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.Token: org.apache.lucene.analysis.Token clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.lucene.analysis.Token$TokenAttributeFactory $r0;
        org.apache.lucene.util.AttributeSource$AttributeFactory $r1;

        $r0 = new org.apache.lucene.analysis.Token$TokenAttributeFactory;

        $r1 = <org.apache.lucene.util.AttributeSource$AttributeFactory: org.apache.lucene.util.AttributeSource$AttributeFactory DEFAULT_ATTRIBUTE_FACTORY>;

        specialinvoke $r0.<org.apache.lucene.analysis.Token$TokenAttributeFactory: void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory)>($r1);

        <org.apache.lucene.analysis.Token: org.apache.lucene.util.AttributeSource$AttributeFactory TOKEN_ATTRIBUTE_FACTORY> = $r0;

        return;
    }
}
