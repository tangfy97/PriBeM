public class ucar.nc2.ft.point.writer.WriterCFStationCollection extends java.lang.Object
{
    private static final java.lang.String recordDimName;
    private static final java.lang.String stationDimName;
    private static final java.lang.String latName;
    private static final java.lang.String lonName;
    private static final java.lang.String altName;
    private static final java.lang.String timeName;
    private static final java.lang.String idName;
    private static final java.lang.String descName;
    private static final java.lang.String wmoName;
    private static final java.lang.String stationIndexName;
    private static final boolean debug;
    private ucar.nc2.units.DateFormatter dateFormatter;
    private int name_strlen;
    private int desc_strlen;
    private int wmo_strlen;
    private ucar.nc2.NetcdfFileWriteable ncfile;
    private java.lang.String title;
    private java.util.Set dimSet;
    private java.util.List stationDims;
    private java.util.Date minDate;
    private java.util.Date maxDate;
    private boolean useAlt;
    private boolean useWmoId;
    private java.util.HashMap stationMap;
    private int recno;
    private ucar.ma2.ArrayDouble$D1 timeArray;
    private ucar.ma2.ArrayInt$D1 parentArray;
    private int[] origin;

    public void <init>(java.lang.String, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable $r8, $r9;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r0;
        java.util.ArrayList $r3;
        java.util.HashSet $r2;
        ucar.ma2.ArrayInt$D1 $r5;
        ucar.ma2.ArrayDouble$D1 $r4;
        int[] $r6;
        java.lang.String r7, r10;
        ucar.nc2.units.DateFormatter $r1;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        r7 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r1.<ucar.nc2.units.DateFormatter: void <init>()>();

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.units.DateFormatter dateFormatter> = $r1;

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int name_strlen> = 1;

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int desc_strlen> = 1;

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int wmo_strlen> = 1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>(int)>(20);

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Set dimSet> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(1);

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.List stationDims> = $r3;

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date minDate> = null;

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date maxDate> = null;

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useAlt> = 0;

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useWmoId> = 0;

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int recno> = 0;

        $r4 = new ucar.ma2.ArrayDouble$D1;

        specialinvoke $r4.<ucar.ma2.ArrayDouble$D1: void <init>(int)>(1);

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.ma2.ArrayDouble$D1 timeArray> = $r4;

        $r5 = new ucar.ma2.ArrayInt$D1;

        specialinvoke $r5.<ucar.ma2.ArrayInt$D1: void <init>(int)>(1);

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.ma2.ArrayInt$D1 parentArray> = $r5;

        $r6 = newarray (int)[1];

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int[] origin> = $r6;

        $r8 = staticinvoke <ucar.nc2.NetcdfFileWriteable: ucar.nc2.NetcdfFileWriteable createNew(java.lang.String,boolean)>(r7, 0);

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile> = $r8;

        $r9 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r9.<ucar.nc2.NetcdfFileWriteable: void setFill(boolean)>(0);

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String title> = r10;

        return;
    }

    public void setLength(long)
    {
        long l0;
        ucar.nc2.NetcdfFileWriteable $r1;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r0;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        l0 := @parameter0: long;

        $r1 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: void setLength(long)>(l0);

        return;
    }

    public void writeHeader(java.util.List, java.util.List, ucar.nc2.units.DateUnit) throws java.io.IOException
    {
        java.lang.IllegalStateException $r16;
        ucar.nc2.NetcdfFileWriteable $r4, $r8, $r12, $r13;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r0;
        java.util.Date $r3, $r7;
        java.lang.Boolean $r15;
        java.lang.String $r6, $r10;
        boolean $z0;
        ucar.nc2.units.DateUnit r2;
        java.util.List r1, r11;
        java.lang.Object $r14;
        ucar.nc2.units.DateFormatter $r5, $r9;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        r1 := @parameter0: java.util.List;

        r11 := @parameter1: java.util.List;

        r2 := @parameter2: ucar.nc2.units.DateUnit;

        specialinvoke r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: void createGlobalAttributes()>();

        specialinvoke r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: void createStations(java.util.List)>(r1);

        specialinvoke r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: void createObsVariables(ucar.nc2.units.DateUnit)>(r2);

        $r4 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r5 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.units.DateFormatter dateFormatter>;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>()>();

        $r6 = virtualinvoke $r5.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r3);

        virtualinvoke $r4.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("time_coverage_start", $r6);

        $r8 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r9 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.units.DateFormatter dateFormatter>;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        $r10 = virtualinvoke $r9.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r7);

        virtualinvoke $r8.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("time_coverage_end", $r10);

        specialinvoke r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: void createDataVariables(java.util.List)>(r11);

        $r12 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r12.<ucar.nc2.NetcdfFileWriteable: void create()>();

        specialinvoke r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: void writeStationData(java.util.List)>(r1);

        $r13 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r14 = virtualinvoke $r13.<ucar.nc2.NetcdfFileWriteable: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

        $r15 = (java.lang.Boolean) $r14;

        $z0 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can\'t add record variable");

        throw $r16;

     label1:
        return;
    }

    private void createGlobalAttributes()
    {
        ucar.nc2.NetcdfFileWriteable $r1, $r2, $r4, $r5;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r0;
        java.lang.String $r3;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        $r1 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("Conventions", "CF-1.6");

        $r2 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r2.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("featureType", "timeSeries");

        $r4 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r3 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String title>;

        virtualinvoke $r4.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("title", $r3);

        $r5 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r5.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("desc", "Written by TDS/CDM Remote Feature subset service");

        return;
    }

    private void createStations(java.util.List) throws java.io.IOException
    {
        ucar.nc2.Attribute $r22, $r24, $r29, $r31, $r36, $r38, $r43, $r48, $r53, $r55, $r57;
        ucar.nc2.NetcdfFileWriteable $r3, $r6, $r9, $r12, $r15, $r16, $r20, $r23, $r25, $r27, $r30, $r32, $r34, $r37, $r39, $r41, $r44, $r46, $r49, $r51, $r54, $r56, $r58;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r1;
        java.lang.String $r5, $r8, $r11, $r14, $r60, $r61, $r62, $r64, $r65, $r66;
        ucar.unidata.geoloc.LatLonRect $r2;
        ucar.nc2.Dimension $r17;
        ucar.unidata.geoloc.LatLonPointImpl $r4, $r7, $r10, $r13;
        boolean $z0, $z1, $z2, $z3;
        ucar.ma2.DataType $r19, $r26, $r50;
        java.util.List r0, $r18, $r33, $r40, $r45;
        ucar.unidata.geoloc.Station r67, r68;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        ucar.nc2.Variable $r21, $r28, $r35, $r42, $r47, $r52;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.Object $r59, $r63;

        r1 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i14 = 0;

     label1:
        if i14 >= $i0 goto label4;

        $r63 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i14);

        r67 = (ucar.unidata.geoloc.Station) $r63;

        $d4 = interfaceinvoke r67.<ucar.unidata.geoloc.Station: double getAltitude()>();

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        if $z3 != 0 goto label2;

        r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useAlt> = 1;

     label2:
        $r64 = interfaceinvoke r67.<ucar.unidata.geoloc.Station: java.lang.String getWmoId()>();

        if $r64 == null goto label3;

        $r65 = interfaceinvoke r67.<ucar.unidata.geoloc.Station: java.lang.String getWmoId()>();

        $r66 = virtualinvoke $r65.<java.lang.String: java.lang.String trim()>();

        $i13 = virtualinvoke $r66.<java.lang.String: int length()>();

        if $i13 <= 0 goto label3;

        r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useWmoId> = 1;

     label3:
        i14 = i14 + 1;

        goto label1;

     label4:
        i15 = 0;

     label5:
        if i15 >= $i0 goto label7;

        $r59 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i15);

        r68 = (ucar.unidata.geoloc.Station) $r59;

        $i4 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int name_strlen>;

        $r60 = interfaceinvoke r68.<ucar.unidata.geoloc.Station: java.lang.String getName()>();

        $i5 = virtualinvoke $r60.<java.lang.String: int length()>();

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5);

        r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int name_strlen> = $i6;

        $i7 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int desc_strlen>;

        $r61 = interfaceinvoke r68.<ucar.unidata.geoloc.Station: java.lang.String getDescription()>();

        $i8 = virtualinvoke $r61.<java.lang.String: int length()>();

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i8);

        r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int desc_strlen> = $i9;

        $z2 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useWmoId>;

        if $z2 == 0 goto label6;

        $i10 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int wmo_strlen>;

        $r62 = interfaceinvoke r68.<ucar.unidata.geoloc.Station: java.lang.String getWmoId()>();

        $i11 = virtualinvoke $r62.<java.lang.String: int length()>();

        $i12 = staticinvoke <java.lang.Math: int max(int,int)>($i10, $i11);

        r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int wmo_strlen> = $i12;

     label6:
        i15 = i15 + 1;

        goto label5;

     label7:
        $r2 = specialinvoke r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.unidata.geoloc.LatLonRect getBoundingBox(java.util.List)>(r0);

        $r3 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r4 = virtualinvoke $r2.<ucar.unidata.geoloc.LatLonRect: ucar.unidata.geoloc.LatLonPointImpl getLowerLeftPoint()>();

        $d0 = virtualinvoke $r4.<ucar.unidata.geoloc.LatLonPointImpl: double getLatitude()>();

        $r5 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        virtualinvoke $r3.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("geospatial_lat_min", $r5);

        $r6 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r7 = virtualinvoke $r2.<ucar.unidata.geoloc.LatLonRect: ucar.unidata.geoloc.LatLonPointImpl getUpperRightPoint()>();

        $d1 = virtualinvoke $r7.<ucar.unidata.geoloc.LatLonPointImpl: double getLatitude()>();

        $r8 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d1);

        virtualinvoke $r6.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("geospatial_lat_max", $r8);

        $r9 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r10 = virtualinvoke $r2.<ucar.unidata.geoloc.LatLonRect: ucar.unidata.geoloc.LatLonPointImpl getLowerLeftPoint()>();

        $d2 = virtualinvoke $r10.<ucar.unidata.geoloc.LatLonPointImpl: double getLongitude()>();

        $r11 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d2);

        virtualinvoke $r9.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("geospatial_lon_min", $r11);

        $r12 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r13 = virtualinvoke $r2.<ucar.unidata.geoloc.LatLonRect: ucar.unidata.geoloc.LatLonPointImpl getUpperRightPoint()>();

        $d3 = virtualinvoke $r13.<ucar.unidata.geoloc.LatLonPointImpl: double getLongitude()>();

        $r14 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d3);

        virtualinvoke $r12.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addGlobalAttribute(java.lang.String,java.lang.String)>("geospatial_lon_max", $r14);

        $r15 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r15.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension addUnlimitedDimension(java.lang.String)>("record");

        $r16 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r17 = virtualinvoke $r16.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension addDimension(java.lang.String,int)>("station", $i0);

        $r18 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.List stationDims>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r20 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r19 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r21 = virtualinvoke $r20.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>("latitude", $r19, "station");

        $r23 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r22 = new ucar.nc2.Attribute;

        specialinvoke $r22.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees_north");

        virtualinvoke $r23.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r21, $r22);

        $r25 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r24 = new ucar.nc2.Attribute;

        specialinvoke $r24.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "station latitude");

        virtualinvoke $r25.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r21, $r24);

        $r27 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r26 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r28 = virtualinvoke $r27.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>("longitude", $r26, "station");

        $r30 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r29 = new ucar.nc2.Attribute;

        specialinvoke $r29.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees_east");

        virtualinvoke $r30.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r28, $r29);

        $r32 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r31 = new ucar.nc2.Attribute;

        specialinvoke $r31.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "station longitude");

        virtualinvoke $r32.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r28, $r31);

        $z0 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useAlt>;

        if $z0 == 0 goto label8;

        $r51 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r50 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r52 = virtualinvoke $r51.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>("altitude", $r50, "station");

        $r54 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r53 = new ucar.nc2.Attribute;

        specialinvoke $r53.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "meters");

        virtualinvoke $r54.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r52, $r53);

        $r56 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r55 = new ucar.nc2.Attribute;

        specialinvoke $r55.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("positive", "up");

        virtualinvoke $r56.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r52, $r55);

        $r58 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r57 = new ucar.nc2.Attribute;

        specialinvoke $r57.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "station altitude");

        virtualinvoke $r58.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r52, $r57);

     label8:
        $r34 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r33 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.List stationDims>;

        $i1 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int name_strlen>;

        $r35 = virtualinvoke $r34.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addStringVariable(java.lang.String,java.util.List,int)>("station_id", $r33, $i1);

        $r37 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r36 = new ucar.nc2.Attribute;

        specialinvoke $r36.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "station identifier");

        virtualinvoke $r37.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r35, $r36);

        $r39 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r38 = new ucar.nc2.Attribute;

        specialinvoke $r38.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("standard_name", "station_id");

        virtualinvoke $r39.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r35, $r38);

        $r41 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r40 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.List stationDims>;

        $i2 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int desc_strlen>;

        $r42 = virtualinvoke $r41.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addStringVariable(java.lang.String,java.util.List,int)>("station_description", $r40, $i2);

        $r44 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r43 = new ucar.nc2.Attribute;

        specialinvoke $r43.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "station description");

        virtualinvoke $r44.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r42, $r43);

        $z1 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useWmoId>;

        if $z1 == 0 goto label9;

        $r46 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r45 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.List stationDims>;

        $i3 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int wmo_strlen>;

        $r47 = virtualinvoke $r46.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addStringVariable(java.lang.String,java.util.List,int)>("wmo_id", $r45, $i3);

        $r49 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r48 = new ucar.nc2.Attribute;

        specialinvoke $r48.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "station WMO id");

        virtualinvoke $r49.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r47, $r48);

     label9:
        return;
    }

    private void createObsVariables(ucar.nc2.units.DateUnit) throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable $r2, $r6, $r9, $r11, $r14, $r16;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r0;
        ucar.nc2.Variable $r3, $r12;
        java.lang.String $r7;
        ucar.ma2.DataType $r1, $r10;
        ucar.nc2.units.DateUnit r5;
        ucar.nc2.Attribute $r4, $r8, $r13, $r15;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        r5 := @parameter0: ucar.nc2.units.DateUnit;

        $r2 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r1 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $r3 = virtualinvoke $r2.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>("time", $r1, "record");

        $r6 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r4 = new ucar.nc2.Attribute;

        $r7 = virtualinvoke r5.<ucar.nc2.units.DateUnit: java.lang.String getUnitsString()>();

        specialinvoke $r4.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r7);

        virtualinvoke $r6.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r3, $r4);

        $r9 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r8 = new ucar.nc2.Attribute;

        specialinvoke $r8.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "time of measurement");

        virtualinvoke $r9.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r3, $r8);

        $r11 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        $r12 = virtualinvoke $r11.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>("stationIndex", $r10, "record");

        $r14 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r13 = new ucar.nc2.Attribute;

        specialinvoke $r13.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "station index for this observation record");

        virtualinvoke $r14.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r12, $r13);

        $r16 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r15 = new ucar.nc2.Attribute;

        specialinvoke $r15.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("standard_name", "ragged_parentIndex");

        virtualinvoke $r16.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>($r12, $r15);

        return;
    }

    private void createDataVariables(java.util.List) throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Set $r3, $r28;
        ucar.ma2.DataType $r12;
        java.util.List r0, $r7, $r15, $r27;
        ucar.nc2.Attribute $r17, r19;
        ucar.nc2.VariableSimpleIF r29, r31;
        java.lang.StringBuilder $r8, $r21;
        ucar.nc2.NetcdfFileWriteable $r10, $r24;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r2;
        int $i0;
        ucar.nc2.Variable $r14;
        java.lang.String $r11, $r13, $r22, $r25;
        java.util.Iterator $r1, $r4, $r5, $r9, $r16;
        java.lang.Object $r6, $r18, $r20, $r23, $r26;
        ucar.nc2.Dimension r30, r32;

        r2 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r26 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r29 = (ucar.nc2.VariableSimpleIF) $r26;

        $r27 = interfaceinvoke r29.<ucar.nc2.VariableSimpleIF: java.util.List getDimensions()>();

        $r28 = r2.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Set dimSet>;

        interfaceinvoke $r28.<java.util.Set: boolean addAll(java.util.Collection)>($r27);

        goto label01;

     label02:
        $r3 = r2.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Set dimSet>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r23 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r30 = (ucar.nc2.Dimension) $r23;

        $z6 = virtualinvoke r30.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z6 != 0 goto label04;

        $r24 = r2.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r25 = virtualinvoke r30.<ucar.nc2.Dimension: java.lang.String getName()>();

        $i0 = virtualinvoke r30.<ucar.nc2.Dimension: int getLength()>();

        $z7 = virtualinvoke r30.<ucar.nc2.Dimension: boolean isShared()>();

        $z8 = virtualinvoke r30.<ucar.nc2.Dimension: boolean isVariableLength()>();

        virtualinvoke $r24.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Dimension addDimension(java.lang.String,int,boolean,boolean,boolean)>($r25, $i0, $z7, 0, $z8);

     label04:
        goto label03;

     label05:
        $r5 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r31 = (ucar.nc2.VariableSimpleIF) $r6;

        $r7 = interfaceinvoke r31.<ucar.nc2.VariableSimpleIF: java.util.List getDimensions()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("record");

        $r9 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r20 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r32 = (ucar.nc2.Dimension) $r20;

        $z5 = virtualinvoke r32.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z5 != 0 goto label08;

        $r21 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r22 = virtualinvoke r32.<ucar.nc2.Dimension: java.lang.String getName()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

     label08:
        goto label07;

     label09:
        $r10 = r2.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r11 = interfaceinvoke r31.<ucar.nc2.VariableSimpleIF: java.lang.String getShortName()>();

        $r12 = interfaceinvoke r31.<ucar.nc2.VariableSimpleIF: ucar.ma2.DataType getDataType()>();

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke $r10.<ucar.nc2.NetcdfFileWriteable: ucar.nc2.Variable addVariable(java.lang.String,ucar.ma2.DataType,java.lang.String)>($r11, $r12, $r13);

        $r15 = interfaceinvoke r31.<ucar.nc2.VariableSimpleIF: java.util.List getAttributes()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r18 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r19 = (ucar.nc2.Attribute) $r18;

        virtualinvoke $r14.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>(r19);

        goto label10;

     label11:
        $r17 = new ucar.nc2.Attribute;

        specialinvoke $r17.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("coordinates", "latitude longitude altitude time");

        virtualinvoke $r14.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r17);

        goto label06;

     label12:
        return;
    }

    private void writeStationData(java.util.List) throws java.io.IOException
    {
        java.lang.IllegalStateException $r24;
        java.lang.Integer $r19;
        boolean $z0, $z1, $z2, $z3;
        ucar.ma2.ArrayObject$D1 $r6, $r7, $r8;
        java.util.List r0;
        ucar.ma2.ArrayDouble$D1 $r3, $r4, $r5;
        ucar.nc2.NetcdfFileWriteable $r9, $r10, $r11, $r12, $r13, $r14;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r1;
        ucar.unidata.geoloc.Station r16;
        java.util.HashMap $r2, $r17;
        int $i0, $i1, $i2, i3;
        java.lang.String $r18, $r20, $r21, $r22;
        double $d0, $d1, $d2;
        ucar.ma2.InvalidRangeException $r23;
        java.lang.Object $r15;

        r1 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r2 = new java.util.HashMap;

        $i1 = 2 * $i0;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i1);

        r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.HashMap stationMap> = $r2;

        $r3 = new ucar.ma2.ArrayDouble$D1;

        specialinvoke $r3.<ucar.ma2.ArrayDouble$D1: void <init>(int)>($i0);

        $r4 = new ucar.ma2.ArrayDouble$D1;

        specialinvoke $r4.<ucar.ma2.ArrayDouble$D1: void <init>(int)>($i0);

        $r5 = new ucar.ma2.ArrayDouble$D1;

        specialinvoke $r5.<ucar.ma2.ArrayDouble$D1: void <init>(int)>($i0);

        $r6 = new ucar.ma2.ArrayObject$D1;

        specialinvoke $r6.<ucar.ma2.ArrayObject$D1: void <init>(java.lang.Class,int)>(class "Ljava/lang/String;", $i0);

        $r7 = new ucar.ma2.ArrayObject$D1;

        specialinvoke $r7.<ucar.ma2.ArrayObject$D1: void <init>(java.lang.Class,int)>(class "Ljava/lang/String;", $i0);

        $r8 = new ucar.ma2.ArrayObject$D1;

        specialinvoke $r8.<ucar.ma2.ArrayObject$D1: void <init>(java.lang.Class,int)>(class "Ljava/lang/String;", $i0);

        i3 = 0;

     label1:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r15 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        r16 = (ucar.unidata.geoloc.Station) $r15;

        $r17 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.HashMap stationMap>;

        $r18 = interfaceinvoke r16.<ucar.unidata.geoloc.Station: java.lang.String getName()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19);

        $d0 = interfaceinvoke r16.<ucar.unidata.geoloc.Station: double getLatitude()>();

        virtualinvoke $r3.<ucar.ma2.ArrayDouble$D1: void set(int,double)>(i3, $d0);

        $d1 = interfaceinvoke r16.<ucar.unidata.geoloc.Station: double getLongitude()>();

        virtualinvoke $r4.<ucar.ma2.ArrayDouble$D1: void set(int,double)>(i3, $d1);

        $z2 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useAlt>;

        if $z2 == 0 goto label2;

        $d2 = interfaceinvoke r16.<ucar.unidata.geoloc.Station: double getAltitude()>();

        virtualinvoke $r5.<ucar.ma2.ArrayDouble$D1: void set(int,double)>(i3, $d2);

     label2:
        $r20 = interfaceinvoke r16.<ucar.unidata.geoloc.Station: java.lang.String getName()>();

        virtualinvoke $r6.<ucar.ma2.ArrayObject$D1: void set(int,java.lang.Object)>(i3, $r20);

        $r21 = interfaceinvoke r16.<ucar.unidata.geoloc.Station: java.lang.String getDescription()>();

        virtualinvoke $r7.<ucar.ma2.ArrayObject$D1: void set(int,java.lang.Object)>(i3, $r21);

        $z3 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useWmoId>;

        if $z3 == 0 goto label3;

        $r22 = interfaceinvoke r16.<ucar.unidata.geoloc.Station: java.lang.String getWmoId()>();

        virtualinvoke $r8.<ucar.ma2.ArrayObject$D1: void set(int,java.lang.Object)>(i3, $r22);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r9 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r9.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,ucar.ma2.Array)>("latitude", $r3);

        $r10 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r10.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,ucar.ma2.Array)>("longitude", $r4);

        $z0 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useAlt>;

        if $z0 == 0 goto label5;

        $r14 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r14.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,ucar.ma2.Array)>("altitude", $r5);

     label5:
        $r11 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r11.<ucar.nc2.NetcdfFileWriteable: void writeStringData(java.lang.String,ucar.ma2.Array)>("station_id", $r6);

        $r12 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r12.<ucar.nc2.NetcdfFileWriteable: void writeStringData(java.lang.String,ucar.ma2.Array)>("station_description", $r7);

        $z1 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean useWmoId>;

        if $z1 == 0 goto label6;

        $r13 = r1.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r13.<ucar.nc2.NetcdfFileWriteable: void writeStringData(java.lang.String,ucar.ma2.Array)>("wmo_id", $r8);

     label6:
        goto label8;

     label7:
        $r23 := @caughtexception;

        virtualinvoke $r23.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r23);

        throw $r24;

     label8:
        return;

        catch ucar.ma2.InvalidRangeException from label4 to label6 with label7;
    }

    private void writeDataFinish() throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable $r6, $r11;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r0;
        java.util.Date $r1, $r2, $r4, $r9, $r13, $r14;
        ucar.nc2.Attribute $r3, $r8;
        java.lang.String $r7, $r12;
        ucar.nc2.units.DateFormatter $r5, $r10;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        $r1 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date minDate>;

        if $r1 != null goto label1;

        $r14 = new java.util.Date;

        specialinvoke $r14.<java.util.Date: void <init>()>();

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date minDate> = $r14;

     label1:
        $r2 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date maxDate>;

        if $r2 != null goto label2;

        $r13 = new java.util.Date;

        specialinvoke $r13.<java.util.Date: void <init>()>();

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date maxDate> = $r13;

     label2:
        $r6 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r3 = new ucar.nc2.Attribute;

        $r5 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.units.DateFormatter dateFormatter>;

        $r4 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date minDate>;

        $r7 = virtualinvoke $r5.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r4);

        specialinvoke $r3.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("time_coverage_start", $r7);

        virtualinvoke $r6.<ucar.nc2.NetcdfFileWriteable: void updateAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>(null, $r3);

        $r11 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r8 = new ucar.nc2.Attribute;

        $r10 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.units.DateFormatter dateFormatter>;

        $r9 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date maxDate>;

        $r12 = virtualinvoke $r10.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r9);

        specialinvoke $r8.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("time_coverage_end", $r12);

        virtualinvoke $r11.<ucar.nc2.NetcdfFileWriteable: void updateAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>(null, $r8);

        return;
    }

    public void writeRecord(ucar.unidata.geoloc.Station, ucar.nc2.ft.PointFeature, ucar.ma2.StructureData) throws java.io.IOException
    {
        ucar.ma2.StructureData r5;
        ucar.nc2.ft.PointFeature r3;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r0;
        java.util.Date $r4;
        ucar.unidata.geoloc.Station r1;
        java.lang.String $r2;
        double $d0;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        r1 := @parameter0: ucar.unidata.geoloc.Station;

        r3 := @parameter1: ucar.nc2.ft.PointFeature;

        r5 := @parameter2: ucar.ma2.StructureData;

        $r2 = interfaceinvoke r1.<ucar.unidata.geoloc.Station: java.lang.String getName()>();

        $d0 = interfaceinvoke r3.<ucar.nc2.ft.PointFeature: double getObservationTime()>();

        $r4 = interfaceinvoke r3.<ucar.nc2.ft.PointFeature: java.util.Date getObservationTimeAsDate()>();

        virtualinvoke r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: void writeRecord(java.lang.String,double,java.util.Date,ucar.ma2.StructureData)>($r2, $d0, $r4, r5);

        return;
    }

    public void writeRecord(java.lang.String, double, java.util.Date, ucar.ma2.StructureData) throws java.io.IOException
    {
        java.lang.IllegalStateException $r19;
        java.util.Date $r9, r10, $r11, $r12, $r20;
        java.lang.Integer r4;
        ucar.ma2.StructureData r6;
        int[] $r8, $r23, $r25, $r27, $r30;
        boolean $z0, $z1;
        ucar.ma2.StructureMembers $r7;
        ucar.ma2.ArrayDouble$D1 $r21, $r28;
        java.lang.StringBuilder $r14, $r15, $r16;
        ucar.nc2.NetcdfFileWriteable $r24, $r26, $r29;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r0;
        java.util.HashMap $r2;
        ucar.ma2.ArrayStructureW $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1, $r17;
        double d0;
        java.lang.RuntimeException $r13;
        ucar.ma2.ArrayInt$D1 $r22, $r31;
        ucar.ma2.InvalidRangeException $r18;
        java.lang.Object $r3;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        r10 := @parameter2: java.util.Date;

        r6 := @parameter3: ucar.ma2.StructureData;

        $r2 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.HashMap stationMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label1;

        $r13 = new java.lang.RuntimeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant find station ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label1:
        $r5 = new ucar.ma2.ArrayStructureW;

        $r7 = virtualinvoke r6.<ucar.ma2.StructureData: ucar.ma2.StructureMembers getStructureMembers()>();

        $r8 = newarray (int)[1];

        $r8[0] = 1;

        specialinvoke $r5.<ucar.ma2.ArrayStructureW: void <init>(ucar.ma2.StructureMembers,int[])>($r7, $r8);

        virtualinvoke $r5.<ucar.ma2.ArrayStructureW: void setStructureData(ucar.ma2.StructureData,int)>(r6, 0);

        $r9 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date minDate>;

        if $r9 == null goto label2;

        $r12 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date minDate>;

        $z1 = virtualinvoke $r12.<java.util.Date: boolean after(java.util.Date)>(r10);

        if $z1 == 0 goto label3;

     label2:
        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date minDate> = r10;

     label3:
        $r20 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date maxDate>;

        if $r20 == null goto label4;

        $r11 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date maxDate>;

        $z0 = virtualinvoke $r11.<java.util.Date: boolean before(java.util.Date)>(r10);

        if $z0 == 0 goto label5;

     label4:
        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: java.util.Date maxDate> = r10;

     label5:
        $r21 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.ma2.ArrayDouble$D1 timeArray>;

        virtualinvoke $r21.<ucar.ma2.ArrayDouble$D1: void set(int,double)>(0, d0);

        $r22 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.ma2.ArrayInt$D1 parentArray>;

        $i2 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        virtualinvoke $r22.<ucar.ma2.ArrayInt$D1: void set(int,int)>(0, $i2);

        $r23 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int[] origin>;

        $i3 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int recno>;

        $r23[0] = $i3;

     label6:
        $r24 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r25 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int[] origin>;

        virtualinvoke $r24.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>("record", $r25, $r5);

        $r26 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r27 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int[] origin>;

        $r28 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.ma2.ArrayDouble$D1 timeArray>;

        virtualinvoke $r26.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>("time", $r27, $r28);

        $r29 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        $r30 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int[] origin>;

        $r31 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.ma2.ArrayInt$D1 parentArray>;

        virtualinvoke $r29.<ucar.nc2.NetcdfFileWriteable: void write(java.lang.String,int[],ucar.ma2.Array)>("stationIndex", $r30, $r31);

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;

        virtualinvoke $r18.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r18);

        throw $r19;

     label9:
        $i0 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int recno>;

        $i1 = $i0 + 1;

        r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: int recno> = $i1;

        return;

        catch ucar.ma2.InvalidRangeException from label6 to label7 with label8;
    }

    public void finish() throws java.io.IOException
    {
        ucar.nc2.NetcdfFileWriteable $r1;
        ucar.nc2.ft.point.writer.WriterCFStationCollection r0;

        r0 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        specialinvoke r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: void writeDataFinish()>();

        $r1 = r0.<ucar.nc2.ft.point.writer.WriterCFStationCollection: ucar.nc2.NetcdfFileWriteable ncfile>;

        virtualinvoke $r1.<ucar.nc2.NetcdfFileWriteable: void close()>();

        return;
    }

    private ucar.unidata.geoloc.LatLonRect getBoundingBox(java.util.List)
    {
        ucar.nc2.ft.point.writer.WriterCFStationCollection r5;
        ucar.unidata.geoloc.Station r6, r7;
        ucar.unidata.geoloc.LatLonRect $r3;
        java.util.List r0;
        int $i0, i1;
        java.lang.Object $r1, $r4;
        ucar.unidata.geoloc.LatLonPointImpl $r2;
        double $d0, $d1, $d2, $d3;

        r5 := @this: ucar.nc2.ft.point.writer.WriterCFStationCollection;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r6 = (ucar.unidata.geoloc.Station) $r1;

        $r2 = new ucar.unidata.geoloc.LatLonPointImpl;

        specialinvoke $r2.<ucar.unidata.geoloc.LatLonPointImpl: void <init>()>();

        $d0 = interfaceinvoke r6.<ucar.unidata.geoloc.Station: double getLatitude()>();

        $d1 = interfaceinvoke r6.<ucar.unidata.geoloc.Station: double getLongitude()>();

        virtualinvoke $r2.<ucar.unidata.geoloc.LatLonPointImpl: void set(double,double)>($d0, $d1);

        $r3 = new ucar.unidata.geoloc.LatLonRect;

        specialinvoke $r3.<ucar.unidata.geoloc.LatLonRect: void <init>(ucar.unidata.geoloc.LatLonPoint,double,double)>($r2, 0.001, 0.001);

        i1 = 1;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r7 = (ucar.unidata.geoloc.Station) $r4;

        $d2 = interfaceinvoke r7.<ucar.unidata.geoloc.Station: double getLatitude()>();

        $d3 = interfaceinvoke r7.<ucar.unidata.geoloc.Station: double getLongitude()>();

        virtualinvoke $r2.<ucar.unidata.geoloc.LatLonPointImpl: void set(double,double)>($d2, $d3);

        virtualinvoke $r3.<ucar.unidata.geoloc.LatLonRect: void extend(ucar.unidata.geoloc.LatLonPoint)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public static void <clinit>()
    {
        <ucar.nc2.ft.point.writer.WriterCFStationCollection: boolean debug> = 0;

        <ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String stationIndexName> = "stationIndex";

        <ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String wmoName> = "wmo_id";

        <ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String descName> = "station_description";

        <ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String idName> = "station_id";

        <ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String timeName> = "time";

        <ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String altName> = "altitude";

        <ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String lonName> = "longitude";

        <ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String latName> = "latitude";

        <ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String stationDimName> = "station";

        <ucar.nc2.ft.point.writer.WriterCFStationCollection: java.lang.String recordDimName> = "record";

        return;
    }
}
