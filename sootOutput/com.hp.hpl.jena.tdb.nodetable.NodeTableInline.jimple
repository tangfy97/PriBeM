public class com.hp.hpl.jena.tdb.nodetable.NodeTableInline extends com.hp.hpl.jena.tdb.nodetable.NodeTableWrapper
{

    public static com.hp.hpl.jena.tdb.nodetable.NodeTable create(com.hp.hpl.jena.tdb.nodetable.NodeTable)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTableInline $r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r1;

        r1 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        $r0 = new com.hp.hpl.jena.tdb.nodetable.NodeTableInline;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.nodetable.NodeTableInline: void <init>(com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r1);

        return $r0;
    }

    private void <init>(com.hp.hpl.jena.tdb.nodetable.NodeTable)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTableInline r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r1;

        r0 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTableInline;

        r1 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        specialinvoke r0.<com.hp.hpl.jena.tdb.nodetable.NodeTableWrapper: void <init>(com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r1);

        return;
    }

    public final com.hp.hpl.jena.tdb.store.NodeId getAllocateNodeId(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.NodeId $r1, $r3;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTableInline r2;

        r2 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTableInline;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId inline(com.hp.hpl.jena.graph.Node)>(r0);

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r3 = specialinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTableWrapper: com.hp.hpl.jena.tdb.store.NodeId getAllocateNodeId(com.hp.hpl.jena.graph.Node)>(r0);

        return $r3;
    }

    public final com.hp.hpl.jena.tdb.store.NodeId getNodeIdForNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.NodeId $r1, $r3;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTableInline r2;

        r2 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTableInline;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId inline(com.hp.hpl.jena.graph.Node)>(r0);

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r3 = specialinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTableWrapper: com.hp.hpl.jena.tdb.store.NodeId getNodeIdForNode(com.hp.hpl.jena.graph.Node)>(r0);

        return $r3;
    }

    public final com.hp.hpl.jena.graph.Node getNodeForNodeId(com.hp.hpl.jena.tdb.store.NodeId)
    {
        com.hp.hpl.jena.tdb.store.NodeId r0;
        com.hp.hpl.jena.graph.Node $r1, $r3;
        com.hp.hpl.jena.tdb.nodetable.NodeTableInline r2;

        r2 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTableInline;

        r0 := @parameter0: com.hp.hpl.jena.tdb.store.NodeId;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.graph.Node extract(com.hp.hpl.jena.tdb.store.NodeId)>(r0);

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r3 = specialinvoke r2.<com.hp.hpl.jena.tdb.nodetable.NodeTableWrapper: com.hp.hpl.jena.graph.Node getNodeForNodeId(com.hp.hpl.jena.tdb.store.NodeId)>(r0);

        return $r3;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTableInline r2;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r3;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r4, $r7;

        r2 := @this: com.hp.hpl.jena.tdb.nodetable.NodeTableInline;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inline(");

        $r3 = r2.<com.hp.hpl.jena.tdb.nodetable.NodeTableInline: com.hp.hpl.jena.tdb.nodetable.NodeTable nodeTable>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
