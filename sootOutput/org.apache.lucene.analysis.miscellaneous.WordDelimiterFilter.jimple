public final class org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter extends org.apache.lucene.analysis.TokenFilter
{
    public static final int LOWER;
    public static final int UPPER;
    public static final int DIGIT;
    public static final int SUBWORD_DELIM;
    public static final int ALPHA;
    public static final int ALPHANUM;
    public static final int GENERATE_WORD_PARTS;
    public static final int GENERATE_NUMBER_PARTS;
    public static final int CATENATE_WORDS;
    public static final int CATENATE_NUMBERS;
    public static final int CATENATE_ALL;
    public static final int PRESERVE_ORIGINAL;
    public static final int SPLIT_ON_CASE_CHANGE;
    public static final int SPLIT_ON_NUMERICS;
    public static final int STEM_ENGLISH_POSSESSIVE;
    final org.apache.lucene.analysis.util.CharArraySet protWords;
    private final int flags;
    private final org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute;
    private final org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute;
    private final org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAttribute;
    private final org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAttribute;
    private final org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator;
    private final org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat;
    private int lastConcatCount;
    private final org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concatAll;
    private int accumPosInc;
    private char[] savedBuffer;
    private int savedStartOffset;
    private int savedEndOffset;
    private java.lang.String savedType;
    private boolean hasSavedState;
    private boolean hasIllegalOffsets;
    private boolean hasOutputToken;
    private boolean hasOutputFollowingOriginal;

    public void <init>(org.apache.lucene.analysis.TokenStream, byte[], int, org.apache.lucene.analysis.util.CharArraySet)
    {
        byte[] r15;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator $r14;
        int i0;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation $r10, $r11;
        boolean $z0, $z1, $z2;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r3;
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r7;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r5;
        char[] $r12;
        org.apache.lucene.analysis.util.CharArraySet r13;
        org.apache.lucene.util.Attribute $r2, $r4, $r6, $r8;
        org.apache.lucene.analysis.tokenattributes.TypeAttribute $r9;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        r15 := @parameter1: byte[];

        i0 := @parameter2: int;

        r13 := @parameter3: org.apache.lucene.analysis.util.CharArraySet;

        specialinvoke r0.<org.apache.lucene.analysis.TokenFilter: void <init>(org.apache.lucene.analysis.TokenStream)>(r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        $r3 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r2;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r5 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r4;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute> = $r5;

        $r6 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        $r7 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r6;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAttribute> = $r7;

        $r8 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/TypeAttribute;");

        $r9 = (org.apache.lucene.analysis.tokenattributes.TypeAttribute) $r8;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAttribute> = $r9;

        $r10 = new org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation;

        specialinvoke $r10.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: void <init>(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter)>(r0);

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat> = $r10;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int lastConcatCount> = 0;

        $r11 = new org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation;

        specialinvoke $r11.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: void <init>(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter)>(r0);

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concatAll> = $r11;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc> = 0;

        $r12 = newarray (char)[1024];

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: char[] savedBuffer> = $r12;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasSavedState> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasIllegalOffsets> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasOutputToken> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasOutputFollowingOriginal> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int flags> = i0;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.util.CharArraySet protWords> = r13;

        $r14 = new org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator;

        $z0 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(64);

        $z1 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(128);

        $z2 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(256);

        specialinvoke $r14.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: void <init>(byte[],boolean,boolean,boolean)>(r15, $z0, $z1, $z2);

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator> = $r14;

        return;
    }

    public void <init>(org.apache.lucene.analysis.TokenStream, int, org.apache.lucene.analysis.util.CharArraySet)
    {
        byte[] $r3;
        org.apache.lucene.analysis.TokenStream r1;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        int i0;
        org.apache.lucene.analysis.util.CharArraySet r2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.lucene.analysis.util.CharArraySet;

        $r3 = <org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: byte[] DEFAULT_WORD_DELIM_TABLE>;

        specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: void <init>(org.apache.lucene.analysis.TokenStream,byte[],int,org.apache.lucene.analysis.util.CharArraySet)>(r1, $r3, i0, r2);

        return;
    }

    public boolean incrementToken() throws java.io.IOException
    {
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r24, $r30, $r31, $r33;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        org.apache.lucene.analysis.util.CharArraySet $r28, $r32;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator $r1, $r2, $r3, $r5, $r6, $r13, $r25, $r26, $r27, $r29, $r34;
        org.apache.lucene.analysis.TokenStream $r20;
        char[] $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i21;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r21, $r22;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

     label01:
        $z13 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasSavedState>;

        if $z13 != 0 goto label09;

        $r20 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.TokenStream input>;

        $z8 = virtualinvoke $r20.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z8 != 0 goto label02;

        return 0;

     label02:
        $r21 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute>;

        $i6 = interfaceinvoke $r21.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        $r22 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute>;

        $r23 = interfaceinvoke $r22.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: char[] buffer()>();

        $i7 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc>;

        $r24 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAttribute>;

        $i8 = interfaceinvoke $r24.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

        $i9 = $i7 + $i8;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc> = $i9;

        $r25 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        virtualinvoke $r25.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: void setText(char[],int)>($r23, $i6);

        $r26 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        virtualinvoke $r26.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int next()>();

        $r27 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i10 = $r27.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        if $i10 != 0 goto label03;

        $r34 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i17 = $r34.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        if $i17 == $i6 goto label04;

     label03:
        $r28 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.util.CharArraySet protWords>;

        if $r28 == null goto label05;

        $r32 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.util.CharArraySet protWords>;

        $z12 = virtualinvoke $r32.<org.apache.lucene.analysis.util.CharArraySet: boolean contains(char[],int,int)>($r23, 0, $i6);

        if $z12 == 0 goto label05;

     label04:
        $r33 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAttribute>;

        $i16 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc>;

        interfaceinvoke $r33.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: void setPositionIncrement(int)>($i16);

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc> = 0;

        return 1;

     label05:
        $r29 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i11 = $r29.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $i19 = (int) -1;

        if $i11 != $i19 goto label06;

        $z11 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(32);

        if $z11 != 0 goto label06;

        $r31 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAttribute>;

        $i13 = interfaceinvoke $r31.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

        if $i13 != 1 goto label01;

        $i14 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc>;

        $i15 = $i14 - 1;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc> = $i15;

        goto label01;

     label06:
        specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: void saveState()>();

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasOutputToken> = 0;

        $z9 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(32);

        if $z9 != 0 goto label07;

        $z14 = 1;

        goto label08;

     label07:
        $z14 = 0;

     label08:
        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasOutputFollowingOriginal> = $z14;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int lastConcatCount> = 0;

        $z10 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(32);

        if $z10 == 0 goto label09;

        $r30 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAttribute>;

        $i12 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc>;

        interfaceinvoke $r30.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: void setPositionIncrement(int)>($i12);

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc> = 0;

        return 1;

     label09:
        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i0 = $r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $i21 = (int) -1;

        if $i0 != $i21 goto label13;

        $r14 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat>;

        $z5 = virtualinvoke $r14.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: boolean isEmpty()>();

        if $z5 != 0 goto label10;

        $r19 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat>;

        $z7 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean flushConcatenation(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation)>($r19);

        if $z7 == 0 goto label10;

        return 1;

     label10:
        $r15 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concatAll>;

        $z6 = virtualinvoke $r15.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: boolean isEmpty()>();

        if $z6 != 0 goto label12;

        $r16 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concatAll>;

        $i5 = $r16.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: int subwordCount>;

        $i4 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int lastConcatCount>;

        if $i5 <= $i4 goto label11;

        $r18 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concatAll>;

        virtualinvoke $r18.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: void writeAndClear()>();

        return 1;

     label11:
        $r17 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concatAll>;

        virtualinvoke $r17.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: void clear()>();

     label12:
        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasSavedState> = 0;

        goto label01;

     label13:
        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $z0 = virtualinvoke $r2.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: boolean isSingleWord()>();

        if $z0 == 0 goto label14;

        specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: void generatePart(boolean)>(1);

        $r13 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        virtualinvoke $r13.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int next()>();

        return 1;

     label14:
        $r3 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i1 = virtualinvoke $r3.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int type()>();

        $r4 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat>;

        $z1 = virtualinvoke $r4.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: boolean isEmpty()>();

        if $z1 != 0 goto label16;

        $r11 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat>;

        $i2 = $r11.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: int type>;

        $i3 = $i2 & $i1;

        if $i3 != 0 goto label16;

        $r12 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat>;

        $z4 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean flushConcatenation(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation)>($r12);

        if $z4 == 0 goto label15;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasOutputToken> = 0;

        return 1;

     label15:
        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasOutputToken> = 0;

     label16:
        $z15 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean shouldConcatenate(int)>($i1);

        if $z15 == 0 goto label18;

        $r8 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat>;

        $z3 = virtualinvoke $r8.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: boolean isEmpty()>();

        if $z3 == 0 goto label17;

        $r10 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat>;

        $r10.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: int type> = $i1;

     label17:
        $r9 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat>;

        specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: void concatenate(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation)>($r9);

     label18:
        $z16 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(16);

        if $z16 == 0 goto label19;

        $r7 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concatAll>;

        specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: void concatenate(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation)>($r7);

     label19:
        $z2 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean shouldGenerateParts(int)>($i1);

        if $z2 == 0 goto label20;

        specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: void generatePart(boolean)>(0);

        $r6 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        virtualinvoke $r6.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int next()>();

        return 1;

     label20:
        $r5 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        virtualinvoke $r5.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int next()>();

        goto label01;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation $r1, $r2;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        specialinvoke r0.<org.apache.lucene.analysis.TokenFilter: void reset()>();

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasSavedState> = 0;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concat>;

        virtualinvoke $r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: void clear()>();

        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation concatAll>;

        virtualinvoke $r2.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: void clear()>();

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc> = 0;

        return;
    }

    private void saveState()
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r5;
        boolean $z0;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r3, $r7, $r8, $r10, $r14;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r1, $r2;
        char[] $r6, $r9, $r11, $r12, $r15;
        org.apache.lucene.analysis.tokenattributes.TypeAttribute $r4;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute>;

        $i0 = interfaceinvoke $r1.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: int startOffset()>();

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedStartOffset> = $i0;

        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute>;

        $i1 = interfaceinvoke $r2.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: int endOffset()>();

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedEndOffset> = $i1;

        $i3 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedEndOffset>;

        $i2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedStartOffset>;

        $i4 = $i3 - $i2;

        $r3 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute>;

        $i5 = interfaceinvoke $r3.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        if $i4 == $i5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasIllegalOffsets> = $z0;

        $r4 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAttribute>;

        $r5 = interfaceinvoke $r4.<org.apache.lucene.analysis.tokenattributes.TypeAttribute: java.lang.String type()>();

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: java.lang.String savedType> = $r5;

        $r6 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: char[] savedBuffer>;

        $i6 = lengthof $r6;

        $r7 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute>;

        $i7 = interfaceinvoke $r7.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        if $i6 >= $i7 goto label3;

        $r14 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute>;

        $i9 = interfaceinvoke $r14.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        $i10 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i9, 2);

        $r15 = newarray (char)[$i10];

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: char[] savedBuffer> = $r15;

     label3:
        $r8 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute>;

        $r9 = interfaceinvoke $r8.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: char[] buffer()>();

        $r11 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: char[] savedBuffer>;

        $r10 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute>;

        $i8 = interfaceinvoke $r10.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r11, 0, $i8);

        $r13 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $r12 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: char[] savedBuffer>;

        $r13.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: char[] text> = $r12;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasSavedState> = 1;

        return;
    }

    private boolean flushConcatenation(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        int $i0, $i1, $i2;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        r1 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation;

        $i0 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: int subwordCount>;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int lastConcatCount> = $i0;

        $i1 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: int subwordCount>;

        if $i1 != 1 goto label1;

        $i2 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: int type>;

        $z0 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean shouldGenerateParts(int)>($i2);

        if $z0 != 0 goto label2;

     label1:
        virtualinvoke r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: void writeAndClear()>();

        return 1;

     label2:
        virtualinvoke r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: void clear()>();

        return 0;
    }

    private boolean shouldConcatenate(int)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(4);

        if $z0 == 0 goto label1;

        $z3 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isAlpha(int)>(i0);

        if $z3 != 0 goto label2;

     label1:
        $z1 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(8);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isDigit(int)>(i0);

        if $z2 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    private boolean shouldGenerateParts(int)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(1);

        if $z0 == 0 goto label1;

        $z3 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isAlpha(int)>(i0);

        if $z3 != 0 goto label2;

     label1:
        $z1 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean has(int)>(2);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean isDigit(int)>(i0);

        if $z2 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    private void concatenate(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator $r2, $r3, $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation r0;
        boolean $z0;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r1;
        char[] $r5;

        r1 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation;

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $i8 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedStartOffset>;

        $r7 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i7 = $r7.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i9 = $i8 + $i7;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: int startOffset> = $i9;

     label1:
        $r5 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: char[] savedBuffer>;

        $r2 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i3 = $r2.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $r3 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i1 = $r3.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $r4 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i0 = $r4.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i2 = $i1 - $i0;

        virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: void append(char[],int,int)>($r5, $i3, $i2);

        $i5 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedStartOffset>;

        $r6 = r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i4 = $r6.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $i6 = $i5 + $i4;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter$WordDelimiterConcatenation: int endOffset> = $i6;

        return;
    }

    private void generatePart(boolean)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator $r1, $r2, $r3, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r13;
        boolean $z0, z1;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r5;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r11;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r8, $r9, $r10;
        char[] $r4;
        org.apache.lucene.analysis.tokenattributes.TypeAttribute $r12;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        z1 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: void clearAttributes()>();

        $r5 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute>;

        $r4 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: char[] savedBuffer>;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i3 = $r1.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i1 = $r2.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        $r3 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i0 = $r3.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        $i2 = $i1 - $i0;

        interfaceinvoke $r5.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: void copyBuffer(char[],int,int)>($r4, $i3, $i2);

        $i5 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedStartOffset>;

        $r6 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i4 = $r6.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int current>;

        i6 = $i5 + $i4;

        $i8 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedStartOffset>;

        $r7 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator iterator>;

        $i7 = $r7.<org.apache.lucene.analysis.miscellaneous.WordDelimiterIterator: int end>;

        i9 = $i8 + $i7;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasIllegalOffsets>;

        if $z0 == 0 goto label2;

        if z1 == 0 goto label1;

        $i12 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedEndOffset>;

        if i6 > $i12 goto label1;

        $r10 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute>;

        $i13 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedEndOffset>;

        interfaceinvoke $r10.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>(i6, $i13);

        goto label3;

     label1:
        $r9 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute>;

        $i11 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedStartOffset>;

        $i10 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedEndOffset>;

        interfaceinvoke $r9.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i11, $i10);

        goto label3;

     label2:
        $r8 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute>;

        interfaceinvoke $r8.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>(i6, i9);

     label3:
        $r11 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAttribute>;

        $i14 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int position(boolean)>(0);

        interfaceinvoke $r11.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: void setPositionIncrement(int)>($i14);

        $r12 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAttribute>;

        $r13 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: java.lang.String savedType>;

        interfaceinvoke $r12.<org.apache.lucene.analysis.tokenattributes.TypeAttribute: void setType(java.lang.String)>($r13);

        return;
    }

    private int position(boolean)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        int i0, $i1, $i2;
        boolean $z0, $z1, z2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        z2 := @parameter0: boolean;

        i0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc>;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasOutputToken>;

        if $z0 == 0 goto label3;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc> = 0;

        if z2 == 0 goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(1, i0);

     label2:
        return $i2;

     label3:
        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasOutputToken> = 1;

        $z1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasOutputFollowingOriginal>;

        if $z1 != 0 goto label4;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasOutputFollowingOriginal> = 1;

        return 0;

     label4:
        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc> = 0;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(1, i0);

        return $i1;
    }

    static boolean isAlpha(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 3;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static boolean isDigit(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static boolean isSubwordDelim(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static boolean isUpper(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean has(int)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int flags>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static org.apache.lucene.analysis.tokenattributes.CharTermAttribute access$000(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r1;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute>;

        return $r1;
    }

    static boolean access$100(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: boolean hasIllegalOffsets>;

        return $z0;
    }

    static int access$200(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter)
    {
        int $i0;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        $i0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedStartOffset>;

        return $i0;
    }

    static int access$300(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter)
    {
        int $i0;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        $i0 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int savedEndOffset>;

        return $i0;
    }

    static org.apache.lucene.analysis.tokenattributes.OffsetAttribute access$400(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter)
    {
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r1;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute>;

        return $r1;
    }

    static int access$500(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter, boolean)
    {
        int $i0;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        boolean z0;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        z0 := @parameter1: boolean;

        $i0 = specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int position(boolean)>(z0);

        return $i0;
    }

    static org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute access$600(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter)
    {
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r1;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncAttribute>;

        return $r1;
    }

    static java.lang.String access$700(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter)
    {
        java.lang.String $r1;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: java.lang.String savedType>;

        return $r1;
    }

    static org.apache.lucene.analysis.tokenattributes.TypeAttribute access$800(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter)
    {
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;
        org.apache.lucene.analysis.tokenattributes.TypeAttribute $r1;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAttribute>;

        return $r1;
    }

    static int access$902(org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter, int)
    {
        int i0;
        org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter r0;

        r0 := @parameter0: org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter;

        i0 := @parameter1: int;

        r0.<org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int accumPosInc> = i0;

        return i0;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int STEM_ENGLISH_POSSESSIVE> = 256;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int SPLIT_ON_NUMERICS> = 128;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int SPLIT_ON_CASE_CHANGE> = 64;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int PRESERVE_ORIGINAL> = 32;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int CATENATE_ALL> = 16;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int CATENATE_NUMBERS> = 8;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int CATENATE_WORDS> = 4;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int GENERATE_NUMBER_PARTS> = 2;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int GENERATE_WORD_PARTS> = 1;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int ALPHANUM> = 7;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int ALPHA> = 3;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int SUBWORD_DELIM> = 8;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int DIGIT> = 4;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int UPPER> = 2;

        <org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter: int LOWER> = 1;

        return;
    }
}
