class com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1 extends com.sun.xml.bind.v2.schemagen.Tree$Term
{
    final com.sun.xml.bind.v2.model.core.ElementPropertyInfo val$ep;
    final com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace this$1;

    void <init>(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace, com.sun.xml.bind.v2.model.core.ElementPropertyInfo)
    {
        com.sun.xml.bind.v2.model.core.ElementPropertyInfo r2;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1 r0;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace r1;

        r0 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1;

        r1 := @parameter0: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace;

        r2 := @parameter1: com.sun.xml.bind.v2.model.core.ElementPropertyInfo;

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace this$1> = r1;

        r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1: com.sun.xml.bind.v2.model.core.ElementPropertyInfo val$ep> = r2;

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.Tree$Term: void <init>()>();

        return;
    }

    protected void write(com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer, boolean, boolean)
    {
        com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement $r6;
        com.sun.xml.bind.v2.model.core.TypeRef r4;
        java.lang.String $r8;
        com.sun.xml.bind.v2.schemagen.Form $r13;
        boolean z0, z1, $z2, $z3;
        com.sun.xml.bind.v2.model.core.ElementPropertyInfo $r1, $r14;
        com.sun.xml.bind.v2.schemagen.xmlschema.List $r10;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1 r0;
        java.util.List $r2;
        com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer r5;
        com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType $r9;
        java.lang.Object $r3;
        javax.xml.namespace.QName $r7;
        com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace $r11, $r12;

        r0 := @this: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1;

        r5 := @parameter0: com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1: com.sun.xml.bind.v2.model.core.ElementPropertyInfo val$ep>;

        $r2 = interfaceinvoke $r1.<com.sun.xml.bind.v2.model.core.ElementPropertyInfo: java.util.List getTypes()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (com.sun.xml.bind.v2.model.core.TypeRef) $r3;

        $r6 = interfaceinvoke r5.<com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer: com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement element()>();

        interfaceinvoke $r6.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement: void block()>();

        $r7 = interfaceinvoke r4.<com.sun.xml.bind.v2.model.core.TypeRef: javax.xml.namespace.QName getTagName()>();

        $r8 = virtualinvoke $r7.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        interfaceinvoke $r6.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement: com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement name(java.lang.String)>($r8);

        $r9 = interfaceinvoke $r6.<com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement: com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType simpleType()>();

        $r10 = interfaceinvoke $r9.<com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType: com.sun.xml.bind.v2.schemagen.xmlschema.List list()>();

        $r11 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace this$1>;

        staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: void access$1800(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace,com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost,com.sun.xml.bind.v2.model.core.NonElementRef,java.lang.String)>($r11, $r10, r4, "itemType");

        $r12 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1: com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace this$1>;

        $r13 = staticinvoke <com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace: com.sun.xml.bind.v2.schemagen.Form access$1900(com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace)>($r12);

        virtualinvoke $r13.<com.sun.xml.bind.v2.schemagen.Form: void writeForm(com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement,javax.xml.namespace.QName)>($r6, $r7);

        if z0 != 0 goto label1;

        $r14 = r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1: com.sun.xml.bind.v2.model.core.ElementPropertyInfo val$ep>;

        $z2 = interfaceinvoke $r14.<com.sun.xml.bind.v2.model.core.ElementPropertyInfo: boolean isRequired()>();

        if $z2 != 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        virtualinvoke r0.<com.sun.xml.bind.v2.schemagen.XmlSchemaGenerator$Namespace$1: void writeOccurs(com.sun.xml.bind.v2.schemagen.xmlschema.Occurs,boolean,boolean)>($r6, $z3, z1);

        return;
    }
}
