public final class org.apache.poi.hsmf.parsers.POIFSChunkParser extends java.lang.Object
{
    private static org.apache.poi.util.POILogger logger;

    public void <init>()
    {
        org.apache.poi.hsmf.parsers.POIFSChunkParser r0;

        r0 := @this: org.apache.poi.hsmf.parsers.POIFSChunkParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.poi.hsmf.datatypes.ChunkGroup[] parse(org.apache.poi.poifs.filesystem.POIFSFileSystem) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r1;
        org.apache.poi.hsmf.datatypes.ChunkGroup[] $r2;
        org.apache.poi.poifs.filesystem.POIFSFileSystem r0;

        r0 := @parameter0: org.apache.poi.poifs.filesystem.POIFSFileSystem;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.POIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        $r2 = staticinvoke <org.apache.poi.hsmf.parsers.POIFSChunkParser: org.apache.poi.hsmf.datatypes.ChunkGroup[] parse(org.apache.poi.poifs.filesystem.DirectoryNode)>($r1);

        return $r2;
    }

    public static org.apache.poi.hsmf.datatypes.ChunkGroup[] parse(org.apache.poi.poifs.filesystem.DirectoryNode) throws java.io.IOException
    {
        java.lang.Object[] $r6;
        org.apache.poi.poifs.filesystem.Entry r19;
        org.apache.poi.hsmf.datatypes.Chunks $r0;
        org.apache.poi.hsmf.datatypes.ChunkGroup[] $r5, $r7;
        org.apache.poi.hsmf.datatypes.AttachmentChunks $r17;
        java.util.ArrayList $r1;
        int $i0;
        java.lang.String $r11, $r12, $r13, $r15, $r18;
        org.apache.poi.hsmf.datatypes.ChunkGroup r20, r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r3, $r4;
        org.apache.poi.hsmf.datatypes.RecipientChunks $r14;
        org.apache.poi.hsmf.datatypes.NameIdChunks $r16;
        org.apache.poi.poifs.filesystem.DirectoryNode r2, r10;
        java.lang.Object $r8, $r9;

        r2 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

        $r0 = new org.apache.poi.hsmf.datatypes.Chunks;

        specialinvoke $r0.<org.apache.poi.hsmf.datatypes.Chunks: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        $r3 = virtualinvoke r2.<org.apache.poi.poifs.filesystem.DirectoryNode: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.poi.poifs.filesystem.Entry) $r9;

        $z2 = r19 instanceof org.apache.poi.poifs.filesystem.DirectoryNode;

        if $z2 == 0 goto label5;

        r10 = (org.apache.poi.poifs.filesystem.DirectoryNode) r19;

        r20 = null;

        $r11 = virtualinvoke r10.<org.apache.poi.poifs.filesystem.DirectoryNode: java.lang.String getName()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("__attach_version1.0_#");

        if $z3 == 0 goto label2;

        $r17 = new org.apache.poi.hsmf.datatypes.AttachmentChunks;

        $r18 = virtualinvoke r10.<org.apache.poi.poifs.filesystem.DirectoryNode: java.lang.String getName()>();

        specialinvoke $r17.<org.apache.poi.hsmf.datatypes.AttachmentChunks: void <init>(java.lang.String)>($r18);

        r20 = $r17;

     label2:
        $r12 = virtualinvoke r10.<org.apache.poi.poifs.filesystem.DirectoryNode: java.lang.String getName()>();

        $z4 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("__nameid_version1.0");

        if $z4 == 0 goto label3;

        $r16 = new org.apache.poi.hsmf.datatypes.NameIdChunks;

        specialinvoke $r16.<org.apache.poi.hsmf.datatypes.NameIdChunks: void <init>()>();

        r20 = $r16;

     label3:
        $r13 = virtualinvoke r10.<org.apache.poi.poifs.filesystem.DirectoryNode: java.lang.String getName()>();

        $z5 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("__recip_version1.0_#");

        if $z5 == 0 goto label4;

        $r14 = new org.apache.poi.hsmf.datatypes.RecipientChunks;

        $r15 = virtualinvoke r10.<org.apache.poi.poifs.filesystem.DirectoryNode: java.lang.String getName()>();

        specialinvoke $r14.<org.apache.poi.hsmf.datatypes.RecipientChunks: void <init>(java.lang.String)>($r15);

        r20 = $r14;

     label4:
        if r20 == null goto label5;

        staticinvoke <org.apache.poi.hsmf.parsers.POIFSChunkParser: void processChunks(org.apache.poi.poifs.filesystem.DirectoryNode,org.apache.poi.hsmf.datatypes.ChunkGroup)>(r10, r20);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r20);

     label5:
        goto label1;

     label6:
        staticinvoke <org.apache.poi.hsmf.parsers.POIFSChunkParser: void processChunks(org.apache.poi.poifs.filesystem.DirectoryNode,org.apache.poi.hsmf.datatypes.ChunkGroup)>(r2, $r0);

        $r4 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.poi.hsmf.datatypes.ChunkGroup) $r8;

        interfaceinvoke r21.<org.apache.poi.hsmf.datatypes.ChunkGroup: void chunksComplete()>();

        goto label7;

     label8:
        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r5 = newarray (org.apache.poi.hsmf.datatypes.ChunkGroup)[$i0];

        $r6 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.poi.hsmf.datatypes.ChunkGroup[]) $r6;

        return $r7;
    }

    protected static void processChunks(org.apache.poi.poifs.filesystem.DirectoryNode, org.apache.poi.hsmf.datatypes.ChunkGroup)
    {
        java.util.Iterator $r1;
        org.apache.poi.poifs.filesystem.Entry r3;
        org.apache.poi.poifs.filesystem.DirectoryNode r0;
        java.lang.Object $r2;
        java.lang.String $r4, $r6;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r5;
        org.apache.poi.hsmf.datatypes.ChunkGroup r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

        r7 := @parameter1: org.apache.poi.hsmf.datatypes.ChunkGroup;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.filesystem.DirectoryNode: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.poi.poifs.filesystem.Entry) $r2;

        $z1 = r3 instanceof org.apache.poi.poifs.filesystem.DocumentNode;

        if $z1 == 0 goto label2;

        staticinvoke <org.apache.poi.hsmf.parsers.POIFSChunkParser: void process(org.apache.poi.poifs.filesystem.Entry,org.apache.poi.hsmf.datatypes.ChunkGroup)>(r3, r7);

        goto label3;

     label2:
        $z2 = r3 instanceof org.apache.poi.poifs.filesystem.DirectoryNode;

        if $z2 == 0 goto label3;

        $r4 = interfaceinvoke r3.<org.apache.poi.poifs.filesystem.Entry: java.lang.String getName()>();

        $r5 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType DIRECTORY>;

        $r6 = virtualinvoke $r5.<org.apache.poi.hsmf.datatypes.Types$MAPIType: java.lang.String asFileEnding()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>($r6);

        if $z3 == 0 goto label3;

        staticinvoke <org.apache.poi.hsmf.parsers.POIFSChunkParser: void process(org.apache.poi.poifs.filesystem.Entry,org.apache.poi.hsmf.datatypes.ChunkGroup)>(r3, r7);

     label3:
        goto label1;

     label4:
        return;
    }

    protected static void process(org.apache.poi.poifs.filesystem.Entry, org.apache.poi.hsmf.datatypes.ChunkGroup)
    {
        org.apache.poi.poifs.filesystem.Entry r0;
        org.apache.poi.hsmf.datatypes.ByteChunk $r45;
        org.apache.poi.hsmf.datatypes.ChunkGroup r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.poi.hsmf.datatypes.StringChunk $r47;
        org.apache.poi.hsmf.datatypes.MAPIProperty $r12;
        org.apache.poi.hsmf.datatypes.Chunk r38;
        org.apache.poi.util.POILogger $r29;
        org.apache.poi.hsmf.datatypes.StoragePropertiesChunk $r41;
        org.apache.poi.hsmf.datatypes.DirectoryChunk $r46;
        org.apache.poi.poifs.filesystem.DirectoryNode $r22;
        org.apache.poi.hsmf.datatypes.MessagePropertiesChunk $r40;
        java.lang.StringBuilder $r6, $r7, $r30, $r32, $r33, $r35, $r42, $r49;
        org.apache.poi.hsmf.datatypes.MessageSubmissionChunk $r44;
        org.apache.poi.poifs.filesystem.DocumentNode $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        java.lang.String $r1, $r2, $r3, $r8, $r9, $r10, $r31, $r34, $r36;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r11, $r13, $r14, $r15, $r20, r39;
        java.io.IOException $r27;
        java.lang.NumberFormatException $r37;
        java.lang.IllegalArgumentException $r43;
        org.apache.poi.poifs.filesystem.DocumentInputStream $r48;

        r0 := @parameter0: org.apache.poi.poifs.filesystem.Entry;

        r17 := @parameter1: org.apache.poi.hsmf.datatypes.ChunkGroup;

        $r1 = interfaceinvoke r0.<org.apache.poi.poifs.filesystem.Entry: java.lang.String getName()>();

        r38 = null;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("__properties_version1.0");

        if $z0 == 0 goto label02;

        $z5 = r17 instanceof org.apache.poi.hsmf.datatypes.Chunks;

        if $z5 == 0 goto label01;

        $r40 = new org.apache.poi.hsmf.datatypes.MessagePropertiesChunk;

        specialinvoke $r40.<org.apache.poi.hsmf.datatypes.MessagePropertiesChunk: void <init>(org.apache.poi.hsmf.datatypes.ChunkGroup)>(r17);

        r38 = $r40;

        goto label16;

     label01:
        $r41 = new org.apache.poi.hsmf.datatypes.StoragePropertiesChunk;

        specialinvoke $r41.<org.apache.poi.hsmf.datatypes.StoragePropertiesChunk: void <init>(org.apache.poi.hsmf.datatypes.ChunkGroup)>(r17);

        r38 = $r41;

        goto label16;

     label02:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= 9 goto label03;

        return;

     label03:
        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(95);

        $i11 = (int) -1;

        if $i1 != $i11 goto label04;

        return;

     label04:
        $i2 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(95);

        $i3 = $i2 + 1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $i4 = $i2 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i4);

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Olk10SideProps");

        if $z1 != 0 goto label05;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Olk10SideProps_");

        if $z2 == 0 goto label06;

     label05:
        return;

     label06:
        $i5 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i6 = $i5 - 8;

        if $i2 > $i6 goto label07;

        goto label08;

     label07:
        $r43 = new java.lang.IllegalArgumentException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid chunk name ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r43;

     label08:
        $r9 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r9, 16);

        $r10 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(4, 8);

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r10, 16);

        $r11 = staticinvoke <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType getById(int)>($i8);

        r39 = $r11;

        if $r11 != null goto label09;

        r39 = staticinvoke <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType createCustom(int)>($i8);

     label09:
        $r12 = <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty MESSAGE_SUBMISSION_ID>;

        $i9 = $r12.<org.apache.poi.hsmf.datatypes.MAPIProperty: int id>;

        if $i7 != $i9 goto label10;

        $r44 = new org.apache.poi.hsmf.datatypes.MessageSubmissionChunk;

        specialinvoke $r44.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: void <init>(java.lang.String,int,org.apache.poi.hsmf.datatypes.Types$MAPIType)>($r2, $i7, r39);

        r38 = $r44;

        goto label14;

     label10:
        $r13 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType BINARY>;

        if r39 != $r13 goto label11;

        $r45 = new org.apache.poi.hsmf.datatypes.ByteChunk;

        specialinvoke $r45.<org.apache.poi.hsmf.datatypes.ByteChunk: void <init>(java.lang.String,int,org.apache.poi.hsmf.datatypes.Types$MAPIType)>($r2, $i7, r39);

        r38 = $r45;

        goto label14;

     label11:
        $r14 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType DIRECTORY>;

        if r39 != $r14 goto label12;

        $z4 = r0 instanceof org.apache.poi.poifs.filesystem.DirectoryNode;

        if $z4 == 0 goto label14;

        $r46 = new org.apache.poi.hsmf.datatypes.DirectoryChunk;

        $r22 = (org.apache.poi.poifs.filesystem.DirectoryNode) r0;

        specialinvoke $r46.<org.apache.poi.hsmf.datatypes.DirectoryChunk: void <init>(org.apache.poi.poifs.filesystem.DirectoryNode,java.lang.String,int,org.apache.poi.hsmf.datatypes.Types$MAPIType)>($r22, $r2, $i7, r39);

        r38 = $r46;

        goto label14;

     label12:
        $r15 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if r39 == $r15 goto label13;

        $r20 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType UNICODE_STRING>;

        if r39 != $r20 goto label14;

     label13:
        $r47 = new org.apache.poi.hsmf.datatypes.StringChunk;

        specialinvoke $r47.<org.apache.poi.hsmf.datatypes.StringChunk: void <init>(java.lang.String,int,org.apache.poi.hsmf.datatypes.Types$MAPIType)>($r2, $i7, r39);

        r38 = $r47;

     label14:
        goto label16;

     label15:
        $r37 := @caughtexception;

        return;

     label16:
        if r38 == null goto label21;

        $z3 = r0 instanceof org.apache.poi.poifs.filesystem.DocumentNode;

        if $z3 == 0 goto label20;

     label17:
        $r48 = new org.apache.poi.poifs.filesystem.DocumentInputStream;

        $r19 = (org.apache.poi.poifs.filesystem.DocumentNode) r0;

        specialinvoke $r48.<org.apache.poi.poifs.filesystem.DocumentInputStream: void <init>(org.apache.poi.poifs.filesystem.DocumentEntry)>($r19);

        virtualinvoke r38.<org.apache.poi.hsmf.datatypes.Chunk: void readValue(java.io.InputStream)>($r48);

        interfaceinvoke r17.<org.apache.poi.hsmf.datatypes.ChunkGroup: void record(org.apache.poi.hsmf.datatypes.Chunk)>(r38);

     label18:
        goto label21;

     label19:
        $r27 := @caughtexception;

        $r29 = <org.apache.poi.hsmf.parsers.POIFSChunkParser: org.apache.poi.util.POILogger logger>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading from part ");

        $r31 = interfaceinvoke r0.<org.apache.poi.poifs.filesystem.Entry: java.lang.String getName()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r34 = virtualinvoke $r27.<java.io.IOException: java.lang.String toString()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(7, $r36);

        goto label21;

     label20:
        interfaceinvoke r17.<org.apache.poi.hsmf.datatypes.ChunkGroup: void record(org.apache.poi.hsmf.datatypes.Chunk)>(r38);

     label21:
        return;

        catch java.lang.NumberFormatException from label08 to label14 with label15;
        catch java.io.IOException from label17 to label18 with label19;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hsmf/parsers/POIFSChunkParser;");

        <org.apache.poi.hsmf.parsers.POIFSChunkParser: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
