public class org.codehaus.jackson.util.VersionUtil extends java.lang.Object
{
    public static final java.lang.String VERSION_FILE;
    private static final java.util.regex.Pattern VERSION_SEPARATOR;

    public void <init>()
    {
        org.codehaus.jackson.util.VersionUtil r0;

        r0 := @this: org.codehaus.jackson.util.VersionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.codehaus.jackson.Version versionFor(java.lang.Class)
    {
        java.lang.Throwable $r8;
        org.codehaus.jackson.Version r11, $r12;
        java.io.IOException $r5, $r6, $r9;
        java.lang.RuntimeException $r7, $r10;
        java.io.InputStreamReader $r3;
        java.lang.Class r0;
        java.io.BufferedReader $r2;
        java.lang.String $r4;
        java.io.InputStream $r1;

        r0 := @parameter0: java.lang.Class;

        r11 = null;

     label01:
        $r1 = virtualinvoke r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("VERSION.txt");

        if $r1 == null goto label11;

     label02:
        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r1, "UTF-8");

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        $r4 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        r11 = staticinvoke <org.codehaus.jackson.util.VersionUtil: org.codehaus.jackson.Version parseVersion(java.lang.String)>($r4);

     label03:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label04:
        goto label11;

     label05:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label06:
        $r8 := @caughtexception;

     label07:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label10:
        throw $r8;

     label11:
        goto label13;

     label12:
        $r5 := @caughtexception;

     label13:
        if r11 != null goto label14;

        $r12 = staticinvoke <org.codehaus.jackson.Version: org.codehaus.jackson.Version unknownVersion()>();

        goto label15;

     label14:
        $r12 = r11;

     label15:
        return $r12;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.io.IOException from label01 to label11 with label12;
    }

    public static org.codehaus.jackson.Version parseVersion(java.lang.String)
    {
        org.codehaus.jackson.Version $r5;
        java.lang.String[] $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7;
        java.lang.String $r0, $r3, $r4, $r6, r7, $r8;
        java.util.regex.Pattern $r1;

        r7 := @parameter0: java.lang.String;

        if r7 != null goto label1;

        return null;

     label1:
        $r0 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        $r1 = <org.codehaus.jackson.util.VersionUtil: java.util.regex.Pattern VERSION_SEPARATOR>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>($r0);

        $i1 = lengthof $r2;

        if $i1 >= 2 goto label3;

        return null;

     label3:
        $r3 = $r2[0];

        $i2 = staticinvoke <org.codehaus.jackson.util.VersionUtil: int parseVersionPart(java.lang.String)>($r3);

        $r4 = $r2[1];

        $i3 = staticinvoke <org.codehaus.jackson.util.VersionUtil: int parseVersionPart(java.lang.String)>($r4);

        $i4 = lengthof $r2;

        if $i4 <= 2 goto label4;

        $r6 = $r2[2];

        $i7 = staticinvoke <org.codehaus.jackson.util.VersionUtil: int parseVersionPart(java.lang.String)>($r6);

        goto label5;

     label4:
        $i7 = 0;

     label5:
        i5 = $i7;

        $i6 = lengthof $r2;

        if $i6 <= 3 goto label6;

        $r8 = $r2[3];

        goto label7;

     label6:
        $r8 = null;

     label7:
        $r5 = new org.codehaus.jackson.Version;

        specialinvoke $r5.<org.codehaus.jackson.Version: void <init>(int,int,int,java.lang.String)>($i2, $i3, i5, $r8);

        return $r5;
    }

    protected static int parseVersionPart(java.lang.String)
    {
        char $c1;
        int $i0, $i2, $i3, i4, i5, $i6, $i7, $i8;
        java.lang.String $r0, r1;

        r1 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r1.<java.lang.String: java.lang.String toString()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i4 = 0;

        i5 = 0;

     label1:
        if i5 >= $i0 goto label3;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c1;

        if $i6 > 57 goto label3;

        $i7 = (int) $c1;

        if $i7 >= 48 goto label2;

        goto label3;

     label2:
        $i3 = i4 * 10;

        $i8 = (int) $c1;

        $i2 = $i8 - 48;

        i4 = $i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label3:
        return i4;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.codehaus.jackson.util.VersionUtil: java.lang.String VERSION_FILE> = "VERSION.txt";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[-_./;:]");

        <org.codehaus.jackson.util.VersionUtil: java.util.regex.Pattern VERSION_SEPARATOR> = $r0;

        return;
    }
}
