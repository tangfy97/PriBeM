public final class org.springframework.core.convert.ConverterNotFoundException extends org.springframework.core.convert.ConversionException
{
    private final org.springframework.core.convert.TypeDescriptor sourceType;
    private final org.springframework.core.convert.TypeDescriptor targetType;

    public void <init>(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.ConverterNotFoundException r0;
        org.springframework.core.convert.TypeDescriptor r2, r6;
        java.lang.StringBuilder $r1, $r4, $r5, $r8, $r9;
        java.lang.String $r3, $r7, $r10;

        r0 := @this: org.springframework.core.convert.ConverterNotFoundException;

        r2 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r6 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("No converter found capable of converting from \'");

        $r3 = virtualinvoke r2.<org.springframework.core.convert.TypeDescriptor: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r7 = virtualinvoke r6.<org.springframework.core.convert.TypeDescriptor: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.springframework.core.convert.ConversionException: void <init>(java.lang.String)>($r10);

        r0.<org.springframework.core.convert.ConverterNotFoundException: org.springframework.core.convert.TypeDescriptor sourceType> = r2;

        r0.<org.springframework.core.convert.ConverterNotFoundException: org.springframework.core.convert.TypeDescriptor targetType> = r6;

        return;
    }

    public org.springframework.core.convert.TypeDescriptor getSourceType()
    {
        org.springframework.core.convert.TypeDescriptor $r1;
        org.springframework.core.convert.ConverterNotFoundException r0;

        r0 := @this: org.springframework.core.convert.ConverterNotFoundException;

        $r1 = r0.<org.springframework.core.convert.ConverterNotFoundException: org.springframework.core.convert.TypeDescriptor sourceType>;

        return $r1;
    }

    public org.springframework.core.convert.TypeDescriptor getTargetType()
    {
        org.springframework.core.convert.TypeDescriptor $r1;
        org.springframework.core.convert.ConverterNotFoundException r0;

        r0 := @this: org.springframework.core.convert.ConverterNotFoundException;

        $r1 = r0.<org.springframework.core.convert.ConverterNotFoundException: org.springframework.core.convert.TypeDescriptor targetType>;

        return $r1;
    }
}
