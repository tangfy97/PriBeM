public final class com.mycila.inject.internal.guava.primitives.Booleans extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.primitives.Booleans r0;

        r0 := @this: com.mycila.inject.internal.guava.primitives.Booleans;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int hashCode(boolean)
    {
        short $s0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $s0 = 1231;

        goto label2;

     label1:
        $s0 = 1237;

     label2:
        return $s0;
    }

    public static int compare(boolean, boolean)
    {
        byte $b0;
        boolean z0, z1;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z0 != z1 goto label1;

        $b0 = 0;

        goto label3;

     label1:
        if z0 == 0 goto label2;

        $b0 = 1;

        goto label3;

     label2:
        $b0 = -1;

     label3:
        return $b0;
    }

    public static boolean contains(boolean[], boolean)
    {
        boolean[] r0;
        int i0, i1;
        boolean z0, z1;

        r0 := @parameter0: boolean[];

        z1 := @parameter1: boolean;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        z0 = r0[i1];

        if z0 != z1 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static int indexOf(boolean[], boolean)
    {
        boolean[] r0;
        int $i0, $i1;
        boolean z0;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        $i0 = lengthof r0;

        $i1 = staticinvoke <com.mycila.inject.internal.guava.primitives.Booleans: int indexOf(boolean[],boolean,int,int)>(r0, z0, 0, $i0);

        return $i1;
    }

    private static int indexOf(boolean[], boolean, int, int)
    {
        int i0, i1, i2, $i4;
        boolean[] r0;
        boolean z0, $z1;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = i0;

     label1:
        if i2 >= i1 goto label3;

        $z1 = r0[i2];

        if $z1 != z0 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i4 = (int) -1;

        return $i4;
    }

    public static int indexOf(boolean[], boolean[])
    {
        boolean[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i10;
        boolean $z0, $z1;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: boolean[];

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "array");

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "target");

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i7 = 0;

     label2:
        $i2 = lengthof r0;

        $i1 = lengthof r1;

        $i3 = $i2 - $i1;

        $i4 = $i3 + 1;

        if i7 >= $i4 goto label7;

        i8 = 0;

     label3:
        $i5 = lengthof r1;

        if i8 >= $i5 goto label5;

        $i6 = i7 + i8;

        $z1 = r0[$i6];

        $z0 = r1[i8];

        if $z1 == $z0 goto label4;

        goto label6;

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        return i7;

     label6:
        i7 = i7 + 1;

        goto label2;

     label7:
        $i10 = (int) -1;

        return $i10;
    }

    public static int lastIndexOf(boolean[], boolean)
    {
        boolean[] r0;
        int $i0, $i1;
        boolean z0;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        $i0 = lengthof r0;

        $i1 = staticinvoke <com.mycila.inject.internal.guava.primitives.Booleans: int lastIndexOf(boolean[],boolean,int,int)>(r0, z0, 0, $i0);

        return $i1;
    }

    private static int lastIndexOf(boolean[], boolean, int, int)
    {
        boolean[] r0;
        int i0, i1, i2, $i4, $i6;
        boolean z0, $z1;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        i2 = i0 - 1;

     label1:
        if i2 < i1 goto label3;

        $z1 = r0[i2];

        if $z1 != z0 goto label2;

        return i2;

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label3:
        $i6 = (int) -1;

        return $i6;
    }

    public static transient boolean[] concat(boolean[][])
    {
        boolean[] r1, r2, r3;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;
        boolean[][] r0;

        r0 := @parameter0: boolean[][];

        i3 = 0;

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r2 = r0[i5];

        $i2 = lengthof r2;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        r3 = newarray (boolean)[i3];

        i6 = 0;

        i7 = lengthof r0;

        i8 = 0;

     label3:
        if i8 >= i7 goto label4;

        r1 = r0[i8];

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, i6, $i0);

        $i1 = lengthof r1;

        i6 = i6 + $i1;

        i8 = i8 + 1;

        goto label3;

     label4:
        return r3;
    }

    public static boolean[] ensureCapacity(boolean[], int, int)
    {
        java.lang.Object[] $r0, $r2;
        boolean[] r4, $r5;
        java.lang.Integer $r1, $r3;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1;

        r4 := @parameter0: boolean[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid minLength: %s", $r0);

        if i1 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r3;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Invalid padding: %s", $r2);

        $i2 = lengthof r4;

        if $i2 >= i0 goto label5;

        $i3 = i0 + i1;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.primitives.Booleans: boolean[] copyOf(boolean[],int)>(r4, $i3);

        goto label6;

     label5:
        $r5 = r4;

     label6:
        return $r5;
    }

    private static boolean[] copyOf(boolean[], int)
    {
        int i0, $i1, $i2;
        boolean[] r0, r1;

        r1 := @parameter0: boolean[];

        i0 := @parameter1: int;

        r0 = newarray (boolean)[i0];

        $i1 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, $i2);

        return r0;
    }

    public static transient java.lang.String join(java.lang.String, boolean[])
    {
        boolean[] r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String r0, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: boolean[];

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i1 = lengthof r1;

        $i2 = $i1 * 7;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i2);

        $z0 = r1[0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        i4 = 1;

     label2:
        $i3 = lengthof r1;

        if i4 >= $i3 goto label3;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $z1 = r1[i4];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.mycila.inject.internal.guava.primitives.Booleans$LexicographicalComparator $r0;

        $r0 = <com.mycila.inject.internal.guava.primitives.Booleans$LexicographicalComparator: com.mycila.inject.internal.guava.primitives.Booleans$LexicographicalComparator INSTANCE>;

        return $r0;
    }

    public static boolean[] toArray(java.util.Collection)
    {
        java.lang.Object[] $r1;
        java.util.Collection r0;
        boolean[] r2, $r7;
        com.mycila.inject.internal.guava.primitives.Booleans$BooleanArrayAsList $r6;
        int i0, i1;
        java.lang.Boolean $r5;
        java.lang.Object $r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.primitives.Booleans$BooleanArrayAsList;

        if $z0 == 0 goto label1;

        $r6 = (com.mycila.inject.internal.guava.primitives.Booleans$BooleanArrayAsList) r0;

        $r7 = virtualinvoke $r6.<com.mycila.inject.internal.guava.primitives.Booleans$BooleanArrayAsList: boolean[] toBooleanArray()>();

        return $r7;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof $r1;

        r2 = newarray (boolean)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = $r1[i1];

        $r4 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        r2[i1] = $z1;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static transient java.util.List asList(boolean[])
    {
        java.util.List $r2;
        boolean[] r0;
        int $i0;
        com.mycila.inject.internal.guava.primitives.Booleans$BooleanArrayAsList $r1;

        r0 := @parameter0: boolean[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label1:
        $r1 = new com.mycila.inject.internal.guava.primitives.Booleans$BooleanArrayAsList;

        specialinvoke $r1.<com.mycila.inject.internal.guava.primitives.Booleans$BooleanArrayAsList: void <init>(boolean[])>(r0);

        return $r1;
    }

    static int access$000(boolean[], boolean, int, int)
    {
        boolean[] r0;
        int i0, i1, $i2;
        boolean z0;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <com.mycila.inject.internal.guava.primitives.Booleans: int indexOf(boolean[],boolean,int,int)>(r0, z0, i0, i1);

        return $i2;
    }

    static int access$100(boolean[], boolean, int, int)
    {
        boolean[] r0;
        int i0, i1, $i2;
        boolean z0;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <com.mycila.inject.internal.guava.primitives.Booleans: int lastIndexOf(boolean[],boolean,int,int)>(r0, z0, i0, i1);

        return $i2;
    }
}
