public class org.springframework.aop.framework.ProxyFactoryBean extends org.springframework.aop.framework.ProxyCreatorSupport implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware
{
    public static final java.lang.String GLOBAL_SUFFIX;
    protected final org.apache.commons.logging.Log logger;
    private java.lang.String[] interceptorNames;
    private java.lang.String targetName;
    private boolean autodetectInterfaces;
    private boolean singleton;
    private org.springframework.aop.framework.adapter.AdvisorAdapterRegistry advisorAdapterRegistry;
    private boolean freezeProxy;
    private transient java.lang.ClassLoader proxyClassLoader;
    private transient boolean classLoaderConfigured;
    private transient org.springframework.beans.factory.BeanFactory beanFactory;
    private boolean advisorChainInitialized;
    private java.lang.Object singletonInstance;

    public void <init>()
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.ClassLoader $r4;
        org.springframework.aop.framework.adapter.AdvisorAdapterRegistry $r3;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        specialinvoke r0.<org.springframework.aop.framework.ProxyCreatorSupport: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean autodetectInterfaces> = 1;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean singleton> = 1;

        $r3 = staticinvoke <org.springframework.aop.framework.adapter.GlobalAdvisorAdapterRegistry: org.springframework.aop.framework.adapter.AdvisorAdapterRegistry getInstance()>();

        r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.framework.adapter.AdvisorAdapterRegistry advisorAdapterRegistry> = $r3;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean freezeProxy> = 0;

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.ClassLoader proxyClassLoader> = $r4;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean classLoaderConfigured> = 0;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean advisorChainInitialized> = 0;

        return;
    }

    public void setProxyInterfaces(java.lang.Class[]) throws java.lang.ClassNotFoundException
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        java.lang.Class[] r1;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r1 := @parameter0: java.lang.Class[];

        virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: void setInterfaces(java.lang.Class[])>(r1);

        return;
    }

    public void setInterceptorNames(java.lang.String[])
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        java.lang.String[] r1;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r1 := @parameter0: java.lang.String[];

        r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames> = r1;

        return;
    }

    public void setTargetName(java.lang.String)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        java.lang.String r1;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName> = r1;

        return;
    }

    public void setAutodetectInterfaces(boolean)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean autodetectInterfaces> = z0;

        return;
    }

    public void setSingleton(boolean)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean singleton> = z0;

        return;
    }

    public void setAdvisorAdapterRegistry(org.springframework.aop.framework.adapter.AdvisorAdapterRegistry)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        org.springframework.aop.framework.adapter.AdvisorAdapterRegistry r1;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r1 := @parameter0: org.springframework.aop.framework.adapter.AdvisorAdapterRegistry;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.framework.adapter.AdvisorAdapterRegistry advisorAdapterRegistry> = r1;

        return;
    }

    public void setFrozen(boolean)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean freezeProxy> = z0;

        return;
    }

    public void setProxyClassLoader(java.lang.ClassLoader)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        java.lang.ClassLoader r1;
        boolean $z0;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.ClassLoader proxyClassLoader> = r1;

        if r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean classLoaderConfigured> = $z0;

        return;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        java.lang.ClassLoader r1;
        boolean $z0;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r1 := @parameter0: java.lang.ClassLoader;

        $z0 = r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean classLoaderConfigured>;

        if $z0 != 0 goto label1;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.ClassLoader proxyClassLoader> = r1;

     label1:
        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        org.springframework.beans.factory.BeanFactory r1;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r1 := @parameter0: org.springframework.beans.factory.BeanFactory;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory> = r1;

        specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: void checkInterceptorNames()>();

        return;
    }

    public java.lang.Object getObject() throws org.springframework.beans.BeansException
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        java.lang.Object $r2, $r4;
        org.apache.commons.logging.Log $r3;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: void initializeAdvisorChain()>();

        $z0 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getSingletonInstance()>();

        return $r4;

     label1:
        $r1 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName>;

        if $r1 != null goto label2;

        $r3 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Using non-singleton proxies with singleton targets is often undesirable. Enable prototype proxies by setting the \'targetName\' property.");

     label2:
        $r2 = specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object newPrototypeInstance()>();

        return $r2;
    }

    public java.lang.Class getObjectType()
    {
        java.lang.Throwable $r13;
        int $i0, $i1;
        java.lang.String $r3, $r6;
        org.springframework.aop.framework.ProxyFactoryBean r0;
        java.lang.Class[] $r2;
        org.springframework.beans.factory.BeanFactory $r5, $r7;
        java.lang.Object $r1, $r11;
        java.lang.Class $r4, $r8, $r9, $r10, $r12;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        entermonitor r0;

     label01:
        $r1 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object singletonInstance>;

        if $r1 == null goto label03;

        $r11 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object singletonInstance>;

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Class getClass()>();

        exitmonitor r0;

     label02:
        return $r12;

     label03:
        exitmonitor r0;

     label04:
        goto label07;

     label05:
        $r13 := @caughtexception;

        exitmonitor r0;

     label06:
        throw $r13;

     label07:
        $r2 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Class[] getProxiedInterfaces()>();

        $i0 = lengthof $r2;

        if $i0 != 1 goto label08;

        $r10 = $r2[0];

        return $r10;

     label08:
        $i1 = lengthof $r2;

        if $i1 <= 1 goto label09;

        $r9 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Class createCompositeInterface(java.lang.Class[])>($r2);

        return $r9;

     label09:
        $r3 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName>;

        if $r3 == null goto label10;

        $r5 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        if $r5 == null goto label10;

        $r7 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r6 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName>;

        $r8 = interfaceinvoke $r7.<org.springframework.beans.factory.BeanFactory: java.lang.Class getType(java.lang.String)>($r6);

        return $r8;

     label10:
        $r4 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Class getTargetClass()>();

        return $r4;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    public boolean isSingleton()
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        boolean $z0;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        $z0 = r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean singleton>;

        return $z0;
    }

    protected java.lang.Class createCompositeInterface(java.lang.Class[])
    {
        org.springframework.aop.framework.ProxyFactoryBean r1;
        java.lang.Class[] r0;
        java.lang.Class $r3;
        java.lang.ClassLoader $r2;

        r1 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r0 := @parameter0: java.lang.Class[];

        $r2 = r1.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.ClassLoader proxyClassLoader>;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class createCompositeInterface(java.lang.Class[],java.lang.ClassLoader)>(r0, $r2);

        return $r3;
    }

    private synchronized java.lang.Object getSingletonInstance()
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        org.springframework.aop.TargetSource $r2;
        java.lang.Class[] $r3, $r6;
        org.springframework.aop.framework.AopProxy $r8;
        int $i0;
        org.springframework.beans.factory.FactoryBeanNotInitializedException $r7;
        java.lang.Object $r1, $r9, $r10;
        java.lang.Class $r4;
        java.lang.ClassLoader $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        $r1 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object singletonInstance>;

        if $r1 != null goto label3;

        $r2 = specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource freshTargetSource()>();

        r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource targetSource> = $r2;

        $z0 = r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean autodetectInterfaces>;

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Class[] getProxiedInterfaces()>();

        $i0 = lengthof $r3;

        if $i0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean isProxyTargetClass()>();

        if $z1 != 0 goto label2;

        $r4 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Class getTargetClass()>();

        if $r4 != null goto label1;

        $r7 = new org.springframework.beans.factory.FactoryBeanNotInitializedException;

        specialinvoke $r7.<org.springframework.beans.factory.FactoryBeanNotInitializedException: void <init>(java.lang.String)>("Cannot determine target class for proxy");

        throw $r7;

     label1:
        $r5 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.ClassLoader proxyClassLoader>;

        $r6 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class,java.lang.ClassLoader)>($r4, $r5);

        virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: void setInterfaces(java.lang.Class[])>($r6);

     label2:
        $z2 = r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean freezeProxy>;

        specialinvoke r0.<org.springframework.aop.framework.ProxyCreatorSupport: void setFrozen(boolean)>($z2);

        $r8 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.framework.AopProxy createAopProxy()>();

        $r9 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getProxy(org.springframework.aop.framework.AopProxy)>($r8);

        r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object singletonInstance> = $r9;

     label3:
        $r10 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object singletonInstance>;

        return $r10;
    }

    private synchronized java.lang.Object newPrototypeInstance()
    {
        org.springframework.aop.TargetSource $r4;
        org.springframework.aop.framework.AopProxy $r6;
        int $i0;
        java.lang.String $r11, $r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.aop.framework.ProxyFactoryBean r0;
        org.springframework.aop.framework.ProxyCreatorSupport $r2;
        java.lang.Class[] $r12, $r15;
        java.util.List $r5;
        org.apache.commons.logging.Log $r1, $r9, $r17, $r20;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r10, $r16, $r18;
        java.lang.Class $r13;
        java.lang.ClassLoader $r14;
        org.springframework.aop.framework.AopProxyFactory $r3;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        $r1 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r17 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Creating copy of prototype ProxyFactoryBean config: ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r19);

     label1:
        $r2 = new org.springframework.aop.framework.ProxyCreatorSupport;

        $r3 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.framework.AopProxyFactory getAopProxyFactory()>();

        specialinvoke $r2.<org.springframework.aop.framework.ProxyCreatorSupport: void <init>(org.springframework.aop.framework.AopProxyFactory)>($r3);

        $r4 = specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource freshTargetSource()>();

        $r5 = specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.util.List freshAdvisorChain()>();

        virtualinvoke $r2.<org.springframework.aop.framework.ProxyCreatorSupport: void copyConfigurationFrom(org.springframework.aop.framework.AdvisedSupport,org.springframework.aop.TargetSource,java.util.List)>(r0, $r4, $r5);

        $z1 = r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean autodetectInterfaces>;

        if $z1 == 0 goto label2;

        $r12 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Class[] getProxiedInterfaces()>();

        $i0 = lengthof $r12;

        if $i0 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean isProxyTargetClass()>();

        if $z2 != 0 goto label2;

        $r13 = interfaceinvoke $r4.<org.springframework.aop.TargetSource: java.lang.Class getTargetClass()>();

        $r14 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.ClassLoader proxyClassLoader>;

        $r15 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class,java.lang.ClassLoader)>($r13, $r14);

        virtualinvoke $r2.<org.springframework.aop.framework.ProxyCreatorSupport: void setInterfaces(java.lang.Class[])>($r15);

     label2:
        $z3 = r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean freezeProxy>;

        virtualinvoke $r2.<org.springframework.aop.framework.ProxyCreatorSupport: void setFrozen(boolean)>($z3);

        $r20 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r20.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z4 == 0 goto label3;

        $r9 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using ProxyCreatorSupport copy: ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11);

     label3:
        $r6 = virtualinvoke $r2.<org.springframework.aop.framework.ProxyCreatorSupport: org.springframework.aop.framework.AopProxy createAopProxy()>();

        $r7 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object getProxy(org.springframework.aop.framework.AopProxy)>($r6);

        return $r7;
    }

    protected java.lang.Object getProxy(org.springframework.aop.framework.AopProxy)
    {
        org.springframework.aop.framework.AopProxy r0;
        org.springframework.aop.framework.ProxyFactoryBean r1;
        java.lang.Object $r3;
        java.lang.ClassLoader $r2;

        r1 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r0 := @parameter0: org.springframework.aop.framework.AopProxy;

        $r2 = r1.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.ClassLoader proxyClassLoader>;

        $r3 = interfaceinvoke r0.<org.springframework.aop.framework.AopProxy: java.lang.Object getProxy(java.lang.ClassLoader)>($r2);

        return $r3;
    }

    private void checkInterceptorNames()
    {
        org.springframework.aop.TargetSource $r6, $r7;
        java.lang.String[] $r1, $r2, $r3, $r9, $r10, $r17;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r4, $r5, $r16;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.aop.framework.ProxyFactoryBean r0;
        org.apache.commons.logging.Log $r8, $r12;
        java.lang.StringBuilder $r11, $r13, $r14, $r15;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        $r1 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames>;

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r1);

        if $z0 != 0 goto label2;

        $r3 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames>;

        $r2 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        r4 = $r3[$i1];

        $r5 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName>;

        if $r5 != null goto label2;

        $r7 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource targetSource>;

        $r6 = <org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource EMPTY_TARGET_SOURCE>;

        if $r7 != $r6 goto label2;

        $z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z1 != 0 goto label2;

        $z2 = specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean isNamedBeanAnAdvisorOrAdvice(java.lang.String)>(r4);

        if $z2 != 0 goto label2;

        r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName> = r4;

        $r8 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label1;

        $r12 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean with name \'");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' concluding interceptor chain ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is not an advisor class: treating it as a target or TargetSource");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r16);

     label1:
        $r9 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames>;

        $i2 = lengthof $r9;

        $i3 = $i2 - 1;

        $r17 = newarray (java.lang.String)[$i3];

        $r10 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames>;

        $i4 = lengthof $r17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r17, 0, $i4);

        r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames> = $r17;

     label2:
        return;
    }

    private boolean isNamedBeanAnAdvisorOrAdvice(java.lang.String)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        org.springframework.beans.factory.BeanFactory $r2;
        java.lang.Class $r3, $r10, $r11;
        org.apache.commons.logging.Log $r4, $r6;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String r1, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r3 = interfaceinvoke $r2.<org.springframework.beans.factory.BeanFactory: java.lang.Class getType(java.lang.String)>(r1);

        if $r3 == null goto label2;

        $r10 = class "Lorg/springframework/aop/Advisor;";

        $z1 = virtualinvoke $r10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z1 != 0 goto label1;

        $r11 = class "Lorg/aopalliance/aop/Advice;";

        $z2 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        $r4 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r6 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not determine type of bean with name \'");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' - assuming it is neither an Advisor nor an Advice");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r9);

     label3:
        return 0;
    }

    private synchronized void initializeAdvisorChain() throws org.springframework.aop.framework.AopConfigException, org.springframework.beans.BeansException
    {
        java.lang.IllegalStateException $r26;
        org.springframework.aop.TargetSource $r23, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r29;
        java.lang.StringBuilder $r17, $r19, $r20, $r27, $r30;
        org.springframework.beans.factory.ListableBeanFactory $r13;
        java.lang.String[] $r1, $r3, $r4, $r28, $r32;
        org.springframework.aop.framework.AopConfigException $r16, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r5, r6, $r14, $r15, $r21, $r22, $r31;
        org.springframework.aop.framework.ProxyFactoryBean r0;
        org.springframework.beans.factory.BeanFactory $r2, $r8, $r9, $r11, $r12;
        org.apache.commons.logging.Log $r7, $r18;
        java.lang.Object r33;
        org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor $r10;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        $z0 = r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean advisorChainInitialized>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $r1 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames>;

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r1);

        if $z1 != 0 goto label13;

        $r2 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        if $r2 != null goto label02;

        $r26 = new java.lang.IllegalStateException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("No BeanFactory available anymore (probably due to serialization) - cannot resolve interceptor names ");

        $r28 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames>;

        $r29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r28);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r31);

        throw $r26;

     label02:
        $r4 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames>;

        $r3 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames>;

        $i0 = lengthof $r3;

        $i1 = $i0 - 1;

        $r5 = $r4[$i1];

        $z2 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z2 == 0 goto label03;

        $r22 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName>;

        if $r22 != null goto label03;

        $r24 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource targetSource>;

        $r23 = <org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource EMPTY_TARGET_SOURCE>;

        if $r24 != $r23 goto label03;

        $r25 = new org.springframework.aop.framework.AopConfigException;

        specialinvoke $r25.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String)>("Target required after globals");

        throw $r25;

     label03:
        $r32 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String[] interceptorNames>;

        $i5 = lengthof $r32;

        i6 = 0;

        goto label12;

     label04:
        r6 = $r32[i6];

        $r7 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z3 == 0 goto label05;

        $r18 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Configuring advisor or advice \'");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21);

     label05:
        $z4 = virtualinvoke r6.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z4 == 0 goto label07;

        $r11 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $z7 = $r11 instanceof org.springframework.beans.factory.ListableBeanFactory;

        if $z7 != 0 goto label06;

        $r16 = new org.springframework.aop.framework.AopConfigException;

        specialinvoke $r16.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String)>("Can only use global advisors or interceptors with a ListableBeanFactory");

        throw $r16;

     label06:
        $r12 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r13 = (org.springframework.beans.factory.ListableBeanFactory) $r12;

        $i2 = virtualinvoke r6.<java.lang.String: int length()>();

        $r14 = "*";

        $i3 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i4 = $i2 - $i3;

        $r15 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>($r13, $r15);

        goto label11;

     label07:
        $z5 = r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean singleton>;

        if $z5 != 0 goto label08;

        $r9 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $z6 = interfaceinvoke $r9.<org.springframework.beans.factory.BeanFactory: boolean isSingleton(java.lang.String)>(r6);

        if $z6 == 0 goto label09;

     label08:
        $r8 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        r33 = interfaceinvoke $r8.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>(r6);

        goto label10;

     label09:
        $r10 = new org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor;

        specialinvoke $r10.<org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: void <init>(java.lang.String)>(r6);

        r33 = $r10;

     label10:
        specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: void addAdvisorOnChainCreation(java.lang.Object,java.lang.String)>(r33, r6);

     label11:
        i6 = i6 + 1;

     label12:
        if i6 < $i5 goto label04;

     label13:
        r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean advisorChainInitialized> = 1;

        return;
    }

    private java.util.List freshAdvisorChain()
    {
        java.lang.IllegalStateException $r11;
        org.springframework.aop.Advisor[] $r1;
        java.util.ArrayList $r2;
        int $i0, i1, i2;
        java.lang.String $r8, $r13, $r16, $r19, $r22;
        org.springframework.aop.Advisor r3, $r10;
        boolean $z0, $z1;
        org.springframework.aop.framework.ProxyFactoryBean r0;
        org.springframework.beans.factory.BeanFactory $r6, $r7;
        org.apache.commons.logging.Log $r5, $r18;
        java.lang.Object $r9;
        java.lang.StringBuilder $r12, $r14, $r15, $r17, $r20, $r21;
        org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor r4;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor[] getAdvisors()>();

        $r2 = new java.util.ArrayList;

        $i0 = lengthof $r1;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = lengthof $r1;

        i2 = 0;

        goto label6;

     label1:
        r3 = $r1[i2];

        $z0 = r3 instanceof org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor;

        if $z0 == 0 goto label4;

        r4 = (org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor) r3;

        $r5 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r18 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Refreshing bean named \'");

        $r19 = virtualinvoke r4.<org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String getBeanName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r22);

     label2:
        $r6 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        if $r6 != null goto label3;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("No BeanFactory available anymore (probably due to serialization) - cannot resolve prototype advisor \'");

        $r13 = virtualinvoke r4.<org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String getBeanName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label3:
        $r7 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r8 = virtualinvoke r4.<org.springframework.aop.framework.ProxyFactoryBean$PrototypePlaceholderAdvisor: java.lang.String getBeanName()>();

        $r9 = interfaceinvoke $r7.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>($r8);

        $r10 = specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>($r9);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label5;

     label4:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label5:
        i2 = i2 + 1;

     label6:
        if i2 < i1 goto label1;

        return $r2;
    }

    private void addGlobalAdvisor(org.springframework.beans.factory.ListableBeanFactory, java.lang.String)
    {
        java.lang.String[] $r1, $r2;
        java.util.HashMap $r4;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.String r10, r12, r13, r14;
        boolean $z0, $z1;
        org.springframework.aop.framework.ProxyFactoryBean r11;
        java.util.Iterator $r7;
        java.lang.Object $r5, $r6, $r8, $r9;
        org.springframework.beans.factory.ListableBeanFactory r0;

        r11 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r10 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>(r0, class "Lorg/springframework/aop/Advisor;");

        $r2 = staticinvoke <org.springframework.beans.factory.BeanFactoryUtils: java.lang.String[] beanNamesForTypeIncludingAncestors(org.springframework.beans.factory.ListableBeanFactory,java.lang.Class)>(r0, class "Lorg/aopalliance/intercept/Interceptor;");

        $r3 = new java.util.ArrayList;

        $i1 = lengthof $r1;

        $i0 = lengthof $r2;

        $i2 = $i1 + $i0;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = new java.util.HashMap;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>($i3);

        i4 = lengthof $r1;

        i5 = 0;

        goto label2;

     label1:
        r12 = $r1[i5];

        $r5 = interfaceinvoke r0.<org.springframework.beans.factory.ListableBeanFactory: java.lang.Object getBean(java.lang.String)>(r12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r12);

        i5 = i5 + 1;

     label2:
        if i5 < i4 goto label1;

        i6 = lengthof $r2;

        i7 = 0;

        goto label4;

     label3:
        r13 = $r2[i7];

        $r6 = interfaceinvoke r0.<org.springframework.beans.factory.ListableBeanFactory: java.lang.Object getBean(java.lang.String)>(r13);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r13);

        i7 = i7 + 1;

     label4:
        if i7 < i6 goto label3;

        staticinvoke <org.springframework.core.OrderComparator: void sort(java.util.List)>($r3);

        $r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r14 = (java.lang.String) $r9;

        $z0 = virtualinvoke r14.<java.lang.String: boolean startsWith(java.lang.String)>(r10);

        if $z0 == 0 goto label6;

        specialinvoke r11.<org.springframework.aop.framework.ProxyFactoryBean: void addAdvisorOnChainCreation(java.lang.Object,java.lang.String)>($r8, r14);

     label6:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

        return;
    }

    private void addAdvisorOnChainCreation(java.lang.Object, java.lang.String)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        java.lang.Object r1;
        org.apache.commons.logging.Log $r3, $r5;
        java.lang.StringBuilder $r4, $r7, $r8;
        java.lang.String r6, $r9;
        org.springframework.aop.Advisor $r2;
        boolean $z0;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r1 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)>(r1);

        $r3 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Adding advisor with name \'");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r9);

     label1:
        virtualinvoke r0.<org.springframework.aop.framework.ProxyFactoryBean: void addAdvisor(org.springframework.aop.Advisor)>($r2);

        return;
    }

    private org.springframework.aop.TargetSource freshTargetSource()
    {
        java.lang.IllegalStateException $r24;
        org.springframework.aop.TargetSource $r20, $r22;
        java.lang.String $r1, $r4, $r9, $r12, $r15, $r18;
        boolean $z0, $z1, $z2;
        org.springframework.aop.framework.ProxyFactoryBean r0;
        org.springframework.aop.target.SingletonTargetSource $r26;
        org.springframework.beans.factory.BeanFactory $r2, $r5;
        org.apache.commons.logging.Log $r3, $r8, $r19, $r21;
        java.lang.Object $r6;
        java.lang.StringBuilder $r10, $r11, $r16, $r17, $r23, $r25;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        $r1 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName>;

        if $r1 != null goto label2;

        $r19 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r19.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z2 == 0 goto label1;

        $r21 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("Not refreshing target: Bean name not specified in \'interceptorNames\'.");

     label1:
        $r20 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.TargetSource targetSource>;

        return $r20;

     label2:
        $r2 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        if $r2 != null goto label3;

        $r24 = new java.lang.IllegalStateException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("No BeanFactory available anymore (probably due to serialization) - cannot resolve target with name \'");

        $r15 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName>;

        $r16 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r24;

     label3:
        $r3 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r8 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Refreshing target with name \'");

        $r9 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName>;

        $r10 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label4:
        $r5 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        $r4 = r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.String targetName>;

        $r6 = interfaceinvoke $r5.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String)>($r4);

        $z1 = $r6 instanceof org.springframework.aop.TargetSource;

        if $z1 == 0 goto label5;

        $r22 = (org.springframework.aop.TargetSource) $r6;

        goto label6;

     label5:
        $r26 = new org.springframework.aop.target.SingletonTargetSource;

        $r22 = $r26;

        specialinvoke $r26.<org.springframework.aop.target.SingletonTargetSource: void <init>(java.lang.Object)>($r6);

     label6:
        return $r22;
    }

    private org.springframework.aop.Advisor namedBeanToAdvisor(java.lang.Object)
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        org.springframework.aop.framework.adapter.AdvisorAdapterRegistry $r2;
        org.springframework.aop.framework.adapter.UnknownAdviceTypeException $r4;
        org.springframework.aop.framework.AopConfigException $r5;
        java.lang.Object r1;
        java.lang.StringBuilder $r6, $r8, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r11;
        org.springframework.aop.Advisor $r3;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.springframework.aop.framework.adapter.AdvisorAdapterRegistry advisorAdapterRegistry>;

        $r3 = interfaceinvoke $r2.<org.springframework.aop.framework.adapter.AdvisorAdapterRegistry: org.springframework.aop.Advisor wrap(java.lang.Object)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.springframework.aop.framework.AopConfigException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown advisor type ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; Can only include Advisor or Advice type beans in interceptorNames chain except for last entry,");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("which may also be target or TargetSource");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r4);

        throw $r5;

        catch org.springframework.aop.framework.adapter.UnknownAdviceTypeException from label1 to label2 with label3;
    }

    protected void adviceChanged()
    {
        org.springframework.aop.framework.ProxyFactoryBean r0;
        java.lang.Throwable $r2;
        org.apache.commons.logging.Log $r1;
        boolean $z0;

        r0 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        specialinvoke r0.<org.springframework.aop.framework.ProxyCreatorSupport: void adviceChanged()>();

        $z0 = r0.<org.springframework.aop.framework.ProxyFactoryBean: boolean singleton>;

        if $z0 == 0 goto label5;

        $r1 = r0.<org.springframework.aop.framework.ProxyFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Advice has changed; recaching singleton instance");

        entermonitor r0;

     label1:
        r0.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.Object singletonInstance> = null;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.springframework.aop.framework.ProxyFactoryBean r1;
        java.lang.ClassLoader $r2;

        r1 := @this: org.springframework.aop.framework.ProxyFactoryBean;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r1.<org.springframework.aop.framework.ProxyFactoryBean: java.lang.ClassLoader proxyClassLoader> = $r2;

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.aop.framework.ProxyFactoryBean: java.lang.String GLOBAL_SUFFIX> = "*";

        return;
    }
}
