public class org.apache.lucene.analysis.compound.hyphenation.TernaryTree extends java.lang.Object implements java.lang.Cloneable
{
    protected char[] lo;
    protected char[] hi;
    protected char[] eq;
    protected char[] sc;
    protected org.apache.lucene.analysis.compound.hyphenation.CharVector kv;
    protected char root;
    protected char freenode;
    protected int length;
    protected static final int BLOCK_SIZE;

    void <init>()
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void init()>();

        return;
    }

    protected void init()
    {
        org.apache.lucene.analysis.compound.hyphenation.CharVector $r5;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0;
        char[] $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char root> = 0;

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode> = 1;

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int length> = 0;

        $r1 = newarray (char)[2048];

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo> = $r1;

        $r2 = newarray (char)[2048];

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi> = $r2;

        $r3 = newarray (char)[2048];

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq> = $r3;

        $r4 = newarray (char)[2048];

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc> = $r4;

        $r5 = new org.apache.lucene.analysis.compound.hyphenation.CharVector;

        specialinvoke $r5.<org.apache.lucene.analysis.compound.hyphenation.CharVector: void <init>()>();

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv> = $r5;

        return;
    }

    public void insert(java.lang.String, char)
    {
        int $i0, $i2, $i3, $i7, $i8, i9, i10, $i11, $i13;
        java.lang.String r0;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r1;
        char $c1, c4, $c5, $c6;
        char[] $r2, $r3, $r4;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        r0 := @parameter0: java.lang.String;

        c4 := @parameter1: char;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i9 = $i0 + 1;

        $c1 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode>;

        $i11 = (int) $c1;

        $i3 = $i11 + i9;

        $r2 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i2 = lengthof $r2;

        if $i3 <= $i2 goto label1;

        $r3 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i7 = lengthof $r3;

        $i8 = $i7 + 2048;

        specialinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void redimNodeArrays(int)>($i8);

     label1:
        $i13 = (int) -1;

        i10 = i9 + $i13;

        $r4 = newarray (char)[i9];

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, i10, $r4, 0);

        $r4[i10] = 0;

        $c5 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char root>;

        $c6 = specialinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char insert(char,char[],int,char)>($c5, $r4, 0, c4);

        r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char root> = $c6;

        return;
    }

    public void insert(char[], int, char)
    {
        int $i0, i1, $i3, $i4, i5, $i9, $i10, $i11;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r1;
        char $c2, c6, $c7, $c8;
        char[] r0, $r2, $r3;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        r0 := @parameter0: char[];

        i5 := @parameter1: int;

        c6 := @parameter2: char;

        $i0 = staticinvoke <org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int strlen(char[])>(r0);

        i1 = $i0 + 1;

        $c2 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode>;

        $i11 = (int) $c2;

        $i4 = $i11 + i1;

        $r2 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i3 = lengthof $r2;

        if $i4 <= $i3 goto label1;

        $r3 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i9 = lengthof $r3;

        $i10 = $i9 + 2048;

        specialinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void redimNodeArrays(int)>($i10);

     label1:
        $c7 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char root>;

        $c8 = specialinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char insert(char,char[],int,char)>($c7, r0, i5, c6);

        r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char root> = $c8;

        return;
    }

    private char insert(char, char[], int, char)
    {
        int i0, $i1, $i7, $i13, $i17, $i18, $i22, $i27, $i29, $i30, $i31, $i32, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86;
        org.apache.lucene.analysis.compound.hyphenation.CharVector $r21, $r26, $r36, $r38;
        char[] r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r37, $r39, $r40, $r41;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r1;
        char $c2, $c3, c4, $c5, $c6, $c8, $c9, $c10, $c11, $c12, $c14, $c15, $c16, $c19, $c20, $c21, $c23, $c24, $c25, $c26, $c28, $c33, $c34, c35, $c36, $c37;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        c35 := @parameter0: char;

        r0 := @parameter1: char[];

        i0 := @parameter2: int;

        c4 := @parameter3: char;

        $i1 = staticinvoke <org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int strlen(char[],int)>(r0, i0);

        if c35 != 0 goto label03;

        $c26 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode>;

        $i38 = (int) $c26;

        $i27 = $i38 + 1;

        $c28 = (char) $i27;

        r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode> = $c28;

        $r31 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i39 = (int) $c26;

        $r31[$i39] = c4;

        $i29 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int length>;

        $i30 = $i29 + 1;

        r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int length> = $i30;

        $r32 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        $i40 = (int) $c26;

        $r32[$i40] = 0;

        if $i1 <= 0 goto label01;

        $r35 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i41 = (int) $c26;

        $r35[$i41] = 65535;

        $r37 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $r36 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $i31 = $i1 + 1;

        $i32 = virtualinvoke $r36.<org.apache.lucene.analysis.compound.hyphenation.CharVector: int alloc(int)>($i31);

        $c33 = (char) $i32;

        $i42 = (int) $c26;

        $r37[$i42] = $c33;

        $r38 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $r39 = virtualinvoke $r38.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char[] getArray()>();

        $r40 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i43 = (int) $c26;

        $c34 = $r40[$i43];

        $i44 = (int) $c34;

        staticinvoke <org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void strcpy(char[],int,char[],int)>($r39, $i44, r0, i0);

        goto label02;

     label01:
        $r33 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i45 = (int) $c26;

        $r33[$i45] = 0;

        $r34 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i46 = (int) $c26;

        $r34[$i46] = 0;

     label02:
        return $c26;

     label03:
        $r2 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i47 = (int) c35;

        $c2 = $r2[$i47];

        $i48 = (int) $c2;

        $i50 = (int) 65535;

        if $i48 != $i50 goto label06;

        $c12 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode>;

        $i51 = (int) $c12;

        $i13 = $i51 + 1;

        $c14 = (char) $i13;

        r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode> = $c14;

        $r12 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $r11 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i52 = (int) c35;

        $c15 = $r11[$i52];

        $i53 = (int) $c12;

        $r12[$i53] = $c15;

        $r14 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $r13 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i54 = (int) c35;

        $c16 = $r13[$i54];

        $i55 = (int) $c12;

        $r14[$i55] = $c16;

        $r15 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i56 = (int) c35;

        $r15[$i56] = 0;

        if $i1 <= 0 goto label05;

        $r22 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $r21 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $r20 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i57 = (int) $c12;

        $c19 = $r20[$i57];

        $i58 = (int) $c19;

        $c20 = virtualinvoke $r21.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char get(int)>($i58);

        $i59 = (int) c35;

        $r22[$i59] = $c20;

        $r23 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i60 = (int) c35;

        $r23[$i60] = $c12;

        $r24 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i61 = (int) $c12;

        $c21 = $r24[$i61];

        $i62 = (int) $c21;

        $i22 = $i62 + 1;

        $c23 = (char) $i22;

        $i63 = (int) $c12;

        $r24[$i63] = $c23;

        $r26 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $r25 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i64 = (int) $c12;

        $c24 = $r25[$i64];

        $i65 = (int) $c24;

        $c25 = virtualinvoke $r26.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char get(int)>($i65);

        if $c25 != 0 goto label04;

        $r28 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i66 = (int) $c12;

        $r28[$i66] = 0;

        $r29 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i67 = (int) $c12;

        $r29[$i67] = 0;

        $r30 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        $i68 = (int) $c12;

        $r30[$i68] = 0;

        goto label06;

     label04:
        $r27 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i69 = (int) $c12;

        $r27[$i69] = 65535;

        goto label06;

     label05:
        $r16 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i70 = (int) $c12;

        $r16[$i70] = 65535;

        $r17 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        $i71 = (int) c35;

        $r17[$i71] = $c12;

        $r18 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i72 = (int) c35;

        $r18[$i72] = 0;

        $r19 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i73 = (int) c35;

        $r19[$i73] = c4;

        $i17 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int length>;

        $i18 = $i17 + 1;

        r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int length> = $i18;

        return c35;

     label06:
        $c36 = r0[i0];

        $r41 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i74 = (int) c35;

        $c37 = $r41[$i74];

        $i75 = (int) $c36;

        $i76 = (int) $c37;

        if $i75 >= $i76 goto label07;

        $r10 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $r9 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i77 = (int) c35;

        $c10 = $r9[$i77];

        $c11 = specialinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char insert(char,char[],int,char)>($c10, r0, i0, c4);

        $i78 = (int) c35;

        $r10[$i78] = $c11;

        goto label10;

     label07:
        $r3 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i79 = (int) c35;

        $c3 = $r3[$i79];

        $i80 = (int) $c36;

        $i81 = (int) $c3;

        if $i80 != $i81 goto label09;

        if $c36 == 0 goto label08;

        $r8 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $r7 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i82 = (int) c35;

        $c8 = $r7[$i82];

        $i7 = i0 + 1;

        $c9 = specialinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char insert(char,char[],int,char)>($c8, r0, $i7, c4);

        $i83 = (int) c35;

        $r8[$i83] = $c9;

        goto label10;

     label08:
        $r6 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i84 = (int) c35;

        $r6[$i84] = c4;

        goto label10;

     label09:
        $r5 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        $r4 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        $i85 = (int) c35;

        $c5 = $r4[$i85];

        $c6 = specialinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char insert(char,char[],int,char)>($c5, r0, i0, c4);

        $i86 = (int) c35;

        $r5[$i86] = $c6;

     label10:
        return c35;
    }

    public static int strcmp(char[], int, char[], int)
    {
        char $c0, $c1, $c2, $c3, $c5;
        int $i4, i6, i7, $i8, $i9, $i10, $i11;
        char[] r0, r1;

        r0 := @parameter0: char[];

        i6 := @parameter1: int;

        r1 := @parameter2: char[];

        i7 := @parameter3: int;

     label1:
        $c1 = r0[i6];

        $c0 = r1[i7];

        $i8 = (int) $c1;

        $i9 = (int) $c0;

        if $i8 != $i9 goto label3;

        $c5 = r0[i6];

        if $c5 != 0 goto label2;

        return 0;

     label2:
        i6 = i6 + 1;

        i7 = i7 + 1;

        goto label1;

     label3:
        $c3 = r0[i6];

        $c2 = r1[i7];

        $i10 = (int) $c3;

        $i11 = (int) $c2;

        $i4 = $i10 - $i11;

        return $i4;
    }

    public static int strcmp(java.lang.String, char[], int)
    {
        int $i0, i1, $i2, $i4, $i6, $i8, i10, $i11, i13, $i14, $i15, $i16;
        java.lang.String r0;
        char $c3, $c5, $c7, $c9, $c12;
        char[] r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i13 = 0;

     label1:
        if i13 >= $i0 goto label4;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i13);

        $i8 = i1 + i13;

        $c9 = r1[$i8];

        $i14 = (int) $c7;

        $i15 = (int) $c9;

        i10 = $i14 - $i15;

        if i10 == 0 goto label2;

        return i10;

     label2:
        $i11 = i1 + i13;

        $c12 = r1[$i11];

        if $c12 != 0 goto label3;

        return i10;

     label3:
        i13 = i13 + 1;

        goto label1;

     label4:
        $i2 = i1 + i13;

        $c3 = r1[$i2];

        if $c3 == 0 goto label5;

        $i4 = i1 + i13;

        $c5 = r1[$i4];

        $i16 = (int) $c5;

        $i6 = neg $i16;

        return $i6;

     label5:
        return 0;
    }

    public static void strcpy(char[], int, char[], int)
    {
        char $c0, $c3;
        int $i1, $i2, i4, i5;
        char[] r0, r1;

        r1 := @parameter0: char[];

        i4 := @parameter1: int;

        r0 := @parameter2: char[];

        i5 := @parameter3: int;

     label1:
        $c0 = r0[i5];

        if $c0 == 0 goto label2;

        $i1 = i4;

        i4 = i4 + 1;

        $i2 = i5;

        i5 = i5 + 1;

        $c3 = r0[$i2];

        r1[$i1] = $c3;

        goto label1;

     label2:
        r1[i4] = 0;

        return;
    }

    public static int strlen(char[], int)
    {
        int i0, $i1, i3, i4;
        char[] r0;
        char $c2;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i3 = 0;

        i4 = i0;

     label1:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label2;

        $c2 = r0[i4];

        if $c2 == 0 goto label2;

        i3 = i3 + 1;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    public static int strlen(char[])
    {
        int $i0;
        char[] r0;

        r0 := @parameter0: char[];

        $i0 = staticinvoke <org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int strlen(char[],int)>(r0, 0);

        return $i0;
    }

    public int find(java.lang.String)
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r2;
        int $i0, $i1, $i2;
        char[] r1;
        java.lang.String r0;

        r2 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 + 1;

        r1 = newarray (char)[$i1];

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, r1, 0);

        r1[$i0] = 0;

        $i2 = virtualinvoke r2.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int find(char[],int)>(r1, 0);

        return $i2;
    }

    public int find(char[], int)
    {
        org.apache.lucene.analysis.compound.hyphenation.CharVector $r8;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0;
        int i0, i4, $i7, i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30;
        char $c1, c2, $c3, $c5, $c6, $c8, c9;
        char[] $r1, r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        c9 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char root>;

        i10 = i0;

     label1:
        if c9 == 0 goto label7;

        $r1 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i11 = (int) c9;

        $c1 = $r1[$i11];

        $i12 = (int) $c1;

        $i14 = (int) 65535;

        if $i12 != $i14 goto label3;

        $r8 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char[] getArray()>();

        $r10 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i15 = (int) c9;

        $c6 = $r10[$i15];

        $i16 = (int) $c6;

        $i7 = staticinvoke <org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int strcmp(char[],int,char[],int)>(r2, i10, $r9, $i16);

        if $i7 != 0 goto label2;

        $r11 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i17 = (int) c9;

        $c8 = $r11[$i17];

        $i18 = (int) $c8;

        return $i18;

     label2:
        $i20 = (int) -1;

        return $i20;

     label3:
        c2 = r2[i10];

        $r3 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i21 = (int) c9;

        $c3 = $r3[$i21];

        $i22 = (int) c2;

        $i23 = (int) $c3;

        i4 = $i22 - $i23;

        if i4 != 0 goto label5;

        if c2 != 0 goto label4;

        $r7 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i24 = (int) c9;

        $c5 = $r7[$i24];

        $i25 = (int) $c5;

        return $i25;

     label4:
        i10 = i10 + 1;

        $r6 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i26 = (int) c9;

        c9 = $r6[$i26];

        goto label1;

     label5:
        if i4 >= 0 goto label6;

        $r5 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i27 = (int) c9;

        c9 = $r5[$i27];

        goto label1;

     label6:
        $r4 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        $i28 = (int) c9;

        c9 = $r4[$i28];

        goto label1;

     label7:
        $i30 = (int) -1;

        return $i30;
    }

    public boolean knows(java.lang.String)
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0;
        int $i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int find(java.lang.String)>(r1);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void redimNodeArrays(int)
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0;
        int i0, $i1, $i2;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $i2 = i0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i2 = lengthof $r2;

     label2:
        $r7 = newarray (char)[i0];

        $r3 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r7, 0, $i2);

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo> = $r7;

        $r8 = newarray (char)[i0];

        $r4 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r8, 0, $i2);

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi> = $r8;

        $r9 = newarray (char)[i0];

        $r5 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r9, 0, $i2);

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq> = $r9;

        $r10 = newarray (char)[i0];

        $r6 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r10, 0, $i2);

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc> = $r10;

        return;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        $i0 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int length>;

        return $i0;
    }

    public org.apache.lucene.analysis.compound.hyphenation.TernaryTree clone()
    {
        int $i2;
        org.apache.lucene.analysis.compound.hyphenation.CharVector $r14, $r15;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree $r0, r1;
        char $c0, $c1;
        char[] $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r13;
        java.lang.Object $r3, $r6, $r9, $r12;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        $r0 = new org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        specialinvoke $r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void <init>()>();

        $r2 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (char[]) $r3;

        $r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo> = $r4;

        $r5 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (char[]) $r6;

        $r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi> = $r7;

        $r8 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (char[]) $r9;

        $r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq> = $r10;

        $r11 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Object clone()>();

        $r13 = (char[]) $r12;

        $r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc> = $r13;

        $r14 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $r15 = virtualinvoke $r14.<org.apache.lucene.analysis.compound.hyphenation.CharVector: org.apache.lucene.analysis.compound.hyphenation.CharVector clone()>();

        $r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv> = $r15;

        $c0 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char root>;

        $r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char root> = $c0;

        $c1 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode>;

        $r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode> = $c1;

        $i2 = r1.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int length>;

        $r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int length> = $i2;

        return $r0;
    }

    protected void insertBalanced(java.lang.String[], char[], int, int)
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0;
        java.lang.String[] r1;
        char $c5;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9;
        char[] r2;
        java.lang.String $r3;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: char[];

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        if i0 >= 1 goto label1;

        return;

     label1:
        i1 = i0 >> 1;

        $i3 = i1 + i2;

        $r3 = r1[$i3];

        $i4 = i1 + i2;

        $c5 = r2[$i4];

        virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void insert(java.lang.String,char)>($r3, $c5);

        virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void insertBalanced(java.lang.String[],char[],int,int)>(r1, r2, i2, i1);

        $i6 = i2 + i1;

        $i9 = $i6 + 1;

        $i7 = i0 - i1;

        $i8 = $i7 - 1;

        virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void insertBalanced(java.lang.String[],char[],int,int)>(r1, r2, $i9, $i8);

        return;
    }

    public void balance()
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator $r3;
        java.lang.String[] r1;
        char $c1;
        int i0, $i2, i3;
        char[] r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        i3 = 0;

        i0 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int length>;

        r1 = newarray (java.lang.String)[i0];

        r2 = newarray (char)[i0];

        $r3 = new org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator;

        specialinvoke $r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: void <init>(org.apache.lucene.analysis.compound.hyphenation.TernaryTree)>(r0);

     label1:
        $z0 = virtualinvoke $r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $c1 = virtualinvoke $r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: char getValue()>();

        r2[i3] = $c1;

        $i2 = i3;

        i3 = i3 + 1;

        $r4 = virtualinvoke $r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: java.lang.String nextElement()>();

        r1[$i2] = $r4;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void init()>();

        virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void insertBalanced(java.lang.String[],char[],int,int)>(r1, r2, 0, i0);

        return;
    }

    public void trimToSize()
    {
        org.apache.lucene.analysis.compound.hyphenation.CharVector $r3, $r4;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0, $r5;
        int $i2;
        char $c0, $c1;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void balance()>();

        $c0 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode>;

        $i2 = (int) $c0;

        specialinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void redimNodeArrays(int)>($i2);

        $r4 = new org.apache.lucene.analysis.compound.hyphenation.CharVector;

        specialinvoke $r4.<org.apache.lucene.analysis.compound.hyphenation.CharVector: void <init>()>();

        virtualinvoke $r4.<org.apache.lucene.analysis.compound.hyphenation.CharVector: int alloc(int)>(1);

        $r5 = new org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        specialinvoke $r5.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void <init>()>();

        $c1 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char root>;

        specialinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void compact(org.apache.lucene.analysis.compound.hyphenation.CharVector,org.apache.lucene.analysis.compound.hyphenation.TernaryTree,char)>($r4, $r5, $c1);

        r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv> = $r4;

        $r3 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        virtualinvoke $r3.<org.apache.lucene.analysis.compound.hyphenation.CharVector: void trimToSize()>();

        return;
    }

    private void compact(org.apache.lucene.analysis.compound.hyphenation.CharVector, org.apache.lucene.analysis.compound.hyphenation.TernaryTree, char)
    {
        org.apache.lucene.analysis.compound.hyphenation.CharVector r2, $r8, $r12, $r16;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0, r3;
        int $i7, $i10, $i11, $i12, i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        char c0, $c1, $c2, $c3, $c4, $c5, $c6, $c8, $c9, $c13, $c14;
        char[] $r1, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r15, $r17, $r18, $r19;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        r2 := @parameter0: org.apache.lucene.analysis.compound.hyphenation.CharVector;

        r3 := @parameter1: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        c0 := @parameter2: char;

        if c0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i16 = (int) c0;

        $c1 = $r1[$i16];

        $i17 = (int) $c1;

        $i19 = (int) 65535;

        if $i17 != $i19 goto label3;

        $r8 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $r9 = virtualinvoke $r8.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char[] getArray()>();

        $r10 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i20 = (int) c0;

        $c6 = $r10[$i20];

        $i21 = (int) $c6;

        $i7 = virtualinvoke r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int find(char[],int)>($r9, $i21);

        i15 = $i7;

        if $i7 >= 0 goto label2;

        $r12 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $r13 = virtualinvoke $r12.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char[] getArray()>();

        $r14 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i22 = (int) c0;

        $c9 = $r14[$i22];

        $i23 = (int) $c9;

        $i10 = staticinvoke <org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int strlen(char[],int)>($r13, $i23);

        $i11 = $i10 + 1;

        $i12 = virtualinvoke r2.<org.apache.lucene.analysis.compound.hyphenation.CharVector: int alloc(int)>($i11);

        i15 = $i12;

        $r15 = virtualinvoke r2.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char[] getArray()>();

        $r16 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $r17 = virtualinvoke $r16.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char[] getArray()>();

        $r18 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i24 = (int) c0;

        $c13 = $r18[$i24];

        $i25 = (int) $c13;

        staticinvoke <org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void strcpy(char[],int,char[],int)>($r15, $i12, $r17, $i25);

        $r19 = virtualinvoke r2.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char[] getArray()>();

        $c14 = (char) $i12;

        virtualinvoke r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void insert(char[],int,char)>($r19, $i12, $c14);

     label2:
        $r11 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $c8 = (char) i15;

        $i26 = (int) c0;

        $r11[$i26] = $c8;

        goto label5;

     label3:
        $r4 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] lo>;

        $i27 = (int) c0;

        $c2 = $r4[$i27];

        specialinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void compact(org.apache.lucene.analysis.compound.hyphenation.CharVector,org.apache.lucene.analysis.compound.hyphenation.TernaryTree,char)>(r2, r3, $c2);

        $r5 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] sc>;

        $i28 = (int) c0;

        $c3 = $r5[$i28];

        if $c3 == 0 goto label4;

        $r7 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] eq>;

        $i29 = (int) c0;

        $c5 = $r7[$i29];

        specialinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void compact(org.apache.lucene.analysis.compound.hyphenation.CharVector,org.apache.lucene.analysis.compound.hyphenation.TernaryTree,char)>(r2, r3, $c5);

     label4:
        $r6 = r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char[] hi>;

        $i30 = (int) c0;

        $c4 = $r6[$i30];

        specialinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void compact(org.apache.lucene.analysis.compound.hyphenation.CharVector,org.apache.lucene.analysis.compound.hyphenation.TernaryTree,char)>(r2, r3, $c4);

     label5:
        return;
    }

    public java.util.Enumeration keys()
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator $r0;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r1;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        $r0 = new org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator;

        specialinvoke $r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree$Iterator: void <init>(org.apache.lucene.analysis.compound.hyphenation.TernaryTree)>(r1);

        return $r0;
    }

    public void printStats(java.io.PrintStream)
    {
        int $i0, $i2, $i3;
        java.lang.String $r4, $r6, $r9, $r11, $r15, $r17;
        java.io.PrintStream r0;
        org.apache.lucene.analysis.compound.hyphenation.CharVector $r14;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r3;
        char $c1;
        java.lang.StringBuilder $r2, $r5, $r8, $r10, $r13, $r16, $r18, $r19, $r20;

        r3 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        r0 := @parameter0: java.io.PrintStream;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of keys = ");

        $i0 = r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int length>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Node count = ");

        $c1 = r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: char freenode>;

        $i3 = (int) $c1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key Array length = ");

        $r14 = r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $i2 = virtualinvoke $r14.<org.apache.lucene.analysis.compound.hyphenation.CharVector: int length()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r17);

        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree r0, $r1;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        $r1 = virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: org.apache.lucene.analysis.compound.hyphenation.TernaryTree clone()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int BLOCK_SIZE> = 2048;

        return;
    }
}
