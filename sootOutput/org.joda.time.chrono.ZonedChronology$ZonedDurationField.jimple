class org.joda.time.chrono.ZonedChronology$ZonedDurationField extends org.joda.time.field.BaseDurationField
{
    private static final long serialVersionUID;
    final org.joda.time.DurationField iField;
    final boolean iTimeField;
    final org.joda.time.DateTimeZone iZone;

    void <init>(org.joda.time.DurationField, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r3;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        org.joda.time.DurationField r1;
        org.joda.time.DurationFieldType $r2;
        java.lang.IllegalArgumentException $r4;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        r1 := @parameter0: org.joda.time.DurationField;

        r3 := @parameter1: org.joda.time.DateTimeZone;

        $r2 = virtualinvoke r1.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        specialinvoke r0.<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>($r2);

        $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField> = r1;

        $z1 = staticinvoke <org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>(r1);

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField> = $z1;

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone> = r3;

        return;
    }

    public boolean isPrecise()
    {
        org.joda.time.DateTimeZone $r2;
        org.joda.time.DurationField $r1, $r3;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $z3 = virtualinvoke $r3.<org.joda.time.DurationField: boolean isPrecise()>();

        goto label3;

     label1:
        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $z1 = virtualinvoke $r1.<org.joda.time.DurationField: boolean isPrecise()>();

        if $z1 == 0 goto label2;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $z2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean isFixed()>();

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public long getUnitMillis()
    {
        long $l0;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>();

        return $l0;
    }

    public int getValue(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        org.joda.time.DurationField $r1;
        int $i3;
        long l0, l1, $l2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>(l1);

        $i3 = virtualinvoke $r1.<org.joda.time.DurationField: int getValue(long,long)>(l0, $l2);

        return $i3;
    }

    public long getValueAsLong(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        org.joda.time.DurationField $r1;
        long l0, l1, $l2, $l3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>(l1);

        $l3 = virtualinvoke $r1.<org.joda.time.DurationField: long getValueAsLong(long,long)>(l0, $l2);

        return $l3;
    }

    public long getMillis(int, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        org.joda.time.DurationField $r1;
        int i0;
        long l1, $l2, $l3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>(l1);

        $l3 = virtualinvoke $r1.<org.joda.time.DurationField: long getMillis(int,long)>(i0, $l2);

        return $l3;
    }

    public long getMillis(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        org.joda.time.DurationField $r1;
        long l0, l1, $l2, $l3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>(l1);

        $l3 = virtualinvoke $r1.<org.joda.time.DurationField: long getMillis(long,long)>(l0, $l2);

        return $l3;
    }

    public long add(long, int)
    {
        org.joda.time.DurationField $r1;
        long $l1, $l3, $l4, $l5, $l6, l7;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        int $i0, i2, $i8;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        l7 := @parameter0: long;

        i2 := @parameter1: int;

        $i0 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l7);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l1 = (long) $i0;

        $l3 = l7 + $l1;

        $l4 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>($l3, i2);

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i8 = $i0;

        goto label2;

     label1:
        $i8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>($l4);

     label2:
        $l5 = (long) $i8;

        $l6 = $l4 - $l5;

        return $l6;
    }

    public long add(long, long)
    {
        org.joda.time.DurationField $r1;
        long $l1, l2, $l3, $l4, $l5, $l6, l7;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        int $i0, $i8;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        l7 := @parameter0: long;

        l2 := @parameter1: long;

        $i0 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l7);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $l1 = (long) $i0;

        $l3 = l7 + $l1;

        $l4 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,long)>($l3, l2);

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i8 = $i0;

        goto label2;

     label1:
        $i8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>($l4);

     label2:
        $l5 = (long) $i8;

        $l6 = $l4 - $l5;

        return $l6;
    }

    public int getDifference(long, long)
    {
        org.joda.time.DurationField $r1;
        long l0, l2, $l3, $l4, $l5, $l6;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        int $i1, $i7, $i8;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        l2 := @parameter0: long;

        l0 := @parameter1: long;

        $i1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i8 = $i1;

        goto label2;

     label1:
        $i8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l2);

     label2:
        $l3 = (long) $i8;

        $l6 = l2 + $l3;

        $l4 = (long) $i1;

        $l5 = l0 + $l4;

        $i7 = virtualinvoke $r1.<org.joda.time.DurationField: int getDifference(long,long)>($l6, $l5);

        return $i7;
    }

    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.DurationField $r1;
        long l0, l2, $l3, $l4, $l5, $l6, $l7;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        int $i1, $i8;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        l2 := @parameter0: long;

        l0 := @parameter1: long;

        $i1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i8 = $i1;

        goto label2;

     label1:
        $i8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l2);

     label2:
        $l3 = (long) $i8;

        $l6 = l2 + $l3;

        $l4 = (long) $i1;

        $l5 = l0 + $l4;

        $l7 = virtualinvoke $r1.<org.joda.time.DurationField: long getDifferenceAsLong(long,long)>($l6, $l5);

        return $l7;
    }

    private int getOffsetToAdd(long)
    {
        org.joda.time.DateTimeZone $r1;
        long l0, $l2, l3, $l4, $l6, $l7;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        byte $b5, $b8;
        int $i1, $i9, $i10;
        java.lang.ArithmeticException $r3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l2 = (long) $i1;

        l3 = l0 + $l2;

        $l4 = l0 ^ l3;

        $b5 = $l4 cmp 0L;

        $i9 = (int) $b5;

        if $i9 >= 0 goto label1;

        $l6 = (long) $i1;

        $l7 = l0 ^ $l6;

        $b8 = $l7 cmp 0L;

        $i10 = (int) $b8;

        if $i10 < 0 goto label1;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Adding time zone offset caused overflow");

        throw $r3;

     label1:
        return $i1;
    }

    private int getOffsetFromLocalToSubtract(long)
    {
        org.joda.time.DateTimeZone $r1;
        long l0, $l2, l3, $l4, $l6, $l7;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        byte $b5, $b8;
        int $i1, $i9, $i10;
        java.lang.ArithmeticException $r3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0);

        $l2 = (long) $i1;

        l3 = l0 - $l2;

        $l4 = l0 ^ l3;

        $b5 = $l4 cmp 0L;

        $i9 = (int) $b5;

        if $i9 >= 0 goto label1;

        $l6 = (long) $i1;

        $l7 = l0 ^ $l6;

        $b8 = $l7 cmp 0L;

        $i10 = (int) $b8;

        if $i10 >= 0 goto label1;

        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Subtracting time zone offset caused overflow");

        throw $r3;

     label1:
        return $i1;
    }

    private long addOffset(long)
    {
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField r0;
        long l0, $l1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>;

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        return $l1;
    }

    public static void <clinit>()
    {
        <org.joda.time.chrono.ZonedChronology$ZonedDurationField: long serialVersionUID> = -485345310999208286L;

        return;
    }
}
