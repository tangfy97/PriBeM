public class com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType extends com.hp.hpl.jena.datatypes.xsd.XSDDatatype
{
    public static final short YEAR_MASK;
    public static final short MONTH_MASK;
    public static final short DAY_MASK;
    public static final short TIME_MASK;
    public static final short FULL_MASK;
    protected static final int CY;
    protected static final int M;
    protected static final int D;
    protected static final int h;
    protected static final int m;
    protected static final int s;
    protected static final int ms;
    protected static final int msscale;
    protected static final int utc;
    protected static final int hh;
    protected static final int mm;
    protected static final int TOTAL_SIZE;
    protected static final int YEAR;
    protected static final int MONTH;
    protected static final int DAY;

    public void <init>(java.lang.String)
    {
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: void <init>(java.lang.String)>(r1);

        return;
    }

    public boolean isEqual(com.hp.hpl.jena.graph.impl.LiteralLabel, com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r4;
        com.hp.hpl.jena.graph.impl.LiteralLabel r0, r2;
        java.lang.Object $r1, $r3;
        boolean $z0;

        r4 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        r2 := @parameter1: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    protected void getTime(java.lang.String, int, int, int[], int[]) throws java.lang.RuntimeException
    {
        int[] r0, r4;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r1;
        int $i0, $i2, $i4, i5, i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18, i19, $i20, $i21, i22, $i23, $i25, $i26, $i27, $i29, $i31, $i32, $i34;
        java.lang.String r2;
        char $c1, $c3, $c6, $c24;
        java.lang.RuntimeException $r8, $r9, $r10, $r11;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r2 := @parameter0: java.lang.String;

        i13 := @parameter1: int;

        i5 := @parameter2: int;

        r0 := @parameter3: int[];

        r4 := @parameter4: int[];

        i14 = i13 + 2;

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int parseInt(java.lang.String,int,int)>(r2, i13, i14);

        r0[3] = $i0;

        i15 = i14 + 1;

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i14);

        $i25 = (int) $c1;

        if $i25 == 58 goto label01;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r8;

     label01:
        i16 = i15 + 2;

        $i2 = virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int parseInt(java.lang.String,int,int)>(r2, i15, i16);

        r0[4] = $i2;

        i17 = i16 + 1;

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i16);

        $i26 = (int) $c3;

        if $i26 == 58 goto label02;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r9;

     label02:
        i18 = i17 + 2;

        $i4 = virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int parseInt(java.lang.String,int,int)>(r2, i17, i18);

        r0[5] = $i4;

        if i18 != i5 goto label03;

        return;

     label03:
        i19 = i18;

        $c6 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i18);

        $i27 = (int) $c6;

        if $i27 != 46 goto label04;

        $i20 = i18;

        goto label05;

     label04:
        $i29 = (int) -1;

        $i20 = $i29;

     label05:
        i7 = $i20;

        $i8 = virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int findUTCSign(java.lang.String,int,int)>(r2, i18, i5);

        $i31 = (int) -1;

        if $i20 == $i31 goto label10;

        if $i8 >= 0 goto label06;

        $i21 = i5;

        goto label07;

     label06:
        $i21 = $i8;

     label07:
        i19 = $i21;

        i22 = $i21;

     label08:
        $i23 = i22 - 1;

        $c24 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i23);

        $i32 = (int) $c24;

        if $i32 != 48 goto label09;

        $i34 = (int) -1;

        i22 = i22 + $i34;

        goto label08;

     label09:
        $i9 = i7 + 1;

        $i10 = virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int parseInt(java.lang.String,int,int)>(r2, $i9, i22);

        r0[6] = $i10;

        $i11 = i22 - i7;

        $i12 = $i11 - 1;

        r0[8] = $i12;

     label10:
        if $i8 <= 0 goto label12;

        if i19 == $i8 goto label11;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r10;

     label11:
        virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void getTimeZone(java.lang.String,int[],int,int,int[])>(r2, r0, $i8, i5, r4);

        goto label13;

     label12:
        if i19 == i5 goto label13;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r11;

     label13:
        return;
    }

    protected int getDate(java.lang.String, int, int, int[]) throws java.lang.RuntimeException
    {
        char $c2;
        java.lang.RuntimeException $r4;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r0;
        int[] r2;
        int i0, $i1, i3, $i4, i5, i6, $i7;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r1 := @parameter0: java.lang.String;

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: int[];

        $i1 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int getYearMonth(java.lang.String,int,int,int[])>(r1, i5, i0, r2);

        i6 = $i1 + 1;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i1);

        $i7 = (int) $c2;

        if $i7 == 45 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("CCYY-MM must be followed by \'-\' sign");

        throw $r4;

     label1:
        i3 = i6 + 2;

        $i4 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int parseInt(java.lang.String,int,int)>(r1, i6, i3);

        r2[2] = $i4;

        return i3;
    }

    protected int getYearMonth(java.lang.String, int, int, int[]) throws java.lang.RuntimeException
    {
        int[] r2;
        int i1, $i2, i3, $i4, $i6, i8, i9, i10, $i11, $i13, $i14, $i15;
        java.lang.String r0;
        char $c0, $c5, $c7;
        java.lang.RuntimeException $r7, $r8, $r9, $r10;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r1;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r0 := @parameter0: java.lang.String;

        i8 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: int[];

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i11 = (int) $c0;

        if $i11 != 45 goto label1;

        i8 = i8 + 1;

     label1:
        $i2 = virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int indexOf(java.lang.String,int,int,char)>(r0, i8, i1, 45);

        $i13 = (int) -1;

        if $i2 != $i13 goto label2;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Year separator is missing or misplaced");

        throw $r7;

     label2:
        i3 = $i2 - i8;

        if i3 >= 4 goto label3;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Year must have \'CCYY\' format");

        throw $r8;

     label3:
        if i3 <= 4 goto label4;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        $i14 = (int) $c7;

        if $i14 != 48 goto label4;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Leading zeros are required if the year value would otherwise have fewer than four digits; otherwise they are forbidden");

        throw $r9;

     label4:
        $i4 = virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int parseIntYear(java.lang.String,int)>(r0, $i2);

        r2[0] = $i4;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i15 = (int) $c5;

        if $i15 == 45 goto label5;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("CCYY must be followed by \'-\' sign");

        throw $r10;

     label5:
        i9 = $i2 + 1;

        i10 = i9 + 2;

        $i6 = virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int parseInt(java.lang.String,int,int)>(r0, i9, i10);

        r2[1] = $i6;

        return i10;
    }

    protected void parseTimeZone(java.lang.String, int, int, int[], int[]) throws java.lang.RuntimeException
    {
        java.lang.RuntimeException $r4;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r0;
        int[] r2, r3;
        int i0, i1, $i2;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: int[];

        r3 := @parameter4: int[];

        if i0 >= i1 goto label2;

        $i2 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int findUTCSign(java.lang.String,int,int)>(r1, i0, i1);

        if $i2 >= 0 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in month parsing");

        throw $r4;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void getTimeZone(java.lang.String,int[],int,int,int[])>(r1, r2, $i2, i1, r3);

     label2:
        return;
    }

    protected void getTimeZone(java.lang.String, int[], int, int, int[]) throws java.lang.RuntimeException
    {
        int[] r0, r3;
        int i2, $i3, $i4, $i6, $i7, $i8, i9, i10, i11, i12, i13, $i14, $i15, $i16;
        java.lang.String r1;
        char $c0, $c1, $c5;
        java.lang.RuntimeException $r8, $r9, $r10, $r11;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r4;

        r4 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: int[];

        i9 := @parameter2: int;

        i2 := @parameter3: int;

        r3 := @parameter4: int[];

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i9);

        $i14 = (int) $c0;

        r0[7] = $i14;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i9);

        $i15 = (int) $c1;

        if $i15 != 90 goto label2;

        i10 = i9 + 1;

        if i2 <= i10 goto label1;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r8;

     label1:
        return;

     label2:
        $i3 = i2 - 6;

        if i9 > $i3 goto label5;

        i11 = i9 + 1;

        i12 = i11 + 2;

        $i4 = virtualinvoke r4.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int parseInt(java.lang.String,int,int)>(r1, i11, i12);

        r3[0] = $i4;

        i13 = i12 + 1;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i12);

        $i16 = (int) $c5;

        if $i16 == 58 goto label3;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r9;

     label3:
        $i6 = i13 + 2;

        $i7 = virtualinvoke r4.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int parseInt(java.lang.String,int,int)>(r1, i13, $i6);

        r3[1] = $i7;

        $i8 = i13 + 2;

        if $i8 == i2 goto label4;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r10;

     label4:
        goto label6;

     label5:
        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r11;

     label6:
        return;
    }

    protected int indexOf(java.lang.String, int, int, char)
    {
        char $c2, c3;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r1;
        int i0, i1, i4, $i5, $i6, $i8;
        java.lang.String r0;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        c3 := @parameter3: char;

        i4 = i0;

     label1:
        if i4 >= i1 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i5 = (int) $c2;

        $i6 = (int) c3;

        if $i5 != $i6 goto label2;

        return i4;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $i8 = (int) -1;

        return $i8;
    }

    public static final boolean isDigit(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 48 goto label1;

        $i2 = (int) c0;

        if $i2 > 57 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static final int getDigit(char)
    {
        int $i1, $i2, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: boolean isDigit(char)>(c0);

        if $z0 == 0 goto label1;

        $i2 = (int) c0;

        $i1 = $i2 - 48;

        goto label2;

     label1:
        $i4 = (int) -1;

        $i1 = $i4;

     label2:
        return $i1;
    }

    protected int findUTCSign(java.lang.String, int, int)
    {
        char $c2;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r1;
        int i0, i1, i3, $i4, $i5, $i6, $i8;
        java.lang.String r0;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i3 = i0;

     label1:
        if i3 >= i1 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        if $i4 == 90 goto label2;

        $i5 = (int) $c2;

        if $i5 == 43 goto label2;

        $i6 = (int) $c2;

        if $i6 != 45 goto label3;

     label2:
        return i3;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $i8 = (int) -1;

        return $i8;
    }

    protected int parseInt(java.lang.String, int, int) throws java.lang.NumberFormatException
    {
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r22;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r9, $r10, $r12, $r13, $r16, $r17, $r19, $r20;
        int i0, $i2, $i3, i4, $i5, i6, i7, i8;
        java.lang.String r0, $r4, $r7, $r11, $r14, $r18, $r21;
        char $c1;
        java.lang.NumberFormatException $r1, $r8, $r15;

        r22 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        i6 = 0;

        i7 = i0;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i2 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int getDigit(char)>($c1);

        if $i2 >= 0 goto label2;

        $r15 = new java.lang.NumberFormatException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has wrong format");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label2:
        if i6 >= -214748364 goto label3;

        $r8 = new java.lang.NumberFormatException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has wrong format");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label3:
        i8 = i6 * 10;

        $i3 = -2147483647 + $i2;

        if i8 >= $i3 goto label4;

        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has wrong format");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label4:
        i6 = i8 - $i2;

        i7 = i7 + 1;

        if i7 < i4 goto label1;

        $i5 = neg i6;

        return $i5;
    }

    protected int parseIntYear(java.lang.String, int)
    {
        boolean z0;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r29;
        java.lang.StringBuilder $r3, $r5, $r6, $r10, $r12, $r13, $r17, $r19, $r20, $r24, $r26, $r27, $r30, $r32, $r34, $r36;
        int i1, $i2, $i3, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, $i14;
        java.lang.String r0, $r4, $r7, $r11, $r14, $r18, $r21, $r25, $r28;
        char $c0, $c4;
        java.lang.NumberFormatException $r31, $r33, $r35, $r37;

        r29 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i8 = 0;

        z0 = 0;

        i9 = 0;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i14 = (int) $c0;

        if $i14 != 45 goto label1;

        z0 = 1;

        i10 = -2147483648;

        i13 = -2147483648;

        i12 = -2147483648;

        i9 = 1;

        goto label2;

     label1:
        i10 = -2147483647;

        i13 = -2147483647;

        i12 = -2147483647;

     label2:
        $i7 = i12 / 10;

     label3:
        if i9 >= i1 goto label7;

        $i3 = i9;

        i9 = i9 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i5 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int getDigit(char)>($c4);

        if $i5 >= 0 goto label4;

        $r31 = new java.lang.NumberFormatException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r25 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has wrong format");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r28);

        throw $r31;

     label4:
        if i8 >= $i7 goto label5;

        $r33 = new java.lang.NumberFormatException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has wrong format");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r21);

        throw $r33;

     label5:
        i11 = i8 * 10;

        $i6 = i13 + $i5;

        if i11 >= $i6 goto label6;

        $r35 = new java.lang.NumberFormatException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has wrong format");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r14);

        throw $r35;

     label6:
        i8 = i11 - $i5;

        goto label3;

     label7:
        if z0 == 0 goto label9;

        if i9 <= 1 goto label8;

        return i8;

     label8:
        $r37 = new java.lang.NumberFormatException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has wrong format");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);

        throw $r37;

     label9:
        $i2 = neg i8;

        return $i2;
    }

    public java.lang.String dateToString(int[])
    {
        char $c9;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r1;
        int[] r2;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        java.lang.String $r3;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r2 := @parameter0: int[];

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(25);

        $i0 = r2[0];

        virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void append(java.lang.StringBuffer,int,int)>($r4, $i0, 4);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $i1 = r2[1];

        virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void append(java.lang.StringBuffer,int,int)>($r4, $i1, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $i2 = r2[2];

        virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void append(java.lang.StringBuffer,int,int)>($r4, $i2, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(84);

        $i3 = r2[3];

        virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void append(java.lang.StringBuffer,int,int)>($r4, $i3, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $i4 = r2[4];

        virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void append(java.lang.StringBuffer,int,int)>($r4, $i4, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $i5 = r2[5];

        virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void append(java.lang.StringBuffer,int,int)>($r4, $i5, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $i7 = r2[6];

        $i6 = r2[8];

        staticinvoke <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void appendFractionalTime(java.lang.StringBuffer,int,int)>($r4, $i7, $i6);

        $i8 = r2[7];

        $c9 = (char) $i8;

        $i10 = (int) $c9;

        virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void append(java.lang.StringBuffer,int,int)>($r4, $i10, 0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static void appendFractionalTime(java.lang.StringBuffer, int, int)
    {
        char $c4;
        java.lang.StringBuffer r1;
        int i0, i1, $i2, $i3, i5, i6, $i8, $i9, $i11;
        java.lang.String $r0, $r2;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        i5 = i1 - $i2;

     label1:
        if i5 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        $i8 = (int) -1;

        i5 = i5 + $i8;

        goto label1;

     label2:
        i6 = virtualinvoke $r0.<java.lang.String: int length()>();

     label3:
        if i6 <= 0 goto label4;

        $i3 = i6 - 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        $i9 = (int) $c4;

        if $i9 != 48 goto label4;

        $i11 = (int) -1;

        i6 = i6 + $i11;

        goto label3;

     label4:
        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, i6);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        return;
    }

    protected void append(java.lang.StringBuffer, int, int)
    {
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r1;
        java.lang.StringBuffer r0;
        int i0, i2;
        char $c1;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r0 := @parameter0: java.lang.StringBuffer;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        if i2 >= 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        i2 = neg i2;

     label1:
        if i0 != 4 goto label5;

        if i2 >= 10 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("000");

        goto label4;

     label2:
        if i2 >= 100 goto label3;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("00");

        goto label4;

     label3:
        if i2 >= 1000 goto label4;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

     label4:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        goto label8;

     label5:
        if i0 != 2 goto label7;

        if i2 >= 10 goto label6;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label6:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        goto label8;

     label7:
        if i2 == 0 goto label8;

        $c1 = (char) i2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label8:
        return;
    }

    public com.hp.hpl.jena.datatypes.RDFDatatype normalizeSubType(java.lang.Object, com.hp.hpl.jena.datatypes.RDFDatatype)
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r3, $r4, $r7;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType r1;
        com.hp.hpl.jena.datatypes.RDFDatatype r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime $r5, $r6;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        $z0 = r0 instanceof com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        if $z0 == 0 goto label2;

        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdateTime>;

        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r6 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) r0;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: com.hp.hpl.jena.datatypes.xsd.XSDDatatype getNarrowedDatatype()>();

        return $r7;

     label1:
        $z2 = r2 instanceof com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        if $z2 == 0 goto label2;

        $r5 = (com.hp.hpl.jena.datatypes.xsd.XSDDateTime) r0;

        $r4 = (com.hp.hpl.jena.datatypes.xsd.XSDDatatype) r2;

        virtualinvoke $r5.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: void narrowType(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r4);

     label2:
        return r1;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int DAY> = 15;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int MONTH> = 1;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int YEAR> = 2000;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int TOTAL_SIZE> = 9;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int mm> = 1;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int hh> = 0;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int utc> = 7;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int msscale> = 8;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int ms> = 6;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int s> = 5;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int m> = 4;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int h> = 3;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int D> = 2;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int M> = 1;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: int CY> = 0;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: short FULL_MASK> = 15;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: short TIME_MASK> = 8;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: short DAY_MASK> = 4;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: short MONTH_MASK> = 2;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: short YEAR_MASK> = 1;

        return;
    }
}
