class com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter extends com.hp.hpl.jena.util.iterator.Filter
{
    com.hp.hpl.jena.graph.TripleMatch m;
    final com.hp.hpl.jena.graph.impl.CollectionGraph this$0;

    public void <init>(com.hp.hpl.jena.graph.impl.CollectionGraph, com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.graph.impl.CollectionGraph r1;
        com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter r0;
        java.lang.IllegalArgumentException $r3;
        com.hp.hpl.jena.graph.TripleMatch r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter;

        r1 := @parameter0: com.hp.hpl.jena.graph.impl.CollectionGraph;

        r2 := @parameter1: com.hp.hpl.jena.graph.TripleMatch;

        r0.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: com.hp.hpl.jena.graph.impl.CollectionGraph this$0> = r1;

        specialinvoke r0.<com.hp.hpl.jena.util.iterator.Filter: void <init>()>();

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Match must not be null");

        throw $r3;

     label1:
        r0.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: com.hp.hpl.jena.graph.TripleMatch m> = r2;

        return;
    }

    public boolean accept(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter r1;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r5, $r7, $r8, $r10;
        com.hp.hpl.jena.graph.TripleMatch $r3, $r6, $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r11;
        com.hp.hpl.jena.graph.Triple r0;

        r1 := @this: com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("triple must not be null");

        throw $r11;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getMatchSubject()>();

        $r3 = r1.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: com.hp.hpl.jena.graph.TripleMatch m>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchSubject()>();

        $z0 = specialinvoke r1.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: boolean matches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r4);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getMatchPredicate()>();

        $r6 = r1.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: com.hp.hpl.jena.graph.TripleMatch m>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchPredicate()>();

        $z1 = specialinvoke r1.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: boolean matches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, $r7);

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getMatchObject()>();

        $r9 = r1.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: com.hp.hpl.jena.graph.TripleMatch m>;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchObject()>();

        $z2 = specialinvoke r1.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: boolean matches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r8, $r10);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private boolean isWild(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter r2;
        com.hp.hpl.jena.graph.Node r0, $r1;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label1;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private boolean matches(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter r0;
        com.hp.hpl.jena.graph.Node r1, r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: boolean isWild(com.hp.hpl.jena.graph.Node)>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: boolean isWild(com.hp.hpl.jena.graph.Node)>(r2);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public volatile boolean accept(java.lang.Object)
    {
        com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter r0;
        java.lang.Object r1;
        com.hp.hpl.jena.graph.Triple $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.graph.Triple) r1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.CollectionGraph$MatchFilter: boolean accept(com.hp.hpl.jena.graph.Triple)>($r2);

        return $z0;
    }
}
