public class org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor extends org.springframework.scheduling.backportconcurrent.CustomizableThreadFactory implements org.springframework.scheduling.SchedulingTaskExecutor, edu.emory.mathcs.backport.java.util.concurrent.Executor, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private final java.lang.Object poolSizeMonitor;
    private int corePoolSize;
    private int maxPoolSize;
    private int keepAliveSeconds;
    private boolean allowCoreThreadTimeOut;
    private int queueCapacity;
    private edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory threadFactory;
    private edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler;
    private boolean waitForTasksToCompleteOnShutdown;
    private boolean threadNamePrefixSet;
    private java.lang.String beanName;
    private edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor;

    public void <init>()
    {
        edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler $r7;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$AbortPolicy $r6;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.Object $r5;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        specialinvoke r0.<org.springframework.scheduling.backportconcurrent.CustomizableThreadFactory: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: org.apache.commons.logging.Log logger> = $r2;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor> = $r5;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int corePoolSize> = 1;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int maxPoolSize> = 2147483647;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int keepAliveSeconds> = 60;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: boolean allowCoreThreadTimeOut> = 0;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int queueCapacity> = 2147483647;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory threadFactory> = r0;

        $r6 = new edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$AbortPolicy;

        specialinvoke $r6.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void <init>()>();

        $r7 = (edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler) $r6;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler> = $r7;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: boolean waitForTasksToCompleteOnShutdown> = 0;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: boolean threadNamePrefixSet> = 0;

        return;
    }

    public void setCorePoolSize(int)
    {
        java.lang.Throwable $r4;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor $r2, $r3;
        int i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int corePoolSize> = i0;

        $r2 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        if $r2 == null goto label2;

        $r3 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        virtualinvoke $r3.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>(i0);

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getCorePoolSize()
    {
        java.lang.Throwable $r2;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        $i0 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int corePoolSize>;

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setMaxPoolSize(int)
    {
        java.lang.Throwable $r4;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor $r2, $r3;
        int i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int maxPoolSize> = i0;

        $r2 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        if $r2 == null goto label2;

        $r3 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        virtualinvoke $r3.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor: void setMaximumPoolSize(int)>(i0);

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getMaxPoolSize()
    {
        java.lang.Throwable $r2;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        $i0 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int maxPoolSize>;

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setKeepAliveSeconds(int)
    {
        java.lang.Throwable $r5;
        edu.emory.mathcs.backport.java.util.concurrent.TimeUnit $r3;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        long $l1;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor $r2, $r4;
        int i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int keepAliveSeconds> = i0;

        $r2 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        if $r2 == null goto label2;

        $r4 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        $l1 = (long) i0;

        $r3 = <edu.emory.mathcs.backport.java.util.concurrent.TimeUnit: edu.emory.mathcs.backport.java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r4.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor: void setKeepAliveTime(long,edu.emory.mathcs.backport.java.util.concurrent.TimeUnit)>($l1, $r3);

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getKeepAliveSeconds()
    {
        java.lang.Throwable $r2;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.Object poolSizeMonitor>;

        entermonitor $r1;

     label1:
        $i0 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int keepAliveSeconds>;

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setAllowCoreThreadTimeOut(boolean)
    {
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: boolean allowCoreThreadTimeOut> = z0;

        return;
    }

    public void setQueueCapacity(int)
    {
        int i0;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        i0 := @parameter0: int;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int queueCapacity> = i0;

        return;
    }

    public void setThreadFactory(edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory)
    {
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        java.lang.Object $r2;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory r1, $r3;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        r1 := @parameter0: edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        $r3 = (edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory) $r2;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory threadFactory> = $r3;

        return;
    }

    public void setRejectedExecutionHandler(edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler)
    {
        edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler r1, $r4;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$AbortPolicy $r3;
        java.lang.Object $r2;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        r1 := @parameter0: edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$AbortPolicy;

        $r2 = $r3;

        specialinvoke $r3.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void <init>()>();

     label2:
        $r4 = (edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler) $r2;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler> = $r4;

        return;
    }

    public void setWaitForTasksToCompleteOnShutdown(boolean)
    {
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: boolean waitForTasksToCompleteOnShutdown> = z0;

        return;
    }

    public void setThreadNamePrefix(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.scheduling.backportconcurrent.CustomizableThreadFactory: void setThreadNamePrefix(java.lang.String)>(r1);

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: boolean threadNamePrefixSet> = 1;

        return;
    }

    public void setBeanName(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.String beanName> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: void initialize()>();

        return;
    }

    public void initialize()
    {
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor $r2, $r20;
        boolean $z0, $z1, $z2;
        edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler $r23;
        edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue $r19;
        java.lang.StringBuilder $r4, $r7, $r9, $r12, $r14, $r16, $r17;
        long $l4;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory $r22;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r5, $r6, $r8, $r11, $r13, $r15, $r18;
        edu.emory.mathcs.backport.java.util.concurrent.TimeUnit $r21;
        org.apache.commons.logging.Log $r1, $r10;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label3;

        $r10 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: org.apache.commons.logging.Log logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Initializing ThreadPoolExecutor");

        $r11 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.String beanName>;

        if $r11 == null goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>(" \'");

        $r15 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.String beanName>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r18 = "";

     label2:
        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r13);

     label3:
        $z1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: boolean threadNamePrefixSet>;

        if $z1 != 0 goto label4;

        $r3 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.String beanName>;

        if $r3 == null goto label4;

        $r4 = new java.lang.StringBuilder;

        $r5 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.String beanName>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: void setThreadNamePrefix(java.lang.String)>($r8);

     label4:
        $i0 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int queueCapacity>;

        $r19 = virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue createQueue(int)>($i0);

        $r20 = new edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor;

        $i1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int corePoolSize>;

        $i2 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int maxPoolSize>;

        $i3 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: int keepAliveSeconds>;

        $l4 = (long) $i3;

        $r21 = <edu.emory.mathcs.backport.java.util.concurrent.TimeUnit: edu.emory.mathcs.backport.java.util.concurrent.TimeUnit SECONDS>;

        $r22 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory threadFactory>;

        $r23 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler>;

        specialinvoke $r20.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,edu.emory.mathcs.backport.java.util.concurrent.TimeUnit,edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue,edu.emory.mathcs.backport.java.util.concurrent.ThreadFactory,edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionHandler)>($i1, $i2, $l4, $r21, $r19, $r22, $r23);

        r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor> = $r20;

        $z2 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: boolean allowCoreThreadTimeOut>;

        if $z2 == 0 goto label5;

        $r2 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        virtualinvoke $r2.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1);

     label5:
        return;
    }

    protected edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue createQueue(int)
    {
        edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue $r3;
        edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue $r5, $r6;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r2;
        int i0;
        edu.emory.mathcs.backport.java.util.concurrent.SynchronousQueue $r4;

        r2 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $r3 = new edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r3.<edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(i0);

        $r5 = (edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue) $r3;

        return $r5;

     label1:
        $r4 = new edu.emory.mathcs.backport.java.util.concurrent.SynchronousQueue;

        specialinvoke $r4.<edu.emory.mathcs.backport.java.util.concurrent.SynchronousQueue: void <init>()>();

        $r6 = (edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue) $r4;

        return $r6;
    }

    public edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor() throws java.lang.IllegalStateException
    {
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z0, "ThreadPoolTaskExecutor not initialized");

        $r2 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        return $r2;
    }

    public void execute(java.lang.Runnable)
    {
        java.lang.Throwable $r3;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        org.springframework.core.task.TaskRejectedException $r11;
        java.lang.Runnable r2;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor $r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;
        edu.emory.mathcs.backport.java.util.concurrent.Executor $r12;
        java.lang.String $r9;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        r2 := @parameter0: java.lang.Runnable;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>();

     label1:
        $r12 = (edu.emory.mathcs.backport.java.util.concurrent.Executor) $r1;

        interfaceinvoke $r12.<edu.emory.mathcs.backport.java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r11 = new org.springframework.core.task.TaskRejectedException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Executor [");

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] did not accept task: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.springframework.core.task.TaskRejectedException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r11;

     label4:
        return;

        catch edu.emory.mathcs.backport.java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public void execute(java.lang.Runnable, long)
    {
        long l0;
        java.lang.Runnable r1;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.FutureTask $r0;
        java.lang.Runnable r1;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r2;

        r2 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r0 = new java.util.concurrent.FutureTask;

        specialinvoke $r0.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r1, null);

        virtualinvoke r2.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>($r0);

        return $r0;
    }

    public java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.FutureTask $r0;
        java.util.concurrent.Callable r1;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r2;

        r2 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r0 = new java.util.concurrent.FutureTask;

        specialinvoke $r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r1);

        virtualinvoke r2.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: void execute(java.lang.Runnable)>($r0);

        return $r0;
    }

    public boolean prefersShortLivedTasks()
    {
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        return 1;
    }

    public int getPoolSize()
    {
        int $i0;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor $r1;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>();

        $i0 = virtualinvoke $r1.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>();

        return $i0;
    }

    public int getActiveCount()
    {
        int $i0;
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor $r1;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor getThreadPoolExecutor()>();

        $i0 = virtualinvoke $r1.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>();

        return $i0;
    }

    public void destroy()
    {
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        virtualinvoke r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: void shutdown()>();

        return;
    }

    public void shutdown()
    {
        org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor r0;
        edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor $r2, $r3;
        java.lang.String $r6, $r8, $r10, $r13;
        boolean $z0, $z1;
        org.apache.commons.logging.Log $r1, $r5;
        java.lang.StringBuilder $r4, $r7, $r9, $r11, $r12;

        r0 := @this: org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Shutting down ThreadPoolExecutor");

        $r6 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.String beanName>;

        if $r6 == null goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(" \'");

        $r10 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: java.lang.String beanName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r13 = "";

     label2:
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r8);

     label3:
        $z1 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: boolean waitForTasksToCompleteOnShutdown>;

        if $z1 == 0 goto label4;

        $r3 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        virtualinvoke $r3.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

        goto label5;

     label4:
        $r2 = r0.<org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor: edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor threadPoolExecutor>;

        virtualinvoke $r2.<edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>();

     label5:
        return;
    }
}
