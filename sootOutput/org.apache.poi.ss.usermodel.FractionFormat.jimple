public class org.apache.poi.ss.usermodel.FractionFormat extends java.text.Format
{
    private static final java.util.regex.Pattern DENOM_FORMAT_PATTERN;
    private static final int MAX_DENOM_POW;
    private final int exactDenom;
    private final int maxDenom;
    private final java.lang.String wholePartFormatString;

    public void <init>(java.lang.String, java.lang.String)
    {
        java.util.regex.Matcher $r4;
        org.apache.poi.ss.usermodel.FractionFormat r0;
        int $i0, $i1, i2, i3, $i4, $i6, $i8, $i10;
        java.lang.String r1, r2, $r5, $r6, $r7, $r8;
        boolean $z0;
        double $d0, $d1;
        java.lang.NumberFormatException $r9;
        java.util.regex.Pattern $r3;

        r0 := @this: org.apache.poi.ss.usermodel.FractionFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.text.Format: void <init>()>();

        r0.<org.apache.poi.ss.usermodel.FractionFormat: java.lang.String wholePartFormatString> = r1;

        $r3 = <org.apache.poi.ss.usermodel.FractionFormat: java.util.regex.Pattern DENOM_FORMAT_PATTERN>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $i6 = (int) -1;

        i2 = $i6;

        $i8 = (int) -1;

        i3 = $i8;

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label8;

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        if $r5 == null goto label4;

     label1:
        $r8 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        i2 = $i1;

        if $i1 != 0 goto label2;

        $i10 = (int) -1;

        i2 = $i10;

     label2:
        goto label8;

     label3:
        $r9 := @caughtexception;

        goto label8;

     label4:
        $r6 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        if $r6 == null goto label7;

        $r7 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 <= 4 goto label5;

        $i4 = 4;

        goto label6;

     label5:
        $i4 = $i0;

     label6:
        $d0 = (double) $i4;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0);

        i3 = (int) $d1;

        goto label8;

     label7:
        i2 = 100;

     label8:
        if i2 > 0 goto label9;

        if i3 > 0 goto label9;

        i2 = 100;

     label9:
        r0.<org.apache.poi.ss.usermodel.FractionFormat: int exactDenom> = i2;

        r0.<org.apache.poi.ss.usermodel.FractionFormat: int maxDenom> = i3;

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.lang.String format(java.lang.Number)
    {
        byte $b0, $b1, $b6, $b8, $b14;
        java.lang.StringBuilder $r5, $r6, $r9, $r14, $r15, $r23, $r24;
        org.apache.poi.ss.usermodel.FractionFormat r1;
        java.lang.String $r3, $r4, $r7, $r8, $r10, $r11, $r12, $r13, $r16, $r18, $r19, $r21;
        java.lang.Number r0;
        java.lang.RuntimeException $r20;
        boolean z0, $z1, $z3, $z4;
        int $i2, $i3, $i4, $i5, $i7, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, $i26, $i27, $i28, $i29, $i30, $i31;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        org.apache.poi.ss.format.SimpleFraction r22;

        r1 := @this: org.apache.poi.ss.usermodel.FractionFormat;

        r0 := @parameter0: java.lang.Number;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $b0 = $d0 cmpg 0.0;

        $i29 = (int) $b0;

        if $i29 >= 0 goto label01;

        $z4 = 1;

        $z3 = 1;

        goto label02;

     label01:
        $z4 = 0;

        $z3 = 0;

     label02:
        z0 = $z3;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double floor(double)>($d1);

        $d8 = $d1 - $d2;

        $d3 = $d2 + $d8;

        $b1 = $d3 cmpl 0.0;

        if $b1 != 0 goto label03;

        return "0";

     label03:
        $i3 = r1.<org.apache.poi.ss.usermodel.FractionFormat: int exactDenom>;

        $i2 = r1.<org.apache.poi.ss.usermodel.FractionFormat: int maxDenom>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i2);

        $i5 = 1 / $i4;

        $d4 = (double) $i5;

        $b6 = $d1 cmpg $d4;

        $i30 = (int) $b6;

        if $i30 >= 0 goto label04;

        return "0";

     label04:
        $i7 = (int) $d8;

        $d5 = (double) $i7;

        $d7 = $d2 + $d5;

        $d6 = $d2 + $d8;

        $b8 = $d7 cmpl $d6;

        if $b8 != 0 goto label06;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        if $z4 == 0 goto label05;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

     label05:
        $i28 = (int) $d2;

        $r18 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i28);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

     label06:
        $i9 = r1.<org.apache.poi.ss.usermodel.FractionFormat: int exactDenom>;

        if $i9 <= 0 goto label07;

        $i27 = r1.<org.apache.poi.ss.usermodel.FractionFormat: int exactDenom>;

        r22 = staticinvoke <org.apache.poi.ss.format.SimpleFraction: org.apache.poi.ss.format.SimpleFraction buildFractionExactDenominator(double,int)>($d8, $i27);

        goto label08;

     label07:
        $i10 = r1.<org.apache.poi.ss.usermodel.FractionFormat: int maxDenom>;

        r22 = staticinvoke <org.apache.poi.ss.format.SimpleFraction: org.apache.poi.ss.format.SimpleFraction buildFractionMaxDenominator(double,int)>($d8, $i10);

     label08:
        goto label10;

     label09:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.lang.RuntimeException: void printStackTrace()>();

        $r21 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r21;

     label10:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label11;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

     label11:
        $r4 = "";

        $r3 = r1.<org.apache.poi.ss.usermodel.FractionFormat: java.lang.String wholePartFormatString>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label12;

        $i21 = virtualinvoke r22.<org.apache.poi.ss.format.SimpleFraction: int getDenominator()>();

        $i22 = (int) $d2;

        $i23 = $i21 * $i22;

        $i24 = virtualinvoke r22.<org.apache.poi.ss.format.SimpleFraction: int getNumerator()>();

        i25 = $i23 + $i24;

        $r14 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i25);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i26 = virtualinvoke r22.<org.apache.poi.ss.format.SimpleFraction: int getDenominator()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r16 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label12:
        $i11 = virtualinvoke r22.<org.apache.poi.ss.format.SimpleFraction: int getNumerator()>();

        if $i11 != 0 goto label13;

        $i20 = (int) $d2;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i20);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label13:
        $i12 = virtualinvoke r22.<org.apache.poi.ss.format.SimpleFraction: int getNumerator()>();

        $i13 = virtualinvoke r22.<org.apache.poi.ss.format.SimpleFraction: int getDenominator()>();

        if $i12 != $i13 goto label14;

        $i18 = (int) $d2;

        $i19 = $i18 + 1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i19);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label14:
        $b14 = $d2 cmpl 0.0;

        $i31 = (int) $b14;

        if $i31 <= 0 goto label15;

        $i17 = (int) $d2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i17);

        $r9 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label15:
        $i15 = virtualinvoke r22.<org.apache.poi.ss.format.SimpleFraction: int getNumerator()>();

        $r5 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i16 = virtualinvoke r22.<org.apache.poi.ss.format.SimpleFraction: int getDenominator()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r7 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

        catch java.lang.RuntimeException from label06 to label08 with label09;
    }

    public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.text.FieldPosition r6;
        java.lang.StringBuffer r0, $r5;
        org.apache.poi.ss.usermodel.FractionFormat r1;
        java.lang.Object r2;
        java.lang.String $r4;
        java.lang.Number $r3;

        r1 := @this: org.apache.poi.ss.usermodel.FractionFormat;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.StringBuffer;

        r6 := @parameter2: java.text.FieldPosition;

        $r3 = (java.lang.Number) r2;

        $r4 = virtualinvoke r1.<org.apache.poi.ss.usermodel.FractionFormat: java.lang.String format(java.lang.Number)>($r3);

        $r5 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        return $r5;
    }

    public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition)
    {
        org.apache.poi.ss.formula.eval.NotImplementedException $r0;
        org.apache.poi.ss.usermodel.FractionFormat r1;
        java.text.ParsePosition r3;
        java.lang.String r2;

        r1 := @this: org.apache.poi.ss.usermodel.FractionFormat;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.text.ParsePosition;

        $r0 = new org.apache.poi.ss.formula.eval.NotImplementedException;

        specialinvoke $r0.<org.apache.poi.ss.formula.eval.NotImplementedException: void <init>(java.lang.String)>("Reverse parsing not supported");

        throw $r0;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.poi.ss.usermodel.FractionFormat: int MAX_DENOM_POW> = 4;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?:(#+)|(\\d+))");

        <org.apache.poi.ss.usermodel.FractionFormat: java.util.regex.Pattern DENOM_FORMAT_PATTERN> = $r0;

        return;
    }
}
