public class com.hp.hpl.jena.rdf.model.impl.LiteralImpl extends com.hp.hpl.jena.enhanced.EnhNode implements com.hp.hpl.jena.rdf.model.Literal
{
    public static final com.hp.hpl.jena.enhanced.Implementation factory;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.rdf.model.impl.ModelCom)
    {
        com.hp.hpl.jena.rdf.model.impl.ModelCom r2;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.impl.ModelCom;

        specialinvoke r0.<com.hp.hpl.jena.enhanced.EnhNode: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.enhanced.EnhGraph r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        specialinvoke r0.<com.hp.hpl.jena.enhanced.EnhNode: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        return;
    }

    public java.lang.Object visitWith(com.hp.hpl.jena.rdf.model.RDFVisitor)
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r1;
        java.lang.Object $r2;
        com.hp.hpl.jena.rdf.model.RDFVisitor r0;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFVisitor;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.RDFVisitor: java.lang.Object visitLiteral(com.hp.hpl.jena.rdf.model.Literal)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.Literal inModel(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.rdf.model.Model $r1, r2;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.rdf.model.Literal $r5;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.rdf.model.Model getModel()>();

        if $r1 != r2 goto label1;

        $r5 = r0;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r4 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.RDFNode getRDFNode(com.hp.hpl.jena.graph.Node)>($r3);

        $r5 = (com.hp.hpl.jena.rdf.model.Literal) $r4;

     label2:
        return $r5;
    }

    public com.hp.hpl.jena.rdf.model.Literal asLiteral()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        return r0;
    }

    public com.hp.hpl.jena.rdf.model.Resource asResource()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r1;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.rdf.model.ResourceRequiredException $r0;

        r1 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r0 = new com.hp.hpl.jena.rdf.model.ResourceRequiredException;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke $r0.<com.hp.hpl.jena.rdf.model.ResourceRequiredException: void <init>(com.hp.hpl.jena.graph.Node)>($r2);

        throw $r0;
    }

    public com.hp.hpl.jena.rdf.model.Model getModel()
    {
        com.hp.hpl.jena.rdf.model.impl.ModelCom $r2;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.enhanced.EnhGraph $r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.enhanced.EnhGraph getGraph()>();

        $r2 = (com.hp.hpl.jena.rdf.model.impl.ModelCom) $r1;

        return $r2;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r3;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = <com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping Standard>;

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping,boolean)>($r2, 0);

        return $r3;
    }

    public java.lang.Object getValue()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        return $r2;
    }

    public com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.datatypes.RDFDatatype $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        return $r2;
    }

    public java.lang.String getDatatypeURI()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        return $r2;
    }

    public boolean isPlainLiteral()
    {
        com.hp.hpl.jena.datatypes.RDFDatatype $r2;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getLexicalForm()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        return $r2;
    }

    public boolean getBoolean()
    {
        com.hp.hpl.jena.shared.BadBooleanException $r10;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.Boolean $r9;
        java.lang.String $r5, $r8, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.datatypes.DatatypeFormatException $r3;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r6, $r7;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: boolean isPlainLiteral()>();

        if $z0 == 0 goto label3;

        $z3 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>("true");

        if $z3 == 0 goto label1;

        return 1;

     label1:
        $z4 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>("false");

        if $z4 == 0 goto label2;

        return 0;

     label2:
        $r10 = new com.hp.hpl.jena.shared.BadBooleanException;

        $r11 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.shared.BadBooleanException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label3:
        $z1 = $r2 instanceof java.lang.Boolean;

        if $z1 == 0 goto label4;

        $r9 = (java.lang.Boolean) $r2;

        $z2 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label4:
        $r3 = new com.hp.hpl.jena.datatypes.DatatypeFormatException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String toString()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a Boolean");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.datatypes.DatatypeFormatException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    public byte getByte()
    {
        byte $b0, $b1;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        java.lang.Object $r1;
        java.lang.String $r3;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: boolean isPlainLiteral()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getLexicalForm()>();

        $b1 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String)>($r3);

        return $b1;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Object getValue()>();

        $r2 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Number asNumber(java.lang.Object)>($r1);

        $b0 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: byte byteValue(java.lang.Number)>($r2);

        return $b0;
    }

    public short getShort()
    {
        short $s0, $s1;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        java.lang.Object $r1;
        java.lang.String $r3;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: boolean isPlainLiteral()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getLexicalForm()>();

        $s1 = staticinvoke <java.lang.Short: short parseShort(java.lang.String)>($r3);

        return $s1;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Object getValue()>();

        $r2 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Number asNumber(java.lang.Object)>($r1);

        $s0 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: short shortValue(java.lang.Number)>($r2);

        return $s0;
    }

    public int getInt()
    {
        int $i0, $i1;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        java.lang.Object $r1;
        java.lang.String $r3;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: boolean isPlainLiteral()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getLexicalForm()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i1;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Object getValue()>();

        $r2 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Number asNumber(java.lang.Object)>($r1);

        $i0 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: int intValue(java.lang.Number)>($r2);

        return $i0;
    }

    public long getLong()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        java.lang.Object $r1;
        long $l0, $l1;
        java.lang.String $r3;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: boolean isPlainLiteral()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getLexicalForm()>();

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        return $l1;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Object getValue()>();

        $r2 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Number asNumber(java.lang.Object)>($r1);

        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public char getChar()
    {
        java.lang.Character $r8;
        int $i1;
        java.lang.String $r4, $r7, $r9, $r11, $r12;
        boolean $z0, $z1;
        char $c0, $c2;
        com.hp.hpl.jena.datatypes.DatatypeFormatException $r2;
        com.hp.hpl.jena.shared.BadCharLiteralException $r10;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3, $r5, $r6;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: boolean isPlainLiteral()>();

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getString()>();

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i1 != 1 goto label1;

        $r12 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getString()>();

        $c2 = virtualinvoke $r12.<java.lang.String: char charAt(int)>(0);

        return $c2;

     label1:
        $r10 = new com.hp.hpl.jena.shared.BadCharLiteralException;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getString()>();

        specialinvoke $r10.<com.hp.hpl.jena.shared.BadCharLiteralException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Object getValue()>();

        $z1 = $r1 instanceof java.lang.Character;

        if $z1 == 0 goto label3;

        $r8 = (java.lang.Character) $r1;

        $c0 = virtualinvoke $r8.<java.lang.Character: char charValue()>();

        return $c0;

     label3:
        $r2 = new com.hp.hpl.jena.datatypes.DatatypeFormatException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a Character");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.jena.datatypes.DatatypeFormatException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public float getFloat()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        float $f0, $f1;
        java.lang.Object $r1;
        java.lang.String $r3;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: boolean isPlainLiteral()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getLexicalForm()>();

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r3);

        return $f1;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Object getValue()>();

        $r2 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Number asNumber(java.lang.Object)>($r1);

        $f0 = virtualinvoke $r2.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    public double getDouble()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        java.lang.Object $r1;
        java.lang.String $r3;
        java.lang.Number $r2;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: boolean isPlainLiteral()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getLexicalForm()>();

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

        return $d1;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Object getValue()>();

        $r2 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.Number asNumber(java.lang.Object)>($r1);

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public java.lang.String getString()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        return $r2;
    }

    public java.lang.String getLanguage()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        return $r2;
    }

    public boolean isWellFormedXML()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean getLiteralIsXML()>();

        return $z0;
    }

    public boolean sameValueAs(com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.graph.Node $r1, $r3;
        com.hp.hpl.jena.rdf.model.Literal r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Literal;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.graph.Node asNode()>();

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Literal: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>($r3);

        return $z0;
    }

    private java.lang.Number asNumber(java.lang.Object)
    {
        java.lang.String $r5, $r7, $r8, $r15, $r17, r19, $r23, $r26;
        java.lang.Number $r18;
        boolean $z0, $z1;
        com.hp.hpl.jena.datatypes.DatatypeFormatException $r16;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r4;
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r9, $r10, $r11, $r12, $r14, $r20, $r21, $r22, $r24, $r25;
        java.lang.Class $r13;

        r4 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r18 = (java.lang.Number) r0;

        return $r18;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error converting typed value to a number. \n");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Datatype is: ");

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getDatatypeURI()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r19 = $r7;

        $r8 = virtualinvoke r4.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getDatatypeURI()>();

        if $r8 == null goto label2;

        $r17 = virtualinvoke r4.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: java.lang.String getDatatypeURI()>();

        $z1 = virtualinvoke $r17.<java.lang.String: boolean startsWith(java.lang.String)>("http://www.w3.org/2001/XMLSchema");

        if $z1 != 0 goto label3;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is not an xsd type.");

        r19 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r12 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Java representation type is ");

        if r0 != null goto label4;

        $r26 = "null";

        goto label5;

     label4:
        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r13.<java.lang.Class: java.lang.String toString()>();

     label5:
        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new com.hp.hpl.jena.datatypes.DatatypeFormatException;

        specialinvoke $r16.<com.hp.hpl.jena.datatypes.DatatypeFormatException: void <init>(java.lang.String)>($r15);

        throw $r16;
    }

    private byte byteValue(java.lang.Number)
    {
        byte $b2;
        int $i1;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        long $l0;
        java.lang.Number r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        r1 := @parameter0: java.lang.Number;

        $l0 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: long getIntegralValueInRange(long,java.lang.Number,long)>(-128L, r1, 127L);

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        return $b2;
    }

    private short shortValue(java.lang.Number)
    {
        short $s2;
        int $i1;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        long $l0;
        java.lang.Number r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        r1 := @parameter0: java.lang.Number;

        $l0 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: long getIntegralValueInRange(long,java.lang.Number,long)>(-32768L, r1, 32767L);

        $i1 = (int) $l0;

        $s2 = (short) $i1;

        return $s2;
    }

    private int intValue(java.lang.Number)
    {
        int $i1;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        long $l0;
        java.lang.Number r1;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        r1 := @parameter0: java.lang.Number;

        $l0 = specialinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: long getIntegralValueInRange(long,java.lang.Number,long)>(-2147483648L, r1, 2147483647L);

        $i1 = (int) $l0;

        return $i1;
    }

    private long getIntegralValueInRange(long, java.lang.Number, long)
    {
        long $l0, l1, l3;
        java.lang.IllegalArgumentException $r8;
        byte $b2, $b4;
        int $i5, $i6;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r6;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.String $r5;
        java.lang.Number r0;

        r6 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        l1 := @parameter0: long;

        r0 := @parameter1: java.lang.Number;

        l3 := @parameter2: long;

        $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $b2 = l1 cmp $l0;

        $i5 = (int) $b2;

        if $i5 > 0 goto label1;

        $b4 = $l0 cmp l3;

        $i6 = (int) $b4;

        if $i6 > 0 goto label1;

        return $l0;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byte value required: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r8;
    }

    public volatile com.hp.hpl.jena.rdf.model.RDFNode inModel(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl r0;
        com.hp.hpl.jena.rdf.model.Literal $r2;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.LiteralImpl;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.rdf.model.Literal inModel(com.hp.hpl.jena.rdf.model.Model)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.rdf.model.impl.LiteralImpl$1 $r0;

        $r0 = new com.hp.hpl.jena.rdf.model.impl.LiteralImpl$1;

        specialinvoke $r0.<com.hp.hpl.jena.rdf.model.impl.LiteralImpl$1: void <init>()>();

        <com.hp.hpl.jena.rdf.model.impl.LiteralImpl: com.hp.hpl.jena.enhanced.Implementation factory> = $r0;

        return;
    }
}
