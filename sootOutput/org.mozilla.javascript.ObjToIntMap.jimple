public class org.mozilla.javascript.ObjToIntMap extends java.lang.Object implements java.io.Serializable
{
    static final long serialVersionUID;
    private static final int A;
    private static final java.lang.Object DELETED;
    private transient java.lang.Object[] keys;
    private transient int[] values;
    private int power;
    private int keyCount;
    private transient int occupiedCount;
    private static final boolean check;

    public void <init>()
    {
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        specialinvoke r0.<org.mozilla.javascript.ObjToIntMap: void <init>(int)>(4);

        return;
    }

    public void <init>(int)
    {
        int i0, $i1, $i2, i3, $i4;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i1 = i0 * 4;

        $i2 = $i1 / 3;

        i3 = 2;

     label2:
        $i4 = 1 << i3;

        if $i4 >= $i2 goto label3;

        i3 = i3 + 1;

        goto label2;

     label3:
        r0.<org.mozilla.javascript.ObjToIntMap: int power> = i3;

        return;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.mozilla.javascript.ObjToIntMap r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        $i0 = r0.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int size()
    {
        int $i0;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        $i0 = r0.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        return $i0;
    }

    public boolean has(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        org.mozilla.javascript.ObjToIntMap r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        r1 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NULL_VALUE>;

     label1:
        $i0 = specialinvoke r0.<org.mozilla.javascript.ObjToIntMap: int findIndex(java.lang.Object)>(r1);

        if 0 > $i0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int get(java.lang.Object, int)
    {
        int[] $r1;
        int $i0, i1, $i2;
        java.lang.Object r2;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        r2 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        if r2 != null goto label1;

        r2 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NULL_VALUE>;

     label1:
        $i0 = specialinvoke r0.<org.mozilla.javascript.ObjToIntMap: int findIndex(java.lang.Object)>(r2);

        if 0 > $i0 goto label2;

        $r1 = r0.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i2 = $r1[$i0];

        return $i2;

     label2:
        return i1;
    }

    public int getExisting(java.lang.Object)
    {
        int[] $r1;
        int $i0, $i1;
        java.lang.Object r2;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        r2 := @parameter0: java.lang.Object;

        if r2 != null goto label1;

        r2 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NULL_VALUE>;

     label1:
        $i0 = specialinvoke r0.<org.mozilla.javascript.ObjToIntMap: int findIndex(java.lang.Object)>(r2);

        if 0 > $i0 goto label2;

        $r1 = r0.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i1 = $r1[$i0];

        return $i1;

     label2:
        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        return 0;
    }

    public void put(java.lang.Object, int)
    {
        int[] $r1;
        int $i0, i1;
        java.lang.Object r2;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        r2 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        if r2 != null goto label1;

        r2 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NULL_VALUE>;

     label1:
        $i0 = specialinvoke r0.<org.mozilla.javascript.ObjToIntMap: int ensureIndex(java.lang.Object)>(r2);

        $r1 = r0.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $r1[$i0] = i1;

        return;
    }

    public java.lang.Object intern(java.lang.Object)
    {
        java.lang.Object[] $r2;
        int[] $r1;
        int $i0;
        java.lang.Object r3, $r4;
        org.mozilla.javascript.ObjToIntMap r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        r3 := @parameter0: java.lang.Object;

        z0 = 0;

        if r3 != null goto label1;

        z0 = 1;

        r3 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NULL_VALUE>;

     label1:
        $i0 = specialinvoke r0.<org.mozilla.javascript.ObjToIntMap: int ensureIndex(java.lang.Object)>(r3);

        $r1 = r0.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $r1[$i0] = 0;

        if z0 == 0 goto label2;

        $r4 = null;

        goto label3;

     label2:
        $r2 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $r4 = $r2[$i0];

     label3:
        return $r4;
    }

    public void remove(java.lang.Object)
    {
        java.lang.Object[] $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r1, r3;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        r3 := @parameter0: java.lang.Object;

        if r3 != null goto label1;

        r3 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NULL_VALUE>;

     label1:
        $i0 = specialinvoke r0.<org.mozilla.javascript.ObjToIntMap: int findIndex(java.lang.Object)>(r3);

        if 0 > $i0 goto label2;

        $r2 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $r1 = <org.mozilla.javascript.ObjToIntMap: java.lang.Object DELETED>;

        $r2[$i0] = $r1;

        $i1 = r0.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        $i2 = $i1 - 1;

        r0.<org.mozilla.javascript.ObjToIntMap: int keyCount> = $i2;

     label2:
        return;
    }

    public void clear()
    {
        java.lang.Object[] $r1, $r2;
        int i0, $i2;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        $r1 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        i0 = lengthof $r1;

     label1:
        if i0 == 0 goto label2;

        $r2 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $i2 = (int) -1;

        i0 = i0 + $i2;

        $r2[i0] = null;

        goto label1;

     label2:
        r0.<org.mozilla.javascript.ObjToIntMap: int keyCount> = 0;

        r0.<org.mozilla.javascript.ObjToIntMap: int occupiedCount> = 0;

        return;
    }

    public org.mozilla.javascript.ObjToIntMap$Iterator newIterator()
    {
        org.mozilla.javascript.ObjToIntMap$Iterator $r0;
        org.mozilla.javascript.ObjToIntMap r1;

        r1 := @this: org.mozilla.javascript.ObjToIntMap;

        $r0 = new org.mozilla.javascript.ObjToIntMap$Iterator;

        specialinvoke $r0.<org.mozilla.javascript.ObjToIntMap$Iterator: void <init>(org.mozilla.javascript.ObjToIntMap)>(r1);

        return $r0;
    }

    final void initIterator(org.mozilla.javascript.ObjToIntMap$Iterator)
    {
        org.mozilla.javascript.ObjToIntMap$Iterator r0;
        java.lang.Object[] $r3;
        int[] $r2;
        int $i0;
        org.mozilla.javascript.ObjToIntMap r1;

        r1 := @this: org.mozilla.javascript.ObjToIntMap;

        r0 := @parameter0: org.mozilla.javascript.ObjToIntMap$Iterator;

        $r3 = r1.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $r2 = r1.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i0 = r1.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        virtualinvoke r0.<org.mozilla.javascript.ObjToIntMap$Iterator: void init(java.lang.Object[],int[],int)>($r3, $r2, $i0);

        return;
    }

    public java.lang.Object[] getKeys()
    {
        int $i0;
        java.lang.Object[] r1;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        $i0 = r0.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        r1 = newarray (java.lang.Object)[$i0];

        virtualinvoke r0.<org.mozilla.javascript.ObjToIntMap: void getKeys(java.lang.Object[],int)>(r1, 0);

        return r1;
    }

    public void getKeys(java.lang.Object[], int)
    {
        java.lang.Object[] $r1, r4;
        org.mozilla.javascript.UniqueTag $r3;
        int i0, i1, i2, $i4;
        java.lang.Object $r2, r5;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        r4 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 = r0.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        i2 = 0;

     label1:
        if i1 == 0 goto label4;

        $r1 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        r5 = $r1[i2];

        if r5 == null goto label3;

        $r2 = <org.mozilla.javascript.ObjToIntMap: java.lang.Object DELETED>;

        if r5 == $r2 goto label3;

        $r3 = <org.mozilla.javascript.UniqueTag: org.mozilla.javascript.UniqueTag NULL_VALUE>;

        if r5 != $r3 goto label2;

        r5 = null;

     label2:
        r4[i0] = r5;

        i0 = i0 + 1;

        $i4 = (int) -1;

        i1 = i1 + $i4;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private static int tableLookupStep(int, int, int)
    {
        int i0, $i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = 2 * i0;

        i2 = 32 - $i1;

        if i2 < 0 goto label1;

        $i9 = i3 >>> i2;

        $i10 = $i9 & i4;

        $i11 = $i10 | 1;

        return $i11;

     label1:
        $i5 = neg i2;

        $i6 = i4 >>> $i5;

        $i7 = i3 & $i6;

        $i8 = $i7 | 1;

        return $i8;
    }

    private int findIndex(java.lang.Object)
    {
        java.lang.Object[] $r1, $r3, $r7;
        int[] $r4, $r5;
        int $i0, i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15, $i17;
        boolean $z0, $z1;
        java.lang.Object r2, r6, $r8;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        if $r1 == null goto label6;

        $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        i1 = $i0 * -1640531527;

        $i2 = r0.<org.mozilla.javascript.ObjToIntMap: int power>;

        $i3 = 32 - $i2;

        i13 = i1 >>> $i3;

        $r3 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        r6 = $r3[i13];

        if r6 == null goto label6;

        $i4 = r0.<org.mozilla.javascript.ObjToIntMap: int power>;

        i5 = 1 << $i4;

        if r6 == r2 goto label1;

        $r4 = r0.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i6 = i5 + i13;

        $i7 = $r4[$i6];

        if $i7 != $i0 goto label2;

        $z1 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

     label1:
        return i13;

     label2:
        $i12 = i5 - 1;

        $i8 = r0.<org.mozilla.javascript.ObjToIntMap: int power>;

        $i9 = staticinvoke <org.mozilla.javascript.ObjToIntMap: int tableLookupStep(int,int,int)>(i1, $i12, $i8);

     label3:
        $i14 = i13 + $i9;

        $i15 = $i14 & $i12;

        i13 = $i15;

        $r7 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $r8 = $r7[$i15];

        if $r8 != null goto label4;

        goto label6;

     label4:
        if $r8 == r2 goto label5;

        $r5 = r0.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i10 = i5 + $i15;

        $i11 = $r5[$i10];

        if $i11 != $i0 goto label3;

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

     label5:
        return $i15;

     label6:
        $i17 = (int) -1;

        return $i17;
    }

    private int insertNewKey(java.lang.Object, int)
    {
        java.lang.Object[] $r1, $r4, $r6;
        int[] $r5;
        int i0, i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, i16;
        java.lang.Object $r2, r3, $r7;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 = i0 * -1640531527;

        $i2 = r0.<org.mozilla.javascript.ObjToIntMap: int power>;

        $i3 = 32 - $i2;

        i16 = i1 >>> $i3;

        $i4 = r0.<org.mozilla.javascript.ObjToIntMap: int power>;

        i5 = 1 << $i4;

        $r1 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $r2 = $r1[i16];

        if $r2 == null goto label2;

        i11 = i5 - 1;

        $i12 = r0.<org.mozilla.javascript.ObjToIntMap: int power>;

        $i13 = staticinvoke <org.mozilla.javascript.ObjToIntMap: int tableLookupStep(int,int,int)>(i1, i11, $i12);

     label1:
        $i14 = i16 + $i13;

        $i15 = $i14 & i11;

        i16 = $i15;

        $r6 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $r7 = $r6[$i15];

        if $r7 != null goto label1;

     label2:
        $r4 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $r4[i16] = r3;

        $r5 = r0.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i6 = i5 + i16;

        $r5[$i6] = i0;

        $i7 = r0.<org.mozilla.javascript.ObjToIntMap: int occupiedCount>;

        $i8 = $i7 + 1;

        r0.<org.mozilla.javascript.ObjToIntMap: int occupiedCount> = $i8;

        $i9 = r0.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        $i10 = $i9 + 1;

        r0.<org.mozilla.javascript.ObjToIntMap: int keyCount> = $i10;

        return i16;
    }

    private void rehashTable()
    {
        java.lang.Object[] $r1, $r2, $r7, $r9;
        int[] $r3, $r6, $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, $i19;
        java.lang.Object r4, $r5;
        org.mozilla.javascript.ObjToIntMap r0;

        r0 := @this: org.mozilla.javascript.ObjToIntMap;

        $r1 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        if $r1 != null goto label1;

        $i13 = r0.<org.mozilla.javascript.ObjToIntMap: int power>;

        i15 = 1 << $i13;

        $r9 = newarray (java.lang.Object)[i15];

        r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys> = $r9;

        $i14 = 2 * i15;

        $r10 = newarray (int)[$i14];

        r0.<org.mozilla.javascript.ObjToIntMap: int[] values> = $r10;

        goto label5;

     label1:
        $i0 = r0.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        $i2 = $i0 * 2;

        $i1 = r0.<org.mozilla.javascript.ObjToIntMap: int occupiedCount>;

        if $i2 < $i1 goto label2;

        $i9 = r0.<org.mozilla.javascript.ObjToIntMap: int power>;

        $i10 = $i9 + 1;

        r0.<org.mozilla.javascript.ObjToIntMap: int power> = $i10;

     label2:
        $i3 = r0.<org.mozilla.javascript.ObjToIntMap: int power>;

        $i11 = 1 << $i3;

        $r7 = r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $r8 = r0.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i12 = lengthof $r7;

        $r2 = newarray (java.lang.Object)[$i11];

        r0.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys> = $r2;

        $i4 = 2 * $i11;

        $r3 = newarray (int)[$i4];

        r0.<org.mozilla.javascript.ObjToIntMap: int[] values> = $r3;

        i16 = r0.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        r0.<org.mozilla.javascript.ObjToIntMap: int keyCount> = 0;

        r0.<org.mozilla.javascript.ObjToIntMap: int occupiedCount> = 0;

        i17 = 0;

     label3:
        if i16 == 0 goto label5;

        r4 = $r7[i17];

        if r4 == null goto label4;

        $r5 = <org.mozilla.javascript.ObjToIntMap: java.lang.Object DELETED>;

        if r4 == $r5 goto label4;

        $i5 = $i12 + i17;

        i6 = $r8[$i5];

        $i7 = specialinvoke r0.<org.mozilla.javascript.ObjToIntMap: int insertNewKey(java.lang.Object,int)>(r4, i6);

        $r6 = r0.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i8 = $r8[i17];

        $r6[$i7] = $i8;

        $i19 = (int) -1;

        i16 = i16 + $i19;

     label4:
        i17 = i17 + 1;

        goto label3;

     label5:
        return;
    }

    private int ensureIndex(java.lang.Object)
    {
        int[] $r5, $r7, $r9;
        boolean $z0, $z1;
        java.lang.Object[] $r2, $r3, $r4, $r6, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, $i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, $i28, $i29, $i31, $i33;
        java.lang.Object r0, $r8, $r10, r11, $r13;
        org.mozilla.javascript.ObjToIntMap r1;

        r1 := @this: org.mozilla.javascript.ObjToIntMap;

        r0 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i31 = (int) -1;

        i26 = $i31;

        $i33 = (int) -1;

        i27 = $i33;

        $r2 = r1.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        if $r2 == null goto label08;

        i14 = $i0 * -1640531527;

        $i15 = r1.<org.mozilla.javascript.ObjToIntMap: int power>;

        $i16 = 32 - $i15;

        i26 = i14 >>> $i16;

        $r6 = r1.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        r11 = $r6[i26];

        if r11 == null goto label08;

        $i17 = r1.<org.mozilla.javascript.ObjToIntMap: int power>;

        i18 = 1 << $i17;

        if r11 == r0 goto label01;

        $r7 = r1.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i19 = i18 + i26;

        $i20 = $r7[$i19];

        if $i20 != $i0 goto label02;

        $z1 = virtualinvoke r11.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label02;

     label01:
        return i26;

     label02:
        $r8 = <org.mozilla.javascript.ObjToIntMap: java.lang.Object DELETED>;

        if r11 != $r8 goto label03;

        i27 = i26;

     label03:
        $i25 = i18 - 1;

        $i21 = r1.<org.mozilla.javascript.ObjToIntMap: int power>;

        $i22 = staticinvoke <org.mozilla.javascript.ObjToIntMap: int tableLookupStep(int,int,int)>(i14, $i25, $i21);

     label04:
        $i28 = i26 + $i22;

        $i29 = $i28 & $i25;

        i26 = $i29;

        $r12 = r1.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $r13 = $r12[$i29];

        if $r13 != null goto label05;

        goto label08;

     label05:
        if $r13 == r0 goto label06;

        $r9 = r1.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i23 = i18 + $i29;

        $i24 = $r9[$i23];

        if $i24 != $i0 goto label07;

        $z0 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label07;

     label06:
        return $i29;

     label07:
        $r10 = <org.mozilla.javascript.ObjToIntMap: java.lang.Object DELETED>;

        if $r13 != $r10 goto label04;

        if i27 >= 0 goto label04;

        i27 = $i29;

        goto label04;

     label08:
        if i27 < 0 goto label09;

        i26 = i27;

        goto label12;

     label09:
        $r3 = r1.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        if $r3 == null goto label10;

        $i2 = r1.<org.mozilla.javascript.ObjToIntMap: int occupiedCount>;

        $i6 = $i2 * 4;

        $i3 = r1.<org.mozilla.javascript.ObjToIntMap: int power>;

        $i4 = 1 << $i3;

        $i5 = $i4 * 3;

        if $i6 < $i5 goto label11;

     label10:
        specialinvoke r1.<org.mozilla.javascript.ObjToIntMap: void rehashTable()>();

        $i1 = specialinvoke r1.<org.mozilla.javascript.ObjToIntMap: int insertNewKey(java.lang.Object,int)>(r0, $i0);

        return $i1;

     label11:
        $i7 = r1.<org.mozilla.javascript.ObjToIntMap: int occupiedCount>;

        $i8 = $i7 + 1;

        r1.<org.mozilla.javascript.ObjToIntMap: int occupiedCount> = $i8;

     label12:
        $r4 = r1.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        $r4[i26] = r0;

        $r5 = r1.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i9 = r1.<org.mozilla.javascript.ObjToIntMap: int power>;

        $i10 = 1 << $i9;

        $i11 = $i10 + i26;

        $r5[$i11] = $i0;

        $i12 = r1.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        $i13 = $i12 + 1;

        r1.<org.mozilla.javascript.ObjToIntMap: int keyCount> = $i13;

        return i26;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.lang.Object[] $r2;
        int[] $r5;
        int $i0, i1, i2, $i4;
        java.io.ObjectOutputStream r0;
        java.lang.Object r3, $r4;
        org.mozilla.javascript.ObjToIntMap r1;

        r1 := @this: org.mozilla.javascript.ObjToIntMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        i1 = r1.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        i2 = 0;

     label1:
        if i1 == 0 goto label3;

        $r2 = r1.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys>;

        r3 = $r2[i2];

        if r3 == null goto label2;

        $r4 = <org.mozilla.javascript.ObjToIntMap: java.lang.Object DELETED>;

        if r3 == $r4 goto label2;

        $i4 = (int) -1;

        i1 = i1 + $i4;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r3);

        $r5 = r1.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i0 = $r5[i2];

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Object[] $r2;
        java.io.ObjectInputStream r0;
        int[] $r3, $r5;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, i7;
        java.lang.Object $r4;
        org.mozilla.javascript.ObjToIntMap r1;

        r1 := @this: org.mozilla.javascript.ObjToIntMap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = r1.<org.mozilla.javascript.ObjToIntMap: int keyCount>;

        if i0 == 0 goto label2;

        r1.<org.mozilla.javascript.ObjToIntMap: int keyCount> = 0;

        $i1 = r1.<org.mozilla.javascript.ObjToIntMap: int power>;

        i2 = 1 << $i1;

        $r2 = newarray (java.lang.Object)[i2];

        r1.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] keys> = $r2;

        $i3 = 2 * i2;

        $r3 = newarray (int)[$i3];

        r1.<org.mozilla.javascript.ObjToIntMap: int[] values> = $r3;

        i7 = 0;

     label1:
        if i7 == i0 goto label2;

        $r4 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $i4 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        $i5 = specialinvoke r1.<org.mozilla.javascript.ObjToIntMap: int insertNewKey(java.lang.Object,int)>($r4, $i4);

        $r5 = r1.<org.mozilla.javascript.ObjToIntMap: int[] values>;

        $i6 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        $r5[$i5] = $i6;

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    static java.lang.Object access$000()
    {
        java.lang.Object $r0;

        $r0 = <org.mozilla.javascript.ObjToIntMap: java.lang.Object DELETED>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.mozilla.javascript.ObjToIntMap: boolean check> = 0;

        <org.mozilla.javascript.ObjToIntMap: int A> = -1640531527;

        <org.mozilla.javascript.ObjToIntMap: long serialVersionUID> = -1542220580748809402L;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.mozilla.javascript.ObjToIntMap: java.lang.Object DELETED> = $r0;

        return;
    }
}
