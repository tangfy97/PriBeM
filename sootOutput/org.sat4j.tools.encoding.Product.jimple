public class org.sat4j.tools.encoding.Product extends org.sat4j.tools.encoding.EncodingStrategyAdapter
{

    public void <init>()
    {
        org.sat4j.tools.encoding.Product r0;

        r0 := @this: org.sat4j.tools.encoding.Product;

        specialinvoke r0.<org.sat4j.tools.encoding.EncodingStrategyAdapter: void <init>()>();

        return;
    }

    public org.sat4j.specs.IConstr addAtMostNonOpt(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        java.lang.Integer $r7, $r17, $r19, $r26, $r28, $r31, $r32, $r40, $r43;
        org.sat4j.tools.encoding.Product r4;
        org.sat4j.specs.ISolver r11;
        java.util.ArrayList $r6, $r21, $r27, $r29;
        org.sat4j.specs.IConstr $r13, $r20, $r45, $r46;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r2;
        org.sat4j.core.VecInt $r1, $r12, $r23, $r33;
        java.util.HashMap[] r9;
        int[][] r3, $r14, $r24, $r34, $r37;
        int[] $r5, $r15, $r25, $r35, $r36, $r38, $r39, $r41, $r42;
        org.sat4j.tools.encoding.Binomial $r44;
        boolean $z0, $z1;
        int[][][] r8;
        java.util.HashMap $r16, $r22, $r30;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36;
        java.util.ArrayList[] r47;
        double $d0, $d1, $d2, $d3, $d4;
        org.sat4j.core.VecInt[] r10;
        java.lang.Object $r18;

        r4 := @this: org.sat4j.tools.encoding.Product;

        r11 := @parameter0: org.sat4j.specs.ISolver;

        r2 := @parameter1: org.sat4j.specs.IVecInt;

        i1 := @parameter2: int;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>()>();

        $r1 = new org.sat4j.core.VecInt;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>()>();

        $i0 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int size()>();

        if i1 <= $i0 goto label01;

        return $r0;

     label01:
        $i2 = i1 + 1;

        if $i0 != $i2 goto label04;

        i26 = 0;

     label02:
        if i26 >= $i0 goto label03;

        $i24 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int get(int)>(i26);

        $i25 = neg $i24;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i25);

        i26 = i26 + 1;

        goto label02;

     label03:
        $r46 = interfaceinvoke r11.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r46);

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void clear()>();

        return $r0;

     label04:
        if $i0 >= 7 goto label05;

        $r44 = new org.sat4j.tools.encoding.Binomial;

        specialinvoke $r44.<org.sat4j.tools.encoding.Binomial: void <init>()>();

        $r45 = virtualinvoke $r44.<org.sat4j.tools.encoding.Binomial: org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r11, r2, i1);

        return $r45;

     label05:
        $d2 = (double) $i0;

        $i3 = i1 + 1;

        $d0 = (double) $i3;

        $d1 = 1.0 / $d0;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, $d1);

        $d4 = staticinvoke <java.lang.Math: double ceil(double)>($d3);

        i27 = (int) $d4;

        $i4 = i1 + 1;

        r3 = newmultiarray (int)[$i0][$i4];

        $i5 = i1 + 1;

        $r5 = specialinvoke r4.<org.sat4j.tools.encoding.Product: int[] decompositionBase10VersBaseP(int,int,int)>(0, i27, $i5);

        r3[0] = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        i28 = 1;

        i29 = 1;

     label06:
        $i6 = i1 + 1;

        if i29 > $i6 goto label07;

        $i23 = i1 + 1;

        $r42 = specialinvoke r4.<org.sat4j.tools.encoding.Product: int[] decompositionBase10VersBaseP(int,int,int)>(i28, i27, $i23);

        r3[i29] = $r42;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i28);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r43);

        i28 = i28 * i27;

        i29 = i29 + 1;

        goto label06;

     label07:
        i30 = 2;

        i31 = i1 + 2;

     label08:
        if i31 >= $i0 goto label11;

     label09:
        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i30);

        $z1 = virtualinvoke $r6.<java.util.ArrayList: boolean contains(java.lang.Object)>($r40);

        if $z1 == 0 goto label10;

        i30 = i30 + 1;

        goto label09;

     label10:
        $i22 = i1 + 1;

        $r41 = specialinvoke r4.<org.sat4j.tools.encoding.Product: int[] decompositionBase10VersBaseP(int,int,int)>(i30, i27, $i22);

        r3[i31] = $r41;

        i30 = i30 + 1;

        i31 = i31 + 1;

        goto label08;

     label11:
        $i7 = i1 + 1;

        r47 = newarray (java.util.ArrayList)[$i7];

        $i8 = i1 + 1;

        r8 = newmultiarray (int)[$i0][$i8][i1];

        $i9 = i1 + 1;

        r9 = newarray (java.util.HashMap)[$i9];

        $i10 = i1 + 1;

        r10 = newarray (org.sat4j.core.VecInt)[$i10];

        i32 = 0;

     label12:
        $i11 = i1 + 1;

        if i32 >= $i11 goto label20;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r47[i32] = $r21;

        $r22 = new java.util.HashMap;

        specialinvoke $r22.<java.util.HashMap: void <init>()>();

        r9[i32] = $r22;

        $r23 = new org.sat4j.core.VecInt;

        specialinvoke $r23.<org.sat4j.core.VecInt: void <init>()>();

        r10[i32] = $r23;

        i33 = 0;

     label13:
        if i33 >= $i0 goto label19;

        i34 = 0;

     label14:
        if i34 >= i1 goto label17;

        if i34 >= i32 goto label15;

        $r37 = r8[i33];

        $r39 = $r37[i32];

        $r38 = r3[i33];

        $i21 = $r38[i34];

        $r39[i34] = $i21;

        goto label16;

     label15:
        $r34 = r8[i33];

        $r36 = $r34[i32];

        $r35 = r3[i33];

        $i19 = i34 + 1;

        $i20 = $r35[$i19];

        $r36[i34] = $i20;

     label16:
        i34 = i34 + 1;

        goto label14;

     label17:
        $r24 = r8[i33];

        $r25 = $r24[i32];

        $i17 = specialinvoke r4.<org.sat4j.tools.encoding.Product: int recompositionBase10DepuisBaseP(int[],int)>($r25, i27);

        $r27 = r47[i32];

        $r26 = new java.lang.Integer;

        specialinvoke $r26.<java.lang.Integer: void <init>(int)>($i17);

        $z0 = virtualinvoke $r27.<java.util.ArrayList: boolean contains(java.lang.Object)>($r26);

        if $z0 != 0 goto label18;

        $r29 = r47[i32];

        $r28 = new java.lang.Integer;

        specialinvoke $r28.<java.lang.Integer: void <init>(int)>($i17);

        virtualinvoke $r29.<java.util.ArrayList: boolean add(java.lang.Object)>($r28);

        $i18 = interfaceinvoke r11.<org.sat4j.specs.ISolver: int nextFreeVarId(boolean)>(1);

        $r30 = r9[i32];

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r32);

        $r33 = r10[i32];

        virtualinvoke $r33.<org.sat4j.core.VecInt: org.sat4j.specs.IVecInt push(int)>($i18);

     label18:
        i33 = i33 + 1;

        goto label13;

     label19:
        i32 = i32 + 1;

        goto label12;

     label20:
        i35 = 0;

     label21:
        $i12 = i1 + 1;

        if i35 >= $i12 goto label24;

        i36 = 0;

     label22:
        if i36 >= $i0 goto label23;

        $i13 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int get(int)>(i36);

        $i14 = neg $i13;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i14);

        $r16 = r9[i35];

        $r14 = r8[i36];

        $r15 = $r14[i35];

        $i15 = specialinvoke r4.<org.sat4j.tools.encoding.Product: int recompositionBase10DepuisBaseP(int[],int)>($r15, i27);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        $r18 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        $r19 = (java.lang.Integer) $r18;

        $i16 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i16);

        $r20 = interfaceinvoke r11.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r20);

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void clear()>();

        i36 = i36 + 1;

        goto label22;

     label23:
        $r12 = r10[i35];

        $r13 = virtualinvoke r4.<org.sat4j.tools.encoding.Product: org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r11, $r12, i1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r13);

        i35 = i35 + 1;

        goto label21;

     label24:
        return $r0;
    }

    public org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.encoding.Product r0;
        org.sat4j.specs.ISolver r1;
        org.sat4j.specs.IConstr $r3;
        org.sat4j.specs.IVecInt r2;
        int i0;

        r0 := @this: org.sat4j.tools.encoding.Product;

        r1 := @parameter0: org.sat4j.specs.ISolver;

        r2 := @parameter1: org.sat4j.specs.IVecInt;

        i0 := @parameter2: int;

        $r3 = specialinvoke r0.<org.sat4j.tools.encoding.EncodingStrategyAdapter: org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r1, r2, i0);

        return $r3;
    }

    public org.sat4j.specs.IConstr addAtMostOne(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.encoding.Product r5;
        int[] r3, r4;
        org.sat4j.tools.encoding.Binomial $r13;
        org.sat4j.specs.ISolver r6;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        org.sat4j.specs.IConstr $r8, $r10, $r11, $r12, $r14;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r2;
        org.sat4j.core.VecInt $r1, $r7, $r9;

        r5 := @this: org.sat4j.tools.encoding.Product;

        r6 := @parameter0: org.sat4j.specs.ISolver;

        r2 := @parameter1: org.sat4j.specs.IVecInt;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>(boolean)>(0);

        $r1 = new org.sat4j.core.VecInt;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>()>();

        $i0 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int size()>();

        if $i0 >= 7 goto label01;

        $r13 = new org.sat4j.tools.encoding.Binomial;

        specialinvoke $r13.<org.sat4j.tools.encoding.Binomial: void <init>()>();

        $r14 = virtualinvoke $r13.<org.sat4j.tools.encoding.Binomial: org.sat4j.specs.IConstr addAtMostOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r6, r2);

        return $r14;

     label01:
        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        i10 = (int) $d2;

        $d4 = (double) $i0;

        $d3 = (double) i10;

        $d5 = $d4 / $d3;

        $d6 = staticinvoke <java.lang.Math: double ceil(double)>($d5);

        i1 = (int) $d6;

        r3 = newarray (int)[i10];

        r4 = newarray (int)[i1];

        i11 = 0;

     label02:
        if i11 >= i10 goto label03;

        $i9 = interfaceinvoke r6.<org.sat4j.specs.ISolver: int nextFreeVarId(boolean)>(1);

        r3[i11] = $i9;

        i11 = i11 + 1;

        goto label02;

     label03:
        i12 = 0;

     label04:
        if i12 >= i1 goto label05;

        $i8 = interfaceinvoke r6.<org.sat4j.specs.ISolver: int nextFreeVarId(boolean)>(1);

        r4[i12] = $i8;

        i12 = i12 + 1;

        goto label04;

     label05:
        i13 = 0;

        i14 = 0;

     label06:
        if i14 >= i10 goto label10;

        i15 = 0;

     label07:
        if i15 >= i1 goto label09;

        if i13 >= $i0 goto label08;

        $i2 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int get(int)>(i13);

        $i3 = neg $i2;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i3);

        $i4 = r3[i14];

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i4);

        $r11 = interfaceinvoke r6.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r11);

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void clear()>();

        $i5 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int get(int)>(i13);

        $i6 = neg $i5;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i6);

        $i7 = r4[i15];

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i7);

        $r12 = interfaceinvoke r6.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r12);

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void clear()>();

        i13 = i13 + 1;

     label08:
        i15 = i15 + 1;

        goto label07;

     label09:
        i14 = i14 + 1;

        goto label06;

     label10:
        $r7 = new org.sat4j.core.VecInt;

        specialinvoke $r7.<org.sat4j.core.VecInt: void <init>(int[])>(r3);

        $r8 = virtualinvoke r5.<org.sat4j.tools.encoding.Product: org.sat4j.specs.IConstr addAtMostOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r6, $r7);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r8);

        $r9 = new org.sat4j.core.VecInt;

        specialinvoke $r9.<org.sat4j.core.VecInt: void <init>(int[])>(r4);

        $r10 = virtualinvoke r5.<org.sat4j.tools.encoding.Product: org.sat4j.specs.IConstr addAtMostOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r6, $r9);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r10);

        return $r0;
    }

    private int[] decompositionBase10VersBaseP(int, int, int)
    {
        org.sat4j.tools.encoding.Product r1;
        int[] r0;
        int i0, i1, $i2, $i3, $i4, i5, $i6, $i7, i8, i9, $i10, $i11, i12, i13;
        double $d0, $d1, $d2;

        r1 := @this: org.sat4j.tools.encoding.Product;

        i1 := @parameter0: int;

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (int)[i0];

        i12 = i1;

        i13 = 0;

     label1:
        $i2 = i0 - 1;

        if i13 >= $i2 goto label2;

        $d1 = (double) i5;

        $i6 = i0 - i13;

        $i7 = $i6 - 1;

        $d0 = (double) $i7;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        i8 = (int) $d2;

        i9 = i12 / i8;

        $i10 = i9 + 1;

        r0[i13] = $i10;

        $i11 = i9 * i8;

        i12 = i12 - $i11;

        i13 = i13 + 1;

        goto label1;

     label2:
        $i4 = i0 - 1;

        $i3 = i12 + 1;

        r0[$i4] = $i3;

        return r0;
    }

    private int recompositionBase10DepuisBaseP(int[], int)
    {
        org.sat4j.tools.encoding.Product r1;
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10, i11, i12;

        r1 := @this: org.sat4j.tools.encoding.Product;

        r0 := @parameter0: int[];

        i8 := @parameter1: int;

        i10 = 0;

        i11 = 0;

     label1:
        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        if i11 >= $i1 goto label2;

        $i6 = r0[i11];

        $i7 = i10 + $i6;

        $i9 = $i7 - 1;

        i10 = $i9 * i8;

        i11 = i11 + 1;

        goto label1;

     label2:
        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        $i4 = r0[$i3];

        $i5 = $i4 - 1;

        i12 = i10 + $i5;

        return i12;
    }

    public org.sat4j.specs.IConstr addAtLeast(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.specs.ISolver r3;
        org.sat4j.specs.IConstr $r4;
        org.sat4j.specs.IVecInt r1;
        org.sat4j.tools.encoding.Product r2;
        int $i0, $i1, i2, $i3, $i4, $i5, i6;
        org.sat4j.core.VecInt $r0;

        r2 := @this: org.sat4j.tools.encoding.Product;

        r3 := @parameter0: org.sat4j.specs.ISolver;

        r1 := @parameter1: org.sat4j.specs.IVecInt;

        i2 := @parameter2: int;

        $r0 = new org.sat4j.core.VecInt;

        specialinvoke $r0.<org.sat4j.core.VecInt: void <init>()>();

        i6 = 0;

     label1:
        $i0 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int size()>();

        if i6 >= $i0 goto label2;

        $i4 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i6);

        $i5 = neg $i4;

        interfaceinvoke $r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i5);

        i6 = i6 + 1;

        goto label1;

     label2:
        $i1 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int size()>();

        $i3 = $i1 - i2;

        $r4 = virtualinvoke r2.<org.sat4j.tools.encoding.Product: org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r3, $r0, $i3);

        return $r4;
    }

    public org.sat4j.specs.IConstr addExactlyOne(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.encoding.Product r1;
        org.sat4j.specs.ISolver r2;
        org.sat4j.specs.IConstr $r4, $r5;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r3;

        r1 := @this: org.sat4j.tools.encoding.Product;

        r2 := @parameter0: org.sat4j.specs.ISolver;

        r3 := @parameter1: org.sat4j.specs.IVecInt;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>()>();

        $r4 = virtualinvoke r1.<org.sat4j.tools.encoding.Product: org.sat4j.specs.IConstr addAtLeastOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r2, r3);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r4);

        $r5 = virtualinvoke r1.<org.sat4j.tools.encoding.Product: org.sat4j.specs.IConstr addAtMostOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r2, r3);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r5);

        return $r0;
    }

    public org.sat4j.specs.IConstr addExactly(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.tools.encoding.Product r1;
        org.sat4j.specs.ISolver r2;
        org.sat4j.specs.IConstr $r4, $r5;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r3;
        int i0;

        r1 := @this: org.sat4j.tools.encoding.Product;

        r2 := @parameter0: org.sat4j.specs.ISolver;

        r3 := @parameter1: org.sat4j.specs.IVecInt;

        i0 := @parameter2: int;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>()>();

        $r4 = virtualinvoke r1.<org.sat4j.tools.encoding.Product: org.sat4j.specs.IConstr addAtLeast(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r2, r3, i0);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r4);

        $r5 = virtualinvoke r1.<org.sat4j.tools.encoding.Product: org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r2, r3, i0);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r5);

        return $r0;
    }
}
