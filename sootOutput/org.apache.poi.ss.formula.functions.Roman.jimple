public class org.apache.poi.ss.formula.functions.Roman extends org.apache.poi.ss.formula.functions.Fixed2ArgFunction
{
    public static final int[] VALUES;
    public static final java.lang.String[] ROMAN;

    public void <init>()
    {
        org.apache.poi.ss.formula.functions.Roman r0;

        r0 := @this: org.apache.poi.ss.formula.functions.Roman;

        specialinvoke r0.<org.apache.poi.ss.formula.functions.Fixed2ArgFunction: void <init>()>();

        return;
    }

    public org.apache.poi.ss.formula.eval.ValueEval evaluate(int, int, org.apache.poi.ss.formula.eval.ValueEval, org.apache.poi.ss.formula.eval.ValueEval)
    {
        org.apache.poi.ss.formula.eval.ErrorEval $r4, $r11, $r12, $r14, $r16;
        org.apache.poi.ss.formula.functions.Roman r5;
        int i0, i1, $i2, $i3;
        java.lang.String $r6, $r8;
        org.apache.poi.ss.formula.eval.EvaluationException $r13, $r15;
        org.apache.poi.ss.formula.eval.StringEval $r7, $r9, $r10;
        org.apache.poi.ss.formula.eval.ValueEval r0, $r1, r2, $r3;

        r5 := @this: org.apache.poi.ss.formula.functions.Roman;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: org.apache.poi.ss.formula.eval.ValueEval;

        r2 := @parameter3: org.apache.poi.ss.formula.eval.ValueEval;

     label01:
        $r1 = staticinvoke <org.apache.poi.ss.formula.eval.OperandResolver: org.apache.poi.ss.formula.eval.ValueEval getSingleValue(org.apache.poi.ss.formula.eval.ValueEval,int,int)>(r0, i0, i1);

        $i2 = staticinvoke <org.apache.poi.ss.formula.eval.OperandResolver: int coerceValueToInt(org.apache.poi.ss.formula.eval.ValueEval)>($r1);

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

        $r16 = <org.apache.poi.ss.formula.eval.ErrorEval: org.apache.poi.ss.formula.eval.ErrorEval VALUE_INVALID>;

        return $r16;

     label04:
        if $i2 >= 0 goto label05;

        $r12 = <org.apache.poi.ss.formula.eval.ErrorEval: org.apache.poi.ss.formula.eval.ErrorEval VALUE_INVALID>;

        return $r12;

     label05:
        if $i2 <= 3999 goto label06;

        $r11 = <org.apache.poi.ss.formula.eval.ErrorEval: org.apache.poi.ss.formula.eval.ErrorEval VALUE_INVALID>;

        return $r11;

     label06:
        if $i2 != 0 goto label07;

        $r10 = new org.apache.poi.ss.formula.eval.StringEval;

        specialinvoke $r10.<org.apache.poi.ss.formula.eval.StringEval: void <init>(java.lang.String)>("");

        return $r10;

     label07:
        $r3 = staticinvoke <org.apache.poi.ss.formula.eval.OperandResolver: org.apache.poi.ss.formula.eval.ValueEval getSingleValue(org.apache.poi.ss.formula.eval.ValueEval,int,int)>(r2, i0, i1);

        $i3 = staticinvoke <org.apache.poi.ss.formula.eval.OperandResolver: int coerceValueToInt(org.apache.poi.ss.formula.eval.ValueEval)>($r3);

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

        $r14 = <org.apache.poi.ss.formula.eval.ErrorEval: org.apache.poi.ss.formula.eval.ErrorEval NUM_ERROR>;

        return $r14;

     label10:
        if $i3 > 4 goto label11;

        if $i3 >= 0 goto label12;

     label11:
        $r4 = <org.apache.poi.ss.formula.eval.ErrorEval: org.apache.poi.ss.formula.eval.ErrorEval VALUE_INVALID>;

        return $r4;

     label12:
        $r6 = specialinvoke r5.<org.apache.poi.ss.formula.functions.Roman: java.lang.String integerToRoman(int)>($i2);

        if $i3 != 0 goto label13;

        $r9 = new org.apache.poi.ss.formula.eval.StringEval;

        specialinvoke $r9.<org.apache.poi.ss.formula.eval.StringEval: void <init>(java.lang.String)>($r6);

        return $r9;

     label13:
        $r7 = new org.apache.poi.ss.formula.eval.StringEval;

        $r8 = virtualinvoke r5.<org.apache.poi.ss.formula.functions.Roman: java.lang.String makeConcise(java.lang.String,int)>($r6, $i3);

        specialinvoke $r7.<org.apache.poi.ss.formula.eval.StringEval: void <init>(java.lang.String)>($r8);

        return $r7;

        catch org.apache.poi.ss.formula.eval.EvaluationException from label01 to label02 with label03;
        catch org.apache.poi.ss.formula.eval.EvaluationException from label07 to label08 with label09;
    }

    private java.lang.String integerToRoman(int)
    {
        java.lang.String[] $r4;
        org.apache.poi.ss.formula.functions.Roman r6;
        int[] $r2, $r3;
        int $i0, $i1, i2, i3;
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r5;

        r6 := @this: org.apache.poi.ss.formula.functions.Roman;

        i2 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label1:
        if i3 >= 13 goto label4;

     label2:
        $r2 = <org.apache.poi.ss.formula.functions.Roman: int[] VALUES>;

        $i0 = $r2[i3];

        if i2 < $i0 goto label3;

        $r3 = <org.apache.poi.ss.formula.functions.Roman: int[] VALUES>;

        $i1 = $r3[i3];

        i2 = i2 - $i1;

        $r4 = <org.apache.poi.ss.formula.functions.Roman: java.lang.String[] ROMAN>;

        $r5 = $r4[i3];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String makeConcise(java.lang.String, int)
    {
        org.apache.poi.ss.formula.functions.Roman r19;
        int i0;
        java.lang.String $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, r20;

        r19 := @this: org.apache.poi.ss.formula.functions.Roman;

        r20 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        $r15 = virtualinvoke r20.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("XLV", "VL");

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("XCV", "VC");

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CDL", "LD");

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CML", "LM");

        r20 = virtualinvoke $r18.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CMVC", "LMVL");

     label1:
        if i0 != 1 goto label2;

        $r11 = virtualinvoke r20.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CDXC", "LDXL");

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CDVC", "LDVL");

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CMXC", "LMXL");

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("XCIX", "VCIV");

        r20 = virtualinvoke $r14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("XLIX", "VLIV");

     label2:
        if i0 <= 1 goto label3;

        $r4 = virtualinvoke r20.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("XLIX", "IL");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("XCIX", "IC");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CDXC", "XD");

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CDVC", "XDV");

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CDIC", "XDIX");

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("LMVL", "XMV");

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CMIC", "XMIX");

        r20 = virtualinvoke $r10.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("CMXC", "XM");

     label3:
        if i0 <= 2 goto label4;

        $r1 = virtualinvoke r20.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("XDV", "VD");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("XDIX", "VDIV");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("XMV", "VM");

        r20 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("XMIX", "VMIV");

     label4:
        if i0 != 4 goto label5;

        $r0 = virtualinvoke r20.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("VDIV", "ID");

        r20 = virtualinvoke $r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("VMIV", "IM");

     label5:
        return r20;
    }

    static void <clinit>()
    {
        java.lang.String[] $r1;
        int[] $r0;

        $r0 = newarray (int)[13];

        $r0[0] = 1000;

        $r0[1] = 900;

        $r0[2] = 500;

        $r0[3] = 400;

        $r0[4] = 100;

        $r0[5] = 90;

        $r0[6] = 50;

        $r0[7] = 40;

        $r0[8] = 10;

        $r0[9] = 9;

        $r0[10] = 5;

        $r0[11] = 4;

        $r0[12] = 1;

        <org.apache.poi.ss.formula.functions.Roman: int[] VALUES> = $r0;

        $r1 = newarray (java.lang.String)[13];

        $r1[0] = "M";

        $r1[1] = "CM";

        $r1[2] = "D";

        $r1[3] = "CD";

        $r1[4] = "C";

        $r1[5] = "XC";

        $r1[6] = "L";

        $r1[7] = "XL";

        $r1[8] = "X";

        $r1[9] = "IX";

        $r1[10] = "V";

        $r1[11] = "IV";

        $r1[12] = "I";

        <org.apache.poi.ss.formula.functions.Roman: java.lang.String[] ROMAN> = $r1;

        return;
    }
}
