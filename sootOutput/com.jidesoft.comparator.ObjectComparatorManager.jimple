public class com.jidesoft.comparator.ObjectComparatorManager extends java.lang.Object
{
    private static final com.jidesoft.utils.CacheMap _cache;
    private static final java.util.Comparator _defaultComparator;
    private static boolean _inited;
    private static boolean _initing;
    private static boolean _autoInit;

    public void <init>()
    {
        com.jidesoft.comparator.ObjectComparatorManager r0;

        r0 := @this: com.jidesoft.comparator.ObjectComparatorManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void registerComparator(java.lang.Class, java.util.Comparator)
    {
        java.lang.Class r0;
        java.util.Comparator r1;
        com.jidesoft.comparator.ComparatorContext $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.Comparator;

        $r2 = <com.jidesoft.comparator.ComparatorContext: com.jidesoft.comparator.ComparatorContext DEFAULT_CONTEXT>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>(r0, r1, $r2);

        return;
    }

    public static void registerComparator(java.lang.Class, java.util.Comparator, com.jidesoft.comparator.ComparatorContext)
    {
        com.jidesoft.utils.CacheMap $r4;
        java.lang.IllegalArgumentException $r2;
        java.lang.Class r0;
        java.util.Comparator r1;
        com.jidesoft.comparator.ComparatorContext r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.Comparator;

        r3 := @parameter2: com.jidesoft.comparator.ComparatorContext;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter clazz cannot be null");

        throw $r2;

     label1:
        if r3 != null goto label2;

        r3 = <com.jidesoft.comparator.ComparatorContext: com.jidesoft.comparator.ComparatorContext DEFAULT_CONTEXT>;

     label2:
        $z0 = staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: boolean isAutoInit()>();

        if $z0 == 0 goto label3;

        $z1 = <com.jidesoft.comparator.ObjectComparatorManager: boolean _inited>;

        if $z1 != 0 goto label3;

        $z2 = <com.jidesoft.comparator.ObjectComparatorManager: boolean _initing>;

        if $z2 != 0 goto label3;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void initDefaultComparator()>();

     label3:
        $r4 = <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache>;

        virtualinvoke $r4.<com.jidesoft.utils.CacheMap: void register(java.lang.Class,java.lang.Object,java.lang.Object)>(r0, r1, r3);

        return;
    }

    public static void unregisterComparator(java.lang.Class)
    {
        java.lang.Class r0;
        com.jidesoft.comparator.ComparatorContext $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.jidesoft.comparator.ComparatorContext: com.jidesoft.comparator.ComparatorContext DEFAULT_CONTEXT>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void unregisterComparator(java.lang.Class,com.jidesoft.comparator.ComparatorContext)>(r0, $r1);

        return;
    }

    public static void unregisterComparator(java.lang.Class, com.jidesoft.comparator.ComparatorContext)
    {
        com.jidesoft.utils.CacheMap $r2;
        java.lang.Class r0;
        com.jidesoft.comparator.ComparatorContext r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: com.jidesoft.comparator.ComparatorContext;

        if r1 != null goto label1;

        r1 = <com.jidesoft.comparator.ComparatorContext: com.jidesoft.comparator.ComparatorContext DEFAULT_CONTEXT>;

     label1:
        $z0 = staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: boolean isAutoInit()>();

        if $z0 == 0 goto label2;

        $z1 = <com.jidesoft.comparator.ObjectComparatorManager: boolean _inited>;

        if $z1 != 0 goto label2;

        $z2 = <com.jidesoft.comparator.ObjectComparatorManager: boolean _initing>;

        if $z2 != 0 goto label2;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void initDefaultComparator()>();

     label2:
        $r2 = <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache>;

        virtualinvoke $r2.<com.jidesoft.utils.CacheMap: void unregister(java.lang.Class,java.lang.Object)>(r0, r1);

        return;
    }

    public static void unregisterAllComparators(java.lang.Class)
    {
        java.lang.Class r0;
        com.jidesoft.utils.CacheMap $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache>;

        virtualinvoke $r1.<com.jidesoft.utils.CacheMap: void remove(java.lang.Class)>(r0);

        return;
    }

    public static void unregisterAllComparators()
    {
        com.jidesoft.utils.CacheMap $r0;

        $r0 = <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache>;

        virtualinvoke $r0.<com.jidesoft.utils.CacheMap: void clear()>();

        return;
    }

    public static java.util.Comparator getComparator(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Comparator $r2;
        com.jidesoft.comparator.ComparatorContext $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.jidesoft.comparator.ComparatorContext: com.jidesoft.comparator.ComparatorContext DEFAULT_CONTEXT>;

        $r2 = staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: java.util.Comparator getComparator(java.lang.Class,com.jidesoft.comparator.ComparatorContext)>(r0, $r1);

        return $r2;
    }

    public static java.util.Comparator getComparator(java.lang.Class, com.jidesoft.comparator.ComparatorContext)
    {
        com.jidesoft.utils.CacheMap $r1;
        java.lang.Class r0;
        java.lang.Object $r2;
        java.util.Comparator $r3, $r4;
        com.jidesoft.comparator.ComparatorContext r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        r5 := @parameter1: com.jidesoft.comparator.ComparatorContext;

        $z0 = staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: boolean isAutoInit()>();

        if $z0 == 0 goto label1;

        $z1 = <com.jidesoft.comparator.ObjectComparatorManager: boolean _inited>;

        if $z1 != 0 goto label1;

        $z2 = <com.jidesoft.comparator.ObjectComparatorManager: boolean _initing>;

        if $z2 != 0 goto label1;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void initDefaultComparator()>();

     label1:
        if r5 != null goto label2;

        r5 = <com.jidesoft.comparator.ComparatorContext: com.jidesoft.comparator.ComparatorContext DEFAULT_CONTEXT>;

     label2:
        $r1 = <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache>;

        $r2 = virtualinvoke $r1.<com.jidesoft.utils.CacheMap: java.lang.Object getRegisteredObject(java.lang.Class,java.lang.Object)>(r0, r5);

        $r4 = (java.util.Comparator) $r2;

        if $r4 == null goto label3;

        return $r4;

     label3:
        $r3 = <com.jidesoft.comparator.ObjectComparatorManager: java.util.Comparator _defaultComparator>;

        return $r3;
    }

    public static int compare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r0, r1;
        com.jidesoft.comparator.ComparatorContext $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = <com.jidesoft.comparator.ComparatorContext: com.jidesoft.comparator.ComparatorContext DEFAULT_CONTEXT>;

        $i0 = staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: int compare(java.lang.Object,java.lang.Object,com.jidesoft.comparator.ComparatorContext)>(r0, r1, $r2);

        return $i0;
    }

    public static int compare(java.lang.Object, java.lang.Object, com.jidesoft.comparator.ComparatorContext)
    {
        int $i0, $i2;
        java.lang.Object r0, r1;
        java.lang.Class $r2, $r3, r5;
        com.jidesoft.comparator.ComparatorContext r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r4 := @parameter2: com.jidesoft.comparator.ComparatorContext;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 0;

     label1:
        if r0 != null goto label2;

        $i2 = (int) -1;

        return $i2;

     label2:
        if r1 != null goto label3;

        return 1;

     label3:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label4;

        r5 = $r2;

        goto label8;

     label4:
        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 == 0 goto label5;

        r5 = $r2;

        goto label8;

     label5:
        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z1 == 0 goto label6;

        r5 = $r3;

        goto label8;

     label6:
        $z2 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Comparable;");

        if $z2 == 0 goto label7;

        $z3 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Comparable;");

        if $z3 == 0 goto label7;

        r5 = class "Ljava/lang/Comparable;";

        goto label8;

     label7:
        r5 = class "Ljava/lang/Object;";

     label8:
        $i0 = staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: int compare(java.lang.Object,java.lang.Object,java.lang.Class,com.jidesoft.comparator.ComparatorContext)>(r0, r1, r5, r4);

        return $i0;
    }

    public static int compare(java.lang.Object, java.lang.Object, java.lang.Class)
    {
        int $i0;
        java.lang.Object r0, r1;
        java.lang.Class r2;
        com.jidesoft.comparator.ComparatorContext $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Class;

        $r3 = <com.jidesoft.comparator.ComparatorContext: com.jidesoft.comparator.ComparatorContext DEFAULT_CONTEXT>;

        $i0 = staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: int compare(java.lang.Object,java.lang.Object,java.lang.Class,com.jidesoft.comparator.ComparatorContext)>(r0, r1, r2, $r3);

        return $i0;
    }

    public static int compare(java.lang.Object, java.lang.Object, java.lang.Class, com.jidesoft.comparator.ComparatorContext)
    {
        java.lang.Exception $r7;
        int $i0, $i1, $i3;
        java.lang.Class r0;
        java.lang.Object r3, r4;
        java.lang.String $r5, $r6;
        java.util.Comparator $r2;
        com.jidesoft.comparator.ComparatorContext r1;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Class;

        r1 := @parameter3: com.jidesoft.comparator.ComparatorContext;

        $r2 = staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: java.util.Comparator getComparator(java.lang.Class,com.jidesoft.comparator.ComparatorContext)>(r0, r1);

        if $r2 == null goto label4;

     label1:
        $i1 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r3, r4);

     label2:
        return $i1;

     label3:
        $r7 := @caughtexception;

     label4:
        if r3 != r4 goto label5;

        return 0;

     label5:
        if r3 != null goto label6;

        $i3 = (int) -1;

        return $i3;

     label6:
        if r4 != null goto label7;

        return 1;

     label7:
        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r6);

        return $i0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean isAutoInit()
    {
        boolean $z0;

        $z0 = <com.jidesoft.comparator.ObjectComparatorManager: boolean _autoInit>;

        return $z0;
    }

    public static void setAutoInit(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <com.jidesoft.comparator.ObjectComparatorManager: boolean _autoInit> = z0;

        return;
    }

    public static void addRegistrationListener(com.jidesoft.utils.RegistrationListener)
    {
        com.jidesoft.utils.CacheMap $r1;
        com.jidesoft.utils.RegistrationListener r0;

        r0 := @parameter0: com.jidesoft.utils.RegistrationListener;

        $r1 = <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache>;

        virtualinvoke $r1.<com.jidesoft.utils.CacheMap: void addRegistrationListener(com.jidesoft.utils.RegistrationListener)>(r0);

        return;
    }

    public static void removeRegistrationListener(com.jidesoft.utils.RegistrationListener)
    {
        com.jidesoft.utils.CacheMap $r1;
        com.jidesoft.utils.RegistrationListener r0;

        r0 := @parameter0: com.jidesoft.utils.RegistrationListener;

        $r1 = <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache>;

        virtualinvoke $r1.<com.jidesoft.utils.CacheMap: void removeRegistrationListener(com.jidesoft.utils.RegistrationListener)>(r0);

        return;
    }

    public static com.jidesoft.utils.RegistrationListener[] getRegistrationListeners()
    {
        com.jidesoft.utils.CacheMap $r0;
        com.jidesoft.utils.RegistrationListener[] $r1;

        $r0 = <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache>;

        $r1 = virtualinvoke $r0.<com.jidesoft.utils.CacheMap: com.jidesoft.utils.RegistrationListener[] getRegistrationListeners()>();

        return $r1;
    }

    public static com.jidesoft.comparator.ComparatorContext[] getComparatorContexts(java.lang.Class)
    {
        java.lang.Object[] $r3;
        com.jidesoft.utils.CacheMap $r2;
        java.lang.Class r0;
        com.jidesoft.comparator.ComparatorContext[] $r1, $r4;

        r0 := @parameter0: java.lang.Class;

        $r2 = <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache>;

        $r1 = newarray (com.jidesoft.comparator.ComparatorContext)[0];

        $r3 = virtualinvoke $r2.<com.jidesoft.utils.CacheMap: java.lang.Object[] getKeys(java.lang.Class,java.lang.Object[])>(r0, $r1);

        $r4 = (com.jidesoft.comparator.ComparatorContext[]) $r3;

        return $r4;
    }

    public static void initDefaultComparator()
    {
        com.jidesoft.comparator.DateComparator $r3;
        com.jidesoft.comparator.AlphanumComparator $r35, $r37;
        com.jidesoft.comparator.FastComparableComparator $r25;
        com.jidesoft.comparator.ComparatorContext $r12, $r13, $r15, $r17, $r19, $r21, $r23, $r28, $r30, $r32, $r34, $r36, $r38;
        boolean $z0;
        com.jidesoft.comparator.CalendarComparator $r2;
        java.lang.Throwable $r39;
        com.jidesoft.comparator.CharSequenceComparator $r31, $r33;
        com.jidesoft.comparator.DefaultComparator $r0;
        java.text.Collator $r26, $r27, $r29;
        com.jidesoft.comparator.NumberComparator $r4, $r11;
        com.jidesoft.comparator.BooleanComparator $r1;
        java.lang.Class $r5, $r6, $r7, $r8, $r9, $r10, $r14, $r16, $r18, $r20, $r22, $r24;

        $z0 = <com.jidesoft.comparator.ObjectComparatorManager: boolean _inited>;

        if $z0 == 0 goto label1;

        return;

     label1:
        <com.jidesoft.comparator.ObjectComparatorManager: boolean _initing> = 1;

     label2:
        $r0 = new com.jidesoft.comparator.DefaultComparator;

        specialinvoke $r0.<com.jidesoft.comparator.DefaultComparator: void <init>()>();

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>(class "Ljava/lang/Object;", $r0);

        $r1 = new com.jidesoft.comparator.BooleanComparator;

        specialinvoke $r1.<com.jidesoft.comparator.BooleanComparator: void <init>()>();

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>(class "Ljava/lang/Boolean;", $r1);

        $r2 = new com.jidesoft.comparator.CalendarComparator;

        specialinvoke $r2.<com.jidesoft.comparator.CalendarComparator: void <init>()>();

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>(class "Ljava/util/Calendar;", $r2);

        $r3 = new com.jidesoft.comparator.DateComparator;

        specialinvoke $r3.<com.jidesoft.comparator.DateComparator: void <init>()>();

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>(class "Ljava/util/Date;", $r3);

        $r4 = new com.jidesoft.comparator.NumberComparator;

        specialinvoke $r4.<com.jidesoft.comparator.NumberComparator: void <init>()>();

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>(class "Ljava/lang/Number;", $r4);

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>($r5, $r4);

        $r6 = <java.lang.Float: java.lang.Class TYPE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>($r6, $r4);

        $r7 = <java.lang.Long: java.lang.Class TYPE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>($r7, $r4);

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>($r8, $r4);

        $r9 = <java.lang.Short: java.lang.Class TYPE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>($r9, $r4);

        $r10 = <java.lang.Byte: java.lang.Class TYPE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>($r10, $r4);

        $r11 = new com.jidesoft.comparator.NumberComparator;

        specialinvoke $r11.<com.jidesoft.comparator.NumberComparator: void <init>()>();

        virtualinvoke $r11.<com.jidesoft.comparator.NumberComparator: void setAbsolute(boolean)>(1);

        $r12 = <com.jidesoft.comparator.NumberComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_ABSOLUTE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>(class "Ljava/lang/Number;", $r11, $r12);

        $r14 = <java.lang.Double: java.lang.Class TYPE>;

        $r13 = <com.jidesoft.comparator.NumberComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_ABSOLUTE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>($r14, $r11, $r13);

        $r16 = <java.lang.Float: java.lang.Class TYPE>;

        $r15 = <com.jidesoft.comparator.NumberComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_ABSOLUTE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>($r16, $r11, $r15);

        $r18 = <java.lang.Long: java.lang.Class TYPE>;

        $r17 = <com.jidesoft.comparator.NumberComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_ABSOLUTE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>($r18, $r11, $r17);

        $r20 = <java.lang.Integer: java.lang.Class TYPE>;

        $r19 = <com.jidesoft.comparator.NumberComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_ABSOLUTE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>($r20, $r11, $r19);

        $r22 = <java.lang.Short: java.lang.Class TYPE>;

        $r21 = <com.jidesoft.comparator.NumberComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_ABSOLUTE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>($r22, $r11, $r21);

        $r24 = <java.lang.Byte: java.lang.Class TYPE>;

        $r23 = <com.jidesoft.comparator.NumberComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_ABSOLUTE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>($r24, $r11, $r23);

        $r25 = new com.jidesoft.comparator.FastComparableComparator;

        specialinvoke $r25.<com.jidesoft.comparator.FastComparableComparator: void <init>()>();

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>(class "Ljava/lang/Comparable;", $r25);

        $r26 = staticinvoke <java.text.Collator: java.text.Collator getInstance()>();

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator)>(class "Ljava/lang/String;", $r26);

        $r27 = staticinvoke <java.text.Collator: java.text.Collator getInstance()>();

        virtualinvoke $r27.<java.text.Collator: void setStrength(int)>(0);

        $r28 = new com.jidesoft.comparator.ComparatorContext;

        specialinvoke $r28.<com.jidesoft.comparator.ComparatorContext: void <init>(java.lang.String)>("Ignorecase");

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>(class "Ljava/lang/String;", $r27, $r28);

        $r29 = staticinvoke <java.text.Collator: java.text.Collator getInstance()>();

        virtualinvoke $r29.<java.text.Collator: void setStrength(int)>(1);

        $r30 = new com.jidesoft.comparator.ComparatorContext;

        specialinvoke $r30.<com.jidesoft.comparator.ComparatorContext: void <init>(java.lang.String)>("Secondary");

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>(class "Ljava/lang/String;", $r29, $r30);

        $r31 = new com.jidesoft.comparator.CharSequenceComparator;

        specialinvoke $r31.<com.jidesoft.comparator.CharSequenceComparator: void <init>()>();

        $r32 = <com.jidesoft.comparator.CharSequenceComparator: com.jidesoft.comparator.ComparatorContext CONTEXT>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>(class "Ljava/lang/CharSequence;", $r31, $r32);

        $r33 = new com.jidesoft.comparator.CharSequenceComparator;

        specialinvoke $r33.<com.jidesoft.comparator.CharSequenceComparator: void <init>(boolean)>(0);

        $r34 = <com.jidesoft.comparator.CharSequenceComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_IGNORE_CASE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>(class "Ljava/lang/CharSequence;", $r33, $r34);

        $r35 = new com.jidesoft.comparator.AlphanumComparator;

        specialinvoke $r35.<com.jidesoft.comparator.AlphanumComparator: void <init>()>();

        $r36 = <com.jidesoft.comparator.AlphanumComparator: com.jidesoft.comparator.ComparatorContext CONTEXT>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>(class "Ljava/lang/CharSequence;", $r35, $r36);

        $r37 = new com.jidesoft.comparator.AlphanumComparator;

        specialinvoke $r37.<com.jidesoft.comparator.AlphanumComparator: void <init>(boolean)>(0);

        $r38 = <com.jidesoft.comparator.AlphanumComparator: com.jidesoft.comparator.ComparatorContext CONTEXT_IGNORE_CASE>;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void registerComparator(java.lang.Class,java.util.Comparator,com.jidesoft.comparator.ComparatorContext)>(class "Ljava/lang/CharSequence;", $r37, $r38);

     label3:
        <com.jidesoft.comparator.ObjectComparatorManager: boolean _initing> = 0;

        <com.jidesoft.comparator.ObjectComparatorManager: boolean _inited> = 1;

        goto label6;

     label4:
        $r39 := @caughtexception;

     label5:
        <com.jidesoft.comparator.ObjectComparatorManager: boolean _initing> = 0;

        <com.jidesoft.comparator.ObjectComparatorManager: boolean _inited> = 1;

        throw $r39;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void resetInit()
    {
        <com.jidesoft.comparator.ObjectComparatorManager: boolean _inited> = 0;

        return;
    }

    public static void clear()
    {
        com.jidesoft.utils.CacheMap $r0;

        staticinvoke <com.jidesoft.comparator.ObjectComparatorManager: void resetInit()>();

        $r0 = <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache>;

        virtualinvoke $r0.<com.jidesoft.utils.CacheMap: void clear()>();

        return;
    }

    static void <clinit>()
    {
        com.jidesoft.utils.CacheMap $r0;
        com.jidesoft.comparator.DefaultComparator $r2;
        com.jidesoft.comparator.ComparatorContext $r1;

        $r0 = new com.jidesoft.utils.CacheMap;

        $r1 = new com.jidesoft.comparator.ComparatorContext;

        specialinvoke $r1.<com.jidesoft.comparator.ComparatorContext: void <init>(java.lang.String)>("");

        specialinvoke $r0.<com.jidesoft.utils.CacheMap: void <init>(java.lang.Object)>($r1);

        <com.jidesoft.comparator.ObjectComparatorManager: com.jidesoft.utils.CacheMap _cache> = $r0;

        $r2 = new com.jidesoft.comparator.DefaultComparator;

        specialinvoke $r2.<com.jidesoft.comparator.DefaultComparator: void <init>()>();

        <com.jidesoft.comparator.ObjectComparatorManager: java.util.Comparator _defaultComparator> = $r2;

        <com.jidesoft.comparator.ObjectComparatorManager: boolean _inited> = 0;

        <com.jidesoft.comparator.ObjectComparatorManager: boolean _initing> = 0;

        <com.jidesoft.comparator.ObjectComparatorManager: boolean _autoInit> = 1;

        return;
    }
}
