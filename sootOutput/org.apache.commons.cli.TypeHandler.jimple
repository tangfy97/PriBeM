public class org.apache.commons.cli.TypeHandler extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.cli.TypeHandler r0;

        r0 := @this: org.apache.commons.cli.TypeHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object createValue(java.lang.String, java.lang.Object) throws org.apache.commons.cli.ParseException
    {
        java.lang.Object r1, $r3;
        java.lang.Class $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = staticinvoke <org.apache.commons.cli.TypeHandler: java.lang.Object createValue(java.lang.String,java.lang.Class)>(r0, $r2);

        return $r3;
    }

    public static java.lang.Object createValue(java.lang.String, java.lang.Class) throws org.apache.commons.cli.ParseException
    {
        java.net.URL $r11;
        java.util.Date $r16;
        java.lang.String r10;
        java.lang.Number $r17;
        java.io.File $r13, $r14;
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r15;
        java.lang.Object $r18;
        java.io.File[] $r12;

        r10 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        $r1 = <org.apache.commons.cli.PatternOptionBuilder: java.lang.Class STRING_VALUE>;

        if $r1 != r0 goto label1;

        return r10;

     label1:
        $r2 = <org.apache.commons.cli.PatternOptionBuilder: java.lang.Class OBJECT_VALUE>;

        if $r2 != r0 goto label2;

        $r18 = staticinvoke <org.apache.commons.cli.TypeHandler: java.lang.Object createObject(java.lang.String)>(r10);

        return $r18;

     label2:
        $r3 = <org.apache.commons.cli.PatternOptionBuilder: java.lang.Class NUMBER_VALUE>;

        if $r3 != r0 goto label3;

        $r17 = staticinvoke <org.apache.commons.cli.TypeHandler: java.lang.Number createNumber(java.lang.String)>(r10);

        return $r17;

     label3:
        $r4 = <org.apache.commons.cli.PatternOptionBuilder: java.lang.Class DATE_VALUE>;

        if $r4 != r0 goto label4;

        $r16 = staticinvoke <org.apache.commons.cli.TypeHandler: java.util.Date createDate(java.lang.String)>(r10);

        return $r16;

     label4:
        $r5 = <org.apache.commons.cli.PatternOptionBuilder: java.lang.Class CLASS_VALUE>;

        if $r5 != r0 goto label5;

        $r15 = staticinvoke <org.apache.commons.cli.TypeHandler: java.lang.Class createClass(java.lang.String)>(r10);

        return $r15;

     label5:
        $r6 = <org.apache.commons.cli.PatternOptionBuilder: java.lang.Class FILE_VALUE>;

        if $r6 != r0 goto label6;

        $r14 = staticinvoke <org.apache.commons.cli.TypeHandler: java.io.File createFile(java.lang.String)>(r10);

        return $r14;

     label6:
        $r7 = <org.apache.commons.cli.PatternOptionBuilder: java.lang.Class EXISTING_FILE_VALUE>;

        if $r7 != r0 goto label7;

        $r13 = staticinvoke <org.apache.commons.cli.TypeHandler: java.io.File createFile(java.lang.String)>(r10);

        return $r13;

     label7:
        $r8 = <org.apache.commons.cli.PatternOptionBuilder: java.lang.Class FILES_VALUE>;

        if $r8 != r0 goto label8;

        $r12 = staticinvoke <org.apache.commons.cli.TypeHandler: java.io.File[] createFiles(java.lang.String)>(r10);

        return $r12;

     label8:
        $r9 = <org.apache.commons.cli.PatternOptionBuilder: java.lang.Class URL_VALUE>;

        if $r9 != r0 goto label9;

        $r11 = staticinvoke <org.apache.commons.cli.TypeHandler: java.net.URL createURL(java.lang.String)>(r10);

        return $r11;

     label9:
        return null;
    }

    public static java.lang.Object createObject(java.lang.String) throws org.apache.commons.cli.ParseException
    {
        java.lang.StringBuffer $r5, $r8, $r9, $r10, $r14, $r15, $r16;
        java.lang.String r0, $r7, $r11, $r17;
        java.lang.Exception $r3;
        org.apache.commons.cli.ParseException $r4, $r13;
        java.lang.Class $r1, $r6;
        java.lang.Object $r2;
        java.lang.ClassNotFoundException $r12;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new org.apache.commons.cli.ParseException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to find the class: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.commons.cli.ParseException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label4:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        $r4 = new org.apache.commons.cli.ParseException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; Unable to create an instance of: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.commons.cli.ParseException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label7:
        return $r2;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static java.lang.Number createNumber(java.lang.String) throws org.apache.commons.cli.ParseException
    {
        java.lang.Double $r2;
        java.lang.NumberFormatException $r3;
        java.lang.Long $r1;
        org.apache.commons.cli.ParseException $r6;
        int $i0, $i2;
        java.lang.String r0, $r5;

        r0 := @parameter0: java.lang.String;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r0);

     label2:
        return $r2;

     label3:
        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r0);

     label4:
        return $r1;

     label5:
        $r3 := @caughtexception;

        $r6 = new org.apache.commons.cli.ParseException;

        $r5 = virtualinvoke $r3.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        specialinvoke $r6.<org.apache.commons.cli.ParseException: void <init>(java.lang.String)>($r5);

        throw $r6;

        catch java.lang.NumberFormatException from label1 to label2 with label5;
        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public static java.lang.Class createClass(java.lang.String) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.ParseException $r3;
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r7;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.apache.commons.cli.ParseException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to find the class: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.commons.cli.ParseException: void <init>(java.lang.String)>($r7);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static java.util.Date createDate(java.lang.String) throws org.apache.commons.cli.ParseException
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not yet implemented");

        throw $r0;
    }

    public static java.net.URL createURL(java.lang.String) throws org.apache.commons.cli.ParseException
    {
        java.net.MalformedURLException $r2;
        java.net.URL $r0;
        org.apache.commons.cli.ParseException $r3;
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.String r1, $r7;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>(r1);

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.apache.commons.cli.ParseException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to parse the URL: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.commons.cli.ParseException: void <init>(java.lang.String)>($r7);

        throw $r3;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public static java.io.File createFile(java.lang.String) throws org.apache.commons.cli.ParseException
    {
        java.lang.String r1;
        java.io.File $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static java.io.File[] createFiles(java.lang.String) throws org.apache.commons.cli.ParseException
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not yet implemented");

        throw $r0;
    }
}
