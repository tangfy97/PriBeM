public class org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 extends org.apache.xml.dtm.ref.sax2dtm.SAX2DTM
{
    private int[] m_exptype_map0;
    private int[] m_nextsib_map0;
    private int[] m_firstch_map0;
    private int[] m_parent_map0;
    private int[][] m_exptype_map;
    private int[][] m_nextsib_map;
    private int[][] m_firstch_map;
    private int[][] m_parent_map;
    protected org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes;
    protected java.util.Vector m_values;
    private int m_valueIndex;
    private int m_maxNodeIndex;
    protected int m_SHIFT;
    protected int m_MASK;
    protected int m_blocksize;
    protected static final int TEXT_LENGTH_BITS;
    protected static final int TEXT_OFFSET_BITS;
    protected static final int TEXT_LENGTH_MAX;
    protected static final int TEXT_OFFSET_MAX;
    protected boolean m_buildIdIndex;
    private static final java.lang.String EMPTY_STR;
    private static final org.apache.xml.utils.XMLString EMPTY_XML_STR;

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.XMLStringFactory r4;
        org.apache.xml.dtm.DTMManager r1;
        int i0;
        org.apache.xml.dtm.DTMWSFilter r3;
        javax.xml.transform.Source r2;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean,int,boolean,boolean,boolean)>(r1, r2, i0, r3, r4, z0, 512, 1, 1, 0);

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean, int, boolean, boolean, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        javax.xml.transform.Source r2;
        java.util.Vector $r5;
        org.apache.xml.utils.XMLStringFactory r4;
        int[] $r7, $r9, $r11, $r13;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.xml.dtm.DTMWSFilter r3;
        boolean z0, z1, z2, z3;
        org.apache.xml.utils.SuballocatedIntVector $r6, $r8, $r10, $r12;
        org.apache.xml.dtm.DTMManager r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        i5 := @parameter6: int;

        z1 := @parameter7: boolean;

        z3 := @parameter8: boolean;

        z2 := @parameter9: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean,int,boolean,boolean)>(r1, r2, i0, r3, r4, z0, i5, z1, z2);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = 0;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_buildIdIndex> = 1;

        i6 = 0;

        goto label2;

     label1:
        i6 = i6 + 1;

     label2:
        $i1 = i5 >>> 1;

        i5 = $i1;

        if $i1 != 0 goto label1;

        $i2 = 1 << i6;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize> = $i2;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT> = i6;

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        $i4 = $i3 - 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK> = $i4;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_buildIdIndex> = z3;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>(int,int)>(32, 512);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values> = $r5;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex> = 65536;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $r7 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0> = $r7;

        $r8 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $r9 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_nextsib_map0> = $r9;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $r11 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_firstch_map0> = $r11;

        $r12 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $r13 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_parent_map0> = $r13;

        return;
    }

    public final int _exptype(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.SuballocatedIntVector $r1;
        int i0, $i1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $i1 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i1;
    }

    public final int _exptype2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int[][] $r1;
        int[] $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _nextsib2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int[][] $r1;
        int[] $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_nextsib_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_nextsib_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _firstch2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int[][] $r1;
        int[] $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_firstch_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_firstch_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _parent2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int[][] $r1;
        int[] $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_parent_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_parent_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _type2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int[][] $r1;
        int[] $r2, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i9, $i11;
        org.apache.xml.dtm.ref.ExtendedType[] $r3;
        org.apache.xml.dtm.ref.ExtendedType $r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0>;

        i7 = $r5[i0];

        goto label2;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        i7 = $r2[$i5];

     label2:
        $i9 = (int) -1;

        if $i9 == i7 goto label3;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r4 = $r3[i7];

        $i6 = virtualinvoke $r4.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

        return $i6;

     label3:
        $i11 = (int) -1;

        return $i11;
    }

    public final int getExpandedTypeID2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int[][] $r1;
        int[] $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i10 = (int) -1;

        if $i1 == $i10 goto label2;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if $i1 >= $i2 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0>;

        $i8 = $r3[$i1];

        return $i8;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map>;

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i4 = $i1 >>> $i3;

        $r2 = $r1[$i4];

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i6 = $i1 & $i5;

        $i7 = $r2[$i6];

        return $i7;

     label2:
        $i12 = (int) -1;

        return $i12;
    }

    public final int _exptype2Type(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        org.apache.xml.dtm.ref.ExtendedType $r2;
        int i0, $i1, $i3, $i5;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i3 = (int) -1;

        if $i3 == i0 goto label1;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r2 = $r1[i0];

        $i1 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

        return $i1;

     label1:
        $i5 = (int) -1;

        return $i5;
    }

    public int getIdForNamespace(java.lang.String)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.util.Vector $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int indexOf(java.lang.Object)>(r1);

        if $i0 >= 0 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i2 = $i1 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i2;

        return $i1;

     label1:
        return $i0;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.IntStack $r5, $r6, $r7, $r36;
        java.util.Vector $r8, $r9, $r11, $r14, $r20, $r31, $r37;
        byte b28, b31, b32;
        org.apache.xml.utils.SuballocatedIntVector $r23, $r24, $r25;
        short $s21;
        java.lang.String r1, r2, r4, $r16, $r17, $r18, $r19, $r26, $r27, r33, r34, r35;
        org.apache.xml.dtm.ref.DTMStringPool $r22, $r32;
        org.apache.xml.dtm.ref.ExpandedNameTable $r3, $r13, $r21, $r30;
        org.apache.xml.dtm.DTMWSFilter $r28, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, i26, i27, i29, $i30, $i34, $i36, $i38, $i39, $i40, $i42;
        org.xml.sax.Attributes r15;
        java.lang.Object $r10, $r12;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r15 := @parameter3: org.xml.sax.Attributes;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i0 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r1, r2, 1);

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 == $i2 goto label01;

        $r32 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i25 = virtualinvoke $r32.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r4);

        goto label02;

     label01:
        $i25 = 0;

     label02:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i3 = virtualinvoke $r5.<org.apache.xml.utils.IntStack: int peek()>();

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(1, $i0, $i3, $i4, $i25, 1);

        $z0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_indexing>;

        if $z0 == 0 goto label03;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void indexNode(int,int)>($i0, $i5);

     label03:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        virtualinvoke $r6.<org.apache.xml.utils.IntStack: int push(int)>($i5);

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $i6 = virtualinvoke $r7.<org.apache.xml.utils.IntStack: int peek()>();

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i7 = virtualinvoke $r8.<java.util.Vector: int size()>();

        $z1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_pastFirstElement>;

        if $z1 != 0 goto label04;

        $r30 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i22 = virtualinvoke $r30.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(null, "xml", 13);

        $r31 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r31.<java.util.Vector: void addElement(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        $i23 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i24 = $i23 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i24;

        $i34 = (int) -1;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(13, $i22, $i5, $i34, $i23, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_pastFirstElement> = 1;

     label04:
        i26 = $i6;

        goto label08;

     label05:
        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $r10 = virtualinvoke $r9.<java.util.Vector: java.lang.Object elementAt(int)>(i26);

        r33 = (java.lang.String) $r10;

        if r33 != null goto label06;

        goto label07;

     label06:
        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i8 = i26 + 1;

        $r12 = virtualinvoke $r11.<java.util.Vector: java.lang.Object elementAt(int)>($i8);

        r34 = (java.lang.String) $r12;

        $r13 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i9 = virtualinvoke $r13.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(null, r33, 13);

        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r14.<java.util.Vector: void addElement(java.lang.Object)>(r34);

        $i10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i11 = $i10 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i11;

        $i36 = (int) -1;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(13, $i9, $i5, $i36, $i10, 0);

     label07:
        i26 = i26 + 2;

     label08:
        if i26 < $i7 goto label05;

        $i12 = interfaceinvoke r15.<org.xml.sax.Attributes: int getLength()>();

        i27 = 0;

        goto label17;

     label09:
        $r16 = interfaceinvoke r15.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i27);

        $r17 = interfaceinvoke r15.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i27);

        $r18 = interfaceinvoke r15.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i27);

        r35 = $r18;

        $r19 = interfaceinvoke r15.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>(i27);

        if null == $r17 goto label12;

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z4 != 0 goto label10;

        $z6 = virtualinvoke $r17.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z6 == 0 goto label12;

     label10:
        $r27 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String getPrefix(java.lang.String,java.lang.String)>($r17, $r16);

        $z5 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean declAlreadyDeclared(java.lang.String)>($r27);

        if $z5 == 0 goto label11;

        goto label16;

     label11:
        b28 = 13;

        b32 = 13;

        b31 = 13;

        goto label13;

     label12:
        b28 = 2;

        b32 = 2;

        b31 = 2;

        $z2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_buildIdIndex>;

        if $z2 == 0 goto label13;

        $r26 = interfaceinvoke r15.<org.xml.sax.Attributes: java.lang.String getType(int)>(i27);

        $z3 = virtualinvoke $r26.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ID");

        if $z3 == 0 goto label13;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void setIDAttribute(java.lang.String,int)>($r18, $i5);

     label13:
        if null != $r18 goto label14;

        r35 = "";

     label14:
        $r20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r20.<java.util.Vector: void addElement(java.lang.Object)>(r35);

        $i13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i14 = $i13 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i14;

        i29 = $i13;

        $i15 = virtualinvoke $r19.<java.lang.String: int length()>();

        $i16 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i15 == $i16 goto label15;

        $r22 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i18 = virtualinvoke $r22.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>($r17);

        $r23 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i19 = virtualinvoke $r23.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $r24 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r24.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i18);

        $r25 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r25.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i13);

        i29 = neg $i19;

     label15:
        $r21 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i17 = virtualinvoke $r21.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>($r16, $r19, b32);

        $i38 = (int) -1;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(b31, $i17, $i5, $i38, i29, 0);

     label16:
        i27 = i27 + 1;

     label17:
        if i27 < $i12 goto label09;

        $r28 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        if null == $r28 goto label21;

        $r29 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        $i20 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i5);

        $s21 = interfaceinvoke $r29.<org.apache.xml.dtm.DTMWSFilter: short getShouldStripSpace(int,org.apache.xml.dtm.DTM)>($i20, r0);

        $i39 = (int) $s21;

        if 3 != $i39 goto label18;

        $z7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean getShouldStripWhitespace()>();

        goto label20;

     label18:
        $i40 = (int) $s21;

        if 2 != $i40 goto label19;

        $z7 = 1;

        goto label20;

     label19:
        $z7 = 0;

     label20:
        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void pushShouldStripWhitespace(boolean)>($z7);

     label21:
        $i42 = (int) -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i42;

        $r36 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $r37 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i30 = virtualinvoke $r37.<java.util.Vector: int size()>();

        virtualinvoke $r36.<org.apache.xml.utils.IntStack: int push(int)>($i30);

        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.IntStack $r1, $r2, $r4;
        java.util.Vector $r3, $r5;
        int $i0, $i1, $i2;
        java.lang.String r6, r7, r8;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        virtualinvoke $r1.<org.apache.xml.utils.IntStack: void quickPop(int)>(1);

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $i0 = virtualinvoke $r2.<org.apache.xml.utils.IntStack: int peek()>();

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i1 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if $i0 == $i1 goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        virtualinvoke $r5.<java.util.Vector: void setSize(int)>($i0);

     label1:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i2 = virtualinvoke $r4.<org.apache.xml.utils.IntStack: int pop()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i2;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void popShouldStripWhitespace()>();

        return;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.IntStack $r4;
        java.util.Vector $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        char[] r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_insideDTD>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(r2, i0, i1);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i3 = $i2 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i3;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i4 = virtualinvoke $r4.<org.apache.xml.utils.IntStack: int peek()>();

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(8, 8, $i4, $i5, $i2, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i6;

        return;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.IntStack $r1, $r3;
        java.util.Vector $r2;
        int $i0, $i1, $i3, $i5, $i7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        $i3 = (int) -1;

        $i5 = (int) -1;

        $i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(9, 9, $i3, $i5, 0, 1);

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        virtualinvoke $r1.<org.apache.xml.utils.IntStack: int push(int)>($i0);

        $i7 = (int) -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i7;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_contextIndexes>;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.util.Vector m_prefixMappings>;

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        virtualinvoke $r3.<org.apache.xml.utils.IntStack: int push(int)>($i1);

        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int[][] $r8, $r10, $r12, $r14;
        int $i1, $i3, $i5, $i7;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4, $r7, $r9, $r11, $r13;
        org.apache.xml.dtm.ref.ExtendedType[] $r6;
        org.apache.xml.dtm.ref.ExpandedNameTable $r5;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void endDocument()>();

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $i1 = (int) -1;

        virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i1);

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $i3 = (int) -1;

        virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i3);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i5 = (int) -1;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i5);

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i7 = (int) -1;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i7);

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r6 = virtualinvoke $r5.<org.apache.xml.dtm.ref.ExpandedNameTable: org.apache.xml.dtm.ref.ExtendedType[] getExtendedTypes()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes> = $r6;

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $r8 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map> = $r8;

        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $r10 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_nextsib_map> = $r10;

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $r12 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_firstch_map> = $r12;

        $r13 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $r14 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_parent_map> = $r14;

        return;
    }

    protected final int addNode(int, int, int, int, int, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.xml.sax.Locator $r7;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, $i8, $i9, $i11, $i13, $i15, $i17;
        boolean $z0, z1;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i6 := @parameter0: int;

        i4 := @parameter1: int;

        i3 := @parameter2: int;

        i7 := @parameter3: int;

        i5 := @parameter4: int;

        z1 := @parameter5: boolean;

        $i0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        $i1 = $i0 + 1;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size> = $i1;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex>;

        if $i0 != $i2 goto label1;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void addNewDTMID(int)>($i0);

        $i8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex>;

        $i9 = $i8 + 65536;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex> = $i9;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i11 = (int) -1;

        virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i11);

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i13 = (int) -1;

        virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i13);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i3);

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i4);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i5);

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        if $r6 == null goto label2;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i7);

     label2:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.xml.sax.Locator m_locator>;

        if $r7 == null goto label3;

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: boolean m_useSourceLocationProperty>;

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void setSourceLocation()>();

     label3:
        lookupswitch(i6)
        {
            case 2: goto label5;
            case 13: goto label4;
            default: goto label6;
        };

     label4:
        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void declareNamespaceInContext(int,int)>(i3, $i0);

        goto label8;

     label5:
        goto label8;

     label6:
        $i15 = (int) -1;

        if $i15 == i7 goto label7;

        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i0, i7);

        goto label8;

     label7:
        $i17 = (int) -1;

        if $i17 == i3 goto label8;

        $r8 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i0, i3);

     label8:
        return $i0;
    }

    protected final void charactersFlush()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.IntStack $r3, $r6;
        boolean $z0, z1;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r4, $r5;
        org.apache.xml.utils.FastStringBuffer $r1, $r7, $r8;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        if $i0 < 0 goto label5;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i1 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: int size()>();

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        i3 = $i1 - $i2;

        z1 = 0;

        $z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean getShouldStripWhitespace()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        z1 = virtualinvoke $r8.<org.apache.xml.utils.FastStringBuffer: boolean isWhitespace(int,int)>($i20, i3);

     label1:
        if z1 == 0 goto label2;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: void setLength(int)>($i19);

        goto label4;

     label2:
        if i3 > 1023 goto label3;

        $i11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        if $i11 > 2097151 goto label3;

        $i12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_coalescedTextType>;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i13 = virtualinvoke $r6.<org.apache.xml.utils.IntStack: int peek()>();

        $i17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        $i15 = $i14 << 10;

        $i16 = i3 + $i15;

        $i18 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>($i12, 3, $i13, $i17, $i16, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i18;

        goto label4;

     label3:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_coalescedTextType>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i6 = virtualinvoke $r3.<org.apache.xml.utils.IntStack: int peek()>();

        $i8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i7 = neg $i4;

        $i9 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>($i5, 3, $i6, $i8, $i7, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i9;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i10);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i3);

     label4:
        $i22 = (int) -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textPendingStart> = $i22;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_coalescedTextType> = 3;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_textType> = 3;

     label5:
        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.IntStack $r2;
        java.util.Vector $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r3, r6;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r5, $r8;
        org.apache.xml.dtm.ref.DTMStringPool $r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i0 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.IntStack m_parents>;

        $i1 = virtualinvoke $r2.<org.apache.xml.utils.IntStack: int peek()>();

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous>;

        $i2 = neg $i0;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(7, 7, $i1, $i3, $i2, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int m_previous> = $i4;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i5 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r3);

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i5);

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r6);

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i7 = $i6 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i7;

        virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i6);

        return;
    }

    public final int getFirstAttribute(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i7, $i9, $i11;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i5 = $i1;

        $i7 = (int) -1;

        if $i1 != $i7 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>($i1);

        if 1 != $i2 goto label4;

        goto label2;

     label2:
        i5 = i5 + 1;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i5);

        if $i3 != 2 goto label3;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i5);

        return $i4;

     label3:
        if 13 == $i3 goto label2;

        goto label4;

     label4:
        $i11 = (int) -1;

        return $i11;
    }

    protected int getFirstAttributeIdentity(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int $i0, $i1, i2, $i4, $i6, $i8;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i2 := @parameter0: int;

        $i4 = (int) -1;

        if i2 != $i4 goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        $i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i2);

        if 1 != $i0 goto label4;

        goto label2;

     label2:
        i2 = i2 + 1;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i2);

        if $i1 != 2 goto label3;

        return i2;

     label3:
        if 13 == $i1 goto label2;

        goto label4;

     label4:
        $i8 = (int) -1;

        return $i8;
    }

    protected int getNextAttributeIdentity(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int $i0, i1, $i3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i1 := @parameter0: int;

        goto label1;

     label1:
        i1 = i1 + 1;

        $i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if $i0 != 2 goto label2;

        return i1;

     label2:
        if $i0 == 13 goto label3;

        goto label4;

     label3:
        goto label1;

     label4:
        $i3 = (int) -1;

        return $i3;
    }

    protected final int getTypedAttribute(int, int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, i4, $i5, i6, $i7, $i9, $i11, $i13, $i15, $i17;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        org.apache.xml.dtm.ref.ExtendedType $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i6 = $i1;

        $i9 = (int) -1;

        if $i1 != $i9 goto label1;

        $i11 = (int) -1;

        return $i11;

     label1:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>($i1);

        if 1 != $i2 goto label6;

        goto label2;

     label2:
        i6 = i6 + 1;

        $i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i6);

        $i13 = (int) -1;

        if $i7 == $i13 goto label3;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r2 = $r1[$i7];

        $i3 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

        goto label4;

     label3:
        $i15 = (int) -1;

        return $i15;

     label4:
        if $i3 != 2 goto label5;

        if $i7 != i4 goto label2;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i6);

        return $i5;

     label5:
        if 13 == $i3 goto label2;

        goto label6;

     label6:
        $i17 = (int) -1;

        return $i17;
    }

    public java.lang.String getLocalName(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.SuballocatedIntVector $r3;
        org.apache.xml.dtm.ref.DTMStringPool $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype(int)>($i1);

        if $i2 != 7 goto label1;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i3);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i5 = neg $i4;

        $i6 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i5);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r5 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i6);

        return $r5;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getLocalName(int)>($i2);

        return $r2;
    }

    public final java.lang.String getNodeNameX(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.String $r2, $r5, $r7, $r8, $r11;
        org.apache.xml.utils.SuballocatedIntVector $r3, $r6, $r9;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        org.apache.xml.dtm.ref.DTMStringPool $r4, $r10;
        org.apache.xml.dtm.ref.ExtendedType r12;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>($i1);

        if $i2 != 7 goto label1;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = neg $i5;

        $i7 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i6);

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r11 = virtualinvoke $r10.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i7);

        return $r11;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r12 = $r1[$i2];

        $r2 = virtualinvoke r12.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i3 != 0 goto label2;

        $r8 = virtualinvoke r12.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        return $r8;

     label2:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i4 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        i8 = $i4;

        if $i4 != 0 goto label3;

        $r7 = virtualinvoke r12.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        return $r7;

     label3:
        if $i4 >= 0 goto label4;

        i9 = neg $i4;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i8 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i9);

     label4:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r5 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i8);

        return $r5;
    }

    public java.lang.String getNodeName(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.SuballocatedIntVector $r4, $r7, $r12;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        org.apache.xml.dtm.ref.ExtendedType r2;
        java.lang.String[] $r10;
        java.lang.StringBuffer $r15, $r16, $r17;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        java.lang.String $r3, $r6, $r8, $r9, $r11, $r14, $r18;
        org.apache.xml.dtm.ref.DTMStringPool $r5, $r13;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>($i1);

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r2 = $r1[$i2];

        $r3 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i3 != 0 goto label5;

        $i5 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

        $r9 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        if $i5 != 13 goto label2;

        $i10 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i10 != 0 goto label1;

        return "xmlns";

     label1:
        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r18;

     label2:
        if $i5 != 7 goto label3;

        $i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i8 = neg $i7;

        $i9 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i8);

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r14 = virtualinvoke $r13.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i9);

        return $r14;

     label3:
        $i6 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i6 != 0 goto label4;

        $r10 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String[] m_fixednames>;

        $r11 = $r10[$i5];

        return $r11;

     label4:
        return $r9;

     label5:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i4 = virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        i11 = $i4;

        if $i4 != 0 goto label6;

        $r8 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        return $r8;

     label6:
        if $i4 >= 0 goto label7;

        i12 = neg $i4;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i11 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i12);

     label7:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r6 = virtualinvoke $r5.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i11);

        return $r6;
    }

    public org.apache.xml.utils.XMLString getStringValue(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.util.Vector $r35, $r38;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r12, $r13, $r16, $r18, $r20, $r23, $r32, $r43;
        org.apache.xml.utils.FastStringBuffer $r7, $r9, $r17, $r22, $r27, $r29;
        java.lang.String $r8, $r19, $r28, $r37, $r41;
        org.apache.xml.utils.XMLStringDefault $r45, $r46, $r47, $r48;
        org.apache.xml.utils.XMLString $r1, $r4, $r11, $r24, $r31, $r42, $r44;
        org.apache.xml.utils.XMLStringFactory $r5, $r10, $r14, $r21, $r25, $r30, $r33, $r39;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, $i31, i32, i33, $i35, $i37, $i39, $i41, $i43;
        java.lang.Object $r36, $r40;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i35 = (int) -1;

        if $i1 != $i35 goto label01;

        $r44 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR>;

        return $r44;

     label01:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>($i1);

        if $i2 == 1 goto label02;

        if $i2 != 9 goto label12;

     label02:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>($i1);

        i28 = $i3;

        $i37 = (int) -1;

        if $i37 == $i3 goto label11;

        $i39 = (int) -1;

        i29 = $i39;

        i30 = 0;

     label03:
        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i28);

        if $i4 == 3 goto label04;

        if $i4 != 4 goto label08;

     label04:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i5 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i28);

        if $i5 <= 0 goto label06;

        $i41 = (int) -1;

        if $i41 != i29 goto label05;

        i29 = $i5 >>> 10;

     label05:
        $i10 = $i5 & 1023;

        i30 = i30 + $i10;

        goto label08;

     label06:
        $i43 = (int) -1;

        if $i43 != i29 goto label07;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i9 = neg $i5;

        i29 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i9);

     label07:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = neg $i5;

        $i7 = $i6 + 1;

        $i8 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        i30 = i30 + $i8;

     label08:
        i28 = i28 + 1;

        $i31 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i28);

        if $i31 >= $i1 goto label03;

        if i30 <= 0 goto label10;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r5 == null goto label09;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r11 = virtualinvoke $r10.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r9, i29, i30);

        return $r11;

     label09:
        $r45 = new org.apache.xml.utils.XMLStringDefault;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r8 = virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>(i29, i30);

        specialinvoke $r45.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r8);

        return $r45;

     label10:
        $r4 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR>;

        return $r4;

     label11:
        $r1 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR>;

        return $r1;

     label12:
        if 3 == $i2 goto label13;

        if 4 != $i2 goto label17;

     label13:
        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i11 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        if $i11 <= 0 goto label15;

        $r25 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r25 == null goto label14;

        $r30 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r29 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i25 = $i11 >>> 10;

        $i24 = $i11 & 1023;

        $r31 = virtualinvoke $r30.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r29, $i25, $i24);

        return $r31;

     label14:
        $r46 = new org.apache.xml.utils.XMLStringDefault;

        $r27 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i23 = $i11 >>> 10;

        $i22 = $i11 & 1023;

        $r28 = virtualinvoke $r27.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i23, $i22);

        specialinvoke $r46.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r28);

        return $r46;

     label15:
        $r14 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r14 == null goto label16;

        $r21 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r22 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i17 = neg $i11;

        $i18 = virtualinvoke $r20.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i17);

        $r23 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i19 = neg $i11;

        $i20 = $i19 + 1;

        $i21 = virtualinvoke $r23.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i20);

        $r24 = virtualinvoke $r21.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r22, $i18, $i21);

        return $r24;

     label16:
        $r47 = new org.apache.xml.utils.XMLStringDefault;

        $r17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i12 = neg $i11;

        $i13 = virtualinvoke $r16.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i12);

        $r18 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i14 = neg $i11;

        $i15 = $i14 + 1;

        $i16 = virtualinvoke $r18.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i15);

        $r19 = virtualinvoke $r17.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i13, $i16);

        specialinvoke $r47.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r19);

        return $r47;

     label17:
        $r32 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i26 = virtualinvoke $r32.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        i32 = $i26;

        if $i26 >= 0 goto label18;

        i33 = neg $i26;

        $r43 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i27 = i33 + 1;

        i32 = virtualinvoke $r43.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i27);

     label18:
        $r33 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r33 == null goto label19;

        $r39 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r38 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r40 = virtualinvoke $r38.<java.util.Vector: java.lang.Object elementAt(int)>(i32);

        $r41 = (java.lang.String) $r40;

        $r42 = virtualinvoke $r39.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>($r41);

        return $r42;

     label19:
        $r48 = new org.apache.xml.utils.XMLStringDefault;

        $r35 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r36 = virtualinvoke $r35.<java.util.Vector: java.lang.Object elementAt(int)>(i32);

        $r37 = (java.lang.String) $r36;

        specialinvoke $r48.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r37);

        return $r48;
    }

    public final java.lang.String getStringValueX(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.util.Vector $r14;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r5, $r6, $r7, $r9, $r13, $r17;
        org.apache.xml.utils.FastStringBuffer $r3, $r8, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, $i24, i25, i26, $i28, $i30, $i32, $i34, $i36;
        java.lang.String $r4, $r10, $r12, $r16;
        java.lang.Object $r15;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i28 = (int) -1;

        if $i1 != $i28 goto label01;

        return "";

     label01:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>($i1);

        if $i2 == 1 goto label02;

        if $i2 != 9 goto label11;

     label02:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>($i1);

        i21 = $i3;

        $i30 = (int) -1;

        if $i30 == $i3 goto label10;

        $i32 = (int) -1;

        i22 = $i32;

        i23 = 0;

     label03:
        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i21);

        if $i4 == 3 goto label04;

        if $i4 != 4 goto label08;

     label04:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i5 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i21);

        if $i5 <= 0 goto label06;

        $i34 = (int) -1;

        if $i34 != i22 goto label05;

        i22 = $i5 >>> 10;

     label05:
        $i10 = $i5 & 1023;

        i23 = i23 + $i10;

        goto label08;

     label06:
        $i36 = (int) -1;

        if $i36 != i22 goto label07;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i9 = neg $i5;

        i22 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i9);

     label07:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = neg $i5;

        $i7 = $i6 + 1;

        $i8 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        i23 = i23 + $i8;

     label08:
        i21 = i21 + 1;

        $i24 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i21);

        if $i24 >= $i1 goto label03;

        if i23 <= 0 goto label09;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>(i22, i23);

        return $r4;

     label09:
        return "";

     label10:
        return "";

     label11:
        if 3 == $i2 goto label12;

        if 4 != $i2 goto label14;

     label12:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i11 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        if $i11 <= 0 goto label13;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i18 = $i11 >>> 10;

        $i17 = $i11 & 1023;

        $r12 = virtualinvoke $r11.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i18, $i17);

        return $r12;

     label13:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i12 = neg $i11;

        $i13 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i12);

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i14 = neg $i11;

        $i15 = $i14 + 1;

        $i16 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i15);

        $r10 = virtualinvoke $r8.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i13, $i16);

        return $r10;

     label14:
        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i19 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        i25 = $i19;

        if $i19 >= 0 goto label15;

        i26 = neg $i19;

        $r17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i20 = i26 + 1;

        i25 = virtualinvoke $r17.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i20);

     label15:
        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r15 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>(i25);

        $r16 = (java.lang.String) $r15;

        return $r16;
    }

    public java.lang.String getStringValue()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15;
        java.lang.String $r1, $r6, $r8;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r5;
        org.apache.xml.utils.FastStringBuffer $r4, $r7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        $i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>(0);

        $i13 = (int) -1;

        if $i0 != $i13 goto label1;

        return "";

     label1:
        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>($i0);

        if $i1 != 3 goto label3;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _nextsib2(int)>($i0);

        $i15 = (int) -1;

        if $i3 != $i15 goto label3;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i4 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i0);

        if $i4 <= 0 goto label2;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i11 = $i4 >>> 10;

        $i10 = $i4 & 1023;

        $r8 = virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i11, $i10);

        return $r8;

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i5 = neg $i4;

        $i6 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i5);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = neg $i4;

        $i8 = $i7 + 1;

        $i9 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i8);

        $r6 = virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i6, $i9);

        return $r6;

     label3:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getDocument()>();

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String getStringValueX(int)>($i2);

        return $r1;
    }

    public final void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.util.Vector $r17;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r6, $r7, $r8, $r10, $r11, $r13, $r16, $r21;
        org.apache.xml.utils.FastStringBuffer $r4, $r5, $r9, $r12, $r14, $r15;
        java.lang.String $r22;
        char[] $r19, $r20;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, i32, $i33, i34, i35, $i37, $i39, $i41, $i43, $i45;
        org.xml.sax.ContentHandler r3;
        java.lang.Object $r18;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r3 := @parameter1: org.xml.sax.ContentHandler;

        z0 := @parameter2: boolean;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i37 = (int) -1;

        if $i1 != $i37 goto label01;

        return;

     label01:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>($i1);

        if $i2 == 1 goto label02;

        if $i2 != 9 goto label11;

     label02:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>($i1);

        i30 = $i3;

        $i39 = (int) -1;

        if $i39 == $i3 goto label10;

        $i41 = (int) -1;

        i31 = $i41;

        i32 = 0;

     label03:
        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i30);

        if $i4 == 3 goto label04;

        if $i4 != 4 goto label08;

     label04:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i5 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i30);

        if $i5 <= 0 goto label06;

        $i43 = (int) -1;

        if $i43 != i31 goto label05;

        i31 = $i5 >>> 10;

     label05:
        $i10 = $i5 & 1023;

        i32 = i32 + $i10;

        goto label08;

     label06:
        $i45 = (int) -1;

        if $i45 != i31 goto label07;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i9 = neg $i5;

        i31 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i9);

     label07:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = neg $i5;

        $i7 = $i6 + 1;

        $i8 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        i32 = i32 + $i8;

     label08:
        i30 = i30 + 1;

        $i33 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i30);

        if $i33 >= $i1 goto label03;

        if i32 <= 0 goto label10;

        if z0 == 0 goto label09;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r3, i31, i32);

        goto label10;

     label09:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r3, i31, i32);

     label10:
        goto label20;

     label11:
        if 3 == $i2 goto label12;

        if 4 != $i2 goto label17;

     label12:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i11 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        if $i11 <= 0 goto label14;

        if z0 == 0 goto label13;

        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i25 = $i11 >>> 10;

        $i24 = $i11 & 1023;

        virtualinvoke $r15.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r3, $i25, $i24);

        goto label16;

     label13:
        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i23 = $i11 >>> 10;

        $i22 = $i11 & 1023;

        virtualinvoke $r14.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r3, $i23, $i22);

        goto label16;

     label14:
        if z0 == 0 goto label15;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i17 = neg $i11;

        $i18 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i17);

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i19 = neg $i11;

        $i20 = $i19 + 1;

        $i21 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i20);

        virtualinvoke $r12.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r3, $i18, $i21);

        goto label16;

     label15:
        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i12 = neg $i11;

        $i13 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i12);

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i14 = neg $i11;

        $i15 = $i14 + 1;

        $i16 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i15);

        virtualinvoke $r9.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r3, $i13, $i16);

     label16:
        goto label20;

     label17:
        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i26 = virtualinvoke $r16.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        i34 = $i26;

        if $i26 >= 0 goto label18;

        i35 = neg $i26;

        $r21 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i29 = i35 + 1;

        i34 = virtualinvoke $r21.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i29);

     label18:
        $r17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r18 = virtualinvoke $r17.<java.util.Vector: java.lang.Object elementAt(int)>(i34);

        $r22 = (java.lang.String) $r18;

        if z0 == 0 goto label19;

        $r20 = virtualinvoke $r22.<java.lang.String: char[] toCharArray()>();

        $i28 = virtualinvoke $r22.<java.lang.String: int length()>();

        staticinvoke <org.apache.xml.utils.FastStringBuffer: void sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler)>($r20, 0, $i28, r3);

        goto label20;

     label19:
        $r19 = virtualinvoke $r22.<java.lang.String: char[] toCharArray()>();

        $i27 = virtualinvoke $r22.<java.lang.String: int length()>();

        interfaceinvoke r3.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r19, 0, $i27);

     label20:
        return;
    }

    public java.lang.String getNodeValue(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.util.Vector $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        java.lang.String $r4, $r6, $r10;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r3, $r7, $r11;
        org.apache.xml.utils.FastStringBuffer $r2, $r5;
        java.lang.Object $r9;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>($i1);

        if $i2 == 3 goto label1;

        if $i2 != 4 goto label3;

     label1:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>($i1);

        if $i3 <= 0 goto label2;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i10 = $i3 >>> 10;

        $i9 = $i3 & 1023;

        $r6 = virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i10, $i9);

        return $r6;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = neg $i3;

        $i5 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i4);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = neg $i3;

        $i7 = $i6 + 1;

        $i8 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        $r4 = virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i5, $i8);

        return $r4;

     label3:
        if 1 == $i2 goto label4;

        if 11 == $i2 goto label4;

        if 9 != $i2 goto label5;

     label4:
        return null;

     label5:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i11 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        i13 = $i11;

        if $i11 >= 0 goto label6;

        i14 = neg $i11;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i12 = i14 + 1;

        i13 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i12);

     label6:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r9 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i13);

        $r10 = (java.lang.String) $r9;

        return $r10;
    }

    protected final void copyTextNode(int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.serializer.SerializationHandler r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r3, $r5;
        org.apache.xml.utils.FastStringBuffer $r4, $r6;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r2 := @parameter1: org.apache.xml.serializer.SerializationHandler;

        $i10 = (int) -1;

        if i0 == $i10 goto label2;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i1 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if $i1 <= 0 goto label1;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i8 = $i1 >>> 10;

        $i7 = $i1 & 1023;

        virtualinvoke $r6.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r2, $i8, $i7);

        goto label2;

     label1:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i2 = neg $i1;

        $i3 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i2);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = neg $i1;

        $i5 = $i4 + 1;

        $i6 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i5);

        virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r2, $i3, $i6);

     label2:
        return;
    }

    protected final java.lang.String copyElement(int, int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.serializer.SerializationHandler r8;
        int i0, $i1, i2, $i3, $i4, i5, i6;
        java.lang.String $r3, $r4, $r7, r10;
        org.apache.xml.utils.SuballocatedIntVector $r5, $r9;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        org.apache.xml.dtm.ref.DTMStringPool $r6;
        org.apache.xml.dtm.ref.ExtendedType r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        r8 := @parameter2: org.apache.xml.serializer.SerializationHandler;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r2 = $r1[i0];

        $r3 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        $r4 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != 0 goto label1;

        interfaceinvoke r8.<org.apache.xml.serializer.ExtendedContentHandler: void startElement(java.lang.String)>($r4);

        return $r4;

     label1:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i3 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        i5 = $i3;

        if $i3 != 0 goto label2;

        interfaceinvoke r8.<org.apache.xml.serializer.ExtendedContentHandler: void startElement(java.lang.String)>($r4);

        interfaceinvoke r8.<org.apache.xml.serializer.ExtendedContentHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>("", $r3);

        return $r4;

     label2:
        if $i3 >= 0 goto label3;

        i6 = neg $i3;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i5 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i6);

     label3:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r7 = virtualinvoke $r6.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i5);

        interfaceinvoke r8.<org.apache.xml.serializer.ExtendedContentHandler: void startElement(java.lang.String)>($r7);

        $i4 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>(58);

        if $i4 <= 0 goto label4;

        r10 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        goto label5;

     label4:
        r10 = null;

     label5:
        interfaceinvoke r8.<org.apache.xml.serializer.ExtendedContentHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>(r10, $r3);

        return $r7;
    }

    protected final void copyNS(int, org.apache.xml.serializer.SerializationHandler, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.serializer.SerializationHandler r1;
        int i0, $i1, i2, $i4;
        java.lang.String $r2, $r3;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.serializer.SerializationHandler;

        z0 := @parameter2: boolean;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getFirstNamespaceNode(int,boolean)>($i1, z0);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String getNodeNameX(int)>(i2);

        $r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String getNodeValue(int)>(i2);

        interfaceinvoke r1.<org.apache.xml.serializer.ExtendedContentHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>($r2, $r3);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNamespaceNode(int,int,boolean)>($i1, i2, z0);

     label2:
        $i4 = (int) -1;

        if i2 != $i4 goto label1;

        return;
    }

    protected final void copyAttributes(int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, i2, $i4;
        org.apache.xml.serializer.SerializationHandler r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.serializer.SerializationHandler;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getFirstAttributeIdentity(int)>(i0);

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i2);

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void copyAttribute(int,int,org.apache.xml.serializer.SerializationHandler)>(i2, $i1, r1);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getNextAttributeIdentity(int)>(i2);

     label2:
        $i4 = (int) -1;

        if i2 != $i4 goto label1;

        return;
    }

    protected final void copyAttribute(int, int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.serializer.SerializationHandler r7;
        java.util.Vector $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.String $r3, $r4, $r8, $r12, r13, r14, $r15;
        org.apache.xml.utils.SuballocatedIntVector $r9, $r10;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        org.apache.xml.dtm.ref.DTMStringPool $r11;
        org.apache.xml.dtm.ref.ExtendedType r2;
        java.lang.Object $r6;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r7 := @parameter2: org.apache.xml.serializer.SerializationHandler;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r2 = $r1[i0];

        $r3 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        $r4 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        r13 = null;

        r14 = null;

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: int _dataOrQName(int)>(i1);

        i9 = $i2;

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i3 == 0 goto label2;

        if $i2 > 0 goto label1;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = neg $i2;

        $i5 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i4);

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = neg $i2;

        $i7 = $i6 + 1;

        i9 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r12 = virtualinvoke $r11.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i5);

        r14 = $r12;

        $i8 = virtualinvoke $r12.<java.lang.String: int indexOf(int)>(58);

        if $i8 <= 0 goto label1;

        r13 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

     label1:
        interfaceinvoke r7.<org.apache.xml.serializer.ExtendedContentHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>(r13, $r3);

     label2:
        if r13 == null goto label3;

        $r15 = r14;

        goto label4;

     label3:
        $r15 = $r4;

     label4:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        $r8 = (java.lang.String) $r6;

        interfaceinvoke r7.<org.apache.xml.serializer.ExtendedContentHandler: void addAttribute(java.lang.String,java.lang.String)>($r15, $r8);

        return;
    }

    static void <clinit>()
    {
        org.apache.xml.utils.XMLStringDefault $r0;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String EMPTY_STR> = "";

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_OFFSET_MAX> = 2097151;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_LENGTH_MAX> = 1023;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_OFFSET_BITS> = 21;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_LENGTH_BITS> = 10;

        $r0 = new org.apache.xml.utils.XMLStringDefault;

        specialinvoke $r0.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>("");

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR> = $r0;

        return;
    }
}
