public class org.codehaus.jackson.node.TreeTraversingParser extends org.codehaus.jackson.impl.JsonParserMinimalBase
{
    protected org.codehaus.jackson.ObjectCodec _objectCodec;
    protected org.codehaus.jackson.node.NodeCursor _nodeCursor;
    protected org.codehaus.jackson.JsonToken _nextToken;
    protected boolean _startContainer;
    protected boolean _closed;

    public void <init>(org.codehaus.jackson.JsonNode)
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        r1 := @parameter0: org.codehaus.jackson.JsonNode;

        specialinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: void <init>(org.codehaus.jackson.JsonNode,org.codehaus.jackson.ObjectCodec)>(r1, null);

        return;
    }

    public void <init>(org.codehaus.jackson.JsonNode, org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.node.NodeCursor$Array $r7;
        org.codehaus.jackson.JsonToken $r4, $r6;
        org.codehaus.jackson.ObjectCodec r1;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode r2;
        org.codehaus.jackson.node.NodeCursor$Object $r5;
        org.codehaus.jackson.node.NodeCursor$RootValue $r3;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        r2 := @parameter0: org.codehaus.jackson.JsonNode;

        r1 := @parameter1: org.codehaus.jackson.ObjectCodec;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void <init>(int)>(0);

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.ObjectCodec _objectCodec> = r1;

        $z0 = virtualinvoke r2.<org.codehaus.jackson.JsonNode: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _nextToken> = $r6;

        $r7 = new org.codehaus.jackson.node.NodeCursor$Array;

        specialinvoke $r7.<org.codehaus.jackson.node.NodeCursor$Array: void <init>(org.codehaus.jackson.JsonNode,org.codehaus.jackson.node.NodeCursor)>(r2, null);

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = $r7;

        goto label3;

     label1:
        $z1 = virtualinvoke r2.<org.codehaus.jackson.JsonNode: boolean isObject()>();

        if $z1 == 0 goto label2;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _nextToken> = $r4;

        $r5 = new org.codehaus.jackson.node.NodeCursor$Object;

        specialinvoke $r5.<org.codehaus.jackson.node.NodeCursor$Object: void <init>(org.codehaus.jackson.JsonNode,org.codehaus.jackson.node.NodeCursor)>(r2, null);

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = $r5;

        goto label3;

     label2:
        $r3 = new org.codehaus.jackson.node.NodeCursor$RootValue;

        specialinvoke $r3.<org.codehaus.jackson.node.NodeCursor$RootValue: void <init>(org.codehaus.jackson.JsonNode,org.codehaus.jackson.node.NodeCursor)>(r2, null);

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = $r3;

     label3:
        return;
    }

    public void setCodec(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.ObjectCodec r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.ObjectCodec _objectCodec> = r1;

        return;
    }

    public org.codehaus.jackson.ObjectCodec getCodec()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.ObjectCodec $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.ObjectCodec _objectCodec>;

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed>;

        if $z0 != 0 goto label1;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed> = 1;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = null;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken> = null;

     label1:
        return;
    }

    public org.codehaus.jackson.JsonToken nextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r4, $r5, $r7, $r10, $r11, $r12, $r13, $r14, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31;
        org.codehaus.jackson.node.NodeCursor $r2, $r3, $r6, $r8, $r9, $r15, $r16, $r17, $r18;
        boolean $z0, $z1;
        org.codehaus.jackson.node.TreeTraversingParser r0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _nextToken>;

        if $r1 == null goto label01;

        $r27 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _nextToken>;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken> = $r27;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _nextToken> = null;

        $r28 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r28;

     label01:
        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer>;

        if $z0 == 0 goto label07;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer> = 0;

        $r15 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $z1 = virtualinvoke $r15.<org.codehaus.jackson.node.NodeCursor: boolean currentHasChildren()>();

        if $z1 != 0 goto label04;

        $r25 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        $r24 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r25 != $r24 goto label02;

        $r29 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        goto label03;

     label02:
        $r29 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

     label03:
        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken> = $r29;

        $r26 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r26;

     label04:
        $r16 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r17 = virtualinvoke $r16.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.node.NodeCursor iterateChildren()>();

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = $r17;

        $r18 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r19 = virtualinvoke $r18.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.JsonToken nextToken()>();

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken> = $r19;

        $r21 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        $r20 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r21 == $r20 goto label05;

        $r23 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        $r22 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r23 != $r22 goto label06;

     label05:
        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer> = 1;

     label06:
        $r30 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r30;

     label07:
        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        if $r2 != null goto label08;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed> = 1;

        return null;

     label08:
        $r3 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.JsonToken nextToken()>();

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken> = $r4;

        $r5 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        if $r5 == null goto label11;

        $r12 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        $r11 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r12 == $r11 goto label09;

        $r14 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        $r13 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r14 != $r13 goto label10;

     label09:
        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer> = 1;

     label10:
        $r31 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r31;

     label11:
        $r6 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.JsonToken endToken()>();

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken> = $r7;

        $r8 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.node.NodeCursor getParent()>();

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor> = $r9;

        $r10 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r10;
    }

    public org.codehaus.jackson.JsonParser skipChildren() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4, $r5, $r6;
        org.codehaus.jackson.node.TreeTraversingParser r0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r2 != $r1 goto label1;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer> = 0;

        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken> = $r6;

        goto label2;

     label1:
        $r4 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r4 != $r3 goto label2;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _startContainer> = 0;

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken> = $r5;

     label2:
        return r0;
    }

    public boolean isClosed()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed>;

        return $z0;
    }

    public java.lang.String getCurrentName()
    {
        org.codehaus.jackson.node.NodeCursor $r1, $r2;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.node.NodeCursor: java.lang.String getCurrentName()>();

     label2:
        return $r3;
    }

    public org.codehaus.jackson.JsonStreamContext getParsingContext()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.node.NodeCursor $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        return $r1;
    }

    public org.codehaus.jackson.JsonLocation getTokenLocation()
    {
        org.codehaus.jackson.node.TreeTraversingParser r1;
        org.codehaus.jackson.JsonLocation $r0;

        r1 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r0 = <org.codehaus.jackson.JsonLocation: org.codehaus.jackson.JsonLocation NA>;

        return $r0;
    }

    public org.codehaus.jackson.JsonLocation getCurrentLocation()
    {
        org.codehaus.jackson.node.TreeTraversingParser r1;
        org.codehaus.jackson.JsonLocation $r0;

        r1 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r0 = <org.codehaus.jackson.JsonLocation: org.codehaus.jackson.JsonLocation NA>;

        return $r0;
    }

    public java.lang.String getText()
    {
        org.codehaus.jackson.JsonToken $r1, $r4, $r13;
        org.codehaus.jackson.JsonNode $r3, $r6, $r9;
        org.codehaus.jackson.node.NodeCursor $r11;
        int[] $r2;
        int $i0, $i1;
        java.lang.String $r5, $r8, $r10, $r12, $r14;
        java.lang.Number $r7;
        boolean $z0, $z1;
        org.codehaus.jackson.node.TreeTraversingParser r0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = <org.codehaus.jackson.node.TreeTraversingParser$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r1 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label2:
        $r11 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.node.NodeCursor: java.lang.String getCurrentName()>();

        return $r12;

     label3:
        $r9 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.JsonNode: java.lang.String getTextValue()>();

        return $r10;

     label4:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.JsonNode: java.lang.Number getNumberValue()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        return $r8;

     label5:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        if $r3 == null goto label6;

        $z1 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: boolean isBinary()>();

        if $z1 == 0 goto label6;

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.JsonNode: java.lang.String asText()>();

        return $r5;

     label6:
        $r13 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        if $r13 != null goto label7;

        $r14 = null;

        goto label8;

     label7:
        $r4 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonToken _currToken>;

        $r14 = virtualinvoke $r4.<org.codehaus.jackson.JsonToken: java.lang.String asString()>();

     label8:
        return $r14;
    }

    public char[] getTextCharacters() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: java.lang.String getText()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        return $r2;
    }

    public int getTextLength() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i0;
    }

    public int getTextOffset() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        return 0;
    }

    public boolean hasTextCharacters()
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        return 0;
    }

    public org.codehaus.jackson.JsonParser$NumberType getNumberType() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r1;
        org.codehaus.jackson.JsonParser$NumberType $r2;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        if $r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

     label2:
        return $r2;
    }

    public java.math.BigInteger getBigIntegerValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        java.math.BigInteger $r2;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: java.math.BigInteger getBigIntegerValue()>();

        return $r2;
    }

    public java.math.BigDecimal getDecimalValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        java.math.BigDecimal $r2;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: java.math.BigDecimal getDecimalValue()>();

        return $r2;
    }

    public double getDoubleValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: double getDoubleValue()>();

        return $d0;
    }

    public float getFloatValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        float $f0;
        org.codehaus.jackson.JsonNode $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: double getDoubleValue()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public long getLongValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        long $l0;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $l0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: long getLongValue()>();

        return $l0;
    }

    public int getIntValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        int $i0;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: int getIntValue()>();

        return $i0;
    }

    public java.lang.Number getNumberValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;
        java.lang.Number $r2;
        org.codehaus.jackson.JsonNode $r1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNumericNode()>();

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: java.lang.Number getNumberValue()>();

        return $r2;
    }

    public java.lang.Object getEmbeddedObject()
    {
        byte[] $r3;
        org.codehaus.jackson.node.POJONode $r4;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.node.BinaryNode $r2;
        org.codehaus.jackson.JsonNode $r1;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed>;

        if $z0 != 0 goto label2;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        if $r1 == null goto label2;

        $z1 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: boolean isPojo()>();

        if $z1 == 0 goto label1;

        $r4 = (org.codehaus.jackson.node.POJONode) $r1;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.node.POJONode: java.lang.Object getPojo()>();

        return $r5;

     label1:
        $z2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: boolean isBinary()>();

        if $z2 == 0 goto label2;

        $r2 = (org.codehaus.jackson.node.BinaryNode) $r1;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.node.BinaryNode: byte[] getBinaryValue()>();

        return $r3;

     label2:
        return null;
    }

    public byte[] getBinaryValue(org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r2, $r5, $r6;
        org.codehaus.jackson.node.POJONode $r3;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r1;
        org.codehaus.jackson.Base64Variant r7;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        r7 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        if $r1 == null goto label2;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: byte[] getBinaryValue()>();

        if $r2 == null goto label1;

        return $r2;

     label1:
        $z0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: boolean isPojo()>();

        if $z0 == 0 goto label2;

        $r3 = (org.codehaus.jackson.node.POJONode) $r1;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.node.POJONode: java.lang.Object getPojo()>();

        $z1 = $r4 instanceof byte[];

        if $z1 == 0 goto label2;

        $r5 = (byte[]) $r4;

        $r6 = (byte[]) $r5;

        return $r6;

     label2:
        return null;
    }

    protected org.codehaus.jackson.JsonNode currentNode()
    {
        org.codehaus.jackson.node.NodeCursor $r1, $r2;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $z0 = r0.<org.codehaus.jackson.node.TreeTraversingParser: boolean _closed>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        if $r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.node.NodeCursor _nodeCursor>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.node.NodeCursor: org.codehaus.jackson.JsonNode currentNode()>();

        return $r3;
    }

    protected org.codehaus.jackson.JsonNode currentNumericNode() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r8;
        org.codehaus.jackson.node.TreeTraversingParser r0;
        org.codehaus.jackson.JsonNode $r1;
        org.codehaus.jackson.JsonParseException $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonNode currentNode()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: boolean isNumber()>();

        if $z0 != 0 goto label4;

     label1:
        if $r1 != null goto label2;

        $r8 = null;

        goto label3;

     label2:
        $r8 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonToken asToken()>();

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not numeric, can not use numeric value accessors");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r6);

        throw $r7;

     label4:
        return $r1;
    }

    protected void _handleEOF() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.node.TreeTraversingParser r0;

        r0 := @this: org.codehaus.jackson.node.TreeTraversingParser;

        virtualinvoke r0.<org.codehaus.jackson.node.TreeTraversingParser: void _throwInternal()>();

        return;
    }
}
