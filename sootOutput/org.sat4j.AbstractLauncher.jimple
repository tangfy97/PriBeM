public abstract class org.sat4j.AbstractLauncher extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.lang.String SOLUTION_PREFIX;
    public static final java.lang.String ANSWER_PREFIX;
    public static final java.lang.String COMMENT_PREFIX;
    protected long beginTime;
    protected org.sat4j.ExitCode exitCode;
    protected org.sat4j.reader.Reader reader;
    protected transient java.io.PrintWriter out;
    protected transient java.lang.Thread shutdownHook;
    protected org.sat4j.specs.ISolver solver;
    public boolean silent;
    protected boolean prime;

    protected void <init>()
    {
        java.io.PrintWriter $r2;
        java.io.PrintStream $r3;
        org.sat4j.AbstractLauncher r0;
        org.sat4j.AbstractLauncher$1 $r4;
        java.lang.Runtime $r6;
        java.lang.Thread $r7;
        org.sat4j.ExitCode $r1;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.sat4j.AbstractLauncher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.sat4j.ExitCode: org.sat4j.ExitCode UNKNOWN>;

        r0.<org.sat4j.AbstractLauncher: org.sat4j.ExitCode exitCode> = $r1;

        $r2 = new java.io.PrintWriter;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r3, 1);

        r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out> = $r2;

        $r4 = new org.sat4j.AbstractLauncher$1;

        specialinvoke $r4.<org.sat4j.AbstractLauncher$1: void <init>(org.sat4j.AbstractLauncher)>(r0);

        r0.<org.sat4j.AbstractLauncher: java.lang.Thread shutdownHook> = $r4;

        r0.<org.sat4j.AbstractLauncher: boolean silent> = 0;

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("prime");

        if $r5 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.sat4j.AbstractLauncher: boolean prime> = $z0;

        $r6 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r7 = r0.<org.sat4j.AbstractLauncher: java.lang.Thread shutdownHook>;

        virtualinvoke $r6.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r7);

        return;
    }

    protected void displayResult()
    {
        org.sat4j.AbstractLauncher r0;
        int[] $r17, $r23, r34;
        org.sat4j.ExitCode $r11, $r14, $r15;
        boolean $z0;
        java.io.PrintWriter $r3, $r4, $r6, $r9, $r18, $r19, $r21;
        java.lang.StringBuilder $r8, $r10, $r12, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r35, $r36, $r37;
        org.sat4j.specs.ISolver $r1, $r5, $r7, $r16, $r22;
        long $l0, $l1, $l2, $l4, $l5, $l8;
        int i3, $i6, $i7;
        java.lang.String $r13, $r28, $r33, $r38;
        double $d0, d1;
        java.io.PrintStream $r2;
        org.sat4j.reader.Reader $r20;

        r0 := @this: org.sat4j.AbstractLauncher;

        $r1 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        if $r1 == null goto label3;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void flush()>();

        $r3 = r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out>;

        virtualinvoke $r3.<java.io.PrintWriter: void flush()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<org.sat4j.AbstractLauncher: long beginTime>;

        $l2 = $l0 - $l1;

        $d0 = (double) $l2;

        d1 = $d0 / 1000.0;

        $r5 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        $r4 = r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out>;

        interfaceinvoke $r5.<org.sat4j.specs.ISolver: void printStat(java.io.PrintWriter,java.lang.String)>($r4, "c ");

        $r7 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        $r6 = r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out>;

        interfaceinvoke $r7.<org.sat4j.specs.ISolver: void printInfos(java.io.PrintWriter,java.lang.String)>($r6, "c ");

        $r9 = r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s ");

        $r11 = r0.<org.sat4j.AbstractLauncher: org.sat4j.ExitCode exitCode>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        $r15 = r0.<org.sat4j.AbstractLauncher: org.sat4j.ExitCode exitCode>;

        $r14 = <org.sat4j.ExitCode: org.sat4j.ExitCode SATISFIABLE>;

        if $r15 != $r14 goto label2;

        $r16 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        $r17 = interfaceinvoke $r16.<org.sat4j.specs.ISolver: int[] model()>();

        r34 = $r17;

        $z0 = r0.<org.sat4j.AbstractLauncher: boolean prime>;

        if $z0 == 0 goto label1;

        i3 = lengthof $r17;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>("returning a prime implicant ...");

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r22 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        $r23 = interfaceinvoke $r22.<org.sat4j.specs.ISolver: int[] primeImplicant()>();

        r34 = $r23;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removed ");

        $i6 = lengthof $r23;

        $i7 = i3 - $i6;

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" literals");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r28);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pi computation time: ");

        $l8 = $l5 - $l4;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r33);

     label1:
        $r18 = r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out>;

        virtualinvoke $r18.<java.io.PrintWriter: void print(java.lang.String)>("v ");

        $r20 = r0.<org.sat4j.AbstractLauncher: org.sat4j.reader.Reader reader>;

        $r19 = r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out>;

        virtualinvoke $r20.<org.sat4j.reader.Reader: void decode(int[],java.io.PrintWriter)>(r34, $r19);

        $r21 = r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out>;

        virtualinvoke $r21.<java.io.PrintWriter: void println()>();

     label2:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total wall clock time (in seconds) : ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r38);

     label3:
        return;
    }

    public abstract void usage();

    protected final void displayHeader()
    {
        java.lang.Runtime $r11;
        java.lang.StringBuilder $r6, $r7, $r9, $r12, $r13, $r14, $r16, $r17, $r18, $r20, $r21, $r22, $r24, $r25, $r26, $r29, $r30, $r31, $r33, $r36, $r37, $r39, $r43, $r44, $r46, $r49, $r50, $r52, $r55, $r56, $r58;
        java.lang.Throwable $r41;
        long $l0, $l1, $l2;
        java.lang.String $r8, $r10, $r15, $r19, $r23, $r27, r28, $r32, $r34, $r38, $r40, $r45, $r47, $r51, $r53, $r57, $r59, $r63;
        java.util.Properties $r61;
        java.io.IOException $r35, $r42, $r48, $r54;
        java.io.InputStreamReader $r4;
        java.io.BufferedReader $r3, r60;
        org.sat4j.AbstractLauncher r0;
        java.net.URL $r2;
        java.lang.String[] $r62;
        int $i3, $i4, $i5, i6;
        java.lang.Class $r1;
        java.io.InputStream $r5;

        r0 := @this: org.sat4j.AbstractLauncher;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void displayLicense()>();

        $r1 = class "Lorg/sat4j/AbstractLauncher;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.net.URL getResource(java.lang.String)>("/sat4j.version");

        if $r2 != null goto label01;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>("no version file found!!!");

        goto label18;

     label01:
        r60 = null;

     label02:
        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        $r5 = virtualinvoke $r2.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r5);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

        r60 = $r3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version ");

        $r8 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r10);

     label03:
        if $r3 == null goto label18;

     label04:
        virtualinvoke $r3.<java.io.BufferedReader: void close()>();

     label05:
        goto label18;

     label06:
        $r54 := @caughtexception;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c ERROR: ");

        $r57 = virtualinvoke $r54.<java.io.IOException: java.lang.String getMessage()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r59);

        goto label18;

     label07:
        $r48 := @caughtexception;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c ERROR: ");

        $r51 = virtualinvoke $r48.<java.io.IOException: java.lang.String getMessage()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r53);

     label08:
        if r60 == null goto label18;

     label09:
        virtualinvoke r60.<java.io.BufferedReader: void close()>();

     label10:
        goto label18;

     label11:
        $r42 := @caughtexception;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c ERROR: ");

        $r45 = virtualinvoke $r42.<java.io.IOException: java.lang.String getMessage()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r47);

        goto label18;

     label12:
        $r41 := @caughtexception;

     label13:
        if r60 == null goto label17;

     label14:
        virtualinvoke r60.<java.io.BufferedReader: void close()>();

     label15:
        goto label17;

     label16:
        $r35 := @caughtexception;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c ERROR: ");

        $r38 = virtualinvoke $r35.<java.io.IOException: java.lang.String getMessage()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r40);

     label17:
        throw $r41;

     label18:
        $r61 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r62 = newarray (java.lang.String)[9];

        $r62[0] = "java.runtime.name";

        $r62[1] = "java.vm.name";

        $r62[2] = "java.vm.version";

        $r62[3] = "java.vm.vendor";

        $r62[4] = "sun.arch.data.model";

        $r62[5] = "java.version";

        $r62[6] = "os.name";

        $r62[7] = "os.version";

        $r62[8] = "os.arch";

        $i5 = lengthof $r62;

        i6 = 0;

     label19:
        if i6 >= $i5 goto label22;

        r28 = $r62[i6];

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $i4 = virtualinvoke r28.<java.lang.String: int length()>();

        if $i4 >= 14 goto label20;

        $r63 = "\t\t";

        goto label21;

     label20:
        $r63 = "\t";

     label21:
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r32 = virtualinvoke $r61.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r28);

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r34);

        i6 = i6 + 1;

        goto label19;

     label22:
        $r11 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Free memory \t\t");

        $l0 = virtualinvoke $r11.<java.lang.Runtime: long freeMemory()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max memory \t\t");

        $l1 = virtualinvoke $r11.<java.lang.Runtime: long maxMemory()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total memory \t\t");

        $l2 = virtualinvoke $r11.<java.lang.Runtime: long totalMemory()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of processors \t");

        $i3 = virtualinvoke $r11.<java.lang.Runtime: int availableProcessors()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r27);

        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label02 to label03 with label07;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void displayLicense()
    {
        org.sat4j.AbstractLauncher r0;

        r0 := @this: org.sat4j.AbstractLauncher;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>("SAT4J: a SATisfiability library for Java (c) 2004-2012 Artois University and CNRS");

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>("This is free software under the dual EPL/GNU LGPL licenses.");

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>("See www.sat4j.org for details.");

        return;
    }

    protected org.sat4j.specs.IProblem readProblem(java.lang.String) throws java.io.FileNotFoundException, org.sat4j.reader.ParseFormatException, java.io.IOException, org.sat4j.specs.ContradictionException
    {
        org.sat4j.AbstractLauncher r0;
        java.io.PrintWriter $r25;
        java.lang.StringBuilder $r1, $r2, $r4, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r21, $r22, $r23, $r26, $r27, $r29;
        org.sat4j.specs.ISolver $r6, $r19, $r20, $r28;
        long $l0, $l1, $l2;
        int $i3, $i4, $i5, $i6, $i7;
        java.lang.String r3, $r5, $r14, $r18, $r24, $r30;
        double $d0, $d1;
        org.sat4j.reader.Reader $r7, $r8;
        org.sat4j.specs.IProblem $r9;

        r0 := @this: org.sat4j.AbstractLauncher;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("solving ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r5);

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>("reading problem ... ");

        $r6 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        $r7 = virtualinvoke r0.<org.sat4j.AbstractLauncher: org.sat4j.reader.Reader createReader(org.sat4j.specs.ISolver,java.lang.String)>($r6, r3);

        r0.<org.sat4j.AbstractLauncher: org.sat4j.reader.Reader reader> = $r7;

        $r8 = r0.<org.sat4j.AbstractLauncher: org.sat4j.reader.Reader reader>;

        $r9 = virtualinvoke $r8.<org.sat4j.reader.Reader: org.sat4j.specs.IProblem parseInstance(java.lang.String)>(r3);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("... done. Wall clock time ");

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<org.sat4j.AbstractLauncher: long beginTime>;

        $l2 = $l0 - $l1;

        $d0 = (double) $l2;

        $d1 = $d0 / 1000.0;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("declared #vars     ");

        $i3 = interfaceinvoke $r9.<org.sat4j.specs.IProblem: int nVars()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r18);

        $r19 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        $i4 = interfaceinvoke $r19.<org.sat4j.specs.ISolver: int nVars()>();

        $r20 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        $i5 = interfaceinvoke $r20.<org.sat4j.specs.ISolver: int realNumberOfVariables()>();

        if $i4 >= $i5 goto label1;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("internal #vars     ");

        $r28 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        $i7 = interfaceinvoke $r28.<org.sat4j.specs.ISolver: int realNumberOfVariables()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r30);

     label1:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#constraints  ");

        $i6 = interfaceinvoke $r9.<org.sat4j.specs.IProblem: int nConstraints()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r24);

        $r25 = r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out>;

        interfaceinvoke $r9.<org.sat4j.specs.IProblem: void printInfos(java.io.PrintWriter,java.lang.String)>($r25, "c ");

        return $r9;
    }

    protected abstract org.sat4j.reader.Reader createReader(org.sat4j.specs.ISolver, java.lang.String);

    public void run(java.lang.String[])
    {
        org.sat4j.AbstractLauncher r0;
        org.sat4j.ExitCode $r15;
        boolean $z0;
        org.sat4j.reader.ParseFormatException $r7;
        java.io.FileNotFoundException $r23;
        java.lang.StringBuilder $r8, $r10, $r12, $r17, $r19, $r21, $r24, $r26, $r28;
        org.sat4j.specs.TimeoutException $r30;
        org.sat4j.specs.ISolver $r2, $r3, $r5, $r6;
        java.lang.String[] r1;
        long $l0;
        java.lang.String $r4, $r11, $r13, $r20, $r22, $r27, $r29;
        java.io.PrintStream $r9, $r18, $r25;
        org.sat4j.specs.ContradictionException $r14;
        java.io.IOException $r16;

        r0 := @this: org.sat4j.AbstractLauncher;

        r1 := @parameter0: java.lang.String[];

     label01:
        virtualinvoke r0.<org.sat4j.AbstractLauncher: void displayHeader()>();

        $r2 = virtualinvoke r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver configureSolver(java.lang.String[])>(r1);

        r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver> = $r2;

        $r3 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        if $r3 != null goto label03;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void usage()>();

     label02:
        return;

     label03:
        $z0 = r0.<org.sat4j.AbstractLauncher: boolean silent>;

        if $z0 != 0 goto label04;

        $r6 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        interfaceinvoke $r6.<org.sat4j.specs.ISolver: void setVerbose(boolean)>(1);

     label04:
        $r4 = virtualinvoke r0.<org.sat4j.AbstractLauncher: java.lang.String getInstanceName(java.lang.String[])>(r1);

        if $r4 != null goto label06;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void usage()>();

     label05:
        return;

     label06:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.sat4j.AbstractLauncher: long beginTime> = $l0;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.IProblem readProblem(java.lang.String)>($r4);

     label07:
        $r5 = r0.<org.sat4j.AbstractLauncher: org.sat4j.specs.ISolver solver>;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void solve(org.sat4j.specs.IProblem)>($r5);

     label08:
        goto label10;

     label09:
        $r30 := @caughtexception;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>("timeout");

     label10:
        goto label15;

     label11:
        $r23 := @caughtexception;

        $r25 = <java.lang.System: java.io.PrintStream err>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FATAL ");

        $r27 = virtualinvoke $r23.<java.io.FileNotFoundException: java.lang.String getLocalizedMessage()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r29);

        goto label15;

     label12:
        $r16 := @caughtexception;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FATAL ");

        $r20 = virtualinvoke $r16.<java.io.IOException: java.lang.String getLocalizedMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);

        goto label15;

     label13:
        $r14 := @caughtexception;

        $r15 = <org.sat4j.ExitCode: org.sat4j.ExitCode UNSATISFIABLE>;

        r0.<org.sat4j.AbstractLauncher: org.sat4j.ExitCode exitCode> = $r15;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void log(java.lang.String)>("(trivial inconsistency)");

        goto label15;

     label14:
        $r7 := @caughtexception;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FATAL ");

        $r11 = virtualinvoke $r7.<org.sat4j.reader.ParseFormatException: java.lang.String getLocalizedMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label15:
        return;

        catch org.sat4j.specs.TimeoutException from label07 to label08 with label09;
        catch java.io.FileNotFoundException from label01 to label02 with label11;
        catch java.io.FileNotFoundException from label03 to label05 with label11;
        catch java.io.FileNotFoundException from label06 to label10 with label11;
        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label05 with label12;
        catch java.io.IOException from label06 to label10 with label12;
        catch org.sat4j.specs.ContradictionException from label01 to label02 with label13;
        catch org.sat4j.specs.ContradictionException from label03 to label05 with label13;
        catch org.sat4j.specs.ContradictionException from label06 to label10 with label13;
        catch org.sat4j.reader.ParseFormatException from label01 to label02 with label14;
        catch org.sat4j.reader.ParseFormatException from label03 to label05 with label14;
        catch org.sat4j.reader.ParseFormatException from label06 to label10 with label14;
    }

    protected abstract java.lang.String getInstanceName(java.lang.String[]);

    protected abstract org.sat4j.specs.ISolver configureSolver(java.lang.String[]);

    public void log(java.lang.String)
    {
        java.io.PrintWriter $r2;
        org.sat4j.AbstractLauncher r0;
        java.lang.StringBuilder $r1, $r3, $r5;
        java.lang.String r4, $r6;
        boolean $z0;

        r0 := @this: org.sat4j.AbstractLauncher;

        r4 := @parameter0: java.lang.String;

        $z0 = r0.<org.sat4j.AbstractLauncher: boolean silent>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

     label1:
        return;
    }

    protected void solve(org.sat4j.specs.IProblem) throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.AbstractLauncher r0;
        org.sat4j.specs.IProblem r1;
        org.sat4j.ExitCode $r2;
        boolean $z0;

        r0 := @this: org.sat4j.AbstractLauncher;

        r1 := @parameter0: org.sat4j.specs.IProblem;

        $z0 = interfaceinvoke r1.<org.sat4j.specs.IProblem: boolean isSatisfiable()>();

        if $z0 == 0 goto label1;

        $r2 = <org.sat4j.ExitCode: org.sat4j.ExitCode SATISFIABLE>;

        goto label2;

     label1:
        $r2 = <org.sat4j.ExitCode: org.sat4j.ExitCode UNSATISFIABLE>;

     label2:
        r0.<org.sat4j.AbstractLauncher: org.sat4j.ExitCode exitCode> = $r2;

        return;
    }

    public final void setExitCode(org.sat4j.ExitCode)
    {
        org.sat4j.ExitCode r1;
        org.sat4j.AbstractLauncher r0;

        r0 := @this: org.sat4j.AbstractLauncher;

        r1 := @parameter0: org.sat4j.ExitCode;

        r0.<org.sat4j.AbstractLauncher: org.sat4j.ExitCode exitCode> = r1;

        return;
    }

    public final org.sat4j.ExitCode getExitCode()
    {
        org.sat4j.ExitCode $r1;
        org.sat4j.AbstractLauncher r0;

        r0 := @this: org.sat4j.AbstractLauncher;

        $r1 = r0.<org.sat4j.AbstractLauncher: org.sat4j.ExitCode exitCode>;

        return $r1;
    }

    public final long getBeginTime()
    {
        org.sat4j.AbstractLauncher r0;
        long $l0;

        r0 := @this: org.sat4j.AbstractLauncher;

        $l0 = r0.<org.sat4j.AbstractLauncher: long beginTime>;

        return $l0;
    }

    public final org.sat4j.reader.Reader getReader()
    {
        org.sat4j.reader.Reader $r1;
        org.sat4j.AbstractLauncher r0;

        r0 := @this: org.sat4j.AbstractLauncher;

        $r1 = r0.<org.sat4j.AbstractLauncher: org.sat4j.reader.Reader reader>;

        return $r1;
    }

    public void setLogWriter(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        org.sat4j.AbstractLauncher r0;

        r0 := @this: org.sat4j.AbstractLauncher;

        r1 := @parameter0: java.io.PrintWriter;

        r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out> = r1;

        return;
    }

    public java.io.PrintWriter getLogWriter()
    {
        java.io.PrintWriter $r1;
        org.sat4j.AbstractLauncher r0;

        r0 := @this: org.sat4j.AbstractLauncher;

        $r1 = r0.<org.sat4j.AbstractLauncher: java.io.PrintWriter out>;

        return $r1;
    }

    protected void setSilent(boolean)
    {
        org.sat4j.AbstractLauncher r0;
        boolean z0;

        r0 := @this: org.sat4j.AbstractLauncher;

        z0 := @parameter0: boolean;

        r0.<org.sat4j.AbstractLauncher: boolean silent> = z0;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.PrintWriter $r2;
        java.io.PrintStream $r3;
        org.sat4j.AbstractLauncher r1;
        org.sat4j.AbstractLauncher$2 $r4;
        java.io.ObjectInputStream r0;

        r1 := @this: org.sat4j.AbstractLauncher;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new java.io.PrintWriter;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r3, 1);

        r1.<org.sat4j.AbstractLauncher: java.io.PrintWriter out> = $r2;

        $r4 = new org.sat4j.AbstractLauncher$2;

        specialinvoke $r4.<org.sat4j.AbstractLauncher$2: void <init>(org.sat4j.AbstractLauncher)>(r1);

        r1.<org.sat4j.AbstractLauncher: java.lang.Thread shutdownHook> = $r4;

        return;
    }

    protected void showAvailableSolvers(org.sat4j.core.ASolverFactory)
    {
        org.sat4j.AbstractLauncher r0;
        org.sat4j.core.ASolverFactory r1;

        r0 := @this: org.sat4j.AbstractLauncher;

        r1 := @parameter0: org.sat4j.core.ASolverFactory;

        virtualinvoke r0.<org.sat4j.AbstractLauncher: void showAvailableSolvers(org.sat4j.core.ASolverFactory,java.lang.String)>(r1, "");

        return;
    }

    protected void showAvailableSolvers(org.sat4j.core.ASolverFactory, java.lang.String)
    {
        org.sat4j.AbstractLauncher r2;
        org.sat4j.core.ASolverFactory r0;
        java.lang.String[] $r3;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r1, r4, $r9;

        r2 := @this: org.sat4j.AbstractLauncher;

        r0 := @parameter0: org.sat4j.core.ASolverFactory;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label4;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Available solvers for ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.sat4j.AbstractLauncher: void log(java.lang.String)>($r9);

        goto label2;

     label1:
        virtualinvoke r2.<org.sat4j.AbstractLauncher: void log(java.lang.String)>("Available solvers: ");

     label2:
        $r3 = virtualinvoke r0.<org.sat4j.core.ASolverFactory: java.lang.String[] solverNames()>();

        $i1 = lengthof $r3;

        i2 = 0;

     label3:
        if i2 >= $i1 goto label4;

        r4 = $r3[i2];

        virtualinvoke r2.<org.sat4j.AbstractLauncher: void log(java.lang.String)>(r4);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public static void <clinit>()
    {
        <org.sat4j.AbstractLauncher: java.lang.String COMMENT_PREFIX> = "c ";

        <org.sat4j.AbstractLauncher: java.lang.String ANSWER_PREFIX> = "s ";

        <org.sat4j.AbstractLauncher: java.lang.String SOLUTION_PREFIX> = "v ";

        <org.sat4j.AbstractLauncher: long serialVersionUID> = 1L;

        return;
    }
}
