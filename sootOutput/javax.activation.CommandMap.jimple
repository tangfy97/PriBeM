public abstract class javax.activation.CommandMap extends java.lang.Object
{
    private static javax.activation.CommandMap defaultCommandMap;

    public static javax.activation.CommandMap getDefaultCommandMap()
    {
        javax.activation.CommandMap $r0;

        $r0 = <javax.activation.CommandMap: javax.activation.CommandMap defaultCommandMap>;

        return $r0;
    }

    public static void setDefaultCommandMap(javax.activation.CommandMap)
    {
        javax.activation.CommandMap r1, $r2;
        javax.activation.MailcapCommandMap $r3;
        java.lang.SecurityManager $r0;

        r1 := @parameter0: javax.activation.CommandMap;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 == null goto label1;

        virtualinvoke $r0.<java.lang.SecurityManager: void checkSetFactory()>();

     label1:
        if r1 != null goto label2;

        $r3 = new javax.activation.MailcapCommandMap;

        $r2 = $r3;

        specialinvoke $r3.<javax.activation.MailcapCommandMap: void <init>()>();

        goto label3;

     label2:
        $r2 = r1;

     label3:
        <javax.activation.CommandMap: javax.activation.CommandMap defaultCommandMap> = $r2;

        return;
    }

    public void <init>()
    {
        javax.activation.CommandMap r0;

        r0 := @this: javax.activation.CommandMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public javax.activation.CommandInfo[] getPreferredCommands(java.lang.String, javax.activation.DataSource)
    {
        javax.activation.CommandMap r0;
        javax.activation.CommandInfo[] $r2;
        javax.activation.DataSource r3;
        java.lang.String r1;

        r0 := @this: javax.activation.CommandMap;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: javax.activation.DataSource;

        $r2 = virtualinvoke r0.<javax.activation.CommandMap: javax.activation.CommandInfo[] getPreferredCommands(java.lang.String)>(r1);

        return $r2;
    }

    public abstract javax.activation.CommandInfo[] getPreferredCommands(java.lang.String);

    public javax.activation.CommandInfo[] getAllCommands(java.lang.String, javax.activation.DataSource)
    {
        javax.activation.CommandMap r0;
        javax.activation.CommandInfo[] $r2;
        javax.activation.DataSource r3;
        java.lang.String r1;

        r0 := @this: javax.activation.CommandMap;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: javax.activation.DataSource;

        $r2 = virtualinvoke r0.<javax.activation.CommandMap: javax.activation.CommandInfo[] getAllCommands(java.lang.String)>(r1);

        return $r2;
    }

    public abstract javax.activation.CommandInfo[] getAllCommands(java.lang.String);

    public javax.activation.CommandInfo getCommand(java.lang.String, java.lang.String, javax.activation.DataSource)
    {
        javax.activation.CommandMap r0;
        javax.activation.CommandInfo $r3;
        javax.activation.DataSource r4;
        java.lang.String r1, r2;

        r0 := @this: javax.activation.CommandMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: javax.activation.DataSource;

        $r3 = virtualinvoke r0.<javax.activation.CommandMap: javax.activation.CommandInfo getCommand(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public abstract javax.activation.CommandInfo getCommand(java.lang.String, java.lang.String);

    public javax.activation.DataContentHandler createDataContentHandler(java.lang.String, javax.activation.DataSource)
    {
        javax.activation.CommandMap r0;
        javax.activation.DataSource r3;
        java.lang.String r1;
        javax.activation.DataContentHandler $r2;

        r0 := @this: javax.activation.CommandMap;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: javax.activation.DataSource;

        $r2 = virtualinvoke r0.<javax.activation.CommandMap: javax.activation.DataContentHandler createDataContentHandler(java.lang.String)>(r1);

        return $r2;
    }

    public abstract javax.activation.DataContentHandler createDataContentHandler(java.lang.String);

    public java.lang.String[] getMimeTypes()
    {
        javax.activation.CommandMap r0;

        r0 := @this: javax.activation.CommandMap;

        return null;
    }

    static void <clinit>()
    {
        javax.activation.MailcapCommandMap $r0;

        $r0 = new javax.activation.MailcapCommandMap;

        specialinvoke $r0.<javax.activation.MailcapCommandMap: void <init>()>();

        <javax.activation.CommandMap: javax.activation.CommandMap defaultCommandMap> = $r0;

        return;
    }
}
