public class org.xmpp.packet.JID extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
{
    private static java.util.Map stringprepCache;
    private java.lang.String node;
    private java.lang.String domain;
    private java.lang.String resource;
    private java.lang.String cachedFullJID;
    private java.lang.String cachedBareJID;

    public static java.lang.String escapeNode(java.lang.String)
    {
        char $c3;
        int $i0, $i1, $i2, i4, $i5;
        java.lang.StringBuilder $r3;
        java.lang.String r0, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        $r3 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 + 8;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i1);

        i4 = 0;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label02:
        if i4 >= $i2 goto label15;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i5 = (int) $c3;

        lookupswitch($i5)
        {
            case 34: goto label03;
            case 38: goto label04;
            case 39: goto label05;
            case 47: goto label06;
            case 58: goto label07;
            case 60: goto label08;
            case 62: goto label09;
            case 64: goto label10;
            case 92: goto label11;
            default: goto label12;
        };

     label03:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\22");

        goto label14;

     label04:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\26");

        goto label14;

     label05:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\27");

        goto label14;

     label06:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\2f");

        goto label14;

     label07:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\3a");

        goto label14;

     label08:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\3c");

        goto label14;

     label09:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\3e");

        goto label14;

     label10:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\40");

        goto label14;

     label11:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\5c");

        goto label14;

     label12:
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z0 == 0 goto label13;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\20");

        goto label14;

     label13:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label14:
        i4 = i4 + 1;

        goto label02;

     label15:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String unescapeNode(java.lang.String)
    {
        int $i0, i1, $i3, $i4, $i6, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.String r0, $r3;
        char $c2, c5, c7;
        char[] $r1;
        java.lang.StringBuilder $r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r4 = new java.lang.StringBuilder;

        $i0 = lengthof $r1;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i0);

        i8 = 0;

        i1 = lengthof $r1;

     label02:
        if i8 >= i1 goto label18;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        $i9 = (int) $c2;

        if $i9 != 92 goto label16;

        $i3 = i8 + 2;

        if $i3 >= i1 goto label16;

        $i4 = i8 + 1;

        c5 = $r1[$i4];

        $i6 = i8 + 2;

        c7 = $r1[$i6];

        $i10 = (int) c5;

        if $i10 != 50 goto label09;

        $i11 = (int) c7;

        lookupswitch($i11)
        {
            case 48: goto label03;
            case 50: goto label04;
            case 54: goto label05;
            case 55: goto label06;
            case 102: goto label07;
            default: goto label08;
        };

     label03:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i8 = i8 + 2;

        goto label17;

     label04:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        i8 = i8 + 2;

        goto label17;

     label05:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

        i8 = i8 + 2;

        goto label17;

     label06:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        i8 = i8 + 2;

        goto label17;

     label07:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        i8 = i8 + 2;

        goto label17;

     label08:
        goto label16;

     label09:
        $i12 = (int) c5;

        if $i12 != 51 goto label14;

        $i13 = (int) c7;

        tableswitch($i13)
        {
            case 97: goto label10;
            case 98: goto label13;
            case 99: goto label11;
            case 100: goto label13;
            case 101: goto label12;
            default: goto label13;
        };

     label10:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        i8 = i8 + 2;

        goto label17;

     label11:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        i8 = i8 + 2;

        goto label17;

     label12:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        i8 = i8 + 2;

        goto label17;

     label13:
        goto label16;

     label14:
        $i14 = (int) c5;

        if $i14 != 52 goto label15;

        $i15 = (int) c7;

        if $i15 != 48 goto label16;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        i8 = i8 + 2;

        goto label17;

     label15:
        $i16 = (int) c5;

        if $i16 != 53 goto label16;

        $i17 = (int) c7;

        if $i17 != 99 goto label16;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        i8 = i8 + 2;

        goto label17;

     label16:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label17:
        i8 = i8 + 1;

        goto label02;

     label18:
        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String resourceprep(java.lang.String) throws gnu.inet.encoding.StringprepException
    {
        java.util.Map $r1, $r3;
        int $i0, $i1;
        java.lang.String r0, $r2, r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r4 = r0;

        $r1 = <org.xmpp.packet.JID: java.util.Map stringprepCache>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 != 0 goto label2;

        $r2 = staticinvoke <gnu.inet.encoding.Stringprep: java.lang.String resourceprep(java.lang.String)>(r0);

        r4 = $r2;

        if $r2 == null goto label1;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i0 * 2;

        if $i1 <= 1023 goto label1;

        return $r2;

     label1:
        $r3 = <org.xmpp.packet.JID: java.util.Map stringprepCache>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, null);

     label2:
        return r4;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String r1, $r3, $r4, $r5;
        org.xmpp.packet.JID r0;
        java.lang.NullPointerException $r6;

        r0 := @this: org.xmpp.packet.JID;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("JID cannot be null");

        throw $r6;

     label1:
        $r2 = staticinvoke <org.xmpp.packet.JID: java.lang.String[] getParts(java.lang.String)>(r1);

        $r5 = $r2[0];

        $r4 = $r2[1];

        $r3 = $r2[2];

        specialinvoke r0.<org.xmpp.packet.JID: void init(java.lang.String,java.lang.String,java.lang.String)>($r5, $r4, $r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3;
        org.xmpp.packet.JID r0;
        java.lang.NullPointerException $r4;

        r0 := @this: org.xmpp.packet.JID;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Domain cannot be null");

        throw $r4;

     label1:
        specialinvoke r0.<org.xmpp.packet.JID: void init(java.lang.String,java.lang.String,java.lang.String)>(r2, r1, r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        java.lang.String r1, r2, r3;
        org.xmpp.packet.JID r0;
        java.lang.NullPointerException $r4;
        boolean z0;

        r0 := @this: org.xmpp.packet.JID;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Domain cannot be null");

        throw $r4;

     label1:
        if z0 == 0 goto label2;

        r0.<org.xmpp.packet.JID: java.lang.String node> = r2;

        r0.<org.xmpp.packet.JID: java.lang.String domain> = r1;

        r0.<org.xmpp.packet.JID: java.lang.String resource> = r3;

        specialinvoke r0.<org.xmpp.packet.JID: void updateCache()>();

        goto label3;

     label2:
        specialinvoke r0.<org.xmpp.packet.JID: void init(java.lang.String,java.lang.String,java.lang.String)>(r2, r1, r3);

     label3:
        return;
    }

    static java.lang.String[] getParts(java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r1, r3, r4, r5;

        r1 := @parameter0: java.lang.String;

        r0 = newarray (java.lang.String)[3];

        r3 = null;

        if r1 != null goto label01;

        return r0;

     label01:
        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("@");

        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("/");

        if $i0 <= 0 goto label02;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label02:
        $i2 = $i0 + 1;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= $i3 goto label03;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("JID with empty domain not valid");

        throw $r2;

     label03:
        if $i0 >= 0 goto label05;

        if $i1 <= 0 goto label04;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        goto label07;

     label04:
        r4 = r1;

        goto label07;

     label05:
        if $i1 <= 0 goto label06;

        $i6 = $i0 + 1;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i6, $i1);

        goto label07;

     label06:
        $i4 = $i0 + 1;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i4);

     label07:
        $i7 = $i1 + 1;

        $i8 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i7 > $i8 goto label08;

        if $i1 >= 0 goto label09;

     label08:
        r5 = null;

        goto label10;

     label09:
        $i5 = $i1 + 1;

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i5);

     label10:
        r0[0] = r3;

        r0[1] = r4;

        r0[2] = r5;

        return r0;
    }

    private void init(java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Map $r13, $r21, $r25, $r45;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r33;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r15, $r16, $r18, $r19, $r28, $r29, $r30, $r31, $r34, $r36, $r37, $r39, $r41, $r42;
        org.xmpp.packet.JID r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String r1, $r2, $r8, $r9, $r10, $r11, $r12, $r17, $r20, $r22, $r23, $r24, $r26, $r32, $r38, $r40, r43, r44;
        java.lang.IllegalArgumentException $r3, $r14, $r27, $r35;

        r0 := @this: org.xmpp.packet.JID;

        r43 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r44 := @parameter2: java.lang.String;

        if r43 == null goto label01;

        $z2 = virtualinvoke r43.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 == 0 goto label01;

        r43 = null;

     label01:
        if r44 == null goto label02;

        $z1 = virtualinvoke r44.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label02;

        r44 = null;

     label02:
        if r43 == null goto label04;

        $r21 = <org.xmpp.packet.JID: java.util.Map stringprepCache>;

        $z0 = interfaceinvoke $r21.<java.util.Map: boolean containsKey(java.lang.Object)>(r43);

        if $z0 != 0 goto label04;

        $r22 = staticinvoke <gnu.inet.encoding.Stringprep: java.lang.String nodeprep(java.lang.String)>(r43);

        r0.<org.xmpp.packet.JID: java.lang.String node> = $r22;

        $r23 = r0.<org.xmpp.packet.JID: java.lang.String node>;

        if $r23 == null goto label03;

        $r26 = r0.<org.xmpp.packet.JID: java.lang.String node>;

        $i8 = virtualinvoke $r26.<java.lang.String: int length()>();

        $i9 = $i8 * 2;

        if $i9 <= 1023 goto label03;

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Node cannot be larger than 1023 bytes. Size is ");

        $i10 = virtualinvoke r43.<java.lang.String: int length()>();

        $i11 = $i10 * 2;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes.");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r27;

     label03:
        $r25 = <org.xmpp.packet.JID: java.util.Map stringprepCache>;

        $r24 = r0.<org.xmpp.packet.JID: java.lang.String node>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, null);

        goto label05;

     label04:
        r0.<org.xmpp.packet.JID: java.lang.String node> = r43;

     label05:
        $r45 = <org.xmpp.packet.JID: java.util.Map stringprepCache>;

        $z3 = interfaceinvoke $r45.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z3 != 0 goto label07;

        $r9 = staticinvoke <gnu.inet.encoding.IDNA: java.lang.String toASCII(java.lang.String)>(r1);

        $r10 = staticinvoke <gnu.inet.encoding.Stringprep: java.lang.String nameprep(java.lang.String,boolean)>($r9, 0);

        r0.<org.xmpp.packet.JID: java.lang.String domain> = $r10;

        $r11 = r0.<org.xmpp.packet.JID: java.lang.String domain>;

        $i4 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i5 = $i4 * 2;

        if $i5 <= 1023 goto label06;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Domain cannot be larger than 1023 bytes. Size is ");

        $r17 = r0.<org.xmpp.packet.JID: java.lang.String domain>;

        $i6 = virtualinvoke $r17.<java.lang.String: int length()>();

        $i7 = $i6 * 2;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label06:
        $r13 = <org.xmpp.packet.JID: java.util.Map stringprepCache>;

        $r12 = r0.<org.xmpp.packet.JID: java.lang.String domain>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, null);

        goto label08;

     label07:
        r0.<org.xmpp.packet.JID: java.lang.String domain> = r1;

     label08:
        if r44 != null goto label09;

        r0.<org.xmpp.packet.JID: java.lang.String resource> = null;

        goto label10;

     label09:
        $r2 = staticinvoke <org.xmpp.packet.JID: java.lang.String resourceprep(java.lang.String)>(r44);

        r0.<org.xmpp.packet.JID: java.lang.String resource> = $r2;

     label10:
        if r44 == null goto label11;

        $i0 = virtualinvoke r44.<java.lang.String: int length()>();

        $i1 = $i0 * 2;

        if $i1 <= 1023 goto label11;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource cannot be larger than 1023 bytes. Size is ");

        $i2 = virtualinvoke r44.<java.lang.String: int length()>();

        $i3 = $i2 * 2;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label11:
        specialinvoke r0.<org.xmpp.packet.JID: void updateCache()>();

     label12:
        goto label16;

     label13:
        $r33 := @caughtexception;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        if r43 == null goto label14;

        $r42 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

     label14:
        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        if r44 == null goto label15;

        $r41 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

     label15:
        $r35 = new java.lang.IllegalArgumentException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal JID: ");

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r40, $r33);

        throw $r35;

     label16:
        return;

        catch java.lang.Exception from label02 to label12 with label13;
    }

    private void updateCache()
    {
        org.xmpp.packet.JID r1;
        java.lang.StringBuilder $r0, $r7, $r11;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10;

        r1 := @this: org.xmpp.packet.JID;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(40);

        $r2 = r1.<org.xmpp.packet.JID: java.lang.String node>;

        if $r2 == null goto label1;

        $r10 = r1.<org.xmpp.packet.JID: java.lang.String node>;

        $r11 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

     label1:
        $r3 = r1.<org.xmpp.packet.JID: java.lang.String domain>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        r1.<org.xmpp.packet.JID: java.lang.String cachedBareJID> = $r4;

        $r5 = r1.<org.xmpp.packet.JID: java.lang.String resource>;

        if $r5 == null goto label2;

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r8 = r1.<org.xmpp.packet.JID: java.lang.String resource>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        r1.<org.xmpp.packet.JID: java.lang.String cachedFullJID> = $r9;

        goto label3;

     label2:
        $r6 = r1.<org.xmpp.packet.JID: java.lang.String cachedBareJID>;

        r1.<org.xmpp.packet.JID: java.lang.String cachedFullJID> = $r6;

     label3:
        return;
    }

    public java.lang.String getNode()
    {
        java.lang.String $r1;
        org.xmpp.packet.JID r0;

        r0 := @this: org.xmpp.packet.JID;

        $r1 = r0.<org.xmpp.packet.JID: java.lang.String node>;

        return $r1;
    }

    public java.lang.String getDomain()
    {
        java.lang.String $r1;
        org.xmpp.packet.JID r0;

        r0 := @this: org.xmpp.packet.JID;

        $r1 = r0.<org.xmpp.packet.JID: java.lang.String domain>;

        return $r1;
    }

    public java.lang.String getResource()
    {
        java.lang.String $r1;
        org.xmpp.packet.JID r0;

        r0 := @this: org.xmpp.packet.JID;

        $r1 = r0.<org.xmpp.packet.JID: java.lang.String resource>;

        return $r1;
    }

    public java.lang.String toBareJID()
    {
        java.lang.String $r1;
        org.xmpp.packet.JID r0;

        r0 := @this: org.xmpp.packet.JID;

        $r1 = r0.<org.xmpp.packet.JID: java.lang.String cachedBareJID>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.xmpp.packet.JID r0;

        r0 := @this: org.xmpp.packet.JID;

        $r1 = r0.<org.xmpp.packet.JID: java.lang.String cachedFullJID>;

        return $r1;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.String $r1;
        org.xmpp.packet.JID r0;

        r0 := @this: org.xmpp.packet.JID;

        $r1 = virtualinvoke r0.<org.xmpp.packet.JID: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.xmpp.packet.JID r1, r2;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object r0;

        r1 := @this: org.xmpp.packet.JID;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.xmpp.packet.JID;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if r1 != r0 goto label2;

        return 1;

     label2:
        r2 = (org.xmpp.packet.JID) r0;

        $r3 = r1.<org.xmpp.packet.JID: java.lang.String node>;

        if $r3 == null goto label3;

        $r12 = r1.<org.xmpp.packet.JID: java.lang.String node>;

        $r11 = r2.<org.xmpp.packet.JID: java.lang.String node>;

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 != 0 goto label4;

        return 0;

     label3:
        $r4 = r2.<org.xmpp.packet.JID: java.lang.String node>;

        if $r4 == null goto label4;

        return 0;

     label4:
        $r6 = r1.<org.xmpp.packet.JID: java.lang.String domain>;

        $r5 = r2.<org.xmpp.packet.JID: java.lang.String domain>;

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        $r7 = r1.<org.xmpp.packet.JID: java.lang.String resource>;

        if $r7 == null goto label6;

        $r10 = r1.<org.xmpp.packet.JID: java.lang.String resource>;

        $r9 = r2.<org.xmpp.packet.JID: java.lang.String resource>;

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 != 0 goto label7;

        return 0;

     label6:
        $r8 = r2.<org.xmpp.packet.JID: java.lang.String resource>;

        if $r8 == null goto label7;

        return 0;

     label7:
        return 1;
    }

    public int compareTo(java.lang.Object)
    {
        org.xmpp.packet.JID r1, r2;
        java.lang.ClassCastException $r13;
        int $i0, i1;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r17;
        boolean $z0;
        java.lang.Object r0;
        java.lang.StringBuilder $r14, $r15, $r16;

        r2 := @this: org.xmpp.packet.JID;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.xmpp.packet.JID;

        if $z0 != 0 goto label1;

        $r13 = new java.lang.ClassCastException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ojbect not instanceof JID: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.ClassCastException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label1:
        r1 = (org.xmpp.packet.JID) r0;

        $r4 = r2.<org.xmpp.packet.JID: java.lang.String domain>;

        $r3 = r1.<org.xmpp.packet.JID: java.lang.String domain>;

        $i0 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r3);

        i1 = $i0;

        if $i0 != 0 goto label2;

        $r9 = r2.<org.xmpp.packet.JID: java.lang.String node>;

        if $r9 == null goto label2;

        $r10 = r1.<org.xmpp.packet.JID: java.lang.String node>;

        if $r10 == null goto label2;

        $r12 = r2.<org.xmpp.packet.JID: java.lang.String node>;

        $r11 = r1.<org.xmpp.packet.JID: java.lang.String node>;

        i1 = virtualinvoke $r12.<java.lang.String: int compareTo(java.lang.String)>($r11);

     label2:
        if i1 != 0 goto label3;

        $r5 = r2.<org.xmpp.packet.JID: java.lang.String resource>;

        if $r5 == null goto label3;

        $r6 = r1.<org.xmpp.packet.JID: java.lang.String resource>;

        if $r6 == null goto label3;

        $r8 = r2.<org.xmpp.packet.JID: java.lang.String resource>;

        $r7 = r1.<org.xmpp.packet.JID: java.lang.String resource>;

        i1 = virtualinvoke $r8.<java.lang.String: int compareTo(java.lang.String)>($r7);

     label3:
        return i1;
    }

    public static boolean equals(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r3;
        org.xmpp.packet.JID $r0, $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.xmpp.packet.JID;

        specialinvoke $r0.<org.xmpp.packet.JID: void <init>(java.lang.String)>(r1);

        $r2 = new org.xmpp.packet.JID;

        specialinvoke $r2.<org.xmpp.packet.JID: void <init>(java.lang.String)>(r3);

        $z0 = virtualinvoke $r0.<org.xmpp.packet.JID: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    static void <clinit>()
    {
        org.xmpp.packet.JID$Cache $r0;
        java.util.Map $r1;

        $r0 = new org.xmpp.packet.JID$Cache;

        specialinvoke $r0.<org.xmpp.packet.JID$Cache: void <init>(int)>(1000);

        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r0);

        <org.xmpp.packet.JID: java.util.Map stringprepCache> = $r1;

        return;
    }
}
