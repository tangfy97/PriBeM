public class com.hp.hpl.jena.tdb.solver.OpExecutorTDB extends com.hp.hpl.jena.sparql.engine.main.OpExecutor
{
    private static final org.slf4j.Logger log;
    public static final com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory OpExecFactoryTDB;
    private final boolean isForTDB;
    private static com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory plainFactory;

    public void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        com.hp.hpl.jena.tdb.solver.OpExecutorTDB r0;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.solver.OpExecutorTDB;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $z0 = $r2 instanceof com.hp.hpl.jena.tdb.store.GraphTDB;

        r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: boolean isForTDB> = $z0;

        return;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpDistinct, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDistinct r1;
        com.hp.hpl.jena.tdb.solver.OpExecutorTDB r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator r2, $r3;

        r0 := @this: com.hp.hpl.jena.tdb.solver.OpExecutorTDB;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpDistinct,com.hp.hpl.jena.sparql.engine.QueryIterator)>(r1, r2);

        return $r3;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpReduced, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpReduced r1;
        com.hp.hpl.jena.tdb.solver.OpExecutorTDB r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator r2, $r3;

        r0 := @this: com.hp.hpl.jena.tdb.solver.OpExecutorTDB;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpReduced;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpReduced,com.hp.hpl.jena.sparql.engine.QueryIterator)>(r1, r2);

        return $r3;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpFilter, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r24;
        com.hp.hpl.jena.graph.Node $r9;
        com.hp.hpl.jena.sparql.expr.ExprList $r11, $r17;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r7, $r12, $r14, $r18;
        com.hp.hpl.jena.tdb.solver.OpExecutorTDB r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r3, $r6, $r16;
        com.hp.hpl.jena.graph.Graph $r15;
        com.hp.hpl.jena.tdb.store.GraphTDB r21;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1;
        com.hp.hpl.jena.sparql.core.BasicPattern $r10;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r8;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r23;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r22;
        com.hp.hpl.jena.sparql.engine.QueryIterator r4, $r5, $r13, $r19, $r20;

        r0 := @this: com.hp.hpl.jena.tdb.solver.OpExecutorTDB;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r4 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $z0 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: boolean isForTDB>;

        if $z0 != 0 goto label1;

        $r20 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpFilter,com.hp.hpl.jena.sparql.engine.QueryIterator)>(r1, r4);

        return $r20;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpBGP: boolean isBGP(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        if $z1 == 0 goto label2;

        $r14 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r15 = virtualinvoke $r14.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        r21 = (com.hp.hpl.jena.tdb.store.GraphTDB) $r15;

        $r16 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        r22 = (com.hp.hpl.jena.sparql.algebra.op.OpBGP) $r16;

        $r17 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r18 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r19 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.QueryIterator executeBGP(com.hp.hpl.jena.tdb.store.GraphTDB,com.hp.hpl.jena.sparql.algebra.op.OpBGP,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r21, r22, r4, $r17, $r18);

        return $r19;

     label2:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z2 = $r3 instanceof com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        if $z2 == 0 goto label3;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        r23 = (com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern) $r6;

        $r7 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        r24 = (com.hp.hpl.jena.tdb.store.DatasetGraphTDB) $r8;

        $r9 = virtualinvoke r23.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r10 = virtualinvoke r23.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r11 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r12 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r13 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.QueryIterator optimizeExecuteQuads(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r24, r4, $r9, $r10, $r11, $r12);

        return $r13;

     label3:
        $r5 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpFilter,com.hp.hpl.jena.sparql.engine.QueryIterator)>(r1, r4);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpBGP, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r4;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r1, $r6;
        com.hp.hpl.jena.tdb.solver.OpExecutorTDB r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.tdb.store.GraphTDB r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator r5, $r7, $r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.solver.OpExecutorTDB;

        r4 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        r5 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $z0 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: boolean isForTDB>;

        if $z0 != 0 goto label1;

        $r8 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpBGP,com.hp.hpl.jena.sparql.engine.QueryIterator)>(r4, r5);

        return $r8;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        r3 = (com.hp.hpl.jena.tdb.store.GraphTDB) $r2;

        $r6 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r7 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.QueryIterator executeBGP(com.hp.hpl.jena.tdb.store.GraphTDB,com.hp.hpl.jena.sparql.algebra.op.OpBGP,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3, r4, r5, null, $r6);

        return $r7;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r5;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r3;
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r4;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r1, $r8;
        com.hp.hpl.jena.tdb.solver.OpExecutorTDB r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator r7, $r9, $r10;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.solver.OpExecutorTDB;

        r4 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        r7 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $z0 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: boolean isForTDB>;

        if $z0 != 0 goto label1;

        $r10 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern,com.hp.hpl.jena.sparql.engine.QueryIterator)>(r4, r7);

        return $r10;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        r3 = (com.hp.hpl.jena.tdb.store.DatasetGraphTDB) $r2;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r6 = virtualinvoke r4.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r8 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r9 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.QueryIterator optimizeExecuteQuads(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3, r7, $r6, $r5, null, $r8);

        return $r9;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r2;
        com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterGraph $r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r4;
        com.hp.hpl.jena.sparql.engine.QueryIterator r1;
        com.hp.hpl.jena.tdb.solver.OpExecutorTDB r3;

        r3 := @this: com.hp.hpl.jena.tdb.solver.OpExecutorTDB;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r0 = new com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterGraph;

        $r4 = r3.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterGraph: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2, $r4);

        return $r0;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator executeBGP(com.hp.hpl.jena.tdb.store.GraphTDB, com.hp.hpl.jena.sparql.algebra.op.OpBGP, com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r4, $r10;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r8;
        com.hp.hpl.jena.graph.Node $r1, $r9;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r3;
        com.hp.hpl.jena.sparql.expr.ExprList r5;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r6;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator r2, $r7, $r11;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.store.GraphTDB;

        r3 := @parameter1: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        r2 := @parameter2: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r5 := @parameter3: com.hp.hpl.jena.sparql.expr.ExprList;

        r6 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.Node getGraphName()>();

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: boolean isDefaultGraphStorage(com.hp.hpl.jena.graph.Node)>($r1);

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.Node getGraphName()>();

        $r10 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r11 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.QueryIterator optimizeExecuteQuads(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r8, r2, $r9, $r10, r5, r6);

        return $r11;

     label1:
        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r7 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.QueryIterator optimizeExecuteTriples(com.hp.hpl.jena.tdb.store.GraphTDB,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0, r2, $r4, r5, r6);

        return $r7;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator optimizeExecuteTriples(com.hp.hpl.jena.tdb.store.GraphTDB, com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation $r6;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek $r7;
        com.hp.hpl.jena.sparql.core.BasicPattern r9;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        int $i0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3, r8;
        com.hp.hpl.jena.tdb.store.GraphTDB r4;
        com.hp.hpl.jena.sparql.algebra.Op r10;
        boolean $z0;

        r4 := @parameter0: com.hp.hpl.jena.tdb.store.GraphTDB;

        r8 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r9 := @parameter2: com.hp.hpl.jena.sparql.core.BasicPattern;

        r0 := @parameter3: com.hp.hpl.jena.sparql.expr.ExprList;

        r2 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = interfaceinvoke r8.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r8;

     label1:
        $i0 = virtualinvoke r9.<com.hp.hpl.jena.sparql.core.BasicPattern: int size()>();

        if $i0 < 2 goto label2;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation getReorderTransform()>();

        if $r6 == null goto label2;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek: com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek create(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r8, r2);

        r8 = $r7;

        r9 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.core.BasicPattern reorder(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek,com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation)>(r9, $r7, $r6);

     label2:
        if r0 == null goto label3;

        r10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterPlacement: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.core.BasicPattern)>(r0, r9);

        goto label4;

     label3:
        $r1 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>(r9);

        r10 = $r1;

     label4:
        $r3 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.QueryIterator plainExecute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r10, r8, r2);

        return $r3;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator optimizeExecuteQuads(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation $r6;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r5;
        com.hp.hpl.jena.graph.Node $r1, r11;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        int $i0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        com.hp.hpl.jena.tdb.store.GraphTDB $r8;
        com.hp.hpl.jena.sparql.algebra.Op r13;
        boolean $z0;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek $r7;
        com.hp.hpl.jena.sparql.core.BasicPattern r12;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r4, $r9, r10;

        r5 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r10 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r11 := @parameter2: com.hp.hpl.jena.graph.Node;

        r12 := @parameter3: com.hp.hpl.jena.sparql.core.BasicPattern;

        r2 := @parameter4: com.hp.hpl.jena.sparql.expr.ExprList;

        r0 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = interfaceinvoke r10.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r10;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.graph.Node decideGraphNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r11, r0);

        if $r1 != null goto label2;

        $r8 = virtualinvoke r5.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.GraphTDB getEffectiveDefaultGraph()>();

        $r9 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.QueryIterator optimizeExecuteTriples(com.hp.hpl.jena.tdb.store.GraphTDB,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r8, r10, r12, r2, r0);

        return $r9;

     label2:
        $i0 = virtualinvoke r12.<com.hp.hpl.jena.sparql.core.BasicPattern: int size()>();

        if $i0 < 2 goto label3;

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation getReorderTransform()>();

        if $r6 == null goto label3;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek: com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek create(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r10, r0);

        r10 = $r7;

        r12 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.core.BasicPattern reorder(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek,com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation)>(r12, $r7, $r6);

     label3:
        if r2 == null goto label4;

        r13 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterPlacement: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>(r2, $r1, r12);

        goto label5;

     label4:
        $r3 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>($r1, r12);

        r13 = $r3;

     label5:
        $r4 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.QueryIterator plainExecute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r13, r10, r0);

        return $r4;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator plainExecute(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r0, r1;
        com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory $r2;
        com.hp.hpl.jena.sparql.algebra.Op r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator r4, $r5;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r4 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r1 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r0 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1);

        $r2 = <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory plainFactory>;

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void setExecutor(com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory)>($r2);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.QC: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3, r4, $r0);

        return $r5;
    }

    private static com.hp.hpl.jena.sparql.core.BasicPattern reorder(com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek, com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation)
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation r0;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek r1;
        com.hp.hpl.jena.sparql.core.BasicPattern $r3, r6;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r2;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r5;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc $r4;
        boolean $z0;

        r6 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek;

        r0 := @parameter2: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation;

        if r0 == null goto label2;

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>("Peek iterator is already empty");

        throw $r5;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPeek: com.hp.hpl.jena.sparql.engine.binding.Binding peek()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.sparql.core.BasicPattern substitute(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r6, $r2);

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderTransformation: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc reorderIndexes(com.hp.hpl.jena.sparql.core.BasicPattern)>($r3);

        r6 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc: com.hp.hpl.jena.sparql.core.BasicPattern reorder(com.hp.hpl.jena.sparql.core.BasicPattern)>(r6);

     label2:
        return r6;
    }

    public static com.hp.hpl.jena.graph.Node decideGraphNode(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r2;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: boolean isDefaultGraphStorage(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label2;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        return $r1;

     label2:
        return r0;
    }

    private static boolean isDefaultGraphStorage(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        return 1;

     label1:
        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r3;
        com.hp.hpl.jena.graph.Node $r8, $r9, $r13;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r1, $r4, $r11, $r14;
        com.hp.hpl.jena.tdb.solver.OpExecutorTDB r0;
        boolean $z0;
        org.apache.jena.atlas.iterator.Filter $r6;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r7;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r2;
        com.hp.hpl.jena.sparql.util.Context $r5;
        com.hp.hpl.jena.sparql.engine.QueryIterator r10, $r12, $r15;

        r0 := @this: com.hp.hpl.jena.tdb.solver.OpExecutorTDB;

        r7 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        r10 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r1 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        r3 = (com.hp.hpl.jena.tdb.store.DatasetGraphTDB) $r2;

        $r4 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r6 = staticinvoke <com.hp.hpl.jena.tdb.solver.QC2: org.apache.jena.atlas.iterator.Filter getFilter(com.hp.hpl.jena.sparql.util.Context)>($r5);

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r8);

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r14 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r15 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: com.hp.hpl.jena.sparql.engine.QueryIterator graphNames(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.QueryIterator,org.apache.jena.atlas.iterator.Filter,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3, $r13, r10, $r6, $r14);

        return $r15;

     label1:
        $r9 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r11 = r0.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r12 = staticinvoke <com.hp.hpl.jena.tdb.solver.SolverLib: com.hp.hpl.jena.sparql.engine.QueryIterator testForGraphName(com.hp.hpl.jena.tdb.store.DatasetGraphTDB,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.QueryIterator,org.apache.jena.atlas.iterator.Filter,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r3, $r9, r10, $r6, $r11);

        return $r12;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.tdb.solver.OpExecutorTDB$1 $r1;
        com.hp.hpl.jena.tdb.solver.OpExecutorTDB$OpExecutorPlainFactoryTDB $r2;
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/solver/OpExecutorTDB;");

        <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: org.slf4j.Logger log> = $r0;

        $r1 = new com.hp.hpl.jena.tdb.solver.OpExecutorTDB$1;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB$1: void <init>()>();

        <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory OpExecFactoryTDB> = $r1;

        $r2 = new com.hp.hpl.jena.tdb.solver.OpExecutorTDB$OpExecutorPlainFactoryTDB;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.solver.OpExecutorTDB$OpExecutorPlainFactoryTDB: void <init>(com.hp.hpl.jena.tdb.solver.OpExecutorTDB$1)>(null);

        <com.hp.hpl.jena.tdb.solver.OpExecutorTDB: com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory plainFactory> = $r2;

        return;
    }
}
