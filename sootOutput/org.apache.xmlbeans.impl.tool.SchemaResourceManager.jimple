public class org.apache.xmlbeans.impl.tool.SchemaResourceManager extends org.apache.xmlbeans.impl.tool.BaseSchemaResourceManager
{
    private java.io.File _directory;

    public static void printUsage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Maintains \"xsdownload.xml\", an index of locally downloaded .xsd files");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("usage: sdownload [-dir directory] [-refresh] [-recurse] [-sync] [url/file...]");

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("URLs that are specified are downloaded if they aren\'t already cached.");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("In addition:");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("  -dir specifies the directory for the xsdownload.xml file (default .).");

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("  -sync synchronizes the index to any local .xsd files in the tree.");

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("  -recurse recursively downloads imported and included .xsd files.");

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("  -refresh redownloads all indexed .xsd files.");

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("If no files or URLs are specified, all indexed files are relevant.");

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.tool.SchemaResourceManager $r15;
        java.lang.Object[] $r20, $r25, $r28;
        java.util.ArrayList $r16, $r17;
        java.lang.StringBuffer $r32, $r34, $r35, $r41, $r43, $r45;
        java.lang.String $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r13, $r36, $r37, $r39, $r40, $r44, $r46, $r48, $r50, r52;
        java.io.File $r14, $r38, r53;
        java.lang.IllegalStateException $r47;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6, $z7, $z8;
        org.apache.xmlbeans.impl.tool.CommandLine $r2;
        java.util.List $r23;
        java.lang.String[] $r6, $r9, $r24, $r26, $r30, r51, r54;
        java.util.HashSet $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.io.PrintStream $r33, $r42, $r49;
        java.util.Iterator $r18;
        java.lang.Object $r31;
        java.io.File[] $r19, $r21, $r22, $r27, $r29, r55;

        r51 := @parameter0: java.lang.String[];

        $i0 = lengthof r51;

        if $i0 != 0 goto label01;

        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label01:
        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("h");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("help");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("usage");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("license");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("version");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("sync");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("refresh");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("recurse");

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("dir");

        $r2 = new org.apache.xmlbeans.impl.tool.CommandLine;

        specialinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: void <init>(java.lang.String[],java.util.Collection,java.util.Collection)>(r51, $r0, $r1);

        $r3 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("h");

        if $r3 != null goto label02;

        $r4 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("help");

        if $r4 != null goto label02;

        $r5 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("usage");

        if $r5 == null goto label03;

     label02:
        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label03:
        $r6 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] getBadOpts()>();

        $i1 = lengthof $r6;

        if $i1 <= 0 goto label06;

        i7 = 0;

     label04:
        $i6 = lengthof $r6;

        if i7 >= $i6 goto label05;

        $r42 = <java.lang.System: java.io.PrintStream out>;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized option: ");

        $r44 = $r6[i7];

        $r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.String)>($r46);

        i7 = i7 + 1;

        goto label04;

     label05:
        staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label06:
        $r7 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("license");

        if $r7 == null goto label07;

        staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: void printLicense()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label07:
        $r8 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("version");

        if $r8 == null goto label08;

        staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: void printVersion()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label08:
        $r9 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] args()>();

        $r10 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("sync");

        if $r10 == null goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        z6 = $z5;

        $r11 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("refresh");

        if $r11 == null goto label11;

        $z7 = 1;

        goto label12;

     label11:
        $z7 = 0;

     label12:
        z0 = $z7;

        $r12 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("recurse");

        if $r12 == null goto label13;

        $z8 = 1;

        goto label14;

     label13:
        $z8 = 0;

     label14:
        z1 = $z8;

        $r13 = virtualinvoke $r2.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("dir");

        r52 = $r13;

        if $r13 != null goto label15;

        r52 = ".";

     label15:
        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>(r52);

     label16:
        $r15 = new org.apache.xmlbeans.impl.tool.SchemaResourceManager;

        specialinvoke $r15.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: void <init>(java.io.File)>($r14);

     label17:
        goto label21;

     label18:
        $r47 := @caughtexception;

        $r48 = virtualinvoke $r47.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        if $r48 == null goto label19;

        $r49 = <java.lang.System: java.io.PrintStream out>;

        $r50 = virtualinvoke $r47.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>($r50);

        goto label20;

     label19:
        virtualinvoke $r47.<java.lang.IllegalStateException: void printStackTrace()>();

     label20:
        staticinvoke <java.lang.System: void exit(int)>(1);

        return;

     label21:
        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        i8 = 0;

     label22:
        $i2 = lengthof $r9;

        if i8 >= $i2 goto label25;

        $r37 = $r9[i8];

        $z4 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: boolean looksLikeURL(java.lang.String)>($r37);

        if $z4 == 0 goto label23;

        $r40 = $r9[i8];

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r40);

        goto label24;

     label23:
        $r38 = new java.io.File;

        $r39 = $r9[i8];

        specialinvoke $r38.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, $r39);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r38);

     label24:
        i8 = i8 + 1;

        goto label22;

     label25:
        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label26:
        $z2 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label28;

        $r31 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r53 = (java.io.File) $r31;

        $z3 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: boolean isInDirectory(java.io.File,java.io.File)>(r53, $r14);

        if $z3 != 0 goto label27;

        $r33 = <java.lang.System: java.io.PrintStream err>;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File not within directory: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r53);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r36);

        interfaceinvoke $r18.<java.util.Iterator: void remove()>();

     label27:
        goto label26;

     label28:
        $r19 = newarray (java.io.File)[0];

        $r20 = interfaceinvoke $r17.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        $r21 = (java.io.File[]) $r20;

        $r22 = (java.io.File[]) $r21;

        $r23 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.util.List collectXSDFiles(java.io.File[])>($r22);

        $r24 = newarray (java.lang.String)[0];

        $r25 = interfaceinvoke $r16.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24);

        $r26 = (java.lang.String[]) $r25;

        r54 = (java.lang.String[]) $r26;

        $r27 = newarray (java.io.File)[0];

        $r28 = interfaceinvoke $r23.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r27);

        $r29 = (java.io.File[]) $r28;

        r55 = (java.io.File[]) $r29;

        $r30 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.lang.String[] relativeFilenames(java.io.File[],java.io.File)>(r55, $r14);

        $i4 = lengthof r54;

        $i3 = lengthof $r30;

        $i5 = $i4 + $i3;

        if $i5 <= 0 goto label29;

        virtualinvoke $r15.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: void process(java.lang.String[],java.lang.String[],boolean,boolean,boolean)>(r54, $r30, z6, z0, z1);

        goto label30;

     label29:
        virtualinvoke $r15.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: void processAll(boolean,boolean,boolean)>(z6, z0, z1);

     label30:
        virtualinvoke $r15.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: void writeCache()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

        catch java.lang.IllegalStateException from label16 to label17 with label18;
    }

    private static boolean looksLikeURL(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("https:");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("ftp:");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    private static java.lang.String relativeFilename(java.io.File, java.io.File)
    {
        java.io.File r0, r1, $r3;
        java.lang.StringBuffer $r2, $r5, $r6, $r8;
        java.lang.String $r4, $r7, $r9;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.io.File: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        return ".";

     label2:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.lang.String relativeFilename(java.io.File,java.io.File)>($r3, r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r7 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    private static java.lang.String[] relativeFilenames(java.io.File[], java.io.File)
    {
        java.lang.String[] r1;
        java.io.File r2, $r3;
        int $i0, $i1, i2;
        java.lang.String $r4;
        java.io.File[] r0;

        r0 := @parameter0: java.io.File[];

        r2 := @parameter1: java.io.File;

        $i0 = lengthof r0;

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r3 = r0[i2];

        $r4 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.lang.String relativeFilename(java.io.File,java.io.File)>($r3, r2);

        r1[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static boolean isInDirectory(java.io.File, java.io.File)
    {
        java.io.File r0, r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<java.io.File: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        $z1 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: boolean isInDirectory(java.io.File,java.io.File)>($r2, r1);

        return $z1;
    }

    public void <init>(java.io.File)
    {
        org.apache.xmlbeans.impl.tool.SchemaResourceManager r0;
        java.io.File r1;

        r0 := @this: org.apache.xmlbeans.impl.tool.SchemaResourceManager;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.xmlbeans.impl.tool.BaseSchemaResourceManager: void <init>()>();

        r0.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.io.File _directory> = r1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: void init()>();

        return;
    }

    protected void warning(java.lang.String)
    {
        java.io.PrintStream $r1;
        org.apache.xmlbeans.impl.tool.SchemaResourceManager r2;
        java.lang.String r0;

        r2 := @this: org.apache.xmlbeans.impl.tool.SchemaResourceManager;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        return;
    }

    protected boolean fileExists(java.lang.String)
    {
        org.apache.xmlbeans.impl.tool.SchemaResourceManager r1;
        java.lang.String r2;
        java.io.File $r0, $r3;
        boolean $z0;

        r1 := @this: org.apache.xmlbeans.impl.tool.SchemaResourceManager;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        $r3 = r1.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.io.File _directory>;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r2);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        return $z0;
    }

    protected java.io.InputStream inputStreamForFile(java.lang.String) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.tool.SchemaResourceManager r2;
        java.io.FileInputStream $r0;
        java.lang.String r3;
        java.io.File $r1, $r4;

        r2 := @this: org.apache.xmlbeans.impl.tool.SchemaResourceManager;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.io.FileInputStream;

        $r1 = new java.io.File;

        $r4 = r2.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.io.File _directory>;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r3);

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        return $r0;
    }

    protected void writeInputStreamToFile(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.FileOutputStream $r5;
        java.io.File $r0, $r3, $r4;
        org.apache.xmlbeans.impl.tool.SchemaResourceManager r1;
        java.lang.String r2;
        boolean $z0;
        java.io.InputStream r6;

        r1 := @this: org.apache.xmlbeans.impl.tool.SchemaResourceManager;

        r6 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.io.File;

        $r3 = r1.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.io.File _directory>;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r2);

        $r4 = virtualinvoke $r0.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

     label1:
        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        staticinvoke <org.apache.xmlbeans.impl.common.IOUtil: void copyCompletely(java.io.InputStream,java.io.OutputStream)>(r6, $r5);

        return;
    }

    protected void deleteFile(java.lang.String)
    {
        org.apache.xmlbeans.impl.tool.SchemaResourceManager r1;
        java.lang.String r2;
        java.io.File $r0, $r3;

        r1 := @this: org.apache.xmlbeans.impl.tool.SchemaResourceManager;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        $r3 = r1.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.io.File _directory>;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r2);

        virtualinvoke $r0.<java.io.File: boolean delete()>();

        return;
    }

    protected java.lang.String[] getAllXSDFilenames()
    {
        java.lang.Object[] $r5;
        java.lang.String[] $r9;
        java.io.File $r2, $r8;
        java.util.List $r3;
        org.apache.xmlbeans.impl.tool.SchemaResourceManager r1;
        java.io.File[] $r0, $r4, $r6, r7;

        r1 := @this: org.apache.xmlbeans.impl.tool.SchemaResourceManager;

        $r0 = newarray (java.io.File)[1];

        $r2 = r1.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.io.File _directory>;

        $r0[0] = $r2;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.util.List collectXSDFiles(java.io.File[])>($r0);

        $r4 = newarray (java.io.File)[0];

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.io.File[]) $r5;

        r7 = (java.io.File[]) $r6;

        $r8 = r1.<org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.io.File _directory>;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.lang.String[] relativeFilenames(java.io.File[],java.io.File)>(r7, $r8);

        return $r9;
    }

    private static java.util.List collectXSDFiles(java.io.File[])
    {
        java.io.File r2;
        java.util.ArrayList $r0;
        java.util.List $r5;
        int $i0, i1;
        org.apache.xmlbeans.impl.tool.SchemaResourceManager$1 $r3;
        java.io.File[] r1, $r4;
        boolean $z0;

        r1 := @parameter0: java.io.File[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label4;

        r2 = r1[i1];

        $z0 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label3;

     label2:
        $r3 = new org.apache.xmlbeans.impl.tool.SchemaResourceManager$1;

        specialinvoke $r3.<org.apache.xmlbeans.impl.tool.SchemaResourceManager$1: void <init>()>();

        $r4 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r3);

        $r5 = staticinvoke <org.apache.xmlbeans.impl.tool.SchemaResourceManager: java.util.List collectXSDFiles(java.io.File[])>($r4);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r5);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return $r0;
    }
}
