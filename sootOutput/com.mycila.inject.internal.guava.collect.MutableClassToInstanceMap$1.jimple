final class com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1 extends java.lang.Object implements com.mycila.inject.internal.guava.collect.MapConstraint
{

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void checkKeyValue(java.lang.Class, java.lang.Object)
    {
        java.lang.Class r0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1 r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap: java.lang.Object access$000(java.lang.Class,java.lang.Object)>(r0, r1);

        return;
    }

    public volatile void checkKeyValue(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1 r0;
        java.lang.Object r1, r2;
        java.lang.Class $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Class) r1;

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MutableClassToInstanceMap$1: void checkKeyValue(java.lang.Class,java.lang.Object)>($r3, r2);

        return;
    }
}
