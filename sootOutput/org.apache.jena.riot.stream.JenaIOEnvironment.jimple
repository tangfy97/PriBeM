public class org.apache.jena.riot.stream.JenaIOEnvironment extends java.lang.Object
{
    static org.apache.jena.riot.stream.LocationMapper theMapper;
    private static final java.lang.Object lock;
    static org.slf4j.Logger log;
    public static final java.lang.String DEFAULT_PATH;
    public static final java.lang.String GlobalMapperSystemProperty1;
    public static final java.lang.String GlobalMapperSystemProperty2;
    static java.lang.String s_globalMapperPath;

    public void <init>()
    {
        org.apache.jena.riot.stream.JenaIOEnvironment r0;

        r0 := @this: org.apache.jena.riot.stream.JenaIOEnvironment;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.jena.riot.stream.LocationMapper getLocationMapper()
    {
        java.lang.Throwable $r6;
        org.apache.jena.riot.stream.LocationMapper $r1, $r3, $r4, $r5, $r7;
        java.lang.Object $r0;
        java.lang.String $r2;

        $r0 = <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.Object lock>;

        entermonitor $r0;

     label1:
        $r1 = <org.apache.jena.riot.stream.JenaIOEnvironment: org.apache.jena.riot.stream.LocationMapper theMapper>;

        if $r1 != null goto label3;

        $r2 = staticinvoke <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String getGlobalConfigPath()>();

        if $r2 == null goto label2;

        $r5 = staticinvoke <org.apache.jena.riot.stream.JenaIOEnvironment: org.apache.jena.riot.stream.LocationMapper createLocationMapper(java.lang.String)>($r2);

        <org.apache.jena.riot.stream.JenaIOEnvironment: org.apache.jena.riot.stream.LocationMapper theMapper> = $r5;

     label2:
        $r3 = <org.apache.jena.riot.stream.JenaIOEnvironment: org.apache.jena.riot.stream.LocationMapper theMapper>;

        if $r3 != null goto label3;

        $r4 = new org.apache.jena.riot.stream.LocationMapper;

        specialinvoke $r4.<org.apache.jena.riot.stream.LocationMapper: void <init>()>();

        <org.apache.jena.riot.stream.JenaIOEnvironment: org.apache.jena.riot.stream.LocationMapper theMapper> = $r4;

     label3:
        $r7 = <org.apache.jena.riot.stream.JenaIOEnvironment: org.apache.jena.riot.stream.LocationMapper theMapper>;

        exitmonitor $r0;

     label4:
        return $r7;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r0;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static java.lang.String getGlobalConfigPath()
    {
        java.lang.String $r0, $r1, $r2, $r3, $r4, $r5;

        $r0 = <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String s_globalMapperPath>;

        if $r0 != null goto label1;

        $r5 = staticinvoke <com.hp.hpl.jena.JenaRuntime: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("http://jena.hpl.hp.com/2004/08/LocationMap", null);

        <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String s_globalMapperPath> = $r5;

     label1:
        $r1 = <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String s_globalMapperPath>;

        if $r1 != null goto label2;

        $r4 = staticinvoke <com.hp.hpl.jena.JenaRuntime: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("LocationMap", null);

        <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String s_globalMapperPath> = $r4;

     label2:
        $r2 = <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String s_globalMapperPath>;

        if $r2 != null goto label3;

        <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String s_globalMapperPath> = "location-mapping.ttl;location-mapping.rdf;location-mapping.n3;etc/location-mapping.rdf;etc/location-mapping.n3;etc/location-mapping.ttl";

     label3:
        $r3 = <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String s_globalMapperPath>;

        return $r3;
    }

    public static void setGlobalLocationMapper(org.apache.jena.riot.stream.LocationMapper)
    {
        org.apache.jena.riot.stream.LocationMapper r0;

        r0 := @parameter0: org.apache.jena.riot.stream.LocationMapper;

        <org.apache.jena.riot.stream.JenaIOEnvironment: org.apache.jena.riot.stream.LocationMapper theMapper> = r0;

        return;
    }

    public static org.apache.jena.riot.stream.LocationMapper makeGlobal()
    {
        org.apache.jena.riot.stream.LocationMapper $r0, $r3;
        java.lang.String $r1, $r2;

        $r0 = new org.apache.jena.riot.stream.LocationMapper;

        specialinvoke $r0.<org.apache.jena.riot.stream.LocationMapper: void <init>()>();

        $r1 = staticinvoke <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String getGlobalConfigPath()>();

        if $r1 == null goto label1;

        $r2 = staticinvoke <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String getGlobalConfigPath()>();

        $r3 = staticinvoke <org.apache.jena.riot.stream.JenaIOEnvironment: org.apache.jena.riot.stream.LocationMapper createLocationMapper(java.lang.String)>($r2);

        virtualinvoke $r0.<org.apache.jena.riot.stream.LocationMapper: void copyFrom(org.apache.jena.riot.stream.LocationMapper)>($r3);

     label1:
        return $r0;
    }

    public static org.apache.jena.riot.stream.LocationMapper processConfig(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r2, $r6, $r7, $r8, $r11, $r21, $r24;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r14, $r16, $r17, $r18, $r19, $r27, $r29, $r30, $r31, $r32, $r35, $r37, $r39, $r42, $r44, $r46;
        org.apache.jena.riot.stream.LocationMapper $r0;
        com.hp.hpl.jena.shared.JenaException $r34, $r41;
        java.lang.String $r10, $r13, $r20, $r23, $r26, $r33, $r38, $r40, $r45, $r47;
        org.slf4j.Logger $r15, $r28, $r36, $r43;
        com.hp.hpl.jena.rdf.model.Statement $r4, $r9, $r12, $r22, $r25;
        com.hp.hpl.jena.rdf.model.Resource $r5;
        com.hp.hpl.jena.rdf.model.Model r1;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r0 = new org.apache.jena.riot.stream.LocationMapper;

        specialinvoke $r0.<org.apache.jena.riot.stream.LocationMapper: void <init>()>();

        $r2 = <com.hp.hpl.jena.vocabulary.LocationMappingVocab: com.hp.hpl.jena.rdf.model.Property mapping>;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, $r2, null);

     label01:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r6 = <com.hp.hpl.jena.vocabulary.LocationMappingVocab: com.hp.hpl.jena.rdf.model.Property name>;

        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r6);

        if $z1 == 0 goto label05;

     label02:
        $r21 = <com.hp.hpl.jena.vocabulary.LocationMappingVocab: com.hp.hpl.jena.rdf.model.Property name>;

        $r22 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r21);

        $r23 = interfaceinvoke $r22.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

        $r24 = <com.hp.hpl.jena.vocabulary.LocationMappingVocab: com.hp.hpl.jena.rdf.model.Property altName>;

        $r25 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r24);

        $r26 = interfaceinvoke $r25.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

        virtualinvoke $r0.<org.apache.jena.riot.stream.LocationMapper: void addAltEntry(java.lang.String,java.lang.String)>($r23, $r26);

        $r28 = <org.apache.jena.riot.stream.JenaIOEnvironment: org.slf4j.Logger log>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mapping: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<org.slf4j.Logger: void debug(java.lang.String)>($r33);

     label03:
        goto label05;

     label04:
        $r41 := @caughtexception;

        $r43 = <org.apache.jena.riot.stream.JenaIOEnvironment: org.slf4j.Logger log>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error processing name mapping: ");

        $r45 = virtualinvoke $r41.<com.hp.hpl.jena.shared.JenaException: java.lang.String getMessage()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r43.<org.slf4j.Logger: void warn(java.lang.String)>($r47);

        throw $r41;

     label05:
        $r7 = <com.hp.hpl.jena.vocabulary.LocationMappingVocab: com.hp.hpl.jena.rdf.model.Property prefix>;

        $z2 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: boolean hasProperty(com.hp.hpl.jena.rdf.model.Property)>($r7);

        if $z2 == 0 goto label09;

     label06:
        $r8 = <com.hp.hpl.jena.vocabulary.LocationMappingVocab: com.hp.hpl.jena.rdf.model.Property prefix>;

        $r9 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r8);

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

        $r11 = <com.hp.hpl.jena.vocabulary.LocationMappingVocab: com.hp.hpl.jena.rdf.model.Property altPrefix>;

        $r12 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r11);

        $r13 = interfaceinvoke $r12.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

        virtualinvoke $r0.<org.apache.jena.riot.stream.LocationMapper: void addAltPrefix(java.lang.String,java.lang.String)>($r10, $r13);

        $r15 = <org.apache.jena.riot.stream.JenaIOEnvironment: org.slf4j.Logger log>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prefix mapping: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r20);

     label07:
        goto label09;

     label08:
        $r34 := @caughtexception;

        $r36 = <org.apache.jena.riot.stream.JenaIOEnvironment: org.slf4j.Logger log>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error processing prefix mapping: ");

        $r38 = virtualinvoke $r34.<com.hp.hpl.jena.shared.JenaException: java.lang.String getMessage()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r36.<org.slf4j.Logger: void warn(java.lang.String)>($r40);

        throw $r34;

     label09:
        goto label01;

     label10:
        return $r0;

        catch com.hp.hpl.jena.shared.JenaException from label02 to label03 with label04;
        catch com.hp.hpl.jena.shared.JenaException from label06 to label07 with label08;
    }

    public static org.apache.jena.riot.stream.LocationMapper createLocationMapper(java.lang.String)
    {
        org.apache.jena.riot.stream.LocationMapper $r10, $r25;
        com.hp.hpl.jena.shared.JenaException $r18;
        java.util.StringTokenizer $r7;
        int $i0, $i1;
        java.lang.String r0, $r8, $r15, $r16, $r22, $r24, r26;
        boolean $z0;
        org.apache.jena.atlas.web.TypedInputStream $r17, r27;
        org.slf4j.Logger $r1, $r12, $r19;
        org.apache.jena.riot.stream.LocatorClassLoader $r4;
        org.apache.jena.riot.stream.StreamManager $r2;
        com.hp.hpl.jena.rdf.model.Model $r9;
        org.apache.jena.riot.stream.LocatorFile $r3;
        java.lang.Class $r5;
        java.lang.StringBuilder $r11, $r13, $r14, $r20, $r21, $r23;
        java.lang.ClassLoader $r6;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        $r1 = <org.apache.jena.riot.stream.JenaIOEnvironment: org.slf4j.Logger log>;

        interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String)>("Null configuration");

        return null;

     label02:
        $r2 = new org.apache.jena.riot.stream.StreamManager;

        specialinvoke $r2.<org.apache.jena.riot.stream.StreamManager: void <init>()>();

        $r3 = new org.apache.jena.riot.stream.LocatorFile;

        specialinvoke $r3.<org.apache.jena.riot.stream.LocatorFile: void <init>()>();

        virtualinvoke $r2.<org.apache.jena.riot.stream.StreamManager: void addLocator(org.apache.jena.riot.stream.Locator)>($r3);

        $r4 = new org.apache.jena.riot.stream.LocatorClassLoader;

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r4.<org.apache.jena.riot.stream.LocatorClassLoader: void <init>(java.lang.ClassLoader)>($r6);

        virtualinvoke $r2.<org.apache.jena.riot.stream.StreamManager: void addLocator(org.apache.jena.riot.stream.Locator)>($r4);

     label03:
        r26 = null;

        r27 = null;

        $r7 = new java.util.StringTokenizer;

        specialinvoke $r7.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, ";");

     label04:
        $z0 = virtualinvoke $r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label07;

        $r16 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        if $r16 == null goto label07;

        $i1 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i1 != 0 goto label05;

        goto label07;

     label05:
        $r17 = virtualinvoke $r2.<org.apache.jena.riot.stream.StreamManager: org.apache.jena.atlas.web.TypedInputStream openNoMapOrNull(java.lang.String)>($r16);

        r27 = $r17;

        if $r17 == null goto label06;

        r26 = $r16;

        goto label07;

     label06:
        goto label04;

     label07:
        if r27 != null goto label09;

        $r12 = <org.apache.jena.riot.stream.JenaIOEnvironment: org.slf4j.Logger log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find configuration: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

     label08:
        return null;

     label09:
        $r8 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String guessLang(java.lang.String)>(r26);

        $r9 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model read(java.io.InputStream,java.lang.String,java.lang.String)>(r27, r26, $r8);

        $r10 = staticinvoke <org.apache.jena.riot.stream.JenaIOEnvironment: org.apache.jena.riot.stream.LocationMapper processConfig(com.hp.hpl.jena.rdf.model.Model)>($r9);

     label10:
        return $r10;

     label11:
        $r18 := @caughtexception;

        $r19 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jena/riot/stream/LocationMapper;");

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in configuration file: ");

        $r22 = virtualinvoke $r18.<com.hp.hpl.jena.shared.JenaException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void warn(java.lang.String)>($r24);

        $r25 = new org.apache.jena.riot.stream.LocationMapper;

        specialinvoke $r25.<org.apache.jena.riot.stream.LocationMapper: void <init>()>();

        return $r25;

        catch com.hp.hpl.jena.shared.JenaException from label03 to label08 with label11;
        catch com.hp.hpl.jena.shared.JenaException from label09 to label10 with label11;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        org.slf4j.Logger $r1;

        <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String GlobalMapperSystemProperty2> = "LocationMap";

        <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String GlobalMapperSystemProperty1> = "http://jena.hpl.hp.com/2004/08/LocationMap";

        <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String DEFAULT_PATH> = "location-mapping.ttl;location-mapping.rdf;location-mapping.n3;etc/location-mapping.rdf;etc/location-mapping.n3;etc/location-mapping.ttl";

        <org.apache.jena.riot.stream.JenaIOEnvironment: org.apache.jena.riot.stream.LocationMapper theMapper> = null;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.Object lock> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jena/riot/stream/JenaIOEnvironment;");

        <org.apache.jena.riot.stream.JenaIOEnvironment: org.slf4j.Logger log> = $r1;

        <org.apache.jena.riot.stream.JenaIOEnvironment: java.lang.String s_globalMapperPath> = null;

        return;
    }
}
