class org.apache.batik.ext.awt.image.codec.png.PNGChunk extends java.lang.Object
{
    int length;
    int type;
    byte[] data;
    int crc;
    final java.lang.String typeString;

    void <init>(int, int, byte[], int)
    {
        byte[] r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6, $r7;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i9, $i10, $i12;
        java.lang.String $r8;
        char $c5, $c8, $c11, $c13;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int length> = i0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int type> = i1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data> = r1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int crc> = i2;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $i3 = i1 >>> 24;

        $i4 = $i3 & 255;

        $c5 = (char) $i4;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        $i6 = i1 >>> 16;

        $i7 = $i6 & 255;

        $c8 = (char) $i7;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8);

        $i9 = i1 >>> 8;

        $i10 = $i9 & 255;

        $c11 = (char) $i10;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c11);

        $i12 = i1 & 255;

        $c13 = (char) $i12;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c13);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: java.lang.String typeString> = $r8;

        return;
    }

    public int getLength()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int length>;

        return $i0;
    }

    public int getType()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: int type>;

        return $i0;
    }

    public java.lang.String getTypeString()
    {
        java.lang.String $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: java.lang.String typeString>;

        return $r1;
    }

    public byte[] getData()
    {
        byte[] $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        return $r1;
    }

    public byte getByte(int)
    {
        byte[] $r1;
        byte $b1;
        int i0;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $b1 = $r1[i0];

        return $b1;
    }

    public int getInt1(int)
    {
        byte[] $r1;
        short $s2, $s3;
        byte $b1;
        int i0, $i4;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $b1 = $r1[i0];

        $s3 = (short) $b1;

        $s2 = $s3 & 255;

        $i4 = (int) $s2;

        return $i4;
    }

    public int getInt2(int)
    {
        byte[] $r1, $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;
        short $s2, $s5, $s8, $s10;
        byte $b1, $b4;
        int i0, $i3, $i6, $i7, $i9, $i11;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $b1 = $r1[i0];

        $s8 = (short) $b1;

        $s2 = $s8 & 255;

        $i9 = (int) $s2;

        $i6 = $i9 << 8;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $i3 = i0 + 1;

        $b4 = $r2[$i3];

        $s10 = (short) $b4;

        $s5 = $s10 & 255;

        $i11 = (int) $s5;

        $i7 = $i6 | $i11;

        return $i7;
    }

    public int getInt4(int)
    {
        byte[] $r1, $r2, $r3, $r4;
        short $s2, $s5, $s10, $s15, $s18, $s20, $s22, $s24;
        byte $b1, $b4, $b9, $b14;
        int i0, $i3, $i6, $i7, $i8, $i11, $i12, $i13, $i16, $i17, $i19, $i21, $i23, $i25;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $b1 = $r1[i0];

        $s18 = (short) $b1;

        $s2 = $s18 & 255;

        $i19 = (int) $s2;

        $i7 = $i19 << 24;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $i3 = i0 + 1;

        $b4 = $r2[$i3];

        $s20 = (short) $b4;

        $s5 = $s20 & 255;

        $i21 = (int) $s5;

        $i6 = $i21 << 16;

        $i12 = $i7 | $i6;

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $i8 = i0 + 2;

        $b9 = $r3[$i8];

        $s22 = (short) $b9;

        $s10 = $s22 & 255;

        $i23 = (int) $s10;

        $i11 = $i23 << 8;

        $i16 = $i12 | $i11;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $i13 = i0 + 3;

        $b14 = $r4[$i13];

        $s24 = (short) $b14;

        $s15 = $s24 & 255;

        $i25 = (int) $s15;

        $i17 = $i16 | $i25;

        return $i17;
    }

    public java.lang.String getString4(int)
    {
        byte[] $r3, $r5, $r7, $r9;
        byte $b1, $b4, $b7, $b10;
        java.lang.StringBuffer $r0, $r1, $r4, $r6, $r8, $r10;
        int i0, $i3, $i6, $i9;
        java.lang.String $r11;
        char $c2, $c5, $c8, $c11;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r2;

        r2 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r3 = r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $b1 = $r3[i0];

        $c2 = (char) $b1;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r5 = r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $i3 = i0 + 1;

        $b4 = $r5[$i3];

        $c5 = (char) $b4;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        $r7 = r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $i6 = i0 + 2;

        $b7 = $r7[$i6];

        $c8 = (char) $b7;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8);

        $r9 = r2.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: byte[] data>;

        $i9 = i0 + 3;

        $b10 = $r9[$i9];

        $c11 = (char) $b10;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public boolean isType(java.lang.String)
    {
        java.lang.String r1, $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGChunk r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGChunk;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGChunk: java.lang.String typeString>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }
}
