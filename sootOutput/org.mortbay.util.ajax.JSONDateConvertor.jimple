public class org.mortbay.util.ajax.JSONDateConvertor extends java.lang.Object implements org.mortbay.util.ajax.JSON$Convertor
{
    private boolean _fromJSON;
    org.mortbay.util.DateCache _dateCache;
    java.text.SimpleDateFormat _format;

    public void <init>()
    {
        org.mortbay.util.ajax.JSONDateConvertor r0;

        r0 := @this: org.mortbay.util.ajax.JSONDateConvertor;

        specialinvoke r0.<org.mortbay.util.ajax.JSONDateConvertor: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        java.util.TimeZone $r2;
        java.lang.String $r1;
        org.mortbay.util.ajax.JSONDateConvertor r0;
        boolean z0;

        r0 := @this: org.mortbay.util.ajax.JSONDateConvertor;

        z0 := @parameter0: boolean;

        $r1 = <org.mortbay.util.DateCache: java.lang.String DEFAULT_FORMAT>;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        specialinvoke r0.<org.mortbay.util.ajax.JSONDateConvertor: void <init>(java.lang.String,java.util.TimeZone,boolean)>($r1, $r2, z0);

        return;
    }

    public void <init>(java.lang.String, java.util.TimeZone, boolean)
    {
        java.util.TimeZone r3;
        java.text.SimpleDateFormat $r5, $r6;
        java.lang.String r2;
        org.mortbay.util.ajax.JSONDateConvertor r0;
        org.mortbay.util.DateCache $r1, $r4;
        boolean z0;

        r0 := @this: org.mortbay.util.ajax.JSONDateConvertor;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.TimeZone;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.mortbay.util.DateCache;

        specialinvoke $r1.<org.mortbay.util.DateCache: void <init>(java.lang.String)>(r2);

        r0.<org.mortbay.util.ajax.JSONDateConvertor: org.mortbay.util.DateCache _dateCache> = $r1;

        $r4 = r0.<org.mortbay.util.ajax.JSONDateConvertor: org.mortbay.util.DateCache _dateCache>;

        virtualinvoke $r4.<org.mortbay.util.DateCache: void setTimeZone(java.util.TimeZone)>(r3);

        r0.<org.mortbay.util.ajax.JSONDateConvertor: boolean _fromJSON> = z0;

        $r5 = new java.text.SimpleDateFormat;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r2);

        r0.<org.mortbay.util.ajax.JSONDateConvertor: java.text.SimpleDateFormat _format> = $r5;

        $r6 = r0.<org.mortbay.util.ajax.JSONDateConvertor: java.text.SimpleDateFormat _format>;

        virtualinvoke $r6.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(r3);

        return;
    }

    public void <init>(java.lang.String, java.util.TimeZone, boolean, java.util.Locale)
    {
        java.util.TimeZone r4;
        java.text.SimpleDateFormat $r6, $r8;
        java.text.DateFormatSymbols $r7;
        java.util.Locale r3;
        java.lang.String r2;
        org.mortbay.util.ajax.JSONDateConvertor r0;
        org.mortbay.util.DateCache $r1, $r5;
        boolean z0;

        r0 := @this: org.mortbay.util.ajax.JSONDateConvertor;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.TimeZone;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.mortbay.util.DateCache;

        specialinvoke $r1.<org.mortbay.util.DateCache: void <init>(java.lang.String,java.util.Locale)>(r2, r3);

        r0.<org.mortbay.util.ajax.JSONDateConvertor: org.mortbay.util.DateCache _dateCache> = $r1;

        $r5 = r0.<org.mortbay.util.ajax.JSONDateConvertor: org.mortbay.util.DateCache _dateCache>;

        virtualinvoke $r5.<org.mortbay.util.DateCache: void setTimeZone(java.util.TimeZone)>(r4);

        r0.<org.mortbay.util.ajax.JSONDateConvertor: boolean _fromJSON> = z0;

        $r6 = new java.text.SimpleDateFormat;

        $r7 = new java.text.DateFormatSymbols;

        specialinvoke $r7.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>(r3);

        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.text.DateFormatSymbols)>(r2, $r7);

        r0.<org.mortbay.util.ajax.JSONDateConvertor: java.text.SimpleDateFormat _format> = $r6;

        $r8 = r0.<org.mortbay.util.ajax.JSONDateConvertor: java.text.SimpleDateFormat _format>;

        virtualinvoke $r8.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(r4);

        return;
    }

    public java.lang.Object fromJSON(java.util.Map)
    {
        java.lang.Throwable $r9;
        java.lang.UnsupportedOperationException $r7;
        java.text.SimpleDateFormat $r1, $r3;
        java.lang.Exception $r8;
        java.util.Map r2;
        java.lang.Object $r4, $r6;
        java.lang.String $r5;
        org.mortbay.util.ajax.JSONDateConvertor r0;
        boolean $z0;

        r0 := @this: org.mortbay.util.ajax.JSONDateConvertor;

        r2 := @parameter0: java.util.Map;

        $z0 = r0.<org.mortbay.util.ajax.JSONDateConvertor: boolean _fromJSON>;

        if $z0 != 0 goto label1;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r7;

     label1:
        $r1 = r0.<org.mortbay.util.ajax.JSONDateConvertor: java.text.SimpleDateFormat _format>;

        entermonitor $r1;

     label2:
        $r3 = r0.<org.mortbay.util.ajax.JSONDateConvertor: java.text.SimpleDateFormat _format>;

        $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("value");

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.Object parseObject(java.lang.String)>($r5);

        exitmonitor $r1;

     label3:
        return $r6;

     label4:
        $r9 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r9;

     label6:
        $r8 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.Throwable)>($r8);

        return null;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Exception from label1 to label3 with label6;
        catch java.lang.Exception from label4 to label6 with label6;
    }

    public void toJSON(java.lang.Object, org.mortbay.util.ajax.JSON$Output)
    {
        java.util.Date $r2;
        org.mortbay.util.ajax.JSON$Output r5;
        java.lang.Object r1;
        java.lang.Class $r6;
        java.lang.String $r4;
        org.mortbay.util.ajax.JSONDateConvertor r0;
        org.mortbay.util.DateCache $r3;
        boolean $z0;

        r0 := @this: org.mortbay.util.ajax.JSONDateConvertor;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.mortbay.util.ajax.JSON$Output;

        $r3 = r0.<org.mortbay.util.ajax.JSONDateConvertor: org.mortbay.util.DateCache _dateCache>;

        $r2 = (java.util.Date) r1;

        $r4 = virtualinvoke $r3.<org.mortbay.util.DateCache: java.lang.String format(java.util.Date)>($r2);

        $z0 = r0.<org.mortbay.util.ajax.JSONDateConvertor: boolean _fromJSON>;

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        interfaceinvoke r5.<org.mortbay.util.ajax.JSON$Output: void addClass(java.lang.Class)>($r6);

        interfaceinvoke r5.<org.mortbay.util.ajax.JSON$Output: void add(java.lang.String,java.lang.Object)>("value", $r4);

        goto label2;

     label1:
        interfaceinvoke r5.<org.mortbay.util.ajax.JSON$Output: void add(java.lang.Object)>($r4);

     label2:
        return;
    }
}
