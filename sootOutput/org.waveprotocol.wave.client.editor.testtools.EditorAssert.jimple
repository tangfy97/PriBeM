public class org.waveprotocol.wave.client.editor.testtools.EditorAssert extends java.lang.Object
{
    private static final java.lang.String inlineTagNames;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.testtools.EditorAssert r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testtools.EditorAssert;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean xmlEquals(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r1, r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: java.lang.String normalizeXml(java.lang.String)>(r0);

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: java.lang.String normalizeXml(java.lang.String)>(r2);

        if $r1 != null goto label1;

        if $r3 != null goto label1;

        return 1;

     label1:
        if $r3 == null goto label2;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static void assertXmlEquals(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r1, r2, $r3, $r9, $r15, r16;
        java.io.PrintStream $r5, $r11;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r10, $r12, $r13, $r14;

        r16 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: java.lang.String normalizeXml(java.lang.String)>(r0);

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: java.lang.String normalizeXml(java.lang.String)>(r2);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected:[");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Actual  :[");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15);

        staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r16, $r1, $r3);

        return;
    }

    private static java.lang.String normalizeXml(java.lang.String)
    {
        int $i0, $i1, $i3, $i4, $i6, $i7, $i8, i9, i10, $i11, $i13, $i14, $i16, $i17;
        java.lang.String r0, $r3, $r4;
        java.lang.CharSequence $r2, $r5;
        char $c2, $c5;
        java.lang.StringBuilder $r6, $r7;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        i9 = 0;

        i10 = 0;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

     label2:
        $i11 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("></", i9);

        $i13 = (int) -1;

        if $i11 == $i13 goto label6;

        $i1 = $i11 - 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i14 = (int) $c2;

        if $i14 != 47 goto label3;

        i9 = $i11 + 3;

        goto label2;

     label3:
        $i3 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int,int)>(60, $i11);

        $i16 = (int) -1;

        if $i3 == $i16 goto label4;

        $i4 = $i3 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $i17 = (int) $c5;

        if $i17 == 47 goto label4;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(i10, $i11);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/>");

        $i6 = $i11 + 1;

        $i7 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(62, $i6);

        $i8 = $i7 + 1;

        i10 = $i8;

        i9 = $i8;

        goto label5;

     label4:
        i9 = $i11 + 3;

     label5:
        goto label2;

     label6:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(i10, $i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r2);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "\'");

        return $r4;
    }

    private static void failLocationsDiffer(java.lang.String, int, int)
    {
        int i0, i1;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5, $r6;
        java.lang.String r1, $r7;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". expected=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". actual=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: void fail(java.lang.String)>($r7);

        return;
    }

    private static void failSelectionsDiffer(java.lang.String, org.waveprotocol.wave.model.document.util.Range, org.waveprotocol.wave.model.document.util.Range)
    {
        org.waveprotocol.wave.model.document.util.Range r4, r7;
        java.lang.StringBuilder $r0, $r2, $r3, $r5, $r6, $r8;
        java.lang.String r1, $r9;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.model.document.util.Range;

        r7 := @parameter2: org.waveprotocol.wave.model.document.util.Range;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". expected=");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". actual=");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: void fail(java.lang.String)>($r9);

        return;
    }

    public static void assertSelectionEquals(java.lang.String, org.waveprotocol.wave.model.document.util.Range, org.waveprotocol.wave.model.document.util.Range, java.lang.String)
    {
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.util.Range r0, r2;
        java.lang.String r1, r3;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.model.document.util.Range;

        r2 := @parameter2: org.waveprotocol.wave.model.document.util.Range;

        r3 := @parameter3: java.lang.String;

        if r0 != null goto label1;

        if r2 != null goto label1;

        return;

     label1:
        if r0 == null goto label2;

        $z2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Range: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label2;

        return;

     label2:
        if r0 == null goto label3;

        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Range: boolean isCollapsed()>();

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Range: boolean isCollapsed()>();

        if $z0 == $z1 goto label4;

     label3:
        staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: void failSelectionsDiffer(java.lang.String,org.waveprotocol.wave.model.document.util.Range,org.waveprotocol.wave.model.document.util.Range)>(r1, r0, r2);

     label4:
        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        $i3 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: void assertLocationsEquals(java.lang.String,int,int,java.lang.String)>(r1, $i2, $i3, r3);

        $z3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Range: boolean isCollapsed()>();

        if $z3 != 0 goto label5;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        $i1 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: void assertLocationsEquals(java.lang.String,int,int,java.lang.String)>(r1, $i0, $i1, r3);

     label5:
        return;
    }

    public static void assertLocationsEquals(java.lang.String, int, int, java.lang.String)
    {
        int i0, i1, $i2, $i3, i4, $i5, $i7, $i9, $i11;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        if i0 != i1 goto label01;

        return;

     label01:
        $i7 = (int) -1;

        if i0 == $i7 goto label02;

        $i9 = (int) -1;

        if i1 != $i9 goto label03;

     label02:
        staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: void failLocationsDiffer(java.lang.String,int,int)>(r0, i0, i1);

     label03:
        if i0 >= i1 goto label04;

        $i3 = i0;

        goto label05;

     label04:
        $i3 = i1;

     label05:
        i4 = staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: int location2Offset(int,java.lang.String)>($i3, r1);

        if i0 >= i1 goto label06;

        $i5 = i1;

        goto label07;

     label06:
        $i5 = i0;

     label07:
        $i2 = staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: int location2Offset(int,java.lang.String)>($i5, r1);

     label08:
        $i11 = (int) -1;

        if i4 == $i11 goto label09;

        if i4 >= $i2 goto label09;

        i4 = staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: int maybeMovePastInlineTag(int,java.lang.String)>(i4, r1);

        goto label08;

     label09:
        if i4 == $i2 goto label10;

        staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: void failLocationsDiffer(java.lang.String,int,int)>(r0, i0, i1);

     label10:
        return;
    }

    private static int location2Offset(int, java.lang.String)
    {
        int i0, $i1, $i3, i4, i5, $i6, $i8;
        java.lang.String r0, $r4, $r10;
        char $c2;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r8, $r9, $r11, $r12;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        i4 = 0;

        i5 = 1;

     label1:
        if i5 >= i0 goto label4;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 <= $i1 goto label2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Location ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not in ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: void fail(java.lang.String)>($r10);

     label2:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i6 = (int) $c2;

        if $i6 != 60 goto label3;

        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(62, i4);

        i4 = $i3;

        $i8 = (int) -1;

        if $i3 != $i8 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing \'>\' in ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.client.editor.testtools.EditorAssert: void fail(java.lang.String)>($r4);

     label3:
        i4 = i4 + 1;

        i5 = i5 + 1;

        goto label1;

     label4:
        return i4;
    }

    private static int maybeMovePastInlineTag(int, java.lang.String)
    {
        int i0, $i2, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i15, $i17;
        java.lang.String r0, $r1, $r2;
        boolean $z0;
        char $c1, $c3;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i10 = (int) $c1;

        if $i10 == 60 goto label1;

        $i12 = (int) -1;

        return $i12;

     label1:
        $i2 = i0 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i13 = (int) $c3;

        if $i13 != 47 goto label2;

        $i7 = i0 + 2;

        goto label3;

     label2:
        $i7 = i0 + 1;

     label3:
        i4 = $i7;

        $i5 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(32, $i7);

        $i6 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(62, $i7);

        $i15 = (int) -1;

        if $i5 != $i15 goto label4;

        $i8 = $i6;

        goto label5;

     label4:
        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i6);

     label5:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, $i8);

        $r2 = "b|u|i|span|a";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label6;

        $i9 = $i6 + 1;

        goto label7;

     label6:
        $i17 = (int) -1;

        $i9 = $i17;

     label7:
        return $i9;
    }

    private static void assertEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.lang.AssertionError $r2;
        java.lang.String r3;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);

        throw $r2;

     label1:
        return;
    }

    private static void fail(java.lang.String)
    {
        java.lang.AssertionError $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r0;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.client.editor.testtools.EditorAssert: java.lang.String inlineTagNames> = "b|u|i|span|a";

        return;
    }
}
