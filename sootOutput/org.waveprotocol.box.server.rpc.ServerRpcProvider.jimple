public class org.waveprotocol.box.server.rpc.ServerRpcProvider extends java.lang.Object
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final int BUFFER_SIZE;
    private final java.net.InetSocketAddress[] httpAddresses;
    private final java.lang.Integer flashsocketPolicyPort;
    private final java.util.concurrent.ExecutorService threadPool;
    private final org.waveprotocol.box.server.authentication.SessionManager sessionManager;
    private final org.eclipse.jetty.server.SessionManager jettySessionManager;
    private org.eclipse.jetty.server.Server httpServer;
    private final boolean sslEnabled;
    private final java.lang.String sslKeystorePath;
    private final java.lang.String sslKeystorePassword;
    private final java.util.Map registeredServices;
    private final java.lang.String[] resourceBases;
    private final java.lang.String sessionStoreDir;
    java.util.List servletRegistry;

    public void <init>(java.net.InetSocketAddress[], java.lang.Integer, java.lang.String[], java.util.concurrent.ExecutorService, org.waveprotocol.box.server.authentication.SessionManager, org.eclipse.jetty.server.SessionManager, java.lang.String, boolean, java.lang.String, java.lang.String)
    {
        java.util.HashMap $r1;
        java.lang.String[] r5;
        java.lang.Integer r4;
        java.util.ArrayList $r2;
        org.waveprotocol.box.server.authentication.SessionManager r7;
        org.eclipse.jetty.server.SessionManager r8;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        java.net.InetSocketAddress[] r3;
        java.lang.String r9, r10, r11;
        java.util.concurrent.ExecutorService r6;
        boolean z0;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        r3 := @parameter0: java.net.InetSocketAddress[];

        r4 := @parameter1: java.lang.Integer;

        r5 := @parameter2: java.lang.String[];

        r6 := @parameter3: java.util.concurrent.ExecutorService;

        r7 := @parameter4: org.waveprotocol.box.server.authentication.SessionManager;

        r8 := @parameter5: org.eclipse.jetty.server.SessionManager;

        r9 := @parameter6: java.lang.String;

        z0 := @parameter7: boolean;

        r10 := @parameter8: java.lang.String;

        r11 := @parameter9: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.Server httpServer> = null;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.Map registeredServices> = $r1;

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.List servletRegistry> = $r2;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.net.InetSocketAddress[] httpAddresses> = r3;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.Integer flashsocketPolicyPort> = r4;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String[] resourceBases> = r5;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.concurrent.ExecutorService threadPool> = r6;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.box.server.authentication.SessionManager sessionManager> = r7;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.SessionManager jettySessionManager> = r8;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String sessionStoreDir> = r9;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: boolean sslEnabled> = z0;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String sslKeystorePath> = r10;

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String sslKeystorePassword> = r11;

        return;
    }

    public void <init>(java.net.InetSocketAddress[], java.lang.Integer, java.lang.String[], org.waveprotocol.box.server.authentication.SessionManager, org.eclipse.jetty.server.SessionManager, java.lang.String, boolean, java.lang.String, java.lang.String)
    {
        java.lang.String[] r3;
        java.lang.Integer r2;
        org.waveprotocol.box.server.authentication.SessionManager r5;
        org.eclipse.jetty.server.SessionManager r6;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        java.net.InetSocketAddress[] r1;
        java.lang.String r7, r8, r9;
        java.util.concurrent.ExecutorService $r4;
        boolean z0;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        r1 := @parameter0: java.net.InetSocketAddress[];

        r2 := @parameter1: java.lang.Integer;

        r3 := @parameter2: java.lang.String[];

        r5 := @parameter3: org.waveprotocol.box.server.authentication.SessionManager;

        r6 := @parameter4: org.eclipse.jetty.server.SessionManager;

        r7 := @parameter5: java.lang.String;

        z0 := @parameter6: boolean;

        r8 := @parameter7: java.lang.String;

        r9 := @parameter8: java.lang.String;

        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>();

        specialinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: void <init>(java.net.InetSocketAddress[],java.lang.Integer,java.lang.String[],java.util.concurrent.ExecutorService,org.waveprotocol.box.server.authentication.SessionManager,org.eclipse.jetty.server.SessionManager,java.lang.String,boolean,java.lang.String,java.lang.String)>(r1, r2, r3, $r4, r5, r6, r7, z0, r8, r9);

        return;
    }

    public void <init>(java.util.List, java.lang.Integer, java.util.List, org.waveprotocol.box.server.authentication.SessionManager, org.eclipse.jetty.server.SessionManager, java.lang.String, boolean, java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r6;
        java.lang.String[] $r5, $r12;
        java.lang.Integer r3;
        org.waveprotocol.box.server.authentication.SessionManager r7;
        java.util.List r1, r4;
        org.eclipse.jetty.server.SessionManager r8;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        java.net.InetSocketAddress[] $r2;
        java.lang.String r9, r10, r11;
        boolean z0;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        r1 := @parameter0: java.util.List;

        r3 := @parameter1: java.lang.Integer;

        r4 := @parameter2: java.util.List;

        r7 := @parameter3: org.waveprotocol.box.server.authentication.SessionManager;

        r8 := @parameter4: org.eclipse.jetty.server.SessionManager;

        r9 := @parameter5: java.lang.String;

        z0 := @parameter6: boolean;

        r10 := @parameter7: java.lang.String;

        r11 := @parameter8: java.lang.String;

        $r2 = staticinvoke <org.waveprotocol.box.server.rpc.ServerRpcProvider: java.net.InetSocketAddress[] parseAddressList(java.util.List)>(r1);

        $r5 = newarray (java.lang.String)[0];

        $r6 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r12 = (java.lang.String[]) $r6;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: void <init>(java.net.InetSocketAddress[],java.lang.Integer,java.lang.String[],org.waveprotocol.box.server.authentication.SessionManager,org.eclipse.jetty.server.SessionManager,java.lang.String,boolean,java.lang.String,java.lang.String)>($r2, r3, $r12, r7, r8, r9, z0, r10, r11);

        return;
    }

    public void startWebSocketServer(com.google.inject.Injector)
    {
        org.eclipse.jetty.webapp.WebAppContext $r5;
        java.lang.String[] $r8;
        org.waveprotocol.wave.util.logging.Log $r16, $r22, $r24;
        org.eclipse.jetty.server.Server $r1, $r14, $r15, $r21;
        java.util.EnumSet $r12, $r13;
        boolean $z0, $z1;
        org.eclipse.jetty.server.nio.SelectChannelConnector r25;
        java.util.Iterator $r4;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$1 $r11;
        com.google.inject.servlet.ServletModule $r10;
        org.eclipse.jetty.server.session.SessionHandler $r18;
        java.lang.Exception $r23;
        com.google.inject.Injector r9;
        java.util.List $r3;
        org.eclipse.jetty.server.SessionManager $r6, $r17, $r19;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        java.net.InetSocketAddress[] $r2;
        java.lang.Object $r20;
        org.eclipse.jetty.util.resource.ResourceCollection $r7;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        r9 := @parameter0: com.google.inject.Injector;

        $r1 = new org.eclipse.jetty.server.Server;

        specialinvoke $r1.<org.eclipse.jetty.server.Server: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.Server httpServer> = $r1;

        $r2 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.net.InetSocketAddress[] httpAddresses>;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.List getSelectChannelConnectors(java.net.InetSocketAddress[])>($r2);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r22 = <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r22.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String)>("No valid http end point address provided!");

     label1:
        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r20 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.eclipse.jetty.server.nio.SelectChannelConnector) $r20;

        $r21 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.Server httpServer>;

        virtualinvoke $r21.<org.eclipse.jetty.server.Server: void addConnector(org.eclipse.jetty.server.Connector)>(r25);

        goto label2;

     label3:
        $r5 = new org.eclipse.jetty.webapp.WebAppContext;

        specialinvoke $r5.<org.eclipse.jetty.webapp.WebAppContext: void <init>()>();

        virtualinvoke $r5.<org.eclipse.jetty.webapp.WebAppContext: void setParentLoaderPriority(boolean)>(1);

        $r6 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.SessionManager jettySessionManager>;

        if $r6 == null goto label4;

        $r17 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.SessionManager jettySessionManager>;

        interfaceinvoke $r17.<org.eclipse.jetty.server.SessionManager: void setSessionIdPathParameterName(java.lang.String)>(null);

        $r18 = virtualinvoke $r5.<org.eclipse.jetty.webapp.WebAppContext: org.eclipse.jetty.server.session.SessionHandler getSessionHandler()>();

        $r19 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.SessionManager jettySessionManager>;

        virtualinvoke $r18.<org.eclipse.jetty.server.session.SessionHandler: void setSessionManager(org.eclipse.jetty.server.SessionManager)>($r19);

     label4:
        $r7 = new org.eclipse.jetty.util.resource.ResourceCollection;

        $r8 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String[] resourceBases>;

        specialinvoke $r7.<org.eclipse.jetty.util.resource.ResourceCollection: void <init>(java.lang.String[])>($r8);

        virtualinvoke $r5.<org.eclipse.jetty.webapp.WebAppContext: void setBaseResource(org.eclipse.jetty.util.resource.Resource)>($r7);

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: void addWebSocketServlets()>();

     label5:
        $r10 = virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: com.google.inject.servlet.ServletModule getServletModule(com.google.inject.Injector)>(r9);

        $r11 = new org.waveprotocol.box.server.rpc.ServerRpcProvider$1;

        specialinvoke $r11.<org.waveprotocol.box.server.rpc.ServerRpcProvider$1: void <init>(org.waveprotocol.box.server.rpc.ServerRpcProvider,com.google.inject.Injector,com.google.inject.servlet.ServletModule)>(r0, r9, $r10);

        virtualinvoke $r5.<org.eclipse.jetty.webapp.WebAppContext: void addEventListener(java.util.EventListener)>($r11);

        $r12 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Ljavax/servlet/DispatcherType;");

        virtualinvoke $r5.<org.eclipse.jetty.webapp.WebAppContext: org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.Class,java.lang.String,java.util.EnumSet)>(class "Lcom/google/inject/servlet/GuiceFilter;", "/*", $r12);

        $r13 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Ljavax/servlet/DispatcherType;");

        virtualinvoke $r5.<org.eclipse.jetty.webapp.WebAppContext: org.eclipse.jetty.servlet.FilterHolder addFilter(java.lang.Class,java.lang.String,java.util.EnumSet)>(class "Lorg/eclipse/jetty/servlets/GzipFilter;", "/webclient/*", $r13);

        $r14 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.Server httpServer>;

        virtualinvoke $r14.<org.eclipse.jetty.server.Server: void setHandler(org.eclipse.jetty.server.Handler)>($r5);

        $r15 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.Server httpServer>;

        virtualinvoke $r15.<org.eclipse.jetty.server.Server: void start()>();

        specialinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: void restoreSessions()>();

     label6:
        goto label8;

     label7:
        $r23 := @caughtexception;

        $r24 = <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r24.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>("Fatal error starting http server.", $r23);

        return;

     label8:
        $r16 = <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r16.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>("WebSocket server running.");

        return;

        catch java.lang.Exception from label5 to label6 with label7;
    }

    private void restoreSessions()
    {
        org.eclipse.jetty.server.session.HashSessionManager r6;
        org.eclipse.jetty.server.SessionManager $r1;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        org.waveprotocol.wave.util.logging.Log $r5;
        java.lang.String $r2;
        java.io.File $r3;
        java.lang.Exception $r4;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

     label1:
        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.SessionManager jettySessionManager>;

        r6 = (org.eclipse.jetty.server.session.HashSessionManager) $r1;

        $r2 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String sessionStoreDir>;

        $r3 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.io.File createDirIfNotExists(java.lang.String,java.lang.String)>($r2, "Session persistence");

        virtualinvoke r6.<org.eclipse.jetty.server.session.HashSessionManager: void setStoreDirectory(java.io.File)>($r3);

        virtualinvoke r6.<org.eclipse.jetty.server.session.HashSessionManager: void setSavePeriod(int)>(60);

        virtualinvoke r6.<org.eclipse.jetty.server.session.HashSessionManager: void restoreSessions()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r5.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>("Cannot restore sessions");

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void addWebSocketServlets()
    {
        java.lang.Integer $r7;
        java.net.InetAddress $r12;
        int i0, $i1, $i2, i3;
        java.lang.String $r9, $r10, r13;
        boolean $z0;
        org.eclipse.jetty.servlet.ServletHolder $r1, $r2;
        java.net.InetSocketAddress r11;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        java.lang.StringBuilder $r3, $r5, $r6, $r8;
        java.net.InetSocketAddress[] r4;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/socket", class "Lorg/waveprotocol/box/server/rpc/ServerRpcProvider$WaveWebSocketServlet;");

        virtualinvoke $r1.<org.eclipse.jetty.servlet.ServletHolder: void setInitParameter(java.lang.String,java.lang.String)>("bufferSize", "1048576");

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/socket.io/*", class "Lorg/waveprotocol/box/server/rpc/ServerRpcProvider$WaveSocketIOServlet;");

        virtualinvoke $r2.<org.eclipse.jetty.servlet.ServletHolder: void setInitParameter(java.lang.String,java.lang.String)>("bufferSize", "1048576");

        r13 = "localhost";

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r4 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.net.InetSocketAddress[] httpAddresses>;

        i0 = lengthof r4;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        r11 = r4[i3];

        $i1 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $i2 = virtualinvoke r11.<java.net.InetSocketAddress: int getPort()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke r11.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $z0 = virtualinvoke $r12.<java.net.InetAddress: boolean isLoopbackAddress()>();

        if $z0 != 0 goto label3;

        r13 = "0.0.0.0";

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        virtualinvoke $r2.<org.eclipse.jetty.servlet.ServletHolder: void setInitParameter(java.lang.String,java.lang.String)>("flashPolicyServerHost", r13);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r7 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.Integer flashsocketPolicyPort>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<org.eclipse.jetty.servlet.ServletHolder: void setInitParameter(java.lang.String,java.lang.String)>("flashPolicyServerPort", $r9);

        virtualinvoke $r2.<org.eclipse.jetty.servlet.ServletHolder: void setInitParameter(java.lang.String,java.lang.String)>("flashPolicyDomain", "*");

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<org.eclipse.jetty.servlet.ServletHolder: void setInitParameter(java.lang.String,java.lang.String)>("flashPolicyPorts", $r10);

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/static/*", class "Lorg/eclipse/jetty/servlet/DefaultServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/webclient/*", class "Lorg/eclipse/jetty/servlet/DefaultServlet;");

        return;
    }

    public com.google.inject.servlet.ServletModule getServletModule(com.google.inject.Injector)
    {
        com.google.inject.Injector r2;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$2 $r0;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r1;

        r1 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        r2 := @parameter0: com.google.inject.Injector;

        $r0 = new org.waveprotocol.box.server.rpc.ServerRpcProvider$2;

        specialinvoke $r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider$2: void <init>(org.waveprotocol.box.server.rpc.ServerRpcProvider)>(r1);

        return $r0;
    }

    private static java.net.InetSocketAddress[] parseAddressList(java.util.List)
    {
        java.lang.Object[] $r5;
        java.util.HashSet $r2;
        java.net.InetAddress $r15;
        int $i0, $i1;
        org.waveprotocol.wave.util.logging.Log $r11, $r19, $r22;
        java.lang.String r8, $r16, $r18, $r25;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        java.io.IOException $r20;
        java.net.InetSocketAddress $r9;
        java.util.List r0;
        java.net.InetSocketAddress[] $r1, $r4, $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r17, $r21, $r23, $r24;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = newarray (java.net.InetSocketAddress)[0];

        return $r1;

     label2:
        $r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $i1 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

        $r19 = <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r19.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>("Encountered empty address in http addresses list.");

        goto label8;

     label4:
        $r9 = staticinvoke <org.waveprotocol.box.server.util.NetUtils: java.net.InetSocketAddress parseHttpAddress(java.lang.String)>(r8);

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z1 != 0 goto label5;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label6;

     label5:
        $r11 = <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring duplicate address in http addresses list: Duplicate entry \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' resolved to ");

        $r15 = virtualinvoke $r9.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r16 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r18);

     label6:
        goto label8;

     label7:
        $r20 := @caughtexception;

        $r22 = <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to process address ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r25, $r20);

     label8:
        goto label3;

     label9:
        $r4 = newarray (java.net.InetSocketAddress)[0];

        $r5 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.net.InetSocketAddress[]) $r5;

        return $r6;

        catch java.io.IOException from label4 to label6 with label7;
    }

    private java.util.List getSelectChannelConnectors(java.net.InetSocketAddress[])
    {
        java.lang.String[] $r1;
        org.eclipse.jetty.http.ssl.SslContextFactory r12, $r14;
        org.eclipse.jetty.server.ssl.SslSelectChannelConnector $r8;
        java.util.ArrayList $r0;
        java.net.InetAddress $r6;
        int $i0, $i1, i2;
        java.lang.String $r7, $r9, $r10, $r11, $r13, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.eclipse.jetty.server.nio.SelectChannelConnector $r5, r17;
        java.net.InetSocketAddress r4;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r2;
        java.net.InetSocketAddress[] r3;

        r2 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        r3 := @parameter0: java.net.InetSocketAddress[];

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r1 = newarray (java.lang.String)[8];

        $r1[0] = "SSL_RSA_EXPORT_WITH_RC4_40_MD5";

        $r1[1] = "SSL_RSA_EXPORT_WITH_DES40_CBC_SHA";

        $r1[2] = "SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA";

        $r1[3] = "SSL_RSA_WITH_DES_CBC_SHA";

        $r1[4] = "SSL_DHE_RSA_WITH_DES_CBC_SHA";

        $r1[5] = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";

        $r1[6] = "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA";

        $r1[7] = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";

        r12 = null;

        $z0 = r2.<org.waveprotocol.box.server.rpc.ServerRpcProvider: boolean sslEnabled>;

        if $z0 == 0 goto label5;

        $r9 = r2.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String sslKeystorePath>;

        if $r9 == null goto label1;

        $r11 = r2.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String sslKeystorePath>;

        $z3 = virtualinvoke $r11.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z4, "SSL Keystore path left blank");

        $r13 = r2.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String sslKeystorePassword>;

        if $r13 == null goto label3;

        $r10 = r2.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String sslKeystorePassword>;

        $z2 = virtualinvoke $r10.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z5, "SSL Keystore password left blank");

        $r14 = new org.eclipse.jetty.http.ssl.SslContextFactory;

        $r15 = r2.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String sslKeystorePath>;

        specialinvoke $r14.<org.eclipse.jetty.http.ssl.SslContextFactory: void <init>(java.lang.String)>($r15);

        r12 = $r14;

        $r16 = r2.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.lang.String sslKeystorePassword>;

        virtualinvoke $r14.<org.eclipse.jetty.http.ssl.SslContextFactory: void setKeyStorePassword(java.lang.String)>($r16);

        virtualinvoke $r14.<org.eclipse.jetty.http.ssl.SslContextFactory: void setAllowRenegotiate(boolean)>(0);

        virtualinvoke $r14.<org.eclipse.jetty.http.ssl.SslContextFactory: void setExcludeCipherSuites(java.lang.String[])>($r1);

     label5:
        $i1 = lengthof r3;

        i2 = 0;

     label6:
        if i2 >= $i1 goto label9;

        r4 = r3[i2];

        $z1 = r2.<org.waveprotocol.box.server.rpc.ServerRpcProvider: boolean sslEnabled>;

        if $z1 == 0 goto label7;

        $r8 = new org.eclipse.jetty.server.ssl.SslSelectChannelConnector;

        specialinvoke $r8.<org.eclipse.jetty.server.ssl.SslSelectChannelConnector: void <init>(org.eclipse.jetty.util.ssl.SslContextFactory)>(r12);

        r17 = $r8;

        goto label8;

     label7:
        $r5 = new org.eclipse.jetty.server.nio.SelectChannelConnector;

        specialinvoke $r5.<org.eclipse.jetty.server.nio.SelectChannelConnector: void <init>()>();

        r17 = $r5;

     label8:
        $r6 = virtualinvoke r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r7 = virtualinvoke $r6.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r17.<org.eclipse.jetty.server.nio.SelectChannelConnector: void setHost(java.lang.String)>($r7);

        $i0 = virtualinvoke r4.<java.net.InetSocketAddress: int getPort()>();

        virtualinvoke r17.<org.eclipse.jetty.server.nio.SelectChannelConnector: void setPort(int)>($i0);

        virtualinvoke r17.<org.eclipse.jetty.server.nio.SelectChannelConnector: void setMaxIdleTime(int)>(0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r17);

        i2 = i2 + 1;

        goto label6;

     label9:
        return $r0;
    }

    public java.net.SocketAddress getWebSocketAddress()
    {
        org.eclipse.jetty.server.Connector[] $r3;
        java.net.InetSocketAddress $r5;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        int $i0;
        java.lang.String $r6;
        org.eclipse.jetty.server.Connector r4;
        org.eclipse.jetty.server.Server $r1, $r2;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.Server httpServer>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.Server httpServer>;

        $r3 = virtualinvoke $r2.<org.eclipse.jetty.server.Server: org.eclipse.jetty.server.Connector[] getConnectors()>();

        r4 = $r3[0];

        $r5 = new java.net.InetSocketAddress;

        $r6 = interfaceinvoke r4.<org.eclipse.jetty.server.Connector: java.lang.String getHost()>();

        $i0 = interfaceinvoke r4.<org.eclipse.jetty.server.Connector: int getLocalPort()>();

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r6, $i0);

        return $r5;
    }

    public void stopServer() throws java.io.IOException
    {
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        org.waveprotocol.wave.util.logging.Log $r2, $r4;
        org.eclipse.jetty.server.Server $r1;
        java.lang.Exception $r3;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

     label1:
        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.server.Server httpServer>;

        virtualinvoke $r1.<org.eclipse.jetty.server.Server: void stop()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r4.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>("Fatal error stopping http server.", $r3);

     label4:
        $r2 = <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r2.<org.waveprotocol.wave.util.logging.Log: void fine(java.lang.String)>("server shutdown.");

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void registerService(com.google.protobuf.Service)
    {
        java.lang.Throwable $r11;
        com.google.protobuf.Descriptors$MethodDescriptor r7;
        org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod $r10;
        java.util.Iterator $r5;
        com.google.protobuf.Descriptors$Descriptor $r9;
        java.util.List $r4;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        com.google.protobuf.Service r2;
        java.util.Map $r1, $r8;
        java.lang.Object $r6;
        com.google.protobuf.Descriptors$ServiceDescriptor $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        r2 := @parameter0: com.google.protobuf.Service;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.Map registeredServices>;

        entermonitor $r1;

     label1:
        $r3 = interfaceinvoke r2.<com.google.protobuf.Service: com.google.protobuf.Descriptors$ServiceDescriptor getDescriptorForType()>();

        $r4 = virtualinvoke $r3.<com.google.protobuf.Descriptors$ServiceDescriptor: java.util.List getMethods()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.protobuf.Descriptors$MethodDescriptor) $r6;

        $r8 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.Map registeredServices>;

        $r9 = virtualinvoke r7.<com.google.protobuf.Descriptors$MethodDescriptor: com.google.protobuf.Descriptors$Descriptor getInputType()>();

        $r10 = new org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod;

        specialinvoke $r10.<org.waveprotocol.box.server.rpc.ServerRpcProvider$RegisteredServiceMethod: void <init>(com.google.protobuf.Service,com.google.protobuf.Descriptors$MethodDescriptor)>(r2, r7);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r11;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String, java.lang.Class, java.util.Map)
    {
        java.util.List $r6;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r3;
        java.util.Map r2;
        org.eclipse.jetty.servlet.ServletHolder $r0;
        java.lang.Class r1;
        java.lang.String r5;
        org.waveprotocol.wave.model.util.Pair $r4;

        r3 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.util.Map;

        $r0 = new org.eclipse.jetty.servlet.ServletHolder;

        specialinvoke $r0.<org.eclipse.jetty.servlet.ServletHolder: void <init>(java.lang.Class)>(r1);

        if r2 == null goto label1;

        virtualinvoke $r0.<org.eclipse.jetty.servlet.ServletHolder: void setInitParameters(java.util.Map)>(r2);

     label1:
        $r6 = r3.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.List servletRegistry>;

        $r4 = new org.waveprotocol.wave.model.util.Pair;

        specialinvoke $r4.<org.waveprotocol.wave.model.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r5, $r0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r4);

        return $r0;
    }

    public org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String, java.lang.Class)
    {
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        org.eclipse.jetty.servlet.ServletHolder $r3;
        java.lang.Class r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class,java.util.Map)>(r1, r2, null);

        return $r3;
    }

    static org.waveprotocol.wave.util.logging.Log access$000()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static java.util.Map access$100(org.waveprotocol.box.server.rpc.ServerRpcProvider)
    {
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        java.util.Map $r1;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.Map registeredServices>;

        return $r1;
    }

    static org.waveprotocol.box.server.authentication.SessionManager access$200(org.waveprotocol.box.server.rpc.ServerRpcProvider)
    {
        org.waveprotocol.box.server.authentication.SessionManager $r1;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.box.server.authentication.SessionManager sessionManager>;

        return $r1;
    }

    static java.util.concurrent.ExecutorService access$400(org.waveprotocol.box.server.rpc.ServerRpcProvider)
    {
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        $r1 = r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: java.util.concurrent.ExecutorService threadPool>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        <org.waveprotocol.box.server.rpc.ServerRpcProvider: int BUFFER_SIZE> = 1048576;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/rpc/ServerRpcProvider;");

        <org.waveprotocol.box.server.rpc.ServerRpcProvider: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
