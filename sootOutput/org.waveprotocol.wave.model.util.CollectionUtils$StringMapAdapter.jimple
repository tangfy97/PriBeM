final class org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter extends java.lang.Object implements org.waveprotocol.wave.model.util.StringMap
{
    private final java.util.Map backend;

    private void <init>(java.util.Map)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r0;
        java.util.Map r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Attempt to adapt a null map");

        r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend> = r1;

        return;
    }

    public void putAll(org.waveprotocol.wave.model.util.ReadableStringMap)
    {
        java.util.Map $r3, $r4;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r0, $r2;
        org.waveprotocol.wave.model.util.ReadableStringMap r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap;

        $r4 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $r2 = (org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter) r1;

        $r3 = $r2.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        interfaceinvoke $r4.<java.util.Map: void putAll(java.util.Map)>($r3);

        return;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map r0, $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r0 := @parameter0: java.util.Map;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(null);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Source map must not contain a null key");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0);

        return;
    }

    public void clear()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public void put(java.lang.String, java.lang.Object)
    {
        java.util.Map $r3;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r1;
        java.lang.Object r2;
        java.lang.String r0;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "StringMap cannot contain null keys");

        $r3 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

        return;
    }

    public void remove(java.lang.String)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r1;
        java.lang.String r0;
        java.util.Map $r2;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "StringMap cannot contain null keys");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        return;
    }

    public boolean containsKey(java.lang.String)
    {
        java.util.Map $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r1;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "StringMap cannot contain null keys");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public java.lang.Object getExisting(java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r1;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String r0, $r10;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "StringMap cannot contain null keys");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getExisting: Key \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not in map");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $r3 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        return $r4;
    }

    public java.lang.Object get(java.lang.String)
    {
        java.util.Map $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r1;
        java.lang.Object $r3;
        java.lang.String r0;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "StringMap cannot contain null keys");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        return $r3;
    }

    public java.lang.Object get(java.lang.String, java.lang.Object)
    {
        java.util.Map $r2, $r4;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r1;
        java.lang.Object r3, $r5;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "StringMap cannot contain null keys");

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r4 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        return $r5;

     label1:
        return r3;
    }

    public boolean isEmpty()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r0;
        org.waveprotocol.wave.model.util.ReadableStringMap$ProcV r6;
        java.util.Map $r1;
        java.lang.Object $r4, $r7, $r9;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r6 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap$ProcV;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r6.<org.waveprotocol.wave.model.util.ReadableStringMap$ProcV: void apply(java.lang.String,java.lang.Object)>($r8, $r9);

        goto label1;

     label2:
        return;
    }

    public void filter(org.waveprotocol.wave.model.util.StringMap$EntryFilter)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r0;
        java.util.Map $r1;
        java.lang.Object $r4, $r7, $r9;
        java.lang.String $r8;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.util.StringMap$EntryFilter r6;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r6 := @parameter0: org.waveprotocol.wave.model.util.StringMap$EntryFilter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = interfaceinvoke r6.<org.waveprotocol.wave.model.util.StringMap$EntryFilter: boolean apply(java.lang.String,java.lang.Object)>($r8, $r9);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

     label3:
        goto label1;

     label4:
        return;
    }

    public int countEntries()
    {
        int $i0;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.lang.String someKey()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r0;
        java.lang.Object $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

     label2:
        return $r5;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet keySet()
    {
        java.util.Map $r2;
        java.util.Set $r3;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r1;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter $r0;

        r1 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        $r0 = new org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        $r2 = r1.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: void <init>(java.util.Set,org.waveprotocol.wave.model.util.CollectionUtils$1)>($r3, null);

        return $r0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r0;
        java.lang.String $r2;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: java.util.Map backend>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    void <init>(java.util.Map, org.waveprotocol.wave.model.util.CollectionUtils$1)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$1 r2;
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter r0;
        java.util.Map r1;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.waveprotocol.wave.model.util.CollectionUtils$1;

        specialinvoke r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: void <init>(java.util.Map)>(r1);

        return;
    }
}
