public class com.jhlabs.image.KaleidoscopeFilter extends com.jhlabs.image.TransformFilter
{
    private float angle;
    private float angle2;
    private float centreX;
    private float centreY;
    private int sides;
    private float radius;
    private float icentreX;
    private float icentreY;

    public void <init>()
    {
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        specialinvoke r0.<com.jhlabs.image.TransformFilter: void <init>()>();

        r0.<com.jhlabs.image.KaleidoscopeFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float angle2> = 0.0F;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float centreX> = 0.5F;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float centreY> = 0.5F;

        r0.<com.jhlabs.image.KaleidoscopeFilter: int sides> = 3;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float radius> = 0.0F;

        virtualinvoke r0.<com.jhlabs.image.TransformFilter: void setEdgeAction(int)>(1);

        return;
    }

    public void setSides(int)
    {
        int i0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.KaleidoscopeFilter: int sides> = i0;

        return;
    }

    public int getSides()
    {
        int $i0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        $i0 = r0.<com.jhlabs.image.KaleidoscopeFilter: int sides>;

        return $i0;
    }

    public void setAngle(float)
    {
        float f0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float angle> = f0;

        return;
    }

    public float getAngle()
    {
        float $f0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        $f0 = r0.<com.jhlabs.image.KaleidoscopeFilter: float angle>;

        return $f0;
    }

    public void setAngle2(float)
    {
        float f0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float angle2> = f0;

        return;
    }

    public float getAngle2()
    {
        float $f0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        $f0 = r0.<com.jhlabs.image.KaleidoscopeFilter: float angle2>;

        return $f0;
    }

    public void setCentreX(float)
    {
        float f0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float centreX> = f0;

        return;
    }

    public float getCentreX()
    {
        float $f0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        $f0 = r0.<com.jhlabs.image.KaleidoscopeFilter: float centreX>;

        return $f0;
    }

    public void setCentreY(float)
    {
        float f0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float centreY> = f0;

        return;
    }

    public float getCentreY()
    {
        float $f0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        $f0 = r0.<com.jhlabs.image.KaleidoscopeFilter: float centreY>;

        return $f0;
    }

    public void setCentre(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r1;
        float $f0, $f1;
        com.jhlabs.image.KaleidoscopeFilter r0;
        double $d0, $d1;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float centreX> = $f0;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float centreY> = $f1;

        return;
    }

    public java.awt.geom.Point2D getCentre()
    {
        java.awt.geom.Point2D$Float $r0;
        float $f0, $f1;
        com.jhlabs.image.KaleidoscopeFilter r1;

        r1 := @this: com.jhlabs.image.KaleidoscopeFilter;

        $r0 = new java.awt.geom.Point2D$Float;

        $f1 = r1.<com.jhlabs.image.KaleidoscopeFilter: float centreX>;

        $f0 = r1.<com.jhlabs.image.KaleidoscopeFilter: float centreY>;

        specialinvoke $r0.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f1, $f0);

        return $r0;
    }

    public void setRadius(float)
    {
        float f0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float radius> = f0;

        return;
    }

    public float getRadius()
    {
        float $f0;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        $f0 = r0.<com.jhlabs.image.KaleidoscopeFilter: float radius>;

        return $f0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r1, r2, $r3;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r2 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $f1 = (float) $i0;

        $f0 = r0.<com.jhlabs.image.KaleidoscopeFilter: float centreX>;

        $f2 = $f1 * $f0;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float icentreX> = $f2;

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        $f4 = (float) $i1;

        $f3 = r0.<com.jhlabs.image.KaleidoscopeFilter: float centreY>;

        $f5 = $f4 * $f3;

        r0.<com.jhlabs.image.KaleidoscopeFilter: float icentreY> = $f5;

        $r3 = specialinvoke r0.<com.jhlabs.image.TransformFilter: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r1, r2);

        return $r3;
    }

    protected void transformInverse(int, int, float[])
    {
        byte $b3;
        com.jhlabs.image.KaleidoscopeFilter r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;
        float[] r1;
        int i0, i1, $i2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, d25, $d26, $d27, $d28, d29, d30, d31;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        $f1 = (float) i0;

        $f0 = r0.<com.jhlabs.image.KaleidoscopeFilter: float icentreX>;

        $f2 = $f1 - $f0;

        d0 = (double) $f2;

        $f4 = (float) i1;

        $f3 = r0.<com.jhlabs.image.KaleidoscopeFilter: float icentreY>;

        $f5 = $f4 - $f3;

        d1 = (double) $f5;

        $d3 = d0 * d0;

        $d2 = d1 * d1;

        $d4 = $d3 + $d2;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        d29 = $d5;

        $d6 = staticinvoke <java.lang.Math: double atan2(double,double)>(d1, d0);

        $f6 = r0.<com.jhlabs.image.KaleidoscopeFilter: float angle>;

        $d7 = (double) $f6;

        $d9 = $d6 - $d7;

        $f7 = r0.<com.jhlabs.image.KaleidoscopeFilter: float angle2>;

        $d8 = (double) $f7;

        d30 = $d9 - $d8;

        $d11 = d30 / 3.141592653589793;

        $i2 = r0.<com.jhlabs.image.KaleidoscopeFilter: int sides>;

        $d10 = (double) $i2;

        $d12 = $d11 * $d10;

        $d13 = $d12 * 0.5;

        $f8 = (float) $d13;

        $f9 = staticinvoke <com.jhlabs.image.ImageMath: float triangle(float)>($f8);

        d31 = (double) $f9;

        $f10 = r0.<com.jhlabs.image.KaleidoscopeFilter: float radius>;

        $b3 = $f10 cmpl 0.0F;

        if $b3 == 0 goto label1;

        $d23 = staticinvoke <java.lang.Math: double cos(double)>(d31);

        $f16 = r0.<com.jhlabs.image.KaleidoscopeFilter: float radius>;

        $d24 = (double) $f16;

        d25 = $d24 / $d23;

        $d26 = $d5 / d25;

        $f17 = (float) $d26;

        $f18 = staticinvoke <com.jhlabs.image.ImageMath: float triangle(float)>($f17);

        $d27 = (double) $f18;

        d29 = d25 * $d27;

     label1:
        $f11 = r0.<com.jhlabs.image.KaleidoscopeFilter: float angle>;

        $d14 = (double) $f11;

        $d28 = d31 + $d14;

        $f12 = r0.<com.jhlabs.image.KaleidoscopeFilter: float icentreX>;

        $d15 = (double) $f12;

        $d16 = staticinvoke <java.lang.Math: double cos(double)>($d28);

        $d17 = d29 * $d16;

        $d18 = $d15 + $d17;

        $f13 = (float) $d18;

        r1[0] = $f13;

        $f14 = r0.<com.jhlabs.image.KaleidoscopeFilter: float icentreY>;

        $d19 = (double) $f14;

        $d20 = staticinvoke <java.lang.Math: double sin(double)>($d28);

        $d21 = d29 * $d20;

        $d22 = $d19 + $d21;

        $f15 = (float) $d22;

        r1[1] = $f15;

        return;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.KaleidoscopeFilter r0;

        r0 := @this: com.jhlabs.image.KaleidoscopeFilter;

        return "Distort/Kaleidoscope...";
    }
}
