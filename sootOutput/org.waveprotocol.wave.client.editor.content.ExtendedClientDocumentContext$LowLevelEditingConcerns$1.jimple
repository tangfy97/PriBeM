final class org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1 extends java.lang.Object implements org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns
{

    void <init>()
    {
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.client.editor.extract.TypingExtractor getTypingExtractor()
    {
        java.lang.IllegalStateException $r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1 r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not in an editing context");

        throw $r0;
    }

    public void textNodeletAffected(com.google.gwt.dom.client.Text, int, int, org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType)
    {
        int i0, i1;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1 r0;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType r2;
        com.google.gwt.dom.client.Text r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1;

        r1 := @parameter0: com.google.gwt.dom.client.Text;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType;

        return;
    }

    public org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()
    {
        java.lang.IllegalStateException $r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1 r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not in an editing context");

        throw $r0;
    }

    public org.waveprotocol.wave.client.editor.sugg.SuggestionsManager getSuggestionsManager()
    {
        java.lang.IllegalStateException $r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1 r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not in an editing context");

        throw $r0;
    }

    public boolean hasEditor()
    {
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1;

        return 0;
    }

    public org.waveprotocol.wave.client.editor.EditorContext editorContext()
    {
        java.lang.IllegalStateException $r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1 r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns$1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not in an editing context");

        throw $r0;
    }
}
