class org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2 extends org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$Cache
{
    int distance;
    final org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer this$0;

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2 r0;
        org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2: org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$Cache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer,org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$1)>(r1, null);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2: int distance> = 0;

        return;
    }

    public void flush()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$Cache $r5;
        org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer $r1, $r3, $r4;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2;
        int $i0;
        org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2: org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$500(org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer)>($r1);

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2: int distance>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>($i0);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2: int distance> = 0;

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2: org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer this$0>;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2: org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer: org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$Cache access$600(org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer)>($r3);

        staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer: org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$Cache access$002(org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer,org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$Cache)>($r4, $r5);

        return;
    }

    public void skip(int)
    {
        int i0, $i1, $i2;
        org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2;

        i0 := @parameter0: int;

        $i1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2: int distance>;

        $i2 = $i1 + i0;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.RangeNormalizer$2: int distance> = $i2;

        return;
    }
}
