public class org.waveprotocol.wave.federation.xmpp.RemoteDisco extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;
    static final int MAXIMUM_DISCO_ATTEMPTS;
    static final int MINIMUM_REXMIT_MS;
    static final int REXMIT_JITTER_MS;
    static final int DISCO_INFO_TIMEOUT;
    private final long creationTimeMillis;
    private final int failExpirySecs;
    private final int successExpirySecs;
    private final java.util.Random random;
    private final org.waveprotocol.wave.federation.xmpp.XmppManager manager;
    private final java.lang.String remoteDomain;
    private final java.util.concurrent.atomic.AtomicReference status;
    private final java.util.Queue pending;
    private java.lang.String remoteJid;
    private org.waveprotocol.wave.federation.FederationErrorProto$FederationError error;
    public static final java.util.Map statDiscoSuccess;
    public static final java.util.Map statDiscoFailed;

    public void <init>(org.waveprotocol.wave.federation.xmpp.XmppManager, java.lang.String, int, int)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status $r4;
        long $l0;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.security.SecureRandom $r1;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        int i1, i2;
        org.waveprotocol.wave.federation.xmpp.XmppManager r2;
        java.lang.String r6;
        java.util.concurrent.ConcurrentLinkedQueue $r5;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        r2 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r6 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Random random> = $r1;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: org.waveprotocol.wave.federation.xmpp.XmppManager manager> = r2;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        $r4 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status INIT>;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r4);

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.concurrent.atomic.AtomicReference status> = $r3;

        $r5 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r5.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Queue pending> = $r5;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteDomain> = r6;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: long creationTimeMillis> = $l0;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: int failExpirySecs> = i1;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: int successExpirySecs> = i2;

        return;
    }

    void <init>(java.lang.String, java.lang.String, org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status $r6;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r3;
        long $l0;
        java.util.concurrent.atomic.AtomicReference $r5;
        java.security.SecureRandom $r1;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        java.lang.String r2, r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        r4 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Random random> = $r1;

        if r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if r3 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z2 = $z0 ^ $z1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z2);

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: org.waveprotocol.wave.federation.xmpp.XmppManager manager> = null;

        $r5 = new java.util.concurrent.atomic.AtomicReference;

        $r6 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status COMPLETE>;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r6);

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.concurrent.atomic.AtomicReference status> = $r5;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Queue pending> = null;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteDomain> = r4;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteJid> = r2;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: org.waveprotocol.wave.federation.FederationErrorProto$FederationError error> = r3;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: long creationTimeMillis> = $l0;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: int failExpirySecs> = 120;

        r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: int successExpirySecs> = 7200;

        return;
    }

    boolean isRequestPending()
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status $r3, $r4;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.concurrent.atomic.AtomicReference status>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status) $r2;

        $r3 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status PENDING>;

        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public void discoverRemoteJID(org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status $r3, $r4, $r5, $r6, $r12, $r13;
        org.waveprotocol.wave.federation.xmpp.SuccessFailCallback r8, $r16;
        java.util.concurrent.atomic.AtomicReference $r1, $r7, $r10;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2, $r11, $r15;
        java.util.Queue $r9, $r14, $r17;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        r8 := @parameter0: org.waveprotocol.wave.federation.xmpp.SuccessFailCallback;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.concurrent.atomic.AtomicReference status>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status) $r2;

        $r3 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status COMPLETE>;

        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: void complete(org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)>(r8);

        goto label4;

     label1:
        $r7 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.concurrent.atomic.AtomicReference status>;

        $r6 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status INIT>;

        $r5 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status PENDING>;

        $z1 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z1 == 0 goto label2;

        $r17 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Queue pending>;

        interfaceinvoke $r17.<java.util.Queue: boolean add(java.lang.Object)>(r8);

        specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: void startDisco()>();

        goto label4;

     label2:
        $r9 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Queue pending>;

        interfaceinvoke $r9.<java.util.Queue: boolean add(java.lang.Object)>(r8);

        $r10 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.concurrent.atomic.AtomicReference status>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r13 = (org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status) $r11;

        $r12 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status COMPLETE>;

        $z2 = virtualinvoke $r13.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label4;

     label3:
        $r14 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Queue pending>;

        $r15 = interfaceinvoke $r14.<java.util.Queue: java.lang.Object poll()>();

        $r16 = (org.waveprotocol.wave.federation.xmpp.SuccessFailCallback) $r15;

        if $r16 == null goto label4;

        specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: void complete(org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)>($r16);

        goto label3;

     label4:
        return;
    }

    public boolean ttlExceeded()
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status $r3;
        long $l0, $l3, $l4, $l5, $l7, $l10, $l11, $l12;
        java.util.concurrent.atomic.AtomicReference $r1;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        byte $b6, $b13;
        int $i1, $i2, $i8, $i9, $i14, $i15;
        java.lang.String $r4;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.concurrent.atomic.AtomicReference status>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status COMPLETE>;

        if $r2 != $r3 goto label2;

        $r4 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteJid>;

        if $r4 != null goto label1;

        $l7 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $l11 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: long creationTimeMillis>;

        $i8 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: int failExpirySecs>;

        $i9 = 1000 * $i8;

        $l10 = (long) $i9;

        $l12 = $l11 + $l10;

        $b13 = $l7 cmp $l12;

        $i14 = (int) $b13;

        if $i14 <= 0 goto label2;

        return 1;

     label1:
        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $l4 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: long creationTimeMillis>;

        $i1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: int successExpirySecs>;

        $i2 = 1000 * $i1;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        $b6 = $l0 cmp $l5;

        $i15 = (int) $b6;

        if $i15 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private void complete(org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status $r3, $r4;
        org.waveprotocol.wave.federation.xmpp.SuccessFailCallback r6;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r7;
        java.util.concurrent.atomic.AtomicReference $r1;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        java.lang.Object $r2;
        java.lang.String $r5, $r8, $r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        r6 := @parameter0: org.waveprotocol.wave.federation.xmpp.SuccessFailCallback;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.concurrent.atomic.AtomicReference status>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status) $r2;

        $r3 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status COMPLETE>;

        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: boolean equals(java.lang.Object)>($r3);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $r5 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteJid>;

        if $r5 == null goto label1;

        $r9 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteJid>;

        interfaceinvoke r6.<org.waveprotocol.wave.federation.xmpp.SuccessFailCallback: void onSuccess(java.lang.Object)>($r9);

        goto label2;

     label1:
        $r7 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: org.waveprotocol.wave.federation.FederationErrorProto$FederationError error>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.federation.FederationErrorProto$FederationError: java.lang.String toString()>();

        interfaceinvoke r6.<org.waveprotocol.wave.federation.xmpp.SuccessFailCallback: void onFailure(java.lang.Object)>($r8);

     label2:
        return;
    }

    private void startDisco()
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r2;
        java.lang.String $r1;
        org.xmpp.packet.IQ $r3;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$3 $r4;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: org.waveprotocol.wave.federation.xmpp.XmppManager manager>;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteDomain>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.xmpp.packet.IQ createRequestIQ(java.lang.String)>($r1);

        virtualinvoke $r3.<org.xmpp.packet.IQ: org.dom4j.Element setChildElement(java.lang.String,java.lang.String)>("query", "http://jabber.org/protocol/disco#items");

        $r4 = new org.waveprotocol.wave.federation.xmpp.RemoteDisco$3;

        specialinvoke $r4.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$3: void <init>(org.waveprotocol.wave.federation.xmpp.RemoteDisco,org.xmpp.packet.IQ)>(r0, $r3);

        interfaceinvoke $r4.<java.lang.Runnable: void run()>();

        return;
    }

    private int nextDiscoRetransmitTimeout(int)
    {
        java.util.Random $r1;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i1 = i0 - 1;

        $i2 = 1 << $i1;

        $i3 = 15000 * $i2;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Random random>;

        $i4 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(2000);

        $i5 = $i3 + $i4;

        return $i5;
    }

    private void processDiscoItemsResult(org.xmpp.packet.IQ)
    {
        java.util.HashSet $r0;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r4;
        java.util.concurrent.atomic.AtomicInteger $r8;
        int $i0;
        java.lang.String $r5, $r7, $r11, $r18, r20;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r9, $r15;
        java.util.List $r13, $r14;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.lang.Object $r10, $r16;
        org.dom4j.Element $r12, r19;
        org.xmpp.packet.IQ r1;
        org.dom4j.Attribute $r17;

        r4 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        r1 := @parameter0: org.xmpp.packet.IQ;

        $r0 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        if r1 == null goto label3;

        $r12 = virtualinvoke r1.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        $r13 = interfaceinvoke $r12.<org.dom4j.Element: java.util.List elements(java.lang.String)>("item");

        $r14 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.List toSafeElementList(java.util.List)>($r13);

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.dom4j.Element) $r16;

        $r17 = interfaceinvoke r19.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("jid");

        if $r17 == null goto label2;

        $r18 = interfaceinvoke $r17.<org.dom4j.Attribute: java.lang.String getValue()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r18);

     label2:
        goto label1;

     label3:
        $z0 = interfaceinvoke $r0.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r11 = r4.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteDomain>;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r11);

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wave.");

        $r5 = r4.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteDomain>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r8 = new java.util.concurrent.atomic.AtomicInteger;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>($i0);

        $r9 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r10;

        specialinvoke r4.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: void requestDiscoInfo(java.lang.String,java.util.concurrent.atomic.AtomicInteger)>(r20, $r8);

        goto label5;

     label6:
        return;
    }

    private void requestDiscoInfo(java.lang.String, java.util.concurrent.atomic.AtomicInteger)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$4 $r4;
        java.util.logging.Logger $r7;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        java.util.concurrent.atomic.AtomicInteger r5;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r2, $r11;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String r1, $r10;
        org.xmpp.packet.IQ $r3;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.concurrent.atomic.AtomicInteger;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: org.waveprotocol.wave.federation.xmpp.XmppManager manager>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.federation.xmpp.XmppManager: org.xmpp.packet.IQ createRequestIQ(java.lang.String)>(r1);

        virtualinvoke $r3.<org.xmpp.packet.IQ: org.dom4j.Element setChildElement(java.lang.String,java.lang.String)>("query", "http://jabber.org/protocol/disco#info");

        $r4 = new org.waveprotocol.wave.federation.xmpp.RemoteDisco$4;

        specialinvoke $r4.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$4: void <init>(org.waveprotocol.wave.federation.xmpp.RemoteDisco,java.util.concurrent.atomic.AtomicInteger)>(r0, r5);

        $r7 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.logging.Logger LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending disco info request for: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void info(java.lang.String)>($r10);

        $r11 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: org.waveprotocol.wave.federation.xmpp.XmppManager manager>;

        virtualinvoke $r11.<org.waveprotocol.wave.federation.xmpp.XmppManager: void send(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.xmpp.PacketCallback,int)>($r3, $r4, 20);

        return;
    }

    boolean finish(java.lang.String, org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status $r29, $r30;
        org.waveprotocol.wave.federation.xmpp.SuccessFailCallback $r33;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r2;
        java.util.Map $r13, $r25;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r1;
        java.util.logging.Logger $r5, $r17;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r10, $r16, $r18, $r19, $r20, $r22;
        java.util.Queue $r31;
        java.util.concurrent.atomic.AtomicReference $r28;
        java.lang.String r0, $r9, $r11, $r12, $r21, $r23, $r24;
        java.lang.IllegalArgumentException $r3;
        java.util.concurrent.atomic.AtomicLong $r15, $r27;
        java.lang.Object $r14, $r26, $r32;

        r2 := @this: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        if r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if r1 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z2 = $z0 ^ $z1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z2);

        $r28 = r2.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.concurrent.atomic.AtomicReference status>;

        $r29 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status PENDING>;

        $r30 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status: org.waveprotocol.wave.federation.xmpp.RemoteDisco$Status COMPLETE>;

        $z3 = virtualinvoke $r28.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r29, $r30);

        if $z3 != 0 goto label5;

        return 0;

     label5:
        if r0 == null goto label6;

        r2.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteJid> = r0;

        $r17 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.logging.Logger LOG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Discovered remote JID: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r21 = r2.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteDomain>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.util.logging.Logger: void info(java.lang.String)>($r23);

        $r25 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Map statDiscoSuccess>;

        $r24 = r2.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteDomain>;

        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        $r27 = (java.util.concurrent.atomic.AtomicLong) $r26;

        virtualinvoke $r27.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        goto label8;

     label6:
        if r1 == null goto label7;

        r2.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: org.waveprotocol.wave.federation.FederationErrorProto$FederationError error> = r1;

        $r5 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.logging.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not discover remote JID: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r9 = r2.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteDomain>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void info(java.lang.String)>($r11);

        $r13 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Map statDiscoFailed>;

        $r12 = r2.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteDomain>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        $r15 = (java.util.concurrent.atomic.AtomicLong) $r14;

        virtualinvoke $r15.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        goto label8;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one of jid/error must be set");

        throw $r3;

     label8:
        $r31 = r2.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Queue pending>;

        $r32 = interfaceinvoke $r31.<java.util.Queue: java.lang.Object poll()>();

        $r33 = (org.waveprotocol.wave.federation.xmpp.SuccessFailCallback) $r32;

        if $r33 == null goto label9;

        specialinvoke r2.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: void complete(org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)>($r33);

        goto label8;

     label9:
        return 1;
    }

    static void access$000(org.waveprotocol.wave.federation.xmpp.RemoteDisco, org.xmpp.packet.IQ)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        org.xmpp.packet.IQ r1;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        r1 := @parameter1: org.xmpp.packet.IQ;

        specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: void processDiscoItemsResult(org.xmpp.packet.IQ)>(r1);

        return;
    }

    static java.lang.String access$100(org.waveprotocol.wave.federation.xmpp.RemoteDisco)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        java.lang.String $r1;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.lang.String remoteDomain>;

        return $r1;
    }

    static java.util.logging.Logger access$200()
    {
        java.util.logging.Logger $r0;

        $r0 = <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.logging.Logger LOG>;

        return $r0;
    }

    static int access$300(org.waveprotocol.wave.federation.xmpp.RemoteDisco, int)
    {
        int i0, $i1;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: int nextDiscoRetransmitTimeout(int)>(i0);

        return $i1;
    }

    static org.waveprotocol.wave.federation.xmpp.XmppManager access$400(org.waveprotocol.wave.federation.xmpp.RemoteDisco)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco r0;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r1;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: org.waveprotocol.wave.federation.xmpp.XmppManager manager>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r2;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$2 $r7;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco$1 $r4;
        java.util.concurrent.ConcurrentMap $r5, $r8;
        java.lang.Class $r0;
        java.lang.String $r1;
        com.google.common.collect.MapMaker $r3, $r6;

        <org.waveprotocol.wave.federation.xmpp.RemoteDisco: int DISCO_INFO_TIMEOUT> = 20;

        <org.waveprotocol.wave.federation.xmpp.RemoteDisco: int REXMIT_JITTER_MS> = 2000;

        <org.waveprotocol.wave.federation.xmpp.RemoteDisco: int MINIMUM_REXMIT_MS> = 15000;

        <org.waveprotocol.wave.federation.xmpp.RemoteDisco: int MAXIMUM_DISCO_ATTEMPTS> = 5;

        $r0 = class "Lorg/waveprotocol/wave/federation/xmpp/RemoteDisco;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.logging.Logger LOG> = $r2;

        $r3 = new com.google.common.collect.MapMaker;

        specialinvoke $r3.<com.google.common.collect.MapMaker: void <init>()>();

        $r4 = new org.waveprotocol.wave.federation.xmpp.RemoteDisco$1;

        specialinvoke $r4.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$1: void <init>()>();

        $r5 = virtualinvoke $r3.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r4);

        <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Map statDiscoSuccess> = $r5;

        $r6 = new com.google.common.collect.MapMaker;

        specialinvoke $r6.<com.google.common.collect.MapMaker: void <init>()>();

        $r7 = new org.waveprotocol.wave.federation.xmpp.RemoteDisco$2;

        specialinvoke $r7.<org.waveprotocol.wave.federation.xmpp.RemoteDisco$2: void <init>()>();

        $r8 = virtualinvoke $r6.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r7);

        <org.waveprotocol.wave.federation.xmpp.RemoteDisco: java.util.Map statDiscoFailed> = $r8;

        return;
    }
}
