public final class org.waveprotocol.wave.model.experimental.schema.SchemaFactory extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.util.Utf16Util$CodePointHandler codePointExtractor;
    private static final java.util.List ERROR_LIST;
    private static final java.lang.String NAME_ATTRIBUTE_NAME;

    private void <init>()
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String extractName(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r3, $r9;
        org.waveprotocol.wave.model.document.operation.Attributes r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r4, $r5, $r7, $r10, $r11, $r12;
        java.lang.String r2, r6, $r8, $r13;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: java.lang.Object get(java.lang.Object)>("name");

        r2 = (java.lang.String) $r1;

        if r2 != null goto label1;

        $r9 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing attribute \"name\" in element: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: int size()>();

        if $i0 == 1 goto label2;

        $r3 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encountered an attribute other than \"name\" in element: ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        return r2;
    }

    private static java.util.List extractCodePoints(java.lang.String) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r5;
        org.waveprotocol.wave.model.util.Utf16Util$CodePointHandler $r1;
        java.util.List r3, $r4;
        java.lang.Object $r2;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r0, $r9;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: org.waveprotocol.wave.model.util.Utf16Util$CodePointHandler codePointExtractor>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: java.lang.Object traverseUtf16String(java.lang.String,org.waveprotocol.wave.model.util.Utf16Util$CodePointHandler)>(r0, $r1);

        r3 = (java.util.List) $r2;

        $r4 = <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.util.List ERROR_LIST>;

        if r3 != $r4 goto label1;

        $r5 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid code point in string: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        return r3;
    }

    private static void checkElementType(java.lang.String) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r0, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isXmlName(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r1 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid element type: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    private static void checkAttributeName(java.lang.String) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r0, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isXmlName(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r1 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid attribute name: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    public static org.waveprotocol.wave.model.experimental.schema.SchemaPattern createSchemaPattern(org.waveprotocol.wave.model.document.operation.DocInitialization) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r4;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern $r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder $r0;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException $r3;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder;

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1)>(null);

     label1:
        interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.DocInitialization: void apply(org.waveprotocol.wave.model.document.operation.DocInitializationCursor)>($r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException: org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException unbox()>();

        throw $r4;

     label4:
        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$SchemaBuilder: org.waveprotocol.wave.model.experimental.schema.SchemaPattern buildSchema()>();

        return $r2;

        catch org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BoxedSchemaException from label1 to label2 with label3;
    }

    static java.lang.String access$100(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        java.lang.String r0, $r2;
        org.waveprotocol.wave.model.document.operation.Attributes r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r2 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.lang.String extractName(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r0, r1);

        return $r2;
    }

    static void access$300(java.lang.String) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: void checkAttributeName(java.lang.String)>(r0);

        return;
    }

    static java.util.List access$400(java.lang.String) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        java.util.List $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.util.List extractCodePoints(java.lang.String)>(r0);

        return $r1;
    }

    static void access$600(java.lang.String) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: void checkElementType(java.lang.String)>(r0);

        return;
    }

    static java.util.List access$1000()
    {
        java.util.List $r0;

        $r0 = <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.util.List ERROR_LIST>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$2 $r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1 $r0;

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.lang.String NAME_ATTRIBUTE_NAME> = "name";

        $r0 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1: void <init>()>();

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: org.waveprotocol.wave.model.util.Utf16Util$CodePointHandler codePointExtractor> = $r0;

        $r1 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$2;

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$2: void <init>()>();

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.util.List ERROR_LIST> = $r1;

        return;
    }
}
