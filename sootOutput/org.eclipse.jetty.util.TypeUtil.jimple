public class org.eclipse.jetty.util.TypeUtil extends java.lang.Object
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    public static int CR;
    public static int LF;
    private static final java.util.HashMap name2Class;
    private static final java.util.HashMap class2Name;
    private static final java.util.HashMap class2Value;

    public void <init>()
    {
        org.eclipse.jetty.util.TypeUtil r0;

        r0 := @this: org.eclipse.jetty.util.TypeUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List asList(java.lang.Object[])
    {
        java.util.List $r1, $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label1:
        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        return $r1;
    }

    public static java.lang.Class fromName(java.lang.String)
    {
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.Class) $r2;

        return $r3;
    }

    public static java.lang.String toName(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public static java.lang.Object valueOf(java.lang.Class, java.lang.String)
    {
        java.lang.Throwable $r13, $r14;
        java.lang.Object[] $r8, $r10;
        java.lang.NoSuchMethodException $r19;
        java.lang.Error $r15, $r16;
        java.util.HashMap $r1;
        java.lang.reflect.Constructor $r7;
        java.lang.Character $r4;
        java.lang.InstantiationException $r17;
        java.lang.String r5;
        java.lang.reflect.Method r20;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalAccessException $r18;
        java.lang.Class[] $r6;
        char $c0;
        java.lang.reflect.InvocationTargetException $r12;
        java.lang.Class r0, $r3;
        java.lang.Object $r2, $r9, $r11;

        r0 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

     label01:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        if $z0 == 0 goto label03;

     label02:
        return r5;

     label03:
        $r1 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r20 = (java.lang.reflect.Method) $r2;

        if r20 == null goto label05;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r5;

        $r11 = virtualinvoke r20.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r10);

     label04:
        return $r11;

     label05:
        $r3 = <java.lang.Character: java.lang.Class TYPE>;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label06;

        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Character;");

        if $z2 == 0 goto label08;

     label06:
        $r4 = new java.lang.Character;

        $c0 = virtualinvoke r5.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r4.<java.lang.Character: void <init>(char)>($c0);

     label07:
        return $r4;

     label08:
        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Ljava/lang/String;";

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r5;

        $r9 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r8);

     label09:
        return $r9;

     label10:
        $r19 := @caughtexception;

        goto label14;

     label11:
        $r18 := @caughtexception;

        goto label14;

     label12:
        $r17 := @caughtexception;

        goto label14;

     label13:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z3 = $r13 instanceof java.lang.Error;

        if $z3 == 0 goto label14;

        $r14 = virtualinvoke $r12.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r15 = (java.lang.Error) $r14;

        $r16 = (java.lang.Error) $r15;

        throw $r16;

     label14:
        return null;

        catch java.lang.NoSuchMethodException from label01 to label02 with label10;
        catch java.lang.NoSuchMethodException from label03 to label04 with label10;
        catch java.lang.NoSuchMethodException from label05 to label07 with label10;
        catch java.lang.NoSuchMethodException from label08 to label09 with label10;
        catch java.lang.IllegalAccessException from label01 to label02 with label11;
        catch java.lang.IllegalAccessException from label03 to label04 with label11;
        catch java.lang.IllegalAccessException from label05 to label07 with label11;
        catch java.lang.IllegalAccessException from label08 to label09 with label11;
        catch java.lang.InstantiationException from label01 to label02 with label12;
        catch java.lang.InstantiationException from label03 to label04 with label12;
        catch java.lang.InstantiationException from label05 to label07 with label12;
        catch java.lang.InstantiationException from label08 to label09 with label12;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label13;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label13;
        catch java.lang.reflect.InvocationTargetException from label05 to label07 with label13;
        catch java.lang.reflect.InvocationTargetException from label08 to label09 with label13;
    }

    public static java.lang.Object valueOf(java.lang.String, java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.String r0, r2;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.eclipse.jetty.util.TypeUtil: java.lang.Class fromName(java.lang.String)>(r0);

        $r3 = staticinvoke <org.eclipse.jetty.util.TypeUtil: java.lang.Object valueOf(java.lang.Class,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static int parseInt(java.lang.String, int, int, int) throws java.lang.NumberFormatException
    {
        char $c2;
        java.lang.NumberFormatException $r3;
        int i0, $i1, $i3, $i4, i5, $i6, $i7, i8, i9, i10, $i11;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i8 := @parameter2: int;

        i5 := @parameter3: int;

        i9 = 0;

        if i8 >= 0 goto label1;

        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        i8 = $i7 - i0;

     label1:
        i10 = 0;

     label2:
        if i10 >= i8 goto label5;

        $i1 = i0 + i10;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i11 = (int) $c2;

        $i3 = staticinvoke <org.eclipse.jetty.util.TypeUtil: int convertHexDigit(int)>($i11);

        if $i3 < 0 goto label3;

        if $i3 < i5 goto label4;

     label3:
        $r3 = new java.lang.NumberFormatException;

        $i4 = i0 + i8;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i4);

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label4:
        $i6 = i9 * i5;

        i9 = $i6 + $i3;

        i10 = i10 + 1;

        goto label2;

     label5:
        return i9;
    }

    public static int parseInt(byte[], int, int, int) throws java.lang.NumberFormatException
    {
        byte[] r0;
        short $s3, $s15;
        byte $b2;
        int i0, $i1, $i5, i6, $i7, $i8, i9, i10, i11, i12, $i13, $i14, $i16, $i17, $i18;
        java.lang.String $r3;
        char c4;
        java.lang.NumberFormatException $r4;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i9 := @parameter2: int;

        i6 := @parameter3: int;

        i10 = 0;

        if i9 >= 0 goto label1;

        $i8 = lengthof r0;

        i9 = $i8 - i0;

     label1:
        i11 = 0;

     label2:
        if i11 >= i9 goto label8;

        $i1 = i0 + i11;

        $b2 = r0[$i1];

        $s15 = (short) $b2;

        $s3 = 255 & $s15;

        c4 = (char) $s3;

        $i16 = (int) c4;

        i12 = $i16 - 48;

        if i12 < 0 goto label3;

        if i12 >= i6 goto label3;

        if i12 < 10 goto label5;

     label3:
        $i17 = (int) c4;

        $i13 = 10 + $i17;

        $i14 = $i13 - 65;

        i12 = $i14;

        if $i14 < 10 goto label4;

        if $i14 < i6 goto label5;

     label4:
        $i18 = (int) c4;

        $i5 = 10 + $i18;

        i12 = $i5 - 97;

     label5:
        if i12 < 0 goto label6;

        if i12 < i6 goto label7;

     label6:
        $r4 = new java.lang.NumberFormatException;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int)>(r0, i0, i9);

        specialinvoke $r4.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label7:
        $i7 = i10 * i6;

        i10 = $i7 + i12;

        i11 = i11 + 1;

        goto label2;

     label8:
        return i10;
    }

    public static byte[] parseBytes(java.lang.String, int)
    {
        byte[] r1;
        byte $b6;
        int $i0, $i1, $i2, i3, $i4, $i5, i7;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 / 2;

        r1 = newarray (byte)[$i1];

        i7 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i7 >= $i2 goto label2;

        $i4 = i7 / 2;

        $i5 = staticinvoke <org.eclipse.jetty.util.TypeUtil: int parseInt(java.lang.String,int,int,int)>(r0, i7, 2, i3);

        $b6 = (byte) $i5;

        r1[$i4] = $b6;

        i7 = i7 + 2;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.String toString(byte[], int)
    {
        byte[] r1;
        short s2, $s17;
        byte b1;
        int i0, i3, $i4, $i5, $i7, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, $i18, $i19;
        java.lang.String $r2;
        char $c6, $c8;
        java.lang.StringBuilder $r3;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i0 = lengthof r1;

        i14 = 0;

     label1:
        if i14 >= i0 goto label4;

        b1 = r1[i14];

        $s17 = (short) b1;

        s2 = 255 & $s17;

        $i18 = (int) s2;

        $i4 = $i18 / i3;

        $i5 = $i4 % i3;

        i15 = 48 + $i5;

        if i15 <= 57 goto label2;

        $i11 = i15 - 48;

        $i12 = $i11 - 10;

        i15 = 97 + $i12;

     label2:
        $c6 = (char) i15;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $i19 = (int) s2;

        $i7 = $i19 % i3;

        $i13 = 48 + $i7;

        i16 = $i13;

        if $i13 <= 57 goto label3;

        $i9 = $i13 - 48;

        $i10 = $i9 - 10;

        i16 = 97 + $i10;

     label3:
        $c8 = (char) i16;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        i14 = i14 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static byte convertHexDigit(byte)
    {
        byte b0, $b3, b6;
        int $i1, $i2, $i4, $i5, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r2, $r3, $r5;

        b0 := @parameter0: byte;

        $b3 = b0 & 31;

        $i7 = (int) b0;

        $i1 = $i7 >> 6;

        $i2 = $i1 * 25;

        $i8 = (int) $b3;

        $i4 = $i8 + $i2;

        $i5 = $i4 - 16;

        b6 = (byte) $i5;

        $i9 = (int) b6;

        if $i9 < 0 goto label1;

        $i10 = (int) b6;

        if $i10 <= 15 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!hex ");

        $i11 = (int) b0;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label2:
        return b6;
    }

    public static int convertHexDigit(int)
    {
        java.lang.NumberFormatException $r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        $i3 = i0 & 31;

        $i1 = i0 >> 6;

        $i2 = $i1 * 25;

        $i4 = $i3 + $i2;

        i5 = $i4 - 16;

        if i5 < 0 goto label1;

        if i5 <= 15 goto label2;

     label1:
        $r0 = new java.lang.NumberFormatException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!hex ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        return i5;
    }

    public static void toHex(byte, java.lang.Appendable)
    {
        short $s1, $s11;
        byte b0, $b7, $b9, $b10;
        int $i2, $i3, $i5, i8, $i12;
        java.lang.Appendable r0;
        char $c4, $c6;
        java.io.IOException $r1;
        java.lang.RuntimeException $r3;

        b0 := @parameter0: byte;

        r0 := @parameter1: java.lang.Appendable;

     label1:
        $s11 = (short) b0;

        $s1 = 240 & $s11;

        $i12 = (int) $s1;

        $i2 = $i12 >> 4;

        i8 = 15 & $i2;

        if i8 <= 9 goto label2;

        $b9 = 55;

        goto label3;

     label2:
        $b9 = 48;

     label3:
        $i3 = $b9 + i8;

        $c4 = (char) $i3;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c4);

        $b7 = 15 & b0;

        if $b7 <= 9 goto label4;

        $b10 = 55;

        goto label5;

     label4:
        $b10 = 48;

     label5:
        $i5 = $b10 + $b7;

        $c6 = (char) $i5;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c6);

     label6:
        goto label8;

     label7:
        $r1 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r1);

        throw $r3;

     label8:
        return;

        catch java.io.IOException from label1 to label6 with label7;
    }

    public static void toHex(int, java.lang.Appendable) throws java.io.IOException
    {
        byte $b39, $b40, $b41, $b42, $b43, $b44, $b45, $b46;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i9, $i10, $i11, $i13, $i14, $i15, $i17, $i18, $i19, $i21, $i22, $i23, $i25, $i26, $i27, $i29, $i31, $i32, $i33, $i34, $i35, $i36, $i37, i38, $i48;
        java.lang.Appendable r0;
        char $c4, $c8, $c12, $c16, $c20, $c24, $c28, $c30;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Appendable;

        $i1 = -268435456 & i0;

        $i2 = $i1 >> 28;

        i38 = 15 & $i2;

        if i38 <= 9 goto label01;

        $b39 = 55;

        goto label02;

     label01:
        $b39 = 48;

     label02:
        $i3 = $b39 + i38;

        $c4 = (char) $i3;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c4);

        $i5 = 251658240 & i0;

        $i6 = $i5 >> 24;

        $i37 = 15 & $i6;

        if $i37 <= 9 goto label03;

        $b40 = 55;

        goto label04;

     label03:
        $b40 = 48;

     label04:
        $i7 = $b40 + $i37;

        $c8 = (char) $i7;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c8);

        $i9 = 15728640 & i0;

        $i10 = $i9 >> 20;

        $i36 = 15 & $i10;

        if $i36 <= 9 goto label05;

        $b41 = 55;

        goto label06;

     label05:
        $b41 = 48;

     label06:
        $i11 = $b41 + $i36;

        $c12 = (char) $i11;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c12);

        $i13 = 983040 & i0;

        $i14 = $i13 >> 16;

        $i35 = 15 & $i14;

        if $i35 <= 9 goto label07;

        $b42 = 55;

        goto label08;

     label07:
        $b42 = 48;

     label08:
        $i15 = $b42 + $i35;

        $c16 = (char) $i15;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c16);

        $i48 = (int) 61440;

        $i17 = $i48 & i0;

        $i18 = $i17 >> 12;

        $i34 = 15 & $i18;

        if $i34 <= 9 goto label09;

        $b43 = 55;

        goto label10;

     label09:
        $b43 = 48;

     label10:
        $i19 = $b43 + $i34;

        $c20 = (char) $i19;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c20);

        $i21 = 3840 & i0;

        $i22 = $i21 >> 8;

        $i33 = 15 & $i22;

        if $i33 <= 9 goto label11;

        $b44 = 55;

        goto label12;

     label11:
        $b44 = 48;

     label12:
        $i23 = $b44 + $i33;

        $c24 = (char) $i23;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c24);

        $i25 = 240 & i0;

        $i26 = $i25 >> 4;

        $i32 = 15 & $i26;

        if $i32 <= 9 goto label13;

        $b45 = 55;

        goto label14;

     label13:
        $b45 = 48;

     label14:
        $i27 = $b45 + $i32;

        $c28 = (char) $i27;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c28);

        $i31 = 15 & i0;

        if $i31 <= 9 goto label15;

        $b46 = 55;

        goto label16;

     label15:
        $b46 = 48;

     label16:
        $i29 = $b46 + $i31;

        $c30 = (char) $i29;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c30);

        staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>(0, 36);

        return;
    }

    public static void toHex(long, java.lang.Appendable) throws java.io.IOException
    {
        java.lang.Appendable r0;
        int $i2, $i3;
        long l0, $l1;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.Appendable;

        $l1 = l0 >> 32;

        $i2 = (int) $l1;

        staticinvoke <org.eclipse.jetty.util.TypeUtil: void toHex(int,java.lang.Appendable)>($i2, r0);

        $i3 = (int) l0;

        staticinvoke <org.eclipse.jetty.util.TypeUtil: void toHex(int,java.lang.Appendable)>($i3, r0);

        return;
    }

    public static java.lang.String toHexString(byte)
    {
        byte[] $r0;
        java.lang.String $r1;
        byte b0;

        b0 := @parameter0: byte;

        $r0 = newarray (byte)[1];

        $r0[0] = b0;

        $r1 = staticinvoke <org.eclipse.jetty.util.TypeUtil: java.lang.String toHexString(byte[],int,int)>($r0, 0, 1);

        return $r1;
    }

    public static java.lang.String toHexString(byte[])
    {
        int $i0;
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.eclipse.jetty.util.TypeUtil: java.lang.String toHexString(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static java.lang.String toHexString(byte[], int, int)
    {
        byte[] r2;
        short s4, $s18;
        byte $b3;
        int i0, i1, $i2, $i5, $i6, $i8, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, $i19, $i20;
        java.lang.String $r1;
        char $c7, $c9;
        java.lang.StringBuilder $r3;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i15 = i0;

     label1:
        $i2 = i0 + i1;

        if i15 >= $i2 goto label4;

        $b3 = r2[i15];

        $s18 = (short) $b3;

        s4 = 255 & $s18;

        $i19 = (int) s4;

        $i5 = $i19 / 16;

        $i6 = $i5 % 16;

        i16 = 48 + $i6;

        if i16 <= 57 goto label2;

        $i12 = i16 - 48;

        $i13 = $i12 - 10;

        i16 = 65 + $i13;

     label2:
        $c7 = (char) i16;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        $i20 = (int) s4;

        $i8 = $i20 % 16;

        $i14 = 48 + $i8;

        i17 = $i14;

        if $i14 <= 57 goto label3;

        $i10 = $i14 - 48;

        $i11 = $i10 - 10;

        i17 = 97 + $i11;

     label3:
        $c9 = (char) i17;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);

        i15 = i15 + 1;

        goto label1;

     label4:
        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static byte[] fromHexString(java.lang.String)
    {
        byte[] r1;
        byte $b10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11;
        java.lang.String r0, $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 % 2;

        if $i1 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r3;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 / 2;

        r1 = newarray (byte)[$i3];

        i11 = 0;

     label2:
        $i4 = lengthof r1;

        if i11 >= $i4 goto label3;

        $i7 = i11 * 2;

        $i5 = i11 * 2;

        $i6 = $i5 + 2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i7, $i6);

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $i9 = 255 & $i8;

        $b10 = (byte) $i9;

        r1[i11] = $b10;

        i11 = i11 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static void dump(java.lang.Class)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r0, $r2, $r4;
        java.lang.Class r3;
        java.lang.String $r5;
        java.lang.ClassLoader $r6;

        r3 := @parameter0: java.lang.Class;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dump: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = virtualinvoke r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.eclipse.jetty.util.TypeUtil: void dump(java.lang.ClassLoader)>($r6);

        return;
    }

    public static void dump(java.lang.ClassLoader)
    {
        java.io.PrintStream $r0, $r2;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r5;
        java.lang.ClassLoader r6;

        r6 := @parameter0: java.lang.ClassLoader;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Dump Loaders:");

     label1:
        if r6 == null goto label2;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  loader ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

        r6 = virtualinvoke r6.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label1;

     label2:
        return;
    }

    public static byte[] readLine(java.io.InputStream) throws java.io.IOException
    {
        byte[] r1, r2, $r3;
        byte $b8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, i13, i14, $i15, $i17;
        boolean $z0;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 = newarray (byte)[256];

        i13 = 0;

        i14 = 0;

     label1:
        $i15 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i15 >= 0 goto label2;

        goto label6;

     label2:
        i14 = i14 + 1;

        if i14 != 1 goto label3;

        $i12 = <org.eclipse.jetty.util.TypeUtil: int LF>;

        if $i15 != $i12 goto label3;

        goto label1;

     label3:
        $i0 = <org.eclipse.jetty.util.TypeUtil: int CR>;

        if $i15 == $i0 goto label6;

        $i5 = <org.eclipse.jetty.util.TypeUtil: int LF>;

        if $i15 != $i5 goto label4;

        goto label6;

     label4:
        $i6 = lengthof r1;

        if i13 < $i6 goto label5;

        r2 = r1;

        $i9 = lengthof r1;

        $i10 = $i9 + 256;

        r1 = newarray (byte)[$i10];

        $i11 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, $i11);

     label5:
        $i7 = i13;

        i13 = i13 + 1;

        $b8 = (byte) $i15;

        r1[$i7] = $b8;

        goto label1;

     label6:
        $i17 = (int) -1;

        if $i15 != $i17 goto label7;

        if i13 != 0 goto label7;

        return null;

     label7:
        $i1 = <org.eclipse.jetty.util.TypeUtil: int CR>;

        if $i15 != $i1 goto label8;

        $i2 = virtualinvoke r0.<java.io.InputStream: int available()>();

        if $i2 < 1 goto label8;

        $z0 = virtualinvoke r0.<java.io.InputStream: boolean markSupported()>();

        if $z0 == 0 goto label8;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>(1);

        $i3 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i4 = <org.eclipse.jetty.util.TypeUtil: int LF>;

        if $i3 == $i4 goto label8;

        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label8:
        $r3 = newarray (byte)[i13];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, i13);

        return $r3;
    }

    public static java.net.URL jarFor(java.lang.String)
    {
        java.net.URL $r5, $r7;
        java.lang.Exception $r9;
        int $i0;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r1, $r4, $r6, $r8, r11;
        org.eclipse.jetty.util.log.Logger $r10;
        boolean $z0;

        r11 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r11.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <org.eclipse.jetty.util.Loader: java.net.URL getResource(java.lang.Class,java.lang.String,boolean)>(null, $r4, 0);

        $r6 = virtualinvoke $r5.<java.net.URL: java.lang.String toString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("jar:file:");

        if $z0 == 0 goto label3;

        $r7 = new java.net.URL;

        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(java.lang.String)>("!/");

        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(4, $i0);

        specialinvoke $r7.<java.net.URL: void <init>(java.lang.String)>($r8);

     label2:
        return $r7;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = <org.eclipse.jetty.util.TypeUtil: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r10.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r9);

     label5:
        return null;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static java.lang.Object call(java.lang.Class, java.lang.String, java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException, java.lang.NoSuchMethodException
    {
        java.lang.Object[] r8;
        java.lang.NoSuchMethodException $r2;
        java.lang.reflect.Method[] $r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r3, $r5;
        java.lang.reflect.Method $r4, $r6, $r9, $r11, $r13;
        boolean $z0, $z1, $z2;
        java.lang.IllegalAccessException $r17;
        java.lang.Class[] $r7;
        java.lang.IllegalArgumentException $r15;
        java.lang.Class r0, $r14;
        java.lang.Object r10, $r12;
        org.eclipse.jetty.util.log.Logger $r16, $r18;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.Object;

        r8 := @parameter3: java.lang.Object[];

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i4 = 0;

     label01:
        if $r1 == null goto label12;

        $i0 = lengthof $r1;

        if i4 >= $i0 goto label12;

        $r4 = $r1[i4];

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label02;

        goto label11;

     label02:
        $r6 = $r1[i4];

        $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r7;

        $i1 = lengthof r8;

        if $i2 == $i1 goto label03;

        goto label11;

     label03:
        $r9 = $r1[i4];

        $i3 = virtualinvoke $r9.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3);

        if r10 != null goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        if $z1 == $z2 goto label06;

        goto label11;

     label06:
        if r10 != null goto label07;

        $r13 = $r1[i4];

        $r14 = virtualinvoke $r13.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        if $r14 == r0 goto label07;

        goto label11;

     label07:
        $r11 = $r1[i4];

        $r12 = virtualinvoke $r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r10, r8);

     label08:
        return $r12;

     label09:
        $r17 := @caughtexception;

        $r18 = <org.eclipse.jetty.util.TypeUtil: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r18.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r17);

        goto label11;

     label10:
        $r15 := @caughtexception;

        $r16 = <org.eclipse.jetty.util.TypeUtil: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r16.<org.eclipse.jetty.util.log.Logger: void ignore(java.lang.Throwable)>($r15);

     label11:
        i4 = i4 + 1;

        goto label01;

     label12:
        $r2 = new java.lang.NoSuchMethodException;

        specialinvoke $r2.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>(r3);

        throw $r2;

        catch java.lang.IllegalAccessException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label07 to label08 with label10;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r89;
        java.lang.reflect.Method $r93, $r97, $r101, $r105, $r109, $r113, $r117, $r120, $r123, $r126, $r129, $r132, $r135, $r138;
        java.lang.Class $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r54, $r60, $r62, $r64, $r66, $r68, $r70, $r72, $r74, $r76, $r90, $r92, $r94, $r96, $r98, $r100, $r102, $r104, $r106, $r108, $r110, $r112, $r114, $r116, $r118, $r121, $r124, $r127, $r130, $r133, $r136;
        org.eclipse.jetty.util.log.Logger $r0;
        java.lang.Exception $r139;
        java.lang.Error $r140;
        java.util.HashMap $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r55, $r56, $r57, $r58, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r75, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r91, $r95, $r99, $r103, $r107, $r111, $r115, $r119, $r122, $r125, $r128, $r131, $r134, $r137;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/util/TypeUtil;");

        <org.eclipse.jetty.util.TypeUtil: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        <org.eclipse.jetty.util.TypeUtil: int CR> = 13;

        <org.eclipse.jetty.util.TypeUtil: int LF> = 10;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class> = $r1;

        $r3 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", $r2);

        $r5 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", $r4);

        $r7 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r6 = <java.lang.Character: java.lang.Class TYPE>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", $r6);

        $r9 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", $r8);

        $r11 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r10 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", $r10);

        $r13 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r12 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", $r12);

        $r15 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r14 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", $r14);

        $r17 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r16 = <java.lang.Short: java.lang.Class TYPE>;

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", $r16);

        $r19 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r18 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", $r18);

        $r21 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r20 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r21.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Boolean.TYPE", $r20);

        $r23 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r22 = <java.lang.Byte: java.lang.Class TYPE>;

        virtualinvoke $r23.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Byte.TYPE", $r22);

        $r25 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r24 = <java.lang.Character: java.lang.Class TYPE>;

        virtualinvoke $r25.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Character.TYPE", $r24);

        $r27 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r26 = <java.lang.Double: java.lang.Class TYPE>;

        virtualinvoke $r27.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Double.TYPE", $r26);

        $r29 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r28 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r29.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Float.TYPE", $r28);

        $r31 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r30 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r31.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Integer.TYPE", $r30);

        $r33 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r32 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke $r33.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Long.TYPE", $r32);

        $r35 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r34 = <java.lang.Short: java.lang.Class TYPE>;

        virtualinvoke $r35.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Short.TYPE", $r34);

        $r37 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r36 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r37.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Void.TYPE", $r36);

        $r38 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r38.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Boolean", class "Ljava/lang/Boolean;");

        $r39 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r39.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Byte", class "Ljava/lang/Byte;");

        $r40 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r40.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Character", class "Ljava/lang/Character;");

        $r41 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r41.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Double", class "Ljava/lang/Double;");

        $r42 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r42.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Float", class "Ljava/lang/Float;");

        $r43 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r43.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Integer", class "Ljava/lang/Integer;");

        $r44 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r44.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Long", class "Ljava/lang/Long;");

        $r45 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r45.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.Short", class "Ljava/lang/Short;");

        $r46 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r46.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Boolean", class "Ljava/lang/Boolean;");

        $r47 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r47.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Byte", class "Ljava/lang/Byte;");

        $r48 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r48.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Character", class "Ljava/lang/Character;");

        $r49 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r49.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Double", class "Ljava/lang/Double;");

        $r50 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r50.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Float", class "Ljava/lang/Float;");

        $r51 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r51.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Integer", class "Ljava/lang/Integer;");

        $r52 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r52.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Long", class "Ljava/lang/Long;");

        $r53 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r53.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Short", class "Ljava/lang/Short;");

        $r55 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        $r54 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r55.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r54);

        $r56 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r56.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("string", class "Ljava/lang/String;");

        $r57 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r57.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("String", class "Ljava/lang/String;");

        $r58 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap name2Class>;

        virtualinvoke $r58.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.lang.String", class "Ljava/lang/String;");

        $r59 = new java.util.HashMap;

        specialinvoke $r59.<java.util.HashMap: void <init>()>();

        <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name> = $r59;

        $r61 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        $r60 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r61.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, "boolean");

        $r63 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        $r62 = <java.lang.Byte: java.lang.Class TYPE>;

        virtualinvoke $r63.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r62, "byte");

        $r65 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        $r64 = <java.lang.Character: java.lang.Class TYPE>;

        virtualinvoke $r65.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r64, "char");

        $r67 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        $r66 = <java.lang.Double: java.lang.Class TYPE>;

        virtualinvoke $r67.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r66, "double");

        $r69 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        $r68 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r69.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r68, "float");

        $r71 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        $r70 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r71.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r70, "int");

        $r73 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        $r72 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke $r73.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r72, "long");

        $r75 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        $r74 = <java.lang.Short: java.lang.Class TYPE>;

        virtualinvoke $r75.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r74, "short");

        $r77 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        $r76 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r77.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r76, "void");

        $r78 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r78.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Boolean;", "java.lang.Boolean");

        $r79 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r79.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Byte;", "java.lang.Byte");

        $r80 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r80.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Character;", "java.lang.Character");

        $r81 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r81.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Double;", "java.lang.Double");

        $r82 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r82.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Float;", "java.lang.Float");

        $r83 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r83.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", "java.lang.Integer");

        $r84 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r84.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", "java.lang.Long");

        $r85 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r85.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Short;", "java.lang.Short");

        $r86 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r86.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, "void");

        $r87 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Name>;

        virtualinvoke $r87.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", "java.lang.String");

        $r88 = new java.util.HashMap;

        specialinvoke $r88.<java.util.HashMap: void <init>()>();

        <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value> = $r88;

     label1:
        $r89 = newarray (java.lang.Class)[1];

        $r89[0] = class "Ljava/lang/String;";

        $r91 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r92 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r90 = class "Ljava/lang/Boolean;";

        $r93 = virtualinvoke $r90.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r91.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r92, $r93);

        $r95 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r96 = <java.lang.Byte: java.lang.Class TYPE>;

        $r94 = class "Ljava/lang/Byte;";

        $r97 = virtualinvoke $r94.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r95.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r96, $r97);

        $r99 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r100 = <java.lang.Double: java.lang.Class TYPE>;

        $r98 = class "Ljava/lang/Double;";

        $r101 = virtualinvoke $r98.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r99.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r100, $r101);

        $r103 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r104 = <java.lang.Float: java.lang.Class TYPE>;

        $r102 = class "Ljava/lang/Float;";

        $r105 = virtualinvoke $r102.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r103.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r104, $r105);

        $r107 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r108 = <java.lang.Integer: java.lang.Class TYPE>;

        $r106 = class "Ljava/lang/Integer;";

        $r109 = virtualinvoke $r106.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r107.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r108, $r109);

        $r111 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r112 = <java.lang.Long: java.lang.Class TYPE>;

        $r110 = class "Ljava/lang/Long;";

        $r113 = virtualinvoke $r110.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r111.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r112, $r113);

        $r115 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r116 = <java.lang.Short: java.lang.Class TYPE>;

        $r114 = class "Ljava/lang/Short;";

        $r117 = virtualinvoke $r114.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r115.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r116, $r117);

        $r119 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r118 = class "Ljava/lang/Boolean;";

        $r120 = virtualinvoke $r118.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r119.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Boolean;", $r120);

        $r122 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r121 = class "Ljava/lang/Byte;";

        $r123 = virtualinvoke $r121.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r122.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Byte;", $r123);

        $r125 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r124 = class "Ljava/lang/Double;";

        $r126 = virtualinvoke $r124.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r125.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Double;", $r126);

        $r128 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r127 = class "Ljava/lang/Float;";

        $r129 = virtualinvoke $r127.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r128.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Float;", $r129);

        $r131 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r130 = class "Ljava/lang/Integer;";

        $r132 = virtualinvoke $r130.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r131.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r132);

        $r134 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r133 = class "Ljava/lang/Long;";

        $r135 = virtualinvoke $r133.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r134.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r135);

        $r137 = <org.eclipse.jetty.util.TypeUtil: java.util.HashMap class2Value>;

        $r136 = class "Ljava/lang/Short;";

        $r138 = virtualinvoke $r136.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r89);

        virtualinvoke $r137.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Short;", $r138);

     label2:
        goto label4;

     label3:
        $r139 := @caughtexception;

        $r140 = new java.lang.Error;

        specialinvoke $r140.<java.lang.Error: void <init>(java.lang.Throwable)>($r139);

        throw $r140;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
