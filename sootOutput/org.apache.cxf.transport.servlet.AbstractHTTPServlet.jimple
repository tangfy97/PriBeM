public abstract class org.apache.cxf.transport.servlet.AbstractHTTPServlet extends javax.servlet.http.HttpServlet implements javax.servlet.Filter
{
    private static final long serialVersionUID;
    private static final java.util.logging.Logger LOG;
    private static final java.util.ResourceBundle BUNDLE;
    private static final java.util.List KNOWN_HTTP_VERBS;
    private static final java.lang.String STATIC_RESOURCES_PARAMETER;
    private static final java.lang.String STATIC_WELCOME_FILE_PARAMETER;
    private static final java.lang.String STATIC_RESOURCES_MAP_RESOURCE;
    private static final java.lang.String REDIRECTS_PARAMETER;
    private static final java.lang.String REDIRECT_SERVLET_NAME_PARAMETER;
    private static final java.lang.String REDIRECT_SERVLET_PATH_PARAMETER;
    private static final java.lang.String REDIRECT_ATTRIBUTES_PARAMETER;
    private static final java.lang.String REDIRECT_QUERY_CHECK_PARAMETER;
    private static final java.util.Map DEFAULT_STATIC_CONTENT_TYPES;
    private java.util.List staticResourcesList;
    private java.lang.String staticWelcomeFile;
    private java.util.List redirectList;
    private java.lang.String dispatcherServletPath;
    private java.lang.String dispatcherServletName;
    private java.util.Map redirectAttributes;
    private java.util.Map staticContentTypes;
    private boolean redirectQueryCheck;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;
        java.util.Map $r2;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        specialinvoke r0.<javax.servlet.http.HttpServlet: void <init>()>();

        $r1 = new java.util.HashMap;

        $r2 = <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map DEFAULT_STATIC_CONTENT_TYPES>;

        specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r2);

        r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map staticContentTypes> = $r1;

        return;
    }

    public void init(javax.servlet.ServletConfig) throws javax.servlet.ServletException
    {
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;
        javax.servlet.ServletConfig r1;
        java.util.List $r3, $r6;
        java.util.Map $r12;
        java.lang.Boolean $r8;
        java.lang.String $r2, $r4, $r5, $r7, $r9, $r10, $r11;
        boolean $z0;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r1 := @parameter0: javax.servlet.ServletConfig;

        specialinvoke r0.<javax.servlet.http.HttpServlet: void init(javax.servlet.ServletConfig)>(r1);

        $r2 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("static-resources-list");

        $r3 = staticinvoke <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List parseListSequence(java.lang.String)>($r2);

        r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List staticResourcesList> = $r3;

        $r4 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("static-welcome-file");

        r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String staticWelcomeFile> = $r4;

        $r5 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("redirects-list");

        $r6 = staticinvoke <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List parseListSequence(java.lang.String)>($r5);

        r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List redirectList> = $r6;

        $r7 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("redirect-query-check");

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r7);

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: boolean redirectQueryCheck> = $z0;

        $r9 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("redirect-servlet-name");

        r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String dispatcherServletName> = $r9;

        $r10 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("redirect-servlet-path");

        r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String dispatcherServletPath> = $r10;

        $r11 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("redirect-attributes");

        $r12 = staticinvoke <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map parseMapSequence(java.lang.String)>($r11);

        r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map redirectAttributes> = $r12;

        return;
    }

    protected void finalizeServletInit(javax.servlet.ServletConfig)
    {
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;
        java.lang.Object[] $r11;
        org.apache.cxf.common.i18n.Message $r10;
        java.util.ResourceBundle $r12;
        java.util.Map $r7;
        java.lang.String r6, $r8, $r13;
        boolean $z0;
        java.util.Properties $r2;
        javax.servlet.ServletConfig r15;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.io.IOException $r9;
        java.util.logging.Logger $r14;
        java.lang.Object $r5;
        java.io.InputStream $r1, r16;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r15 := @parameter0: javax.servlet.ServletConfig;

        $r1 = virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.io.InputStream getResourceAsStream(java.lang.String)>("/WEB-INF/cxfServletStaticResourcesMap.txt");

        r16 = $r1;

        if $r1 != null goto label1;

        r16 = virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.io.InputStream getResourceAsStream(java.lang.String)>("/cxfServletStaticResourcesMap.txt");

     label1:
        if r16 == null goto label6;

     label2:
        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        virtualinvoke $r2.<java.util.Properties: void load(java.io.InputStream)>(r16);

        $r3 = virtualinvoke $r2.<java.util.Properties: java.util.Set stringPropertyNames()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map staticContentTypes>;

        $r8 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r6);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r8);

        goto label3;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = new org.apache.cxf.common.i18n.Message;

        $r12 = <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.ResourceBundle BUNDLE>;

        $r11 = newarray (java.lang.Object)[0];

        specialinvoke $r10.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("STATIC_RESOURCES_MAP_LOAD_FAILURE", $r12, $r11);

        $r13 = virtualinvoke $r10.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        $r14 = <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.logging.Logger LOG>;

        virtualinvoke $r14.<java.util.logging.Logger: void warning(java.lang.String)>($r13);

     label6:
        return;

        catch java.io.IOException from label2 to label4 with label5;
    }

    protected java.io.InputStream getResourceAsStream(java.lang.String)
    {
        org.apache.cxf.Bus $r3, $r4;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r2;
        org.apache.cxf.resource.ResourceManager r6;
        java.lang.Object $r5, $r7;
        java.lang.String r0;
        java.io.InputStream $r1, r8;

        r2 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>(r0, class "Lorg/apache/cxf/transport/servlet/AbstractHTTPServlet;");

        r8 = $r1;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r2.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: org.apache.cxf.Bus getBus()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke r2.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: org.apache.cxf.Bus getBus()>();

        $r5 = interfaceinvoke $r4.<org.apache.cxf.Bus: java.lang.Object getExtension(java.lang.Class)>(class "Lorg/apache/cxf/resource/ResourceManager;");

        r6 = (org.apache.cxf.resource.ResourceManager) $r5;

        if r6 == null goto label1;

        $r7 = interfaceinvoke r6.<org.apache.cxf.resource.ResourceManager: java.lang.Object resolveResource(java.lang.String,java.lang.Class)>(r0, class "Ljava/io/InputStream;");

        r8 = (java.io.InputStream) $r7;

     label1:
        return r8;
    }

    public final void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException
    {
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet$1 $r1;
        javax.servlet.FilterConfig r2;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r2 := @parameter0: javax.servlet.FilterConfig;

        $r1 = new org.apache.cxf.transport.servlet.AbstractHTTPServlet$1;

        specialinvoke $r1.<org.apache.cxf.transport.servlet.AbstractHTTPServlet$1: void <init>(org.apache.cxf.transport.servlet.AbstractHTTPServlet,javax.servlet.FilterConfig)>(r0, r2);

        virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void init(javax.servlet.ServletConfig)>($r1);

        return;
    }

    protected static java.util.List parseListSequence(java.lang.String)
    {
        java.lang.String[] $r2;
        int i0, $i1, i2;
        java.lang.String r0, r3, $r4;
        java.util.regex.Pattern $r5;
        java.util.LinkedList $r1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label4;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r2 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, " ");

        i0 = lengthof $r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r3 = $r2[i2];

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 <= 0 goto label2;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r4);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r1;

     label4:
        return null;
    }

    protected static java.util.Map parseMapSequence(java.lang.String)
    {
        java.util.HashMap $r2;
        java.lang.String[] $r3, $r6;
        java.util.Map $r0;
        int i0, $i1, $i2, i3;
        java.lang.String $r1, r4, $r5, $r7, $r8, $r9, $r10, r11;

        r11 := @parameter0: java.lang.String;

        if r11 == null goto label6;

        $r1 = virtualinvoke r11.<java.lang.String: java.lang.String trim()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r1, " ");

        i0 = lengthof $r3;

        i3 = 0;

     label1:
        if i3 >= i0 goto label5;

        r4 = $r3[i3];

        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        goto label4;

     label2:
        $r6 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r5, "=");

        $i2 = lengthof $r6;

        if $i2 != 2 goto label3;

        $r7 = $r6[0];

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $r9 = $r6[1];

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r10);

        goto label4;

     label3:
        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "");

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        return $r2;

     label6:
        $r0 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r0;
    }

    protected void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2);

        return;
    }

    protected void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2);

        return;
    }

    protected void doDelete(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2);

        return;
    }

    protected void doPut(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2);

        return;
    }

    protected void doHead(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2);

        return;
    }

    protected void doOptions(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r2);

        return;
    }

    public void service(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws javax.servlet.ServletException, java.io.IOException
    {
        javax.servlet.ServletRequest r0;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r6;
        javax.servlet.ServletException $r8;
        javax.servlet.http.HttpServletResponse r3;
        java.lang.ClassCastException $r7;
        javax.servlet.http.HttpServletRequest r1;
        java.util.List $r5;
        javax.servlet.ServletResponse r2;
        java.lang.String $r4;
        boolean $z0;

        r6 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r0 := @parameter0: javax.servlet.ServletRequest;

        r2 := @parameter1: javax.servlet.ServletResponse;

     label1:
        r1 = (javax.servlet.http.HttpServletRequest) r0;

        r3 = (javax.servlet.http.HttpServletResponse) r2;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new javax.servlet.ServletException;

        specialinvoke $r8.<javax.servlet.ServletException: void <init>(java.lang.String)>("Unrecognized HTTP request or response object");

        throw $r8;

     label4:
        $r4 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $r5 = <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List KNOWN_HTTP_VERBS>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>($r4);

        if $z0 == 0 goto label5;

        specialinvoke r6.<javax.servlet.http.HttpServlet: void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r3);

        goto label6;

     label5:
        virtualinvoke r6.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r1, r3);

     label6:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    protected void handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException
    {
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;
        javax.servlet.http.HttpServletRequest r5;
        java.lang.String $r1, $r7, $r8, $r10, $r12, $r13, $r14;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9;
        javax.servlet.http.HttpServletResponse r6;
        java.util.List $r2, $r3, $r4, $r9, $r11;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r5 := @parameter0: javax.servlet.http.HttpServletRequest;

        r6 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r1 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String dispatcherServletPath>;

        if $r1 != null goto label01;

        $r12 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String dispatcherServletName>;

        if $r12 == null goto label04;

     label01:
        $r2 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List redirectList>;

        if $r2 == null goto label02;

        $r11 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List redirectList>;

        $z5 = specialinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: boolean matchPath(java.util.List,javax.servlet.http.HttpServletRequest)>($r11, r5);

        if $z5 != 0 goto label03;

     label02:
        $r3 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List redirectList>;

        if $r3 != null goto label04;

     label03:
        $r10 = interfaceinvoke r5.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

        virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void redirect(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r5, r6, $r10);

        return;

     label04:
        $r4 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List staticResourcesList>;

        if $r4 == null goto label05;

        $r9 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List staticResourcesList>;

        $z4 = specialinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: boolean matchPath(java.util.List,javax.servlet.http.HttpServletRequest)>($r9, r5);

        if $z4 == 0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        z0 = $z6;

        $r13 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String staticWelcomeFile>;

        if $r13 == null goto label08;

        $r7 = interfaceinvoke r5.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

        $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r7);

        if $z2 != 0 goto label07;

        $r8 = interfaceinvoke r5.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z3 == 0 goto label08;

     label07:
        $z9 = 1;

        $z8 = 1;

        goto label09;

     label08:
        $z9 = 0;

        $z8 = 0;

     label09:
        z1 = $z9;

        if z0 != 0 goto label10;

        if $z8 == 0 goto label13;

     label10:
        if z1 == 0 goto label11;

        $r14 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String staticWelcomeFile>;

        goto label12;

     label11:
        $r14 = interfaceinvoke r5.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

     label12:
        virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void serveStaticContent(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r5, r6, $r14);

        return;

     label13:
        virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: void invoke(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(r5, r6);

        return;
    }

    private boolean matchPath(java.util.List, javax.servlet.http.HttpServletRequest)
    {
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r2;
        javax.servlet.http.HttpServletRequest r0;
        java.util.regex.Matcher $r6;
        int $i0;
        java.lang.String $r1, $r7, r12;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r13;
        java.util.List r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.util.regex.Pattern r5;

        r2 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r3 := @parameter0: java.util.List;

        r0 := @parameter1: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>();

        r12 = $r1;

        if $r1 != null goto label1;

        r12 = "/";

     label1:
        $z0 = r2.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: boolean redirectQueryCheck>;

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

        if $r7 == null goto label2;

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r13 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r4 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.regex.Pattern) $r4;

        $r6 = virtualinvoke r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r12);

        $z1 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label4;

        return 1;

     label4:
        goto label3;

     label5:
        return 0;
    }

    protected abstract org.apache.cxf.Bus getBus();

    protected void serveStaticContent(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String) throws javax.servlet.ServletException
    {
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;
        javax.servlet.ServletException $r22, $r24;
        javax.servlet.http.HttpServletRequest r19;
        javax.servlet.ServletOutputStream $r20;
        int $i0, $i1, $i2, $i4;
        java.lang.String r1, $r4, $r5, $r11, $r18;
        javax.servlet.http.HttpServletResponse r3;
        java.io.IOException $r12;
        java.lang.StringBuilder $r8, $r9, $r10, $r15, $r16, $r17, $r21, $r23;
        java.io.InputStream $r2;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r19 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: javax.servlet.http.HttpServletResponse;

        r1 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r22 = new javax.servlet.ServletException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Static resource ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not available");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<javax.servlet.ServletException: void <init>(java.lang.String)>($r11);

        throw $r22;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i4 = (int) -1;

        if $i0 == $i4 goto label2;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $i2 = $i0 + 1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        $r5 = virtualinvoke r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String getStaticResourceContentType(java.lang.String)>($r4);

        if $r5 == null goto label2;

        interfaceinvoke r3.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r5);

     label2:
        $r20 = interfaceinvoke r3.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r2, $r20);

        virtualinvoke $r20.<javax.servlet.ServletOutputStream: void flush()>();

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r24 = new javax.servlet.ServletException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Static resource ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be written to the output stream");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<javax.servlet.ServletException: void <init>(java.lang.String)>($r18);

        throw $r24;

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    protected java.lang.String getStaticResourceContentType(java.lang.String)
    {
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1, $r4;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map staticContentTypes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    protected void redirect(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String) throws javax.servlet.ServletException
    {
        javax.servlet.ServletException $r27, $r35;
        java.util.Map $r11;
        boolean $z0;
        javax.servlet.RequestDispatcher r10, $r42;
        java.util.Set $r12;
        java.lang.StringBuilder $r5, $r6, $r8, $r22, $r23, $r24, $r28, $r29, $r30, $r32, $r36, $r37, $r38, $r39;
        java.lang.Throwable $r34;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet r0;
        org.apache.cxf.transport.servlet.AbstractHTTPServlet$HttpServletRequestFilter $r14;
        javax.servlet.http.HttpServletRequest r15;
        java.lang.String $r1, r2, $r4, r7, $r9, $r20, $r25, $r26, $r31, $r33, $r40, $r41, r43;
        java.util.Map$Entry r18;
        java.util.Iterator $r13;
        javax.servlet.http.HttpServletResponse r16;
        javax.servlet.ServletContext $r3;
        java.lang.Object $r17, $r19, $r21;

        r0 := @this: org.apache.cxf.transport.servlet.AbstractHTTPServlet;

        r15 := @parameter0: javax.servlet.http.HttpServletRequest;

        r16 := @parameter1: javax.servlet.http.HttpServletResponse;

        r7 := @parameter2: java.lang.String;

        $r1 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String dispatcherServletPath>;

        if $r1 != null goto label01;

        $r41 = "/";

        goto label02;

     label01:
        $r41 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String dispatcherServletPath>;

     label02:
        r2 = $r41;

        $r3 = specialinvoke r0.<javax.servlet.http.HttpServlet: javax.servlet.ServletContext getServletContext()>();

        $r4 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String dispatcherServletName>;

        if $r4 == null goto label03;

        $r33 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String dispatcherServletName>;

        $r42 = interfaceinvoke $r3.<javax.servlet.ServletContext: javax.servlet.RequestDispatcher getNamedDispatcher(java.lang.String)>($r33);

        goto label04;

     label03:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = interfaceinvoke $r3.<javax.servlet.ServletContext: javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String)>($r9);

     label04:
        r10 = $r42;

        if $r42 != null goto label06;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No RequestDispatcher can be created for path ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r43 = $r25;

        $r26 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String dispatcherServletName>;

        if $r26 == null goto label05;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dispatcher name: ");

        $r31 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String dispatcherServletName>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        r43 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        $r27 = new javax.servlet.ServletException;

        specialinvoke $r27.<javax.servlet.ServletException: void <init>(java.lang.String)>(r43);

        throw $r27;

     label06:
        $r11 = r0.<org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map redirectAttributes>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r17 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.util.Map$Entry) $r17;

        $r19 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (java.lang.String) $r19;

        $r21 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r15.<javax.servlet.http.HttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r20, $r21);

        goto label07;

     label08:
        $r14 = new org.apache.cxf.transport.servlet.AbstractHTTPServlet$HttpServletRequestFilter;

        specialinvoke $r14.<org.apache.cxf.transport.servlet.AbstractHTTPServlet$HttpServletRequestFilter: void <init>(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>(r15, r7, r2);

        interfaceinvoke r10.<javax.servlet.RequestDispatcher: void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>($r14, r16);

     label09:
        goto label11;

     label10:
        $r34 := @caughtexception;

        $r35 = new javax.servlet.ServletException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RequestDispatcher for path ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has failed");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<javax.servlet.ServletException: void <init>(java.lang.String)>($r40);

        throw $r35;

     label11:
        return;

        catch java.lang.Throwable from label06 to label09 with label10;
    }

    protected abstract void invoke(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException;

    static void <clinit>()
    {
        java.lang.String[] $r2;
        java.util.HashMap $r4;
        java.util.logging.Logger $r0;
        java.util.List $r3;
        java.util.ResourceBundle $r1;
        java.util.Map $r5, $r6, $r7, $r8, $r9, $r10;

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String REDIRECT_QUERY_CHECK_PARAMETER> = "redirect-query-check";

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String REDIRECT_ATTRIBUTES_PARAMETER> = "redirect-attributes";

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String REDIRECT_SERVLET_PATH_PARAMETER> = "redirect-servlet-path";

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String REDIRECT_SERVLET_NAME_PARAMETER> = "redirect-servlet-name";

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String REDIRECTS_PARAMETER> = "redirects-list";

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String STATIC_RESOURCES_MAP_RESOURCE> = "/cxfServletStaticResourcesMap.txt";

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String STATIC_WELCOME_FILE_PARAMETER> = "static-welcome-file";

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.lang.String STATIC_RESOURCES_PARAMETER> = "static-resources-list";

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: long serialVersionUID> = -8357252743467075117L;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/transport/servlet/AbstractHTTPServlet;");

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.logging.Logger LOG> = $r0;

        $r1 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class)>(class "Lorg/apache/cxf/transport/servlet/AbstractHTTPServlet;");

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.ResourceBundle BUNDLE> = $r1;

        $r2 = newarray (java.lang.String)[7];

        $r2[0] = "POST";

        $r2[1] = "GET";

        $r2[2] = "PUT";

        $r2[3] = "DELETE";

        $r2[4] = "HEAD";

        $r2[5] = "OPTIONS";

        $r2[6] = "TRACE";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.List KNOWN_HTTP_VERBS> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map DEFAULT_STATIC_CONTENT_TYPES> = $r4;

        $r5 = <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map DEFAULT_STATIC_CONTENT_TYPES>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("html", "text/html");

        $r6 = <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map DEFAULT_STATIC_CONTENT_TYPES>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("txt", "text/plain");

        $r7 = <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map DEFAULT_STATIC_CONTENT_TYPES>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("css", "text/css");

        $r8 = <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map DEFAULT_STATIC_CONTENT_TYPES>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pdf", "application/pdf");

        $r9 = <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map DEFAULT_STATIC_CONTENT_TYPES>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("xsd", "application/xml");

        $r10 = <org.apache.cxf.transport.servlet.AbstractHTTPServlet: java.util.Map DEFAULT_STATIC_CONTENT_TYPES>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("js", "application/javascript");

        return;
    }
}
