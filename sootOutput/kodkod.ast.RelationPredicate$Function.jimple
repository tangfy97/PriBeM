public final class kodkod.ast.RelationPredicate$Function extends kodkod.ast.RelationPredicate
{
    private final kodkod.ast.Expression domain;
    private final kodkod.ast.Expression range;
    private final kodkod.ast.operator.Multiplicity targetMult;

    void <init>(kodkod.ast.Relation, kodkod.ast.Expression, kodkod.ast.operator.Multiplicity, kodkod.ast.Expression)
    {
        kodkod.ast.operator.Multiplicity r2, $r3, $r12;
        int $i0, $i1;
        java.lang.String $r11, $r16;
        kodkod.ast.RelationPredicate$Function r0;
        kodkod.ast.Expression r4, r9;
        java.lang.IllegalArgumentException $r5, $r13;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r14, $r15;
        kodkod.ast.Relation r1;

        r0 := @this: kodkod.ast.RelationPredicate$Function;

        r1 := @parameter0: kodkod.ast.Relation;

        r4 := @parameter1: kodkod.ast.Expression;

        r2 := @parameter2: kodkod.ast.operator.Multiplicity;

        r9 := @parameter3: kodkod.ast.Expression;

        specialinvoke r0.<kodkod.ast.RelationPredicate: void <init>(kodkod.ast.Relation,kodkod.ast.RelationPredicate)>(r1, null);

        $r3 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE>;

        if r2 == $r3 goto label1;

        $r12 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity LONE>;

        if r2 == $r12 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid target multiplicity for a function: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label1:
        $i0 = virtualinvoke r4.<kodkod.ast.Expression: int arity()>();

        if $i0 != 1 goto label2;

        $i1 = virtualinvoke r9.<kodkod.ast.Expression: int arity()>();

        if $i1 == 1 goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid arity: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label3:
        r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.operator.Multiplicity targetMult> = r2;

        r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain> = r4;

        r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range> = r9;

        return;
    }

    public kodkod.ast.RelationPredicate$Name name()
    {
        kodkod.ast.RelationPredicate$Function r1;
        kodkod.ast.RelationPredicate$Name $r0;

        r1 := @this: kodkod.ast.RelationPredicate$Function;

        $r0 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name FUNCTION>;

        return $r0;
    }

    public kodkod.ast.operator.Multiplicity targetMult()
    {
        kodkod.ast.RelationPredicate$Function r0;
        kodkod.ast.operator.Multiplicity $r1;

        r0 := @this: kodkod.ast.RelationPredicate$Function;

        $r1 = r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.operator.Multiplicity targetMult>;

        return $r1;
    }

    public kodkod.ast.Expression domain()
    {
        kodkod.ast.RelationPredicate$Function r0;
        kodkod.ast.Expression $r1;

        r0 := @this: kodkod.ast.RelationPredicate$Function;

        $r1 = r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain>;

        return $r1;
    }

    public kodkod.ast.Expression range()
    {
        kodkod.ast.RelationPredicate$Function r0;
        kodkod.ast.Expression $r1;

        r0 := @this: kodkod.ast.RelationPredicate$Function;

        $r1 = r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range>;

        return $r1;
    }

    public kodkod.ast.Formula toConstraints()
    {
        kodkod.ast.operator.Multiplicity $r14;
        java.lang.String $r8, $r10;
        kodkod.ast.RelationPredicate$Function r0;
        kodkod.ast.Formula $r5, $r15, $r18, $r19;
        kodkod.ast.Expression $r2, $r3, $r4, $r13, $r16;
        kodkod.ast.Decl $r17;
        kodkod.ast.Variable $r11;
        java.lang.StringBuilder $r6, $r9;
        kodkod.ast.Relation $r1, $r7, $r12;

        r0 := @this: kodkod.ast.RelationPredicate$Function;

        $r1 = virtualinvoke r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Relation relation()>();

        $r3 = r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain>;

        $r2 = r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range>;

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: kodkod.ast.Expression product(kodkod.ast.Expression)>($r2);

        $r5 = virtualinvoke $r1.<kodkod.ast.Relation: kodkod.ast.Formula in(kodkod.ast.Expression)>($r4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("v");

        $r7 = virtualinvoke r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Relation relation()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Relation: java.lang.String name()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>($r10);

        $r12 = virtualinvoke r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Relation relation()>();

        $r13 = virtualinvoke $r11.<kodkod.ast.Variable: kodkod.ast.Expression join(kodkod.ast.Expression)>($r12);

        $r14 = r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.operator.Multiplicity targetMult>;

        $r15 = virtualinvoke $r13.<kodkod.ast.Expression: kodkod.ast.Formula apply(kodkod.ast.operator.Multiplicity)>($r14);

        $r16 = r0.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain>;

        $r17 = virtualinvoke $r11.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r16);

        $r18 = virtualinvoke $r15.<kodkod.ast.Formula: kodkod.ast.Formula forAll(kodkod.ast.Decls)>($r17);

        $r19 = virtualinvoke $r5.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>($r18);

        return $r19;
    }

    public java.lang.String toString()
    {
        kodkod.ast.operator.Multiplicity $r11;
        java.lang.String $r17;
        kodkod.ast.RelationPredicate$Name $r2;
        kodkod.ast.RelationPredicate$Function r1;
        kodkod.ast.Expression $r8, $r14;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16;
        kodkod.ast.Relation $r5;

        r1 := @this: kodkod.ast.RelationPredicate$Function;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<kodkod.ast.RelationPredicate$Function: kodkod.ast.RelationPredicate$Name name()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke r1.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Relation relation()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = r1.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ->");

        $r11 = r1.<kodkod.ast.RelationPredicate$Function: kodkod.ast.operator.Multiplicity targetMult>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = r1.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }
}
