public abstract class org.springframework.util.Assert extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.util.Assert r0;

        r0 := @this: org.springframework.util.Assert;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void isTrue(boolean, java.lang.String)
    {
        java.lang.String r1;
        java.lang.IllegalArgumentException $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r0;

     label1:
        return;
    }

    public static void isTrue(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>(z0, "[Assertion failed] - this expression must be true");

        return;
    }

    public static void isNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r1;

     label1:
        return;
    }

    public static void isNull(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void isNull(java.lang.Object,java.lang.String)>(r0, "[Assertion failed] - the object argument must be null");

        return;
    }

    public static void notNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r1;

     label1:
        return;
    }

    public static void notNull(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "[Assertion failed] - this argument is required; it must not be null");

        return;
    }

    public static void hasLength(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r1;

     label1:
        return;
    }

    public static void hasLength(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r0, "[Assertion failed] - this String argument must have length; it must not be null or empty");

        return;
    }

    public static void hasText(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r1;

     label1:
        return;
    }

    public static void hasText(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");

        return;
    }

    public static void doesNotContain(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.IllegalArgumentException $r4;
        int $i0, $i2;
        java.lang.String r0, r1, r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r3);

        throw $r4;

     label1:
        return;
    }

    public static void doesNotContain(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r0, r1, $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("[Assertion failed] - this String argument must not contain the substring [");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.springframework.util.Assert: void doesNotContain(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, $r5);

        return;
    }

    public static void notEmpty(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r0;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r1;

     label1:
        return;
    }

    public static void notEmpty(java.lang.Object[])
    {
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>(r0, "[Assertion failed] - this array must not be empty: it must contain at least 1 element");

        return;
    }

    public static void noNullElements(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r0;
        int $i0, i1;
        java.lang.Object $r1;
        java.lang.String r3;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.Object[];

        r3 := @parameter1: java.lang.String;

        if r0 == null goto label4;

        i1 = 0;

        goto label3;

     label1:
        $r1 = r0[i1];

        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r3);

        throw $r2;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = lengthof r0;

        if i1 < $i0 goto label1;

     label4:
        return;
    }

    public static void noNullElements(java.lang.Object[])
    {
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <org.springframework.util.Assert: void noNullElements(java.lang.Object[],java.lang.String)>(r0, "[Assertion failed] - this array must not contain any null elements");

        return;
    }

    public static void notEmpty(java.util.Collection, java.lang.String)
    {
        java.util.Collection r0;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r1;

     label1:
        return;
    }

    public static void notEmpty(java.util.Collection)
    {
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Collection,java.lang.String)>(r0, "[Assertion failed] - this collection must not be empty: it must contain at least 1 element");

        return;
    }

    public static void notEmpty(java.util.Map, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Map)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r1;

     label1:
        return;
    }

    public static void notEmpty(java.util.Map)
    {
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.util.Map,java.lang.String)>(r0, "[Assertion failed] - this map must not be empty; it must contain at least one entry");

        return;
    }

    public static void isInstanceOf(java.lang.Class, java.lang.Object)
    {
        java.lang.Class r0;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)>(r0, r1, "");

        return;
    }

    public static void isInstanceOf(java.lang.Class, java.lang.Object, java.lang.String)
    {
        java.lang.IllegalArgumentException $r2;
        java.lang.Class r0, $r11;
        java.lang.Object r1;
        java.lang.StringBuilder $r3, $r6, $r7, $r8, $r9;
        java.lang.String r4, $r5, $r10, $r12;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Type to check against must not be null");

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object of class [");

        if r1 == null goto label1;

        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        goto label2;

     label1:
        $r12 = "null";

     label2:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] must be an instance of ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label3:
        return;
    }

    public static void isAssignable(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void isAssignable(java.lang.Class,java.lang.Class,java.lang.String)>(r0, r1, "");

        return;
    }

    public static void isAssignable(java.lang.Class, java.lang.Class, java.lang.String)
    {
        java.lang.IllegalArgumentException $r2;
        java.lang.Class r0, r1;
        java.lang.StringBuilder $r3, $r6, $r7, $r8;
        java.lang.String r4, $r5, $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r4 := @parameter2: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Type to check against must not be null");

        if r1 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not assignable to ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label2:
        return;
    }

    public static void state(boolean, java.lang.String)
    {
        java.lang.IllegalStateException $r0;
        java.lang.String r1;
        boolean z0;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r0;

     label1:
        return;
    }

    public static void state(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>(z0, "[Assertion failed] - this state invariant must be true");

        return;
    }
}
