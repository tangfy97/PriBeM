public class org.apache.batik.parser.LengthListParser extends org.apache.batik.parser.LengthParser
{

    public void <init>()
    {
        org.apache.batik.parser.LengthListParser r0;
        org.apache.batik.parser.LengthListHandler $r1;

        r0 := @this: org.apache.batik.parser.LengthListParser;

        specialinvoke r0.<org.apache.batik.parser.LengthParser: void <init>()>();

        $r1 = <org.apache.batik.parser.DefaultLengthListHandler: org.apache.batik.parser.LengthListHandler INSTANCE>;

        r0.<org.apache.batik.parser.LengthParser: org.apache.batik.parser.LengthHandler lengthHandler> = $r1;

        return;
    }

    public void setLengthListHandler(org.apache.batik.parser.LengthListHandler)
    {
        org.apache.batik.parser.LengthListParser r0;
        org.apache.batik.parser.LengthListHandler r1;

        r0 := @this: org.apache.batik.parser.LengthListParser;

        r1 := @parameter0: org.apache.batik.parser.LengthListHandler;

        r0.<org.apache.batik.parser.LengthParser: org.apache.batik.parser.LengthHandler lengthHandler> = r1;

        return;
    }

    public org.apache.batik.parser.LengthListHandler getLengthListHandler()
    {
        org.apache.batik.parser.LengthListParser r0;
        org.apache.batik.parser.LengthListHandler $r2;
        org.apache.batik.parser.LengthHandler $r1;

        r0 := @this: org.apache.batik.parser.LengthListParser;

        $r1 = r0.<org.apache.batik.parser.LengthParser: org.apache.batik.parser.LengthHandler lengthHandler>;

        $r2 = (org.apache.batik.parser.LengthListHandler) $r1;

        return $r2;
    }

    protected void doParse() throws org.apache.batik.parser.ParseException, java.io.IOException
    {
        org.apache.batik.parser.LengthHandler $r1, $r4, $r5, $r6;
        org.apache.batik.parser.LengthListHandler $r2, $r7;
        org.apache.batik.util.io.NormalizingReader $r3;
        java.lang.NumberFormatException $r8;
        org.apache.batik.parser.LengthListParser r0;
        int $i0, $i1, $i2, $i4;

        r0 := @this: org.apache.batik.parser.LengthListParser;

        $r1 = r0.<org.apache.batik.parser.LengthParser: org.apache.batik.parser.LengthHandler lengthHandler>;

        $r2 = (org.apache.batik.parser.LengthListHandler) $r1;

        interfaceinvoke $r2.<org.apache.batik.parser.LengthListHandler: void startLengthList()>();

        $r3 = r0.<org.apache.batik.parser.AbstractParser: org.apache.batik.util.io.NormalizingReader reader>;

        $i0 = virtualinvoke $r3.<java.io.Reader: int read()>();

        r0.<org.apache.batik.parser.AbstractParser: int current> = $i0;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipSpaces()>();

     label1:
        goto label2;

     label2:
        $r4 = r0.<org.apache.batik.parser.LengthParser: org.apache.batik.parser.LengthHandler lengthHandler>;

        interfaceinvoke $r4.<org.apache.batik.parser.LengthHandler: void startLength()>();

        virtualinvoke r0.<org.apache.batik.parser.LengthParser: void parseLength()>();

        $r5 = r0.<org.apache.batik.parser.LengthParser: org.apache.batik.parser.LengthHandler lengthHandler>;

        interfaceinvoke $r5.<org.apache.batik.parser.LengthHandler: void endLength()>();

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void skipCommaSpaces()>();

        $i1 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        $i4 = (int) -1;

        if $i1 != $i4 goto label2;

        goto label3;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $i2 = r0.<org.apache.batik.parser.AbstractParser: int current>;

        virtualinvoke r0.<org.apache.batik.parser.AbstractParser: void reportUnexpectedCharacterError(int)>($i2);

     label5:
        $r6 = r0.<org.apache.batik.parser.LengthParser: org.apache.batik.parser.LengthHandler lengthHandler>;

        $r7 = (org.apache.batik.parser.LengthListHandler) $r6;

        interfaceinvoke $r7.<org.apache.batik.parser.LengthListHandler: void endLengthList()>();

        return;

        catch java.lang.NumberFormatException from label1 to label3 with label4;
    }
}
