public class arq.rsparql extends arq.cmdline.CmdARQ
{
    protected arq.cmdline.ModQueryIn modQuery;
    protected arq.cmdline.ModRemote modRemote;
    protected arq.cmdline.ModResultsOut modResults;

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r1;
        arq.rsparql $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new arq.rsparql;

        specialinvoke $r0.<arq.rsparql: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<arq.rsparql: void mainRun()>();

        return;
    }

    public void <init>(java.lang.String[])
    {
        arq.cmdline.ModRemote $r3, $r5;
        java.lang.String[] r1;
        arq.cmdline.ModResultsOut $r4, $r7;
        arq.rsparql r0;
        arq.cmdline.ModQueryIn $r2, $r6;

        r0 := @this: arq.rsparql;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdARQ: void <init>(java.lang.String[])>(r1);

        $r2 = new arq.cmdline.ModQueryIn;

        specialinvoke $r2.<arq.cmdline.ModQueryIn: void <init>()>();

        r0.<arq.rsparql: arq.cmdline.ModQueryIn modQuery> = $r2;

        $r3 = new arq.cmdline.ModRemote;

        specialinvoke $r3.<arq.cmdline.ModRemote: void <init>()>();

        r0.<arq.rsparql: arq.cmdline.ModRemote modRemote> = $r3;

        $r4 = new arq.cmdline.ModResultsOut;

        specialinvoke $r4.<arq.cmdline.ModResultsOut: void <init>()>();

        r0.<arq.rsparql: arq.cmdline.ModResultsOut modResults> = $r4;

        $r5 = r0.<arq.rsparql: arq.cmdline.ModRemote modRemote>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r5);

        $r6 = r0.<arq.rsparql: arq.cmdline.ModQueryIn modQuery>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r6);

        $r7 = r0.<arq.rsparql: arq.cmdline.ModResultsOut modResults>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r7);

        return;
    }

    protected void processModulesAndArgs()
    {
        arq.cmdline.ModRemote $r1;
        arq.cmd.CmdException $r3;
        java.lang.String $r2;
        arq.rsparql r0;

        r0 := @this: arq.rsparql;

        specialinvoke r0.<arq.cmdline.CmdARQ: void processModulesAndArgs()>();

        $r1 = r0.<arq.rsparql: arq.cmdline.ModRemote modRemote>;

        $r2 = virtualinvoke $r1.<arq.cmdline.ModRemote: java.lang.String getServiceURL()>();

        if $r2 != null goto label1;

        $r3 = new arq.cmd.CmdException;

        specialinvoke $r3.<arq.cmd.CmdException: void <init>(java.lang.String)>("No SPARQL endpoint specificied");

        throw $r3;

     label1:
        return;
    }

    protected void exec()
    {
        java.io.PrintStream $r10, $r11;
        arq.cmdline.ModRemote $r3, $r6;
        com.hp.hpl.jena.query.Query $r2;
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r8;
        arq.cmdline.ModResultsOut $r7;
        java.lang.Exception $r9;
        arq.rsparql r0;
        com.hp.hpl.jena.sparql.engine.http.QueryExceptionHTTP $r12;
        arq.cmdline.ModQueryIn $r1;
        arq.cmd.CmdException $r13;
        java.lang.String $r4;
        com.hp.hpl.jena.query.QueryExecution $r5;
        boolean $z0;

        r0 := @this: arq.rsparql;

        $r1 = r0.<arq.rsparql: arq.cmdline.ModQueryIn modQuery>;

        $r2 = virtualinvoke $r1.<arq.cmdline.ModQueryIn: com.hp.hpl.jena.query.Query getQuery()>();

     label1:
        $r3 = r0.<arq.rsparql: arq.cmdline.ModRemote modRemote>;

        $r4 = virtualinvoke $r3.<arq.cmdline.ModRemote: java.lang.String getServiceURL()>();

        $r5 = staticinvoke <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution sparqlService(java.lang.String,com.hp.hpl.jena.query.Query)>($r4, $r2);

        $r6 = r0.<arq.rsparql: arq.cmdline.ModRemote modRemote>;

        $z0 = virtualinvoke $r6.<arq.cmdline.ModRemote: boolean usePost()>();

        if $z0 == 0 goto label2;

        <com.hp.hpl.jena.sparql.engine.http.HttpQuery: int urlLimit> = 0;

     label2:
        $r7 = r0.<arq.rsparql: arq.cmdline.ModResultsOut modResults>;

        $r8 = virtualinvoke $r7.<arq.cmdline.ModResultsOut: com.hp.hpl.jena.sparql.resultset.ResultsFormat getResultsFormat()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void executeQuery(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.QueryExecution,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>($r2, $r5, $r8);

     label3:
        goto label6;

     label4:
        $r12 := @caughtexception;

        $r13 = new arq.cmd.CmdException;

        specialinvoke $r13.<arq.cmd.CmdException: void <init>(java.lang.String,java.lang.Throwable)>("HTTP Exeception", $r12);

        throw $r13;

     label5:
        $r9 := @caughtexception;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void flush()>();

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace(java.io.PrintStream)>($r11);

     label6:
        return;

        catch com.hp.hpl.jena.sparql.engine.http.QueryExceptionHTTP from label1 to label3 with label4;
        catch java.lang.Exception from label1 to label3 with label5;
    }

    protected java.lang.String getSummary()
    {
        arq.rsparql r0;

        r0 := @this: arq.rsparql;

        return null;
    }
}
