public abstract class org.springframework.scheduling.concurrent.ExecutorConfigurationSupport extends org.springframework.scheduling.concurrent.CustomizableThreadFactory implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private java.util.concurrent.ThreadFactory threadFactory;
    private boolean threadNamePrefixSet;
    private java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler;
    private boolean waitForTasksToCompleteOnShutdown;
    private java.lang.String beanName;
    private java.util.concurrent.ExecutorService executor;

    public void <init>()
    {
        org.springframework.scheduling.concurrent.ExecutorConfigurationSupport r0;
        java.util.concurrent.ThreadPoolExecutor$AbortPolicy $r3;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;

        specialinvoke r0.<org.springframework.scheduling.concurrent.CustomizableThreadFactory: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.util.concurrent.ThreadFactory threadFactory> = r0;

        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: boolean threadNamePrefixSet> = 0;

        $r3 = new java.util.concurrent.ThreadPoolExecutor$AbortPolicy;

        specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler> = $r3;

        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: boolean waitForTasksToCompleteOnShutdown> = 0;

        return;
    }

    public void setThreadFactory(java.util.concurrent.ThreadFactory)
    {
        org.springframework.scheduling.concurrent.ExecutorConfigurationSupport r0;
        java.util.concurrent.ThreadFactory r1, $r2;

        r0 := @this: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;

        r1 := @parameter0: java.util.concurrent.ThreadFactory;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.util.concurrent.ThreadFactory threadFactory> = $r2;

        return;
    }

    public void setThreadNamePrefix(java.lang.String)
    {
        org.springframework.scheduling.concurrent.ExecutorConfigurationSupport r0;
        java.lang.String r1;

        r0 := @this: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.scheduling.concurrent.CustomizableThreadFactory: void setThreadNamePrefix(java.lang.String)>(r1);

        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: boolean threadNamePrefixSet> = 1;

        return;
    }

    public void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)
    {
        org.springframework.scheduling.concurrent.ExecutorConfigurationSupport r0;
        java.util.concurrent.RejectedExecutionHandler r1, $r2;
        java.util.concurrent.ThreadPoolExecutor$AbortPolicy $r3;

        r0 := @this: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;

        r1 := @parameter0: java.util.concurrent.RejectedExecutionHandler;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new java.util.concurrent.ThreadPoolExecutor$AbortPolicy;

        $r2 = $r3;

        specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void <init>()>();

     label2:
        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler> = $r2;

        return;
    }

    public void setWaitForTasksToCompleteOnShutdown(boolean)
    {
        org.springframework.scheduling.concurrent.ExecutorConfigurationSupport r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: boolean waitForTasksToCompleteOnShutdown> = z0;

        return;
    }

    public void setBeanName(java.lang.String)
    {
        org.springframework.scheduling.concurrent.ExecutorConfigurationSupport r0;
        java.lang.String r1;

        r0 := @this: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.lang.String beanName> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.scheduling.concurrent.ExecutorConfigurationSupport r0;

        r0 := @this: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void initialize()>();

        return;
    }

    public void initialize()
    {
        org.springframework.scheduling.concurrent.ExecutorConfigurationSupport r0;
        java.util.concurrent.RejectedExecutionHandler $r19;
        java.lang.String $r2, $r4, $r5, $r7, $r10, $r12, $r14, $r17;
        java.util.concurrent.ThreadFactory $r18;
        java.util.concurrent.ExecutorService $r20;
        boolean $z0, $z1;
        org.apache.commons.logging.Log $r1, $r9;
        java.lang.StringBuilder $r3, $r6, $r8, $r11, $r13, $r15, $r16;

        r0 := @this: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;

        $r1 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label3;

        $r9 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Initializing ExecutorService ");

        $r10 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.lang.String beanName>;

        if $r10 == null goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>(" \'");

        $r14 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.lang.String beanName>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r17 = "";

     label2:
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r12);

     label3:
        $z1 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: boolean threadNamePrefixSet>;

        if $z1 != 0 goto label4;

        $r2 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.lang.String beanName>;

        if $r2 == null goto label4;

        $r3 = new java.lang.StringBuilder;

        $r4 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.lang.String beanName>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void setThreadNamePrefix(java.lang.String)>($r7);

     label4:
        $r18 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.util.concurrent.ThreadFactory threadFactory>;

        $r19 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler>;

        $r20 = virtualinvoke r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.util.concurrent.ExecutorService initializeExecutor(java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>($r18, $r19);

        r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.util.concurrent.ExecutorService executor> = $r20;

        return;
    }

    protected abstract java.util.concurrent.ExecutorService initializeExecutor(java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler);

    public void destroy()
    {
        org.springframework.scheduling.concurrent.ExecutorConfigurationSupport r0;

        r0 := @this: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: void shutdown()>();

        return;
    }

    public void shutdown()
    {
        org.springframework.scheduling.concurrent.ExecutorConfigurationSupport r0;
        java.lang.String $r6, $r8, $r10, $r13;
        java.util.concurrent.ExecutorService $r2, $r3;
        boolean $z0, $z1;
        org.apache.commons.logging.Log $r1, $r5;
        java.lang.StringBuilder $r4, $r7, $r9, $r11, $r12;

        r0 := @this: org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;

        $r1 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Shutting down ExecutorService");

        $r6 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.lang.String beanName>;

        if $r6 == null goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(" \'");

        $r10 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.lang.String beanName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r13 = "";

     label2:
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r8);

     label3:
        $z1 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: boolean waitForTasksToCompleteOnShutdown>;

        if $z1 == 0 goto label4;

        $r3 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.util.concurrent.ExecutorService executor>;

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void shutdown()>();

        goto label5;

     label4:
        $r2 = r0.<org.springframework.scheduling.concurrent.ExecutorConfigurationSupport: java.util.concurrent.ExecutorService executor>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label5:
        return;
    }
}
