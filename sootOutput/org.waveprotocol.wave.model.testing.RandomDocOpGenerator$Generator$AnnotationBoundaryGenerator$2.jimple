class org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2 extends java.lang.Object implements org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RunnableWithException
{
    java.util.ArrayList keysToEnd;
    java.util.ArrayList changeKeys;
    java.util.ArrayList changeOldValues;
    java.util.ArrayList changeNewValues;
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton val$a;
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage val$stage;
    final java.util.ArrayList val$keys;
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1;

    void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage, java.util.ArrayList)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r2;
        java.util.ArrayList r4, $r5, $r6, $r7, $r8;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2 r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage r3;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r3 := @parameter2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage;

        r4 := @parameter3: java.util.ArrayList;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1> = r1;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton val$a> = r2;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage val$stage> = r3;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList val$keys> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList keysToEnd> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeOldValues> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeNewValues> = $r8;

        return;
    }

    void tryThisOption() throws org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$Result
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton $r19, $r20;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent $r18, $r25;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2 r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$Result $r26;
        java.lang.String[] $r4, $r8, $r11, $r14;
        java.lang.AssertionError $r29;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator $r24;
        java.util.ArrayList $r2, $r6, $r9, $r12;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl $r16;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r21;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator $r3, $r7, $r10, $r13, $r17, $r22, $r27;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage $r23;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r28;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder $r0, $r5, $r15;

        r1 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder builder()>();

        $r3 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        $r2 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList keysToEnd>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: java.lang.String[] toArray(java.util.ArrayList)>($r2);

        $r5 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder initializationEnd(java.lang.String[])>($r4);

        $r7 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        $r6 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: java.lang.String[] toArray(java.util.ArrayList)>($r6);

        $r10 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        $r9 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeOldValues>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: java.lang.String[] toArray(java.util.ArrayList)>($r9);

        $r13 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        $r12 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeNewValues>;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: java.lang.String[] toArray(java.util.ArrayList)>($r12);

        $r15 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder updateValues(java.lang.String[],java.lang.String[],java.lang.String[])>($r8, $r11, $r14);

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl build()>();

        $r17 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate(org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl)>($r16);

        $r19 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r20 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton val$a>;

        specialinvoke $r19.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton)>($r20);

        $r21 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        specialinvoke $r21.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void <init>()>();

        virtualinvoke $r18.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r19, $r21);

        $z0 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r28 = virtualinvoke $r18.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r19, null);

        $z1 = virtualinvoke $r28.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z1 == 0 goto label1;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label1:
        virtualinvoke $r18.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent: void apply(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton)>($r19);

        $r22 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        $r24 = $r22.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r23 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage val$stage>;

        $r25 = virtualinvoke $r24.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent pickComponent(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)>($r19, $r23);

        if $r25 == null goto label2;

        $r26 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$Result;

        $r27 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        specialinvoke $r26.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$Result: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent)>($r27, $r18);

        throw $r26;

     label2:
        return;
    }

    void removeLastMaybe(java.util.ArrayList, int)
    {
        java.lang.AssertionError $r1;
        java.util.ArrayList r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2 r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2;

        r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        $z0 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if i0 == $i1 goto label1;

        $i2 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        $i3 = $i2 - 1;

        if i0 == $i3 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i4 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        $i5 = $i4 - 1;

        if i0 != $i5 goto label2;

        virtualinvoke r0.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

     label2:
        return;
    }

    void take(int, java.lang.String) throws org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$Result
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton $r1, $r12, $r15;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r9;
        java.util.Set $r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2 r0;
        java.lang.Throwable $r58, $r68;
        java.lang.AssertionError $r39, $r42, $r45, $r48, $r57, $r64, $r67;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator $r8, $r19, $r22;
        java.util.TreeSet $r4;
        java.util.ArrayList $r14, $r17, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r40, $r41, $r43, $r44, $r46, $r47, $r54, $r55, $r56, $r59, $r60, $r61, $r62, $r63, $r65, $r66, $r69;
        java.lang.String r3, r26, r29, $r52;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$StringNullComparator $r5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator $r6, $r7, $r18, $r21;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters$AnnotationOption r70;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.util.List $r10, $r53;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r20, $r23;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r13, $r16;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.util.Iterator $r11, $r24, $r27;
        java.lang.Object $r25, $r28, $r49, $r50, $r51;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2;

        i1 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if r3 != null goto label01;

        $r57 = new java.lang.AssertionError;

        specialinvoke $r57.<java.lang.AssertionError: void <init>()>();

        throw $r57;

     label01:
        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton val$a>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.Set openAnnotations()>();

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z1 == 0 goto label06;

        $r54 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList keysToEnd>;

        $i10 = virtualinvoke $r54.<java.util.ArrayList: int size()>();

     label02:
        $r55 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList keysToEnd>;

        virtualinvoke $r55.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void nextKey(int)>(i1);

     label03:
        $r56 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList keysToEnd>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void removeLastMaybe(java.util.ArrayList,int)>($r56, $i10);

        goto label06;

     label04:
        $r68 := @caughtexception;

     label05:
        $r69 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList keysToEnd>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void removeLastMaybe(java.util.ArrayList,int)>($r69, $i10);

        throw $r68;

     label06:
        $r4 = new java.util.TreeSet;

        $r5 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$StringNullComparator;

        $r6 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        specialinvoke $r5.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$StringNullComparator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator)>($r6);

        specialinvoke $r4.<java.util.TreeSet: void <init>(java.util.Comparator)>($r5);

        $r7 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        $r8 = $r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r9 = $r8.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: java.util.List getAnnotationOptions()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z12 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label09;

        $r51 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r70 = (org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters$AnnotationOption) $r51;

        $r52 = r70.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters$AnnotationOption: java.lang.String key>;

        $z9 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r52);

        if $z9 == 0 goto label08;

        $r53 = r70.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters$AnnotationOption: java.util.List valueAlternatives>;

        interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r53);

     label08:
        goto label07;

     label09:
        $r12 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton val$a>;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap inheritedAnnotations()>();

        $z2 = interfaceinvoke $r13.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMap: boolean containsKey(java.lang.Object)>(r3);

        if $z2 == 0 goto label10;

        $r50 = interfaceinvoke $r13.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMap: java.lang.Object get(java.lang.Object)>(r3);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r50);

        goto label11;

     label10:
        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(null);

     label11:
        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r15 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton val$a>;

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap currentAnnotations()>();

        $z3 = interfaceinvoke $r16.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMap: boolean containsKey(java.lang.Object)>(r3);

        if $z3 == 0 goto label12;

        $r49 = interfaceinvoke $r16.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMap: java.lang.Object get(java.lang.Object)>(r3);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r49);

        goto label13;

     label12:
        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(null);

     label13:
        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r18 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        $r19 = $r18.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r20 = $r19.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: void access$300(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.ArrayList)>($r20, $r17);

        $r21 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        $r22 = $r21.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r23 = $r22.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: void access$300(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.ArrayList)>($r23, $r14);

        $r24 = virtualinvoke $r17.<java.util.ArrayList: java.util.Iterator iterator()>();

     label14:
        $z13 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label27;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.lang.String) $r25;

        $r27 = virtualinvoke $r14.<java.util.ArrayList: java.util.Iterator iterator()>();

     label15:
        $z4 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label26;

        $r28 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r29 = (java.lang.String) $r28;

        $z5 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: boolean $assertionsDisabled>;

        if $z5 != 0 goto label16;

        $r46 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        $i8 = virtualinvoke $r46.<java.util.ArrayList: int size()>();

        $r47 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeOldValues>;

        $i9 = virtualinvoke $r47.<java.util.ArrayList: int size()>();

        if $i8 == $i9 goto label16;

        $r48 = new java.lang.AssertionError;

        specialinvoke $r48.<java.lang.AssertionError: void <init>()>();

        throw $r48;

     label16:
        $z6 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: boolean $assertionsDisabled>;

        if $z6 != 0 goto label17;

        $r43 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        $i6 = virtualinvoke $r43.<java.util.ArrayList: int size()>();

        $r44 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeNewValues>;

        $i7 = virtualinvoke $r44.<java.util.ArrayList: int size()>();

        if $i6 == $i7 goto label17;

        $r45 = new java.lang.AssertionError;

        specialinvoke $r45.<java.lang.AssertionError: void <init>()>();

        throw $r45;

     label17:
        $r30 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        $i0 = virtualinvoke $r30.<java.util.ArrayList: int size()>();

     label18:
        $r31 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        virtualinvoke $r31.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        $r32 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeOldValues>;

        virtualinvoke $r32.<java.util.ArrayList: boolean add(java.lang.Object)>(r26);

        $r33 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeNewValues>;

        virtualinvoke $r33.<java.util.ArrayList: boolean add(java.lang.Object)>(r29);

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void nextKey(int)>(i1);

     label19:
        $r34 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeNewValues>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void removeLastMaybe(java.util.ArrayList,int)>($r34, $i0);

        $r35 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeOldValues>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void removeLastMaybe(java.util.ArrayList,int)>($r35, $i0);

        $r36 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void removeLastMaybe(java.util.ArrayList,int)>($r36, $i0);

        $z7 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: boolean $assertionsDisabled>;

        if $z7 != 0 goto label20;

        $r40 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        $i4 = virtualinvoke $r40.<java.util.ArrayList: int size()>();

        $r41 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeOldValues>;

        $i5 = virtualinvoke $r41.<java.util.ArrayList: int size()>();

        if $i4 == $i5 goto label20;

        $r42 = new java.lang.AssertionError;

        specialinvoke $r42.<java.lang.AssertionError: void <init>()>();

        throw $r42;

     label20:
        $z8 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: boolean $assertionsDisabled>;

        if $z8 != 0 goto label25;

        $r37 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        $i2 = virtualinvoke $r37.<java.util.ArrayList: int size()>();

        $r38 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeNewValues>;

        $i3 = virtualinvoke $r38.<java.util.ArrayList: int size()>();

        if $i2 == $i3 goto label25;

        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>()>();

        throw $r39;

     label21:
        $r58 := @caughtexception;

     label22:
        $r59 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeNewValues>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void removeLastMaybe(java.util.ArrayList,int)>($r59, $i0);

        $r60 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeOldValues>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void removeLastMaybe(java.util.ArrayList,int)>($r60, $i0);

        $r61 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void removeLastMaybe(java.util.ArrayList,int)>($r61, $i0);

        $z10 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: boolean $assertionsDisabled>;

        if $z10 != 0 goto label23;

        $r65 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        $i13 = virtualinvoke $r65.<java.util.ArrayList: int size()>();

        $r66 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeOldValues>;

        $i14 = virtualinvoke $r66.<java.util.ArrayList: int size()>();

        if $i13 == $i14 goto label23;

        $r67 = new java.lang.AssertionError;

        specialinvoke $r67.<java.lang.AssertionError: void <init>()>();

        throw $r67;

     label23:
        $z11 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: boolean $assertionsDisabled>;

        if $z11 != 0 goto label24;

        $r62 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeKeys>;

        $i11 = virtualinvoke $r62.<java.util.ArrayList: int size()>();

        $r63 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList changeNewValues>;

        $i12 = virtualinvoke $r63.<java.util.ArrayList: int size()>();

        if $i11 == $i12 goto label24;

        $r64 = new java.lang.AssertionError;

        specialinvoke $r64.<java.lang.AssertionError: void <init>()>();

        throw $r64;

     label24:
        throw $r58;

     label25:
        goto label15;

     label26:
        goto label14;

     label27:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    void nextKey(int) throws org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$Result
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r7;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator $r6;
        java.util.ArrayList $r1, $r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator $r5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2 r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList val$keys>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i0 < $i1 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void tryThisOption()>();

        return;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: java.util.ArrayList val$keys>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r4 = (java.lang.String) $r3;

        $r5 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator this$1>;

        $r6 = $r5.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r7 = $r6.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $z0 = interfaceinvoke $r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider: boolean nextBoolean()>();

        if $z0 == 0 goto label2;

        $i4 = i0 + 1;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void take(int,java.lang.String)>($i4, r4);

        $i5 = i0 + 1;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void nextKey(int)>($i5);

        goto label3;

     label2:
        $i2 = i0 + 1;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void nextKey(int)>($i2);

        $i3 = i0 + 1;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void take(int,java.lang.String)>($i3, r4);

     label3:
        return;
    }

    public void run() throws org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$Result
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2 r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: void nextKey(int)>(0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/testing/RandomDocOpGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator$2: boolean $assertionsDisabled> = $z1;

        return;
    }
}
