public class org.springframework.core.SimpleAliasRegistry extends java.lang.Object implements org.springframework.core.AliasRegistry
{
    private final java.util.Map aliasMap;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.springframework.core.SimpleAliasRegistry r0;

        r0 := @this: org.springframework.core.SimpleAliasRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap> = $r1;

        return;
    }

    public void registerAlias(java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r6;
        java.util.Map $r3, $r15, $r16;
        java.lang.String r0, r1, r5, $r14;
        boolean $z0, $z1, $z2;
        org.springframework.core.SimpleAliasRegistry r2;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r2 := @this: org.springframework.core.SimpleAliasRegistry;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "\'name\' must not be empty");

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r1, "\'alias\' must not be empty");

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r15 = r2.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        goto label3;

     label1:
        $z1 = virtualinvoke r2.<org.springframework.core.SimpleAliasRegistry: boolean allowAliasOverriding()>();

        if $z1 != 0 goto label2;

        $r3 = r2.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.lang.String) $r4;

        if r5 == null goto label2;

        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 != 0 goto label2;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot register alias \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for name \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': It is already registered for name \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r6;

     label2:
        virtualinvoke r2.<org.springframework.core.SimpleAliasRegistry: void checkForAliasCircle(java.lang.String,java.lang.String)>(r0, r1);

        $r16 = r2.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r0);

     label3:
        return;
    }

    protected boolean allowAliasOverriding()
    {
        org.springframework.core.SimpleAliasRegistry r0;

        r0 := @this: org.springframework.core.SimpleAliasRegistry;

        return 1;
    }

    public void removeAlias(java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        org.springframework.core.SimpleAliasRegistry r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r1, r4, $r9;

        r0 := @this: org.springframework.core.SimpleAliasRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (java.lang.String) $r3;

        if r4 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("No alias \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' registered");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        return;
    }

    public boolean isAlias(java.lang.String)
    {
        org.springframework.core.SimpleAliasRegistry r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.core.SimpleAliasRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.String[] getAliases(java.lang.String)
    {
        java.lang.Throwable $r5;
        org.springframework.core.SimpleAliasRegistry r1;
        java.util.Map $r2;
        java.lang.String[] $r4;
        java.lang.String r3;
        java.util.ArrayList $r0;

        r1 := @this: org.springframework.core.SimpleAliasRegistry;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        entermonitor $r2;

     label1:
        specialinvoke r1.<org.springframework.core.SimpleAliasRegistry: void retrieveAliases(java.lang.String,java.util.List)>(r3, $r0);

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

     label5:
        $r4 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r0);

        return $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void retrieveAliases(java.lang.String, java.util.List)
    {
        java.util.Map$Entry r5;
        org.springframework.core.SimpleAliasRegistry r0;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.List r11;
        java.util.Map $r1;
        java.lang.Object $r4, $r6, $r9;
        java.lang.String r7, r8, r10;
        boolean $z0, $z1;

        r0 := @this: org.springframework.core.SimpleAliasRegistry;

        r8 := @parameter0: java.lang.String;

        r11 := @parameter1: java.util.List;

        $r1 = r0.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (java.lang.String) $r6;

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r10 = (java.lang.String) $r9;

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r10);

        specialinvoke r0.<org.springframework.core.SimpleAliasRegistry: void retrieveAliases(java.lang.String,java.util.List)>(r10, r11);

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return;
    }

    public void resolveAliases(org.springframework.util.StringValueResolver)
    {
        org.springframework.util.StringValueResolver r0;
        java.lang.IllegalStateException $r19;
        java.util.Map $r2, $r4, $r13, $r14, $r17, $r18, $r30;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r5;
        java.lang.StringBuilder $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        java.lang.Throwable $r31;
        java.util.HashMap $r3;
        java.lang.String r8, r10, $r11, $r12, r16, $r29;
        org.springframework.core.SimpleAliasRegistry r1;
        java.util.Iterator $r6;
        java.lang.Object $r7, $r9, $r15;

        r1 := @this: org.springframework.core.SimpleAliasRegistry;

        r0 := @parameter0: org.springframework.util.StringValueResolver;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "StringValueResolver must not be null");

        $r2 = r1.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        entermonitor $r2;

     label01:
        $r3 = new java.util.HashMap;

        $r4 = r1.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        specialinvoke $r3.<java.util.HashMap: void <init>(java.util.Map)>($r4);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label06;

     label02:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke r0.<org.springframework.util.StringValueResolver: java.lang.String resolveStringValue(java.lang.String)>(r8);

        $r12 = interfaceinvoke r0.<org.springframework.util.StringValueResolver: java.lang.String resolveStringValue(java.lang.String)>(r10);

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label03;

        $r30 = r1.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        interfaceinvoke $r30.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r8);

        goto label06;

     label03:
        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z1 != 0 goto label05;

        $r14 = r1.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r16 = (java.lang.String) $r15;

        if r16 == null goto label04;

        $z3 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 != 0 goto label04;

        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot register resolved alias \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (original: \'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') for name \'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': It is already registered for name \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r19;

     label04:
        virtualinvoke r1.<org.springframework.core.SimpleAliasRegistry: void checkForAliasCircle(java.lang.String,java.lang.String)>($r12, $r11);

        $r17 = r1.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r8);

        $r18 = r1.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        goto label06;

     label05:
        $z2 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 != 0 goto label06;

        $r13 = r1.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r12);

     label06:
        $z4 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label02;

        exitmonitor $r2;

     label07:
        goto label10;

     label08:
        $r31 := @caughtexception;

        exitmonitor $r2;

     label09:
        throw $r31;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public java.lang.String canonicalName(java.lang.String)
    {
        org.springframework.core.SimpleAliasRegistry r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r0, $r4, r5;

        r1 := @this: org.springframework.core.SimpleAliasRegistry;

        r0 := @parameter0: java.lang.String;

        r5 = r0;

     label1:
        $r2 = r1.<org.springframework.core.SimpleAliasRegistry: java.util.Map aliasMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r4 = (java.lang.String) $r3;

        if $r4 == null goto label2;

        r5 = $r4;

     label2:
        if $r4 != null goto label1;

        return r5;
    }

    protected void checkForAliasCircle(java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        java.lang.String r0, r2, $r3, $r14;
        boolean $z0;
        org.springframework.core.SimpleAliasRegistry r1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r1 := @this: org.springframework.core.SimpleAliasRegistry;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r1.<org.springframework.core.SimpleAliasRegistry: java.lang.String canonicalName(java.lang.String)>(r2);

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot register alias \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for name \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': Circular reference - \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a direct or indirect alias for \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r4;

     label1:
        return;
    }
}
