public class org.apache.commons.collections.FastHashMap extends java.util.HashMap
{
    protected java.util.HashMap map;
    protected boolean fast;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.apache.commons.collections.FastHashMap r0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = null;

        r0.<org.apache.commons.collections.FastHashMap: boolean fast> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = $r1;

        return;
    }

    public void <init>(int)
    {
        int i0;
        java.util.HashMap $r1;
        org.apache.commons.collections.FastHashMap r0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = null;

        r0.<org.apache.commons.collections.FastHashMap: boolean fast> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0);

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = $r1;

        return;
    }

    public void <init>(int, float)
    {
        int i0;
        float f0;
        java.util.HashMap $r1;
        org.apache.commons.collections.FastHashMap r0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = null;

        r0.<org.apache.commons.collections.FastHashMap: boolean fast> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int,float)>(i0, f0);

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = $r1;

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.HashMap $r1;
        org.apache.commons.collections.FastHashMap r0;
        java.util.Map r2;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        r2 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = null;

        r0.<org.apache.commons.collections.FastHashMap: boolean fast> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>(r2);

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = $r1;

        return;
    }

    public boolean getFast()
    {
        org.apache.commons.collections.FastHashMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        return $z0;
    }

    public void setFast(boolean)
    {
        org.apache.commons.collections.FastHashMap r0;
        boolean z0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.collections.FastHashMap: boolean fast> = z0;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Throwable $r7;
        java.util.HashMap $r1, $r3, $r5;
        org.apache.commons.collections.FastHashMap r0;
        java.lang.Object r2, $r4, $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        r2 := @parameter0: java.lang.Object;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        return $r6;

     label1:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label2:
        $r3 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        exitmonitor $r1;

     label3:
        return $r4;

     label4:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int size()
    {
        java.lang.Throwable $r4;
        java.util.HashMap $r1, $r2, $r3;
        org.apache.commons.collections.FastHashMap r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $i1 = virtualinvoke $r3.<java.util.HashMap: int size()>();

        return $i1;

     label1:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label2:
        $r2 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $i0 = virtualinvoke $r2.<java.util.HashMap: int size()>();

        exitmonitor $r1;

     label3:
        return $i0;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isEmpty()
    {
        java.lang.Throwable $r4;
        java.util.HashMap $r1, $r2, $r3;
        org.apache.commons.collections.FastHashMap r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $z2 = virtualinvoke $r3.<java.util.HashMap: boolean isEmpty()>();

        return $z2;

     label1:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label2:
        $r2 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $z1 = virtualinvoke $r2.<java.util.HashMap: boolean isEmpty()>();

        exitmonitor $r1;

     label3:
        return $z1;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.lang.Throwable $r5;
        java.util.HashMap $r1, $r3, $r4;
        org.apache.commons.collections.FastHashMap r0;
        java.lang.Object r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        r2 := @parameter0: java.lang.Object;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $z2 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r2);

        return $z2;

     label1:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label2:
        $r3 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $z1 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r2);

        exitmonitor $r1;

     label3:
        return $z1;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.Throwable $r5;
        java.util.HashMap $r1, $r3, $r4;
        org.apache.commons.collections.FastHashMap r0;
        java.lang.Object r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        r2 := @parameter0: java.lang.Object;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $z2 = virtualinvoke $r4.<java.util.HashMap: boolean containsValue(java.lang.Object)>(r2);

        return $z2;

     label1:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label2:
        $r3 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $z1 = virtualinvoke $r3.<java.util.HashMap: boolean containsValue(java.lang.Object)>(r2);

        exitmonitor $r1;

     label3:
        return $z1;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r10, $r11;
        java.util.HashMap $r1, $r4, $r6, r8;
        org.apache.commons.collections.FastHashMap r0;
        java.lang.Object r2, r3, $r5, $r7, $r9;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label5;

        entermonitor r0;

     label1:
        $r6 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object clone()>();

        r8 = (java.util.HashMap) $r7;

        $r9 = virtualinvoke r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = r8;

        exitmonitor r0;

     label2:
        return $r9;

     label3:
        $r11 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r11;

     label5:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label6:
        $r4 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        exitmonitor $r1;

     label7:
        return $r5;

     label8:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label9:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public void putAll(java.util.Map)
    {
        java.lang.Throwable $r7, $r8;
        java.util.HashMap $r1, $r3, $r4, r6;
        org.apache.commons.collections.FastHashMap r0;
        java.util.Map r2;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        r2 := @parameter0: java.util.Map;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label06;

        entermonitor r0;

     label01:
        $r4 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object clone()>();

        r6 = (java.util.HashMap) $r5;

        virtualinvoke r6.<java.util.HashMap: void putAll(java.util.Map)>(r2);

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = r6;

        exitmonitor r0;

     label02:
        goto label05;

     label03:
        $r8 := @caughtexception;

        exitmonitor r0;

     label04:
        throw $r8;

     label05:
        goto label11;

     label06:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label07:
        $r3 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        virtualinvoke $r3.<java.util.HashMap: void putAll(java.util.Map)>(r2);

        exitmonitor $r1;

     label08:
        goto label11;

     label09:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label10:
        throw $r7;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.Throwable $r9, $r10;
        java.util.HashMap $r1, $r3, $r5, r7;
        org.apache.commons.collections.FastHashMap r0;
        java.lang.Object r2, $r4, $r6, $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        r2 := @parameter0: java.lang.Object;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label5;

        entermonitor r0;

     label1:
        $r5 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object clone()>();

        r7 = (java.util.HashMap) $r6;

        $r8 = virtualinvoke r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = r7;

        exitmonitor r0;

     label2:
        return $r8;

     label3:
        $r10 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r10;

     label5:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label6:
        $r3 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        exitmonitor $r1;

     label7:
        return $r4;

     label8:
        $r9 := @caughtexception;

        exitmonitor $r1;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public void clear()
    {
        java.lang.Throwable $r4, $r5;
        java.util.HashMap $r1, $r2, $r3;
        org.apache.commons.collections.FastHashMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label06;

        entermonitor r0;

     label01:
        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map> = $r3;

        exitmonitor r0;

     label02:
        goto label05;

     label03:
        $r5 := @caughtexception;

        exitmonitor r0;

     label04:
        throw $r5;

     label05:
        goto label11;

     label06:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label07:
        $r2 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        virtualinvoke $r2.<java.util.HashMap: void clear()>();

        exitmonitor $r1;

     label08:
        goto label11;

     label09:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label10:
        throw $r4;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.collections.FastHashMap r1;
        java.util.Map r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r6, $r15;
        java.lang.Throwable $r22;
        java.util.HashMap $r3, $r4, $r5, $r13, $r14;
        int $i0, $i1, $i2, $i3;
        java.util.Map$Entry r23, r24;
        java.util.Iterator $r7, $r16;
        java.lang.Object r0, $r8, $r9, $r10, $r11, $r12, $r17, $r18, $r19, $r20, $r21;

        r1 := @this: org.apache.commons.collections.FastHashMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r0 instanceof java.util.Map;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (java.util.Map) r0;

        $z1 = r1.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z1 == 0 goto label09;

        $i2 = interfaceinvoke r2.<java.util.Map: int size()>();

        $r13 = r1.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $i3 = virtualinvoke $r13.<java.util.HashMap: int size()>();

        if $i2 == $i3 goto label03;

        return 0;

     label03:
        $r14 = r1.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r15 = virtualinvoke $r14.<java.util.HashMap: java.util.Set entrySet()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label08;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r17;

        $r18 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r19 != null goto label06;

        $r21 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        if $r21 != null goto label05;

        $z7 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r18);

        if $z7 != 0 goto label07;

     label05:
        return 0;

     label06:
        $r20 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        $z6 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r20);

        if $z6 != 0 goto label07;

        return 0;

     label07:
        goto label04;

     label08:
        return 1;

     label09:
        $r3 = r1.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r3;

     label10:
        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        $r4 = r1.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $i1 = virtualinvoke $r4.<java.util.HashMap: int size()>();

        if $i0 == $i1 goto label12;

        exitmonitor $r3;

     label11:
        return 0;

     label12:
        $r5 = r1.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label19;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r10 != null goto label16;

        $r12 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        if $r12 != null goto label14;

        $z4 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z4 != 0 goto label18;

     label14:
        exitmonitor $r3;

     label15:
        return 0;

     label16:
        $r11 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $z3 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z3 != 0 goto label18;

        exitmonitor $r3;

     label17:
        return 0;

     label18:
        goto label13;

     label19:
        exitmonitor $r3;

     label20:
        return 1;

     label21:
        $r22 := @caughtexception;

        exitmonitor $r3;

     label22:
        throw $r22;

        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label12 to label15 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label18 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    public int hashCode()
    {
        java.lang.Throwable $r10;
        java.util.HashMap $r1, $r2, $r6;
        org.apache.commons.collections.FastHashMap r0;
        int $i0, $i1, i2, i3;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4, $r8;
        java.util.Set $r3, $r7;
        java.lang.Object $r5, $r9;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label3;

        i2 = 0;

        $r6 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $i1 = virtualinvoke $r9.<java.lang.Object: int hashCode()>();

        i2 = i2 + $i1;

        goto label1;

     label2:
        return i2;

     label3:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label4:
        i3 = 0;

        $r2 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        i3 = i3 + $i0;

        goto label5;

     label6:
        exitmonitor $r1;

     label7:
        return i3;

     label8:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label9:
        throw $r10;

        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public java.lang.Object clone()
    {
        java.lang.Throwable $r6;
        java.util.HashMap $r1, $r3, $r5;
        org.apache.commons.collections.FastHashMap r0, $r2, $r4, r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.FastHashMap;

        $z0 = r0.<org.apache.commons.collections.FastHashMap: boolean fast>;

        if $z0 == 0 goto label1;

        $r4 = new org.apache.commons.collections.FastHashMap;

        $r5 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        specialinvoke $r4.<org.apache.commons.collections.FastHashMap: void <init>(java.util.Map)>($r5);

        r7 = $r4;

        goto label6;

     label1:
        $r1 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        entermonitor $r1;

     label2:
        $r2 = new org.apache.commons.collections.FastHashMap;

        $r3 = r0.<org.apache.commons.collections.FastHashMap: java.util.HashMap map>;

        specialinvoke $r2.<org.apache.commons.collections.FastHashMap: void <init>(java.util.Map)>($r3);

        r7 = $r2;

        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r6;

     label6:
        $z1 = virtualinvoke r0.<org.apache.commons.collections.FastHashMap: boolean getFast()>();

        virtualinvoke r7.<org.apache.commons.collections.FastHashMap: void setFast(boolean)>($z1);

        return r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections.FastHashMap r1;
        org.apache.commons.collections.FastHashMap$EntrySet $r0;

        r1 := @this: org.apache.commons.collections.FastHashMap;

        $r0 = new org.apache.commons.collections.FastHashMap$EntrySet;

        specialinvoke $r0.<org.apache.commons.collections.FastHashMap$EntrySet: void <init>(org.apache.commons.collections.FastHashMap,org.apache.commons.collections.FastHashMap$1)>(r1, null);

        return $r0;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections.FastHashMap r1;
        org.apache.commons.collections.FastHashMap$KeySet $r0;

        r1 := @this: org.apache.commons.collections.FastHashMap;

        $r0 = new org.apache.commons.collections.FastHashMap$KeySet;

        specialinvoke $r0.<org.apache.commons.collections.FastHashMap$KeySet: void <init>(org.apache.commons.collections.FastHashMap,org.apache.commons.collections.FastHashMap$1)>(r1, null);

        return $r0;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections.FastHashMap r1;
        org.apache.commons.collections.FastHashMap$Values $r0;

        r1 := @this: org.apache.commons.collections.FastHashMap;

        $r0 = new org.apache.commons.collections.FastHashMap$Values;

        specialinvoke $r0.<org.apache.commons.collections.FastHashMap$Values: void <init>(org.apache.commons.collections.FastHashMap,org.apache.commons.collections.FastHashMap$1)>(r1, null);

        return $r0;
    }
}
