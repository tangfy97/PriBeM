final class org.apache.commons.compress.archivers.tar.TarUtils$1 extends java.lang.Object implements org.apache.commons.compress.archivers.zip.ZipEncoding
{

    void <init>()
    {
        org.apache.commons.compress.archivers.tar.TarUtils$1 r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarUtils$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean canEncode(java.lang.String)
    {
        org.apache.commons.compress.archivers.tar.TarUtils$1 r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarUtils$1;

        r1 := @parameter0: java.lang.String;

        return 1;
    }

    public java.nio.ByteBuffer encode(java.lang.String)
    {
        byte[] r1;
        org.apache.commons.compress.archivers.tar.TarUtils$1 r3;
        char $c1;
        java.nio.ByteBuffer $r2;
        byte $b2;
        int $i0, i3;
        java.lang.String r0;

        r3 := @this: org.apache.commons.compress.archivers.tar.TarUtils$1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (byte)[$i0];

        i3 = 0;

     label1:
        if i3 >= $i0 goto label2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $b2 = (byte) $c1;

        r1[i3] = $b2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        return $r2;
    }

    public java.lang.String decode(byte[])
    {
        byte[] r0;
        org.apache.commons.compress.archivers.tar.TarUtils$1 r3;
        char $c3;
        short $s2, $s5;
        byte b1;
        int i0, i4;
        java.lang.StringBuilder $r4;
        java.lang.String $r2;

        r3 := @this: org.apache.commons.compress.archivers.tar.TarUtils$1;

        r0 := @parameter0: byte[];

        i0 = lengthof r0;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(i0);

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        b1 = r0[i4];

        if b1 != 0 goto label2;

        goto label3;

     label2:
        $s5 = (short) b1;

        $s2 = $s5 & 255;

        $c3 = (char) $s2;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        i4 = i4 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
