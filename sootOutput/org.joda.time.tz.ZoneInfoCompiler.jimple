public class org.joda.time.tz.ZoneInfoCompiler extends java.lang.Object
{
    static org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear;
    static org.joda.time.Chronology cLenientISO;
    private java.util.Map iRuleSets;
    private java.util.List iZones;
    private java.util.List iLinks;

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.IndexOutOfBoundsException $r14;
        boolean $z0, $z1, $z2;
        org.joda.time.tz.ZoneInfoCompiler $r1;
        java.lang.String[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r13;
        java.io.File $r10, $r12, r15, r16, $r18;
        java.io.File[] r17;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label01;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

        return;

     label01:
        r15 = null;

        r16 = null;

        i7 = 0;

     label02:
        $i1 = lengthof r0;

        if i7 >= $i1 goto label11;

     label03:
        $r5 = "-src";

        $r4 = r0[i7];

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label04;

        $r12 = new java.io.File;

        i8 = i7 + 1;

        $r13 = r0[i8];

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13);

        r15 = $r12;

        goto label08;

     label04:
        $r7 = "-dst";

        $r6 = r0[i7];

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label05;

        $r10 = new java.io.File;

        i8 = i7 + 1;

        $r11 = r0[i8];

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11);

        r16 = $r10;

        goto label08;

     label05:
        $r9 = "-?";

        $r8 = r0[i7];

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label07;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

     label06:
        return;

     label07:
        goto label11;

     label08:
        goto label10;

     label09:
        $r14 := @caughtexception;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

        return;

     label10:
        i7 = i8 + 1;

        goto label02;

     label11:
        $i2 = lengthof r0;

        if i7 < $i2 goto label12;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

        return;

     label12:
        $i3 = lengthof r0;

        $i4 = $i3 - i7;

        r17 = newarray (java.io.File)[$i4];

        i9 = 0;

     label13:
        $i5 = lengthof r0;

        if i7 >= $i5 goto label16;

        $i6 = i9;

        if r15 != null goto label14;

        $r18 = new java.io.File;

        $r3 = r0[i7];

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>($r3);

        goto label15;

     label14:
        $r18 = new java.io.File;

        $r2 = r0[i7];

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>(r15, $r2);

     label15:
        r17[$i6] = $r18;

        i7 = i7 + 1;

        i9 = i9 + 1;

        goto label13;

     label16:
        $r1 = new org.joda.time.tz.ZoneInfoCompiler;

        specialinvoke $r1.<org.joda.time.tz.ZoneInfoCompiler: void <init>()>();

        virtualinvoke $r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>(r16, r17);

        return;

        catch java.lang.IndexOutOfBoundsException from label03 to label06 with label09;
    }

    private static void printUsage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("where possible options include:");

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("  -src <directory>    Specify where to read source files");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("  -dst <directory>    Specify where to write generated files");

        return;
    }

    static org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r0, $r1, $r2;

        $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear>;

        if $r0 != null goto label1;

        $r2 = new org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        specialinvoke $r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>();

        <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear> = $r2;

     label1:
        $r1 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear>;

        return $r1;
    }

    static org.joda.time.Chronology getLenientISOChronology()
    {
        org.joda.time.Chronology $r0, $r1;
        org.joda.time.chrono.ISOChronology $r2;
        org.joda.time.chrono.LenientChronology $r3;

        $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r3 = staticinvoke <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>($r2);

        <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO> = $r3;

     label1:
        $r1 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO>;

        return $r1;
    }

    static void writeZoneInfoMap(java.io.DataOutputStream, java.util.Map) throws java.io.IOException
    {
        org.joda.time.DateTimeZone $r15, $r24;
        java.io.DataOutputStream r5;
        java.lang.Short $r13, $r18, $r36, $r38;
        java.util.Map r1;
        java.lang.InternalError $r37, $r39;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Collection $r6;
        java.util.Set $r3, $r8;
        java.util.HashMap $r34;
        short $s3, $s4, s7;
        int $i0, $i1, $i2, $i5, $i6, $i8, $i9;
        java.lang.String $r16, $r20, $r25, r31, r33;
        java.util.Map$Entry r30, r32;
        java.util.Iterator $r4, $r7, $r9;
        java.util.TreeMap $r35;
        java.lang.Object $r10, $r11, $r12, $r14, $r17, $r19, $r21, $r22, $r23;

        r5 := @parameter0: java.io.DataOutputStream;

        r1 := @parameter1: java.util.Map;

        $r34 = new java.util.HashMap;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r34.<java.util.HashMap: void <init>(int)>($i0);

        $r35 = new java.util.TreeMap;

        specialinvoke $r35.<java.util.TreeMap: void <init>()>();

        $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        s7 = 0;

     label1:
        $z4 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r21 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.util.Map$Entry) $r21;

        $r22 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>();

        r31 = (java.lang.String) $r22;

        $z2 = interfaceinvoke $r34.<java.util.Map: boolean containsKey(java.lang.Object)>(r31);

        if $z2 != 0 goto label2;

        $r36 = new java.lang.Short;

        specialinvoke $r36.<java.lang.Short: void <init>(short)>(s7);

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r31, $r36);

        virtualinvoke $r35.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, r31);

        $i6 = s7 + 1;

        s7 = (short) $i6;

        if s7 != 0 goto label2;

        $r37 = new java.lang.InternalError;

        specialinvoke $r37.<java.lang.InternalError: void <init>(java.lang.String)>("Too many time zone ids");

        throw $r37;

     label2:
        $r23 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r24 = (org.joda.time.DateTimeZone) $r23;

        $r25 = virtualinvoke $r24.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $z3 = interfaceinvoke $r34.<java.util.Map: boolean containsKey(java.lang.Object)>($r25);

        if $z3 != 0 goto label1;

        $r38 = new java.lang.Short;

        specialinvoke $r38.<java.lang.Short: void <init>(short)>(s7);

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r38);

        virtualinvoke $r35.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r25);

        $i5 = s7 + 1;

        s7 = (short) $i5;

        if s7 != 0 goto label1;

        $r39 = new java.lang.InternalError;

        specialinvoke $r39.<java.lang.InternalError: void <init>(java.lang.String)>("Too many time zone ids");

        throw $r39;

     label3:
        $i1 = virtualinvoke $r35.<java.util.TreeMap: int size()>();

        virtualinvoke r5.<java.io.DataOutputStream: void writeShort(int)>($i1);

        $r6 = virtualinvoke $r35.<java.util.TreeMap: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r19 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.lang.String) $r19;

        virtualinvoke r5.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r20);

        goto label4;

     label5:
        $i2 = interfaceinvoke r1.<java.util.Map: int size()>();

        virtualinvoke r5.<java.io.DataOutputStream: void writeShort(int)>($i2);

        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>();

        r33 = (java.lang.String) $r11;

        $r12 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>(r33);

        $r13 = (java.lang.Short) $r12;

        $s3 = virtualinvoke $r13.<java.lang.Short: short shortValue()>();

        $i8 = (int) $s3;

        virtualinvoke r5.<java.io.DataOutputStream: void writeShort(int)>($i8);

        $r14 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (org.joda.time.DateTimeZone) $r14;

        $r16 = virtualinvoke $r15.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r17 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        $r18 = (java.lang.Short) $r17;

        $s4 = virtualinvoke $r18.<java.lang.Short: short shortValue()>();

        $i9 = (int) $s4;

        virtualinvoke r5.<java.io.DataOutputStream: void writeShort(int)>($i9);

        goto label6;

     label7:
        return;
    }

    static int parseYear(java.lang.String, int)
    {
        int $i0, i1;
        java.lang.String $r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $r0 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("minimum");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("min");

        if $z1 == 0 goto label2;

     label1:
        return -2147483648;

     label2:
        $z2 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("maximum");

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("max");

        if $z3 == 0 goto label4;

     label3:
        return 2147483647;

     label4:
        $z4 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("only");

        if $z4 == 0 goto label5;

        return i1;

     label5:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

        return $i0;
    }

    static int parseMonth(java.lang.String)
    {
        java.util.Locale $r3;
        org.joda.time.chrono.ISOChronology $r0;
        int $i1;
        org.joda.time.DateTimeField $r1;
        long $l0;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r1 = virtualinvoke $r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField monthOfYear()>();

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, r2, $r3);

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    static int parseDayOfWeek(java.lang.String)
    {
        java.util.Locale $r3;
        org.joda.time.chrono.ISOChronology $r0;
        int $i1;
        org.joda.time.DateTimeField $r1;
        long $l0;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r1 = virtualinvoke $r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField dayOfWeek()>();

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $l0 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, r2, $r3);

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    static java.lang.String parseOptional(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    static int parseTime(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter $r0;
        org.joda.time.Chronology $r2;
        long $l2;
        java.lang.IllegalArgumentException $r6;
        org.joda.time.MutableDateTime $r5;
        byte $b1, b4;
        int $i0, i3, $i5;
        java.lang.String r3;
        boolean $z0, z1, z2, z3;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>();

        $r5 = new org.joda.time.MutableDateTime;

        $r2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>();

        specialinvoke $r5.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>(0L, $r2);

        z1 = 0;

        z3 = 0;

        z2 = 0;

        b4 = 0;

        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label1;

        z1 = 1;

        z3 = 1;

        z2 = 1;

        b4 = 1;

     label1:
        $i0 = virtualinvoke $r0.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>($r5, r3, b4);

        $b1 = z2 ^ -1;

        $i5 = (int) $b1;

        if $i0 != $i5 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r3);

        throw $r6;

     label2:
        $l2 = virtualinvoke $r5.<org.joda.time.MutableDateTime: long getMillis()>();

        i3 = (int) $l2;

        if z3 != 1 goto label3;

        i3 = neg i3;

     label3:
        return i3;
    }

    static char parseZoneChar(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        lookupswitch($i1)
        {
            case 71: goto label2;
            case 83: goto label1;
            case 85: goto label2;
            case 87: goto label3;
            case 90: goto label2;
            case 103: goto label2;
            case 115: goto label1;
            case 117: goto label2;
            case 119: goto label3;
            case 122: goto label2;
            default: goto label3;
        };

     label1:
        return 115;

     label2:
        return 117;

     label3:
        return 119;
    }

    static boolean test(java.lang.String, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r1;
        byte $b3, $b6, $b7, $b10, $b12;
        java.lang.Long $r13, $r59;
        org.joda.time.chrono.ISOChronology $r3, $r5, $r8, $r10, $r21, $r25, $r36, $r50;
        long $l0, $l1, $l2, $l4, $l5, $l8, $l9, $l11, l15, l17;
        java.util.ArrayList $r54;
        java.lang.StringBuffer $r16, $r18, $r19, $r22, $r23, $r26, $r31, $r33, $r34, $r37, $r38, $r39, $r45, $r47, $r48, $r51, $r55, $r57, $r60;
        java.lang.String r0, $r2, $r17, $r27, $r28, $r32, $r40, $r42, $r46, $r52, r53;
        org.joda.time.DateTimeField $r4, $r6, $r9, $r11;
        boolean $z0, $z1, $z2;
        int $i13, $i14, i16, i18, $i19, $i21, $i22;
        java.io.PrintStream $r15, $r30, $r44;
        org.joda.time.DateTime $r56, $r58, $r61, $r62;
        java.lang.Object $r12;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.joda.time.DateTimeZone;

        $r2 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label01;

        return 1;

     label01:
        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r4 = virtualinvoke $r3.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850);

        l15 = $l0;

        $r5 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r6 = virtualinvoke $r5.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        $l1 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050);

        i16 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l0);

        r53 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l0);

        $r54 = new java.util.ArrayList;

        specialinvoke $r54.<java.util.ArrayList: void <init>()>();

     label02:
        $l2 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l15);

        $b3 = $l2 cmp l15;

        if $b3 == 0 goto label07;

        $b12 = $l2 cmp $l1;

        $i19 = (int) $b12;

        if $i19 <= 0 goto label03;

        goto label07;

     label03:
        l15 = $l2;

        $i13 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>($l2);

        $r28 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l2);

        if i16 != $i13 goto label04;

        $z2 = virtualinvoke r53.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z2 == 0 goto label04;

        $r44 = <java.lang.System: java.io.PrintStream out>;

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*d* Error in ");

        $r46 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r56 = new org.joda.time.DateTime;

        $r50 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r56.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l2, $r50);

        $r51 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r56);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r44.<java.io.PrintStream: void println(java.lang.String)>($r52);

        return 0;

     label04:
        if $r28 == null goto label05;

        $i14 = virtualinvoke $r28.<java.lang.String: int length()>();

        if $i14 >= 3 goto label06;

        $r42 = "??";

        $z1 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z1 != 0 goto label06;

     label05:
        $r30 = <java.lang.System: java.io.PrintStream out>;

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*s* Error in ");

        $r32 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r58 = new org.joda.time.DateTime;

        $r36 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r58.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l2, $r36);

        $r37 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r58);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", nameKey=");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r40);

        return 0;

     label06:
        $r59 = new java.lang.Long;

        specialinvoke $r59.<java.lang.Long: void <init>(long)>($l2);

        interfaceinvoke $r54.<java.util.List: boolean add(java.lang.Object)>($r59);

        i16 = $i13;

        r53 = $r28;

        goto label02;

     label07:
        $r8 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r9 = virtualinvoke $r8.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        l17 = virtualinvoke $r9.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050);

        $r10 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r11 = virtualinvoke $r10.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        $l4 = virtualinvoke $r11.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850);

        i18 = interfaceinvoke $r54.<java.util.List: int size()>();

     label08:
        $i21 = (int) -1;

        i18 = i18 + $i21;

        if i18 < 0 goto label10;

        $l5 = virtualinvoke r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l17);

        $b6 = $l5 cmp l17;

        if $b6 == 0 goto label10;

        $b7 = $l5 cmp $l4;

        $i22 = (int) $b7;

        if $i22 >= 0 goto label09;

        goto label10;

     label09:
        l17 = $l5;

        $r12 = interfaceinvoke $r54.<java.util.List: java.lang.Object get(int)>(i18);

        $r13 = (java.lang.Long) $r12;

        $l8 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        $l9 = $l8 - 1L;

        $b10 = $l9 cmp $l5;

        if $b10 == 0 goto label08;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r60 = new java.lang.StringBuffer;

        specialinvoke $r60.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*r* Error in ");

        $r17 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r61 = new org.joda.time.DateTime;

        $r21 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r61.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l5, $r21);

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r61);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" != ");

        $r62 = new org.joda.time.DateTime;

        $l11 = $l8 - 1L;

        $r25 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r62.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l11, $r25);

        $r26 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r62);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r27);

        return 0;

     label10:
        return 1;
    }

    public void <init>()
    {
        java.util.HashMap $r1;
        org.joda.time.tz.ZoneInfoCompiler r0;
        java.util.ArrayList $r2, $r3;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks> = $r3;

        return;
    }

    public java.util.Map compile(java.io.File, java.io.File[]) throws java.io.IOException
    {
        org.joda.time.DateTimeZone $r31, $r47, r73;
        java.io.DataOutputStream $r8;
        java.util.Map $r29;
        java.lang.StringBuffer $r18, $r20, $r21, $r22, $r23, $r24, $r34, $r36, $r38, $r48, $r50, $r52, $r53, $r57, $r58, $r59, $r62, $r63, $r64;
        org.joda.time.tz.DateTimeZoneBuilder $r28;
        java.lang.String $r25, $r30, $r32, $r33, $r37, $r39, $r41, $r44, $r46, $r51, $r54, $r60, $r65, r71, r72;
        org.joda.time.tz.ZoneInfoCompiler$Zone r70;
        java.io.FileOutputStream $r7, $r43;
        java.io.IOException $r56, $r61;
        java.io.File r1, $r5, $r6, $r11, $r40, $r42, $r55, $r68;
        java.util.TreeMap $r2, $r9;
        java.io.BufferedReader $r66;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.joda.time.tz.ZoneInfoCompiler r3;
        java.util.List $r12, $r13, $r15, $r26, $r69;
        int $i0, $i1, $i2, i3, i4, $i5, i6, i7;
        java.io.PrintStream $r4, $r19, $r35, $r49;
        java.io.FileInputStream $r45;
        java.lang.Object $r14, $r16, $r17, $r27;
        java.io.FileReader $r67;
        java.util.Comparator $r10;
        java.io.File[] r0;

        r3 := @this: org.joda.time.tz.ZoneInfoCompiler;

        r1 := @parameter0: java.io.File;

        r0 := @parameter1: java.io.File[];

        if r0 == null goto label02;

        i3 = 0;

     label01:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label02;

        $r66 = new java.io.BufferedReader;

        $r67 = new java.io.FileReader;

        $r68 = r0[i3];

        specialinvoke $r67.<java.io.FileReader: void <init>(java.io.File)>($r68);

        specialinvoke $r66.<java.io.BufferedReader: void <init>(java.io.Reader)>($r67);

        virtualinvoke r3.<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)>($r66);

        virtualinvoke $r66.<java.io.BufferedReader: void close()>();

        i3 = i3 + 1;

        goto label01;

     label02:
        if r1 == null goto label04;

        $z4 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z4 != 0 goto label03;

        $r61 = new java.io.IOException;

        $r62 = new java.lang.StringBuffer;

        specialinvoke $r62.<java.lang.StringBuffer: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Destination directory doesn\'t exist: ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r61.<java.io.IOException: void <init>(java.lang.String)>($r65);

        throw $r61;

     label03:
        $z5 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z5 != 0 goto label04;

        $r56 = new java.io.IOException;

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Destination is not a directory: ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r56.<java.io.IOException: void <init>(java.lang.String)>($r60);

        throw $r56;

     label04:
        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        i4 = 0;

     label05:
        $r69 = r3.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        $i5 = interfaceinvoke $r69.<java.util.List: int size()>();

        if i4 >= $i5 goto label08;

        $r26 = r3.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(i4);

        r70 = (org.joda.time.tz.ZoneInfoCompiler$Zone) $r27;

        $r28 = new org.joda.time.tz.DateTimeZoneBuilder;

        specialinvoke $r28.<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>();

        $r29 = r3.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>;

        virtualinvoke r70.<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>($r28, $r29);

        $r30 = r70.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        $r31 = virtualinvoke $r28.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>($r30, 1);

        $r32 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $z1 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>($r32, $r31);

        if $z1 == 0 goto label07;

        $r33 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r31);

        if r1 == null goto label07;

        $r35 = <java.lang.System: java.io.PrintStream out>;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Writing ");

        $r37 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r40 = new java.io.File;

        $r41 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke $r40.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r41);

        $r42 = virtualinvoke $r40.<java.io.File: java.io.File getParentFile()>();

        $z2 = virtualinvoke $r42.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label06;

        $r55 = virtualinvoke $r40.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r55.<java.io.File: boolean mkdirs()>();

     label06:
        $r43 = new java.io.FileOutputStream;

        specialinvoke $r43.<java.io.FileOutputStream: void <init>(java.io.File)>($r40);

        $r44 = r70.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        virtualinvoke $r28.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>($r44, $r43);

        virtualinvoke $r43.<java.io.OutputStream: void close()>();

        $r45 = new java.io.FileInputStream;

        specialinvoke $r45.<java.io.FileInputStream: void <init>(java.io.File)>($r40);

        $r46 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r47 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>($r45, $r46);

        virtualinvoke $r45.<java.io.InputStream: void close()>();

        $z3 = virtualinvoke $r31.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r47);

        if $z3 != 0 goto label07;

        $r49 = <java.lang.System: java.io.PrintStream out>;

        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*e* Error in ");

        $r51 = virtualinvoke $r31.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": Didn\'t read properly from file");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>($r54);

     label07:
        i4 = i4 + 1;

        goto label05;

     label08:
        i6 = 0;

     label09:
        if i6 >= 2 goto label14;

        i7 = 0;

     label10:
        $r12 = r3.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $i0 = interfaceinvoke $r12.<java.util.List: int size()>();

        if i7 >= $i0 goto label13;

        $r13 = r3.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i7);

        r71 = (java.lang.String) $r14;

        $r15 = r3.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $i1 = i7 + 1;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>($i1);

        r72 = (java.lang.String) $r16;

        $r17 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r71);

        r73 = (org.joda.time.DateTimeZone) $r17;

        if r73 != null goto label11;

        if i6 <= 0 goto label12;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot find time zone \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r71);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' to link alias \'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r72);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' to");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r25);

        goto label12;

     label11:
        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r72, r73);

     label12:
        i7 = i7 + 2;

        goto label10;

     label13:
        i6 = i6 + 1;

        goto label09;

     label14:
        if r1 == null goto label16;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Writing ZoneInfoMap");

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "ZoneInfoMap");

        $r6 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label15;

        $r11 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r11.<java.io.File: boolean mkdirs()>();

     label15:
        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

        $r8 = new java.io.DataOutputStream;

        specialinvoke $r8.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r7);

        $r9 = new java.util.TreeMap;

        $r10 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r9.<java.util.TreeMap: void <init>(java.util.Comparator)>($r10);

        interfaceinvoke $r9.<java.util.Map: void putAll(java.util.Map)>($r2);

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>($r8, $r9);

        virtualinvoke $r8.<java.io.DataOutputStream: void close()>();

     label16:
        return $r2;
    }

    public void parseDataFile(java.io.BufferedReader) throws java.io.IOException
    {
        java.util.Map $r18, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.joda.time.tz.ZoneInfoCompiler r1;
        java.util.List $r2, $r11, $r13, $r23;
        org.joda.time.tz.ZoneInfoCompiler$Rule $r29;
        java.lang.StringBuffer $r8, $r9, $r32;
        java.util.StringTokenizer $r28;
        int $i0, $i2, $i4;
        org.joda.time.tz.ZoneInfoCompiler$RuleSet r27, $r30;
        java.lang.String $r3, $r5, $r10, $r12, $r14, $r17, $r21, $r25, r26;
        java.io.PrintStream $r7;
        org.joda.time.tz.ZoneInfoCompiler$Zone r24, $r31;
        char $c1, $c3;
        java.lang.Object $r19;
        java.io.BufferedReader r0;

        r1 := @this: org.joda.time.tz.ZoneInfoCompiler;

        r0 := @parameter0: java.io.BufferedReader;

        r24 = null;

     label01:
        $r25 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>();

        r26 = $r25;

        if $r25 == null goto label10;

        $r3 = virtualinvoke $r25.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label01;

        $c1 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        $i4 = (int) $c1;

        if $i4 != 35 goto label02;

        goto label01;

     label02:
        $i2 = virtualinvoke $r25.<java.lang.String: int indexOf(int)>(35);

        if $i2 < 0 goto label03;

        r26 = virtualinvoke $r25.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label03:
        $r28 = new java.util.StringTokenizer;

        specialinvoke $r28.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r26, " \t");

        $c3 = virtualinvoke r26.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z0 == 0 goto label04;

        $z5 = virtualinvoke $r28.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z5 == 0 goto label04;

        if r24 == null goto label01;

        virtualinvoke r24.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>($r28);

        goto label01;

     label04:
        if r24 == null goto label05;

        $r23 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>(r24);

     label05:
        r24 = null;

        $z1 = virtualinvoke $r28.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label01;

        $r5 = virtualinvoke $r28.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Rule");

        if $z2 == 0 goto label07;

        $r29 = new org.joda.time.tz.ZoneInfoCompiler$Rule;

        specialinvoke $r29.<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>($r28);

        $r18 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>;

        $r17 = $r29.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        r27 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r19;

        if r27 != null goto label06;

        $r30 = new org.joda.time.tz.ZoneInfoCompiler$RuleSet;

        specialinvoke $r30.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>($r29);

        $r22 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>;

        $r21 = $r29.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r30);

        goto label01;

     label06:
        virtualinvoke r27.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>($r29);

        goto label01;

     label07:
        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Zone");

        if $z3 == 0 goto label08;

        $r31 = new org.joda.time.tz.ZoneInfoCompiler$Zone;

        specialinvoke $r31.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>($r28);

        r24 = $r31;

        goto label01;

     label08:
        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Link");

        if $z4 == 0 goto label09;

        $r11 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $r12 = virtualinvoke $r28.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $r14 = virtualinvoke $r28.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label01;

     label09:
        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown line: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);

        goto label01;

     label10:
        if r24 == null goto label11;

        $r2 = r1.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r24);

     label11:
        return;
    }
}
