public abstract class groovyjarjarantlr.Grammar extends java.lang.Object
{
    protected groovyjarjarantlr.Tool antlrTool;
    protected groovyjarjarantlr.CodeGenerator generator;
    protected groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer;
    protected java.util.Hashtable symbols;
    protected boolean buildAST;
    protected boolean analyzerDebug;
    protected boolean interactive;
    protected java.lang.String superClass;
    protected groovyjarjarantlr.TokenManager tokenManager;
    protected java.lang.String exportVocab;
    protected java.lang.String importVocab;
    protected java.util.Hashtable options;
    protected groovyjarjarantlr.collections.impl.Vector rules;
    protected groovyjarjarantlr.Token preambleAction;
    protected java.lang.String className;
    protected java.lang.String fileName;
    protected groovyjarjarantlr.Token classMemberAction;
    protected boolean hasSyntacticPredicate;
    protected boolean hasUserErrorHandling;
    protected int maxk;
    protected boolean traceRules;
    protected boolean debuggingOutput;
    protected boolean defaultErrorHandler;
    protected java.lang.String comment;

    public void <init>(java.lang.String, groovyjarjarantlr.Tool, java.lang.String)
    {
        groovyjarjarantlr.CommonToken $r1, $r2;
        groovyjarjarantlr.Grammar r0;
        groovyjarjarantlr.Tool r4;
        java.lang.String r3, r8;
        java.util.Hashtable $r5, $r6;
        groovyjarjarantlr.collections.impl.Vector $r7;

        r0 := @this: groovyjarjarantlr.Grammar;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: groovyjarjarantlr.Tool;

        r8 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovyjarjarantlr.Grammar: boolean buildAST> = 0;

        r0.<groovyjarjarantlr.Grammar: boolean analyzerDebug> = 0;

        r0.<groovyjarjarantlr.Grammar: boolean interactive> = 0;

        r0.<groovyjarjarantlr.Grammar: java.lang.String superClass> = null;

        r0.<groovyjarjarantlr.Grammar: java.lang.String exportVocab> = null;

        r0.<groovyjarjarantlr.Grammar: java.lang.String importVocab> = null;

        $r1 = new groovyjarjarantlr.CommonToken;

        specialinvoke $r1.<groovyjarjarantlr.CommonToken: void <init>(int,java.lang.String)>(0, "");

        r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction> = $r1;

        r0.<groovyjarjarantlr.Grammar: java.lang.String className> = null;

        r0.<groovyjarjarantlr.Grammar: java.lang.String fileName> = null;

        $r2 = new groovyjarjarantlr.CommonToken;

        specialinvoke $r2.<groovyjarjarantlr.CommonToken: void <init>(int,java.lang.String)>(0, "");

        r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction> = $r2;

        r0.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate> = 0;

        r0.<groovyjarjarantlr.Grammar: boolean hasUserErrorHandling> = 0;

        r0.<groovyjarjarantlr.Grammar: int maxk> = 1;

        r0.<groovyjarjarantlr.Grammar: boolean traceRules> = 0;

        r0.<groovyjarjarantlr.Grammar: boolean debuggingOutput> = 0;

        r0.<groovyjarjarantlr.Grammar: boolean defaultErrorHandler> = 1;

        r0.<groovyjarjarantlr.Grammar: java.lang.String comment> = null;

        r0.<groovyjarjarantlr.Grammar: java.lang.String className> = r3;

        r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool> = r4;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.Grammar: java.util.Hashtable symbols> = $r5;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.Grammar: java.util.Hashtable options> = $r6;

        $r7 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r7.<groovyjarjarantlr.collections.impl.Vector: void <init>(int)>(100);

        r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules> = $r7;

        r0.<groovyjarjarantlr.Grammar: java.lang.String superClass> = r8;

        return;
    }

    public void define(groovyjarjarantlr.RuleSymbol)
    {
        java.lang.String $r4;
        groovyjarjarantlr.Grammar r0;
        groovyjarjarantlr.RuleSymbol r1;
        groovyjarjarantlr.collections.impl.Vector $r2;
        java.util.Hashtable $r3;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: groovyjarjarantlr.RuleSymbol;

        $r2 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: void appendElement(java.lang.Object)>(r1);

        $r3 = r0.<groovyjarjarantlr.Grammar: java.util.Hashtable symbols>;

        $r4 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        return;
    }

    public abstract void generate() throws java.io.IOException;

    protected java.lang.String getClassName()
    {
        java.lang.String $r1;
        groovyjarjarantlr.Grammar r0;

        r0 := @this: groovyjarjarantlr.Grammar;

        $r1 = r0.<groovyjarjarantlr.Grammar: java.lang.String className>;

        return $r1;
    }

    public boolean getDefaultErrorHandler()
    {
        groovyjarjarantlr.Grammar r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Grammar;

        $z0 = r0.<groovyjarjarantlr.Grammar: boolean defaultErrorHandler>;

        return $z0;
    }

    public java.lang.String getFilename()
    {
        java.lang.String $r1;
        groovyjarjarantlr.Grammar r0;

        r0 := @this: groovyjarjarantlr.Grammar;

        $r1 = r0.<groovyjarjarantlr.Grammar: java.lang.String fileName>;

        return $r1;
    }

    public int getIntegerOption(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.NumberFormatException $r5;
        groovyjarjarantlr.Grammar r0;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String r1, $r6;
        java.util.Hashtable $r2;
        groovyjarjarantlr.Token r4;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (groovyjarjarantlr.Token) $r3;

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<groovyjarjarantlr.Token: int getType()>();

        if $i0 == 20 goto label2;

     label1:
        $r5 = new java.lang.NumberFormatException;

        specialinvoke $r5.<java.lang.NumberFormatException: void <init>()>();

        throw $r5;

     label2:
        $r6 = virtualinvoke r4.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        return $i1;
    }

    public groovyjarjarantlr.Token getOption(java.lang.String)
    {
        java.lang.Object $r3;
        java.lang.String r1;
        groovyjarjarantlr.Grammar r0;
        java.util.Hashtable $r2;
        groovyjarjarantlr.Token $r4;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (groovyjarjarantlr.Token) $r3;

        return $r4;
    }

    protected abstract java.lang.String getSuperClass();

    public groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)
    {
        groovyjarjarantlr.GrammarSymbol $r4;
        java.lang.Object $r3;
        java.lang.String r1;
        groovyjarjarantlr.Grammar r0;
        java.util.Hashtable $r2;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.Grammar: java.util.Hashtable symbols>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (groovyjarjarantlr.GrammarSymbol) $r3;

        return $r4;
    }

    public java.util.Enumeration getSymbols()
    {
        java.util.Enumeration $r2;
        groovyjarjarantlr.Grammar r0;
        java.util.Hashtable $r1;

        r0 := @this: groovyjarjarantlr.Grammar;

        $r1 = r0.<groovyjarjarantlr.Grammar: java.util.Hashtable symbols>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration elements()>();

        return $r2;
    }

    public boolean hasOption(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.Grammar r0;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isDefined(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.Grammar r0;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.Grammar: java.util.Hashtable symbols>;

        $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public abstract void processArguments(java.lang.String[]);

    public void setCodeGenerator(groovyjarjarantlr.CodeGenerator)
    {
        groovyjarjarantlr.Grammar r0;
        groovyjarjarantlr.CodeGenerator r1;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: groovyjarjarantlr.CodeGenerator;

        r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.CodeGenerator generator> = r1;

        return;
    }

    public void setFilename(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.Grammar r0;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: java.lang.String;

        r0.<groovyjarjarantlr.Grammar: java.lang.String fileName> = r1;

        return;
    }

    public void setGrammarAnalyzer(groovyjarjarantlr.LLkGrammarAnalyzer)
    {
        groovyjarjarantlr.LLkGrammarAnalyzer r1;
        groovyjarjarantlr.Grammar r0;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: groovyjarjarantlr.LLkGrammarAnalyzer;

        r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer> = r1;

        return;
    }

    public boolean setOption(java.lang.String, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.Tool $r5, $r7, $r9, $r12, $r20, $r23, $r27;
        java.lang.StringBuffer $r11, $r13, $r15, $r16, $r26, $r28, $r30, $r31;
        java.lang.String r1, $r4, $r6, $r8, $r10, $r14, $r17, $r18, $r21, $r24, $r29, $r32, $r33;
        java.lang.NumberFormatException $r19, $r22, $r25;
        groovyjarjarantlr.Grammar r0;
        groovyjarjarantlr.Token r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.util.Hashtable $r3;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: groovyjarjarantlr.Token;

        $r3 = r0.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r4 = virtualinvoke r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("k");

        if $z0 == 0 goto label05;

     label01:
        $i6 = virtualinvoke r0.<groovyjarjarantlr.Grammar: int getIntegerOption(java.lang.String)>("k");

        r0.<groovyjarjarantlr.Grammar: int maxk> = $i6;

        $i7 = r0.<groovyjarjarantlr.Grammar: int maxk>;

        if $i7 > 0 goto label02;

        $r12 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("option \'k\' must be greater than 0 (was ");

        $r14 = virtualinvoke r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        $r18 = virtualinvoke r0.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i8 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i9 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r12.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r17, $r18, $i8, $i9);

        r0.<groovyjarjarantlr.Grammar: int maxk> = 1;

     label02:
        goto label04;

     label03:
        $r25 := @caughtexception;

        $r27 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("option \'k\' must be an integer (was ");

        $r29 = virtualinvoke r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        $r33 = virtualinvoke r0.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i14 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i15 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r27.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r32, $r33, $i14, $i15);

     label04:
        return 1;

     label05:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("codeGenMakeSwitchThreshold");

        if $z1 == 0 goto label10;

     label06:
        virtualinvoke r0.<groovyjarjarantlr.Grammar: int getIntegerOption(java.lang.String)>("codeGenMakeSwitchThreshold");

     label07:
        goto label09;

     label08:
        $r22 := @caughtexception;

        $r23 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r24 = virtualinvoke r0.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i12 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i13 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r23.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("option \'codeGenMakeSwitchThreshold\' must be an integer", $r24, $i12, $i13);

     label09:
        return 1;

     label10:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("codeGenBitsetTestThreshold");

        if $z2 == 0 goto label15;

     label11:
        virtualinvoke r0.<groovyjarjarantlr.Grammar: int getIntegerOption(java.lang.String)>("codeGenBitsetTestThreshold");

     label12:
        goto label14;

     label13:
        $r19 := @caughtexception;

        $r20 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r21 = virtualinvoke r0.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i10 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i11 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r20.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("option \'codeGenBitsetTestThreshold\' must be an integer", $r21, $i10, $i11);

     label14:
        return 1;

     label15:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("defaultErrorHandler");

        if $z3 == 0 goto label19;

        $z16 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z16 == 0 goto label16;

        r0.<groovyjarjarantlr.Grammar: boolean defaultErrorHandler> = 1;

        goto label18;

     label16:
        $z17 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z17 == 0 goto label17;

        r0.<groovyjarjarantlr.Grammar: boolean defaultErrorHandler> = 0;

        goto label18;

     label17:
        $r9 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r10 = virtualinvoke r0.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i4 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i5 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Value for defaultErrorHandler must be true or false", $r10, $i4, $i5);

     label18:
        return 1;

     label19:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("analyzerDebug");

        if $z4 == 0 goto label23;

        $z14 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z14 == 0 goto label20;

        r0.<groovyjarjarantlr.Grammar: boolean analyzerDebug> = 1;

        goto label22;

     label20:
        $z15 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z15 == 0 goto label21;

        r0.<groovyjarjarantlr.Grammar: boolean analyzerDebug> = 0;

        goto label22;

     label21:
        $r7 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r8 = virtualinvoke r0.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i3 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r7.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("option \'analyzerDebug\' must be true or false", $r8, $i2, $i3);

     label22:
        return 1;

     label23:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("codeGenDebug");

        if $z5 == 0 goto label27;

        $z12 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z12 == 0 goto label24;

        r0.<groovyjarjarantlr.Grammar: boolean analyzerDebug> = 1;

        goto label26;

     label24:
        $z13 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z13 == 0 goto label25;

        r0.<groovyjarjarantlr.Grammar: boolean analyzerDebug> = 0;

        goto label26;

     label25:
        $r5 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r6 = virtualinvoke r0.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r5.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("option \'codeGenDebug\' must be true or false", $r6, $i0, $i1);

     label26:
        return 1;

     label27:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("classHeaderSuffix");

        if $z6 == 0 goto label28;

        return 1;

     label28:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("classHeaderPrefix");

        if $z7 == 0 goto label29;

        return 1;

     label29:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("namespaceAntlr");

        if $z8 == 0 goto label30;

        return 1;

     label30:
        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("namespaceStd");

        if $z9 == 0 goto label31;

        return 1;

     label31:
        $z10 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("genHashLines");

        if $z10 == 0 goto label32;

        return 1;

     label32:
        $z11 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("noConstructors");

        if $z11 == 0 goto label33;

        return 1;

     label33:
        return 0;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label06 to label07 with label08;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
    }

    public void setTokenManager(groovyjarjarantlr.TokenManager)
    {
        groovyjarjarantlr.TokenManager r1;
        groovyjarjarantlr.Grammar r0;

        r0 := @this: groovyjarjarantlr.Grammar;

        r1 := @parameter0: groovyjarjarantlr.TokenManager;

        r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager> = r1;

        return;
    }

    public java.lang.String toString()
    {
        java.util.Enumeration $r3;
        groovyjarjarantlr.RuleBlock $r8;
        groovyjarjarantlr.Grammar r1;
        groovyjarjarantlr.RuleSymbol r6;
        java.lang.StringBuffer $r0;
        java.lang.Object $r5;
        java.lang.String $r4, $r7, $r9;
        groovyjarjarantlr.collections.impl.Vector $r2;
        boolean $z0, $z1;

        r1 := @this: groovyjarjarantlr.Grammar;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(20000);

        $r2 = r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (groovyjarjarantlr.RuleSymbol) $r5;

        $r7 = r6.<groovyjarjarantlr.RuleSymbol: java.lang.String id>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("mnextToken");

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r6.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.RuleBlock: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }
}
