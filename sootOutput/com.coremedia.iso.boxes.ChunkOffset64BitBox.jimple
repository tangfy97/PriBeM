public class com.coremedia.iso.boxes.ChunkOffset64BitBox extends com.coremedia.iso.boxes.ChunkOffsetBox
{
    public static final java.lang.String TYPE;
    private long[] chunkOffsets;
    private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0;

    public void <init>()
    {
        com.coremedia.iso.boxes.ChunkOffset64BitBox r0;

        r0 := @this: com.coremedia.iso.boxes.ChunkOffset64BitBox;

        specialinvoke r0.<com.coremedia.iso.boxes.ChunkOffsetBox: void <init>(java.lang.String)>("co64");

        return;
    }

    public long[] getChunkOffsets()
    {
        long[] $r4;
        com.coremedia.iso.boxes.ChunkOffset64BitBox r0;
        com.googlecode.mp4parser.RequiresParseDetailAspect $r3;
        org.aspectj.lang.JoinPoint$StaticPart $r1;
        org.aspectj.lang.JoinPoint $r2;

        r0 := @this: com.coremedia.iso.boxes.ChunkOffset64BitBox;

        $r1 = <com.coremedia.iso.boxes.ChunkOffset64BitBox: org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0>;

        $r2 = staticinvoke <org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint makeJP(org.aspectj.lang.JoinPoint$StaticPart,java.lang.Object,java.lang.Object)>($r1, r0, r0);

        $r3 = staticinvoke <com.googlecode.mp4parser.RequiresParseDetailAspect: com.googlecode.mp4parser.RequiresParseDetailAspect aspectOf()>();

        virtualinvoke $r3.<com.googlecode.mp4parser.RequiresParseDetailAspect: void before(org.aspectj.lang.JoinPoint)>($r2);

        $r4 = r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets>;

        return $r4;
    }

    protected long getContentSize()
    {
        long[] $r1;
        com.coremedia.iso.boxes.ChunkOffset64BitBox r0;
        int $i0, $i1, $i2;
        long $l3;

        r0 := @this: com.coremedia.iso.boxes.ChunkOffset64BitBox;

        $r1 = r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets>;

        $i0 = lengthof $r1;

        $i1 = 8 * $i0;

        $i2 = 8 + $i1;

        $l3 = (long) $i2;

        return $l3;
    }

    public void _parseDetails(java.nio.ByteBuffer)
    {
        long $l0, $l2;
        java.nio.ByteBuffer r1;
        long[] $r2, $r3;
        com.coremedia.iso.boxes.ChunkOffset64BitBox r0;
        int $i1, i3;

        r0 := @this: com.coremedia.iso.boxes.ChunkOffset64BitBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long parseVersionAndFlags(java.nio.ByteBuffer)>(r1);

        $l0 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r1);

        $i1 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>($l0);

        $r2 = newarray (long)[$i1];

        r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets> = $r2;

        i3 = 0;

        goto label2;

     label1:
        $r3 = r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets>;

        $l2 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>(r1);

        $r3[i3] = $l2;

        i3 = i3 + 1;

     label2:
        if i3 < $i1 goto label1;

        return;
    }

    protected void getContent(java.nio.ByteBuffer)
    {
        long $l1, l3;
        java.nio.ByteBuffer r1;
        long[] $r2, $r3;
        com.coremedia.iso.boxes.ChunkOffset64BitBox r0;
        int $i0, i2, i4;

        r0 := @this: com.coremedia.iso.boxes.ChunkOffset64BitBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: void writeVersionAndFlags(java.nio.ByteBuffer)>(r1);

        $r2 = r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r1, $l1);

        $r3 = r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets>;

        i2 = lengthof $r3;

        i4 = 0;

        goto label2;

     label1:
        l3 = $r3[i4];

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>(r1, l3);

        i4 = i4 + 1;

     label2:
        if i4 < i2 goto label1;

        return;
    }

    static void <clinit>()
    {
        <com.coremedia.iso.boxes.ChunkOffset64BitBox: java.lang.String TYPE> = "co64";

        staticinvoke <com.coremedia.iso.boxes.ChunkOffset64BitBox: void ajc$preClinit()>();

        return;
    }

    private static void ajc$preClinit()
    {
        org.aspectj.lang.JoinPoint$StaticPart $r2;
        org.aspectj.lang.reflect.MethodSignature $r1;
        org.aspectj.runtime.reflect.Factory $r0;

        $r0 = new org.aspectj.runtime.reflect.Factory;

        specialinvoke $r0.<org.aspectj.runtime.reflect.Factory: void <init>(java.lang.String,java.lang.Class)>("ChunkOffset64BitBox.java", class "Lcom/coremedia/iso/boxes/ChunkOffset64BitBox;");

        $r1 = virtualinvoke $r0.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.reflect.MethodSignature makeMethodSig(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("1", "getChunkOffsets", "com.coremedia.iso.boxes.ChunkOffset64BitBox", "", "", "", "[J");

        $r2 = virtualinvoke $r0.<org.aspectj.runtime.reflect.Factory: org.aspectj.lang.JoinPoint$StaticPart makeSJP(java.lang.String,org.aspectj.lang.Signature,int)>("method-execution", $r1, 23);

        <com.coremedia.iso.boxes.ChunkOffset64BitBox: org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0> = $r2;

        return;
    }
}
