public abstract class org.springframework.util.DigestUtils extends java.lang.Object
{
    private static final java.lang.String MD5_ALGORITHM_NAME;
    private static final char[] HEX_CHARS;

    static void <clinit>()
    {
        char[] $r0;

        <org.springframework.util.DigestUtils: java.lang.String MD5_ALGORITHM_NAME> = "MD5";

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <org.springframework.util.DigestUtils: char[] HEX_CHARS> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.util.DigestUtils r0;

        r0 := @this: org.springframework.util.DigestUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] md5Digest(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.springframework.util.DigestUtils: byte[] digest(java.lang.String,byte[])>("MD5", r0);

        return $r1;
    }

    public static java.lang.String md5DigestAsHex(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.springframework.util.DigestUtils: java.lang.String digestAsHexString(java.lang.String,byte[])>("MD5", r0);

        return $r1;
    }

    public static java.lang.StringBuilder appendMd5DigestAsHex(byte[], java.lang.StringBuilder)
    {
        byte[] r0;
        java.lang.StringBuilder r1, $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.StringBuilder;

        $r2 = staticinvoke <org.springframework.util.DigestUtils: java.lang.StringBuilder appendDigestAsHex(java.lang.String,byte[],java.lang.StringBuilder)>("MD5", r0, r1);

        return $r2;
    }

    private static java.security.MessageDigest getDigest(java.lang.String)
    {
        java.lang.IllegalStateException $r3;
        java.security.MessageDigest $r1;
        java.security.NoSuchAlgorithmException $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r0, $r7;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find MessageDigest with algorithm \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r2);

        throw $r3;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private static byte[] digest(java.lang.String, byte[])
    {
        byte[] r2, $r3;
        java.security.MessageDigest $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r1 = staticinvoke <org.springframework.util.DigestUtils: java.security.MessageDigest getDigest(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>(r2);

        return $r3;
    }

    private static java.lang.String digestAsHexString(java.lang.String, byte[])
    {
        byte[] r1;
        char[] $r2;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        $r2 = staticinvoke <org.springframework.util.DigestUtils: char[] digestAsHexChars(java.lang.String,byte[])>(r0, r1);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r2);

        return $r3;
    }

    private static java.lang.StringBuilder appendDigestAsHex(java.lang.String, byte[], java.lang.StringBuilder)
    {
        byte[] r1;
        char[] $r2;
        java.lang.StringBuilder r3, $r4;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        r3 := @parameter2: java.lang.StringBuilder;

        $r2 = staticinvoke <org.springframework.util.DigestUtils: char[] digestAsHexChars(java.lang.String,byte[])>(r0, r1);

        $r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r2);

        return $r4;
    }

    private static char[] digestAsHexChars(java.lang.String, byte[])
    {
        byte[] r1, $r2;
        char[] $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        $r2 = staticinvoke <org.springframework.util.DigestUtils: byte[] digest(java.lang.String,byte[])>(r0, r1);

        $r3 = staticinvoke <org.springframework.util.DigestUtils: char[] encodeHex(byte[])>($r2);

        return $r3;
    }

    private static char[] encodeHex(byte[])
    {
        byte[] r1;
        byte b2, $b6;
        int $i0, $i1, $i3, $i4, $i8, i9, $i10, $i11;
        char $c5, $c7;
        char[] r0, $r2, $r3;

        r1 := @parameter0: byte[];

        r0 = newarray (char)[32];

        i9 = 0;

        goto label2;

     label1:
        $i1 = i9 / 2;

        b2 = r1[$i1];

        $r2 = <org.springframework.util.DigestUtils: char[] HEX_CHARS>;

        $i10 = (int) b2;

        $i3 = $i10 >>> 4;

        $i4 = $i3 & 15;

        $c5 = $r2[$i4];

        r0[i9] = $c5;

        $i8 = i9 + 1;

        $r3 = <org.springframework.util.DigestUtils: char[] HEX_CHARS>;

        $b6 = b2 & 15;

        $i11 = (int) $b6;

        $c7 = $r3[$i11];

        r0[$i8] = $c7;

        i9 = i9 + 2;

     label2:
        $i0 = lengthof r0;

        if i9 < $i0 goto label1;

        return r0;
    }
}
