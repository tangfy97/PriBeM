public class com.hp.hpl.jena.sparql.resultset.TSVInputIterator extends com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorBase
{
    private java.io.BufferedReader reader;
    private com.hp.hpl.jena.sparql.engine.binding.BindingMap binding;
    private int expectedItems;
    private java.util.List vars;
    private long lineNum;

    public void <init>(java.io.BufferedReader, java.util.List)
    {
        com.hp.hpl.jena.sparql.resultset.TSVInputIterator r0;
        java.util.List r2;
        int $i0;
        java.io.BufferedReader r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.TSVInputIterator;

        r1 := @parameter0: java.io.BufferedReader;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: long lineNum> = 1L;

        r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: java.io.BufferedReader reader> = r1;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: int expectedItems> = $i0;

        r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: java.util.List vars> = r2;

        return;
    }

    public void output(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.resultset.TSVInputIterator r1;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.sparql.serializer.SerializationContext r2;

        r1 := @this: com.hp.hpl.jena.sparql.resultset.TSVInputIterator;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r2 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void println(java.lang.String)>("TSVInputIterator");

        return;
    }

    protected boolean hasNextBinding()
    {
        com.hp.hpl.jena.sparql.resultset.TSVInputIterator r0;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r2;
        java.io.BufferedReader $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.TSVInputIterator;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: java.io.BufferedReader reader>;

        if $r1 == null goto label2;

        $r2 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding>;

        if $r2 != null goto label1;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: boolean parseNextBinding()>();

        return $z0;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean parseNextBinding()
    {
        com.hp.hpl.jena.graph.Node $r7;
        java.lang.Integer $r19, $r20, $r26;
        java.lang.Long $r14, $r18, $r25, $r31;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r5, $r9, $r22;
        boolean $z0, $z1, $z2;
        java.util.List $r8;
        java.lang.StringBuilder $r37, $r39, $r41;
        java.util.regex.Pattern $r3;
        java.lang.Object[] $r13, $r17, $r24, $r30;
        org.apache.jena.riot.RiotException $r28;
        long $l0, $l1, $l5, $l6, $l10, $l12;
        java.lang.String[] $r4;
        int $i2, $i3, $i4, $i7, $i8, $i9, $i11, i13, $i15;
        java.lang.String $r2, r6, $r15, $r21, $r27, $r32, $r33, $r38, $r40;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r42, $r43, $r44, $r45, $r46;
        java.io.IOException $r34;
        com.hp.hpl.jena.sparql.core.Var $r11;
        com.hp.hpl.jena.sparql.resultset.TSVInputIterator r0;
        java.lang.Object $r10;
        java.io.BufferedReader $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.TSVInputIterator;

     label01:
        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: java.io.BufferedReader reader>;

        $r2 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r2 != null goto label03;

     label02:
        return 0;

     label03:
        $l0 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: long lineNum>;

        $l1 = $l0 + 1L;

        r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: long lineNum> = $l1;

     label04:
        goto label06;

     label05:
        $r34 := @caughtexception;

        $r42 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing TSV results - ");

        $r38 = virtualinvoke $r34.<java.io.IOException: java.lang.String getMessage()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r40);

        throw $r42;

     label06:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label08;

        $i9 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: int expectedItems>;

        if $i9 <= 1 goto label07;

        $r43 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r24 = newarray (java.lang.Object)[2];

        $l10 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: long lineNum>;

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l10);

        $r24[0] = $r25;

        $i11 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: int expectedItems>;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r24[1] = $r26;

        $r27 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error Parsing TSV results at Line %d - The result row had 0/1 values when %d were expected", $r24);

        specialinvoke $r43.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r27);

        throw $r43;

     label07:
        $r22 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding> = $r22;

        return 1;

     label08:
        $r3 = <com.hp.hpl.jena.sparql.resultset.TSVInput: java.util.regex.Pattern pattern>;

        $i15 = (int) -1;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>($r2, $i15);

        $i3 = lengthof $r4;

        $i2 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: int expectedItems>;

        if $i3 == $i2 goto label09;

        $r44 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r17 = newarray (java.lang.Object)[4];

        $l6 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: long lineNum>;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $r17[0] = $r18;

        $r17[1] = $r2;

        $i7 = lengthof $r4;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r17[2] = $r19;

        $i8 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: int expectedItems>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r17[3] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error Parsing TSV results at Line %d - The result row \'%s\' has %d values instead of the expected %d.", $r17);

        specialinvoke $r44.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r21);

        throw $r44;

     label09:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding> = $r5;

        i13 = 0;

     label10:
        $i4 = lengthof $r4;

        if i13 >= $i4 goto label16;

        r6 = $r4[i13];

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label11;

        goto label15;

     label11:
        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node parseNode(java.lang.String)>(r6);

        $z2 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z2 != 0 goto label12;

        $r45 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r13 = newarray (java.lang.Object)[2];

        $l5 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: long lineNum>;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r13[0] = $r14;

        $r13[1] = r6;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Line %d: Not a concrete RDF term: %s", $r13);

        specialinvoke $r45.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r15);

        throw $r45;

     label12:
        $r9 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding>;

        $r8 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: java.util.List vars>;

        $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i13);

        $r11 = (com.hp.hpl.jena.sparql.core.Var) $r10;

        interfaceinvoke $r9.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r11, $r7);

     label13:
        goto label15;

     label14:
        $r28 := @caughtexception;

        $r46 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r30 = newarray (java.lang.Object)[3];

        $l12 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: long lineNum>;

        $r31 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        $r30[0] = $r31;

        $r30[1] = r6;

        $r32 = virtualinvoke $r28.<org.apache.jena.riot.RiotException: java.lang.String getMessage()>();

        $r30[2] = $r32;

        $r33 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Line %d: Data %s contains error: %s", $r30);

        specialinvoke $r46.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r33);

        throw $r46;

     label15:
        i13 = i13 + 1;

        goto label10;

     label16:
        return 1;

        catch java.io.IOException from label01 to label02 with label05;
        catch java.io.IOException from label03 to label04 with label05;
        catch org.apache.jena.riot.RiotException from label11 to label13 with label14;
    }

    protected com.hp.hpl.jena.sparql.engine.binding.Binding moveToNextBinding()
    {
        com.hp.hpl.jena.sparql.resultset.TSVInputIterator r0;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap r1;
        java.util.NoSuchElementException $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.TSVInputIterator;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding>;

        r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding> = null;

        return r1;
    }

    protected void closeIterator()
    {
        com.hp.hpl.jena.sparql.resultset.TSVInputIterator r0;
        java.io.BufferedReader $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.TSVInputIterator;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: java.io.BufferedReader reader>;

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>($r1);

        r0.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: java.io.BufferedReader reader> = null;

        return;
    }

    protected void requestCancel()
    {
        com.hp.hpl.jena.sparql.resultset.TSVInputIterator r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.TSVInputIterator;

        return;
    }
}
