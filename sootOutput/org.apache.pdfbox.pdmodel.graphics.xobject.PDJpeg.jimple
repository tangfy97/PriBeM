public class org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg extends org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage
{
    private java.awt.image.BufferedImage image;
    private static final java.lang.String JPG;
    private static final java.util.List DCT_FILTERS;
    private static final float DEFAULT_COMPRESSION_LEVEL;

    public void <init>(org.apache.pdfbox.pdmodel.common.PDStream)
    {
        org.apache.pdfbox.pdmodel.common.PDStream r1;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.common.PDStream;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: void <init>(org.apache.pdfbox.pdmodel.common.PDStream,java.lang.String)>(r1, "jpg");

        r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image> = null;

        return;
    }

    public void <init>(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSName $r5, $r6, $r7, $r8, $r9, $r10;
        java.awt.image.BufferedImage $r11, $r12;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r0;
        org.apache.pdfbox.pdmodel.PDDocument r2;
        org.apache.pdfbox.pdmodel.common.PDStream $r1;
        org.apache.pdfbox.cos.COSStream $r4;
        java.io.InputStream r3;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r3 := @parameter1: java.io.InputStream;

        $r1 = new org.apache.pdfbox.pdmodel.common.PDStream;

        specialinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,boolean)>(r2, r3, 1);

        specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: void <init>(org.apache.pdfbox.pdmodel.common.PDStream,java.lang.String)>($r1, "jpg");

        r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image> = null;

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: org.apache.pdfbox.cos.COSStream getCOSStream()>();

        $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER>;

        $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DCT_DECODE>;

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r6, $r5);

        $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE>;

        $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IMAGE>;

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r8, $r7);

        $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>;

        $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT>;

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r10, $r9);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage getRGBImage()>();

        $r11 = r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image>;

        if $r11 == null goto label1;

        $r12 = r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image>;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void setPropertiesFromAWT(java.awt.image.BufferedImage)>($r12);

     label1:
        return;
    }

    private void setPropertiesFromAWT(java.awt.image.BufferedImage) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r4;
        java.awt.image.BufferedImage r1;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r0;
        java.awt.image.ColorModel $r2, $r3;
        int $i0, $i1, $i2, $i3;
        org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray $r5;
        org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB $r6;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r1 := @parameter0: java.awt.image.BufferedImage;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void setBitsPerComponent(int)>(8);

        $r2 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $i0 = virtualinvoke $r2.<java.awt.image.ColorModel: int getNumComponents()>();

        if $i0 != 3 goto label1;

        $r6 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB INSTANCE>;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>($r6);

        goto label3;

     label1:
        $r3 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $i1 = virtualinvoke $r3.<java.awt.image.ColorModel: int getNumComponents()>();

        if $i1 != 1 goto label2;

        $r5 = new org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;

        specialinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: void <init>()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>($r5);

        goto label3;

     label2:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("");

        throw $r4;

     label3:
        $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void setHeight(int)>($i2);

        $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void setWidth(int)>($i3);

        return;
    }

    public void <init>(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage) throws java.io.IOException
    {
        java.awt.image.BufferedImage r3;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r0;
        org.apache.pdfbox.pdmodel.PDDocument r2;
        org.apache.pdfbox.pdmodel.common.PDStream $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r3 := @parameter1: java.awt.image.BufferedImage;

        $r1 = new org.apache.pdfbox.pdmodel.common.PDStream;

        specialinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.pdmodel.PDDocument)>(r2);

        specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: void <init>(org.apache.pdfbox.pdmodel.common.PDStream,java.lang.String)>($r1, "jpg");

        r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image> = null;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void createImageStream(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,float)>(r2, r3, 0.75F);

        return;
    }

    public void <init>(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage, float) throws java.io.IOException
    {
        java.awt.image.BufferedImage r3;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r0;
        org.apache.pdfbox.pdmodel.PDDocument r2;
        float f0;
        org.apache.pdfbox.pdmodel.common.PDStream $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r2 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r3 := @parameter1: java.awt.image.BufferedImage;

        f0 := @parameter2: float;

        $r1 = new org.apache.pdfbox.pdmodel.common.PDStream;

        specialinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.pdmodel.PDDocument)>(r2);

        specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: void <init>(org.apache.pdfbox.pdmodel.common.PDStream,java.lang.String)>($r1, "jpg");

        r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image> = null;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void createImageStream(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,float)>(r2, r3, f0);

        return;
    }

    private void createImageStream(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage, float) throws java.io.IOException
    {
        java.lang.Throwable $r18;
        java.awt.AlphaComposite $r16;
        java.awt.Graphics2D $r15;
        int $i0, $i1, $i2;
        org.apache.pdfbox.cos.COSStream $r2, $r4;
        boolean $z0;
        java.io.OutputStream $r3;
        org.apache.pdfbox.cos.COSName $r5, $r6, $r7, $r8, $r9, $r10, $r13;
        java.lang.UnsupportedOperationException $r17;
        java.awt.image.BufferedImage $r14, r19, r20;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r1, $r11;
        org.apache.pdfbox.pdmodel.PDDocument r12;
        java.awt.image.ColorModel $r0;
        float f0;

        r1 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r12 := @parameter0: org.apache.pdfbox.pdmodel.PDDocument;

        r19 := @parameter1: java.awt.image.BufferedImage;

        f0 := @parameter2: float;

        r20 = null;

        $r0 = virtualinvoke r19.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $z0 = virtualinvoke $r0.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r19.<java.awt.image.BufferedImage: int getTransparency()>();

        if $i0 != 2 goto label1;

        $r17 = new java.lang.UnsupportedOperationException;

        specialinvoke $r17.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("BITMASK Transparency JPEG compression is not useful, use PDPixelMap instead");

        throw $r17;

     label1:
        r20 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage extractAlphaImage(java.awt.image.BufferedImage)>(r19);

        $r14 = new java.awt.image.BufferedImage;

        $i1 = virtualinvoke r19.<java.awt.image.BufferedImage: int getWidth()>();

        $i2 = virtualinvoke r19.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r14.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i1, $i2, 1);

        $r15 = virtualinvoke $r14.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r16 = <java.awt.AlphaComposite: java.awt.AlphaComposite Src>;

        virtualinvoke $r15.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r16);

        virtualinvoke $r15.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r19, 0, 0, null);

        virtualinvoke $r15.<java.awt.Graphics2D: void dispose()>();

        r19 = $r14;

     label2:
        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: org.apache.pdfbox.cos.COSStream getCOSStream()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createFilteredStream()>();

     label3:
        staticinvoke <org.apache.pdfbox.util.ImageIOUtil: boolean writeImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,int,float)>(r19, "jpg", $r3, 72, f0);

        $r4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: org.apache.pdfbox.cos.COSStream getCOSStream()>();

        $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER>;

        $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DCT_DECODE>;

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r6, $r5);

        $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE>;

        $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IMAGE>;

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r8, $r7);

        $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>;

        $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT>;

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r10, $r9);

        if r20 == null goto label4;

        $r11 = new org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        specialinvoke $r11.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void <init>(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage,float)>(r12, r20, f0);

        $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SMASK>;

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r13, $r11);

     label4:
        specialinvoke r1.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void setPropertiesFromAWT(java.awt.image.BufferedImage)>(r19);

     label5:
        virtualinvoke $r3.<java.io.OutputStream: void close()>();

        goto label8;

     label6:
        $r18 := @caughtexception;

     label7:
        virtualinvoke $r3.<java.io.OutputStream: void close()>();

        throw $r18;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.awt.image.BufferedImage getRGBImage() throws java.io.IOException
    {
        byte[] $r3, $r5;
        java.io.ByteArrayOutputStream $r2;
        javax.imageio.IIOException $r19;
        java.awt.color.ColorSpace $r13, $r17;
        java.io.ByteArrayInputStream $r6, $r9;
        org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN $r11;
        int $i0, $i1;
        java.awt.image.Raster $r7, $r8, $r10, $r14;
        boolean $z0, $z1, $z2, $z3, z4;
        java.awt.image.BufferedImage $r1, $r18, r20, $r21, $r22;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r0;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace $r4;
        org.apache.pdfbox.pdmodel.graphics.color.PDSeparation $r15;
        org.apache.pdfbox.pdmodel.common.function.PDFunction $r12, $r16;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image>;

        if $r1 == null goto label01;

        $r18 = r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image>;

        return $r18;

     label01:
        r20 = null;

        z4 = 0;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void removeAllFiltersButDCT(java.io.OutputStream)>($r2);

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void close()>();

        $r3 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>();

     label02:
        $z0 = $r4 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK;

        if $z0 != 0 goto label03;

        $z1 = $r4 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDICCBased;

        if $z1 == 0 goto label07;

        $i1 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>();

        if $i1 != 4 goto label07;

     label03:
        $i0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: int getApp14AdobeTransform(byte[])>($r3);

        if $i0 != 0 goto label04;

        $r8 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.Raster readImage(byte[])>($r3);

        r20 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage convertCMYK2RGB(java.awt.image.Raster,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>($r8, $r4);

        goto label06;

     label04:
        if $i0 != 1 goto label05;

        goto label06;

     label05:
        if $i0 != 2 goto label06;

        $r7 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.Raster readImage(byte[])>($r3);

        r20 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage convertYCCK2RGB(java.awt.image.Raster)>($r7);

     label06:
        goto label10;

     label07:
        $z2 = $r4 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDSeparation;

        if $z2 == 0 goto label08;

        $r14 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.Raster readImage(byte[])>($r3);

        $r15 = (org.apache.pdfbox.pdmodel.graphics.color.PDSeparation) $r4;

        $r16 = virtualinvoke $r15.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.common.function.PDFunction getTintTransform()>();

        $r17 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.color.ColorSpace getJavaColorSpace()>();

        r20 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage processTintTransformation(java.awt.image.Raster,org.apache.pdfbox.pdmodel.common.function.PDFunction,java.awt.color.ColorSpace)>($r14, $r16, $r17);

        goto label10;

     label08:
        $z3 = $r4 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN;

        if $z3 == 0 goto label09;

        $r10 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.Raster readImage(byte[])>($r3);

        $r11 = (org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN) $r4;

        $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN: org.apache.pdfbox.pdmodel.common.function.PDFunction getTintTransform()>();

        $r13 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.color.ColorSpace getJavaColorSpace()>();

        r20 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage processTintTransformation(java.awt.image.Raster,org.apache.pdfbox.pdmodel.common.function.PDFunction,java.awt.color.ColorSpace)>($r10, $r12, $r13);

        goto label10;

     label09:
        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        r20 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>($r9);

     label10:
        goto label12;

     label11:
        $r19 := @caughtexception;

        z4 = 1;

     label12:
        if r20 != null goto label13;

        if z4 == 0 goto label13;

        $r5 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: byte[] replaceHeader(byte[])>($r3);

        $r6 = new java.io.ByteArrayInputStream;

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        r20 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>($r6);

     label13:
        $r21 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage applyMasks(java.awt.image.BufferedImage)>(r20);

        r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image> = $r21;

        $r22 = r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image>;

        return $r22;

        catch javax.imageio.IIOException from label02 to label10 with label11;
    }

    public void write2OutputStream(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r4;
        java.awt.image.BufferedImage $r6, $r7;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r0;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace $r1;
        java.lang.String $r2, $r3, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r4 := @parameter0: java.io.OutputStream;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>();

        $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.lang.String getName()>();

        $r3 = "DeviceGray";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r5 = "DeviceRGB";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

     label1:
        specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: void removeAllFiltersButDCT(java.io.OutputStream)>(r4);

        return;

     label2:
        virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage getRGBImage()>();

        $r6 = r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image>;

        if $r6 == null goto label3;

        $r7 = r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image>;

        staticinvoke <org.apache.pdfbox.util.ImageIOUtil: boolean writeImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)>($r7, "jpg", r4);

     label3:
        return;
    }

    private void removeAllFiltersButDCT(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r5;
        byte[] r4;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r0;
        org.apache.pdfbox.pdmodel.common.PDStream $r1;
        java.util.List $r2;
        int $i0, $i2;
        java.io.InputStream $r3;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r5 := @parameter0: java.io.OutputStream;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: org.apache.pdfbox.pdmodel.common.PDStream getPDStream()>();

        $r2 = <org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.util.List DCT_FILTERS>;

        $r3 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream getPartiallyFilteredStream(java.util.List)>($r2);

        r4 = newarray (byte)[1024];

     label1:
        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>(r4);

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        virtualinvoke r5.<java.io.OutputStream: void write(byte[],int,int)>(r4, 0, $i0);

        goto label1;

     label2:
        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        return;
    }

    private int getHeaderEndPos(byte[])
    {
        byte[] r0;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r1;
        byte b1;
        int $i0, $i2, i3, $i4, $i6;

        r1 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r0 := @parameter0: byte[];

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        b1 = r0[i3];

        $i4 = (int) b1;

        $i6 = (int) -37;

        if $i4 != $i6 goto label2;

        $i2 = i3 - 2;

        return $i2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    private byte[] replaceHeader(byte[])
    {
        byte[] r1, $r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r1 := @parameter0: byte[];

        $i0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: int getHeaderEndPos(byte[])>(r1);

        $r2 = newarray (byte)[20];

        $r2[0] = -1;

        $r2[1] = -40;

        $r2[2] = -1;

        $r2[3] = -32;

        $r2[4] = 0;

        $r2[5] = 16;

        $r2[6] = 74;

        $r2[7] = 70;

        $r2[8] = 73;

        $r2[9] = 70;

        $r2[10] = 0;

        $r2[11] = 1;

        $r2[12] = 1;

        $r2[13] = 1;

        $r2[14] = 0;

        $r2[15] = 96;

        $r2[16] = 0;

        $r2[17] = 96;

        $r2[18] = 0;

        $r2[19] = 0;

        $i1 = lengthof r1;

        $i3 = $i1 - $i0;

        $i2 = lengthof $r2;

        $i4 = $i3 + $i2;

        $i5 = $i4 - 1;

        r3 = newarray (byte)[$i5];

        $i6 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, 0, $i6);

        $i11 = $i0 + 1;

        $i10 = lengthof $r2;

        $i7 = lengthof r1;

        $i8 = $i7 - $i0;

        $i9 = $i8 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i11, r3, $i10, $i9);

        return r3;
    }

    private int getApp14AdobeTransform(byte[])
    {
        byte[] r1;
        javax.imageio.metadata.IIOMetadata $r6;
        java.io.ByteArrayInputStream $r0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r24;
        javax.imageio.stream.ImageInputStream $r2, r26;
        java.lang.Throwable $r20;
        org.w3c.dom.Node $r7, $r9, $r13, $r17;
        int $i0, $i1, i2, i3, i4;
        org.w3c.dom.NamedNodeMap $r16;
        java.lang.String $r10, $r11, $r14, $r15, $r18;
        org.w3c.dom.NodeList $r8, $r12;
        javax.imageio.ImageReader r25;
        java.util.Iterator $r3;
        java.io.IOException $r19, $r21, $r22, $r23;
        java.lang.RuntimeException $r4;
        java.lang.Object $r5;

        r24 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r1 := @parameter0: byte[];

        i2 = 0;

        r25 = null;

        r26 = null;

     label01:
        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r2 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object)>($r0);

        r26 = $r2;

        $r3 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageReaders(java.lang.Object)>($r2);

        if $r3 == null goto label02;

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label03;

     label02:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("No ImageReaders found");

        throw $r4;

     label03:
        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r25 = (javax.imageio.ImageReader) $r5;

        virtualinvoke r25.<javax.imageio.ImageReader: void setInput(java.lang.Object)>($r2);

        $r6 = virtualinvoke r25.<javax.imageio.ImageReader: javax.imageio.metadata.IIOMetadata getImageMetadata(int)>(0);

        if $r6 == null goto label08;

        $r7 = virtualinvoke $r6.<javax.imageio.metadata.IIOMetadata: org.w3c.dom.Node getAsTree(java.lang.String)>("javax_imageio_jpeg_image_1.0");

        $r8 = interfaceinvoke $r7.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i3 = 0;

     label04:
        $i0 = interfaceinvoke $r8.<org.w3c.dom.NodeList: int getLength()>();

        if i3 >= $i0 goto label08;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        $r10 = "markerSequence";

        $r11 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label07;

        $r12 = interfaceinvoke $r9.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i4 = 0;

     label05:
        $i1 = interfaceinvoke $r12.<org.w3c.dom.NodeList: int getLength()>();

        if i4 >= $i1 goto label07;

        $r13 = interfaceinvoke $r12.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i4);

        $r14 = "app14Adobe";

        $r15 = interfaceinvoke $r13.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 == 0 goto label06;

        $z3 = interfaceinvoke $r13.<org.w3c.dom.Node: boolean hasAttributes()>();

        if $z3 == 0 goto label06;

        $r16 = interfaceinvoke $r13.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r17 = interfaceinvoke $r16.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("transform");

        $r18 = interfaceinvoke $r17.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r18);

        goto label07;

     label06:
        i4 = i4 + 1;

        goto label05;

     label07:
        i3 = i3 + 1;

        goto label04;

     label08:
        if $r2 == null goto label09;

        interfaceinvoke $r2.<javax.imageio.stream.ImageInputStream: void close()>();

     label09:
        goto label11;

     label10:
        $r23 := @caughtexception;

     label11:
        if r25 == null goto label23;

        virtualinvoke r25.<javax.imageio.ImageReader: void dispose()>();

        goto label23;

     label12:
        $r22 := @caughtexception;

     label13:
        if r26 == null goto label14;

        interfaceinvoke r26.<javax.imageio.stream.ImageInputStream: void close()>();

     label14:
        goto label16;

     label15:
        $r21 := @caughtexception;

     label16:
        if r25 == null goto label23;

        virtualinvoke r25.<javax.imageio.ImageReader: void dispose()>();

        goto label23;

     label17:
        $r20 := @caughtexception;

     label18:
        if r26 == null goto label19;

        interfaceinvoke r26.<javax.imageio.stream.ImageInputStream: void close()>();

     label19:
        goto label21;

     label20:
        $r19 := @caughtexception;

     label21:
        if r25 == null goto label22;

        virtualinvoke r25.<javax.imageio.ImageReader: void dispose()>();

     label22:
        throw $r20;

     label23:
        return i2;

        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label01 to label08 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label01 to label08 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private java.awt.image.Raster readImage(byte[]) throws java.io.IOException
    {
        byte[] r1;
        javax.imageio.ImageReader r6;
        java.util.Iterator $r3;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r9;
        java.lang.RuntimeException $r4;
        javax.imageio.stream.ImageInputStream $r2;
        javax.imageio.ImageReadParam $r7;
        java.io.ByteArrayInputStream $r0;
        java.awt.image.Raster $r8;
        java.lang.Object $r5;
        boolean $z0;

        r9 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r1 := @parameter0: byte[];

        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r2 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageInputStream createImageInputStream(java.lang.Object)>($r0);

        $r3 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageReaders(java.lang.Object)>($r2);

        if $r3 == null goto label1;

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

     label1:
        interfaceinvoke $r2.<javax.imageio.stream.ImageInputStream: void close()>();

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("No ImageReaders found");

        throw $r4;

     label2:
        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.imageio.ImageReader) $r5;

        virtualinvoke r6.<javax.imageio.ImageReader: void setInput(java.lang.Object)>($r2);

        $r7 = virtualinvoke r6.<javax.imageio.ImageReader: javax.imageio.ImageReadParam getDefaultReadParam()>();

        $r8 = virtualinvoke r6.<javax.imageio.ImageReader: java.awt.image.Raster readRaster(int,javax.imageio.ImageReadParam)>(0, $r7);

        interfaceinvoke $r2.<javax.imageio.stream.ImageInputStream: void close()>();

        virtualinvoke r6.<javax.imageio.ImageReader: void dispose()>();

        return $r8;
    }

    private java.awt.image.BufferedImage convertCMYK2RGB(java.awt.image.Raster, org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) throws java.io.IOException
    {
        byte[] r3;
        float[] $r7, $r8, $r9;
        java.awt.color.ColorSpace $r1, $r5;
        byte $b5;
        java.awt.image.Raster r2;
        int $i0, $i1, $i2, $i3, $i4, $i6, i7, i8, i9, i10, i11;
        java.awt.image.BufferedImage $r6;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r4;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace r0;
        float $f0, $f1, $f2, $f3;

        r4 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r2 := @parameter0: java.awt.image.Raster;

        r0 := @parameter1: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.color.ColorSpace getJavaColorSpace()>();

        $i0 = virtualinvoke r2.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r2.<java.awt.image.Raster: int getHeight()>();

        $i2 = $i0 * $i1;

        $i3 = $i2 * 3;

        r3 = newarray (byte)[$i3];

        i7 = 0;

        i8 = 0;

     label1:
        if i8 >= $i1 goto label8;

        i9 = 0;

     label2:
        if i9 >= $i0 goto label7;

        $r7 = (float[]) null;

        $r8 = virtualinvoke r2.<java.awt.image.Raster: float[] getPixel(int,int,float[])>(i9, i8, $r7);

        i10 = 0;

     label3:
        if i10 >= 4 goto label4;

        $f2 = $r8[i10];

        $f3 = $f2 / 255.0F;

        $r8[i10] = $f3;

        i10 = i10 + 1;

        goto label3;

     label4:
        $r9 = virtualinvoke $r1.<java.awt.color.ColorSpace: float[] toRGB(float[])>($r8);

        i11 = 0;

     label5:
        if i11 >= 3 goto label6;

        $i6 = i7 + i11;

        $f0 = $r9[i11];

        $f1 = $f0 * 255.0F;

        $i4 = (int) $f1;

        $b5 = (byte) $i4;

        r3[$i6] = $b5;

        i11 = i11 + 1;

        goto label5;

     label6:
        i7 = i7 + 3;

        i9 = i9 + 1;

        goto label2;

     label7:
        i8 = i8 + 1;

        goto label1;

     label8:
        $r5 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $r6 = specialinvoke r4.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage createRGBBufferedImage(java.awt.color.ColorSpace,byte[],int,int)>($r5, r3, $i0, $i1);

        return $r6;
    }

    private java.awt.image.BufferedImage convertYCCK2RGB(java.awt.image.Raster) throws java.io.IOException
    {
        byte[] r1;
        byte $b4, $b5, $b7, $b9, $b15, $b17, $b18, $b20, $b21;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r2;
        float[] $r5, $r6;
        java.awt.image.Raster r0;
        java.awt.image.BufferedImage $r4;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7;
        java.awt.color.ColorSpace $r3;
        int $i0, $i1, $i2, $i3, $i6, $i8, $i10, i11, i12, i13, $i14, $i16, $i19, $i22, $i23, $i24, $i25, $i26, $i27;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;

        r2 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r0 := @parameter0: java.awt.image.Raster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $i2 = $i0 * $i1;

        $i3 = $i2 * 3;

        r1 = newarray (byte)[$i3];

        i11 = 0;

        i12 = 0;

     label01:
        if i12 >= $i1 goto label13;

        i13 = 0;

     label02:
        if i13 >= $i0 goto label12;

        $r5 = (float[]) null;

        $r6 = virtualinvoke r0.<java.awt.image.Raster: float[] getPixel(int,int,float[])>(i13, i12, $r5);

        f0 = $r6[3];

        f1 = $r6[0];

        f2 = $r6[1];

        f3 = $r6[2];

        $d2 = (double) f1;

        $f4 = f3 - 128.0F;

        $d0 = (double) $f4;

        $d1 = 1.402 * $d0;

        $d4 = $d2 + $d1;

        $d3 = (double) f0;

        d8 = $d4 - $d3;

        $i14 = i11;

        $b4 = d8 cmpg 0.0;

        $i22 = (int) $b4;

        if $i22 >= 0 goto label03;

        $b15 = 0;

        goto label05;

     label03:
        $b5 = d8 cmpl 255.0;

        $i23 = (int) $b5;

        if $i23 <= 0 goto label04;

        $b15 = -1;

        goto label05;

     label04:
        $d5 = d8 + 0.5;

        $i6 = (int) $d5;

        $b15 = (byte) $i6;

     label05:
        r1[$i14] = $b15;

        $d9 = (double) f1;

        $f5 = f2 - 128.0F;

        $d10 = (double) $f5;

        $d11 = 0.34414 * $d10;

        $d12 = $d9 - $d11;

        $f6 = f3 - 128.0F;

        $d13 = (double) $f6;

        $d14 = 0.71414 * $d13;

        $d15 = $d12 - $d14;

        $d16 = (double) f0;

        $d17 = $d15 - $d16;

        $i16 = i11 + 1;

        $b17 = $d17 cmpg 0.0;

        $i24 = (int) $b17;

        if $i24 >= 0 goto label06;

        $b18 = 0;

        goto label08;

     label06:
        $b7 = $d17 cmpl 255.0;

        $i25 = (int) $b7;

        if $i25 <= 0 goto label07;

        $b18 = -1;

        goto label08;

     label07:
        $d6 = $d17 + 0.5;

        $i8 = (int) $d6;

        $b18 = (byte) $i8;

     label08:
        r1[$i16] = $b18;

        $d18 = (double) f1;

        $f7 = f2 - 128.0F;

        $d19 = (double) $f7;

        $d20 = 1.772 * $d19;

        $d21 = $d18 + $d20;

        $d22 = (double) f0;

        $d23 = $d21 - $d22;

        $i19 = i11 + 2;

        $b20 = $d23 cmpg 0.0;

        $i26 = (int) $b20;

        if $i26 >= 0 goto label09;

        $b21 = 0;

        goto label11;

     label09:
        $b9 = $d23 cmpl 255.0;

        $i27 = (int) $b9;

        if $i27 <= 0 goto label10;

        $b21 = -1;

        goto label11;

     label10:
        $d7 = $d23 + 0.5;

        $i10 = (int) $d7;

        $b21 = (byte) $i10;

     label11:
        r1[$i19] = $b21;

        i11 = i11 + 3;

        i13 = i13 + 1;

        goto label02;

     label12:
        i12 = i12 + 1;

        goto label01;

     label13:
        $r3 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $r4 = specialinvoke r2.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage createRGBBufferedImage(java.awt.color.ColorSpace,byte[],int,int)>($r3, r1, $i0, $i1);

        return $r4;
    }

    private java.awt.image.BufferedImage processTintTransformation(java.awt.image.Raster, org.apache.pdfbox.pdmodel.common.function.PDFunction, java.awt.color.ColorSpace) throws java.io.IOException
    {
        byte[] r2;
        float[] $r6, $r7, $r8;
        java.awt.color.ColorSpace r4;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, i9, i10, i11, i12, i13;
        java.awt.image.Raster r1;
        java.awt.image.BufferedImage $r5;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r3;
        org.apache.pdfbox.pdmodel.common.function.PDFunction r0;
        float $f0, $f1, $f2, $f3;

        r3 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r1 := @parameter0: java.awt.image.Raster;

        r0 := @parameter1: org.apache.pdfbox.pdmodel.common.function.PDFunction;

        r4 := @parameter2: java.awt.color.ColorSpace;

        $i0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: int getNumberOfInputParameters()>();

        $i1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: int getNumberOfOutputParameters()>();

        $i2 = virtualinvoke r1.<java.awt.image.Raster: int getWidth()>();

        $i3 = virtualinvoke r1.<java.awt.image.Raster: int getHeight()>();

        $i4 = $i2 * $i3;

        $i5 = $i4 * $i1;

        r2 = newarray (byte)[$i5];

        i9 = 0;

        i10 = 0;

     label1:
        if i10 >= $i3 goto label8;

        i11 = 0;

     label2:
        if i11 >= $i2 goto label7;

        $r6 = (float[]) null;

        $r7 = virtualinvoke r1.<java.awt.image.Raster: float[] getPixel(int,int,float[])>(i11, i10, $r6);

        i12 = 0;

     label3:
        if i12 >= $i0 goto label4;

        $f2 = $r7[i12];

        $f3 = $f2 / 255.0F;

        $r7[i12] = $f3;

        i12 = i12 + 1;

        goto label3;

     label4:
        $r8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: float[] eval(float[])>($r7);

        i13 = 0;

     label5:
        if i13 >= $i1 goto label6;

        $i8 = i9 + i13;

        $f0 = $r8[i13];

        $f1 = $f0 * 255.0F;

        $i6 = (int) $f1;

        $b7 = (byte) $i6;

        r2[$i8] = $b7;

        i13 = i13 + 1;

        goto label5;

     label6:
        i9 = i9 + $i1;

        i11 = i11 + 1;

        goto label2;

     label7:
        i10 = i10 + 1;

        goto label1;

     label8:
        $r5 = specialinvoke r3.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage createRGBBufferedImage(java.awt.color.ColorSpace,byte[],int,int)>(r4, r2, $i2, $i3);

        return $r5;
    }

    private java.awt.image.BufferedImage createRGBBufferedImage(java.awt.color.ColorSpace, byte[], int, int)
    {
        byte[] $r5, r6;
        java.awt.image.BufferedImage $r7;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r8;
        java.awt.image.DataBufferByte r4;
        java.awt.color.ColorSpace r1;
        java.awt.image.ComponentColorModel $r0;
        int i0, i1, $i2;
        java.awt.image.WritableRaster $r2;
        java.awt.image.DataBuffer $r3;

        r8 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        r1 := @parameter0: java.awt.color.ColorSpace;

        r6 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r0 = new java.awt.image.ComponentColorModel;

        specialinvoke $r0.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>(r1, 0, 0, 1, 0);

        $r2 = virtualinvoke $r0.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>(i0, i1);

        $r3 = virtualinvoke $r2.<java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>();

        r4 = (java.awt.image.DataBufferByte) $r3;

        $r5 = virtualinvoke r4.<java.awt.image.DataBufferByte: byte[] getData()>();

        $i2 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, $r5, 0, $i2);

        $r7 = new java.awt.image.BufferedImage;

        specialinvoke $r7.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r0, $r2, 1, null);

        return $r7;
    }

    public void clear()
    {
        org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg r0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.awt.image.BufferedImage image> = null;

        return;
    }

    static void <clinit>()
    {
        org.apache.pdfbox.cos.COSName $r1, $r4;
        java.util.List $r2, $r5;
        java.lang.String $r3, $r6;
        java.util.ArrayList $r0;

        <org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: float DEFAULT_COMPRESSION_LEVEL> = 0.75F;

        <org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.lang.String JPG> = "jpg";

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.util.List DCT_FILTERS> = $r0;

        $r2 = <org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.util.List DCT_FILTERS>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DCT_DECODE>;

        $r3 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r5 = <org.apache.pdfbox.pdmodel.graphics.xobject.PDJpeg: java.util.List DCT_FILTERS>;

        $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DCT_DECODE_ABBREVIATION>;

        $r6 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }
}
