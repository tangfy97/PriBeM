public abstract class com.hp.hpl.jena.mem.GraphMemBase extends com.hp.hpl.jena.graph.impl.GraphBase
{
    protected int count;
    public final com.hp.hpl.jena.graph.impl.TripleStore store;

    public void <init>()
    {
        com.hp.hpl.jena.mem.GraphMemBase r0;
        com.hp.hpl.jena.graph.impl.TripleStore $r1;

        r0 := @this: com.hp.hpl.jena.mem.GraphMemBase;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void <init>()>();

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.mem.GraphMemBase: com.hp.hpl.jena.graph.impl.TripleStore createTripleStore()>();

        r0.<com.hp.hpl.jena.mem.GraphMemBase: com.hp.hpl.jena.graph.impl.TripleStore store> = $r1;

        r0.<com.hp.hpl.jena.mem.GraphMemBase: int count> = 1;

        return;
    }

    protected abstract com.hp.hpl.jena.graph.impl.TripleStore createTripleStore();

    public com.hp.hpl.jena.mem.GraphMemBase openAgain()
    {
        int $i0, $i1;
        com.hp.hpl.jena.mem.GraphMemBase r0;

        r0 := @this: com.hp.hpl.jena.mem.GraphMemBase;

        $i0 = r0.<com.hp.hpl.jena.mem.GraphMemBase: int count>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.mem.GraphMemBase: int count> = $i1;

        return r0;
    }

    protected abstract void destroy();

    public void close()
    {
        int $i0, $i1;
        com.hp.hpl.jena.mem.GraphMemBase r0;

        r0 := @this: com.hp.hpl.jena.mem.GraphMemBase;

        $i0 = r0.<com.hp.hpl.jena.mem.GraphMemBase: int count>;

        $i1 = $i0 - 1;

        r0.<com.hp.hpl.jena.mem.GraphMemBase: int count> = $i1;

        if $i1 != 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.mem.GraphMemBase: void destroy()>();

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void close()>();

     label1:
        return;
    }

    public com.hp.hpl.jena.graph.BulkUpdateHandler getBulkUpdateHandler()
    {
        com.hp.hpl.jena.mem.GraphMemBulkUpdateHandler $r3;
        com.hp.hpl.jena.graph.BulkUpdateHandler $r1, $r2;
        com.hp.hpl.jena.mem.GraphMemBase r0;

        r0 := @this: com.hp.hpl.jena.mem.GraphMemBase;

        $r1 = r0.<com.hp.hpl.jena.mem.GraphMemBase: com.hp.hpl.jena.graph.BulkUpdateHandler bulkHandler>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.mem.GraphMemBulkUpdateHandler;

        specialinvoke $r3.<com.hp.hpl.jena.mem.GraphMemBulkUpdateHandler: void <init>(com.hp.hpl.jena.graph.impl.GraphWithPerform)>(r0);

        r0.<com.hp.hpl.jena.mem.GraphMemBase: com.hp.hpl.jena.graph.BulkUpdateHandler bulkHandler> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.mem.GraphMemBase: com.hp.hpl.jena.graph.BulkUpdateHandler bulkHandler>;

        return $r2;
    }

    protected final boolean isSafeForEquality(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.mem.GraphMemBase r2;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.mem.GraphMemBase;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: boolean isConcrete()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
