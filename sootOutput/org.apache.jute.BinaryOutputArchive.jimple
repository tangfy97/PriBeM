public class org.apache.jute.BinaryOutputArchive extends java.lang.Object implements org.apache.jute.OutputArchive
{
    private java.nio.ByteBuffer bb;
    private java.io.DataOutput out;

    public static org.apache.jute.BinaryOutputArchive getArchive(java.io.OutputStream)
    {
        java.io.OutputStream r2;
        org.apache.jute.BinaryOutputArchive $r0;
        java.io.DataOutputStream $r1;

        r2 := @parameter0: java.io.OutputStream;

        $r0 = new org.apache.jute.BinaryOutputArchive;

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r2);

        specialinvoke $r0.<org.apache.jute.BinaryOutputArchive: void <init>(java.io.DataOutput)>($r1);

        return $r0;
    }

    public void <init>(java.io.DataOutput)
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.io.DataOutput r2;
        java.nio.ByteBuffer $r1;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        r2 := @parameter0: java.io.DataOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1024);

        r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb> = $r1;

        r0.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out> = r2;

        return;
    }

    public void writeByte(byte, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.io.DataOutput $r1;
        byte b0;
        int $i1;
        java.lang.String r2;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        b0 := @parameter0: byte;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out>;

        $i1 = (int) b0;

        interfaceinvoke $r1.<java.io.DataOutput: void writeByte(int)>($i1);

        return;
    }

    public void writeBool(boolean, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.io.DataOutput $r1;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        z0 := @parameter0: boolean;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out>;

        interfaceinvoke $r1.<java.io.DataOutput: void writeBoolean(boolean)>(z0);

        return;
    }

    public void writeInt(int, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.io.DataOutput $r1;
        int i0;
        java.lang.String r2;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out>;

        interfaceinvoke $r1.<java.io.DataOutput: void writeInt(int)>(i0);

        return;
    }

    public void writeLong(long, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.io.DataOutput $r1;
        long l0;
        java.lang.String r2;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        l0 := @parameter0: long;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out>;

        interfaceinvoke $r1.<java.io.DataOutput: void writeLong(long)>(l0);

        return;
    }

    public void writeFloat(float, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.io.DataOutput $r1;
        float f0;
        java.lang.String r2;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        f0 := @parameter0: float;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out>;

        interfaceinvoke $r1.<java.io.DataOutput: void writeFloat(float)>(f0);

        return;
    }

    public void writeDouble(double, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.io.DataOutput $r1;
        java.lang.String r2;
        double d0;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        d0 := @parameter0: double;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out>;

        interfaceinvoke $r1.<java.io.DataOutput: void writeDouble(double)>(d0);

        return;
    }

    private final java.nio.ByteBuffer stringToByteBuffer(java.lang.CharSequence)
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.nio.ByteBuffer $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        byte $b5, $b9, $b12, $b15, $b18, $b19;
        java.lang.CharSequence r2;
        short $s11, $s17;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i8, $i13, $i14, $i20, $i21, i22, $i23, $i24, $i25, $i26, $i27;
        char $c2, $c10, $c16;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        r2 := @parameter0: java.lang.CharSequence;

        $r1 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $i0 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        i22 = 0;

     label1:
        if i22 >= $i0 goto label6;

        $r5 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        $i1 = virtualinvoke $r5.<java.nio.ByteBuffer: int remaining()>();

        if $i1 >= 3 goto label2;

        $r12 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        $i20 = virtualinvoke $r12.<java.nio.ByteBuffer: int capacity()>();

        $i21 = $i20 << 1;

        $r13 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i21);

        $r14 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r15 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        virtualinvoke $r13.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r15);

        r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb> = $r13;

     label2:
        $c2 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i22);

        $i23 = (int) $c2;

        if $i23 >= 128 goto label3;

        $r11 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        $b19 = (byte) $c2;

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b19);

        goto label5;

     label3:
        $i24 = (int) $c2;

        if $i24 >= 2048 goto label4;

        $r9 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        $i25 = (int) $c2;

        $i13 = $i25 >> 6;

        $i14 = 192 | $i13;

        $b15 = (byte) $i14;

        virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b15);

        $r10 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        $c16 = $c2 & 63;

        $s17 = 128 | $c16;

        $b18 = (byte) $s17;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b18);

        goto label5;

     label4:
        $r6 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        $i26 = (int) $c2;

        $i3 = $i26 >> 12;

        $i4 = 224 | $i3;

        $b5 = (byte) $i4;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b5);

        $r7 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        $i27 = (int) $c2;

        $i6 = $i27 >> 6;

        $i7 = $i6 & 63;

        $i8 = 128 | $i7;

        $b9 = (byte) $i8;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b9);

        $r8 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        $c10 = $c2 & 63;

        $s11 = 128 | $c10;

        $b12 = (byte) $s11;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b12);

     label5:
        i22 = i22 + 1;

        goto label1;

     label6:
        $r3 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r4 = r0.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer bb>;

        return $r4;
    }

    public void writeString(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r1;
        byte[] $r4;
        java.io.DataOutput $r3;
        java.nio.ByteBuffer $r2;
        int $i0, $i1, $i2, $i4;
        java.lang.String r0, r5;

        r1 := @this: org.apache.jute.BinaryOutputArchive;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $i4 = (int) -1;

        virtualinvoke r1.<org.apache.jute.BinaryOutputArchive: void writeInt(int,java.lang.String)>($i4, "len");

        return;

     label1:
        $r2 = specialinvoke r1.<org.apache.jute.BinaryOutputArchive: java.nio.ByteBuffer stringToByteBuffer(java.lang.CharSequence)>(r0);

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke r1.<org.apache.jute.BinaryOutputArchive: void writeInt(int,java.lang.String)>($i0, "len");

        $r3 = r1.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out>;

        $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int limit()>();

        interfaceinvoke $r3.<java.io.DataOutput: void write(byte[],int,int)>($r4, $i1, $i2);

        return;
    }

    public void writeBuffer(byte[], java.lang.String) throws java.io.IOException
    {
        byte[] r0;
        org.apache.jute.BinaryOutputArchive r1;
        java.io.DataOutput $r2, $r3, $r4;
        int $i0, $i2;
        java.lang.String r5;

        r1 := @this: org.apache.jute.BinaryOutputArchive;

        r0 := @parameter0: byte[];

        r5 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r4 = r1.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out>;

        $i2 = (int) -1;

        interfaceinvoke $r4.<java.io.DataOutput: void writeInt(int)>($i2);

        return;

     label1:
        $r2 = r1.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out>;

        $i0 = lengthof r0;

        interfaceinvoke $r2.<java.io.DataOutput: void writeInt(int)>($i0);

        $r3 = r1.<org.apache.jute.BinaryOutputArchive: java.io.DataOutput out>;

        interfaceinvoke $r3.<java.io.DataOutput: void write(byte[])>(r0);

        return;
    }

    public void writeRecord(org.apache.jute.Record, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r1;
        org.apache.jute.Record r0;
        java.lang.String r2;

        r1 := @this: org.apache.jute.BinaryOutputArchive;

        r0 := @parameter0: org.apache.jute.Record;

        r2 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.apache.jute.Record: void serialize(org.apache.jute.OutputArchive,java.lang.String)>(r1, r2);

        return;
    }

    public void startRecord(org.apache.jute.Record, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        org.apache.jute.Record r1;
        java.lang.String r2;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        r1 := @parameter0: org.apache.jute.Record;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void endRecord(org.apache.jute.Record, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        org.apache.jute.Record r1;
        java.lang.String r2;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        r1 := @parameter0: org.apache.jute.Record;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void startVector(java.util.List, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r1;
        java.util.List r0;
        int $i0, $i2;
        java.lang.String r2;

        r1 := @this: org.apache.jute.BinaryOutputArchive;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $i2 = (int) -1;

        virtualinvoke r1.<org.apache.jute.BinaryOutputArchive: void writeInt(int,java.lang.String)>($i2, r2);

        return;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        virtualinvoke r1.<org.apache.jute.BinaryOutputArchive: void writeInt(int,java.lang.String)>($i0, r2);

        return;
    }

    public void endVector(java.util.List, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.util.List r1;
        java.lang.String r2;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void startMap(java.util.TreeMap, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.util.TreeMap r1;
        int $i0;
        java.lang.String r2;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        r1 := @parameter0: java.util.TreeMap;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r1.<java.util.TreeMap: int size()>();

        virtualinvoke r0.<org.apache.jute.BinaryOutputArchive: void writeInt(int,java.lang.String)>($i0, r2);

        return;
    }

    public void endMap(java.util.TreeMap, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.BinaryOutputArchive r0;
        java.lang.String r2;
        java.util.TreeMap r1;

        r0 := @this: org.apache.jute.BinaryOutputArchive;

        r1 := @parameter0: java.util.TreeMap;

        r2 := @parameter1: java.lang.String;

        return;
    }
}
