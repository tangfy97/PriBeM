public class org.mozilla.universalchardet.prober.HebrewProber extends org.mozilla.universalchardet.prober.CharsetProber
{
    public static final int FINAL_KAF;
    public static final int NORMAL_KAF;
    public static final int FINAL_MEM;
    public static final int NORMAL_MEM;
    public static final int FINAL_NUN;
    public static final int NORMAL_NUN;
    public static final int FINAL_PE;
    public static final int NORMAL_PE;
    public static final int FINAL_TSADI;
    public static final int NORMAL_TSADI;
    public static final byte SPACE;
    public static final int MIN_FINAL_CHAR_DISTANCE;
    public static final float MIN_MODEL_DISTANCE;
    private int finalCharLogicalScore;
    private int finalCharVisualScore;
    private byte prev;
    private byte beforePrev;
    private org.mozilla.universalchardet.prober.CharsetProber logicalProber;
    private org.mozilla.universalchardet.prober.CharsetProber visualProber;

    public void <init>()
    {
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber logicalProber> = null;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber visualProber> = null;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.HebrewProber: void reset()>();

        return;
    }

    public void setModalProbers(org.mozilla.universalchardet.prober.CharsetProber, org.mozilla.universalchardet.prober.CharsetProber)
    {
        org.mozilla.universalchardet.prober.CharsetProber r1, r2;
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        r1 := @parameter0: org.mozilla.universalchardet.prober.CharsetProber;

        r2 := @parameter1: org.mozilla.universalchardet.prober.CharsetProber;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber logicalProber> = r1;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber visualProber> = r2;

        return;
    }

    public java.lang.String getCharSetName()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r1, $r2;
        org.mozilla.universalchardet.prober.HebrewProber r0;
        byte $b3, $b4;
        int $i0, $i1, i2, $i6, $i7, $i8;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8;
        float $f0, $f1, f2;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        $i1 = r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharLogicalScore>;

        $i0 = r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore>;

        i2 = $i1 - $i0;

        if i2 < 5 goto label1;

        $r8 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_WINDOWS_1255>;

        return $r8;

     label1:
        $i6 = (int) -5;

        if i2 > $i6 goto label2;

        $r7 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_ISO_8859_8>;

        return $r7;

     label2:
        $r1 = r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber logicalProber>;

        $f0 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.CharsetProber: float getConfidence()>();

        $r2 = r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber visualProber>;

        $f1 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.CharsetProber: float getConfidence()>();

        f2 = $f0 - $f1;

        $b3 = f2 cmpl 0.01F;

        $i7 = (int) $b3;

        if $i7 <= 0 goto label3;

        $r6 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_WINDOWS_1255>;

        return $r6;

     label3:
        $b4 = f2 cmpg -0.01F;

        $i8 = (int) $b4;

        if $i8 >= 0 goto label4;

        $r5 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_ISO_8859_8>;

        return $r5;

     label4:
        if i2 >= 0 goto label5;

        $r4 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_ISO_8859_8>;

        return $r4;

     label5:
        $r3 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_WINDOWS_1255>;

        return $r3;
    }

    public float getConfidence()
    {
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        return 0.0F;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r1, $r5;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r2, $r3, $r4, $r6, $r7, $r8;
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber logicalProber>;

        $r2 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.CharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()>();

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r2 != $r3 goto label1;

        $r5 = r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber visualProber>;

        $r6 = virtualinvoke $r5.<org.mozilla.universalchardet.prober.CharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()>();

        $r7 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r6 != $r7 goto label1;

        $r8 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        return $r8;

     label1:
        $r4 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        return $r4;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] r4;
        org.mozilla.universalchardet.prober.HebrewProber r0;
        byte b3, $b4, $b5, $b8, $b9, $b10, $b16;
        int i0, i1, i2, $i6, $i7, $i11, $i12, $i13, $i14, i15, $i17, $i18, $i19, $i20;
        boolean $z0, $z1, $z2;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1, $r2, $r3, $r5;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        r4 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()>();

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r1 != $r2 goto label1;

        $r5 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        return $r5;

     label1:
        i2 = i0 + i1;

        i15 = i0;

     label2:
        if i15 >= i2 goto label6;

        b3 = r4[i15];

        $i17 = (int) b3;

        if $i17 != 32 goto label4;

        $b8 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte beforePrev>;

        $i18 = (int) $b8;

        if $i18 == 32 goto label5;

        $b9 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev>;

        $z1 = staticinvoke <org.mozilla.universalchardet.prober.HebrewProber: boolean isFinal(byte)>($b9);

        if $z1 == 0 goto label3;

        $i13 = r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharLogicalScore>;

        $i14 = $i13 + 1;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharLogicalScore> = $i14;

        goto label5;

     label3:
        $b10 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev>;

        $z2 = staticinvoke <org.mozilla.universalchardet.prober.HebrewProber: boolean isNonFinal(byte)>($b10);

        if $z2 == 0 goto label5;

        $i11 = r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore>;

        $i12 = $i11 + 1;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore> = $i12;

        goto label5;

     label4:
        $b4 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte beforePrev>;

        $i19 = (int) $b4;

        if $i19 != 32 goto label5;

        $b5 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev>;

        $z0 = staticinvoke <org.mozilla.universalchardet.prober.HebrewProber: boolean isFinal(byte)>($b5);

        if $z0 == 0 goto label5;

        $i20 = (int) b3;

        if $i20 == 32 goto label5;

        $i6 = r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore>;

        $i7 = $i6 + 1;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore> = $i7;

     label5:
        $b16 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev>;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: byte beforePrev> = $b16;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev> = b3;

        i15 = i15 + 1;

        goto label2;

     label6:
        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        return $r3;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharLogicalScore> = 0;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore> = 0;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev> = 32;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: byte beforePrev> = 32;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        return;
    }

    protected static boolean isFinal(byte)
    {
        short s1, $s2;
        byte b0;
        int $i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        b0 := @parameter0: byte;

        $s2 = (short) b0;

        s1 = $s2 & 255;

        $i3 = (int) s1;

        if $i3 == 234 goto label1;

        $i4 = (int) s1;

        if $i4 == 237 goto label1;

        $i5 = (int) s1;

        if $i5 == 239 goto label1;

        $i6 = (int) s1;

        if $i6 == 243 goto label1;

        $i7 = (int) s1;

        if $i7 != 245 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected static boolean isNonFinal(byte)
    {
        short s1, $s2;
        byte b0;
        int $i3, $i4, $i5, $i6;
        boolean $z0;

        b0 := @parameter0: byte;

        $s2 = (short) b0;

        s1 = $s2 & 255;

        $i3 = (int) s1;

        if $i3 == 235 goto label1;

        $i4 = (int) s1;

        if $i4 == 238 goto label1;

        $i5 = (int) s1;

        if $i5 == 240 goto label1;

        $i6 = (int) s1;

        if $i6 != 244 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static void <clinit>()
    {
        <org.mozilla.universalchardet.prober.HebrewProber: float MIN_MODEL_DISTANCE> = 0.01F;

        <org.mozilla.universalchardet.prober.HebrewProber: int MIN_FINAL_CHAR_DISTANCE> = 5;

        <org.mozilla.universalchardet.prober.HebrewProber: byte SPACE> = 32;

        <org.mozilla.universalchardet.prober.HebrewProber: int NORMAL_TSADI> = 246;

        <org.mozilla.universalchardet.prober.HebrewProber: int FINAL_TSADI> = 245;

        <org.mozilla.universalchardet.prober.HebrewProber: int NORMAL_PE> = 244;

        <org.mozilla.universalchardet.prober.HebrewProber: int FINAL_PE> = 243;

        <org.mozilla.universalchardet.prober.HebrewProber: int NORMAL_NUN> = 240;

        <org.mozilla.universalchardet.prober.HebrewProber: int FINAL_NUN> = 239;

        <org.mozilla.universalchardet.prober.HebrewProber: int NORMAL_MEM> = 238;

        <org.mozilla.universalchardet.prober.HebrewProber: int FINAL_MEM> = 237;

        <org.mozilla.universalchardet.prober.HebrewProber: int NORMAL_KAF> = 235;

        <org.mozilla.universalchardet.prober.HebrewProber: int FINAL_KAF> = 234;

        return;
    }
}
