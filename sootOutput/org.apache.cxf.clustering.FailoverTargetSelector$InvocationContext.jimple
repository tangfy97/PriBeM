public class org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext extends java.lang.Object
{
    private org.apache.cxf.endpoint.Endpoint originalEndpoint;
    private java.lang.String originalAddress;
    private org.apache.cxf.service.model.BindingOperationInfo bindingOperationInfo;
    private java.lang.Object[] params;
    private java.util.Map context;
    private java.util.List alternateEndpoints;
    private java.util.List alternateAddresses;
    final org.apache.cxf.clustering.FailoverTargetSelector this$0;

    void <init>(org.apache.cxf.clustering.FailoverTargetSelector, org.apache.cxf.endpoint.Endpoint, org.apache.cxf.service.model.BindingOperationInfo, java.lang.Object[], java.util.Map)
    {
        org.apache.cxf.service.model.EndpointInfo $r3;
        java.lang.Object[] r6;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;
        org.apache.cxf.service.model.BindingOperationInfo r5;
        org.apache.cxf.endpoint.Endpoint r2;
        java.util.Map r7;
        java.lang.String $r4;
        org.apache.cxf.clustering.FailoverTargetSelector r1;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        r1 := @parameter0: org.apache.cxf.clustering.FailoverTargetSelector;

        r2 := @parameter1: org.apache.cxf.endpoint.Endpoint;

        r5 := @parameter2: org.apache.cxf.service.model.BindingOperationInfo;

        r6 := @parameter3: java.lang.Object[];

        r7 := @parameter4: java.util.Map;

        r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: org.apache.cxf.clustering.FailoverTargetSelector this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: org.apache.cxf.endpoint.Endpoint originalEndpoint> = r2;

        $r3 = interfaceinvoke r2.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r4 = virtualinvoke $r3.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.lang.String originalAddress> = $r4;

        r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: org.apache.cxf.service.model.BindingOperationInfo bindingOperationInfo> = r5;

        r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.lang.Object[] params> = r6;

        r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.Map context> = r7;

        return;
    }

    org.apache.cxf.endpoint.Endpoint retrieveOriginalEndpoint(org.apache.cxf.endpoint.Endpoint)
    {
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r1;
        java.util.logging.Level $r11, $r16;
        java.lang.String $r4, $r5, $r8, $r13;
        boolean $z0;
        org.apache.cxf.service.model.EndpointInfo $r3, $r7, $r12, $r17;
        java.util.logging.Logger $r10, $r15;
        org.apache.cxf.endpoint.Endpoint r0, $r2, $r6;
        javax.xml.namespace.QName $r18;
        org.apache.cxf.clustering.FailoverTargetSelector $r9, $r14;

        r1 := @this: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        r0 := @parameter0: org.apache.cxf.endpoint.Endpoint;

        $r2 = r1.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: org.apache.cxf.endpoint.Endpoint originalEndpoint>;

        if r0 == $r2 goto label1;

        $r14 = r1.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: org.apache.cxf.clustering.FailoverTargetSelector this$0>;

        $r15 = virtualinvoke $r14.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.logging.Logger getLogger()>();

        $r16 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r17 = interfaceinvoke r0.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r18 = virtualinvoke $r17.<org.apache.cxf.service.model.EndpointInfo: javax.xml.namespace.QName getName()>();

        virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r16, "REVERT_TO_ORIGINAL_TARGET", $r18);

     label1:
        $r3 = interfaceinvoke r0.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r4 = virtualinvoke $r3.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        $r5 = r1.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.lang.String originalAddress>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r7 = interfaceinvoke r0.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r8 = r1.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.lang.String originalAddress>;

        virtualinvoke $r7.<org.apache.cxf.service.model.EndpointInfo: void setAddress(java.lang.String)>($r8);

        $r9 = r1.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: org.apache.cxf.clustering.FailoverTargetSelector this$0>;

        $r10 = virtualinvoke $r9.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.logging.Logger getLogger()>();

        $r11 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r12 = interfaceinvoke r0.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r13 = virtualinvoke $r12.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r11, "REVERT_TO_ORIGINAL_ADDRESS", $r13);

     label2:
        $r6 = r1.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: org.apache.cxf.endpoint.Endpoint originalEndpoint>;

        return $r6;
    }

    org.apache.cxf.service.model.BindingOperationInfo getBindingOperationInfo()
    {
        org.apache.cxf.service.model.BindingOperationInfo $r1;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        $r1 = r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: org.apache.cxf.service.model.BindingOperationInfo bindingOperationInfo>;

        return $r1;
    }

    java.lang.Object[] getParams()
    {
        java.lang.Object[] $r1;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        $r1 = r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.lang.Object[] params>;

        return $r1;
    }

    java.util.Map getContext()
    {
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;
        java.util.Map $r1;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        $r1 = r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.Map context>;

        return $r1;
    }

    java.util.List getAlternateEndpoints()
    {
        java.util.List $r1;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        $r1 = r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List alternateEndpoints>;

        return $r1;
    }

    java.util.List getAlternateAddresses()
    {
        java.util.List $r1;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        $r1 = r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List alternateAddresses>;

        return $r1;
    }

    void setAlternateEndpoints(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List alternateEndpoints> = r1;

        return;
    }

    void setAlternateAddresses(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List alternateAddresses> = r1;

        return;
    }

    boolean hasAlternates()
    {
        java.util.List $r1, $r2;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        $r1 = r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List alternateEndpoints>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List alternateAddresses>;

        if $r2 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }
}
