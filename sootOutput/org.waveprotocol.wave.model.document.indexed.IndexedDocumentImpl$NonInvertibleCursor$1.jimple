class org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1 extends java.lang.Object implements org.waveprotocol.wave.model.util.ReadableStringMap$ProcV
{
    final org.waveprotocol.wave.model.util.Box val$annotations;
    final java.util.List val$events;
    final org.waveprotocol.wave.model.util.StringSet val$open;
    final org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor this$1;

    void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor, org.waveprotocol.wave.model.util.Box, java.util.List, org.waveprotocol.wave.model.util.StringSet)
    {
        java.util.List r3;
        org.waveprotocol.wave.model.util.StringSet r4;
        org.waveprotocol.wave.model.util.Box r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor r1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor;

        r2 := @parameter1: org.waveprotocol.wave.model.util.Box;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: org.waveprotocol.wave.model.util.StringSet;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor this$1> = r1;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: org.waveprotocol.wave.model.util.Box val$annotations> = r2;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: java.util.List val$events> = r3;

        r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: org.waveprotocol.wave.model.util.StringSet val$open> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void apply(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringSet $r8, $r13, $r18;
        org.waveprotocol.wave.model.util.Box $r1;
        int $i0, $i1;
        java.lang.String r3, r6, r7;
        org.waveprotocol.wave.model.util.ReadableStringMap $r4;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl $r11, $r16;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationStartEvent $r14;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor $r10, $r15;
        java.util.List $r12, $r17;
        org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEndEvent $r9;
        java.lang.Object $r2, $r5;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1;

        r3 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: org.waveprotocol.wave.model.util.Box val$annotations>;

        $r2 = $r1.<org.waveprotocol.wave.model.util.Box: java.lang.Object boxed>;

        $r4 = (org.waveprotocol.wave.model.util.ReadableStringMap) $r2;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.ReadableStringMap: java.lang.Object get(java.lang.String,java.lang.Object)>(r3, null);

        r6 = (java.lang.String) $r5;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean notEqual(java.lang.Object,java.lang.Object)>(r7, r6);

        if $z0 == 0 goto label1;

        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: java.util.List val$events>;

        $r14 = new org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationStartEvent;

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor this$1>;

        $r16 = $r15.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r16);

        specialinvoke $r14.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationStartEvent: void <init>(int,java.lang.String,java.lang.String)>($i1, r3, r6);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r18 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: org.waveprotocol.wave.model.util.StringSet val$open>;

        interfaceinvoke $r18.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r3);

        goto label2;

     label1:
        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: org.waveprotocol.wave.model.util.StringSet val$open>;

        $z1 = interfaceinvoke $r8.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>(r3);

        if $z1 == 0 goto label2;

        $r12 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: java.util.List val$events>;

        $r9 = new org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEndEvent;

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor this$1>;

        $r11 = $r10.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl: int access$1000(org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl)>($r11);

        specialinvoke $r9.<org.waveprotocol.wave.model.document.indexed.RawAnnotationSet$AnnotationEndEvent: void <init>(int,java.lang.String)>($i0, r3);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: org.waveprotocol.wave.model.util.StringSet val$open>;

        interfaceinvoke $r13.<org.waveprotocol.wave.model.util.StringSet: void remove(java.lang.String)>(r3);

     label2:
        return;
    }

    public volatile void apply(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1, $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) r2;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocumentImpl$NonInvertibleCursor$1: void apply(java.lang.String,java.lang.String)>(r1, $r3);

        return;
    }
}
