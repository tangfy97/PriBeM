public class org.apache.batik.gvt.MarkerShapePainter extends java.lang.Object implements org.apache.batik.gvt.ShapePainter
{
    protected org.apache.batik.ext.awt.geom.ExtendedShape extShape;
    protected org.apache.batik.gvt.Marker startMarker;
    protected org.apache.batik.gvt.Marker middleMarker;
    protected org.apache.batik.gvt.Marker endMarker;
    private org.apache.batik.gvt.ProxyGraphicsNode startMarkerProxy;
    private org.apache.batik.gvt.ProxyGraphicsNode[] middleMarkerProxies;
    private org.apache.batik.gvt.ProxyGraphicsNode endMarkerProxy;
    private org.apache.batik.gvt.CompositeGraphicsNode markerGroup;
    private java.awt.geom.Rectangle2D dPrimitiveBounds;
    private java.awt.geom.Rectangle2D dGeometryBounds;

    public void <init>(java.awt.Shape)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        java.awt.Shape r1;
        org.apache.batik.ext.awt.geom.ExtendedShape $r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.batik.ext.awt.geom.ShapeExtender $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r1 := @parameter0: java.awt.Shape;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $z0 = r1 instanceof org.apache.batik.ext.awt.geom.ExtendedShape;

        if $z0 == 0 goto label2;

        $r3 = (org.apache.batik.ext.awt.geom.ExtendedShape) r1;

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.ext.awt.geom.ExtendedShape extShape> = $r3;

        goto label3;

     label2:
        $r2 = new org.apache.batik.ext.awt.geom.ShapeExtender;

        specialinvoke $r2.<org.apache.batik.ext.awt.geom.ShapeExtender: void <init>(java.awt.Shape)>(r1);

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.ext.awt.geom.ExtendedShape extShape> = $r2;

     label3:
        return;
    }

    public void paint(java.awt.Graphics2D)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        java.util.List $r3;
        java.awt.Graphics2D r4;
        int $i0;
        org.apache.batik.gvt.CompositeGraphicsNode $r1, $r2, $r5;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r4 := @parameter0: java.awt.Graphics2D;

        $r1 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: void buildMarkerGroup()>();

     label1:
        $r2 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup>;

        $r3 = virtualinvoke $r2.<org.apache.batik.gvt.CompositeGraphicsNode: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        $r5 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup>;

        virtualinvoke $r5.<org.apache.batik.gvt.AbstractGraphicsNode: void paint(java.awt.Graphics2D)>(r4);

     label2:
        return;
    }

    public java.awt.Shape getPaintedArea()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        java.awt.Shape $r3;
        org.apache.batik.gvt.CompositeGraphicsNode $r1, $r2;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: void buildMarkerGroup()>();

     label1:
        $r2 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup>;

        $r3 = virtualinvoke $r2.<org.apache.batik.gvt.CompositeGraphicsNode: java.awt.Shape getOutline()>();

        return $r3;
    }

    public java.awt.geom.Rectangle2D getPaintedBounds2D()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        java.awt.geom.Rectangle2D $r3;
        org.apache.batik.gvt.CompositeGraphicsNode $r1, $r2;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: void buildMarkerGroup()>();

     label1:
        $r2 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup>;

        $r3 = virtualinvoke $r2.<org.apache.batik.gvt.CompositeGraphicsNode: java.awt.geom.Rectangle2D getPrimitiveBounds()>();

        return $r3;
    }

    public boolean inPaintedArea(java.awt.geom.Point2D)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        java.awt.geom.Point2D r2;
        org.apache.batik.gvt.GraphicsNode $r4;
        org.apache.batik.gvt.CompositeGraphicsNode $r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r2 := @parameter0: java.awt.geom.Point2D;

        $r1 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: void buildMarkerGroup()>();

     label1:
        $r3 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup>;

        $r4 = virtualinvoke $r3.<org.apache.batik.gvt.CompositeGraphicsNode: org.apache.batik.gvt.GraphicsNode nodeHitAt(java.awt.geom.Point2D)>(r2);

        if $r4 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.awt.Shape getSensitiveArea()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        return null;
    }

    public java.awt.geom.Rectangle2D getSensitiveBounds2D()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        return null;
    }

    public boolean inSensitiveArea(java.awt.geom.Point2D)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        java.awt.geom.Point2D r1;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r1 := @parameter0: java.awt.geom.Point2D;

        return 0;
    }

    public void setShape(java.awt.Shape)
    {
        java.awt.Shape r0;
        org.apache.batik.gvt.MarkerShapePainter r1;
        org.apache.batik.ext.awt.geom.ExtendedShape $r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.batik.ext.awt.geom.ShapeExtender $r2;
        boolean $z0;

        r1 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r0 := @parameter0: java.awt.Shape;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $z0 = r0 instanceof org.apache.batik.ext.awt.geom.ExtendedShape;

        if $z0 == 0 goto label2;

        $r3 = (org.apache.batik.ext.awt.geom.ExtendedShape) r0;

        r1.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.ext.awt.geom.ExtendedShape extShape> = $r3;

        goto label3;

     label2:
        $r2 = new org.apache.batik.ext.awt.geom.ShapeExtender;

        specialinvoke $r2.<org.apache.batik.ext.awt.geom.ShapeExtender: void <init>(java.awt.Shape)>(r0);

        r1.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.ext.awt.geom.ExtendedShape extShape> = $r2;

     label3:
        r1.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode startMarkerProxy> = null;

        r1.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode[] middleMarkerProxies> = null;

        r1.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode endMarkerProxy> = null;

        r1.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup> = null;

        return;
    }

    public org.apache.batik.ext.awt.geom.ExtendedShape getExtShape()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        org.apache.batik.ext.awt.geom.ExtendedShape $r1;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.ext.awt.geom.ExtendedShape extShape>;

        return $r1;
    }

    public java.awt.Shape getShape()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        org.apache.batik.ext.awt.geom.ExtendedShape $r1;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.ext.awt.geom.ExtendedShape extShape>;

        return $r1;
    }

    public org.apache.batik.gvt.Marker getStartMarker()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        org.apache.batik.gvt.Marker $r1;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker startMarker>;

        return $r1;
    }

    public void setStartMarker(org.apache.batik.gvt.Marker)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        org.apache.batik.gvt.Marker r1;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r1 := @parameter0: org.apache.batik.gvt.Marker;

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker startMarker> = r1;

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode startMarkerProxy> = null;

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup> = null;

        return;
    }

    public org.apache.batik.gvt.Marker getMiddleMarker()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        org.apache.batik.gvt.Marker $r1;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker middleMarker>;

        return $r1;
    }

    public void setMiddleMarker(org.apache.batik.gvt.Marker)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        org.apache.batik.gvt.Marker r1;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r1 := @parameter0: org.apache.batik.gvt.Marker;

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker middleMarker> = r1;

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode[] middleMarkerProxies> = null;

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup> = null;

        return;
    }

    public org.apache.batik.gvt.Marker getEndMarker()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        org.apache.batik.gvt.Marker $r1;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker endMarker>;

        return $r1;
    }

    public void setEndMarker(org.apache.batik.gvt.Marker)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        org.apache.batik.gvt.Marker r1;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r1 := @parameter0: org.apache.batik.gvt.Marker;

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker endMarker> = r1;

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode endMarkerProxy> = null;

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup> = null;

        return;
    }

    protected void buildMarkerGroup()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        org.apache.batik.gvt.ProxyGraphicsNode[] $r2, $r5, $r6, $r11, $r12;
        org.apache.batik.gvt.CompositeGraphicsNode $r17;
        int $i0, i1;
        org.apache.batik.gvt.ProxyGraphicsNode $r3, $r4, $r7, $r8, $r9, $r10, $r13, $r14, $r19;
        java.util.List $r18;
        org.apache.batik.gvt.Marker $r1, $r15, $r16;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker startMarker>;

        if $r1 == null goto label1;

        $r13 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode startMarkerProxy>;

        if $r13 != null goto label1;

        $r14 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode buildStartMarkerProxy()>();

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode startMarkerProxy> = $r14;

     label1:
        $r15 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker middleMarker>;

        if $r15 == null goto label2;

        $r11 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode[] middleMarkerProxies>;

        if $r11 != null goto label2;

        $r12 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode[] buildMiddleMarkerProxies()>();

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode[] middleMarkerProxies> = $r12;

     label2:
        $r16 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker endMarker>;

        if $r16 == null goto label3;

        $r9 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode endMarkerProxy>;

        if $r9 != null goto label3;

        $r10 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode buildEndMarkerProxy()>();

        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode endMarkerProxy> = $r10;

     label3:
        $r17 = new org.apache.batik.gvt.CompositeGraphicsNode;

        specialinvoke $r17.<org.apache.batik.gvt.CompositeGraphicsNode: void <init>()>();

        $r18 = virtualinvoke $r17.<org.apache.batik.gvt.CompositeGraphicsNode: java.util.List getChildren()>();

        $r19 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode startMarkerProxy>;

        if $r19 == null goto label4;

        $r8 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode startMarkerProxy>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r8);

     label4:
        $r2 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode[] middleMarkerProxies>;

        if $r2 == null goto label7;

        i1 = 0;

        goto label6;

     label5:
        $r6 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode[] middleMarkerProxies>;

        $r7 = $r6[i1];

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

     label6:
        $r5 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode[] middleMarkerProxies>;

        $i0 = lengthof $r5;

        if i1 < $i0 goto label5;

     label7:
        $r3 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode endMarkerProxy>;

        if $r3 == null goto label8;

        $r4 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode endMarkerProxy>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r4);

     label8:
        r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.CompositeGraphicsNode markerGroup> = $r17;

        return;
    }

    protected org.apache.batik.gvt.ProxyGraphicsNode buildStartMarkerProxy()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        double[] r3, r6;
        java.awt.geom.Point2D$Double $r4;
        int $i0, $i1, i2;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3, $d4, d5;
        org.apache.batik.gvt.ProxyGraphicsNode $r9;
        org.apache.batik.ext.awt.geom.ExtendedShape $r1;
        org.apache.batik.gvt.GraphicsNode $r11;
        java.awt.geom.AffineTransform $r8;
        org.apache.batik.gvt.Marker $r5, $r7, $r10;
        org.apache.batik.ext.awt.geom.ExtendedPathIterator $r2;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.ext.awt.geom.ExtendedShape getExtShape()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.ext.awt.geom.ExtendedShape: org.apache.batik.ext.awt.geom.ExtendedPathIterator getExtendedPathIterator()>();

        r3 = newarray (double)[7];

        $z0 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: boolean isDone()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: int currentSegment(double[])>(r3);

        if $i0 == 0 goto label2;

        return null;

     label2:
        interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: void next()>();

        $r4 = new java.awt.geom.Point2D$Double;

        $d1 = r3[0];

        $d0 = r3[1];

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        $r5 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker startMarker>;

        $d2 = virtualinvoke $r5.<org.apache.batik.gvt.Marker: double getOrient()>();

        d5 = $d2;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z1 == 0 goto label4;

        $z2 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: boolean isDone()>();

        if $z2 != 0 goto label4;

        r6 = newarray (double)[7];

        $i1 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: int currentSegment(double[])>(r6);

        i2 = $i1;

        if $i1 != 4 goto label3;

        i2 = 1;

        $d3 = r3[0];

        r6[0] = $d3;

        $d4 = r3[1];

        r6[1] = $d4;

     label3:
        d5 = specialinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: double computeRotation(double[],int,double[],int,double[],int)>(null, 0, r3, $i0, r6, i2);

     label4:
        $r7 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker startMarker>;

        $r8 = specialinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: java.awt.geom.AffineTransform computeMarkerTransform(org.apache.batik.gvt.Marker,java.awt.geom.Point2D,double)>($r7, $r4, d5);

        $r9 = new org.apache.batik.gvt.ProxyGraphicsNode;

        specialinvoke $r9.<org.apache.batik.gvt.ProxyGraphicsNode: void <init>()>();

        $r10 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker startMarker>;

        $r11 = virtualinvoke $r10.<org.apache.batik.gvt.Marker: org.apache.batik.gvt.GraphicsNode getMarkerNode()>();

        virtualinvoke $r9.<org.apache.batik.gvt.ProxyGraphicsNode: void setSource(org.apache.batik.gvt.GraphicsNode)>($r11);

        virtualinvoke $r9.<org.apache.batik.gvt.AbstractGraphicsNode: void setTransform(java.awt.geom.AffineTransform)>($r8);

        return $r9;
    }

    protected org.apache.batik.gvt.ProxyGraphicsNode buildEndMarkerProxy()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        java.awt.geom.Point2D $r6;
        boolean $z0, $z1, $z2;
        org.apache.batik.gvt.ProxyGraphicsNode $r10;
        org.apache.batik.gvt.GraphicsNode $r12;
        java.awt.geom.AffineTransform $r9;
        org.apache.batik.gvt.Marker $r7, $r8, $r11;
        org.apache.batik.ext.awt.geom.ExtendedPathIterator $r2;
        double[] r3, r4, $r5, r13, r14, r15;
        int $i0, $i1, i2, i3, i4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, d14;
        org.apache.batik.ext.awt.geom.ExtendedShape $r1;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.ext.awt.geom.ExtendedShape getExtShape()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.ext.awt.geom.ExtendedShape: org.apache.batik.ext.awt.geom.ExtendedPathIterator getExtendedPathIterator()>();

        $z0 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: boolean isDone()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        r3 = newarray (double)[7];

        r4 = newarray (double)[2];

        $i0 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: int currentSegment(double[])>(r3);

        if $i0 == 0 goto label2;

        return null;

     label2:
        i2 = 1;

        $d0 = r3[0];

        r4[0] = $d0;

        $d1 = r3[1];

        r4[1] = $d1;

        interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: void next()>();

        r13 = newarray (double)[7];

        $r5 = newarray (double)[7];

        $d2 = r3[0];

        $r5[0] = $d2;

        $d3 = r3[1];

        $r5[1] = $d3;

        $d4 = r3[2];

        $r5[2] = $d4;

        $d5 = r3[3];

        $r5[3] = $d5;

        $d6 = r3[4];

        $r5[4] = $d6;

        $d7 = r3[5];

        $r5[5] = $d7;

        $d8 = r3[6];

        $r5[6] = $d8;

        r14 = $r5;

        i3 = $i0;

        i4 = 0;

        goto label6;

     label3:
        r15 = r13;

        r13 = r14;

        r14 = r15;

        i4 = i3;

        $i1 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: int currentSegment(double[])>(r15);

        i3 = $i1;

        if $i1 != 0 goto label4;

        $d11 = r15[0];

        r4[0] = $d11;

        $d12 = r15[1];

        r4[1] = $d12;

        goto label5;

     label4:
        if $i1 != 4 goto label5;

        i3 = 1;

        $d9 = r4[0];

        r15[0] = $d9;

        $d10 = r4[1];

        r15[1] = $d10;

     label5:
        interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: void next()>();

        i2 = i2 + 1;

     label6:
        $z2 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: boolean isDone()>();

        if $z2 == 0 goto label3;

        if i2 >= 2 goto label7;

        return null;

     label7:
        $r6 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: java.awt.geom.Point2D getSegmentTerminatingPoint(double[],int)>(r14, i3);

        $r7 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker endMarker>;

        $d13 = virtualinvoke $r7.<org.apache.batik.gvt.Marker: double getOrient()>();

        d14 = $d13;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d13);

        if $z1 == 0 goto label8;

        d14 = specialinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: double computeRotation(double[],int,double[],int,double[],int)>(r13, i4, r14, i3, null, 0);

     label8:
        $r8 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker endMarker>;

        $r9 = specialinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: java.awt.geom.AffineTransform computeMarkerTransform(org.apache.batik.gvt.Marker,java.awt.geom.Point2D,double)>($r8, $r6, d14);

        $r10 = new org.apache.batik.gvt.ProxyGraphicsNode;

        specialinvoke $r10.<org.apache.batik.gvt.ProxyGraphicsNode: void <init>()>();

        $r11 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker endMarker>;

        $r12 = virtualinvoke $r11.<org.apache.batik.gvt.Marker: org.apache.batik.gvt.GraphicsNode getMarkerNode()>();

        virtualinvoke $r10.<org.apache.batik.gvt.ProxyGraphicsNode: void setSource(org.apache.batik.gvt.GraphicsNode)>($r12);

        virtualinvoke $r10.<org.apache.batik.gvt.AbstractGraphicsNode: void setTransform(java.awt.geom.AffineTransform)>($r9);

        return $r10;
    }

    protected org.apache.batik.gvt.ProxyGraphicsNode[] buildMiddleMarkerProxies()
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        double[] r3, r5, r6, r7, r10;
        org.apache.batik.gvt.ProxyGraphicsNode[] r4;
        java.util.ArrayList $r8;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        org.apache.batik.gvt.ProxyGraphicsNode $r9;
        org.apache.batik.ext.awt.geom.ExtendedShape $r1;
        org.apache.batik.ext.awt.geom.ExtendedPathIterator $r2;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.ext.awt.geom.ExtendedShape getExtShape()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.ext.awt.geom.ExtendedShape: org.apache.batik.ext.awt.geom.ExtendedPathIterator getExtendedPathIterator()>();

        r5 = newarray (double)[7];

        r6 = newarray (double)[7];

        r7 = newarray (double)[7];

        $z0 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: boolean isDone()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: int currentSegment(double[])>(r5);

        i4 = $i0;

        r3 = newarray (double)[2];

        if $i0 == 0 goto label2;

        return null;

     label2:
        $d0 = r5[0];

        r3[0] = $d0;

        $d1 = r5[1];

        r3[1] = $d1;

        interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: void next()>();

        $z1 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: boolean isDone()>();

        if $z1 == 0 goto label3;

        return null;

     label3:
        $i1 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: int currentSegment(double[])>(r6);

        i5 = $i1;

        if $i1 != 0 goto label4;

        $d8 = r6[0];

        r3[0] = $d8;

        $d9 = r6[1];

        r3[1] = $d9;

        goto label5;

     label4:
        if $i1 != 4 goto label5;

        i5 = 1;

        $d6 = r3[0];

        r6[0] = $d6;

        $d7 = r3[1];

        r6[1] = $d7;

     label5:
        interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: void next()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        goto label9;

     label6:
        $i2 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: int currentSegment(double[])>(r7);

        i6 = $i2;

        if $i2 != 0 goto label7;

        $d4 = r7[0];

        r3[0] = $d4;

        $d5 = r7[1];

        r3[1] = $d5;

        goto label8;

     label7:
        if $i2 != 4 goto label8;

        i6 = 1;

        $d2 = r3[0];

        r7[0] = $d2;

        $d3 = r3[1];

        r7[1] = $d3;

     label8:
        $r9 = specialinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.ProxyGraphicsNode createMiddleMarker(double[],int,double[],int,double[],int)>(r5, i4, r6, i5, r7, i6);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        r10 = r5;

        r5 = r6;

        i4 = i5;

        r6 = r7;

        i5 = i6;

        r7 = r10;

        interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: void next()>();

     label9:
        $z2 = interfaceinvoke $r2.<org.apache.batik.ext.awt.geom.ExtendedPathIterator: boolean isDone()>();

        if $z2 == 0 goto label6;

        $i3 = interfaceinvoke $r8.<java.util.List: int size()>();

        r4 = newarray (org.apache.batik.gvt.ProxyGraphicsNode)[$i3];

        interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r4);

        return r4;
    }

    private org.apache.batik.gvt.ProxyGraphicsNode createMiddleMarker(double[], int, double[], int, double[], int)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        java.awt.geom.Point2D $r2;
        double[] r1, r9, r10;
        int i0, i1, i2;
        double $d0, d1;
        boolean $z0;
        org.apache.batik.gvt.ProxyGraphicsNode $r6;
        org.apache.batik.gvt.GraphicsNode $r8;
        java.awt.geom.AffineTransform $r5;
        org.apache.batik.gvt.Marker $r3, $r4, $r7;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r9 := @parameter0: double[];

        i1 := @parameter1: int;

        r1 := @parameter2: double[];

        i0 := @parameter3: int;

        r10 := @parameter4: double[];

        i2 := @parameter5: int;

        $r2 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: java.awt.geom.Point2D getSegmentTerminatingPoint(double[],int)>(r1, i0);

        $r3 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker middleMarker>;

        $d0 = virtualinvoke $r3.<org.apache.batik.gvt.Marker: double getOrient()>();

        d1 = $d0;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        d1 = specialinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: double computeRotation(double[],int,double[],int,double[],int)>(r9, i1, r1, i0, r10, i2);

     label1:
        $r4 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker middleMarker>;

        $r5 = specialinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: java.awt.geom.AffineTransform computeMarkerTransform(org.apache.batik.gvt.Marker,java.awt.geom.Point2D,double)>($r4, $r2, d1);

        $r6 = new org.apache.batik.gvt.ProxyGraphicsNode;

        specialinvoke $r6.<org.apache.batik.gvt.ProxyGraphicsNode: void <init>()>();

        $r7 = r0.<org.apache.batik.gvt.MarkerShapePainter: org.apache.batik.gvt.Marker middleMarker>;

        $r8 = virtualinvoke $r7.<org.apache.batik.gvt.Marker: org.apache.batik.gvt.GraphicsNode getMarkerNode()>();

        virtualinvoke $r6.<org.apache.batik.gvt.ProxyGraphicsNode: void setSource(org.apache.batik.gvt.GraphicsNode)>($r8);

        virtualinvoke $r6.<org.apache.batik.gvt.AbstractGraphicsNode: void setTransform(java.awt.geom.AffineTransform)>($r5);

        return $r6;
    }

    private double computeRotation(double[], int, double[], int, double[], int)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        double[] r1, r2, $r3, r4, $r5, r6, r7;
        byte $b3, $b4;
        int i0, i1, i2;
        double $d0, $d1, d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: double[];

        i1 := @parameter3: int;

        r4 := @parameter4: double[];

        i2 := @parameter5: int;

        $r3 = specialinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: double[] computeInSlope(double[],int,double[],int)>(r1, i0, r2, i1);

        r6 = $r3;

        $r5 = specialinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: double[] computeOutSlope(double[],int,double[],int)>(r2, i1, r4, i2);

        r7 = $r5;

        if $r3 != null goto label1;

        r6 = $r5;

     label1:
        if $r5 != null goto label2;

        r7 = r6;

     label2:
        if r6 != null goto label3;

        return 0.0;

     label3:
        $d1 = r6[0];

        $d0 = r7[0];

        d2 = $d1 + $d0;

        $d4 = r6[1];

        $d3 = r7[1];

        d5 = $d4 + $d3;

        $b3 = d2 cmpl 0.0;

        if $b3 != 0 goto label4;

        $b4 = d5 cmpl 0.0;

        if $b4 != 0 goto label4;

        $d9 = r6[1];

        $d8 = r6[0];

        $d10 = staticinvoke <java.lang.Math: double atan2(double,double)>($d9, $d8);

        $d11 = staticinvoke <java.lang.Math: double toDegrees(double)>($d10);

        $d12 = $d11 + 90.0;

        return $d12;

     label4:
        $d6 = staticinvoke <java.lang.Math: double atan2(double,double)>(d5, d2);

        $d7 = staticinvoke <java.lang.Math: double toDegrees(double)>($d6);

        return $d7;
    }

    private double[] computeInSlope(double[], int, double[], int)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        byte $b2, $b3, $b4, $b5, $b6;
        double[] r1, r3, $r6, $r7;
        java.lang.Error $r8;
        java.awt.geom.Point2D $r2, $r4, $r9;
        boolean z0, z1, $z2, $z4, $z5;
        java.awt.geom.Arc2D $r5;
        int i0, i1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, d27, $d28, $d29, d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, d46, d47;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r3 := @parameter0: double[];

        i1 := @parameter1: int;

        r1 := @parameter2: double[];

        i0 := @parameter3: int;

        $r2 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: java.awt.geom.Point2D getSegmentTerminatingPoint(double[],int)>(r1, i0);

        lookupswitch(i0)
        {
            case 0: goto label13;
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label12;
            case 4321: goto label04;
            default: goto label13;
        };

     label01:
        $r9 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: java.awt.geom.Point2D getSegmentTerminatingPoint(double[],int)>(r3, i1);

        $d42 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $d43 = virtualinvoke $r9.<java.awt.geom.Point2D: double getX()>();

        d46 = $d42 - $d43;

        $d44 = virtualinvoke $r2.<java.awt.geom.Point2D: double getY()>();

        $d45 = virtualinvoke $r9.<java.awt.geom.Point2D: double getY()>();

        d47 = $d44 - $d45;

        goto label14;

     label02:
        $d38 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $d39 = r1[0];

        d46 = $d38 - $d39;

        $d40 = virtualinvoke $r2.<java.awt.geom.Point2D: double getY()>();

        $d41 = r1[1];

        d47 = $d40 - $d41;

        goto label14;

     label03:
        $d34 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $d35 = r1[2];

        d46 = $d34 - $d35;

        $d36 = virtualinvoke $r2.<java.awt.geom.Point2D: double getY()>();

        $d37 = r1[3];

        d47 = $d36 - $d37;

        goto label14;

     label04:
        $r4 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: java.awt.geom.Point2D getSegmentTerminatingPoint(double[],int)>(r3, i1);

        $d0 = r1[3];

        $b2 = $d0 cmpl 0.0;

        if $b2 == 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        z0 = $z2;

        $d1 = r1[4];

        $b3 = $d1 cmpl 0.0;

        if $b3 == 0 goto label07;

        $z5 = 1;

        $z4 = 1;

        goto label08;

     label07:
        $z5 = 0;

        $z4 = 0;

     label08:
        z1 = $z5;

        $d2 = virtualinvoke $r4.<java.awt.geom.Point2D: double getX()>();

        $d3 = virtualinvoke $r4.<java.awt.geom.Point2D: double getY()>();

        $d8 = r1[0];

        $d7 = r1[1];

        $d6 = r1[2];

        $d5 = r1[5];

        $d4 = r1[6];

        $r5 = staticinvoke <org.apache.batik.ext.awt.geom.ExtendedGeneralPath: java.awt.geom.Arc2D computeArc(double,double,double,double,double,boolean,boolean,double,double)>($d2, $d3, $d8, $d7, $d6, z0, $z4, $d5, $d4);

        $d9 = virtualinvoke $r5.<java.awt.geom.Arc2D: double getAngleStart()>();

        $d10 = virtualinvoke $r5.<java.awt.geom.Arc2D: double getAngleExtent()>();

        $d31 = $d9 + $d10;

        $d11 = staticinvoke <java.lang.Math: double toRadians(double)>($d31);

        $d12 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getWidth()>();

        $d13 = neg $d12;

        $d14 = $d13 / 2.0;

        $d15 = staticinvoke <java.lang.Math: double sin(double)>($d11);

        $d32 = $d14 * $d15;

        d46 = $d32;

        $d16 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getHeight()>();

        $d17 = $d16 / 2.0;

        $d18 = staticinvoke <java.lang.Math: double cos(double)>($d11);

        $d33 = $d17 * $d18;

        d47 = $d33;

        $d19 = r1[2];

        $b4 = $d19 cmpl 0.0;

        if $b4 == 0 goto label09;

        $d20 = r1[2];

        $d21 = neg $d20;

        $d22 = staticinvoke <java.lang.Math: double toRadians(double)>($d21);

        $d23 = staticinvoke <java.lang.Math: double sin(double)>($d22);

        $d24 = staticinvoke <java.lang.Math: double cos(double)>($d22);

        $d26 = $d32 * $d24;

        $d25 = $d33 * $d23;

        d27 = $d26 - $d25;

        $d29 = $d32 * $d23;

        $d28 = $d33 * $d24;

        d30 = $d29 + $d28;

        d46 = d27;

        d47 = d30;

     label09:
        if z1 == 0 goto label10;

        d46 = neg d46;

        goto label11;

     label10:
        d47 = neg d47;

     label11:
        goto label14;

     label12:
        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.String)>("should not have SEG_CLOSE here");

        throw $r8;

     label13:
        return null;

     label14:
        $b6 = d46 cmpl 0.0;

        if $b6 != 0 goto label15;

        $b5 = d47 cmpl 0.0;

        if $b5 != 0 goto label15;

        return null;

     label15:
        $r6 = newarray (double)[2];

        $r6[0] = d46;

        $r6[1] = d47;

        $r7 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: double[] normalize(double[])>($r6);

        return $r7;
    }

    private double[] computeOutSlope(double[], int, double[], int)
    {
        org.apache.batik.gvt.MarkerShapePainter r0;
        java.awt.geom.Point2D $r2;
        byte $b2, $b3, $b4, $b5, $b6;
        boolean z0, z1, $z2, $z4, $z5;
        double[] r1, r3, $r5, $r6;
        java.awt.geom.Arc2D $r4;
        int i0, i1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, $d27, $d28, d29, $d30, $d31, $d32, $d33, $d34, $d35, d36, d37;

        r0 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r3 := @parameter2: double[];

        i1 := @parameter3: int;

        $r2 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: java.awt.geom.Point2D getSegmentTerminatingPoint(double[],int)>(r1, i0);

        d36 = 0.0;

        d37 = 0.0;

        lookupswitch(i1)
        {
            case 0: goto label11;
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label01;
            case 4321: goto label03;
            default: goto label11;
        };

     label01:
        goto label12;

     label02:
        $d32 = r3[0];

        $d33 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        d36 = $d32 - $d33;

        $d34 = r3[1];

        $d35 = virtualinvoke $r2.<java.awt.geom.Point2D: double getY()>();

        d37 = $d34 - $d35;

        goto label12;

     label03:
        $d0 = r3[3];

        $b2 = $d0 cmpl 0.0;

        if $b2 == 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        z0 = $z2;

        $d1 = r3[4];

        $b3 = $d1 cmpl 0.0;

        if $b3 == 0 goto label06;

        $z5 = 1;

        $z4 = 1;

        goto label07;

     label06:
        $z5 = 0;

        $z4 = 0;

     label07:
        z1 = $z5;

        $d2 = virtualinvoke $r2.<java.awt.geom.Point2D: double getX()>();

        $d3 = virtualinvoke $r2.<java.awt.geom.Point2D: double getY()>();

        $d8 = r3[0];

        $d7 = r3[1];

        $d6 = r3[2];

        $d5 = r3[5];

        $d4 = r3[6];

        $r4 = staticinvoke <org.apache.batik.ext.awt.geom.ExtendedGeneralPath: java.awt.geom.Arc2D computeArc(double,double,double,double,double,boolean,boolean,double,double)>($d2, $d3, $d8, $d7, $d6, z0, $z4, $d5, $d4);

        $d9 = virtualinvoke $r4.<java.awt.geom.Arc2D: double getAngleStart()>();

        $d10 = staticinvoke <java.lang.Math: double toRadians(double)>($d9);

        $d11 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getWidth()>();

        $d12 = neg $d11;

        $d13 = $d12 / 2.0;

        $d14 = staticinvoke <java.lang.Math: double sin(double)>($d10);

        $d30 = $d13 * $d14;

        d36 = $d30;

        $d15 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getHeight()>();

        $d16 = $d15 / 2.0;

        $d17 = staticinvoke <java.lang.Math: double cos(double)>($d10);

        $d31 = $d16 * $d17;

        d37 = $d31;

        $d18 = r3[2];

        $b4 = $d18 cmpl 0.0;

        if $b4 == 0 goto label08;

        $d19 = r3[2];

        $d20 = neg $d19;

        $d21 = staticinvoke <java.lang.Math: double toRadians(double)>($d20);

        $d22 = staticinvoke <java.lang.Math: double sin(double)>($d21);

        $d23 = staticinvoke <java.lang.Math: double cos(double)>($d21);

        $d25 = $d30 * $d23;

        $d24 = $d31 * $d22;

        d26 = $d25 - $d24;

        $d28 = $d30 * $d22;

        $d27 = $d31 * $d23;

        d29 = $d28 + $d27;

        d36 = d26;

        d37 = d29;

     label08:
        if z1 == 0 goto label09;

        d36 = neg d36;

        goto label10;

     label09:
        d37 = neg d37;

     label10:
        goto label12;

     label11:
        return null;

     label12:
        $b6 = d36 cmpl 0.0;

        if $b6 != 0 goto label13;

        $b5 = d37 cmpl 0.0;

        if $b5 != 0 goto label13;

        return null;

     label13:
        $r5 = newarray (double)[2];

        $r5[0] = d36;

        $r5[1] = d37;

        $r6 = virtualinvoke r0.<org.apache.batik.gvt.MarkerShapePainter: double[] normalize(double[])>($r5);

        return $r6;
    }

    public double[] normalize(double[])
    {
        org.apache.batik.gvt.MarkerShapePainter r1;
        double[] r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r1 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r0 := @parameter0: double[];

        $d1 = r0[0];

        $d0 = r0[0];

        $d5 = $d1 * $d0;

        $d3 = r0[1];

        $d2 = r0[1];

        $d4 = $d3 * $d2;

        $d6 = $d5 + $d4;

        $d7 = staticinvoke <java.lang.Math: double sqrt(double)>($d6);

        $d8 = r0[0];

        $d9 = $d8 / $d7;

        r0[0] = $d9;

        $d10 = r0[1];

        $d11 = $d10 / $d7;

        r0[1] = $d11;

        return r0;
    }

    private java.awt.geom.AffineTransform computeMarkerTransform(org.apache.batik.gvt.Marker, java.awt.geom.Point2D, double)
    {
        org.apache.batik.gvt.MarkerShapePainter r4;
        java.awt.geom.Point2D $r1, r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, $d9;
        boolean $z0;
        java.awt.geom.AffineTransform $r2;
        org.apache.batik.gvt.Marker r0;

        r4 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r0 := @parameter0: org.apache.batik.gvt.Marker;

        r3 := @parameter1: java.awt.geom.Point2D;

        d6 := @parameter2: double;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.Marker: java.awt.geom.Point2D getRef()>();

        $r2 = new java.awt.geom.AffineTransform;

        specialinvoke $r2.<java.awt.geom.AffineTransform: void <init>()>();

        $d0 = virtualinvoke r3.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke $r1.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 - $d1;

        $d3 = virtualinvoke r3.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke $r1.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 - $d4;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void translate(double,double)>($d2, $d5);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d6);

        if $z0 != 0 goto label1;

        $d7 = staticinvoke <java.lang.Math: double toRadians(double)>(d6);

        $d8 = virtualinvoke $r1.<java.awt.geom.Point2D: double getX()>();

        $d9 = virtualinvoke $r1.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void rotate(double,double,double)>($d7, $d8, $d9);

     label1:
        return $r2;
    }

    protected java.awt.geom.Point2D getSegmentTerminatingPoint(double[], int)
    {
        org.apache.batik.gvt.MarkerShapePainter r11;
        double[] r1;
        java.lang.Error $r6;
        java.awt.geom.Point2D$Double $r0, $r2, $r3, $r4, $r5;
        java.lang.StringBuffer $r7, $r8, $r9;
        int i0;
        java.lang.String $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r11 := @this: org.apache.batik.gvt.MarkerShapePainter;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label1;
            case 4: goto label6;
            case 4321: goto label5;
            default: goto label6;
        };

     label1:
        $r2 = new java.awt.geom.Point2D$Double;

        $d3 = r1[4];

        $d2 = r1[5];

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d3, $d2);

        return $r2;

     label2:
        $r4 = new java.awt.geom.Point2D$Double;

        $d7 = r1[0];

        $d6 = r1[1];

        specialinvoke $r4.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d7, $d6);

        return $r4;

     label3:
        $r5 = new java.awt.geom.Point2D$Double;

        $d9 = r1[0];

        $d8 = r1[1];

        specialinvoke $r5.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d9, $d8);

        return $r5;

     label4:
        $r3 = new java.awt.geom.Point2D$Double;

        $d5 = r1[2];

        $d4 = r1[3];

        specialinvoke $r3.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d5, $d4);

        return $r3;

     label5:
        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1[5];

        $d0 = r1[6];

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        return $r0;

     label6:
        $r6 = new java.lang.Error;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid segmentType:");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>($r10);

        throw $r6;
    }
}
