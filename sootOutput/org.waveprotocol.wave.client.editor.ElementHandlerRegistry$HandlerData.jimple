class org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData extends java.lang.Object
{
    final org.waveprotocol.wave.model.util.StringMap renderers;
    final org.waveprotocol.wave.model.util.StringMap eventHandlers;
    final org.waveprotocol.wave.model.util.StringMap mutationHandlers;
    final org.waveprotocol.wave.model.util.StringMap niceHtmlRenderers;

    private void <init>()
    {
        org.waveprotocol.wave.model.util.StringMap $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData r0;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap renderers> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap eventHandlers> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap mutationHandlers> = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap niceHtmlRenderers> = $r4;

        return;
    }

    void clear()
    {
        org.waveprotocol.wave.model.util.StringMap $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData r0;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData;

        $r1 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap renderers>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap eventHandlers>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        $r3 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap mutationHandlers>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        $r4 = r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: org.waveprotocol.wave.model.util.StringMap niceHtmlRenderers>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void clear()>();

        return;
    }

    void <init>(org.waveprotocol.wave.client.editor.ElementHandlerRegistry$1)
    {
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$1 r1;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData r0;

        r0 := @this: org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry$HandlerData: void <init>()>();

        return;
    }
}
