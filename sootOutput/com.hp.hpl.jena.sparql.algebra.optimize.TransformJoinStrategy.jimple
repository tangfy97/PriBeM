public class com.hp.hpl.jena.sparql.algebra.optimize.TransformJoinStrategy extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformJoinStrategy r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformJoinStrategy;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpJoin r0;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformJoinStrategy r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2, r3, r4, r5, $r6;
        boolean $z0, $z1, $z2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformJoinStrategy;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        r4 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r5 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.JoinClassifier: boolean isLinear(com.hp.hpl.jena.sparql.algebra.op.OpJoin)>(r0);

        if $z0 == 0 goto label2;

        $z1 = r5 instanceof com.hp.hpl.jena.sparql.algebra.op.OpTable;

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.JoinClassifier: boolean isLinear(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r5, r4);

        if $z2 == 0 goto label1;

        r3 = r4;

        r4 = r5;

        r5 = r3;

     label1:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpSequence: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r4, r5);

        return $r6;

     label2:
        $r2 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r4, r5);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.expr.ExprList $r4, $r6;
        com.hp.hpl.jena.sparql.algebra.op.OpConditional $r5;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformJoinStrategy r1;
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3, r7;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformJoinStrategy;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r7 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.LeftJoinClassifier: boolean isLinear(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin)>(r0);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        if $r4 == null goto label1;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r6, r7);

     label1:
        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpConditional;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpConditional: void <init>(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r2, r7);

        return $r5;

     label2:
        $r3 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r2, r7);

        return $r3;
    }
}
