public class com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter extends java.lang.Object implements com.mycila.inject.internal.asm.Opcodes, com.mycila.inject.internal.asm.tree.analysis.Interpreter
{

    public void <init>()
    {
        com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)
    {
        int $i0;
        com.mycila.inject.internal.asm.Type r0, $r1;
        com.mycila.inject.internal.asm.tree.analysis.SourceValue $r2;
        com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter r3;

        r3 := @this: com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        if r0 != $r1 goto label1;

        return null;

     label1:
        $r2 = new com.mycila.inject.internal.asm.tree.analysis.SourceValue;

        if r0 != null goto label2;

        $i0 = 1;

        goto label3;

     label2:
        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSize()>();

     label3:
        specialinvoke $r2.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: void <init>(int)>($i0);

        return $r2;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value newOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r0;
        com.mycila.inject.internal.asm.Type $r3;
        com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter r6;
        byte $b2;
        int $i0, i1;
        com.mycila.inject.internal.asm.tree.FieldInsnNode $r1;
        com.mycila.inject.internal.asm.tree.analysis.SourceValue $r7;
        java.lang.Object r5;
        java.lang.String $r2;
        com.mycila.inject.internal.asm.tree.LdcInsnNode $r4;
        boolean $z0, $z1;

        r6 := @this: com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        lookupswitch($i0)
        {
            case 9: goto label1;
            case 10: goto label1;
            case 14: goto label1;
            case 15: goto label1;
            case 18: goto label2;
            case 178: goto label6;
            default: goto label7;
        };

     label1:
        i1 = 2;

        goto label8;

     label2:
        $r4 = (com.mycila.inject.internal.asm.tree.LdcInsnNode) r0;

        r5 = $r4.<com.mycila.inject.internal.asm.tree.LdcInsnNode: java.lang.Object cst>;

        $z0 = r5 instanceof java.lang.Long;

        if $z0 != 0 goto label3;

        $z1 = r5 instanceof java.lang.Double;

        if $z1 == 0 goto label4;

     label3:
        $b2 = 2;

        goto label5;

     label4:
        $b2 = 1;

     label5:
        i1 = $b2;

        goto label8;

     label6:
        $r1 = (com.mycila.inject.internal.asm.tree.FieldInsnNode) r0;

        $r2 = $r1.<com.mycila.inject.internal.asm.tree.FieldInsnNode: java.lang.String desc>;

        $r3 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r2);

        i1 = virtualinvoke $r3.<com.mycila.inject.internal.asm.Type: int getSize()>();

        goto label8;

     label7:
        i1 = 1;

     label8:
        $r7 = new com.mycila.inject.internal.asm.tree.analysis.SourceValue;

        specialinvoke $r7.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: void <init>(int,com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(i1, r0);

        return $r7;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value copyOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r2;
        com.mycila.inject.internal.asm.tree.analysis.Value r1;
        int $i0;
        com.mycila.inject.internal.asm.tree.analysis.SourceValue $r0;
        com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter r3;

        r3 := @this: com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter;

        r2 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r1 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        $r0 = new com.mycila.inject.internal.asm.tree.analysis.SourceValue;

        $i0 = interfaceinvoke r1.<com.mycila.inject.internal.asm.tree.analysis.Value: int getSize()>();

        specialinvoke $r0.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: void <init>(int,com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($i0, r2);

        return $r0;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value unaryOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r0;
        com.mycila.inject.internal.asm.Type $r3;
        com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter r4;
        com.mycila.inject.internal.asm.tree.analysis.Value r5;
        int $i0, i1;
        com.mycila.inject.internal.asm.tree.FieldInsnNode $r1;
        com.mycila.inject.internal.asm.tree.analysis.SourceValue $r6;
        java.lang.String $r2;

        r4 := @this: com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r5 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        lookupswitch($i0)
        {
            case 117: goto label1;
            case 119: goto label1;
            case 133: goto label1;
            case 135: goto label1;
            case 138: goto label1;
            case 140: goto label1;
            case 141: goto label1;
            case 143: goto label1;
            case 180: goto label2;
            default: goto label3;
        };

     label1:
        i1 = 2;

        goto label4;

     label2:
        $r1 = (com.mycila.inject.internal.asm.tree.FieldInsnNode) r0;

        $r2 = $r1.<com.mycila.inject.internal.asm.tree.FieldInsnNode: java.lang.String desc>;

        $r3 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r2);

        i1 = virtualinvoke $r3.<com.mycila.inject.internal.asm.Type: int getSize()>();

        goto label4;

     label3:
        i1 = 1;

     label4:
        $r6 = new com.mycila.inject.internal.asm.tree.analysis.SourceValue;

        specialinvoke $r6.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: void <init>(int,com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(i1, r0);

        return $r6;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value binaryOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r0;
        byte b1;
        com.mycila.inject.internal.asm.tree.analysis.Value r3, r4;
        int $i0;
        com.mycila.inject.internal.asm.tree.analysis.SourceValue $r1;
        com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter r2;

        r2 := @this: com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r3 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        r4 := @parameter2: com.mycila.inject.internal.asm.tree.analysis.Value;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        lookupswitch($i0)
        {
            case 47: goto label1;
            case 49: goto label1;
            case 97: goto label1;
            case 99: goto label1;
            case 101: goto label1;
            case 103: goto label1;
            case 105: goto label1;
            case 107: goto label1;
            case 109: goto label1;
            case 111: goto label1;
            case 113: goto label1;
            case 115: goto label1;
            case 121: goto label1;
            case 123: goto label1;
            case 125: goto label1;
            case 127: goto label1;
            case 129: goto label1;
            case 131: goto label1;
            default: goto label2;
        };

     label1:
        b1 = 2;

        goto label3;

     label2:
        b1 = 1;

     label3:
        $r1 = new com.mycila.inject.internal.asm.tree.analysis.SourceValue;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: void <init>(int,com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(b1, r0);

        return $r1;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value ternaryOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r1;
        com.mycila.inject.internal.asm.tree.analysis.Value r3, r4, r5;
        com.mycila.inject.internal.asm.tree.analysis.SourceValue $r0;
        com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter r2;

        r2 := @this: com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter;

        r1 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r3 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        r4 := @parameter2: com.mycila.inject.internal.asm.tree.analysis.Value;

        r5 := @parameter3: com.mycila.inject.internal.asm.tree.analysis.Value;

        $r0 = new com.mycila.inject.internal.asm.tree.analysis.SourceValue;

        specialinvoke $r0.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: void <init>(int,com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(1, r1);

        return $r0;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value naryOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, java.util.List)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r0;
        com.mycila.inject.internal.asm.Type $r3;
        com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter r5;
        java.util.List r6;
        com.mycila.inject.internal.asm.tree.MethodInsnNode $r1;
        int $i0, i1;
        com.mycila.inject.internal.asm.tree.analysis.SourceValue $r4;
        java.lang.String $r2;

        r5 := @this: com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r6 := @parameter1: java.util.List;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        if $i0 != 197 goto label1;

        i1 = 1;

        goto label2;

     label1:
        $r1 = (com.mycila.inject.internal.asm.tree.MethodInsnNode) r0;

        $r2 = $r1.<com.mycila.inject.internal.asm.tree.MethodInsnNode: java.lang.String desc>;

        $r3 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getReturnType(java.lang.String)>($r2);

        i1 = virtualinvoke $r3.<com.mycila.inject.internal.asm.Type: int getSize()>();

     label2:
        $r4 = new com.mycila.inject.internal.asm.tree.analysis.SourceValue;

        specialinvoke $r4.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: void <init>(int,com.mycila.inject.internal.asm.tree.AbstractInsnNode)>(i1, r0);

        return $r4;
    }

    public void returnOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r1;
        com.mycila.inject.internal.asm.tree.analysis.Value r2, r3;
        com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter;

        r1 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r2 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        r3 := @parameter2: com.mycila.inject.internal.asm.tree.analysis.Value;

        return;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value merge(com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        boolean $z0, $z1, $z2;
        java.util.Set $r4, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r16, $r17;
        com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter r19;
        com.mycila.inject.internal.asm.tree.analysis.SourceValue r1, r3, $r8, $r18;
        java.util.HashSet $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.mycila.inject.internal.asm.tree.analysis.SmallSet $r14, $r15;
        com.mycila.inject.internal.asm.tree.analysis.Value r0, r2;

        r19 := @this: com.mycila.inject.internal.asm.tree.analysis.SourceInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.analysis.Value;

        r2 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        r1 = (com.mycila.inject.internal.asm.tree.analysis.SourceValue) r0;

        r3 = (com.mycila.inject.internal.asm.tree.analysis.SourceValue) r2;

        $r4 = r1.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: java.util.Set insns>;

        $z0 = $r4 instanceof com.mycila.inject.internal.asm.tree.analysis.SmallSet;

        if $z0 == 0 goto label2;

        $r11 = r3.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: java.util.Set insns>;

        $z2 = $r11 instanceof com.mycila.inject.internal.asm.tree.analysis.SmallSet;

        if $z2 == 0 goto label2;

        $r12 = r1.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: java.util.Set insns>;

        $r15 = (com.mycila.inject.internal.asm.tree.analysis.SmallSet) $r12;

        $r13 = r3.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: java.util.Set insns>;

        $r14 = (com.mycila.inject.internal.asm.tree.analysis.SmallSet) $r13;

        $r16 = virtualinvoke $r15.<com.mycila.inject.internal.asm.tree.analysis.SmallSet: java.util.Set union(com.mycila.inject.internal.asm.tree.analysis.SmallSet)>($r14);

        $r17 = r1.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: java.util.Set insns>;

        if $r16 != $r17 goto label1;

        $i9 = r1.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: int size>;

        $i8 = r3.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: int size>;

        if $i9 != $i8 goto label1;

        return r0;

     label1:
        $r18 = new com.mycila.inject.internal.asm.tree.analysis.SourceValue;

        $i6 = r1.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: int size>;

        $i5 = r3.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: int size>;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i5);

        specialinvoke $r18.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: void <init>(int,java.util.Set)>($i7, $r16);

        return $r18;

     label2:
        $i1 = r1.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: int size>;

        $i0 = r3.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: int size>;

        if $i1 != $i0 goto label3;

        $r10 = r1.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: java.util.Set insns>;

        $r9 = r3.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: java.util.Set insns>;

        $z1 = interfaceinvoke $r10.<java.util.Set: boolean containsAll(java.util.Collection)>($r9);

        if $z1 != 0 goto label4;

     label3:
        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = r1.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: java.util.Set insns>;

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = r3.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: java.util.Set insns>;

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        $r8 = new com.mycila.inject.internal.asm.tree.analysis.SourceValue;

        $i3 = r1.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: int size>;

        $i2 = r3.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: int size>;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        specialinvoke $r8.<com.mycila.inject.internal.asm.tree.analysis.SourceValue: void <init>(int,java.util.Set)>($i4, $r5);

        return $r8;

     label4:
        return r0;
    }
}
