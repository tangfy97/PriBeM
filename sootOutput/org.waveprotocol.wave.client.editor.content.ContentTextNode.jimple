public class org.waveprotocol.wave.client.editor.content.ContentTextNode extends org.waveprotocol.wave.client.editor.content.ContentNode implements org.waveprotocol.wave.model.document.Doc$T
{
    private java.lang.String data;
    public static final org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext)
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void <init>(java.lang.String,com.google.gwt.dom.client.Text,org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext)>(r1, null, r2);

        return;
    }

    public void <init>(com.google.gwt.dom.client.Text, org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext)
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext r3;
        java.lang.String $r2;
        com.google.gwt.dom.client.Text r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r1 := @parameter0: com.google.gwt.dom.client.Text;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext;

        $r2 = virtualinvoke r1.<com.google.gwt.dom.client.Text: java.lang.String getData()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void <init>(java.lang.String,com.google.gwt.dom.client.Text,org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext)>($r2, r1, r3);

        return;
    }

    protected void <init>(java.lang.String, com.google.gwt.dom.client.Text, org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext)
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext r2;
        java.lang.String r3;
        com.google.gwt.dom.client.Node $r4;
        com.google.gwt.dom.client.Text r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: com.google.gwt.dom.client.Text;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext;

        $r4 = (com.google.gwt.dom.client.Node) r1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void <init>(com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext)>($r4, r2);

        r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String data> = "";

        r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String data> = r3;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement asElement()
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        return null;
    }

    public org.waveprotocol.wave.client.editor.content.ContentTextNode asText()
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        return r0;
    }

    public com.google.gwt.dom.client.Text getImplNodelet()
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        com.google.gwt.core.client.JavaScriptObject $r2;
        com.google.gwt.dom.client.Node $r1;
        com.google.gwt.dom.client.Text $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        $r2 = virtualinvoke $r1.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r3 = (com.google.gwt.dom.client.Text) $r2;

        return $r3;
    }

    public void setTextNodelet(com.google.gwt.dom.client.Text)
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        com.google.gwt.dom.client.Node $r2;
        com.google.gwt.dom.client.Text r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r1 := @parameter0: com.google.gwt.dom.client.Text;

        $r2 = (com.google.gwt.dom.client.Node) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void setImplNodelet(com.google.gwt.dom.client.Node)>($r2);

        return;
    }

    void setRendering(boolean)
    {
        com.google.gwt.dom.client.Text $r1, $r4;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.String $r3;
        com.google.gwt.dom.client.Document $r2;
        com.google.gwt.dom.client.Node $r5;
        boolean z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != z0 goto label3;

        return;

     label3:
        if z0 == 0 goto label4;

        $r2 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String data>;

        $r4 = virtualinvoke $r2.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Text createTextNode(java.lang.String)>($r3);

        $r5 = (com.google.gwt.dom.client.Node) $r4;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void setImplNodelet(com.google.gwt.dom.client.Node)>($r5);

        goto label5;

     label4:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void setImplNodelet(com.google.gwt.dom.client.Node)>(null);

     label5:
        return;
    }

    public java.lang.String getData()
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String data>;

        return $r1;
    }

    private void setContentData(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        java.lang.String r0, $r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String data>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        r1.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String data> = r0;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r3 == null goto label1;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentElement: void notifyChildrenMutated()>();

     label1:
        return;
    }

    void insertData(int, java.lang.String, boolean)
    {
        org.waveprotocol.wave.client.editor.content.HtmlPoint $r10, $r12, $r16;
        com.google.gwt.dom.client.Text r15;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r17;
        int i0, $i1, $i2, $i3;
        java.lang.String $r1, $r3, r5, $r7, $r9;
        org.waveprotocol.wave.client.editor.extract.Repairer $r11;
        boolean z0;
        com.google.gwt.core.client.JavaScriptObject $r14;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType $r19;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r18;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.StringBuilder $r2, $r4, $r6, $r8;
        com.google.gwt.dom.client.Node $r13;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void setContentData(java.lang.String)>($r9);

        if z0 == 0 goto label1;

        $r10 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void findNodeletWithOffset(int,org.waveprotocol.wave.client.editor.content.HtmlPoint,org.waveprotocol.wave.client.editor.extract.Repairer)>(i0, $r10, $r11);

        $r12 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.client.editor.content.HtmlPoint: com.google.gwt.dom.client.Node getNode()>();

        $r14 = virtualinvoke $r13.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r15 = (com.google.gwt.dom.client.Text) $r14;

        $r16 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $i2 = virtualinvoke $r16.<org.waveprotocol.wave.client.editor.content.HtmlPoint: int getOffset()>();

        virtualinvoke r15.<com.google.gwt.dom.client.Text: void insertData(int,java.lang.String)>($i2, r5);

        $r17 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext getExtendedContext()>();

        $r18 = interfaceinvoke $r17.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()>();

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();

        $r19 = <org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType: org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType DATA>;

        interfaceinvoke $r18.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: void textNodeletAffected(com.google.gwt.dom.client.Text,int,int,org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType)>(r15, $i2, $i3, $r19);

     label1:
        return;
    }

    void deleteData(int, int, boolean)
    {
        org.waveprotocol.wave.client.editor.content.HtmlPoint $r9, $r11, $r15;
        com.google.gwt.dom.client.Text $r8, r14, $r16, $r17;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r21;
        boolean z0, $z1;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType $r23;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.StringBuilder $r4, $r6, $r25;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r1, $r3, $r5, $r7;
        org.waveprotocol.wave.client.editor.extract.Repairer $r10;
        com.google.gwt.core.client.JavaScriptObject $r13;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r18;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r22;
        java.lang.Object $r19, r24;
        com.google.gwt.dom.client.Node $r12, r20, $r26;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r4 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i2 = i0 + i1;

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void setContentData(java.lang.String)>($r7);

        if z0 == 0 goto label5;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: boolean isImplAttached()>();

        if $z1 == 0 goto label4;

        $r9 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void findNodeletWithOffset(int,org.waveprotocol.wave.client.editor.content.HtmlPoint,org.waveprotocol.wave.client.editor.extract.Repairer)>(i0, $r9, $r10);

        $r11 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.HtmlPoint: com.google.gwt.dom.client.Node getNode()>();

        $r13 = virtualinvoke $r12.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r14 = (com.google.gwt.dom.client.Text) $r13;

        $r15 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $i4 = virtualinvoke $r15.<org.waveprotocol.wave.client.editor.content.HtmlPoint: int getOffset()>();

        $i5 = virtualinvoke r14.<com.google.gwt.dom.client.Text: int getLength()>();

        $i6 = $i5 - $i4;

        if $i6 < i1 goto label1;

        virtualinvoke r14.<com.google.gwt.dom.client.Text: void deleteData(int,int)>($i4, i1);

        $r21 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext getExtendedContext()>();

        $r22 = interfaceinvoke $r21.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()>();

        $i8 = neg i1;

        $r23 = <org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType: org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType DATA>;

        interfaceinvoke $r22.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: void textNodeletAffected(com.google.gwt.dom.client.Text,int,int,org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType)>(r14, $i4, $i8, $r23);

        goto label3;

     label1:
        $i7 = i0 + i1;

        $r16 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text implSplitText(int)>($i7);

        $r17 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text implSplitText(int)>(i0);

        $r18 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()>();

        r24 = $r17;

     label2:
        if r24 == $r16 goto label3;

        if r24 == null goto label3;

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r24);

        r20 = (com.google.gwt.dom.client.Node) $r19;

        $r26 = (com.google.gwt.dom.client.Node) r24;

        virtualinvoke $r26.<com.google.gwt.dom.client.Node: void removeFromParent()>();

        r24 = r20;

        goto label2;

     label3:
        goto label5;

     label4:
        $r8 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        virtualinvoke $r8.<com.google.gwt.dom.client.Text: void deleteData(int,int)>(i0, i1);

     label5:
        return;
    }

    org.waveprotocol.wave.client.editor.content.ContentTextNode splitText(int, boolean)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r9;
        com.google.gwt.dom.client.Text r10;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0, $r6;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r7;
        int i0, $i1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r8;
        java.lang.String $r2, $r3, $r4, $r5;
        com.google.gwt.dom.client.Document $r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        if i0 < $i1 goto label2;

        return null;

     label2:
        if z0 == 0 goto label3;

        r10 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text implSplitText(int)>(i0);

        goto label4;

     label3:
        $r1 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        r10 = virtualinvoke $r1.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Text createTextNode(java.lang.String)>("");

     label4:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(i0);

        $r6 = new org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext getExtendedContext()>();

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void <init>(java.lang.String,com.google.gwt.dom.client.Text,org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext)>($r5, r10, $r7);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void setContentData(java.lang.String)>($r3);

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode insertBefore(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,boolean)>($r6, $r9, 0);

        return $r6;
    }

    private com.google.gwt.dom.client.Text implSplitText(int)
    {
        org.waveprotocol.wave.client.editor.content.HtmlPoint $r1, $r3, $r7, $r8, $r9;
        com.google.gwt.dom.client.Text r6, $r10, $r16;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r11;
        int i0, $i1, $i2, $i3, $i4, $i6;
        org.waveprotocol.wave.client.editor.extract.Repairer $r2;
        com.google.gwt.core.client.JavaScriptObject $r5, $r15;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType $r13;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r12;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        com.google.gwt.dom.client.Node $r4, $r14;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter0: int;

        $r1 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void findNodeletWithOffset(int,org.waveprotocol.wave.client.editor.content.HtmlPoint,org.waveprotocol.wave.client.editor.extract.Repairer)>(i0, $r1, $r2);

        $r3 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.HtmlPoint: com.google.gwt.dom.client.Node getNode()>();

        $r5 = virtualinvoke $r4.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r6 = (com.google.gwt.dom.client.Text) $r5;

        $i1 = virtualinvoke r6.<com.google.gwt.dom.client.Text: int getLength()>();

        $r7 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $i2 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.HtmlPoint: int getOffset()>();

        if $i1 != $i2 goto label1;

        $r14 = virtualinvoke r6.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Node getNextSibling()>();

        $r15 = virtualinvoke $r14.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r16 = (com.google.gwt.dom.client.Text) $r15;

        return $r16;

     label1:
        $r8 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $i3 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.HtmlPoint: int getOffset()>();

        if $i3 != 0 goto label2;

        return r6;

     label2:
        $r9 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput>;

        $i4 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.HtmlPoint: int getOffset()>();

        $r10 = virtualinvoke r6.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Text splitText(int)>($i4);

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext getExtendedContext()>();

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()>();

        $r13 = <org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType: org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType SPLIT>;

        $i6 = (int) -10000;

        interfaceinvoke $r12.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: void textNodeletAffected(com.google.gwt.dom.client.Text,int,int,org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType)>(r6, $i4, $i6, $r13);

        return $r10;
    }

    public int getLength()
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i0;
    }

    public java.lang.String getImplData() throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.String $r4;
        com.google.gwt.dom.client.Node $r1;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r2;
        com.google.gwt.dom.client.Text $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Node checkNodeAndNeighbourReturnImpl(org.waveprotocol.wave.client.editor.content.ContentTextNode)>(r0);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String sumTextNodes(com.google.gwt.dom.client.Text,com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.impl.HtmlView)>($r3, $r1, $r2);

        return $r4;
    }

    public void onAddedToParent(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: boolean isImplAttached()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void simpleNormaliseImpl()>();

     label1:
        return;
    }

    public int getImplDataLength() throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        int $i0;
        com.google.gwt.dom.client.Node $r1;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r2;
        com.google.gwt.dom.client.Text $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Node checkNodeAndNeighbourReturnImpl(org.waveprotocol.wave.client.editor.content.ContentTextNode)>(r0);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: int sumTextNodesLength(com.google.gwt.dom.client.Text,com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.impl.HtmlView)>($r3, $r1, $r2);

        return $i0;
    }

    public void revertImplementation()
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.String $r2;
        com.google.gwt.dom.client.Document $r1;
        com.google.gwt.dom.client.Node $r4;
        com.google.gwt.dom.client.Text $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        $r3 = virtualinvoke $r1.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Text createTextNode(java.lang.String)>($r2);

        $r4 = (com.google.gwt.dom.client.Node) $r3;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void setImplNodelet(com.google.gwt.dom.client.Node)>($r4);

        return;
    }

    public void normaliseImplThrow() throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        com.google.gwt.dom.client.Text $r14, r16;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r4, $r11;
        int $i0, $i1, $i3, $i5, $i7, $i9;
        java.lang.String $r7;
        boolean $z0, $z1;
        com.google.gwt.core.client.JavaScriptObject $r10;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType $r6, $r13;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r2;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r5, $r12;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.Object $r8;
        com.google.gwt.dom.client.Node r3, $r9, $r15;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: boolean isContentAttached()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: boolean isImplAttached()>();

        if $z1 != 0 goto label2;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void simpleNormaliseImpl()>();

     label2:
        $r14 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        $i0 = virtualinvoke $r14.<com.google.gwt.dom.client.Text: int getLength()>();

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        if $i0 != $i1 goto label3;

        return;

     label3:
        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentNode checkNodeAndNeighbour(org.waveprotocol.wave.client.editor.content.ContentTextNode)>(r0);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()>();

        if $r1 != null goto label4;

        $r15 = null;

        goto label5;

     label4:
        $r15 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

     label5:
        r3 = $r15;

        r16 = $r14;

     label6:
        if r16 == r3 goto label8;

        if r16 == null goto label8;

        if r16 == $r14 goto label7;

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext getExtendedContext()>();

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()>();

        $r13 = <org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType: org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType REMOVE>;

        $i3 = (int) -1000;

        $i5 = (int) -1000;

        interfaceinvoke $r12.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: void textNodeletAffected(com.google.gwt.dom.client.Text,int,int,org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType)>(r16, $i3, $i5, $r13);

        virtualinvoke r16.<com.google.gwt.dom.client.Text: void removeFromParent()>();

     label7:
        $r8 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>($r14);

        $r9 = (com.google.gwt.dom.client.Node) $r8;

        $r10 = virtualinvoke $r9.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r16 = (com.google.gwt.dom.client.Text) $r10;

        goto label6;

     label8:
        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext getExtendedContext()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()>();

        $r6 = <org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType: org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType REPLACE_DATA>;

        $i7 = (int) -1000;

        $i9 = (int) -1000;

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: void textNodeletAffected(com.google.gwt.dom.client.Text,int,int,org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType)>($r14, $i7, $i9, $r6);

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        virtualinvoke $r14.<com.google.gwt.dom.client.Text: void setData(java.lang.String)>($r7);

        return;
    }

    void simpleNormaliseImpl()
    {
        com.google.gwt.dom.client.Text $r1, $r4, $r5;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        int $i0, $i1;
        java.lang.String $r3;
        com.google.gwt.dom.client.Document $r2;
        com.google.gwt.dom.client.Node $r6;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        if $r1 == null goto label1;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        $i0 = virtualinvoke $r5.<com.google.gwt.dom.client.Text: int getLength()>();

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        if $i0 == $i1 goto label2;

     label1:
        $r2 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        $r4 = virtualinvoke $r2.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Text createTextNode(java.lang.String)>($r3);

        $r6 = (com.google.gwt.dom.client.Node) $r4;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void setImplNodelet(com.google.gwt.dom.client.Node)>($r6);

     label2:
        return;
    }

    public com.google.gwt.dom.client.Text normaliseImpl()
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r9;
        org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType $r5;
        java.lang.RuntimeException $r8;
        org.waveprotocol.wave.model.document.util.Point$El $r10;
        com.google.gwt.dom.client.Text $r2, $r7;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns $r4;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r3;
        int i0, $i2, $i4;
        org.waveprotocol.wave.client.editor.extract.Repairer $r1;
        java.lang.String $r6;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()>();

        i0 = 0;

     label1:
        if i0 >= 50 goto label7;

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void normaliseImplThrow()>();

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

     label3:
        return $r7;

     label4:
        $r11 := @caughtexception;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.extract.Repairer: void handle(org.waveprotocol.wave.client.editor.extract.InconsistencyException)>($r11);

        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r9, r0);

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.extract.Repairer: void revert(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r10, null);

     label6:
        i0 = i0 + 1;

        goto label1;

     label7:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext getExtendedContext()>();

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns editing()>();

        $r5 = <org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType: org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType REPLACE_DATA>;

        $i2 = (int) -1000;

        $i4 = (int) -1000;

        interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext$LowLevelEditingConcerns: void textNodeletAffected(com.google.gwt.dom.client.Text,int,int,org.waveprotocol.wave.client.editor.content.SelectionMaintainer$TextNodeChangeType)>($r2, $i2, $i4, $r5);

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        virtualinvoke $r2.<com.google.gwt.dom.client.Text: void setData(java.lang.String)>($r6);

        return $r2;

        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label2 to label3 with label4;
        catch java.lang.RuntimeException from label2 to label3 with label5;
    }

    public static java.lang.String sumTextNodes(com.google.gwt.dom.client.Text, com.google.gwt.dom.client.Node, org.waveprotocol.wave.client.editor.impl.HtmlView)
    {
        com.google.gwt.core.client.JavaScriptObject $r10;
        org.waveprotocol.wave.client.editor.impl.HtmlView r7;
        com.google.gwt.dom.client.Text r0, r12;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Object $r8;
        java.lang.String $r2, $r5, r11;
        com.google.gwt.dom.client.Node r1, $r9;

        r0 := @parameter0: com.google.gwt.dom.client.Text;

        r1 := @parameter1: com.google.gwt.dom.client.Node;

        r7 := @parameter2: org.waveprotocol.wave.client.editor.impl.HtmlView;

        r11 = "";

        r12 = r0;

     label1:
        if r12 == r1 goto label2;

        if r12 == null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r5 = virtualinvoke r12.<com.google.gwt.dom.client.Text: java.lang.String getData()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = interfaceinvoke r7.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r12);

        $r9 = (com.google.gwt.dom.client.Node) $r8;

        $r10 = virtualinvoke $r9.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r12 = (com.google.gwt.dom.client.Text) $r10;

        goto label1;

     label2:
        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getNodeValueFromHtmlString(java.lang.String)>(r11);

        return $r2;
    }

    private static int sumTextNodesLength(com.google.gwt.dom.client.Text, com.google.gwt.dom.client.Node, org.waveprotocol.wave.client.editor.impl.HtmlView)
    {
        com.google.gwt.core.client.JavaScriptObject $r5;
        org.waveprotocol.wave.client.editor.impl.HtmlView r2;
        com.google.gwt.dom.client.Text r0, r6;
        int $i0, i1;
        java.lang.Object $r3;
        com.google.gwt.dom.client.Node r1, $r4;

        r0 := @parameter0: com.google.gwt.dom.client.Text;

        r1 := @parameter1: com.google.gwt.dom.client.Node;

        r2 := @parameter2: org.waveprotocol.wave.client.editor.impl.HtmlView;

        i1 = 0;

        r6 = r0;

     label1:
        if r6 == r1 goto label2;

        if r6 == null goto label2;

        $i0 = virtualinvoke r6.<com.google.gwt.dom.client.Text: int getLength()>();

        i1 = i1 + $i0;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r6);

        $r4 = (com.google.gwt.dom.client.Node) $r3;

        $r5 = virtualinvoke $r4.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r6 = (com.google.gwt.dom.client.Text) $r5;

        goto label1;

     label2:
        return i1;
    }

    public boolean owns(com.google.gwt.dom.client.Text) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        com.google.gwt.core.client.JavaScriptObject $r7;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r2;
        com.google.gwt.dom.client.Text r4, r9;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.Object $r5;
        com.google.gwt.dom.client.Node r3, $r6, $r8;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r4 := @parameter0: com.google.gwt.dom.client.Text;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentNode checkNodeAndNeighbour(org.waveprotocol.wave.client.editor.content.ContentTextNode)>(r0);

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()>();

        if $r1 != null goto label1;

        $r8 = null;

        goto label2;

     label1:
        $r8 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

     label2:
        r3 = $r8;

        r9 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

     label3:
        if r9 == r3 goto label5;

        if r9 != r4 goto label4;

        return 1;

     label4:
        $r5 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r9);

        $r6 = (com.google.gwt.dom.client.Node) $r5;

        $r7 = virtualinvoke $r6.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r9 = (com.google.gwt.dom.client.Text) $r7;

        goto label3;

     label5:
        return 0;
    }

    public int getOffset(com.google.gwt.dom.client.Text) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r5;
        java.lang.Exception $r3;
        com.google.gwt.dom.client.Text r1;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        int $i0;
        com.google.gwt.dom.client.Element $r8;
        java.lang.Object $r6;
        org.waveprotocol.wave.client.editor.content.ContentElement $r7;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r4;
        com.google.gwt.dom.client.Node $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r1 := @parameter0: com.google.gwt.dom.client.Text;

     label1:
        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Node checkNodeAndNeighbourReturnImpl(org.waveprotocol.wave.client.editor.content.ContentTextNode)>(r0);

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getOffset(com.google.gwt.dom.client.Text,com.google.gwt.dom.client.Node)>(r1, $r2);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getParentElement(java.lang.Object)>(r0);

        $r7 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r6;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing: void <init>(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element)>(r0, $r8);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int getOffset(com.google.gwt.dom.client.Text, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r1;
        int $i0;
        com.google.gwt.dom.client.Node r3;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r4;
        com.google.gwt.dom.client.Text r0, $r2;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r0 := @parameter0: com.google.gwt.dom.client.Text;

        r3 := @parameter1: com.google.gwt.dom.client.Node;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()>();

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: int getOffset(com.google.gwt.dom.client.Text,com.google.gwt.dom.client.Text,com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.impl.HtmlView)>(r0, $r2, r3, $r4);

        return $i0;
    }

    public static int getOffset(com.google.gwt.dom.client.Text, com.google.gwt.dom.client.Text, com.google.gwt.dom.client.Node, org.waveprotocol.wave.client.editor.impl.HtmlView)
    {
        com.google.gwt.core.client.JavaScriptObject $r7;
        org.waveprotocol.wave.client.editor.impl.HtmlView r4;
        com.google.gwt.dom.client.Text r0, r3, r8;
        int $i0, i1;
        org.waveprotocol.wave.client.editor.EditorRuntimeException $r2;
        java.lang.Object $r5;
        com.google.gwt.dom.client.Node r1, $r6;

        r3 := @parameter0: com.google.gwt.dom.client.Text;

        r0 := @parameter1: com.google.gwt.dom.client.Text;

        r1 := @parameter2: com.google.gwt.dom.client.Node;

        r4 := @parameter3: org.waveprotocol.wave.client.editor.impl.HtmlView;

        i1 = 0;

        r8 = r0;

     label1:
        if r8 == r1 goto label3;

        if r8 != r3 goto label2;

        return i1;

     label2:
        $i0 = virtualinvoke r8.<com.google.gwt.dom.client.Text: int getLength()>();

        i1 = i1 + $i0;

        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r8);

        $r6 = (com.google.gwt.dom.client.Node) $r5;

        $r7 = virtualinvoke $r6.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r8 = (com.google.gwt.dom.client.Text) $r7;

        goto label1;

     label3:
        $r2 = new org.waveprotocol.wave.client.editor.EditorRuntimeException;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.EditorRuntimeException: void <init>(java.lang.String)>("Didn\'t find text nodelet to get offset for");

        throw $r2;
    }

    public void findNodeletWithOffset(int, org.waveprotocol.wave.client.editor.content.HtmlPoint) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        org.waveprotocol.wave.client.editor.content.HtmlPoint r1;
        int i0;
        com.google.gwt.dom.client.Node $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.HtmlPoint;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Node checkNodeAndNeighbourReturnImpl(org.waveprotocol.wave.client.editor.content.ContentTextNode)>(r0);

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void findNodeletWithOffset(int,org.waveprotocol.wave.client.editor.content.HtmlPoint,com.google.gwt.dom.client.Node)>(i0, r1, $r2);

        return;
    }

    public void findNodeletWithOffset(int, org.waveprotocol.wave.client.editor.content.HtmlPoint, org.waveprotocol.wave.client.editor.extract.Repairer)
    {
        org.waveprotocol.wave.client.editor.content.HtmlPoint r2;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r1;
        int i0, i1;
        org.waveprotocol.wave.client.editor.EditorRuntimeException $r0;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r3;
        org.waveprotocol.wave.client.editor.extract.Repairer $r4, r5;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.HtmlPoint;

        r5 := @parameter2: org.waveprotocol.wave.client.editor.extract.Repairer;

        i1 = 0;

     label1:
        if i1 >= 3 goto label5;

     label2:
        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void findNodeletWithOffset(int,org.waveprotocol.wave.client.editor.content.HtmlPoint)>(i0, r2);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()>();

        virtualinvoke $r4.<org.waveprotocol.wave.client.editor.extract.Repairer: void handle(org.waveprotocol.wave.client.editor.extract.InconsistencyException)>($r3);

        i1 = i1 + 1;

        goto label1;

     label5:
        $r0 = new org.waveprotocol.wave.client.editor.EditorRuntimeException;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.EditorRuntimeException: void <init>(java.lang.String)>("Tried to repair and it just wouldn\'t work");

        throw $r0;

        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label2 to label3 with label4;
    }

    public void findNodeletWithOffset(int, org.waveprotocol.wave.client.editor.content.HtmlPoint, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.content.HtmlPoint r3;
        com.google.gwt.core.client.JavaScriptObject $r6;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r1;
        com.google.gwt.dom.client.Text r7;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        int i0, $i1, i2, $i3, i4;
        java.lang.Object $r4;
        com.google.gwt.dom.client.Node r2, $r5, $r8;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i2 := @parameter0: int;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.HtmlPoint;

        r2 := @parameter2: com.google.gwt.dom.client.Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()>();

        i4 = 0;

        r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

     label1:
        if r7 == r2 goto label3;

        i0 = i4;

        $i1 = virtualinvoke r7.<com.google.gwt.dom.client.Text: int getLength()>();

        i4 = i4 + $i1;

        if i4 < i2 goto label2;

        $r8 = (com.google.gwt.dom.client.Node) r7;

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.HtmlPoint: void setNode(com.google.gwt.dom.client.Node)>($r8);

        $i3 = i2 - i0;

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.HtmlPoint: void setOffset(int)>($i3);

        return;

     label2:
        $r4 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r7);

        $r5 = (com.google.gwt.dom.client.Node) $r4;

        $r6 = virtualinvoke $r5.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r7 = (com.google.gwt.dom.client.Text) $r6;

        goto label1;

     label3:
        virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.HtmlPoint: void setNode(com.google.gwt.dom.client.Node)>(null);

        return;
    }

    private static com.google.gwt.dom.client.Node checkNodeAndNeighbourReturnImpl(org.waveprotocol.wave.client.editor.content.ContentTextNode) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        com.google.gwt.dom.client.Node $r2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentNode checkNodeAndNeighbour(org.waveprotocol.wave.client.editor.content.ContentTextNode)>(r0);

        if $r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

     label2:
        return $r2;
    }

    private static org.waveprotocol.wave.client.editor.content.ContentNode checkNodeAndNeighbour(org.waveprotocol.wave.client.editor.content.ContentTextNode) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r11;
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        com.google.gwt.dom.client.Element $r5, $r9;
        java.lang.Object $r2, $r3, $r7;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4, $r8;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r6, $r10;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: boolean isImplAttached()>();

        if $z0 != 0 goto label1;

        $r7 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getParentElement(java.lang.Object)>(r0);

        $r8 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r7;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r10 = new org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing;

        specialinvoke $r10.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing: void <init>(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element)>(r0, $r9);

        throw $r10;

     label1:
        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getNextSibling(java.lang.Object)>(r0);

        r11 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r2;

        if r11 == null goto label2;

        $z1 = virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isImplAttached()>();

        if $z1 != 0 goto label2;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getParentElement(java.lang.Object)>(r0);

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r6 = new org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing;

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing: void <init>(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element)>(r11, $r5);

        throw $r6;

     label2:
        return r11;
    }

    public short getNodeType()
    {
        short $s0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $s0 = <org.waveprotocol.wave.model.document.indexed.NodeType: short TEXT_NODE>;

        return $s0;
    }

    public boolean isElement()
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        return 0;
    }

    public boolean isTextNode()
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        return 1;
    }

    public boolean isConsistent()
    {
        java.lang.Throwable $r3;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.String $r1, $r2;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

     label1:
        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: boolean isImplAttached()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getImplData()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $r4 := @caughtexception;

        return 0;

     label5:
        $r3 := @caughtexception;

        return 0;

        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label1 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
    }

    public static java.lang.String getNodeValueFromHtmlString(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(160, 32);

        return $r1;
    }

    public void debugAssertHealthy()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        java.lang.AssertionError $r5, $r6;
        com.google.gwt.dom.client.Text $r3;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        com.google.gwt.dom.client.Node $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        $r7 = (com.google.gwt.dom.client.Node) $r3;

        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r7);

        if $z2 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("ContentTextNode\'s implNodelet should be a text node");

        throw $r5;

     label1:
        $z1 = <org.waveprotocol.wave.client.editor.content.ContentTextNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        if null == $r1 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("ContentTextNode should be childless");

        throw $r6;

     label2:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: void debugAssertHealthy()>();

        return;
    }

    public volatile com.google.gwt.dom.client.Node normaliseImpl()
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        com.google.gwt.dom.client.Node $r2;
        com.google.gwt.dom.client.Text $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text normaliseImpl()>();

        $r2 = (com.google.gwt.dom.client.Node) $r1;

        return $r2;
    }

    public volatile com.google.gwt.dom.client.Node getImplNodelet()
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        com.google.gwt.dom.client.Node $r2;
        com.google.gwt.dom.client.Text $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        $r2 = (com.google.gwt.dom.client.Node) $r1;

        return $r2;
    }

    public volatile void onAddedToParent(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.Object r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void onAddedToParent(org.waveprotocol.wave.client.editor.content.ContentElement)>($r2);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.content.HtmlPoint $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/ContentTextNode;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.ContentTextNode: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.client.editor.content.HtmlPoint;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.content.HtmlPoint: void <init>(com.google.gwt.dom.client.Node,int)>(null, 0);

        <org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletOffsetOutput> = $r1;

        return;
    }
}
