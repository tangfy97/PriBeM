final class org.apache.lucene.codecs.lucene41.ForUtil extends java.lang.Object
{
    private static final int ALL_VALUES_EQUAL;
    static final int MAX_ENCODED_SIZE;
    static final int MAX_DATA_SIZE;
    private final int[] encodedSizes;
    private final org.apache.lucene.util.packed.PackedInts$Encoder[] encoders;
    private final org.apache.lucene.util.packed.PackedInts$Decoder[] decoders;
    private final int[] iterations;
    static final boolean $assertionsDisabled;

    private static int computeIterations(org.apache.lucene.util.packed.PackedInts$Decoder)
    {
        int $i0, $i1;
        float $f0, $f1;
        org.apache.lucene.util.packed.PackedInts$Decoder r0;
        double $d0, $d1;

        r0 := @parameter0: org.apache.lucene.util.packed.PackedInts$Decoder;

        $i0 = interfaceinvoke r0.<org.apache.lucene.util.packed.PackedInts$Decoder: int byteValueCount()>();

        $f0 = (float) $i0;

        $f1 = 128.0F / $f0;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i1 = (int) $d1;

        return $i1;
    }

    private static int encodedSize(org.apache.lucene.util.packed.PackedInts$Format, int, int)
    {
        org.apache.lucene.util.packed.PackedInts$Format r0;
        long $l2;
        java.lang.AssertionError $r2;
        byte $b4, $b5;
        int i0, i1, $i3, $i6, $i7;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.util.packed.PackedInts$Format;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l2 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(i0, 128, i1);

        $z0 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b4 = $l2 cmp 0L;

        $i6 = (int) $b4;

        if $i6 < 0 goto label1;

        $b5 = $l2 cmp 2147483647L;

        $i7 = (int) $b5;

        if $i7 <= 0 goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(long)>($l2);

        throw $r2;

     label2:
        $i3 = (int) $l2;

        return $i3;
    }

    void <init>(float, org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        org.apache.lucene.util.packed.PackedInts$Decoder $r14, $r16;
        org.apache.lucene.codecs.lucene41.ForUtil r0;
        int[] $r2, $r5, $r8, $r17;
        org.apache.lucene.util.packed.PackedInts$Decoder[] $r4, $r13, $r15;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.packed.PackedInts$Encoder $r11;
        org.apache.lucene.util.packed.PackedInts$Encoder[] $r3, $r10;
        float f0;
        org.apache.lucene.store.DataOutput r1;
        org.apache.lucene.util.packed.PackedInts$FormatAndBits $r6;
        java.lang.AssertionError $r19, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        org.apache.lucene.util.packed.PackedInts$Format $r7, $r9, $r12, $r18, $r20;

        r0 := @this: org.apache.lucene.codecs.lucene41.ForUtil;

        f0 := @parameter0: float;

        r1 := @parameter1: org.apache.lucene.store.DataOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r1.<org.apache.lucene.store.DataOutput: void writeVInt(int)>(1);

        $r2 = newarray (int)[33];

        r0.<org.apache.lucene.codecs.lucene41.ForUtil: int[] encodedSizes> = $r2;

        $r3 = newarray (org.apache.lucene.util.packed.PackedInts$Encoder)[33];

        r0.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Encoder[] encoders> = $r3;

        $r4 = newarray (org.apache.lucene.util.packed.PackedInts$Decoder)[33];

        r0.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Decoder[] decoders> = $r4;

        $r5 = newarray (int)[33];

        r0.<org.apache.lucene.codecs.lucene41.ForUtil: int[] iterations> = $r5;

        i12 = 1;

     label1:
        if i12 > 32 goto label4;

        $r6 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$FormatAndBits fastestFormatAndBits(int,int,float)>(128, i12, f0);

        $z0 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r20 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i11 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        $z2 = virtualinvoke $r20.<org.apache.lucene.util.packed.PackedInts$Format: boolean isSupported(int)>($i11);

        if $z2 != 0 goto label2;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label2:
        $z1 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $i10 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        if $i10 <= 32 goto label3;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label3:
        $r8 = r0.<org.apache.lucene.codecs.lucene41.ForUtil: int[] encodedSizes>;

        $r7 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i0 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        $i1 = staticinvoke <org.apache.lucene.codecs.lucene41.ForUtil: int encodedSize(org.apache.lucene.util.packed.PackedInts$Format,int,int)>($r7, 1, $i0);

        $r8[i12] = $i1;

        $r10 = r0.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Encoder[] encoders>;

        $r9 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i2 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        $r11 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Encoder getEncoder(org.apache.lucene.util.packed.PackedInts$Format,int,int)>($r9, 1, $i2);

        $r10[i12] = $r11;

        $r13 = r0.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Decoder[] decoders>;

        $r12 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i3 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        $r14 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Decoder getDecoder(org.apache.lucene.util.packed.PackedInts$Format,int,int)>($r12, 1, $i3);

        $r13[i12] = $r14;

        $r17 = r0.<org.apache.lucene.codecs.lucene41.ForUtil: int[] iterations>;

        $r15 = r0.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Decoder[] decoders>;

        $r16 = $r15[i12];

        $i4 = staticinvoke <org.apache.lucene.codecs.lucene41.ForUtil: int computeIterations(org.apache.lucene.util.packed.PackedInts$Decoder)>($r16);

        $r17[i12] = $i4;

        $r18 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i5 = virtualinvoke $r18.<org.apache.lucene.util.packed.PackedInts$Format: int getId()>();

        $i8 = $i5 << 5;

        $i6 = $r6.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        $i7 = $i6 - 1;

        $i9 = $i8 | $i7;

        virtualinvoke r1.<org.apache.lucene.store.DataOutput: void writeVInt(int)>($i9);

        i12 = i12 + 1;

        goto label1;

     label4:
        return;
    }

    void <init>(org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r1;
        org.apache.lucene.util.packed.PackedInts$Decoder $r11, $r13;
        java.lang.AssertionError $r15;
        org.apache.lucene.codecs.lucene41.ForUtil r0;
        int[] $r2, $r5, $r7, $r14;
        int $i0, $i1, i2, $i3, i4, $i5, $i6, i7;
        org.apache.lucene.util.packed.PackedInts$Decoder[] $r4, $r10, $r12;
        boolean $z0, $z1;
        org.apache.lucene.util.packed.PackedInts$Format $r6;
        org.apache.lucene.util.packed.PackedInts$Encoder $r9;
        org.apache.lucene.util.packed.PackedInts$Encoder[] $r3, $r8;

        r0 := @this: org.apache.lucene.codecs.lucene41.ForUtil;

        r1 := @parameter0: org.apache.lucene.store.DataInput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.lucene.store.DataInput: int readVInt()>();

        staticinvoke <org.apache.lucene.util.packed.PackedInts: void checkVersion(int)>($i0);

        $r2 = newarray (int)[33];

        r0.<org.apache.lucene.codecs.lucene41.ForUtil: int[] encodedSizes> = $r2;

        $r3 = newarray (org.apache.lucene.util.packed.PackedInts$Encoder)[33];

        r0.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Encoder[] encoders> = $r3;

        $r4 = newarray (org.apache.lucene.util.packed.PackedInts$Decoder)[33];

        r0.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Decoder[] decoders> = $r4;

        $r5 = newarray (int)[33];

        r0.<org.apache.lucene.codecs.lucene41.ForUtil: int[] iterations> = $r5;

        i7 = 1;

     label1:
        if i7 > 32 goto label3;

        $i1 = virtualinvoke r1.<org.apache.lucene.store.DataInput: int readVInt()>();

        i2 = $i1 >>> 5;

        $i3 = $i1 & 31;

        i4 = $i3 + 1;

        $r6 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format byId(int)>(i2);

        $z0 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r6.<org.apache.lucene.util.packed.PackedInts$Format: boolean isSupported(int)>(i4);

        if $z1 != 0 goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label2:
        $r7 = r0.<org.apache.lucene.codecs.lucene41.ForUtil: int[] encodedSizes>;

        $i5 = staticinvoke <org.apache.lucene.codecs.lucene41.ForUtil: int encodedSize(org.apache.lucene.util.packed.PackedInts$Format,int,int)>($r6, $i0, i4);

        $r7[i7] = $i5;

        $r8 = r0.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Encoder[] encoders>;

        $r9 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Encoder getEncoder(org.apache.lucene.util.packed.PackedInts$Format,int,int)>($r6, $i0, i4);

        $r8[i7] = $r9;

        $r10 = r0.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Decoder[] decoders>;

        $r11 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Decoder getDecoder(org.apache.lucene.util.packed.PackedInts$Format,int,int)>($r6, $i0, i4);

        $r10[i7] = $r11;

        $r14 = r0.<org.apache.lucene.codecs.lucene41.ForUtil: int[] iterations>;

        $r12 = r0.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Decoder[] decoders>;

        $r13 = $r12[i7];

        $i6 = staticinvoke <org.apache.lucene.codecs.lucene41.ForUtil: int computeIterations(org.apache.lucene.util.packed.PackedInts$Decoder)>($r13);

        $r14[i7] = $i6;

        i7 = i7 + 1;

        goto label1;

     label3:
        return;
    }

    void writeBlock(int[], byte[], org.apache.lucene.store.IndexOutput) throws java.io.IOException
    {
        byte[] r6;
        java.lang.AssertionError $r7, $r8, $r9;
        org.apache.lucene.codecs.lucene41.ForUtil r1;
        byte $b1;
        int[] r0, $r3, $r4;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.lucene.store.IndexOutput r5;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.util.packed.PackedInts$Encoder $r10;
        org.apache.lucene.util.packed.PackedInts$Encoder[] $r2;

        r1 := @this: org.apache.lucene.codecs.lucene41.ForUtil;

        r0 := @parameter0: int[];

        r6 := @parameter1: byte[];

        r5 := @parameter2: org.apache.lucene.store.IndexOutput;

        $z0 = staticinvoke <org.apache.lucene.codecs.lucene41.ForUtil: boolean isAllEqual(int[])>(r0);

        if $z0 == 0 goto label1;

        virtualinvoke r5.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>(0);

        $i8 = r0[0];

        virtualinvoke r5.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i8);

        return;

     label1:
        $i0 = staticinvoke <org.apache.lucene.codecs.lucene41.ForUtil: int bitsRequired(int[])>(r0);

        $z1 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if $i0 <= 0 goto label2;

        if $i0 <= 32 goto label3;

     label2:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(int)>($i0);

        throw $r9;

     label3:
        $r2 = r1.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Encoder[] encoders>;

        $r10 = $r2[$i0];

        $r3 = r1.<org.apache.lucene.codecs.lucene41.ForUtil: int[] iterations>;

        $i7 = $r3[$i0];

        $z2 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $i4 = interfaceinvoke $r10.<org.apache.lucene.util.packed.PackedInts$Encoder: int byteValueCount()>();

        $i5 = $i7 * $i4;

        if $i5 >= 128 goto label4;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label4:
        $r4 = r1.<org.apache.lucene.codecs.lucene41.ForUtil: int[] encodedSizes>;

        $i6 = $r4[$i0];

        $z3 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z3 != 0 goto label5;

        $i2 = interfaceinvoke $r10.<org.apache.lucene.util.packed.PackedInts$Encoder: int byteBlockCount()>();

        $i3 = $i7 * $i2;

        if $i3 >= $i6 goto label5;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label5:
        $b1 = (byte) $i0;

        virtualinvoke r5.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>($b1);

        interfaceinvoke $r10.<org.apache.lucene.util.packed.PackedInts$Encoder: void encode(int[],int,byte[],int,int)>(r0, 0, r6, 0, $i7);

        virtualinvoke r5.<org.apache.lucene.store.IndexOutput: void writeBytes(byte[],int)>(r6, $i6);

        return;
    }

    void readBlock(org.apache.lucene.store.IndexInput, byte[], int[]) throws java.io.IOException
    {
        byte[] r3;
        org.apache.lucene.util.packed.PackedInts$Decoder r5;
        java.lang.AssertionError $r10, $r11;
        org.apache.lucene.codecs.lucene41.ForUtil r1;
        byte $b0;
        int[] $r2, $r6, r7;
        int i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10;
        org.apache.lucene.util.packed.PackedInts$Decoder[] $r4;
        boolean $z0, $z1;
        org.apache.lucene.store.IndexInput r0;

        r1 := @this: org.apache.lucene.codecs.lucene41.ForUtil;

        r0 := @parameter0: org.apache.lucene.store.IndexInput;

        r3 := @parameter1: byte[];

        r7 := @parameter2: int[];

        $b0 = virtualinvoke r0.<org.apache.lucene.store.IndexInput: byte readByte()>();

        $z0 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = (int) $b0;

        if $i6 <= 32 goto label1;

        $r10 = new java.lang.AssertionError;

        $i7 = (int) $b0;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(int)>($i7);

        throw $r10;

     label1:
        if $b0 != 0 goto label2;

        $i4 = virtualinvoke r0.<org.apache.lucene.store.IndexInput: int readVInt()>();

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r7, 0, 128, $i4);

        return;

     label2:
        $r2 = r1.<org.apache.lucene.codecs.lucene41.ForUtil: int[] encodedSizes>;

        $i8 = (int) $b0;

        i5 = $r2[$i8];

        virtualinvoke r0.<org.apache.lucene.store.IndexInput: void readBytes(byte[],int,int)>(r3, 0, i5);

        $r4 = r1.<org.apache.lucene.codecs.lucene41.ForUtil: org.apache.lucene.util.packed.PackedInts$Decoder[] decoders>;

        $i9 = (int) $b0;

        r5 = $r4[$i9];

        $r6 = r1.<org.apache.lucene.codecs.lucene41.ForUtil: int[] iterations>;

        $i10 = (int) $b0;

        i1 = $r6[$i10];

        $z1 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $i2 = interfaceinvoke r5.<org.apache.lucene.util.packed.PackedInts$Decoder: int byteValueCount()>();

        $i3 = i1 * $i2;

        if $i3 >= 128 goto label3;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label3:
        interfaceinvoke r5.<org.apache.lucene.util.packed.PackedInts$Decoder: void decode(byte[],int,int[],int,int)>(r3, 0, r7, 0, i1);

        return;
    }

    void skipBlock(org.apache.lucene.store.IndexInput) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput r0;
        long $l1, $l2, $l3;
        java.lang.AssertionError $r4;
        org.apache.lucene.codecs.lucene41.ForUtil r1;
        byte $b0;
        int[] $r2;
        int $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        r1 := @this: org.apache.lucene.codecs.lucene41.ForUtil;

        r0 := @parameter0: org.apache.lucene.store.IndexInput;

        $b0 = virtualinvoke r0.<org.apache.lucene.store.IndexInput: byte readByte()>();

        if $b0 != 0 goto label1;

        virtualinvoke r0.<org.apache.lucene.store.IndexInput: int readVInt()>();

        return;

     label1:
        $z0 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $i5 = (int) $b0;

        if $i5 <= 0 goto label2;

        $i6 = (int) $b0;

        if $i6 <= 32 goto label3;

     label2:
        $r4 = new java.lang.AssertionError;

        $i7 = (int) $b0;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(int)>($i7);

        throw $r4;

     label3:
        $r2 = r1.<org.apache.lucene.codecs.lucene41.ForUtil: int[] encodedSizes>;

        $i8 = (int) $b0;

        $i4 = $r2[$i8];

        $l1 = virtualinvoke r0.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $l2 = (long) $i4;

        $l3 = $l1 + $l2;

        virtualinvoke r0.<org.apache.lucene.store.IndexInput: void seek(long)>($l3);

        return;
    }

    private static boolean isAllEqual(int[])
    {
        int[] r0;
        int i0, $i1, i2;

        r0 := @parameter0: int[];

        i0 = r0[0];

        i2 = 1;

     label1:
        if i2 >= 128 goto label3;

        $i1 = r0[i2];

        if $i1 == i0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static int bitsRequired(int[])
    {
        long $l2, l4;
        java.lang.AssertionError $r1;
        int[] r0;
        int $i0, $i1, $i3, i5;
        boolean $z0;

        r0 := @parameter0: int[];

        l4 = 0L;

        i5 = 0;

     label1:
        if i5 >= 128 goto label3;

        $z0 = <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i3 = r0[i5];

        if $i3 >= 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $i1 = r0[i5];

        $l2 = (long) $i1;

        l4 = l4 | $l2;

        i5 = i5 + 1;

        goto label1;

     label3:
        $i0 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(l4);

        return $i0;
    }

    static void <clinit>()
    {
        org.apache.lucene.util.packed.PackedInts$Format r2;
        org.apache.lucene.util.packed.PackedInts$Format[] $r1;
        org.apache.lucene.util.packed.PackedInts$Decoder $r3;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.Class $r0;
        boolean $z0, $z1, $z2;

        <org.apache.lucene.codecs.lucene41.ForUtil: int MAX_ENCODED_SIZE> = 512;

        <org.apache.lucene.codecs.lucene41.ForUtil: int ALL_VALUES_EQUAL> = 0;

        $r0 = class "Lorg/apache/lucene/codecs/lucene41/ForUtil;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        <org.apache.lucene.codecs.lucene41.ForUtil: boolean $assertionsDisabled> = $z2;

        i4 = 0;

        i5 = 0;

     label03:
        if i5 > 1 goto label10;

        $r1 = staticinvoke <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format[] values()>();

        i0 = lengthof $r1;

        i6 = 0;

     label04:
        if i6 >= i0 goto label09;

        r2 = $r1[i6];

        i7 = 1;

     label05:
        if i7 > 32 goto label08;

        $z1 = virtualinvoke r2.<org.apache.lucene.util.packed.PackedInts$Format: boolean isSupported(int)>(i7);

        if $z1 != 0 goto label06;

        goto label07;

     label06:
        $r3 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Decoder getDecoder(org.apache.lucene.util.packed.PackedInts$Format,int,int)>(r2, i5, i7);

        $i1 = staticinvoke <org.apache.lucene.codecs.lucene41.ForUtil: int computeIterations(org.apache.lucene.util.packed.PackedInts$Decoder)>($r3);

        $i2 = interfaceinvoke $r3.<org.apache.lucene.util.packed.PackedInts$Decoder: int byteValueCount()>();

        $i3 = $i1 * $i2;

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i4, $i3);

     label07:
        i7 = i7 + 1;

        goto label05;

     label08:
        i6 = i6 + 1;

        goto label04;

     label09:
        i5 = i5 + 1;

        goto label03;

     label10:
        <org.apache.lucene.codecs.lucene41.ForUtil: int MAX_DATA_SIZE> = i4;

        return;
    }
}
