class org.apache.tika.fork.ClassLoaderResource extends java.lang.Object implements org.apache.tika.fork.ForkResource
{
    private final java.lang.ClassLoader loader;

    public void <init>(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.apache.tika.fork.ClassLoaderResource r0;

        r0 := @this: org.apache.tika.fork.ClassLoaderResource;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.fork.ClassLoaderResource: java.lang.ClassLoader loader> = r1;

        return;
    }

    public java.lang.Throwable process(java.io.DataInputStream, java.io.DataOutputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        java.util.Enumeration $r5;
        java.net.URL $r7;
        byte $b0;
        java.io.DataOutputStream r2;
        org.apache.tika.fork.ClassLoaderResource r3;
        int $i1;
        java.lang.Object $r6;
        java.lang.String $r1;
        java.lang.ClassLoader $r4, $r9;
        boolean $z0;
        java.io.InputStream $r8, $r10;

        r3 := @this: org.apache.tika.fork.ClassLoaderResource;

        r0 := @parameter0: java.io.DataInputStream;

        r2 := @parameter1: java.io.DataOutputStream;

        $b0 = virtualinvoke r0.<java.io.DataInputStream: byte readByte()>();

        $r1 = virtualinvoke r0.<java.io.DataInputStream: java.lang.String readUTF()>();

        if $b0 != 1 goto label3;

        $r9 = r3.<org.apache.tika.fork.ClassLoaderResource: java.lang.ClassLoader loader>;

        $r10 = virtualinvoke $r9.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r1);

        if $r10 == null goto label1;

        virtualinvoke r2.<java.io.DataOutputStream: void writeBoolean(boolean)>(1);

        specialinvoke r3.<org.apache.tika.fork.ClassLoaderResource: void writeAndCloseStream(java.io.DataOutputStream,java.io.InputStream)>(r2, $r10);

        goto label2;

     label1:
        virtualinvoke r2.<java.io.DataOutputStream: void writeBoolean(boolean)>(0);

     label2:
        goto label6;

     label3:
        $i1 = (int) $b0;

        if $i1 != 2 goto label6;

        $r4 = r3.<org.apache.tika.fork.ClassLoaderResource: java.lang.ClassLoader loader>;

        $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>($r1);

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label5;

        virtualinvoke r2.<java.io.DataOutputStream: void writeBoolean(boolean)>(1);

        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r7 = (java.net.URL) $r6;

        $r8 = virtualinvoke $r7.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke r3.<org.apache.tika.fork.ClassLoaderResource: void writeAndCloseStream(java.io.DataOutputStream,java.io.InputStream)>(r2, $r8);

        goto label4;

     label5:
        virtualinvoke r2.<java.io.DataOutputStream: void writeBoolean(boolean)>(0);

     label6:
        virtualinvoke r2.<java.io.DataOutputStream: void flush()>();

        return null;
    }

    private void writeAndCloseStream(java.io.DataOutputStream, java.io.InputStream) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        byte[] r0;
        java.io.DataOutputStream r2;
        org.apache.tika.fork.ClassLoaderResource r4;
        int $i0, $i2, $i4;
        java.io.InputStream r1;

        r4 := @this: org.apache.tika.fork.ClassLoaderResource;

        r2 := @parameter0: java.io.DataOutputStream;

        r1 := @parameter1: java.io.InputStream;

     label1:
        $i2 = (int) 65535;

        r0 = newarray (byte)[$i2];

     label2:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        $i4 = (int) -1;

        if $i0 == $i4 goto label3;

        virtualinvoke r2.<java.io.DataOutputStream: void writeShort(int)>($i0);

        virtualinvoke r2.<java.io.DataOutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        goto label2;

     label3:
        virtualinvoke r2.<java.io.DataOutputStream: void writeShort(int)>(0);

     label4:
        virtualinvoke r1.<java.io.InputStream: void close()>();

        goto label7;

     label5:
        $r3 := @caughtexception;

     label6:
        virtualinvoke r1.<java.io.InputStream: void close()>();

        throw $r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
}
