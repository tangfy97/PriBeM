public abstract class kodkod.engine.bool.BooleanFormula extends kodkod.engine.bool.BooleanValue implements java.lang.Iterable
{
    private kodkod.engine.bool.BooleanFormula negation;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/bool/BooleanFormula;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.bool.BooleanFormula: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.BooleanFormula r0, r1;

        r0 := @this: kodkod.engine.bool.BooleanFormula;

        r1 := @parameter0: kodkod.engine.bool.BooleanFormula;

        specialinvoke r0.<kodkod.engine.bool.BooleanValue: void <init>()>();

        r0.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation> = r1;

        return;
    }

    abstract int hash(kodkod.engine.bool.Operator);

    int contains(kodkod.engine.bool.Operator, int, int)
    {
        byte $b3;
        kodkod.engine.bool.BooleanFormula r0;
        int i0, $i1, i2;
        kodkod.engine.bool.Operator r1;

        r0 := @this: kodkod.engine.bool.BooleanFormula;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $i1 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: int label()>();

        if i0 != $i1 goto label1;

        $b3 = 1;

        goto label2;

     label1:
        $b3 = -1;

     label2:
        return $b3;
    }

    void flatten(kodkod.engine.bool.Operator, java.util.Set, int)
    {
        kodkod.engine.bool.BooleanFormula r1;
        int i0;
        java.util.Set r0;
        java.lang.AssertionError $r2;
        kodkod.engine.bool.Operator r3;
        boolean $z0;

        r1 := @this: kodkod.engine.bool.BooleanFormula;

        r3 := @parameter0: kodkod.engine.bool.Operator;

        r0 := @parameter1: java.util.Set;

        i0 := @parameter2: int;

        $z0 = <kodkod.engine.bool.BooleanFormula: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    final kodkod.engine.bool.BooleanFormula negation()
    {
        kodkod.engine.bool.BooleanFormula r0, $r1, $r2;
        kodkod.engine.bool.NotGate $r3;

        r0 := @this: kodkod.engine.bool.BooleanFormula;

        $r1 = r0.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation>;

        if $r1 != null goto label1;

        $r3 = new kodkod.engine.bool.NotGate;

        specialinvoke $r3.<kodkod.engine.bool.NotGate: void <init>(kodkod.engine.bool.BooleanFormula)>(r0);

        r0.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation> = $r3;

     label1:
        $r2 = r0.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation>;

        return $r2;
    }

    final boolean hasNegation()
    {
        kodkod.engine.bool.BooleanFormula r0, $r1;

        r0 := @this: kodkod.engine.bool.BooleanFormula;

        $r1 = r0.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract java.lang.Object accept(kodkod.engine.bool.BooleanVisitor, java.lang.Object);

    public abstract java.util.Iterator iterator();

    public abstract int size();

    public abstract kodkod.engine.bool.BooleanFormula input(int);

    volatile kodkod.engine.bool.BooleanValue negation()
    {
        kodkod.engine.bool.BooleanFormula r0, $r1;

        r0 := @this: kodkod.engine.bool.BooleanFormula;

        $r1 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.BooleanFormula negation()>();

        return $r1;
    }
}
