public class org.eclipse.jetty.websocket.WebSocketClient extends java.lang.Object
{
    private static final org.eclipse.jetty.util.log.Logger __log;
    private final org.eclipse.jetty.websocket.WebSocketClientFactory _factory;
    private final java.util.Map _cookies;
    private final java.util.List _extensions;
    private java.lang.String _origin;
    private java.lang.String _protocol;
    private int _maxIdleTime;
    private int _maxTextMessageSize;
    private int _maxBinaryMessageSize;
    private org.eclipse.jetty.websocket.MaskGen _maskGen;
    private java.net.SocketAddress _bindAddress;

    public void <init>() throws java.lang.Exception
    {
        org.eclipse.jetty.websocket.MaskGen $r6;
        java.util.concurrent.ConcurrentHashMap $r7;
        org.eclipse.jetty.websocket.WebSocketClientFactory $r4, $r5, $r9;
        org.eclipse.jetty.websocket.WebSocketClient r0;
        int $i1, $i3;
        java.util.concurrent.CopyOnWriteArrayList $r8;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.eclipse.jetty.websocket.WebSocketClient: java.util.Map _cookies> = $r7;

        $r8 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r8.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.eclipse.jetty.websocket.WebSocketClient: java.util.List _extensions> = $r8;

        $i1 = (int) -1;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxIdleTime> = $i1;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxTextMessageSize> = 16384;

        $i3 = (int) -1;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxBinaryMessageSize> = $i3;

        $r9 = new org.eclipse.jetty.websocket.WebSocketClientFactory;

        specialinvoke $r9.<org.eclipse.jetty.websocket.WebSocketClientFactory: void <init>()>();

        r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.WebSocketClientFactory _factory> = $r9;

        $r4 = r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.WebSocketClientFactory _factory>;

        virtualinvoke $r4.<org.eclipse.jetty.websocket.WebSocketClientFactory: void start()>();

        $r5 = r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.WebSocketClientFactory _factory>;

        $r6 = virtualinvoke $r5.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.MaskGen getMaskGen()>();

        r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.MaskGen _maskGen> = $r6;

        return;
    }

    public void <init>(org.eclipse.jetty.websocket.WebSocketClientFactory)
    {
        org.eclipse.jetty.websocket.MaskGen $r5;
        java.util.concurrent.ConcurrentHashMap $r6;
        org.eclipse.jetty.websocket.WebSocketClientFactory r3, $r4;
        org.eclipse.jetty.websocket.WebSocketClient r0;
        int $i1, $i3;
        java.util.concurrent.CopyOnWriteArrayList $r7;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        r3 := @parameter0: org.eclipse.jetty.websocket.WebSocketClientFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.eclipse.jetty.websocket.WebSocketClient: java.util.Map _cookies> = $r6;

        $r7 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.eclipse.jetty.websocket.WebSocketClient: java.util.List _extensions> = $r7;

        $i1 = (int) -1;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxIdleTime> = $i1;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxTextMessageSize> = 16384;

        $i3 = (int) -1;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxBinaryMessageSize> = $i3;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.WebSocketClientFactory _factory> = r3;

        $r4 = r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.WebSocketClientFactory _factory>;

        $r5 = virtualinvoke $r4.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.websocket.MaskGen getMaskGen()>();

        r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.MaskGen _maskGen> = $r5;

        return;
    }

    public org.eclipse.jetty.websocket.WebSocketClientFactory getFactory()
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        org.eclipse.jetty.websocket.WebSocketClientFactory $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.WebSocketClientFactory _factory>;

        return $r1;
    }

    public java.net.SocketAddress getBindAddress()
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        java.net.SocketAddress $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClient: java.net.SocketAddress _bindAddress>;

        return $r1;
    }

    public void setBindAddress(java.net.SocketAddress)
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        java.net.SocketAddress r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        r1 := @parameter0: java.net.SocketAddress;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: java.net.SocketAddress _bindAddress> = r1;

        return;
    }

    public int getMaxIdleTime()
    {
        int $i0;
        org.eclipse.jetty.websocket.WebSocketClient r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        $i0 = r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxIdleTime>;

        return $i0;
    }

    public void setMaxIdleTime(int)
    {
        int i0;
        org.eclipse.jetty.websocket.WebSocketClient r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxIdleTime> = i0;

        return;
    }

    public java.lang.String getProtocol()
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClient: java.lang.String _protocol>;

        return $r1;
    }

    public void setProtocol(java.lang.String)
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: java.lang.String _protocol> = r1;

        return;
    }

    public java.lang.String getOrigin()
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClient: java.lang.String _origin>;

        return $r1;
    }

    public void setOrigin(java.lang.String)
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: java.lang.String _origin> = r1;

        return;
    }

    public java.util.Map getCookies()
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        java.util.Map $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClient: java.util.Map _cookies>;

        return $r1;
    }

    public java.util.List getExtensions()
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        java.util.List $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClient: java.util.List _extensions>;

        return $r1;
    }

    public org.eclipse.jetty.websocket.MaskGen getMaskGen()
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        org.eclipse.jetty.websocket.MaskGen $r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.MaskGen _maskGen>;

        return $r1;
    }

    public void setMaskGen(org.eclipse.jetty.websocket.MaskGen)
    {
        org.eclipse.jetty.websocket.WebSocketClient r0;
        org.eclipse.jetty.websocket.MaskGen r1;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        r1 := @parameter0: org.eclipse.jetty.websocket.MaskGen;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.MaskGen _maskGen> = r1;

        return;
    }

    public int getMaxTextMessageSize()
    {
        int $i0;
        org.eclipse.jetty.websocket.WebSocketClient r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        $i0 = r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxTextMessageSize>;

        return $i0;
    }

    public void setMaxTextMessageSize(int)
    {
        int i0;
        org.eclipse.jetty.websocket.WebSocketClient r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxTextMessageSize> = i0;

        return;
    }

    public int getMaxBinaryMessageSize()
    {
        int $i0;
        org.eclipse.jetty.websocket.WebSocketClient r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        $i0 = r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxBinaryMessageSize>;

        return $i0;
    }

    public void setMaxBinaryMessageSize(int)
    {
        int i0;
        org.eclipse.jetty.websocket.WebSocketClient r0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.websocket.WebSocketClient: int _maxBinaryMessageSize> = i0;

        return;
    }

    public org.eclipse.jetty.websocket.WebSocket$Connection open(java.net.URI, org.eclipse.jetty.websocket.WebSocket, long, java.util.concurrent.TimeUnit) throws java.io.IOException, java.lang.InterruptedException, java.util.concurrent.TimeoutException
    {
        java.lang.Throwable $r8;
        java.lang.Error $r11;
        long l0;
        org.eclipse.jetty.websocket.WebSocketClient r0;
        java.util.concurrent.Future $r3;
        java.net.URI r1;
        boolean $z0, $z1, $z2;
        org.eclipse.jetty.websocket.WebSocket$Connection $r6;
        java.io.IOException $r12;
        java.lang.RuntimeException $r9, $r10;
        java.util.concurrent.TimeUnit r4;
        java.util.concurrent.ExecutionException $r7;
        java.lang.Object $r5;
        org.eclipse.jetty.websocket.WebSocket r2;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: org.eclipse.jetty.websocket.WebSocket;

        l0 := @parameter2: long;

        r4 := @parameter3: java.util.concurrent.TimeUnit;

     label1:
        $r3 = virtualinvoke r0.<org.eclipse.jetty.websocket.WebSocketClient: java.util.concurrent.Future open(java.net.URI,org.eclipse.jetty.websocket.WebSocket)>(r1, r2);

        $r5 = interfaceinvoke $r3.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l0, r4);

        $r6 = (org.eclipse.jetty.websocket.WebSocket$Connection) $r5;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $z0 = $r8 instanceof java.io.IOException;

        if $z0 == 0 goto label4;

        $r12 = (java.io.IOException) $r8;

        throw $r12;

     label4:
        $z1 = $r8 instanceof java.lang.Error;

        if $z1 == 0 goto label5;

        $r11 = (java.lang.Error) $r8;

        throw $r11;

     label5:
        $z2 = $r8 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label6;

        $r10 = (java.lang.RuntimeException) $r8;

        throw $r10;

     label6:
        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public java.util.concurrent.Future open(java.net.URI, org.eclipse.jetty.websocket.WebSocket) throws java.io.IOException
    {
        java.lang.IllegalStateException $r13;
        java.net.Socket $r6, $r11;
        java.net.SocketAddress $r5, $r12;
        org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture $r7;
        org.eclipse.jetty.websocket.WebSocketClientFactory $r1, $r9;
        java.net.InetSocketAddress $r3;
        org.eclipse.jetty.websocket.WebSocketClient r0;
        org.eclipse.jetty.io.nio.SelectorManager $r10;
        java.nio.channels.SocketChannel $r4;
        java.net.URI r2;
        org.eclipse.jetty.websocket.WebSocket r8;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.websocket.WebSocketClient;

        r2 := @parameter0: java.net.URI;

        r8 := @parameter1: org.eclipse.jetty.websocket.WebSocket;

        $r1 = r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.WebSocketClientFactory _factory>;

        $z0 = virtualinvoke $r1.<org.eclipse.jetty.websocket.WebSocketClientFactory: boolean isStarted()>();

        if $z0 != 0 goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Factory !started");

        throw $r13;

     label1:
        $r3 = staticinvoke <org.eclipse.jetty.websocket.WebSocketClient: java.net.InetSocketAddress toSocketAddress(java.net.URI)>(r2);

        $r4 = staticinvoke <java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>();

        $r5 = r0.<org.eclipse.jetty.websocket.WebSocketClient: java.net.SocketAddress _bindAddress>;

        if $r5 == null goto label2;

        $r11 = virtualinvoke $r4.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        $r12 = r0.<org.eclipse.jetty.websocket.WebSocketClient: java.net.SocketAddress _bindAddress>;

        virtualinvoke $r11.<java.net.Socket: void bind(java.net.SocketAddress)>($r12);

     label2:
        $r6 = virtualinvoke $r4.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        virtualinvoke $r6.<java.net.Socket: void setTcpNoDelay(boolean)>(1);

        $r7 = new org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture;

        specialinvoke $r7.<org.eclipse.jetty.websocket.WebSocketClient$WebSocketFuture: void <init>(org.eclipse.jetty.websocket.WebSocket,java.net.URI,org.eclipse.jetty.websocket.WebSocketClient,java.nio.channels.ByteChannel,org.eclipse.jetty.websocket.WebSocketClient$1)>(r8, r2, r0, $r4, null);

        virtualinvoke $r4.<java.nio.channels.SocketChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>(0);

        virtualinvoke $r4.<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>($r3);

        $r9 = r0.<org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.websocket.WebSocketClientFactory _factory>;

        $r10 = virtualinvoke $r9.<org.eclipse.jetty.websocket.WebSocketClientFactory: org.eclipse.jetty.io.nio.SelectorManager getSelectorManager()>();

        virtualinvoke $r10.<org.eclipse.jetty.io.nio.SelectorManager: void register(java.nio.channels.SocketChannel,java.lang.Object)>($r4, $r7);

        return $r7;
    }

    public static java.net.InetSocketAddress toSocketAddress(java.net.URI)
    {
        short $s2;
        int $i0, i1;
        java.net.URI r0;
        java.lang.String $r1, $r2, $r3, $r8, $r9, $r14, $r16;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r4, $r10;
        java.net.InetSocketAddress $r15;
        java.lang.StringBuilder $r5, $r6, $r7, $r11, $r12, $r13;

        r0 := @parameter0: java.net.URI;

        $r1 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $r2 = "ws";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r9 = "wss";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z2 != 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad WebSocket scheme: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        $i0 = virtualinvoke r0.<java.net.URI: int getPort()>();

        i1 = $i0;

        if $i0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad WebSocket port: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        if $i0 >= 0 goto label5;

        $r3 = "ws";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label3;

        $s2 = 80;

        goto label4;

     label3:
        $s2 = 443;

     label4:
        i1 = $s2;

     label5:
        $r15 = new java.net.InetSocketAddress;

        $r16 = virtualinvoke r0.<java.net.URI: java.lang.String getHost()>();

        specialinvoke $r15.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r16, i1);

        return $r15;
    }

    static org.eclipse.jetty.util.log.Logger access$100()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = <org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.util.log.Logger __log>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        org.eclipse.jetty.util.log.Logger $r2;

        $r0 = class "Lorg/eclipse/jetty/websocket/WebSocketClient;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.String)>($r1);

        <org.eclipse.jetty.websocket.WebSocketClient: org.eclipse.jetty.util.log.Logger __log> = $r2;

        return;
    }
}
