class org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator extends org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator
{
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r1);

        return;
    }

    org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, boolean, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r17;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator r7;
        int[] $r1, $r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.StringBuilder $r30, $r31, $r44;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r18, $r24;
        java.lang.AssertionError $r35, $r36, $r37, $r39, $r40, $r41, $r42;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator $r15, $r16, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i14;
        java.lang.String $r32;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1 $r46;
        java.lang.RuntimeException $r38, $r43, $r45;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4, $r8, $r11, $r14, $r19, $r20, $r22, $r25, $r33;

        r7 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        z0 := @parameter1: boolean;

        r0 := @parameter2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage;

        $r1 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$1: int[] $SwitchMap$org$waveprotocol$wave$model$testing$RandomDocOpGenerator$Generator$Stage>;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label09;
            case 3: goto label09;
            case 4: goto label10;
            default: goto label18;
        };

     label01:
        $i5 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int maxRetainItemCount()>();

        if $i5 != 0 goto label02;

        return null;

     label02:
        $r14 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkRetain(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(1, null);

        $z7 = virtualinvoke $r14.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z7 == 0 goto label03;

        return null;

     label03:
        if z0 == 0 goto label08;

        $r22 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkRetain(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(1, null);

        $z9 = virtualinvoke $r22.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z9 != 0 goto label04;

        return null;

     label04:
        $r23 = r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r24 = $r23.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $i10 = $i5 + 1;

        i11 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: int access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r24, 1, $i10);

     label05:
        $r33 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkRetain(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(i11, null);

        $z13 = virtualinvoke $r33.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z13 != 0 goto label06;

        $i14 = (int) -1;

        i11 = i11 + $i14;

        $z12 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: boolean $assertionsDisabled>;

        if $z12 != 0 goto label05;

        if i11 > 0 goto label05;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>()>();

        throw $r35;

     label06:
        i12 = i11;

        $z10 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: boolean $assertionsDisabled>;

        if $z10 != 0 goto label07;

        $r25 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkRetain(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(i11, null);

        $z11 = virtualinvoke $r25.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z11 != 0 goto label07;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label07:
        goto label19;

     label08:
        $r15 = r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r18 = $r15.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $i6 = $i5 + 1;

        $r16 = r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0>;

        $r17 = $r16.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i7 = virtualinvoke $r17.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxSkipAfterEnd()>();

        $i8 = $i5 + $i7;

        $i9 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: int access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r18, $i6, $i8);

        i12 = $i9;

        $z8 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: boolean $assertionsDisabled>;

        if $z8 != 0 goto label19;

        $r19 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkRetain(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($i9, null);

        $r20 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult INVALID_DOCUMENT>;

        if $r19 == $r20 goto label19;

        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label09:
        return null;

     label10:
        if z0 != 0 goto label11;

        $r38 = new java.lang.RuntimeException;

        specialinvoke $r38.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented");

        throw $r38;

     label11:
        $r3 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$1: int[] $SwitchMap$org$waveprotocol$wave$model$document$operation$automaton$DocOpAutomaton$ValidationResult>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkRetain(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(1, null);

        $i2 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: int ordinal()>();

        $i3 = $r3[$i2];

        tableswitch($i3)
        {
            case 1: goto label12;
            case 2: goto label14;
            case 3: goto label16;
            case 4: goto label16;
            default: goto label17;
        };

     label12:
        $z5 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: boolean $assertionsDisabled>;

        if $z5 != 0 goto label13;

        $r11 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkFinish(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(null);

        $z6 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z6 != 0 goto label13;

        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>()>();

        throw $r39;

     label13:
        return null;

     label14:
        $i4 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int maxRetainItemCount()>();

        i12 = $i4;

        $z2 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: boolean $assertionsDisabled>;

        if $z2 != 0 goto label15;

        if $i4 > 0 goto label15;

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>()>();

        throw $r40;

     label15:
        $z3 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: boolean $assertionsDisabled>;

        if $z3 != 0 goto label19;

        $r8 = virtualinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkFinish(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(null);

        $z4 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z4 == 0 goto label19;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();

        throw $r41;

     label16:
        $z1 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: boolean $assertionsDisabled>;

        if $z1 != 0 goto label17;

        $r42 = new java.lang.AssertionError;

        specialinvoke $r42.<java.lang.AssertionError: void <init>()>();

        throw $r42;

     label17:
        $r43 = new java.lang.RuntimeException;

        specialinvoke $r43.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unexpected validation result");

        throw $r43;

     label18:
        $r45 = new java.lang.RuntimeException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected stage: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.RuntimeException: void <init>(java.lang.String)>($r32);

        throw $r45;

     label19:
        $r46 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1;

        specialinvoke $r46.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator$1: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator,int)>(r7, i12);

        return $r46;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/testing/RandomDocOpGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
