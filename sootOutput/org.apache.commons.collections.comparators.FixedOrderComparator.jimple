public class org.apache.commons.collections.comparators.FixedOrderComparator extends java.lang.Object implements java.util.Comparator
{
    public static final int UNKNOWN_BEFORE;
    public static final int UNKNOWN_AFTER;
    public static final int UNKNOWN_THROW_EXCEPTION;
    private final java.util.Map map;
    private int counter;
    private boolean isLocked;
    private int unknownObjectBehavior;

    public void <init>()
    {
        org.apache.commons.collections.comparators.FixedOrderComparator r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.commons.collections.comparators.FixedOrderComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: java.util.Map map> = $r1;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int counter> = 0;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: boolean isLocked> = 0;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int unknownObjectBehavior> = 2;

        return;
    }

    public void <init>(java.lang.Object[])
    {
        org.apache.commons.collections.comparators.FixedOrderComparator r0;
        java.lang.Object[] r2;
        int $i0, i1;
        java.util.HashMap $r1;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.collections.comparators.FixedOrderComparator;

        r2 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: java.util.Map map> = $r1;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int counter> = 0;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: boolean isLocked> = 0;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int unknownObjectBehavior> = 2;

        if r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The list of items must not be null");

        throw $r4;

     label1:
        i1 = 0;

     label2:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label3;

        $r3 = r2[i1];

        virtualinvoke r0.<org.apache.commons.collections.comparators.FixedOrderComparator: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public void <init>(java.util.List)
    {
        org.apache.commons.collections.comparators.FixedOrderComparator r0;
        java.util.List r2;
        java.util.Iterator $r3;
        java.util.HashMap $r1;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.comparators.FixedOrderComparator;

        r2 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: java.util.Map map> = $r1;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int counter> = 0;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: boolean isLocked> = 0;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int unknownObjectBehavior> = 2;

        if r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The list of items must not be null");

        throw $r5;

     label1:
        $r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<org.apache.commons.collections.comparators.FixedOrderComparator: boolean add(java.lang.Object)>($r4);

        goto label2;

     label3:
        return;
    }

    public boolean isLocked()
    {
        org.apache.commons.collections.comparators.FixedOrderComparator r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.comparators.FixedOrderComparator;

        $z0 = r0.<org.apache.commons.collections.comparators.FixedOrderComparator: boolean isLocked>;

        return $z0;
    }

    protected void checkLocked()
    {
        org.apache.commons.collections.comparators.FixedOrderComparator r0;
        java.lang.UnsupportedOperationException $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.comparators.FixedOrderComparator;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.comparators.FixedOrderComparator: boolean isLocked()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot modify a FixedOrderComparator after a comparison");

        throw $r1;

     label1:
        return;
    }

    public int getUnknownObjectBehavior()
    {
        int $i0;
        org.apache.commons.collections.comparators.FixedOrderComparator r0;

        r0 := @this: org.apache.commons.collections.comparators.FixedOrderComparator;

        $i0 = r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int unknownObjectBehavior>;

        return $i0;
    }

    public void setUnknownObjectBehavior(int)
    {
        int i0;
        org.apache.commons.collections.comparators.FixedOrderComparator r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.commons.collections.comparators.FixedOrderComparator;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.collections.comparators.FixedOrderComparator: void checkLocked()>();

        if i0 == 1 goto label1;

        if i0 == 0 goto label1;

        if i0 == 2 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognised value for unknown behaviour flag");

        throw $r1;

     label1:
        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int unknownObjectBehavior> = i0;

        return;
    }

    public boolean add(java.lang.Object)
    {
        org.apache.commons.collections.comparators.FixedOrderComparator r0;
        java.lang.Integer $r2;
        java.util.Map $r3;
        int $i0, $i1;
        java.lang.Object r1, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.comparators.FixedOrderComparator;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.collections.comparators.FixedOrderComparator: void checkLocked()>();

        $r3 = r0.<org.apache.commons.collections.comparators.FixedOrderComparator: java.util.Map map>;

        $r2 = new java.lang.Integer;

        $i0 = r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int counter>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int counter> = $i1;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i0);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $r4 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean addAsEqual(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.comparators.FixedOrderComparator r0;
        java.lang.IllegalArgumentException $r8;
        java.lang.Integer r4;
        java.lang.StringBuffer $r9, $r10, $r11, $r12;
        java.util.Map $r2, $r6;
        java.lang.Object r1, $r3, r5, $r7;
        java.lang.String $r13;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.comparators.FixedOrderComparator;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.collections.comparators.FixedOrderComparator: void checkLocked()>();

        $r2 = r0.<org.apache.commons.collections.comparators.FixedOrderComparator: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not known to ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $r6 = r0.<org.apache.commons.collections.comparators.FixedOrderComparator: java.util.Map map>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4);

        if $r7 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.comparators.FixedOrderComparator r0;
        java.lang.Integer r4, r8;
        byte $b3, $b4;
        java.lang.StringBuffer $r11, $r12, $r16, $r17, $r20, $r22;
        java.util.Map $r2, $r6;
        int $i0, $i1, $i2, $i6;
        java.lang.String $r13, $r18;
        java.lang.UnsupportedOperationException $r23;
        java.lang.IllegalArgumentException $r21;
        java.lang.Object r1, $r3, r5, $r7, $r19;

        r0 := @this: org.apache.commons.collections.comparators.FixedOrderComparator;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        r0.<org.apache.commons.collections.comparators.FixedOrderComparator: boolean isLocked> = 1;

        $r2 = r0.<org.apache.commons.collections.comparators.FixedOrderComparator: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r3;

        $r6 = r0.<org.apache.commons.collections.comparators.FixedOrderComparator: java.util.Map map>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r8 = (java.lang.Integer) $r7;

        if r4 == null goto label01;

        if r8 != null goto label14;

     label01:
        $i0 = r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int unknownObjectBehavior>;

        tableswitch($i0)
        {
            case 0: goto label02;
            case 1: goto label06;
            case 2: goto label10;
            default: goto label13;
        };

     label02:
        if r4 != null goto label05;

        if r8 != null goto label03;

        $b3 = 0;

        goto label04;

     label03:
        $b3 = -1;

     label04:
        return $b3;

     label05:
        return 1;

     label06:
        if r4 != null goto label09;

        if r8 != null goto label07;

        $b4 = 0;

        goto label08;

     label07:
        $b4 = 1;

     label08:
        return $b4;

     label09:
        $i6 = (int) -1;

        return $i6;

     label10:
        if r4 != null goto label11;

        $r19 = r1;

        goto label12;

     label11:
        $r19 = r5;

     label12:
        $r21 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attempting to compare unknown object ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r21;

     label13:
        $r23 = new java.lang.UnsupportedOperationException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown unknownObjectBehavior: ");

        $i1 = r0.<org.apache.commons.collections.comparators.FixedOrderComparator: int unknownObjectBehavior>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r18);

        throw $r23;

     label14:
        $i2 = virtualinvoke r4.<java.lang.Integer: int compareTo(java.lang.Integer)>(r8);

        return $i2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.comparators.FixedOrderComparator: int UNKNOWN_THROW_EXCEPTION> = 2;

        <org.apache.commons.collections.comparators.FixedOrderComparator: int UNKNOWN_AFTER> = 1;

        <org.apache.commons.collections.comparators.FixedOrderComparator: int UNKNOWN_BEFORE> = 0;

        return;
    }
}
