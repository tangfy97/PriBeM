public class org.sat4j.tools.xplain.QuickXplainStrategy extends java.lang.Object implements org.sat4j.tools.xplain.MinimizationStrategy
{
    private static final long serialVersionUID;
    private boolean computationCanceled;

    public void <init>()
    {
        org.sat4j.tools.xplain.QuickXplainStrategy r0;

        r0 := @this: org.sat4j.tools.xplain.QuickXplainStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void cancelExplanationComputation()
    {
        org.sat4j.tools.xplain.QuickXplainStrategy r0;

        r0 := @this: org.sat4j.tools.xplain.QuickXplainStrategy;

        r0.<org.sat4j.tools.xplain.QuickXplainStrategy: boolean computationCanceled> = 1;

        return;
    }

    public org.sat4j.specs.IVecInt explain(org.sat4j.specs.ISolver, java.util.Map, org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        java.lang.Integer $r21, r24;
        java.util.Map r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r7;
        java.lang.StringBuilder $r12, $r15, $r16;
        org.sat4j.specs.IteratorInt $r10, $r18;
        org.sat4j.specs.ISolver r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, i17, i18;
        java.lang.String $r14, $r17;
        java.io.PrintStream $r13, $r19, $r20, $r23;
        org.sat4j.tools.xplain.QuickXplainStrategy r0;
        java.util.Iterator $r9;
        org.sat4j.specs.IVecInt r3, $r5;
        org.sat4j.core.VecInt $r1, $r6, $r8;
        java.lang.Object $r11, $r22;

        r0 := @this: org.sat4j.tools.xplain.QuickXplainStrategy;

        r4 := @parameter0: org.sat4j.specs.ISolver;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: org.sat4j.specs.IVecInt;

        r0.<org.sat4j.tools.xplain.QuickXplainStrategy: boolean computationCanceled> = 0;

        $r1 = new org.sat4j.core.VecInt;

        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        $i1 = interfaceinvoke r3.<org.sat4j.specs.IVecInt: int size()>();

        $i2 = $i0 + $i1;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>(int)>($i2);

        interfaceinvoke r3.<org.sat4j.specs.IVecInt: void copyTo(org.sat4j.specs.IVecInt)>($r1);

        $r5 = interfaceinvoke r4.<org.sat4j.specs.ISolver: org.sat4j.specs.IVecInt unsatExplanation()>();

        $r6 = new org.sat4j.core.VecInt;

        $i3 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int size()>();

        specialinvoke $r6.<org.sat4j.core.VecInt: void <init>(int)>($i3);

        $i4 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int size()>();

        if $i4 != 1 goto label01;

        $i13 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int get(int)>(0);

        $i14 = neg $i13;

        interfaceinvoke $r6.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i14);

        return $r6;

     label01:
        $z0 = interfaceinvoke r4.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z0 == 0 goto label04;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = interfaceinvoke r4.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initial unsat core ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void print(java.lang.String)>($r17);

        interfaceinvoke $r5.<org.sat4j.specs.IVecInt: void sort()>();

        $r18 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: org.sat4j.specs.IteratorInt iterator()>();

     label02:
        $z4 = interfaceinvoke $r18.<org.sat4j.specs.IteratorInt: boolean hasNext()>();

        if $z4 == 0 goto label03;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $i11 = interfaceinvoke $r18.<org.sat4j.specs.IteratorInt: int next()>();

        $i12 = neg $i11;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r22 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        virtualinvoke $r20.<java.io.PrintStream: void print(java.lang.Object)>($r22);

        $r23 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r23.<java.io.PrintStream: void print(java.lang.String)>(" ");

        goto label02;

     label03:
        $r19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r19.<java.io.PrintStream: void println()>();

     label04:
        i15 = 0;

     label05:
        $i16 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int size()>();

        if i15 >= $i16 goto label07;

        $i10 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int get(int)>(i15);

        $z3 = interfaceinvoke r3.<org.sat4j.specs.IVecInt: boolean contains(int)>($i10);

        if $z3 == 0 goto label06;

        interfaceinvoke $r5.<org.sat4j.specs.IVecInt: int delete(int)>(i15);

        goto label05;

     label06:
        i15 = i15 + 1;

        goto label05;

     label07:
        $r7 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        $r8 = new org.sat4j.core.VecInt;

        $i5 = interfaceinvoke $r7.<java.util.Set: int size()>();

        specialinvoke $r8.<org.sat4j.core.VecInt: void <init>(int)>($i5);

        $r9 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.Integer) $r11;

        $i9 = virtualinvoke r24.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r8.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i9);

        goto label08;

     label09:
        $r10 = interfaceinvoke $r5.<org.sat4j.specs.IVecInt: org.sat4j.specs.IteratorInt iterator()>();

     label10:
        $z2 = interfaceinvoke $r10.<org.sat4j.specs.IteratorInt: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $i8 = interfaceinvoke $r10.<org.sat4j.specs.IteratorInt: int next()>();

        i17 = $i8;

        if $i8 >= 0 goto label11;

        i17 = neg $i8;

     label11:
        interfaceinvoke $r8.<org.sat4j.specs.IVecInt: void remove(int)>(i17);

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>(i17);

        goto label10;

     label12:
        $i6 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int size()>();

        i18 = $i6 - 1;

        interfaceinvoke $r8.<org.sat4j.specs.IVecInt: void copyTo(org.sat4j.specs.IVecInt)>($r1);

        $i7 = interfaceinvoke r3.<org.sat4j.specs.IVecInt: int size()>();

        specialinvoke r0.<org.sat4j.tools.xplain.QuickXplainStrategy: void computeExplanation(org.sat4j.specs.ISolver,java.util.Map,org.sat4j.specs.IVecInt,int,int,org.sat4j.specs.IVecInt)>(r4, r2, $r1, $i7, i18, $r6);

        return $r6;
    }

    private void computeExplanation(org.sat4j.specs.ISolver, java.util.Map, org.sat4j.specs.IVecInt, int, int, org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        java.lang.Integer $r10;
        java.util.Map r4;
        boolean $z0, $z1, $z2, $z3;
        org.sat4j.specs.TimeoutException $r3;
        java.lang.StringBuilder $r6, $r9, $r12, $r13, $r15, $r18, $r19, $r20, $r21, $r22;
        org.sat4j.specs.ISolver r0;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        java.lang.String $r8, $r14, $r17, $r23;
        java.io.PrintStream $r7, $r16;
        org.sat4j.tools.xplain.QuickXplainStrategy r2;
        org.sat4j.specs.IVecInt r1, r5;
        java.lang.Object $r11;

        r2 := @this: org.sat4j.tools.xplain.QuickXplainStrategy;

        r0 := @parameter0: org.sat4j.specs.ISolver;

        r4 := @parameter1: java.util.Map;

        r1 := @parameter2: org.sat4j.specs.IVecInt;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r5 := @parameter5: org.sat4j.specs.IVecInt;

        $z0 = interfaceinvoke r0.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z0 == 0 goto label01;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = interfaceinvoke r0.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("qxplain ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r23);

     label01:
        $z1 = interfaceinvoke r0.<org.sat4j.specs.ISolver: boolean isSatisfiable(org.sat4j.specs.IVecInt)>(r1);

        if $z1 != 0 goto label02;

        return;

     label02:
        if i0 != i1 goto label04;

        $i9 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i0);

        interfaceinvoke r5.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i9);

        $i10 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i0);

        $i11 = neg $i10;

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void set(int,int)>(i0, $i11);

        $z3 = interfaceinvoke r0.<org.sat4j.specs.ISolver: boolean isVerbose()>();

        if $z3 == 0 goto label03;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = interfaceinvoke r0.<org.sat4j.specs.ISolver: java.lang.String getLogPrefix()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $i12 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i0);

        $i13 = neg $i12;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        $r11 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is mandatory ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label03:
        return;

     label04:
        $i2 = i1 + i0;

        i3 = $i2 / 2;

        if i3 >= i1 goto label07;

        i14 = i0;

     label05:
        if i14 > i3 goto label06;

        $i7 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i14);

        $i8 = neg $i7;

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void set(int,int)>(i14, $i8);

        i14 = i14 + 1;

        goto label05;

     label06:
        $i6 = i3 + 1;

        specialinvoke r2.<org.sat4j.tools.xplain.QuickXplainStrategy: void computeExplanation(org.sat4j.specs.ISolver,java.util.Map,org.sat4j.specs.IVecInt,int,int,org.sat4j.specs.IVecInt)>(r0, r4, r1, $i6, i1, r5);

     label07:
        if i0 > i3 goto label10;

        i15 = i0;

     label08:
        if i15 > i3 goto label09;

        $i4 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i15);

        $i5 = neg $i4;

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: void set(int,int)>(i15, $i5);

        i15 = i15 + 1;

        goto label08;

     label09:
        specialinvoke r2.<org.sat4j.tools.xplain.QuickXplainStrategy: void computeExplanation(org.sat4j.specs.ISolver,java.util.Map,org.sat4j.specs.IVecInt,int,int,org.sat4j.specs.IVecInt)>(r0, r4, r1, i0, i3, r5);

     label10:
        $z2 = r2.<org.sat4j.tools.xplain.QuickXplainStrategy: boolean computationCanceled>;

        if $z2 == 0 goto label11;

        $r3 = new org.sat4j.specs.TimeoutException;

        specialinvoke $r3.<org.sat4j.specs.TimeoutException: void <init>()>();

        throw $r3;

     label11:
        return;
    }

    public java.lang.String toString()
    {
        org.sat4j.tools.xplain.QuickXplainStrategy r0;

        r0 := @this: org.sat4j.tools.xplain.QuickXplainStrategy;

        return "QuickXplain (AAAI 2004 version) minimization strategy";
    }

    public static void <clinit>()
    {
        <org.sat4j.tools.xplain.QuickXplainStrategy: long serialVersionUID> = 1L;

        return;
    }
}
