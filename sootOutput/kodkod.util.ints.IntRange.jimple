public abstract class kodkod.util.ints.IntRange extends java.lang.Object
{

    private void <init>()
    {
        kodkod.util.ints.IntRange r0;

        r0 := @this: kodkod.util.ints.IntRange;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract int min();

    public abstract int max();

    public int size()
    {
        int $i0, $i1, $i2, $i3;
        kodkod.util.ints.IntRange r0;

        r0 := @this: kodkod.util.ints.IntRange;

        $i0 = virtualinvoke r0.<kodkod.util.ints.IntRange: int max()>();

        $i1 = virtualinvoke r0.<kodkod.util.ints.IntRange: int min()>();

        $i2 = $i0 - $i1;

        $i3 = $i2 + 1;

        return $i3;
    }

    public boolean contains(int)
    {
        int i0, $i1, $i2;
        kodkod.util.ints.IntRange r0;

        r0 := @this: kodkod.util.ints.IntRange;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<kodkod.util.ints.IntRange: int min()>();

        if i0 < $i1 goto label1;

        $i2 = virtualinvoke r0.<kodkod.util.ints.IntRange: int max()>();

        if i0 > $i2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean contains(kodkod.util.ints.IntRange)
    {
        int $i0, $i1, $i2, $i3;
        kodkod.util.ints.IntRange r0, r1;

        r0 := @this: kodkod.util.ints.IntRange;

        r1 := @parameter0: kodkod.util.ints.IntRange;

        $i0 = virtualinvoke r0.<kodkod.util.ints.IntRange: int min()>();

        $i1 = virtualinvoke r1.<kodkod.util.ints.IntRange: int min()>();

        if $i0 > $i1 goto label1;

        $i2 = virtualinvoke r1.<kodkod.util.ints.IntRange: int max()>();

        $i3 = virtualinvoke r0.<kodkod.util.ints.IntRange: int max()>();

        if $i2 > $i3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean intersects(kodkod.util.ints.IntRange)
    {
        int $i0, $i1;
        kodkod.util.ints.IntRange r0, r1;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.ints.IntRange;

        r1 := @parameter0: kodkod.util.ints.IntRange;

        $i0 = virtualinvoke r1.<kodkod.util.ints.IntRange: int min()>();

        $z0 = virtualinvoke r0.<kodkod.util.ints.IntRange: boolean contains(int)>($i0);

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke r1.<kodkod.util.ints.IntRange: int max()>();

        $z1 = virtualinvoke r0.<kodkod.util.ints.IntRange: boolean contains(int)>($i1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        kodkod.util.ints.IntRange r1, r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0;
        boolean $z0;

        r2 := @this: kodkod.util.ints.IntRange;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof kodkod.util.ints.IntRange;

        if $z0 == 0 goto label2;

        r1 = (kodkod.util.ints.IntRange) r0;

        $i0 = virtualinvoke r2.<kodkod.util.ints.IntRange: int min()>();

        $i1 = virtualinvoke r1.<kodkod.util.ints.IntRange: int min()>();

        if $i0 != $i1 goto label1;

        $i2 = virtualinvoke r2.<kodkod.util.ints.IntRange: int max()>();

        $i3 = virtualinvoke r1.<kodkod.util.ints.IntRange: int max()>();

        if $i2 != $i3 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2, $i3, $i4;
        kodkod.util.ints.IntRange r0;

        r0 := @this: kodkod.util.ints.IntRange;

        $i0 = virtualinvoke r0.<kodkod.util.ints.IntRange: int min()>();

        $i1 = virtualinvoke r0.<kodkod.util.ints.IntRange: int max()>();

        if $i0 != $i1 goto label1;

        $i4 = virtualinvoke r0.<kodkod.util.ints.IntRange: int min()>();

        goto label2;

     label1:
        $i2 = virtualinvoke r0.<kodkod.util.ints.IntRange: int min()>();

        $i3 = virtualinvoke r0.<kodkod.util.ints.IntRange: int max()>();

        $i4 = $i2 ^ $i3;

     label2:
        return $i4;
    }

    public java.lang.String toString()
    {
        kodkod.util.ints.IntRange r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r1 := @this: kodkod.util.ints.IntRange;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $i0 = virtualinvoke r1.<kodkod.util.ints.IntRange: int min()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $i1 = virtualinvoke r1.<kodkod.util.ints.IntRange: int max()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    void <init>(kodkod.util.ints.IntRange)
    {
        kodkod.util.ints.IntRange r0, r1;

        r0 := @this: kodkod.util.ints.IntRange;

        r1 := @parameter0: kodkod.util.ints.IntRange;

        specialinvoke r0.<kodkod.util.ints.IntRange: void <init>()>();

        return;
    }
}
