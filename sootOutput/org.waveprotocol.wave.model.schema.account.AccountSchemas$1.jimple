final class org.waveprotocol.wave.model.schema.account.AccountSchemas$1 extends org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints
{

    void <init>()
    {
        org.waveprotocol.wave.model.schema.account.AccountSchemas$1 r0;
        java.lang.String[] $r1, $r2, r4;
        org.waveprotocol.wave.model.account.Role $r6;
        int $i0, $i1, i2;
        java.lang.String $r7;
        org.waveprotocol.wave.model.account.Role[] $r3, $r5;

        r0 := @this: org.waveprotocol.wave.model.schema.account.AccountSchemas$1;

        specialinvoke r0.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void <init>()>();

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "assign";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.account.AccountSchemas$1: void addChildren(java.lang.String,java.lang.String[])>(null, $r1);

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "address";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.account.AccountSchemas$1: void addAttrs(java.lang.String,java.lang.String[])>("assign", $r2);

        $r3 = staticinvoke <org.waveprotocol.wave.model.account.Role: org.waveprotocol.wave.model.account.Role[] values()>();

        $i0 = lengthof $r3;

        r4 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r4;

        if i2 >= $i1 goto label2;

        $r5 = staticinvoke <org.waveprotocol.wave.model.account.Role: org.waveprotocol.wave.model.account.Role[] values()>();

        $r6 = $r5[i2];

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.account.Role: java.lang.String name()>();

        r4[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.model.schema.account.AccountSchemas$1: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("assign", "role", r4);

        return;
    }
}
