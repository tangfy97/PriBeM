public class ucar.nc2.ft.point.standard.NestedTable extends java.lang.Object
{
    private static org.slf4j.Logger log;
    private ucar.nc2.dataset.NetcdfDataset ds;
    private java.util.Formatter errlog;
    private ucar.nc2.ft.point.standard.Table leaf;
    private ucar.nc2.ft.point.standard.Table root;
    private ucar.nc2.constants.FeatureType featureType;
    private ucar.nc2.ft.point.standard.CoordVarExtractor timeVE;
    private ucar.nc2.ft.point.standard.CoordVarExtractor nomTimeVE;
    private ucar.nc2.ft.point.standard.CoordVarExtractor latVE;
    private ucar.nc2.ft.point.standard.CoordVarExtractor lonVE;
    private ucar.nc2.ft.point.standard.CoordVarExtractor altVE;
    private ucar.nc2.ft.point.standard.CoordVarExtractor stnVE;
    private ucar.nc2.ft.point.standard.CoordVarExtractor stnDescVE;
    private ucar.nc2.ft.point.standard.CoordVarExtractor wmoVE;
    private ucar.nc2.ft.point.standard.CoordVarExtractor stnAltVE;
    private ucar.nc2.ft.point.standard.CoordVarExtractor idVE;
    private ucar.nc2.ft.point.standard.CoordVarExtractor missingVE;
    private int nlevels;
    private ucar.nc2.units.DateFormatter dateFormatter;

    void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.ft.point.standard.TableConfig, java.util.Formatter)
    {
        ucar.nc2.ft.point.standard.Table$CoordName $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39;
        java.util.Formatter r3;
        ucar.nc2.ft.point.standard.TableConfig r4;
        ucar.nc2.constants.FeatureType $r7, $r41, $r42, $r43, $r44, $r45, $r46, $r47;
        ucar.nc2.ft.point.standard.Table $r5, $r6, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, r48;
        ucar.nc2.ft.point.standard.NestedTable r0;
        ucar.nc2.units.DateFormatter $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40;
        ucar.nc2.dataset.NetcdfDataset r2;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r2 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r4 := @parameter1: ucar.nc2.ft.point.standard.TableConfig;

        r3 := @parameter2: java.util.Formatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r1.<ucar.nc2.units.DateFormatter: void <init>()>();

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.units.DateFormatter dateFormatter> = $r1;

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.dataset.NetcdfDataset ds> = r2;

        r0.<ucar.nc2.ft.point.standard.NestedTable: java.util.Formatter errlog> = r3;

        $r5 = staticinvoke <ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table factory(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig)>(r2, r4);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf> = $r5;

        $r6 = virtualinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table getRoot()>();

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table root> = $r6;

        r0.<ucar.nc2.ft.point.standard.NestedTable: int nlevels> = 0;

        r48 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

     label1:
        if r48 == null goto label3;

        $r46 = virtualinvoke r48.<ucar.nc2.ft.point.standard.Table: ucar.nc2.constants.FeatureType getFeatureType()>();

        if $r46 == null goto label2;

        $r47 = virtualinvoke r48.<ucar.nc2.ft.point.standard.Table: ucar.nc2.constants.FeatureType getFeatureType()>();

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType featureType> = $r47;

     label2:
        r48 = r48.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        $i5 = r0.<ucar.nc2.ft.point.standard.NestedTable: int nlevels>;

        $i6 = $i5 + 1;

        r0.<ucar.nc2.ft.point.standard.NestedTable: int nlevels> = $i6;

        goto label1;

     label3:
        $r7 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType featureType>;

        if $r7 != null goto label4;

        $r45 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: ucar.nc2.constants.FeatureType findFeatureType(ucar.nc2.dataset.NetcdfDataset)>(r2);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType featureType> = $r45;

     label4:
        $r9 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName Time>;

        $r8 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r10 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r9, $r8, 0);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor timeVE> = $r10;

        $r12 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName Lat>;

        $r11 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r13 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r12, $r11, 0);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor latVE> = $r13;

        $r15 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName Lon>;

        $r14 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r16 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r15, $r14, 0);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor lonVE> = $r16;

        $r18 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName Elev>;

        $r17 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r19 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r18, $r17, 0);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor altVE> = $r19;

        $r21 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName TimeNominal>;

        $r20 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r22 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r21, $r20, 0);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor nomTimeVE> = $r22;

        $r24 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName StnId>;

        $r23 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r25 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r24, $r23, 0);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnVE> = $r25;

        $r27 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName StnDesc>;

        $r26 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r28 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r27, $r26, 0);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnDescVE> = $r28;

        $r30 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName WmoId>;

        $r29 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r31 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r30, $r29, 0);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor wmoVE> = $r31;

        $r33 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName StnAlt>;

        $r32 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r34 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r33, $r32, 0);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnAltVE> = $r34;

        $r36 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName MissingVar>;

        $r35 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r37 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r36, $r35, 0);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor missingVE> = $r37;

        $r39 = <ucar.nc2.ft.point.standard.Table$CoordName: ucar.nc2.ft.point.standard.Table$CoordName FeatureId>;

        $r38 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table root>;

        $i0 = r0.<ucar.nc2.ft.point.standard.NestedTable: int nlevels>;

        $i1 = $i0 - 1;

        $r40 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>($r39, $r38, $i1);

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor idVE> = $r40;

        $r41 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType featureType>;

        if $r41 != null goto label7;

        $i2 = r0.<ucar.nc2.ft.point.standard.NestedTable: int nlevels>;

        if $i2 != 1 goto label5;

        $r44 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType POINT>;

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType featureType> = $r44;

     label5:
        $i3 = r0.<ucar.nc2.ft.point.standard.NestedTable: int nlevels>;

        if $i3 != 2 goto label6;

        $r43 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType featureType> = $r43;

     label6:
        $i4 = r0.<ucar.nc2.ft.point.standard.NestedTable: int nlevels>;

        if $i4 != 3 goto label7;

        $r42 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION_PROFILE>;

        r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType featureType> = $r42;

     label7:
        return;
    }

    ucar.nc2.ft.point.standard.Table getRoot()
    {
        ucar.nc2.ft.point.standard.NestedTable r0;
        ucar.nc2.ft.point.standard.Table $r1, r2;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r2 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

     label1:
        $r1 = r2.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        if $r1 == null goto label2;

        r2 = r2.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        goto label1;

     label2:
        return r2;
    }

    ucar.nc2.ft.point.standard.Table getLeaf()
    {
        ucar.nc2.ft.point.standard.NestedTable r0;
        ucar.nc2.ft.point.standard.Table $r1;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        return $r1;
    }

    private ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName, ucar.nc2.ft.point.standard.Table, int)
    {
        ucar.nc2.ft.point.standard.Table$CoordName r1;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarTop $r14;
        java.lang.Object[] $r8;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable $r22, $r23;
        java.util.Formatter $r9;
        ucar.ma2.StructureData $r16;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarStructureData $r15;
        int i0, $i1;
        ucar.nc2.Variable $r11;
        java.lang.String $r2, $r13;
        boolean $z0, $z1, $z2;
        ucar.nc2.dataset.VariableDS $r6, $r21, r25;
        ucar.nc2.ft.point.standard.Table$TableSingleton r24;
        java.util.Iterator $r18;
        java.util.List $r7, $r17;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r5;
        ucar.nc2.ft.point.standard.Join r20;
        ucar.nc2.ft.point.standard.Table r0, $r4;
        java.lang.Object $r19;
        ucar.nc2.ft.point.standard.NestedTable$CoordVarConstant $r12;
        ucar.nc2.ft.point.standard.NestedTable r3;
        ucar.nc2.dataset.NetcdfDataset $r10;

        r3 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r1 := @parameter0: ucar.nc2.ft.point.standard.Table$CoordName;

        r0 := @parameter1: ucar.nc2.ft.point.standard.Table;

        i0 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: java.lang.String findCoordinateVariableName(ucar.nc2.ft.point.standard.Table$CoordName)>(r1);

        if $r2 == null goto label9;

        $r6 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.dataset.VariableDS findVariable(java.lang.String)>($r2);

        if $r6 == null goto label2;

        $r23 = new ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable;

        specialinvoke $r23.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: void <init>(ucar.nc2.ft.point.standard.NestedTable,ucar.nc2.dataset.VariableDS,java.lang.String,int)>(r3, $r6, $r2, i0);

        return $r23;

     label2:
        $r7 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List extraJoins>;

        if $r7 == null goto label5;

        $r17 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List extraJoins>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r20 = (ucar.nc2.ft.point.standard.Join) $r19;

        $r21 = interfaceinvoke r20.<ucar.nc2.ft.point.standard.Join: ucar.nc2.dataset.VariableDS findVariable(java.lang.String)>($r2);

        if $r21 == null goto label4;

        $r22 = new ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable;

        specialinvoke $r22.<ucar.nc2.ft.point.standard.NestedTable$CoordVarExtractorVariable: void <init>(ucar.nc2.ft.point.standard.NestedTable,ucar.nc2.dataset.VariableDS,java.lang.String,int)>(r3, $r21, $r2, i0);

        return $r22;

     label4:
        goto label3;

     label5:
        $z0 = r0 instanceof ucar.nc2.ft.point.standard.Table$TableSingleton;

        if $z0 == 0 goto label6;

        r24 = (ucar.nc2.ft.point.standard.Table$TableSingleton) r0;

        $r15 = new ucar.nc2.ft.point.standard.NestedTable$CoordVarStructureData;

        $r16 = r24.<ucar.nc2.ft.point.standard.Table$TableSingleton: ucar.ma2.StructureData sdata>;

        specialinvoke $r15.<ucar.nc2.ft.point.standard.NestedTable$CoordVarStructureData: void <init>(ucar.nc2.ft.point.standard.NestedTable,java.lang.String,ucar.ma2.StructureData)>(r3, $r2, $r16);

        return $r15;

     label6:
        $z1 = r0 instanceof ucar.nc2.ft.point.standard.Table$TableTop;

        if $z1 == 0 goto label8;

        $r10 = r3.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.dataset.NetcdfDataset ds>;

        $r11 = virtualinvoke $r10.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r2);

        r25 = (ucar.nc2.dataset.VariableDS) $r11;

        if r25 == null goto label7;

        $r14 = new ucar.nc2.ft.point.standard.NestedTable$CoordVarTop;

        specialinvoke $r14.<ucar.nc2.ft.point.standard.NestedTable$CoordVarTop: void <init>(ucar.nc2.ft.point.standard.NestedTable,ucar.nc2.dataset.VariableDS)>(r3, r25);

        return $r14;

     label7:
        $r12 = new ucar.nc2.ft.point.standard.NestedTable$CoordVarConstant;

        $r13 = virtualinvoke r1.<ucar.nc2.ft.point.standard.Table$CoordName: java.lang.String toString()>();

        specialinvoke $r12.<ucar.nc2.ft.point.standard.NestedTable$CoordVarConstant: void <init>(ucar.nc2.ft.point.standard.NestedTable,java.lang.String,java.lang.String,java.lang.String)>(r3, $r13, "", $r2);

        return $r12;

     label8:
        $r9 = r3.<ucar.nc2.ft.point.standard.NestedTable: java.util.Formatter errlog>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = $r2;

        $r8[1] = r1;

        virtualinvoke $r9.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NestedTable: cant find variable %s for coordinate type %s %n", $r8);

     label9:
        $r4 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        $i1 = i0 + 1;

        $r5 = specialinvoke r3.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor findCoordinateAxis(ucar.nc2.ft.point.standard.Table$CoordName,ucar.nc2.ft.point.standard.Table,int)>(r1, $r4, $i1);

        return $r5;
    }

    public ucar.nc2.constants.FeatureType getFeatureType()
    {
        ucar.nc2.ft.point.standard.NestedTable r0;
        ucar.nc2.constants.FeatureType $r1;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType featureType>;

        return $r1;
    }

    public int getNumberOfLevels()
    {
        int $i0;
        ucar.nc2.ft.point.standard.NestedTable r0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        $i0 = r0.<ucar.nc2.ft.point.standard.NestedTable: int nlevels>;

        return $i0;
    }

    public boolean hasCoords()
    {
        ucar.nc2.ft.point.standard.CoordVarExtractor $r1, $r2, $r3;
        ucar.nc2.ft.point.standard.NestedTable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor timeVE>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor latVE>;

        if $r2 == null goto label1;

        $r3 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor lonVE>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public ucar.nc2.units.DateUnit getTimeUnit()
    {
        ucar.nc2.units.DateUnit $r0;
        java.lang.IllegalArgumentException $r5;
        java.lang.Exception $r4;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r2, $r8;
        java.lang.StringBuilder $r6, $r7, $r10, $r11, $r13;
        java.lang.String $r3, $r9, $r12, $r14;
        ucar.nc2.ft.point.standard.NestedTable r1;

        r1 := @this: ucar.nc2.ft.point.standard.NestedTable;

     label1:
        $r0 = new ucar.nc2.units.DateUnit;

        $r2 = r1.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor timeVE>;

        $r3 = virtualinvoke $r2.<ucar.nc2.ft.point.standard.CoordVarExtractor: java.lang.String getUnitsString()>();

        specialinvoke $r0.<ucar.nc2.units.DateUnit: void <init>(java.lang.String)>($r3);

     label2:
        return $r0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error on time string = ");

        $r8 = r1.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor timeVE>;

        $r9 = virtualinvoke $r8.<ucar.nc2.ft.point.standard.CoordVarExtractor: java.lang.String getUnitsString()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $r12 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.List getDataVariables()
    {
        ucar.nc2.ft.point.standard.NestedTable r1;
        ucar.nc2.ft.point.standard.Table $r2;
        java.util.ArrayList $r0;

        r1 := @this: ucar.nc2.ft.point.standard.NestedTable;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        specialinvoke r1.<ucar.nc2.ft.point.standard.NestedTable: void addDataVariables(java.util.List,ucar.nc2.ft.point.standard.Table)>($r0, $r2);

        return $r0;
    }

    private void addDataVariables(java.util.List, ucar.nc2.ft.point.standard.Table)
    {
        java.util.Iterator $r3;
        java.util.List $r2, $r6, r8;
        ucar.nc2.ft.point.standard.Table r0, $r1, $r10;
        ucar.nc2.VariableSimpleIF r5;
        java.lang.Object $r4;
        java.lang.String $r7;
        ucar.nc2.ft.point.standard.NestedTable r9;
        boolean $z0, $z1;

        r9 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r8 := @parameter0: java.util.List;

        r0 := @parameter1: ucar.nc2.ft.point.standard.Table;

        $r1 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        if $r1 == null goto label1;

        $r10 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        specialinvoke r9.<ucar.nc2.ft.point.standard.NestedTable: void addDataVariables(java.util.List,ucar.nc2.ft.point.standard.Table)>(r8, $r10);

     label1:
        $r2 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List cols>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.VariableSimpleIF) $r4;

        $r6 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List nondataVars>;

        $r7 = interfaceinvoke r5.<ucar.nc2.VariableSimpleIF: java.lang.String getShortName()>();

        $z0 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>($r7);

        if $z0 != 0 goto label3;

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>(r5);

     label3:
        goto label2;

     label4:
        return;
    }

    public java.lang.String getName()
    {
        java.lang.Object[] $r1, $r7;
        java.util.Formatter $r0;
        ucar.nc2.ft.point.standard.Table $r3, $r5, r9;
        java.lang.String $r4, $r6, $r8;
        ucar.nc2.ft.point.standard.NestedTable r2;

        r2 := @this: ucar.nc2.ft.point.standard.NestedTable;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        $r1 = newarray (java.lang.Object)[1];

        $r3 = r2.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table root>;

        $r4 = virtualinvoke $r3.<ucar.nc2.ft.point.standard.Table: java.lang.String getName()>();

        $r1[0] = $r4;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r1);

        r9 = r2.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table root>;

     label1:
        $r5 = r9.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table child>;

        if $r5 == null goto label2;

        r9 = r9.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table child>;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r9.<ucar.nc2.ft.point.standard.Table: java.lang.String getName()>();

        $r7[0] = $r8;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("/%s", $r7);

        goto label1;

     label2:
        $r6 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r1, $r4, $r6, $r8, $r10;
        java.util.Formatter $r0;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r5, $r7, $r9, $r11;
        java.lang.String $r3, $r12;
        ucar.nc2.ft.point.standard.NestedTable r2;

        r2 := @this: ucar.nc2.ft.point.standard.NestedTable;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        $r1 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r2.<ucar.nc2.ft.point.standard.NestedTable: java.lang.String getName()>();

        $r1[0] = $r3;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NestedTable = %s\n", $r1);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r2.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor timeVE>;

        $r4[0] = $r5;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  Time= %s\n", $r4);

        $r6 = newarray (java.lang.Object)[1];

        $r7 = r2.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor latVE>;

        $r6[0] = $r7;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  Lat= %s\n", $r6);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = r2.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor lonVE>;

        $r8[0] = $r9;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  Lon= %s\n", $r8);

        $r10 = newarray (java.lang.Object)[1];

        $r11 = r2.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor altVE>;

        $r10[0] = $r11;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  Height= %s\n", $r10);

        $r12 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        return $r12;
    }

    public void show(java.util.Formatter)
    {
        java.lang.Object[] $r1, $r4;
        java.lang.Integer $r5;
        java.util.Formatter r0;
        ucar.nc2.ft.point.standard.Table $r6;
        int $i0;
        java.lang.String $r3;
        ucar.nc2.ft.point.standard.NestedTable r2;

        r2 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r0 := @parameter0: java.util.Formatter;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r2.<ucar.nc2.ft.point.standard.NestedTable: java.lang.String getName()>();

        $r1[0] = $r3;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" NestedTable = %s\n", $r1);

        $r4 = newarray (java.lang.Object)[1];

        $i0 = r2.<ucar.nc2.ft.point.standard.NestedTable: int nlevels>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("   nlevels = %d\n", $r4);

        $r6 = r2.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        virtualinvoke $r6.<ucar.nc2.ft.point.standard.Table: int show(java.util.Formatter,int)>(r0, 2);

        return;
    }

    public double getObsTime(ucar.nc2.ft.point.standard.Cursor)
    {
        ucar.ma2.StructureData[] $r2;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r3;
        ucar.nc2.ft.point.standard.Cursor r1;
        ucar.nc2.ft.point.standard.NestedTable r0;
        double $d0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r1 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        $r3 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor timeVE>;

        $r2 = r1.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $d0 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: double getTime(ucar.nc2.ft.point.standard.CoordVarExtractor,ucar.ma2.StructureData[])>($r3, $r2);

        return $d0;
    }

    public double getNomTime(ucar.nc2.ft.point.standard.Cursor)
    {
        ucar.ma2.StructureData[] $r2;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r3;
        ucar.nc2.ft.point.standard.Cursor r1;
        ucar.nc2.ft.point.standard.NestedTable r0;
        double $d0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r1 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        $r3 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor nomTimeVE>;

        $r2 = r1.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $d0 = specialinvoke r0.<ucar.nc2.ft.point.standard.NestedTable: double getTime(ucar.nc2.ft.point.standard.CoordVarExtractor,ucar.ma2.StructureData[])>($r3, $r2);

        return $d0;
    }

    private double getTime(ucar.nc2.ft.point.standard.CoordVarExtractor, ucar.ma2.StructureData[])
    {
        java.util.Date $r7;
        long $l1;
        ucar.ma2.StructureData $r2;
        int $i0;
        java.lang.String $r5, $r13;
        java.text.ParseException $r8;
        boolean $z0;
        double $d0, $d1, $d2;
        ucar.ma2.StructureData[] r1;
        org.slf4j.Logger $r10;
        ucar.nc2.ft.point.standard.CoordVarExtractor r0, $r4;
        java.lang.StringBuilder $r9, $r11, $r12;
        ucar.nc2.ft.point.standard.NestedTable r3;
        ucar.nc2.units.DateFormatter $r6;

        r3 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r0 := @parameter0: ucar.nc2.ft.point.standard.CoordVarExtractor;

        r1 := @parameter1: ucar.ma2.StructureData[];

        if r0 != null goto label1;

        return #NaN;

     label1:
        $i0 = r0.<ucar.nc2.ft.point.standard.CoordVarExtractor: int nestingLevel>;

        $r2 = r1[$i0];

        if $r2 != null goto label2;

        return #NaN;

     label2:
        $z0 = virtualinvoke r0.<ucar.nc2.ft.point.standard.CoordVarExtractor: boolean isString()>();

        if $z0 == 0 goto label7;

        $r4 = r3.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor timeVE>;

        $r5 = virtualinvoke $r4.<ucar.nc2.ft.point.standard.CoordVarExtractor: java.lang.String getCoordValueString(ucar.ma2.StructureData[])>(r1);

     label3:
        $r6 = r3.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.units.DateFormatter dateFormatter>;

        $r7 = virtualinvoke $r6.<ucar.nc2.units.DateFormatter: java.util.Date isoDateTimeFormat(java.lang.String)>($r5);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r10 = <ucar.nc2.ft.point.standard.NestedTable: org.slf4j.Logger log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant parse date - not ISO formatted, = ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String)>($r13);

        return 0.0;

     label6:
        $l1 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $d1 = (double) $l1;

        $d2 = $d1 / 1000.0;

        return $d2;

     label7:
        $d0 = virtualinvoke r0.<ucar.nc2.ft.point.standard.CoordVarExtractor: double getCoordValue(ucar.ma2.StructureData[])>(r1);

        return $d0;

        catch java.text.ParseException from label3 to label4 with label5;
    }

    public double getLatitude(ucar.nc2.ft.point.standard.Cursor)
    {
        ucar.ma2.StructureData[] $r2;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r3;
        ucar.nc2.ft.point.standard.Cursor r1;
        ucar.nc2.ft.point.standard.NestedTable r0;
        double $d0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r1 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        $r3 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor latVE>;

        $r2 = r1.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $d0 = virtualinvoke $r3.<ucar.nc2.ft.point.standard.CoordVarExtractor: double getCoordValue(ucar.ma2.StructureData[])>($r2);

        return $d0;
    }

    public double getLongitude(ucar.nc2.ft.point.standard.Cursor)
    {
        ucar.ma2.StructureData[] $r2;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r3;
        ucar.nc2.ft.point.standard.Cursor r1;
        ucar.nc2.ft.point.standard.NestedTable r0;
        double $d0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r1 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        $r3 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor lonVE>;

        $r2 = r1.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $d0 = virtualinvoke $r3.<ucar.nc2.ft.point.standard.CoordVarExtractor: double getCoordValue(ucar.ma2.StructureData[])>($r2);

        return $d0;
    }

    public ucar.unidata.geoloc.EarthLocation getEarthLocation(ucar.nc2.ft.point.standard.Cursor)
    {
        ucar.unidata.geoloc.EarthLocationImpl $r13;
        double $d0, $d1, $d2, $d3, d4;
        ucar.ma2.StructureData[] $r2, $r4, $r7, $r10;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r3, $r5, $r6, $r8, $r9, $r11, $r12;
        ucar.nc2.ft.point.standard.Cursor r1;
        ucar.nc2.ft.point.standard.NestedTable r0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r1 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        $r3 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor latVE>;

        $r2 = r1.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $d0 = virtualinvoke $r3.<ucar.nc2.ft.point.standard.CoordVarExtractor: double getCoordValue(ucar.ma2.StructureData[])>($r2);

        $r5 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor lonVE>;

        $r4 = r1.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $d1 = virtualinvoke $r5.<ucar.nc2.ft.point.standard.CoordVarExtractor: double getCoordValue(ucar.ma2.StructureData[])>($r4);

        $r6 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor altVE>;

        if $r6 != null goto label1;

        $d3 = #NaN;

        goto label2;

     label1:
        $r8 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor altVE>;

        $r7 = r1.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $d3 = virtualinvoke $r8.<ucar.nc2.ft.point.standard.CoordVarExtractor: double getCoordValue(ucar.ma2.StructureData[])>($r7);

     label2:
        d4 = $d3;

        $r9 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnAltVE>;

        if $r9 == null goto label4;

        $r11 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnAltVE>;

        $r10 = r1.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $d2 = virtualinvoke $r11.<ucar.nc2.ft.point.standard.CoordVarExtractor: double getCoordValue(ucar.ma2.StructureData[])>($r10);

        $r12 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor altVE>;

        if $r12 != null goto label3;

        d4 = $d2;

        goto label4;

     label3:
        d4 = $d3 + $d2;

     label4:
        $r13 = new ucar.unidata.geoloc.EarthLocationImpl;

        specialinvoke $r13.<ucar.unidata.geoloc.EarthLocationImpl: void <init>(double,double,double)>($d0, $d1, d4);

        return $r13;
    }

    public java.lang.String getFeatureName(ucar.nc2.ft.point.standard.Cursor)
    {
        ucar.ma2.StructureMembers$Member $r5;
        ucar.ma2.StructureData $r3;
        int $i0, $i1, $i2, i3;
        java.lang.String $r2, $r4, $r8, $r9, $r10;
        boolean $z0, $z1;
        double $d0;
        ucar.ma2.DataType $r6, $r7;
        ucar.nc2.ft.point.standard.Table r11;
        ucar.nc2.ft.point.standard.Cursor r1;
        ucar.nc2.ft.point.standard.NestedTable r0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r1 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        i3 = 0;

        r11 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

     label1:
        $i0 = i3;

        i3 = i3 + 1;

        $i1 = r1.<ucar.nc2.ft.point.standard.Cursor: int currentIndex>;

        if $i0 >= $i1 goto label2;

        r11 = r11.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        goto label1;

     label2:
        $r2 = r11.<ucar.nc2.ft.point.standard.Table: java.lang.String feature_id>;

        if $r2 != null goto label3;

        return "unknown";

     label3:
        $r3 = virtualinvoke r1.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData getParentStructure()>();

        if $r3 != null goto label4;

        return "unknown";

     label4:
        $r4 = r11.<ucar.nc2.ft.point.standard.Table: java.lang.String feature_id>;

        $r5 = virtualinvoke $r3.<ucar.ma2.StructureData: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>($r4);

        if $r5 != null goto label5;

        return "unknown";

     label5:
        $r6 = virtualinvoke $r5.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $z0 = virtualinvoke $r6.<ucar.ma2.DataType: boolean isString()>();

        if $z0 == 0 goto label6;

        $r10 = virtualinvoke $r3.<ucar.ma2.StructureData: java.lang.String getScalarString(ucar.ma2.StructureMembers$Member)>($r5);

        return $r10;

     label6:
        $r7 = virtualinvoke $r5.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $z1 = virtualinvoke $r7.<ucar.ma2.DataType: boolean isIntegral()>();

        if $z1 == 0 goto label7;

        $i2 = virtualinvoke $r3.<ucar.ma2.StructureData: int convertScalarInt(ucar.ma2.StructureMembers$Member)>($r5);

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        return $r9;

     label7:
        $d0 = virtualinvoke $r3.<ucar.ma2.StructureData: double convertScalarDouble(ucar.ma2.StructureMembers$Member)>($r5);

        $r8 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r8;
    }

    public boolean isFeatureMissing(ucar.ma2.StructureData)
    {
        ucar.ma2.StructureData r2;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r1, $r3;
        ucar.nc2.ft.point.standard.NestedTable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r2 := @parameter0: ucar.ma2.StructureData;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor idVE>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor idVE>;

        $z0 = virtualinvoke $r3.<ucar.nc2.ft.point.standard.CoordVarExtractor: boolean isMissing(ucar.ma2.StructureData)>(r2);

        return $z0;
    }

    public boolean isTimeMissing(ucar.nc2.ft.point.standard.Cursor)
    {
        ucar.nc2.ft.point.standard.CoordVarExtractor $r1, $r4;
        ucar.ma2.StructureData[] $r3;
        ucar.nc2.ft.point.standard.Cursor r2;
        ucar.nc2.ft.point.standard.NestedTable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r2 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor timeVE>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r4 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor timeVE>;

        $r3 = r2.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $z0 = virtualinvoke $r4.<ucar.nc2.ft.point.standard.CoordVarExtractor: boolean isMissing(ucar.ma2.StructureData[])>($r3);

        return $z0;
    }

    public boolean isAltMissing(ucar.nc2.ft.point.standard.Cursor)
    {
        ucar.nc2.ft.point.standard.CoordVarExtractor $r1, $r4;
        ucar.ma2.StructureData[] $r3;
        ucar.nc2.ft.point.standard.Cursor r2;
        ucar.nc2.ft.point.standard.NestedTable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r2 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor altVE>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r4 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor altVE>;

        $r3 = r2.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $z0 = virtualinvoke $r4.<ucar.nc2.ft.point.standard.CoordVarExtractor: boolean isMissing(ucar.ma2.StructureData[])>($r3);

        return $z0;
    }

    public boolean isMissing(ucar.nc2.ft.point.standard.Cursor)
    {
        ucar.nc2.ft.point.standard.CoordVarExtractor $r1, $r4;
        ucar.ma2.StructureData[] $r3;
        ucar.nc2.ft.point.standard.Cursor r2;
        ucar.nc2.ft.point.standard.NestedTable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r2 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor missingVE>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r4 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor missingVE>;

        $r3 = r2.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $z0 = virtualinvoke $r4.<ucar.nc2.ft.point.standard.CoordVarExtractor: boolean isMissing(ucar.ma2.StructureData[])>($r3);

        return $z0;
    }

    public ucar.ma2.StructureData makeObsStructureData(ucar.nc2.ft.point.standard.Cursor)
    {
        ucar.ma2.StructureData $r2;
        ucar.ma2.StructureData[] $r1;
        ucar.nc2.ft.point.standard.Cursor r0;
        ucar.nc2.ft.point.standard.NestedTable r3;

        r3 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r0 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        $r1 = r0.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $r2 = staticinvoke <ucar.ma2.StructureDataFactory: ucar.ma2.StructureData make(ucar.ma2.StructureData[])>($r1);

        return $r2;
    }

    void addParentJoin(ucar.nc2.ft.point.standard.Cursor) throws java.io.IOException
    {
        java.lang.Object[] $r11;
        java.util.ArrayList $r4;
        ucar.ma2.StructureData $r6, $r13, $r16;
        int i0, $i1;
        boolean $z0;
        ucar.ma2.StructureData[] $r5, $r9, $r10, $r12;
        java.util.Iterator $r8;
        java.util.List $r3, $r7;
        ucar.nc2.ft.point.standard.Join r15;
        ucar.nc2.ft.point.standard.Table $r2;
        ucar.nc2.ft.point.standard.Cursor r0;
        java.lang.Object $r14;
        ucar.nc2.ft.point.standard.NestedTable r1;

        r1 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r0 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        i0 = r0.<ucar.nc2.ft.point.standard.Cursor: int currentIndex>;

        $r2 = specialinvoke r1.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table getTable(int)>(i0);

        $r3 = $r2.<ucar.nc2.ft.point.standard.Table: java.util.List extraJoins>;

        if $r3 == null goto label3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(3);

        $r5 = r0.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $r6 = $r5[i0];

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = $r2.<ucar.nc2.ft.point.standard.Table: java.util.List extraJoins>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r15 = (ucar.nc2.ft.point.standard.Join) $r14;

        $r16 = interfaceinvoke r15.<ucar.nc2.ft.point.standard.Join: ucar.ma2.StructureData getJoinData(ucar.nc2.ft.point.standard.Cursor)>(r0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label1;

     label2:
        $r9 = r0.<ucar.nc2.ft.point.standard.Cursor: ucar.ma2.StructureData[] tableData>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r10 = newarray (ucar.ma2.StructureData)[$i1];

        $r11 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (ucar.ma2.StructureData[]) $r11;

        $r13 = staticinvoke <ucar.ma2.StructureDataFactory: ucar.ma2.StructureData make(ucar.ma2.StructureData[])>($r12);

        $r9[i0] = $r13;

     label3:
        return;
    }

    private ucar.nc2.ft.point.standard.Table getTable(int)
    {
        ucar.nc2.ft.point.standard.Table r1;
        int i0, i1;
        ucar.nc2.ft.point.standard.NestedTable r0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        i0 := @parameter0: int;

        r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        i1 = i1 + 1;

        r1 = r1.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        goto label1;

     label2:
        return r1;
    }

    public ucar.ma2.StructureDataIterator getObsDataIterator(ucar.nc2.ft.point.standard.Cursor, int) throws java.io.IOException
    {
        ucar.nc2.ft.point.standard.Table $r2;
        ucar.ma2.StructureDataIterator $r3;
        int i0;
        ucar.nc2.ft.point.standard.Cursor r1;
        ucar.nc2.ft.point.standard.NestedTable r0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r1 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        i0 := @parameter1: int;

        $r2 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table root>;

        $r3 = virtualinvoke $r2.<ucar.nc2.ft.point.standard.Table: ucar.ma2.StructureDataIterator getStructureDataIterator(ucar.nc2.ft.point.standard.Cursor,int)>(r1, i0);

        return $r3;
    }

    public ucar.ma2.StructureDataIterator getStationDataIterator(int) throws java.io.IOException
    {
        ucar.ma2.StructureDataIterator $r2;
        ucar.nc2.ft.point.standard.Table r1;
        int i0, $i1;
        ucar.nc2.ft.point.StructureDataIteratorLimited $r7;
        ucar.nc2.Variable $r6;
        java.lang.String $r3, $r4;
        ucar.nc2.ft.point.standard.NestedTable r0;
        ucar.nc2.dataset.NetcdfDataset $r5;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        i0 := @parameter0: int;

        r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table root>;

        $r2 = virtualinvoke r1.<ucar.nc2.ft.point.standard.Table: ucar.ma2.StructureDataIterator getStructureDataIterator(ucar.nc2.ft.point.standard.Cursor,int)>(null, i0);

        $r3 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String limit>;

        if $r3 == null goto label1;

        $r5 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.dataset.NetcdfDataset ds>;

        $r4 = r1.<ucar.nc2.ft.point.standard.Table: java.lang.String limit>;

        $r6 = virtualinvoke $r5.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>($r4);

        $i1 = virtualinvoke $r6.<ucar.nc2.Variable: int readScalarInt()>();

        $r7 = new ucar.nc2.ft.point.StructureDataIteratorLimited;

        specialinvoke $r7.<ucar.nc2.ft.point.StructureDataIteratorLimited: void <init>(ucar.ma2.StructureDataIterator,int)>($r2, $i1);

        return $r7;

     label1:
        return $r2;
    }

    public ucar.ma2.StructureDataIterator getRootFeatureDataIterator(int) throws java.io.IOException
    {
        ucar.nc2.ft.point.standard.Table $r1;
        ucar.ma2.StructureDataIterator $r2;
        int i0;
        ucar.nc2.ft.point.standard.NestedTable r0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table root>;

        $r2 = virtualinvoke $r1.<ucar.nc2.ft.point.standard.Table: ucar.ma2.StructureDataIterator getStructureDataIterator(ucar.nc2.ft.point.standard.Cursor,int)>(null, i0);

        return $r2;
    }

    public ucar.ma2.StructureDataIterator getLeafFeatureDataIterator(ucar.nc2.ft.point.standard.Cursor, int) throws java.io.IOException
    {
        ucar.nc2.ft.point.standard.Table $r2;
        ucar.ma2.StructureDataIterator $r3;
        int i0;
        ucar.nc2.ft.point.standard.Cursor r1;
        ucar.nc2.ft.point.standard.NestedTable r0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r1 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        i0 := @parameter1: int;

        $r2 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r3 = virtualinvoke $r2.<ucar.nc2.ft.point.standard.Table: ucar.ma2.StructureDataIterator getStructureDataIterator(ucar.nc2.ft.point.standard.Cursor,int)>(r1, i0);

        return $r3;
    }

    public ucar.ma2.StructureDataIterator getMiddleFeatureDataIterator(ucar.nc2.ft.point.standard.Cursor, int) throws java.io.IOException
    {
        ucar.nc2.ft.point.standard.Table $r1, $r3;
        ucar.ma2.StructureDataIterator $r4;
        int i0;
        ucar.nc2.ft.point.standard.Cursor r2;
        ucar.nc2.ft.point.standard.NestedTable r0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r2 := @parameter0: ucar.nc2.ft.point.standard.Cursor;

        i0 := @parameter1: int;

        $r1 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table leaf>;

        $r3 = $r1.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        $r4 = virtualinvoke $r3.<ucar.nc2.ft.point.standard.Table: ucar.ma2.StructureDataIterator getStructureDataIterator(ucar.nc2.ft.point.standard.Cursor,int)>(r2, i0);

        return $r4;
    }

    ucar.unidata.geoloc.Station makeStation(ucar.ma2.StructureData)
    {
        ucar.ma2.StructureData r1;
        ucar.unidata.geoloc.StationImpl $r15;
        java.lang.String $r4, r7, r10, $r16, $r17;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2;
        ucar.nc2.ft.point.standard.CoordVarExtractor $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r14;
        ucar.nc2.ft.point.standard.NestedTable r0;

        r0 := @this: ucar.nc2.ft.point.standard.NestedTable;

        r1 := @parameter0: ucar.ma2.StructureData;

        $r2 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnVE>;

        $z0 = virtualinvoke $r2.<ucar.nc2.ft.point.standard.CoordVarExtractor: boolean isMissing(ucar.ma2.StructureData)>(r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnVE>;

        $r4 = virtualinvoke $r3.<ucar.nc2.ft.point.standard.CoordVarExtractor: java.lang.String getCoordValueAsString(ucar.ma2.StructureData)>(r1);

        $r5 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnDescVE>;

        if $r5 != null goto label2;

        $r16 = "";

        goto label3;

     label2:
        $r6 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnDescVE>;

        $r16 = virtualinvoke $r6.<ucar.nc2.ft.point.standard.CoordVarExtractor: java.lang.String getCoordValueAsString(ucar.ma2.StructureData)>(r1);

     label3:
        r7 = $r16;

        $r8 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor wmoVE>;

        if $r8 != null goto label4;

        $r17 = "";

        goto label5;

     label4:
        $r9 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor wmoVE>;

        $r17 = virtualinvoke $r9.<ucar.nc2.ft.point.standard.CoordVarExtractor: java.lang.String getCoordValueAsString(ucar.ma2.StructureData)>(r1);

     label5:
        r10 = $r17;

        $r11 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor latVE>;

        $d0 = virtualinvoke $r11.<ucar.nc2.ft.point.standard.CoordVarExtractor: double getCoordValue(ucar.ma2.StructureData)>(r1);

        $r12 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor lonVE>;

        $d1 = virtualinvoke $r12.<ucar.nc2.ft.point.standard.CoordVarExtractor: double getCoordValue(ucar.ma2.StructureData)>(r1);

        $r13 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnAltVE>;

        if $r13 != null goto label6;

        $d2 = #NaN;

        goto label7;

     label6:
        $r14 = r0.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.CoordVarExtractor stnAltVE>;

        $d2 = virtualinvoke $r14.<ucar.nc2.ft.point.standard.CoordVarExtractor: double getCoordValue(ucar.ma2.StructureData)>(r1);

     label7:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 != 0 goto label8;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        if $z2 == 0 goto label9;

     label8:
        return null;

     label9:
        $r15 = new ucar.unidata.geoloc.StationImpl;

        specialinvoke $r15.<ucar.unidata.geoloc.StationImpl: void <init>(java.lang.String,java.lang.String,java.lang.String,double,double,double)>($r4, r7, r10, $d0, $d1, $d2);

        return $r15;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/ft/point/standard/NestedTable;");

        <ucar.nc2.ft.point.standard.NestedTable: org.slf4j.Logger log> = $r0;

        return;
    }
}
