public class com.hp.hpl.jena.rdf.arp.NTriple extends java.lang.Object implements com.hp.hpl.jena.rdf.arp.ARPErrorNumbers
{
    private static java.lang.StringBuffer line;
    private static com.hp.hpl.jena.rdf.arp.ARP arp;
    private static java.lang.String xmlBase;
    private static boolean numbers;
    static com.hp.hpl.jena.rdf.arp.StatementHandler andMeToo;
    private static final java.lang.Runtime rt;
    private static int startMem;
    private static java.util.regex.Pattern ntripleBnode;
    private static boolean[] okURIChars;

    public void <init>()
    {
        com.hp.hpl.jena.rdf.arp.NTriple r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.NTriple;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void mainEh(java.lang.String[],org.xml.sax.ErrorHandler,com.hp.hpl.jena.rdf.arp.ARPEventHandler)>(r0, null, null);

        return;
    }

    public static void mainEh(java.lang.String[], org.xml.sax.ErrorHandler, com.hp.hpl.jena.rdf.arp.ARPEventHandler)
    {
        org.xml.sax.ErrorHandler r5;
        java.lang.Runtime $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r20, $r22;
        long $l2, $l3, $l5, $l6, $l7, $l8, $l9, $l11, $l12, $l13, $l14, $l15, $l17, $l18, $l19, $l20, $l21, $l23, $l24, $l25;
        com.hp.hpl.jena.rdf.arp.StatementHandler $r4;
        java.lang.String $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        com.hp.hpl.jena.rdf.arp.ARPHandlers $r3;
        boolean $z0, $z1, z2, z3, z4;
        java.lang.String[] r6;
        int $i0, $i1, $i4, $i10, $i16, $i22, $i26, $i27, $i28, i29, $i30, $i31, $i33, $i35;
        com.hp.hpl.jena.rdf.arp.ARPEventHandler r0;
        java.io.PrintStream $r9, $r13, $r17, $r21;
        com.hp.hpl.jena.rdf.arp.ARP $r2, $r33;
        java.io.InputStream $r23;

        r6 := @parameter0: java.lang.String[];

        r5 := @parameter1: org.xml.sax.ErrorHandler;

        r0 := @parameter2: com.hp.hpl.jena.rdf.arp.ARPEventHandler;

        z2 = 0;

        z4 = 0;

        z3 = 0;

        $i33 = (int) -1;

        <com.hp.hpl.jena.rdf.arp.NTriple: int startMem> = $i33;

        <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.StatementHandler andMeToo> = r0;

        $r33 = new com.hp.hpl.jena.rdf.arp.ARP;

        specialinvoke $r33.<com.hp.hpl.jena.rdf.arp.ARP: void <init>()>();

        <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.ARP arp> = $r33;

        $r2 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.ARP arp>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.rdf.arp.ARP: com.hp.hpl.jena.rdf.arp.ARPHandlers getHandlers()>();

        $r4 = staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.StatementHandler getSH(boolean)>(1);

        virtualinvoke $r3.<com.hp.hpl.jena.rdf.arp.ARPHandlers: com.hp.hpl.jena.rdf.arp.StatementHandler setStatementHandler(com.hp.hpl.jena.rdf.arp.StatementHandler)>($r4);

        if r0 == null goto label01;

        virtualinvoke $r3.<com.hp.hpl.jena.rdf.arp.ARPHandlers: com.hp.hpl.jena.rdf.arp.NamespaceHandler setNamespaceHandler(com.hp.hpl.jena.rdf.arp.NamespaceHandler)>(r0);

        virtualinvoke $r3.<com.hp.hpl.jena.rdf.arp.ARPHandlers: com.hp.hpl.jena.rdf.arp.ExtendedHandler setExtendedHandler(com.hp.hpl.jena.rdf.arp.ExtendedHandler)>(r0);

     label01:
        if r5 == null goto label02;

        virtualinvoke $r3.<com.hp.hpl.jena.rdf.arp.ARPHandlers: org.xml.sax.ErrorHandler setErrorHandler(org.xml.sax.ErrorHandler)>(r5);

     label02:
        i29 = 0;

     label03:
        $i30 = lengthof r6;

        $i31 = $i30 - 1;

        if i29 >= $i31 goto label06;

        $r28 = r6[i29];

        $z1 = virtualinvoke $r28.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z1 == 0 goto label04;

        $r30 = r6[i29];

        $r31 = virtualinvoke $r30.<java.lang.String: java.lang.String substring(int)>(1);

        $i27 = i29 + 1;

        $r32 = r6[$i27];

        $i28 = staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: int processOpts(java.lang.String,java.lang.String)>($r31, $r32);

        i29 = i29 + $i28;

        goto label05;

     label04:
        z2 = 1;

        z4 = 1;

        z3 = 1;

        $r29 = r6[i29];

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void process(java.lang.String)>($r29);

     label05:
        i29 = i29 + 1;

        goto label03;

     label06:
        $i0 = lengthof r6;

        if $i0 <= 0 goto label09;

        $r24 = r6[i29];

        $z0 = virtualinvoke $r24.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label08;

        if z3 != 0 goto label07;

        $r26 = r6[i29];

        $r27 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int)>(1);

        $i26 = staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: int processOpts(java.lang.String,java.lang.String)>($r27, "100");

        if $i26 != 1 goto label09;

     label07:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void usage()>();

        goto label09;

     label08:
        z2 = 1;

        z4 = 1;

        $r25 = r6[i29];

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void process(java.lang.String)>($r25);

     label09:
        if z4 != 0 goto label10;

        $r23 = <java.lang.System: java.io.InputStream in>;

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void process(java.io.InputStream,java.lang.String,java.lang.String)>($r23, "http://example.org/stdin", "standard input");

     label10:
        $i1 = <com.hp.hpl.jena.rdf.arp.NTriple: int startMem>;

        $i35 = (int) -1;

        if $i1 == $i35 goto label11;

        $r7 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        virtualinvoke $r7.<java.lang.Runtime: void gc()>();

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        $l2 = virtualinvoke $r8.<java.lang.Runtime: long totalMemory()>();

        $r10 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        $l3 = virtualinvoke $r10.<java.lang.Runtime: long freeMemory()>();

        $l6 = $l2 - $l3;

        $i4 = <com.hp.hpl.jena.rdf.arp.NTriple: int startMem>;

        $l5 = (long) $i4;

        $l7 = $l6 - $l5;

        virtualinvoke $r9.<java.io.PrintStream: void println(long)>($l7);

        $r11 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        virtualinvoke $r11.<java.lang.Runtime: void gc()>();

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        $l8 = virtualinvoke $r12.<java.lang.Runtime: long totalMemory()>();

        $r14 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        $l9 = virtualinvoke $r14.<java.lang.Runtime: long freeMemory()>();

        $l12 = $l8 - $l9;

        $i10 = <com.hp.hpl.jena.rdf.arp.NTriple: int startMem>;

        $l11 = (long) $i10;

        $l13 = $l12 - $l11;

        virtualinvoke $r13.<java.io.PrintStream: void println(long)>($l13);

        $r15 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        virtualinvoke $r15.<java.lang.Runtime: void gc()>();

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        $l14 = virtualinvoke $r16.<java.lang.Runtime: long totalMemory()>();

        $r18 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        $l15 = virtualinvoke $r18.<java.lang.Runtime: long freeMemory()>();

        $l18 = $l14 - $l15;

        $i16 = <com.hp.hpl.jena.rdf.arp.NTriple: int startMem>;

        $l17 = (long) $i16;

        $l19 = $l18 - $l17;

        virtualinvoke $r17.<java.io.PrintStream: void println(long)>($l19);

        $r19 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        virtualinvoke $r19.<java.lang.Runtime: void gc()>();

        $r21 = <java.lang.System: java.io.PrintStream out>;

        $r20 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        $l20 = virtualinvoke $r20.<java.lang.Runtime: long totalMemory()>();

        $r22 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        $l21 = virtualinvoke $r22.<java.lang.Runtime: long freeMemory()>();

        $l24 = $l20 - $l21;

        $i22 = <com.hp.hpl.jena.rdf.arp.NTriple: int startMem>;

        $l23 = (long) $i22;

        $l25 = $l24 - $l23;

        virtualinvoke $r21.<java.io.PrintStream: void println(long)>($l25);

     label11:
        return;
    }

    private static com.hp.hpl.jena.rdf.arp.StatementHandler getSH(boolean)
    {
        java.io.PrintStream $r3;
        com.hp.hpl.jena.rdf.arp.NTriple$NoSH $r7;
        com.hp.hpl.jena.rdf.arp.NTriple$SH $r6;
        com.hp.hpl.jena.rdf.arp.StatementHandler $r0, $r2, $r4, r5;
        com.hp.hpl.jena.rdf.arp.NTriple$TwoSH $r8;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r6 = new com.hp.hpl.jena.rdf.arp.NTriple$SH;

        $r4 = $r6;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r6.<com.hp.hpl.jena.rdf.arp.NTriple$SH: void <init>(java.io.PrintStream)>($r3);

        goto label2;

     label1:
        $r7 = new com.hp.hpl.jena.rdf.arp.NTriple$NoSH;

        $r4 = $r7;

        specialinvoke $r7.<com.hp.hpl.jena.rdf.arp.NTriple$NoSH: void <init>(com.hp.hpl.jena.rdf.arp.NTriple$1)>(null);

     label2:
        r5 = $r4;

        $r0 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.StatementHandler andMeToo>;

        if $r0 == null goto label3;

        $r8 = new com.hp.hpl.jena.rdf.arp.NTriple$TwoSH;

        $r2 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.StatementHandler andMeToo>;

        specialinvoke $r8.<com.hp.hpl.jena.rdf.arp.NTriple$TwoSH: void <init>(com.hp.hpl.jena.rdf.arp.StatementHandler,com.hp.hpl.jena.rdf.arp.StatementHandler)>($r4, $r2);

        r5 = $r8;

     label3:
        return r5;
    }

    private static void lineNumber()
    {
        org.xml.sax.Locator $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r4, $r11;
        com.hp.hpl.jena.rdf.arp.ARP $r0;
        boolean $z0;

        $z0 = <com.hp.hpl.jena.rdf.arp.NTriple: boolean numbers>;

        if $z0 == 0 goto label1;

        $r0 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.ARP arp>;

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.rdf.arp.ARP: org.xml.sax.Locator getLocator()>();

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# ");

        $r4 = interfaceinvoke $r1.<org.xml.sax.Locator: java.lang.String getSystemId()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = interfaceinvoke $r1.<org.xml.sax.Locator: int getLineNumber()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $i1 = interfaceinvoke $r1.<org.xml.sax.Locator: int getColumnNumber()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>($r11);

     label1:
        return;
    }

    static void usage()
    {
        java.lang.String $r4, $r7;
        java.io.PrintStream $r1, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        java.lang.StringBuilder $r0, $r2, $r5, $r6;
        java.lang.Class $r3;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java <class-path> ");

        $r3 = class "Lcom/hp/hpl/jena/rdf/arp/NTriple;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ( [ -[xstfurR]][ -b xmlBase -[eiw] NNN[,NNN...] ] [ file ] [ url ] )... ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("    All options, files and URLs can be intemingled in any order.");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("    They are processed from left-to-right.");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("    file      Converts RDF/XML file into N-triples");

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("    url       Converts RDF/XML from URL into N-triples");

        $r12 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("    -b uri    Sets XML Base to the absolute URI.");

        $r13 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("    -r        Content is RDF (default, no embedding, rdf:RDF tag may be omitted).");

        $r14 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("    -R        RDF embedded in XML document, search for obligatory rdf:RDF start element.");

        $r15 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("    -t        No n-triple output, error checking only.");

        $r16 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>("    -x        Lax mode - warnings are suppressed.");

        $r17 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("    -s        Strict mode - most warnings are errors.");

        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("    -n        Show line and column numbers.");

        $r19 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>("    -u        Allow unqualified attributes (defaults to warning).");

        $r20 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("    -f        All errors are.error - report first one only.");

        $r21 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>("    -b url    Sets XML Base to the absolute url.");

        $r22 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>("    -e NNN[,NNN...]");

        $r23 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>("              Treats numbered warning conditions as errrors.");

        $r24 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>("    -w NNN[,NNN...]");

        $r25 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>("              Treats numbered error conditions as warnings.");

        $r26 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>("    -i NNN[,NNN...]");

        $r27 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>("              Ignores numbered error/warning conditions.");

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    private static int processOpts(java.lang.String, java.lang.String)
    {
        byte $b11;
        boolean z0, z1, z2;
        com.hp.hpl.jena.rdf.arp.NTriple$1 $r21;
        com.hp.hpl.jena.rdf.arp.NTriple$2 $r22;
        java.lang.Runtime $r14, $r15, $r16, $r17;
        long $l5, $l6, $l7;
        com.hp.hpl.jena.rdf.arp.StatementHandler $r7;
        int $i0, $i2, $i3, $i4, $i8, i9, i10, $i12, $i14, $i15, $i17;
        java.lang.String r2, $r3, r4;
        com.hp.hpl.jena.rdf.arp.ARPOptions $r1;
        java.io.PrintStream $r12;
        com.hp.hpl.jena.rdf.arp.ARPHandlers $r6, $r9, $r19;
        com.hp.hpl.jena.rdf.arp.NTriple$SH $r23;
        char $c1;
        com.hp.hpl.jena.rdf.arp.ARP $r0, $r5, $r8, $r13, $r18;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        $r0 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.ARP arp>;

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.rdf.arp.ARP: com.hp.hpl.jena.rdf.arp.ARPOptions getOptions()>();

        i9 = 0;

     label01:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i9 >= $i0 goto label23;

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i9);

        $r3 = "beiwD";

        $i12 = (int) $c1;

        $i2 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>($i12);

        $i14 = (int) -1;

        if $i2 == $i14 goto label03;

        if z2 == 0 goto label02;

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void usage()>();

     label02:
        z0 = 1;

        z2 = 1;

        z1 = 1;

     label03:
        $i15 = (int) $c1;

        tableswitch($i15)
        {
            case 68: goto label04;
            case 69: goto label11;
            case 70: goto label21;
            case 71: goto label21;
            case 72: goto label21;
            case 73: goto label21;
            case 74: goto label21;
            case 75: goto label21;
            case 76: goto label21;
            case 77: goto label21;
            case 78: goto label21;
            case 79: goto label21;
            case 80: goto label21;
            case 81: goto label21;
            case 82: goto label09;
            case 83: goto label21;
            case 84: goto label21;
            case 85: goto label21;
            case 86: goto label21;
            case 87: goto label21;
            case 88: goto label21;
            case 89: goto label21;
            case 90: goto label21;
            case 91: goto label21;
            case 92: goto label21;
            case 93: goto label21;
            case 94: goto label21;
            case 95: goto label21;
            case 96: goto label21;
            case 97: goto label21;
            case 98: goto label12;
            case 99: goto label21;
            case 100: goto label21;
            case 101: goto label13;
            case 102: goto label16;
            case 103: goto label21;
            case 104: goto label21;
            case 105: goto label14;
            case 106: goto label21;
            case 107: goto label21;
            case 108: goto label21;
            case 109: goto label21;
            case 110: goto label10;
            case 111: goto label21;
            case 112: goto label21;
            case 113: goto label21;
            case 114: goto label08;
            case 115: goto label06;
            case 116: goto label07;
            case 117: goto label20;
            case 118: goto label21;
            case 119: goto label15;
            case 120: goto label05;
            default: goto label21;
        };

     label04:
        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

        $r14 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        virtualinvoke $r14.<java.lang.Runtime: void gc()>();

        $r15 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        virtualinvoke $r15.<java.lang.Runtime: void gc()>();

        $r16 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        $l5 = virtualinvoke $r16.<java.lang.Runtime: long totalMemory()>();

        $r17 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        $l6 = virtualinvoke $r17.<java.lang.Runtime: long freeMemory()>();

        $l7 = $l5 - $l6;

        $i8 = (int) $l7;

        <com.hp.hpl.jena.rdf.arp.NTriple: int startMem> = $i8;

        $r18 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.ARP arp>;

        $r19 = virtualinvoke $r18.<com.hp.hpl.jena.rdf.arp.ARP: com.hp.hpl.jena.rdf.arp.ARPHandlers getHandlers()>();

        $r21 = new com.hp.hpl.jena.rdf.arp.NTriple$1;

        specialinvoke $r21.<com.hp.hpl.jena.rdf.arp.NTriple$1: void <init>(int)>($i4);

        virtualinvoke $r19.<com.hp.hpl.jena.rdf.arp.ARPHandlers: com.hp.hpl.jena.rdf.arp.StatementHandler setStatementHandler(com.hp.hpl.jena.rdf.arp.StatementHandler)>($r21);

        goto label22;

     label05:
        virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setLaxErrorMode()>();

        goto label22;

     label06:
        virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.ARPOptions: void setStrictErrorMode()>();

        goto label22;

     label07:
        $r5 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.ARP arp>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.rdf.arp.ARP: com.hp.hpl.jena.rdf.arp.ARPHandlers getHandlers()>();

        $r7 = staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.StatementHandler getSH(boolean)>(0);

        virtualinvoke $r6.<com.hp.hpl.jena.rdf.arp.ARPHandlers: com.hp.hpl.jena.rdf.arp.StatementHandler setStatementHandler(com.hp.hpl.jena.rdf.arp.StatementHandler)>($r7);

        goto label22;

     label08:
        virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.ARPOptions: boolean setEmbedding(boolean)>(0);

        goto label22;

     label09:
        virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.ARPOptions: boolean setEmbedding(boolean)>(1);

        goto label22;

     label10:
        <com.hp.hpl.jena.rdf.arp.NTriple: boolean numbers> = 1;

        goto label22;

     label11:
        $r8 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.ARP arp>;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.rdf.arp.ARP: com.hp.hpl.jena.rdf.arp.ARPHandlers getHandlers()>();

        $r22 = new com.hp.hpl.jena.rdf.arp.NTriple$2;

        specialinvoke $r22.<com.hp.hpl.jena.rdf.arp.NTriple$2: void <init>()>();

        virtualinvoke $r9.<com.hp.hpl.jena.rdf.arp.ARPHandlers: org.xml.sax.ErrorHandler setErrorHandler(org.xml.sax.ErrorHandler)>($r22);

        $r13 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.ARP arp>;

        $r23 = new com.hp.hpl.jena.rdf.arp.NTriple$SH;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r23.<com.hp.hpl.jena.rdf.arp.NTriple$SH: void <init>(java.io.PrintStream)>($r12);

        virtualinvoke $r13.<com.hp.hpl.jena.rdf.arp.ARP: void setBadStatementHandler(com.hp.hpl.jena.rdf.arp.StatementHandler)>($r23);

        goto label22;

     label12:
        <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.String xmlBase> = r4;

        goto label22;

     label13:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void setErrorMode(java.lang.String,int)>(r4, 2);

        goto label22;

     label14:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void setErrorMode(java.lang.String,int)>(r4, 0);

        goto label22;

     label15:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void setErrorMode(java.lang.String,int)>(r4, 1);

        goto label22;

     label16:
        i10 = 0;

     label17:
        if i10 >= 400 goto label19;

        $i17 = (int) -1;

        $i3 = virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.ARPOptions: int setErrorMode(int,int)>(i10, $i17);

        if $i3 != 2 goto label18;

        virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.ARPOptions: int setErrorMode(int,int)>(i10, 3);

     label18:
        i10 = i10 + 1;

        goto label17;

     label19:
        goto label22;

     label20:
        virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.ARPOptions: int setErrorMode(int,int)>(102, 0);

        virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.ARPOptions: int setErrorMode(int,int)>(101, 0);

        goto label22;

     label21:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void usage()>();

     label22:
        i9 = i9 + 1;

        goto label01;

     label23:
        if z1 == 0 goto label24;

        $b11 = 1;

        goto label25;

     label24:
        $b11 = 0;

     label25:
        return $b11;
    }

    private static void setErrorMode(java.lang.String, int)
    {
        int[] r0;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, i13, $i14, $i15;
        java.lang.String $r4, r7;
        com.hp.hpl.jena.rdf.arp.ARPOptions $r6;
        char $c1;
        java.lang.StringBuilder $r2, $r3, $r8;
        com.hp.hpl.jena.rdf.arp.ARP $r5;

        r7 := @parameter0: java.lang.String;

        i10 := @parameter1: int;

        r0 = newarray (int)[3];

        i12 = 0;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        i13 = 0;

     label01:
        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if i13 >= $i0 goto label11;

        $c1 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i13);

        $i14 = (int) $c1;

        tableswitch($i14)
        {
            case 32: goto label04;
            case 33: goto label09;
            case 34: goto label09;
            case 35: goto label09;
            case 36: goto label09;
            case 37: goto label09;
            case 38: goto label09;
            case 39: goto label09;
            case 40: goto label09;
            case 41: goto label09;
            case 42: goto label09;
            case 43: goto label09;
            case 44: goto label04;
            case 45: goto label09;
            case 46: goto label09;
            case 47: goto label09;
            case 48: goto label02;
            case 49: goto label02;
            case 50: goto label02;
            case 51: goto label02;
            case 52: goto label02;
            case 53: goto label02;
            case 54: goto label02;
            case 55: goto label02;
            case 56: goto label02;
            case 57: goto label02;
            case 58: goto label09;
            case 59: goto label04;
            default: goto label09;
        };

     label02:
        if i12 != 3 goto label03;

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void usage()>();

     label03:
        $i2 = i12;

        i12 = i12 + 1;

        $i15 = (int) $c1;

        $i3 = $i15 - 48;

        r0[$i2] = $i3;

        goto label10;

     label04:
        if i13 != 0 goto label05;

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void usage()>();

     label05:
        lookupswitch(i12)
        {
            case 0: goto label06;
            case 3: goto label07;
            default: goto label08;
        };

     label06:
        goto label10;

     label07:
        $r5 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.ARP arp>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.rdf.arp.ARP: com.hp.hpl.jena.rdf.arp.ARPOptions getOptions()>();

        $i4 = r0[0];

        $i7 = $i4 * 100;

        $i5 = r0[1];

        $i6 = $i5 * 10;

        $i9 = $i7 + $i6;

        $i8 = r0[2];

        $i11 = $i9 + $i8;

        virtualinvoke $r6.<com.hp.hpl.jena.rdf.arp.ARPOptions: int setErrorMode(int,int)>($i11, i10);

        i12 = 0;

        goto label10;

     label08:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void usage()>();

        goto label10;

     label09:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void usage()>();

     label10:
        i13 = i13 + 1;

        goto label01;

     label11:
        return;
    }

    private static void process(java.lang.String)
    {
        java.net.URL $r4, $r30;
        java.net.URI $r3;
        boolean $z0, $z1;
        java.lang.Exception $r11, $r29;
        java.lang.StringBuilder $r6, $r7, $r9, $r12, $r14, $r15, $r17, $r19, $r21, $r23, $r25, $r27;
        java.lang.String r1, $r5, $r8, $r16, $r20, $r22, $r26, $r28, r32;
        java.io.PrintStream $r13, $r18, $r24;
        java.io.IOException $r10;
        java.io.FileInputStream $r2;
        java.io.File $r0;
        java.io.InputStream r31;

        r1 := @parameter0: java.lang.String;

     label01:
        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        r31 = $r2;

        $r3 = virtualinvoke $r0.<java.io.File: java.net.URI toURI()>();

        $r4 = virtualinvoke $r3.<java.net.URI: java.net.URL toURL()>();

        $r5 = virtualinvoke $r4.<java.net.URL: java.lang.String toExternalForm()>();

        r32 = $r5;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("file:/");

        if $z0 == 0 goto label02;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("file://");

        if $z1 != 0 goto label02;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $r8 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>(5);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r32 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        goto label07;

     label03:
        $r29 := @caughtexception;

     label04:
        $r30 = new java.net.URL;

        specialinvoke $r30.<java.net.URL: void <init>(java.lang.String)>(r1);

        r31 = virtualinvoke $r30.<java.net.URL: java.io.InputStream openStream()>();

        r32 = virtualinvoke $r30.<java.net.URL: java.lang.String toExternalForm()>();

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ARP: Failed to open: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);

        $r18 = <java.lang.System: java.io.PrintStream err>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r20 = staticinvoke <com.hp.hpl.jena.rdf.arp.ParseException: java.lang.String formatMessage(java.lang.Exception)>($r29);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);

        $r24 = <java.lang.System: java.io.PrintStream err>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r26 = staticinvoke <com.hp.hpl.jena.rdf.arp.ParseException: java.lang.String formatMessage(java.lang.Exception)>($r11);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r28);

        return;

     label07:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void process(java.io.InputStream,java.lang.String,java.lang.String)>(r31, r32, r1);

     label08:
        virtualinvoke r31.<java.io.InputStream: void close()>();

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

     label11:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label10;
    }

    private static void process(java.io.InputStream, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, r3, r8, $r11, $r13, $r21, $r23, $r24;
        java.io.PrintStream $r6, $r17;
        java.io.IOException $r15;
        org.xml.sax.SAXParseException $r14;
        org.xml.sax.SAXException $r4;
        java.lang.StringBuilder $r5, $r7, $r9, $r10, $r12, $r16, $r18, $r19, $r20, $r22;
        com.hp.hpl.jena.rdf.arp.ARP $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        $r0 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.String xmlBase>;

        if $r0 != null goto label1;

        $r24 = r3;

        goto label2;

     label1:
        $r24 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.String xmlBase>;

     label2:
        $r2 = <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.ARP arp>;

        virtualinvoke $r2.<com.hp.hpl.jena.rdf.arp.ARP: void load(java.io.InputStream,java.lang.String)>(r1, $r24);

     label3:
        goto label7;

     label4:
        $r15 := @caughtexception;

        $r17 = <java.lang.System: java.io.PrintStream err>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r21 = staticinvoke <com.hp.hpl.jena.rdf.arp.ParseException: java.lang.String formatMessage(java.lang.Exception)>($r15);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r23);

        goto label7;

     label5:
        $r14 := @caughtexception;

        goto label7;

     label6:
        $r4 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = staticinvoke <com.hp.hpl.jena.rdf.arp.ParseException: java.lang.String formatMessage(java.lang.Exception)>($r4);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label7:
        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch org.xml.sax.SAXParseException from label2 to label3 with label5;
        catch org.xml.sax.SAXException from label2 to label3 with label6;
    }

    private static void print(java.lang.String)
    {
        java.lang.String r0;
        java.lang.StringBuffer $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer line>;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        return;
    }

    private static void resource(com.hp.hpl.jena.rdf.arp.AResource)
    {
        com.hp.hpl.jena.rdf.arp.AResource r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.AResource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: boolean isAnonymous()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("_:j");

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: java.lang.String getAnonymousID()>();

        $r3 = staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.String escapeNTriple(java.lang.String)>($r2);

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>($r3);

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>(" ");

        goto label2;

     label1:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("<");

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.arp.AResource: java.lang.String getURI()>();

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void escapeURI(java.lang.String)>($r1);

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("> ");

     label2:
        return;
    }

    static java.lang.String escapeNTriple(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.StringBuffer $r3, $r5, $r8;
        int $i0, i1;
        java.lang.String r0, $r4, $r6, $r7, $r9;
        java.util.regex.Pattern $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.rdf.arp.NTriple: java.util.regex.Pattern ntripleBnode>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label2:
        $z1 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label3;

        $i0 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, $i0);

        $r8 = staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer escapeUTF8(java.lang.String)>($r7);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>($r8);

        i1 = virtualinvoke $r2.<java.util.regex.Matcher: int end()>();

        $r9 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        goto label2;

     label3:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i1);

        $r5 = staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer escapeUTF8(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>($r5);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.StringBuffer escapeUTF8(java.lang.String)
    {
        byte[] $r2;
        java.lang.Error $r7;
        short $s2, $s3, $s5, $s7;
        byte b1;
        java.lang.StringBuffer $r6;
        int i0, i4, $i6, $i8;
        java.lang.String r1, $r3;
        java.io.UnsupportedEncodingException $r4;

        r1 := @parameter0: java.lang.String;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8");

        i0 = lengthof $r2;

        i4 = 0;

     label2:
        if i4 >= i0 goto label4;

        b1 = $r2[i4];

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Z");

        $s5 = (short) b1;

        $s2 = 255 & $s5;

        $i6 = (int) $s2;

        if $i6 >= 16 goto label3;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

     label3:
        $s7 = (short) b1;

        $s3 = 255 & $s7;

        $i8 = (int) $s3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        i4 = i4 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.Throwable)>($r4);

        throw $r7;

     label6:
        return $r6;

        catch java.io.UnsupportedEncodingException from label1 to label4 with label5;
    }

    private static void escape(java.lang.String)
    {
        char $c1;
        java.util.Locale $r2;
        java.lang.StringBuffer $r4;
        int $i0, $i2, i3, i4, $i5, $i6, $i7, $i8, $i10;
        java.lang.String r0, $r1, $r3;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label01:
        if i3 >= $i0 goto label12;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c1;

        lookupswitch($i5)
        {
            case 9: goto label06;
            case 10: goto label04;
            case 13: goto label05;
            case 34: goto label03;
            case 92: goto label02;
            default: goto label07;
        };

     label02:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("\\\\");

        goto label11;

     label03:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("\\\"");

        goto label11;

     label04:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("\\n");

        goto label11;

     label05:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("\\r");

        goto label11;

     label06:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("\\t");

        goto label11;

     label07:
        $i6 = (int) $c1;

        if $i6 < 32 goto label08;

        $i7 = (int) $c1;

        if $i7 > 126 goto label08;

        $r4 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer line>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label11;

     label08:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("\\u");

        $i8 = (int) $c1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        i4 = 4 - $i2;

     label09:
        if i4 <= 0 goto label10;

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("0");

        $i10 = (int) -1;

        i4 = i4 + $i10;

        goto label09;

     label10:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>($r3);

     label11:
        i3 = i3 + 1;

        goto label01;

     label12:
        return;
    }

    private static void escapeURI(java.lang.String)
    {
        java.lang.StringBuffer $r5;
        int $i0, $i2, $i3, i4, i5, $i6, $i7, $i8, $i10;
        java.lang.String r0, $r2, $r3;
        boolean $z0;
        boolean[] $r1, $r4;
        char $c1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i4 = 0;

     label1:
        if i4 >= $i0 goto label6;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $r1 = <com.hp.hpl.jena.rdf.arp.NTriple: boolean[] okURIChars>;

        $i2 = lengthof $r1;

        $i6 = (int) $c1;

        if $i6 >= $i2 goto label2;

        $r4 = <com.hp.hpl.jena.rdf.arp.NTriple: boolean[] okURIChars>;

        $i7 = (int) $c1;

        $z0 = $r4[$i7];

        if $z0 == 0 goto label2;

        $r5 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer line>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label5;

     label2:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("\\u");

        $i8 = (int) $c1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        i5 = 4 - $i3;

     label3:
        if i5 <= 0 goto label4;

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("0");

        $i10 = (int) -1;

        i5 = i5 + $i10;

        goto label3;

     label4:
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>($r3);

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return;
    }

    private static void literal(com.hp.hpl.jena.rdf.arp.ALiteral)
    {
        java.lang.StringBuffer $r0, $r3, $r5, $r6, $r8;
        java.lang.String $r2, $r4, $r7;
        com.hp.hpl.jena.rdf.arp.ALiteral r1;
        boolean $z0, $z1;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.ALiteral;

        $r0 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer line>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String toString()>();

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void escape(java.lang.String)>($r2);

        $r3 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer line>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String getLang()>();

        if $r4 == null goto label1;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label1;

        $r6 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer line>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>($r4);

     label1:
        $r7 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.arp.ALiteral: java.lang.String getDatatypeURI()>();

        if $r7 == null goto label2;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label2;

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void print(java.lang.String)>("^^<");

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void escapeURI(java.lang.String)>($r7);

        $r5 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer line>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

     label2:
        $r8 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer line>;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        return;
    }

    static java.lang.Runtime access$100()
    {
        java.lang.Runtime $r0;

        $r0 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt>;

        return $r0;
    }

    static int access$200()
    {
        int $i0;

        $i0 = <com.hp.hpl.jena.rdf.arp.NTriple: int startMem>;

        return $i0;
    }

    static int access$202(int)
    {
        int i0;

        i0 := @parameter0: int;

        <com.hp.hpl.jena.rdf.arp.NTriple: int startMem> = i0;

        return i0;
    }

    static void access$300()
    {
        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void lineNumber()>();

        return;
    }

    static void access$400(com.hp.hpl.jena.rdf.arp.AResource)
    {
        com.hp.hpl.jena.rdf.arp.AResource r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.AResource;

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void resource(com.hp.hpl.jena.rdf.arp.AResource)>(r0);

        return;
    }

    static java.lang.StringBuffer access$500()
    {
        java.lang.StringBuffer $r0;

        $r0 = <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer line>;

        return $r0;
    }

    static void access$600(com.hp.hpl.jena.rdf.arp.ALiteral)
    {
        com.hp.hpl.jena.rdf.arp.ALiteral r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.arp.ALiteral;

        staticinvoke <com.hp.hpl.jena.rdf.arp.NTriple: void literal(com.hp.hpl.jena.rdf.arp.ALiteral)>(r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Runtime $r1;
        boolean[] $r3, $r4, $r5, $r6, $r7;
        java.lang.StringBuffer $r8;
        int i0, $i2;
        java.util.regex.Pattern $r2;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.StringBuffer line> = $r8;

        <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.String xmlBase> = null;

        <com.hp.hpl.jena.rdf.arp.NTriple: boolean numbers> = 0;

        <com.hp.hpl.jena.rdf.arp.NTriple: com.hp.hpl.jena.rdf.arp.StatementHandler andMeToo> = null;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        <com.hp.hpl.jena.rdf.arp.NTriple: java.lang.Runtime rt> = $r1;

        $i2 = (int) -1;

        <com.hp.hpl.jena.rdf.arp.NTriple: int startMem> = $i2;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[a-zA-Y0-9]*");

        <com.hp.hpl.jena.rdf.arp.NTriple: java.util.regex.Pattern ntripleBnode> = $r2;

        $r3 = newarray (boolean)[128];

        <com.hp.hpl.jena.rdf.arp.NTriple: boolean[] okURIChars> = $r3;

        i0 = 32;

     label1:
        if i0 >= 127 goto label2;

        $r7 = <com.hp.hpl.jena.rdf.arp.NTriple: boolean[] okURIChars>;

        $r7[i0] = 1;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = <com.hp.hpl.jena.rdf.arp.NTriple: boolean[] okURIChars>;

        $r4[60] = 0;

        $r5 = <com.hp.hpl.jena.rdf.arp.NTriple: boolean[] okURIChars>;

        $r5[62] = 0;

        $r6 = <com.hp.hpl.jena.rdf.arp.NTriple: boolean[] okURIChars>;

        $r6[92] = 0;

        return;
    }
}
