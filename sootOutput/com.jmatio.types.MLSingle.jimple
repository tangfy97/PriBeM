public class com.jmatio.types.MLSingle extends com.jmatio.types.MLNumericArray
{

    public void <init>(java.lang.String, java.lang.Float[], int)
    {
        int i0;
        com.jmatio.types.MLSingle r0;
        java.lang.String r1;
        java.lang.Float[] r2;

        r0 := @this: com.jmatio.types.MLSingle;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Float[];

        i0 := @parameter2: int;

        specialinvoke r0.<com.jmatio.types.MLNumericArray: void <init>(java.lang.String,int,java.lang.Number[],int)>(r1, 7, r2, i0);

        return;
    }

    public void <init>(java.lang.String, int[], int, int)
    {
        int[] r2;
        int i0, i1;
        com.jmatio.types.MLSingle r0;
        java.lang.String r1;

        r0 := @this: com.jmatio.types.MLSingle;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.jmatio.types.MLNumericArray: void <init>(java.lang.String,int[],int,int)>(r1, r2, i0, i1);

        return;
    }

    public java.lang.Float[] createArray(int, int)
    {
        int i0, i1, $i2;
        com.jmatio.types.MLSingle r1;
        java.lang.Float[] $r0;

        r1 := @this: com.jmatio.types.MLSingle;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 * i1;

        $r0 = newarray (java.lang.Float)[$i2];

        return $r0;
    }

    public java.lang.Float buldFromBytes(byte[])
    {
        byte[] r0;
        java.lang.Float $r3;
        java.lang.IllegalArgumentException $r4;
        java.nio.ByteBuffer $r2;
        int $i0, $i1, $i2;
        float $f0;
        com.jmatio.types.MLSingle r1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r1 := @this: com.jmatio.types.MLSingle;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = virtualinvoke r1.<com.jmatio.types.MLSingle: int getBytesAllocated()>();

        if $i0 == $i1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("To build from byte array I need array of size: ");

        $i2 = virtualinvoke r1.<com.jmatio.types.MLSingle: int getBytesAllocated()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);

        $f0 = virtualinvoke $r2.<java.nio.ByteBuffer: float getFloat()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r3;
    }

    public byte[] getByteArray(java.lang.Float)
    {
        java.lang.Float r2;
        byte[] $r3;
        int $i0;
        float $f0;
        com.jmatio.types.MLSingle r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.jmatio.types.MLSingle;

        r2 := @parameter0: java.lang.Float;

        $i0 = virtualinvoke r0.<com.jmatio.types.MLSingle: int getBytesAllocated()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        $f0 = virtualinvoke r2.<java.lang.Float: float floatValue()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>($f0);

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        return $r3;
    }

    public int getBytesAllocated()
    {
        com.jmatio.types.MLSingle r0;

        r0 := @this: com.jmatio.types.MLSingle;

        return 4;
    }

    public java.lang.Class getStorageClazz()
    {
        com.jmatio.types.MLSingle r0;

        r0 := @this: com.jmatio.types.MLSingle;

        return class "Ljava/lang/Float;";
    }

    public volatile java.lang.Object[] createArray(int, int)
    {
        int i0, i1;
        com.jmatio.types.MLSingle r0;
        java.lang.Float[] $r1;

        r0 := @this: com.jmatio.types.MLSingle;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.jmatio.types.MLSingle: java.lang.Float[] createArray(int,int)>(i0, i1);

        return $r1;
    }

    public volatile byte[] getByteArray(java.lang.Number)
    {
        java.lang.Float $r2;
        byte[] $r3;
        com.jmatio.types.MLSingle r0;
        java.lang.Number r1;

        r0 := @this: com.jmatio.types.MLSingle;

        r1 := @parameter0: java.lang.Number;

        $r2 = (java.lang.Float) r1;

        $r3 = virtualinvoke r0.<com.jmatio.types.MLSingle: byte[] getByteArray(java.lang.Float)>($r2);

        return $r3;
    }

    public volatile java.lang.Number buldFromBytes(byte[])
    {
        byte[] r1;
        java.lang.Float $r2;
        com.jmatio.types.MLSingle r0;

        r0 := @this: com.jmatio.types.MLSingle;

        r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<com.jmatio.types.MLSingle: java.lang.Float buldFromBytes(byte[])>(r1);

        return $r2;
    }
}
