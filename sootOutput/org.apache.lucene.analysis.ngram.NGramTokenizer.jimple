public final class org.apache.lucene.analysis.ngram.NGramTokenizer extends org.apache.lucene.analysis.Tokenizer
{
    public static final int DEFAULT_MIN_NGRAM_SIZE;
    public static final int DEFAULT_MAX_NGRAM_SIZE;
    private int minGram;
    private int maxGram;
    private int gramSize;
    private int pos;
    private int inLen;
    private int charsRead;
    private java.lang.String inStr;
    private boolean started;
    private final org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt;
    private final org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt;

    public void <init>(java.io.Reader, int, int)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r3;
        java.io.Reader r1;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r5;
        org.apache.lucene.analysis.ngram.NGramTokenizer r0;
        int i0, i1;
        org.apache.lucene.util.Attribute $r2, $r4;

        r0 := @this: org.apache.lucene.analysis.ngram.NGramTokenizer;

        r1 := @parameter0: java.io.Reader;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.analysis.Tokenizer: void <init>(java.io.Reader)>(r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        $r3 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r2;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r5 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r4;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt> = $r5;

        specialinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: void init(int,int)>(i0, i1);

        return;
    }

    public void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader, int, int)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r4;
        org.apache.lucene.util.AttributeSource$AttributeFactory r1;
        java.io.Reader r2;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r6;
        org.apache.lucene.analysis.ngram.NGramTokenizer r0;
        int i0, i1;
        org.apache.lucene.util.Attribute $r3, $r5;

        r0 := @this: org.apache.lucene.analysis.ngram.NGramTokenizer;

        r1 := @parameter0: org.apache.lucene.util.AttributeSource$AttributeFactory;

        r2 := @parameter1: java.io.Reader;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.lucene.analysis.Tokenizer: void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory,java.io.Reader)>(r1, r2);

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        $r4 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r3;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt> = $r4;

        $r5 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r6 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r5;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt> = $r6;

        specialinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: void init(int,int)>(i0, i1);

        return;
    }

    public void <init>(java.io.Reader)
    {
        org.apache.lucene.analysis.ngram.NGramTokenizer r0;
        java.io.Reader r1;

        r0 := @this: org.apache.lucene.analysis.ngram.NGramTokenizer;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: void <init>(java.io.Reader,int,int)>(r1, 1, 2);

        return;
    }

    private void init(int, int)
    {
        int i0, i1;
        org.apache.lucene.analysis.ngram.NGramTokenizer r0;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @this: org.apache.lucene.analysis.ngram.NGramTokenizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minGram must be greater than zero");

        throw $r2;

     label1:
        if i0 <= i1 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minGram must not be greater than maxGram");

        throw $r1;

     label2:
        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int minGram> = i0;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int maxGram> = i1;

        return;
    }

    public boolean incrementToken() throws java.io.IOException
    {
        boolean $z0;
        java.io.Reader $r8, $r9;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i41, $i43;
        java.lang.String $r3, $r6, $r7, $r12;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r1, $r2;
        org.apache.lucene.analysis.ngram.NGramTokenizer r0;
        char[] r10, r11;

        r0 := @this: org.apache.lucene.analysis.ngram.NGramTokenizer;

        virtualinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: void clearAttributes()>();

        $z0 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: boolean started>;

        if $z0 != 0 goto label7;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: boolean started> = 1;

        $i21 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int minGram>;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int gramSize> = $i21;

        r10 = newarray (char)[1024];

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead> = 0;

     label1:
        $i23 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead>;

        $i22 = lengthof r10;

        if $i23 >= $i22 goto label3;

        $r9 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: java.io.Reader input>;

        $i36 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead>;

        $i34 = lengthof r10;

        $i33 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead>;

        $i35 = $i34 - $i33;

        $i37 = virtualinvoke $r9.<java.io.Reader: int read(char[],int,int)>(r10, $i36, $i35);

        $i41 = (int) -1;

        if $i37 != $i41 goto label2;

        goto label3;

     label2:
        $i38 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead>;

        $i39 = $i38 + $i37;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead> = $i39;

        goto label1;

     label3:
        $r12 = new java.lang.String;

        $i24 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead>;

        specialinvoke $r12.<java.lang.String: void <init>(char[],int,int)>(r10, 0, $i24);

        $r6 = virtualinvoke $r12.<java.lang.String: java.lang.String trim()>();

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: java.lang.String inStr> = $r6;

        $i26 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead>;

        $i25 = lengthof r10;

        if $i26 != $i25 goto label6;

        r11 = newarray (char)[1024];

     label4:
        $r8 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: java.io.Reader input>;

        $i29 = lengthof r11;

        $i30 = virtualinvoke $r8.<java.io.Reader: int read(char[],int,int)>(r11, 0, $i29);

        $i43 = (int) -1;

        if $i30 != $i43 goto label5;

        goto label6;

     label5:
        $i31 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead>;

        $i32 = $i31 + $i30;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead> = $i32;

        goto label4;

     label6:
        $r7 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: java.lang.String inStr>;

        $i27 = virtualinvoke $r7.<java.lang.String: int length()>();

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int inLen> = $i27;

        $i28 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int inLen>;

        if $i28 != 0 goto label7;

        return 0;

     label7:
        $i1 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int pos>;

        $i0 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int gramSize>;

        $i3 = $i1 + $i0;

        $i2 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int inLen>;

        if $i3 <= $i2 goto label9;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int pos> = 0;

        $i12 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int gramSize>;

        $i13 = $i12 + 1;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int gramSize> = $i13;

        $i15 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int gramSize>;

        $i14 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int maxGram>;

        if $i15 <= $i14 goto label8;

        return 0;

     label8:
        $i17 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int pos>;

        $i16 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int gramSize>;

        $i19 = $i17 + $i16;

        $i18 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int inLen>;

        if $i19 <= $i18 goto label9;

        return 0;

     label9:
        $i20 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int pos>;

        $i4 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int pos>;

        $i5 = $i4 + 1;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int pos> = $i5;

        $r1 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r2 = interfaceinvoke $r1.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: org.apache.lucene.analysis.tokenattributes.CharTermAttribute setEmpty()>();

        $r3 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: java.lang.String inStr>;

        $i6 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int gramSize>;

        $i7 = $i20 + $i6;

        interfaceinvoke $r2.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence,int,int)>($r3, $i20, $i7);

        $r4 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        $i8 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int correctOffset(int)>($i20);

        $i9 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int gramSize>;

        $i10 = $i20 + $i9;

        $i11 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int correctOffset(int)>($i10);

        interfaceinvoke $r4.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i8, $i11);

        return 1;
    }

    public void end()
    {
        org.apache.lucene.analysis.ngram.NGramTokenizer r0;
        int $i0, $i1;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r1;

        r0 := @this: org.apache.lucene.analysis.ngram.NGramTokenizer;

        $i0 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int charsRead>;

        $i1 = virtualinvoke r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int correctOffset(int)>($i0);

        $r1 = r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        interfaceinvoke $r1.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i1, $i1);

        return;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.lucene.analysis.ngram.NGramTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.ngram.NGramTokenizer;

        specialinvoke r0.<org.apache.lucene.analysis.Tokenizer: void reset()>();

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: boolean started> = 0;

        r0.<org.apache.lucene.analysis.ngram.NGramTokenizer: int pos> = 0;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.analysis.ngram.NGramTokenizer: int DEFAULT_MAX_NGRAM_SIZE> = 2;

        <org.apache.lucene.analysis.ngram.NGramTokenizer: int DEFAULT_MIN_NGRAM_SIZE> = 1;

        return;
    }
}
