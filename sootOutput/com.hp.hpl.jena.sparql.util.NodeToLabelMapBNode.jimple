public class com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode extends com.hp.hpl.jena.sparql.util.NodeToLabelMap
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode;

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode: void <init>(java.lang.String,boolean)>("b", 0);

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: void <init>(java.lang.String,boolean)>(r1, z0);

        return;
    }

    public java.lang.String asString(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode r1;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.util.NodeToLabelMapBNode: java.lang.String mapNode(com.hp.hpl.jena.graph.Node)>(r0);

        return $r2;
    }
}
