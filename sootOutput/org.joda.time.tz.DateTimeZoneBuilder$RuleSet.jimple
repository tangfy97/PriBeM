final class org.joda.time.tz.DateTimeZoneBuilder$RuleSet extends java.lang.Object
{
    private static final int YEAR_LIMIT;
    private int iStandardOffset;
    private java.util.ArrayList iRules;
    private java.lang.String iInitialNameKey;
    private int iInitialSaveMillis;
    private int iUpperYear;
    private org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear;

    void <init>()
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        java.util.ArrayList $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(10);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = $r1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = 2147483647;

        return;
    }

    void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r5;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0, r1;
        java.util.ArrayList $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.String $r4;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = $i0;

        $r2 = new java.util.ArrayList;

        $r3 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = $r2;

        $r4 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = $r4;

        $i1 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = $i1;

        $i2 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = $i2;

        $r5 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = $r5;

        return;
    }

    public int getStandardOffset()
    {
        int $i0;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        return $i0;
    }

    public void setStandardOffset(int)
    {
        int i0;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        i0 := @parameter0: int;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = i0;

        return;
    }

    public void setFixedSavings(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = r1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = i0;

        return;
    }

    public void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void setUpperLimit(int, org.joda.time.tz.DateTimeZoneBuilder$OfYear)
    {
        int i0;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r1;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        i0 := @parameter0: int;

        r1 := @parameter1: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = i0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = r1;

        return;
    }

    public org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        byte $b2, $b3;
        org.joda.time.tz.DateTimeZoneBuilder$Transition $r4, r15, $r16, $r18, $r19, $r20, $r21;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r10;
        boolean $z0;
        long $l0, l1, l12;
        java.util.ArrayList $r3, $r17;
        int $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, $i14;
        java.lang.String $r1, $r7, $r14;
        java.util.Iterator $r8;
        java.lang.Object $r9;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        l1 := @parameter0: long;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>;

        if $r1 == null goto label1;

        $r16 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $r14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>;

        $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $i8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis>;

        $i11 = $i9 + $i8;

        $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r16.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>(l1, $r14, $i11, $i10);

        return $r16;

     label1:
        $r17 = new java.util.ArrayList;

        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        specialinvoke $r17.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        l12 = -9223372036854775808L;

        i13 = 0;

        r15 = null;

     label2:
        $r4 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l12, i13);

        if $r4 == null goto label7;

        $l0 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        l12 = $l0;

        $b2 = $l0 cmp l1;

        if $b2 != 0 goto label3;

        $r18 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        specialinvoke $r18.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(l1, $r4);

        r15 = $r18;

        goto label7;

     label3:
        $b3 = $l0 cmp l1;

        $i14 = (int) $b3;

        if $i14 <= 0 goto label6;

        if r15 != null goto label5;

        $r8 = virtualinvoke $r17.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r9;

        $i6 = virtualinvoke r10.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>();

        if $i6 != 0 goto label4;

        $r19 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $i7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r19.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l1, r10, $i7);

        r15 = $r19;

        goto label5;

     label5:
        if r15 != null goto label7;

        $r20 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $r7 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>();

        $i5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r20.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>(l1, $r7, $i5, $i4);

        r15 = $r20;

        goto label7;

     label6:
        $r21 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        specialinvoke $r21.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(l1, $r4);

        r15 = $r21;

        i13 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>();

        goto label2;

     label7:
        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = $r17;

        return r15;
    }

    public org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r1;
        long $l7, l9, $l11, l14;
        java.util.ArrayList $r2;
        byte $b8, $b12, $b13;
        org.joda.time.tz.DateTimeZoneBuilder$Transition $r10;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r8, r9;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i10, $i15, $i16, $i17;
        org.joda.time.DateTimeField $r4;
        boolean $z0;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r6;
        java.util.Iterator $r3;
        org.joda.time.chrono.ISOChronology $r0;
        java.lang.Object $r7;

        r1 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        l9 := @parameter0: long;

        i4 := @parameter1: int;

        $r0 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        r8 = null;

        l14 = 9223372036854775807L;

        $r2 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r7;

        $i10 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $l11 = virtualinvoke r9.<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>(l9, $i10, i4);

        $b12 = $l11 cmp l9;

        $i15 = (int) $b12;

        if $i15 > 0 goto label2;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $b13 = $l11 cmp l14;

        $i16 = (int) $b13;

        if $i16 > 0 goto label1;

        r8 = r9;

        l14 = $l11;

        goto label1;

     label3:
        if r8 != null goto label4;

        return null;

     label4:
        $r4 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i0 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l14);

        $i1 = <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT>;

        if $i0 < $i1 goto label5;

        return null;

     label5:
        $i2 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        if $i2 >= 2147483647 goto label6;

        $r6 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>;

        $i6 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        $i5 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $l7 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i6, $i5, i4);

        $b8 = l14 cmp $l7;

        $i17 = (int) $b8;

        if $i17 < 0 goto label6;

        return null;

     label6:
        $r10 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $i3 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r10.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l14, r8, $i3);

        return $r10;
    }

    public long getUpperLimit(int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r1;
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        int $i0, i1, $i2, $i3;
        long $l4;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        i1 := @parameter0: int;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        if $i0 != 2147483647 goto label1;

        return 9223372036854775807L;

     label1:
        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>;

        $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $l4 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i3, $i2, i1);

        return $l4;
    }

    public org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r10, $r11;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r8;
        java.util.ArrayList $r1, $r2, $r5;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r4, r7;
        int $i0, $i1, $i2, $i3;
        java.lang.String r9;
        java.lang.Object $r3, $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        r9 := @parameter0: java.lang.String;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 != 2 goto label1;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r4 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r3;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(1);

        r7 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6;

        $i1 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>();

        if $i1 != 2147483647 goto label1;

        $i2 = virtualinvoke r7.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>();

        if $i2 != 2147483647 goto label1;

        $r8 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $r11 = r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $r10 = r7.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        specialinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r9, $i3, $r11, $r10);

        return $r8;

     label1:
        return null;
    }

    static void <clinit>()
    {
        org.joda.time.chrono.ISOChronology $r0;
        int $i1, $i2;
        long $l0;
        org.joda.time.DateTimeField $r1;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r0 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r1 = virtualinvoke $r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        $i2 = $i1 + 100;

        <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT> = $i2;

        return;
    }
}
