public class com.adobe.xmp.impl.ParseRDF extends java.lang.Object implements com.adobe.xmp.XMPError, com.adobe.xmp.XMPConst
{
    public static final int RDFTERM_OTHER;
    public static final int RDFTERM_RDF;
    public static final int RDFTERM_ID;
    public static final int RDFTERM_ABOUT;
    public static final int RDFTERM_PARSE_TYPE;
    public static final int RDFTERM_RESOURCE;
    public static final int RDFTERM_NODE_ID;
    public static final int RDFTERM_DATATYPE;
    public static final int RDFTERM_DESCRIPTION;
    public static final int RDFTERM_LI;
    public static final int RDFTERM_ABOUT_EACH;
    public static final int RDFTERM_ABOUT_EACH_PREFIX;
    public static final int RDFTERM_BAG_ID;
    public static final int RDFTERM_FIRST_CORE;
    public static final int RDFTERM_LAST_CORE;
    public static final int RDFTERM_FIRST_SYNTAX;
    public static final int RDFTERM_LAST_SYNTAX;
    public static final int RDFTERM_FIRST_OLD;
    public static final int RDFTERM_LAST_OLD;
    public static final java.lang.String DEFAULT_PREFIX;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        com.adobe.xmp.impl.ParseRDF r0;

        r0 := @this: com.adobe.xmp.impl.ParseRDF;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static com.adobe.xmp.impl.XMPMetaImpl parse(org.w3c.dom.Node) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl $r0;
        org.w3c.dom.Node r1;

        r1 := @parameter0: org.w3c.dom.Node;

        $r0 = new com.adobe.xmp.impl.XMPMetaImpl;

        specialinvoke $r0.<com.adobe.xmp.impl.XMPMetaImpl: void <init>()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_RDF(com.adobe.xmp.impl.XMPMetaImpl,org.w3c.dom.Node)>($r0, r1);

        return $r0;
    }

    static void rdf_RDF(com.adobe.xmp.impl.XMPMetaImpl, org.w3c.dom.Node) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode $r3;
        org.w3c.dom.Node r0;
        com.adobe.xmp.XMPException $r1;
        com.adobe.xmp.impl.XMPMetaImpl r2;
        boolean $z0;

        r2 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r0 := @parameter1: org.w3c.dom.Node;

        $z0 = interfaceinvoke r0.<org.w3c.dom.Node: boolean hasAttributes()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r2.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_NodeElementList(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node)>(r2, $r3, r0);

        goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid attributes of rdf:RDF element", 202);

        throw $r1;

     label2:
        return;
    }

    private static void rdf_NodeElementList(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, org.w3c.dom.Node) throws com.adobe.xmp.XMPException
    {
        org.w3c.dom.NodeList $r1, $r2;
        com.adobe.xmp.impl.XMPNode r5;
        org.w3c.dom.Node r0, $r3;
        int $i0, i1;
        com.adobe.xmp.impl.XMPMetaImpl r4;
        boolean $z0;

        r4 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r5 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter2: org.w3c.dom.Node;

        i1 = 0;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i0 goto label3;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $z0 = staticinvoke <com.adobe.xmp.impl.ParseRDF: boolean isWhitespaceNode(org.w3c.dom.Node)>($r3);

        if $z0 != 0 goto label2;

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_NodeElement(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r4, r5, $r3, 1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private static void rdf_NodeElement(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, org.w3c.dom.Node, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r2;
        org.w3c.dom.Node r0;
        com.adobe.xmp.XMPException $r3, $r4;
        int $i0;
        com.adobe.xmp.impl.XMPMetaImpl r1;
        boolean z0;

        r1 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r2 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter2: org.w3c.dom.Node;

        z0 := @parameter3: boolean;

        $i0 = staticinvoke <com.adobe.xmp.impl.ParseRDF: int getRDFTermKind(org.w3c.dom.Node)>(r0);

        if $i0 == 8 goto label1;

        if $i0 == 0 goto label1;

        $r4 = new com.adobe.xmp.XMPException;

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Node element must be rdf:Description or typed node", 202);

        throw $r4;

     label1:
        if z0 == 0 goto label2;

        if $i0 != 0 goto label2;

        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Top level typed node not allowed", 203);

        throw $r3;

     label2:
        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_NodeElementAttrs(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r1, r2, r0, z0);

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_PropertyElementList(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r1, r2, r0, z0);

        return;
    }

    private static void rdf_NodeElementAttrs(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, org.w3c.dom.Node, boolean) throws com.adobe.xmp.XMPException
    {
        org.w3c.dom.Node r0, $r3;
        com.adobe.xmp.XMPException $r13, $r14, $r17;
        int $i0, $i1, $i2, i3, i4;
        com.adobe.xmp.impl.XMPMetaImpl r15;
        org.w3c.dom.NamedNodeMap $r1, $r2;
        java.lang.String $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r16, $r18, $r19;
        boolean $z0, z1, $z2, $z3;
        com.adobe.xmp.impl.XMPNode r7;

        r15 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r7 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter2: org.w3c.dom.Node;

        z1 := @parameter3: boolean;

        i3 = 0;

        i4 = 0;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i0 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i4 >= $i0 goto label9;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i4);

        $r4 = "xmlns";

        $r5 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label8;

        $r6 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r6 != null goto label2;

        $r18 = "xmlns";

        $r19 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z3 == 0 goto label2;

        goto label8;

     label2:
        $i1 = staticinvoke <com.adobe.xmp.impl.ParseRDF: int getRDFTermKind(org.w3c.dom.Node)>($r3);

        tableswitch($i1)
        {
            case 0: goto label6;
            case 1: goto label7;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label7;
            case 5: goto label7;
            case 6: goto label3;
            default: goto label7;
        };

     label3:
        if i3 <= 0 goto label4;

        $r14 = new com.adobe.xmp.XMPException;

        specialinvoke $r14.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Mutally exclusive about, ID, nodeID attributes", 202);

        throw $r14;

     label4:
        i3 = i3 + 1;

        if z1 == 0 goto label8;

        if $i1 != 3 goto label8;

        $r8 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        if $r8 == null goto label5;

        $r10 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $i2 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i2 <= 0 goto label5;

        $r11 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r12 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 != 0 goto label8;

        $r13 = new com.adobe.xmp.XMPException;

        specialinvoke $r13.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Mismatched top level rdf:about values", 203);

        throw $r13;

     label5:
        $r9 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: void setName(java.lang.String)>($r9);

        goto label8;

     label6:
        $r16 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addChildNode(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,java.lang.String,boolean)>(r15, r7, $r3, $r16, z1);

        goto label8;

     label7:
        $r17 = new com.adobe.xmp.XMPException;

        specialinvoke $r17.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid nodeElement attribute", 202);

        throw $r17;

     label8:
        i4 = i4 + 1;

        goto label1;

     label9:
        return;
    }

    private static void rdf_PropertyElementList(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, org.w3c.dom.Node, boolean) throws com.adobe.xmp.XMPException
    {
        org.w3c.dom.NodeList $r1, $r2;
        short $s1;
        com.adobe.xmp.impl.XMPNode r5;
        org.w3c.dom.Node r0, $r3;
        com.adobe.xmp.XMPException $r6;
        int $i0, i2;
        com.adobe.xmp.impl.XMPMetaImpl r4;
        boolean $z0, z1;

        r4 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r5 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter2: org.w3c.dom.Node;

        z1 := @parameter3: boolean;

        i2 = 0;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i0 goto label5;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $z0 = staticinvoke <com.adobe.xmp.impl.ParseRDF: boolean isWhitespaceNode(org.w3c.dom.Node)>($r3);

        if $z0 == 0 goto label2;

        goto label4;

     label2:
        $s1 = interfaceinvoke $r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 == 1 goto label3;

        $r6 = new com.adobe.xmp.XMPException;

        specialinvoke $r6.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Expected property element node not found", 202);

        throw $r6;

     label3:
        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_PropertyElement(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r4, r5, $r3, z1);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return;
    }

    private static void rdf_PropertyElement(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, org.w3c.dom.Node, boolean) throws com.adobe.xmp.XMPException
    {
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.util.ArrayList r33, $r36;
        short $s5;
        org.w3c.dom.Node r0, $r6, $r7, $r24;
        com.adobe.xmp.XMPException $r35;
        int $i0, $i1, $i2, $i3, $i4, i6, i7, i8, $i9;
        com.adobe.xmp.impl.XMPMetaImpl r2;
        org.w3c.dom.NamedNodeMap $r1;
        java.lang.String $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r25, $r26, $r27, $r29, $r30, $r31, r34;
        org.w3c.dom.NodeList $r4, $r5;
        java.util.Iterator $r22;
        com.adobe.xmp.impl.XMPNode r3;
        java.lang.Object $r23;

        r2 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r3 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter2: org.w3c.dom.Node;

        z2 := @parameter3: boolean;

        $i0 = staticinvoke <com.adobe.xmp.impl.ParseRDF: int getRDFTermKind(org.w3c.dom.Node)>(r0);

        $z0 = staticinvoke <com.adobe.xmp.impl.ParseRDF: boolean isPropertyElementName(int)>($i0);

        if $z0 != 0 goto label01;

        $r35 = new com.adobe.xmp.XMPException;

        specialinvoke $r35.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid property element name", 202);

        throw $r35;

     label01:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        r33 = null;

        i6 = 0;

     label02:
        $i1 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i6 >= $i1 goto label06;

        $r24 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i6);

        $r25 = "xmlns";

        $r26 = interfaceinvoke $r24.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z14 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z14 != 0 goto label03;

        $r29 = interfaceinvoke $r24.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r29 != null goto label05;

        $r30 = "xmlns";

        $r31 = interfaceinvoke $r24.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z15 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if $z15 == 0 goto label05;

     label03:
        if r33 != null goto label04;

        $r36 = new java.util.ArrayList;

        specialinvoke $r36.<java.util.ArrayList: void <init>()>();

        r33 = $r36;

     label04:
        $r27 = interfaceinvoke $r24.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        interfaceinvoke r33.<java.util.List: boolean add(java.lang.Object)>($r27);

     label05:
        i6 = i6 + 1;

        goto label02;

     label06:
        if r33 == null goto label08;

        $r22 = interfaceinvoke r33.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z13 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label08;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r34 = (java.lang.String) $r23;

        interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node removeNamedItem(java.lang.String)>(r34);

        goto label07;

     label08:
        $i2 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if $i2 <= 3 goto label09;

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_EmptyPropertyElement(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r2, r3, r0, z2);

        goto label25;

     label09:
        i7 = 0;

     label10:
        $i3 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i7 >= $i3 goto label20;

        $r7 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i7);

        $r8 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r9 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r10 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r11 = "xml:lang";

        $r12 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label11;

        $r20 = "ID";

        $z11 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z11 == 0 goto label19;

        $r21 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $z12 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z12 == 0 goto label19;

     label11:
        $r13 = "datatype";

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label12;

        $r19 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $z10 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z10 == 0 goto label12;

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_LiteralPropertyElement(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r2, r3, r0, z2);

        goto label18;

     label12:
        $r14 = "parseType";

        $z5 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z5 == 0 goto label13;

        $r15 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $z6 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z6 != 0 goto label14;

     label13:
        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_EmptyPropertyElement(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r2, r3, r0, z2);

        goto label18;

     label14:
        $r16 = "Literal";

        $z7 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z7 == 0 goto label15;

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_ParseTypeLiteralPropertyElement()>();

        goto label18;

     label15:
        $r17 = "Resource";

        $z8 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z8 == 0 goto label16;

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_ParseTypeResourcePropertyElement(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r2, r3, r0, z2);

        goto label18;

     label16:
        $r18 = "Collection";

        $z9 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z9 == 0 goto label17;

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_ParseTypeCollectionPropertyElement()>();

        goto label18;

     label17:
        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_ParseTypeOtherPropertyElement()>();

     label18:
        return;

     label19:
        i7 = i7 + 1;

        goto label10;

     label20:
        $z1 = interfaceinvoke r0.<org.w3c.dom.Node: boolean hasChildNodes()>();

        if $z1 == 0 goto label24;

        i8 = 0;

     label21:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i4 = interfaceinvoke $r4.<org.w3c.dom.NodeList: int getLength()>();

        if i8 >= $i4 goto label23;

        $r5 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $r6 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i8);

        $s5 = interfaceinvoke $r6.<org.w3c.dom.Node: short getNodeType()>();

        $i9 = (int) $s5;

        if $i9 == 3 goto label22;

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_ResourcePropertyElement(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r2, r3, r0, z2);

        return;

     label22:
        i8 = i8 + 1;

        goto label21;

     label23:
        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_LiteralPropertyElement(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r2, r3, r0, z2);

        goto label25;

     label24:
        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_EmptyPropertyElement(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r2, r3, r0, z2);

     label25:
        return;
    }

    private static void rdf_ResourcePropertyElement(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, org.w3c.dom.Node, boolean) throws com.adobe.xmp.XMPException
    {
        java.lang.StringBuilder $r17, $r18, $r19, $r20;
        short $s1;
        java.lang.String $r10, $r11, $r12, $r15, $r16, $r21, $r23, $r27, $r30, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r43, $r44, $r45, $r46, $r47, $r48;
        com.adobe.xmp.impl.XMPNode r1, $r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, $z15, z16, z17, z18;
        com.adobe.xmp.options.PropertyOptions $r13, $r14, $r24, $r25, $r26, $r28, $r29, $r31;
        org.w3c.dom.Node r2, $r7, $r33;
        com.adobe.xmp.XMPException $r5, $r8, $r9, $r22, $r42;
        com.adobe.xmp.impl.XMPMetaImpl r0;
        int $i0, i2, $i3, i4;
        org.w3c.dom.NamedNodeMap $r32, $r49;
        org.w3c.dom.NodeList $r4, $r6;

        r0 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter2: org.w3c.dom.Node;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label01;

        $r47 = "iX:changes";

        $r48 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z13 = virtualinvoke $r47.<java.lang.String: boolean equals(java.lang.Object)>($r48);

        if $z13 == 0 goto label01;

        return;

     label01:
        $r3 = staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addChildNode(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,java.lang.String,boolean)>(r0, r1, r2, "", z0);

        i2 = 0;

     label02:
        $r49 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i3 = interfaceinvoke $r49.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i2 >= $i3 goto label07;

        $r32 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r33 = interfaceinvoke $r32.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i2);

        $r34 = "xmlns";

        $r35 = interfaceinvoke $r33.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z8 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z8 != 0 goto label06;

        $r36 = interfaceinvoke $r33.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r36 != null goto label03;

        $r45 = "xmlns";

        $r46 = interfaceinvoke $r33.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z12 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>($r46);

        if $z12 == 0 goto label03;

        goto label06;

     label03:
        $r37 = interfaceinvoke $r33.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r38 = interfaceinvoke $r33.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r39 = "xml:lang";

        $r40 = interfaceinvoke $r33.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z9 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r40);

        if $z9 == 0 goto label04;

        $r44 = interfaceinvoke $r33.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addQualifierNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>($r3, "xml:lang", $r44);

        goto label06;

     label04:
        $r41 = "ID";

        $z10 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r37);

        if $z10 == 0 goto label05;

        $r43 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $z11 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z11 == 0 goto label05;

        goto label06;

     label05:
        $r42 = new com.adobe.xmp.XMPException;

        specialinvoke $r42.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid attribute for resource property element", 202);

        throw $r42;

     label06:
        i2 = i2 + 1;

        goto label02;

     label07:
        z14 = 0;

        z18 = 0;

        z17 = 0;

        z16 = 0;

        i4 = 0;

     label08:
        $r4 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r4.<org.w3c.dom.NodeList: int getLength()>();

        if i4 >= $i0 goto label19;

        $r6 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $r7 = interfaceinvoke $r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i4);

        $z1 = staticinvoke <com.adobe.xmp.impl.ParseRDF: boolean isWhitespaceNode(org.w3c.dom.Node)>($r7);

        if $z1 != 0 goto label18;

        $s1 = interfaceinvoke $r7.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label16;

        if z16 != 0 goto label16;

        $r10 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $r11 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        $r12 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        if $z2 == 0 goto label09;

        $r30 = "Bag";

        $z7 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z7 == 0 goto label09;

        $r31 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r31.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>(1);

        goto label13;

     label09:
        if $z2 == 0 goto label10;

        $r27 = "Seq";

        $z6 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z6 == 0 goto label10;

        $r28 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r29 = virtualinvoke $r28.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>(1);

        virtualinvoke $r29.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayOrdered(boolean)>(1);

        goto label13;

     label10:
        if $z2 == 0 goto label11;

        $r23 = "Alt";

        $z5 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z5 == 0 goto label11;

        $r24 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r25 = virtualinvoke $r24.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>(1);

        $r26 = virtualinvoke $r25.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayOrdered(boolean)>(1);

        virtualinvoke $r26.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAlternate(boolean)>(1);

        goto label13;

     label11:
        $r13 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r13.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setStruct(boolean)>(1);

        if $z2 != 0 goto label13;

        $r15 = "Description";

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z4 != 0 goto label13;

        $r16 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r16 != null goto label12;

        $r22 = new com.adobe.xmp.XMPException;

        specialinvoke $r22.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("All XML elements must be in a namespace", 203);

        throw $r22;

     label12:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addQualifierNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>($r3, "rdf:type", $r21);

     label13:
        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_NodeElement(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r0, $r3, $r7, 0);

        $z15 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: boolean getHasValueChild()>();

        if $z15 == 0 goto label14;

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void fixupQualifiedNode(com.adobe.xmp.impl.XMPNode)>($r3);

        goto label15;

     label14:
        $r14 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r14.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z3 == 0 goto label15;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void detectAltText(com.adobe.xmp.impl.XMPNode)>($r3);

     label15:
        z14 = 1;

        z18 = 1;

        z17 = 1;

        z16 = 1;

        goto label18;

     label16:
        if z17 == 0 goto label17;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid child of resource property element", 202);

        throw $r9;

     label17:
        $r8 = new com.adobe.xmp.XMPException;

        specialinvoke $r8.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Children of resource property element must be XML elements", 202);

        throw $r8;

     label18:
        i4 = i4 + 1;

        goto label08;

     label19:
        if z18 != 0 goto label20;

        $r5 = new com.adobe.xmp.XMPException;

        specialinvoke $r5.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Missing child of resource property element", 202);

        throw $r5;

     label20:
        return;
    }

    private static void rdf_LiteralPropertyElement(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, org.w3c.dom.Node, boolean) throws com.adobe.xmp.XMPException
    {
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r10, $r12, $r31;
        short $s2;
        org.w3c.dom.Node r2, $r7, $r14;
        com.adobe.xmp.XMPException $r30, $r32;
        com.adobe.xmp.impl.XMPMetaImpl r0;
        int $i0, $i1, i3, i4, $i5;
        org.w3c.dom.NamedNodeMap $r4, $r13;
        java.lang.String $r11, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r28, r29;
        org.w3c.dom.NodeList $r5, $r6;
        com.adobe.xmp.impl.XMPNode r1, $r3;

        r0 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter2: org.w3c.dom.Node;

        z0 := @parameter3: boolean;

        $r3 = staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addChildNode(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,java.lang.String,boolean)>(r0, r1, r2, null, z0);

        i3 = 0;

     label01:
        $r4 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i0 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i3 >= $i0 goto label06;

        $r13 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r14 = interfaceinvoke $r13.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        $r15 = "xmlns";

        $r16 = interfaceinvoke $r14.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z1 != 0 goto label05;

        $r17 = interfaceinvoke $r14.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r17 != null goto label02;

        $r27 = "xmlns";

        $r28 = interfaceinvoke $r14.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z6 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z6 == 0 goto label02;

        goto label05;

     label02:
        $r18 = interfaceinvoke $r14.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r19 = interfaceinvoke $r14.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r20 = "xml:lang";

        $r21 = interfaceinvoke $r14.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z2 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z2 == 0 goto label03;

        $r26 = interfaceinvoke $r14.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addQualifierNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>($r3, "xml:lang", $r26);

        goto label05;

     label03:
        $r22 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $z3 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z3 == 0 goto label04;

        $r24 = "ID";

        $z4 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z4 != 0 goto label05;

        $r25 = "datatype";

        $z5 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z5 == 0 goto label04;

        goto label05;

     label04:
        $r30 = new com.adobe.xmp.XMPException;

        specialinvoke $r30.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid attribute for literal property element", 202);

        throw $r30;

     label05:
        i3 = i3 + 1;

        goto label01;

     label06:
        r29 = "";

        i4 = 0;

     label07:
        $r5 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i1 = interfaceinvoke $r5.<org.w3c.dom.NodeList: int getLength()>();

        if i4 >= $i1 goto label10;

        $r6 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $r7 = interfaceinvoke $r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i4);

        $s2 = interfaceinvoke $r7.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s2;

        if $i5 != 3 goto label08;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r11 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r29 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label09;

     label08:
        $r32 = new com.adobe.xmp.XMPException;

        specialinvoke $r32.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid child of literal property element", 202);

        throw $r32;

     label09:
        i4 = i4 + 1;

        goto label07;

     label10:
        virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r29);

        return;
    }

    private static void rdf_ParseTypeLiteralPropertyElement() throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPException $r0;

        $r0 = new com.adobe.xmp.XMPException;

        specialinvoke $r0.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("ParseTypeLiteral property element not allowed", 203);

        throw $r0;
    }

    private static void rdf_ParseTypeResourcePropertyElement(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, org.w3c.dom.Node, boolean) throws com.adobe.xmp.XMPException
    {
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.adobe.xmp.options.PropertyOptions $r4;
        org.w3c.dom.Node r2, $r7;
        com.adobe.xmp.XMPException $r16;
        com.adobe.xmp.impl.XMPMetaImpl r0;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r5, $r6;
        java.lang.String $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21;
        com.adobe.xmp.impl.XMPNode r1, $r3;

        r0 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter2: org.w3c.dom.Node;

        z0 := @parameter3: boolean;

        $r3 = staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addChildNode(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,java.lang.String,boolean)>(r0, r1, r2, "", z0);

        $r4 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setStruct(boolean)>(1);

        i1 = 0;

     label1:
        $r5 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i0 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i1 >= $i0 goto label6;

        $r6 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r7 = interfaceinvoke $r6.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        $r8 = "xmlns";

        $r9 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 != 0 goto label5;

        $r10 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r10 != null goto label2;

        $r20 = "xmlns";

        $r21 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z7 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z7 == 0 goto label2;

        goto label5;

     label2:
        $r11 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r12 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r13 = "xml:lang";

        $r14 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z3 == 0 goto label3;

        $r19 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addQualifierNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>($r3, "xml:lang", $r19);

        goto label5;

     label3:
        $r15 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label4;

        $r17 = "ID";

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z5 != 0 goto label5;

        $r18 = "parseType";

        $z6 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z6 == 0 goto label4;

        goto label5;

     label4:
        $r16 = new com.adobe.xmp.XMPException;

        specialinvoke $r16.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid attribute for ParseTypeResource property element", 202);

        throw $r16;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        staticinvoke <com.adobe.xmp.impl.ParseRDF: void rdf_PropertyElementList(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,boolean)>(r0, $r3, r2, 0);

        $z1 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: boolean getHasValueChild()>();

        if $z1 == 0 goto label7;

        staticinvoke <com.adobe.xmp.impl.ParseRDF: void fixupQualifiedNode(com.adobe.xmp.impl.XMPNode)>($r3);

     label7:
        return;
    }

    private static void rdf_ParseTypeCollectionPropertyElement() throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPException $r0;

        $r0 = new com.adobe.xmp.XMPException;

        specialinvoke $r0.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("ParseTypeCollection property element not allowed", 203);

        throw $r0;
    }

    private static void rdf_ParseTypeOtherPropertyElement() throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPException $r0;

        $r0 = new com.adobe.xmp.XMPException;

        specialinvoke $r0.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("ParseTypeOther property element not allowed", 203);

        throw $r0;
    }

    private static void rdf_EmptyPropertyElement(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, org.w3c.dom.Node, boolean) throws com.adobe.xmp.XMPException
    {
        java.lang.String $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r24, $r25, $r26, $r30, $r31, $r32, $r33, $r34, $r35, $r38, $r39, $r42;
        com.adobe.xmp.impl.XMPNode r3, $r4;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, z12, z13, z14, z15, z16, z17, z18, z19, z20, z21;
        com.adobe.xmp.options.PropertyOptions $r20, $r21;
        org.w3c.dom.Node r0, $r6, $r23, r41;
        com.adobe.xmp.XMPException $r17, $r27, $r28, $r29, $r36, $r37, $r40;
        int $i0, $i1, $i2, i3, i4, $i5;
        com.adobe.xmp.impl.XMPMetaImpl r2;
        org.w3c.dom.NamedNodeMap $r1, $r5, $r22, $r43;

        r2 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r3 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter2: org.w3c.dom.Node;

        z1 := @parameter3: boolean;

        z10 = 0;

        z11 = 0;

        z17 = 0;

        z16 = 0;

        z15 = 0;

        z12 = 0;

        z13 = 0;

        z21 = 0;

        z20 = 0;

        z19 = 0;

        z18 = 0;

        r41 = null;

        $z0 = interfaceinvoke r0.<org.w3c.dom.Node: boolean hasChildNodes()>();

        if $z0 == 0 goto label01;

        $r40 = new com.adobe.xmp.XMPException;

        specialinvoke $r40.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Nested content not allowed with rdf:resource or property attributes", 202);

        throw $r40;

     label01:
        i3 = 0;

     label02:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i0 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i3 >= $i0 goto label15;

        $r22 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r23 = interfaceinvoke $r22.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        $r24 = "xmlns";

        $r25 = interfaceinvoke $r23.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z5 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z5 != 0 goto label14;

        $r26 = interfaceinvoke $r23.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r26 != null goto label03;

        $r38 = "xmlns";

        $r39 = interfaceinvoke $r23.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z9 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>($r39);

        if $z9 == 0 goto label03;

        goto label14;

     label03:
        $i2 = staticinvoke <com.adobe.xmp.impl.ParseRDF: int getRDFTermKind(org.w3c.dom.Node)>($r23);

        tableswitch($i2)
        {
            case 0: goto label10;
            case 1: goto label13;
            case 2: goto label04;
            case 3: goto label13;
            case 4: goto label13;
            case 5: goto label05;
            case 6: goto label08;
            default: goto label13;
        };

     label04:
        goto label14;

     label05:
        if z12 == 0 goto label06;

        $r29 = new com.adobe.xmp.XMPException;

        specialinvoke $r29.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty property element can\'t have both rdf:resource and rdf:nodeID", 202);

        throw $r29;

     label06:
        if z18 == 0 goto label07;

        $r28 = new com.adobe.xmp.XMPException;

        specialinvoke $r28.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty property element can\'t have both rdf:value and rdf:resource", 203);

        throw $r28;

     label07:
        z11 = 1;

        z17 = 1;

        z16 = 1;

        z15 = 1;

        if z20 != 0 goto label14;

        r41 = $r23;

        goto label14;

     label08:
        if z17 == 0 goto label09;

        $r27 = new com.adobe.xmp.XMPException;

        specialinvoke $r27.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty property element can\'t have both rdf:resource and rdf:nodeID", 202);

        throw $r27;

     label09:
        z12 = 1;

        goto label14;

     label10:
        $r30 = "value";

        $r31 = interfaceinvoke $r23.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z6 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if $z6 == 0 goto label12;

        $r34 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $r35 = interfaceinvoke $r23.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z8 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z8 == 0 goto label12;

        if z15 == 0 goto label11;

        $r36 = new com.adobe.xmp.XMPException;

        specialinvoke $r36.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty property element can\'t have both rdf:value and rdf:resource", 203);

        throw $r36;

     label11:
        z13 = 1;

        z21 = 1;

        z20 = 1;

        z19 = 1;

        z18 = 1;

        r41 = $r23;

        goto label14;

     label12:
        $r32 = "xml:lang";

        $r33 = interfaceinvoke $r23.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z7 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r33);

        if $z7 != 0 goto label14;

        z10 = 1;

        goto label14;

     label13:
        $r37 = new com.adobe.xmp.XMPException;

        specialinvoke $r37.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Unrecognized attribute of empty property element", 202);

        throw $r37;

     label14:
        i3 = i3 + 1;

        goto label02;

     label15:
        $r4 = staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addChildNode(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,java.lang.String,boolean)>(r2, r3, r0, "", z1);

        z14 = 0;

        if z21 != 0 goto label16;

        if z16 == 0 goto label19;

     label16:
        if r41 == null goto label17;

        $r42 = interfaceinvoke r41.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        goto label18;

     label17:
        $r42 = "";

     label18:
        virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r42);

        if z19 != 0 goto label20;

        $r20 = virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r20.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setURI(boolean)>(1);

        goto label20;

     label19:
        if z10 == 0 goto label20;

        $r21 = virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r21.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setStruct(boolean)>(1);

        z14 = 1;

     label20:
        i4 = 0;

     label21:
        $r43 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i5 = interfaceinvoke $r43.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i4 >= $i5 goto label30;

        $r5 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r6 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i4);

        if $r6 == r41 goto label29;

        $r7 = "xmlns";

        $r8 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 != 0 goto label29;

        $r9 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r9 != null goto label22;

        $r18 = "xmlns";

        $r19 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z4 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z4 == 0 goto label22;

        goto label29;

     label22:
        $i1 = staticinvoke <com.adobe.xmp.impl.ParseRDF: int getRDFTermKind(org.w3c.dom.Node)>($r6);

        tableswitch($i1)
        {
            case 0: goto label25;
            case 1: goto label28;
            case 2: goto label23;
            case 3: goto label28;
            case 4: goto label28;
            case 5: goto label24;
            case 6: goto label23;
            default: goto label28;
        };

     label23:
        goto label29;

     label24:
        $r10 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addQualifierNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>($r4, "rdf:resource", $r10);

        goto label29;

     label25:
        if z14 != 0 goto label26;

        $r15 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r16 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addQualifierNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>($r4, $r15, $r16);

        goto label29;

     label26:
        $r11 = "xml:lang";

        $r12 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label27;

        $r14 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addQualifierNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>($r4, "xml:lang", $r14);

        goto label29;

     label27:
        $r13 = interfaceinvoke $r6.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPNode addChildNode(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,org.w3c.dom.Node,java.lang.String,boolean)>(r2, $r4, $r6, $r13, 0);

        goto label29;

     label28:
        $r17 = new com.adobe.xmp.XMPException;

        specialinvoke $r17.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Unrecognized attribute of empty property element", 202);

        throw $r17;

     label29:
        i4 = i4 + 1;

        goto label21;

     label30:
        return;
    }

    private static com.adobe.xmp.impl.XMPNode addChildNode(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, org.w3c.dom.Node, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.properties.XMPAliasInfo $r15;
        boolean $z0, z1, $z2, $z3, z4, $z5, $z6;
        com.adobe.xmp.options.PropertyOptions $r6, $r8, $r11;
        java.lang.StringBuilder $r22, $r23, $r25;
        com.adobe.xmp.XMPSchemaRegistry $r0;
        org.w3c.dom.Node r1;
        com.adobe.xmp.XMPException $r3, $r9, $r10;
        com.adobe.xmp.impl.XMPMetaImpl r12;
        java.lang.String $r2, $r4, $r5, r7, $r17, r19, r20, $r21, $r24, $r26, $r27, $r28;
        com.adobe.xmp.impl.XMPNode $r13, $r14, $r16, r18, $r29;

        r12 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r18 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter2: org.w3c.dom.Node;

        r7 := @parameter3: java.lang.String;

        z1 := @parameter4: boolean;

        $r0 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        r19 = $r2;

        if $r2 == null goto label05;

        $r4 = "http://purl.org/dc/1.1/";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label01;

        r19 = "http://purl.org/dc/elements/1.1/";

     label01:
        $r5 = interfaceinvoke $r0.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String getNamespacePrefix(java.lang.String)>(r19);

        r20 = $r5;

        if $r5 != null goto label04;

        $r17 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r17 == null goto label02;

        $r21 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        goto label03;

     label02:
        $r21 = "_dflt";

     label03:
        r20 = interfaceinvoke $r0.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String registerNamespace(java.lang.String,java.lang.String)>(r19, $r21);

     label04:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r24 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label06;

     label05:
        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("XML namespace required for all elements and attributes", 202);

        throw $r3;

     label06:
        $r6 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r6.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        z4 = 0;

        if z1 == 0 goto label07;

        $r13 = virtualinvoke r12.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r14 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String,boolean)>($r13, r19, "_dflt", 1);

        virtualinvoke $r14.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(0);

        r18 = $r14;

        $r15 = interfaceinvoke $r0.<com.adobe.xmp.XMPSchemaRegistry: com.adobe.xmp.properties.XMPAliasInfo findAlias(java.lang.String)>($r26);

        if $r15 == null goto label07;

        z4 = 1;

        $r16 = virtualinvoke r12.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        virtualinvoke $r16.<com.adobe.xmp.impl.XMPNode: void setHasAliases(boolean)>(1);

        virtualinvoke $r14.<com.adobe.xmp.impl.XMPNode: void setHasAliases(boolean)>(1);

     label07:
        $r27 = "rdf:li";

        $z5 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        $r28 = "rdf:value";

        $z6 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        $r29 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r29.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>($r26, r7, $r6);

        virtualinvoke $r29.<com.adobe.xmp.impl.XMPNode: void setAlias(boolean)>(z4);

        if $z6 != 0 goto label08;

        virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r29);

        goto label09;

     label08:
        virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(1, $r29);

     label09:
        if $z6 == 0 goto label12;

        if z1 != 0 goto label10;

        $r11 = virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r11.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z3 != 0 goto label11;

     label10:
        $r10 = new com.adobe.xmp.XMPException;

        specialinvoke $r10.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Misplaced rdf:value element", 202);

        throw $r10;

     label11:
        virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: void setHasValueChild(boolean)>(1);

     label12:
        if $z5 == 0 goto label14;

        $r8 = virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z2 != 0 goto label13;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Misplaced rdf:li element", 202);

        throw $r9;

     label13:
        virtualinvoke $r29.<com.adobe.xmp.impl.XMPNode: void setName(java.lang.String)>("[]");

     label14:
        return $r29;
    }

    private static com.adobe.xmp.impl.XMPNode addQualifierNode(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode $r2, r4;
        java.lang.String r0, $r1, r3, $r5;
        boolean $z0;

        r4 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r1 = "xml:lang";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        $r2 = new com.adobe.xmp.impl.XMPNode;

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String normalizeLangValue(java.lang.String)>(r3);

        goto label2;

     label1:
        $r5 = r3;

     label2:
        specialinvoke $r2.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r0, $r5, null);

        virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r2);

        return $r2;
    }

    private static void fixupQualifiedNode(com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.adobe.xmp.options.PropertyOptions $r2, $r4, $r8, $r14, $r16, $r17, $r18;
        java.lang.AssertionError $r5, $r13, $r15;
        com.adobe.xmp.XMPException $r10;
        int $i0, i1, $i2, i3;
        java.lang.String $r11, $r12, $r19;
        java.util.Iterator $r20;
        com.adobe.xmp.impl.XMPNode r0, $r1, $r6, $r7, $r9, r21;
        java.lang.Object $r3;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $z0 = <com.adobe.xmp.impl.ParseRDF: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $r14 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z8 = virtualinvoke $r14.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z8 == 0 goto label01;

        $z9 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z9 != 0 goto label02;

     label01:
        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label02:
        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(1);

        $z1 = <com.adobe.xmp.impl.ParseRDF: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $r11 = "rdf:value";

        $r12 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z7 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z7 != 0 goto label03;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label03:
        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z2 == 0 goto label05;

        $r8 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z6 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z6 == 0 goto label04;

        $r10 = new com.adobe.xmp.XMPException;

        specialinvoke $r10.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Redundant xml:lang for rdf:value element", 203);

        throw $r10;

     label04:
        $r9 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: void removeQualifier(com.adobe.xmp.impl.XMPNode)>($r9);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r9);

     label05:
        i1 = 1;

     label06:
        $i2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: int getQualifierLength()>();

        if i1 > $i2 goto label07;

        $r7 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(i1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r7);

        i1 = i1 + 1;

        goto label06;

     label07:
        i3 = 2;

     label08:
        $i0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i3 > $i0 goto label09;

        $r6 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i3);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r6);

        i3 = i3 + 1;

        goto label08;

     label09:
        $z3 = <com.adobe.xmp.impl.ParseRDF: boolean $assertionsDisabled>;

        if $z3 != 0 goto label10;

        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z4 = virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z4 != 0 goto label10;

        $z5 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean getHasValueChild()>();

        if $z5 != 0 goto label10;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label10:
        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void setHasValueChild(boolean)>(0);

        $r16 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r16.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setStruct(boolean)>(0);

        $r17 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r18 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r17.<com.adobe.xmp.options.PropertyOptions: void mergeWith(com.adobe.xmp.options.PropertyOptions)>($r18);

        $r19 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r19);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void removeChildren()>();

        $r20 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label11:
        $z10 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label12;

        $r3 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (com.adobe.xmp.impl.XMPNode) $r3;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r21);

        goto label11;

     label12:
        return;
    }

    private static boolean isWhitespaceNode(org.w3c.dom.Node)
    {
        char $c2;
        short $s0;
        org.w3c.dom.Node r0;
        int $i1, i3, $i4;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i4 = (int) $s0;

        if $i4 == 3 goto label1;

        return 0;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        i3 = 0;

     label2:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i3 >= $i1 goto label4;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private static boolean isPropertyElementName(int)
    {
        int i0;
        boolean $z0, $z1, $z2;

        i0 := @parameter0: int;

        if i0 == 8 goto label1;

        $z0 = staticinvoke <com.adobe.xmp.impl.ParseRDF: boolean isOldTerm(int)>(i0);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $z1 = staticinvoke <com.adobe.xmp.impl.ParseRDF: boolean isCoreSyntaxTerm(int)>(i0);

        if $z1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    private static boolean isOldTerm(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 10 > i0 goto label1;

        if i0 > 12 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isCoreSyntaxTerm(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 1 > i0 goto label1;

        if i0 > 7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static int getRDFTermKind(org.w3c.dom.Node)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        org.w3c.dom.Attr $r16;
        org.w3c.dom.Node r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r19, $r20, r21, $r22;
        org.w3c.dom.Element $r18;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        r21 = $r2;

        if $r2 != null goto label02;

        $r15 = "about";

        $z12 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z12 != 0 goto label01;

        $r20 = "ID";

        $z15 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z15 == 0 goto label02;

     label01:
        $z13 = r0 instanceof org.w3c.dom.Attr;

        if $z13 == 0 goto label02;

        $r17 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $r16 = (org.w3c.dom.Attr) r0;

        $r18 = interfaceinvoke $r16.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        $r19 = interfaceinvoke $r18.<org.w3c.dom.Element: java.lang.String getNamespaceURI()>();

        $z14 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z14 == 0 goto label02;

        r21 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

     label02:
        $r22 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $z16 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r21);

        if $z16 == 0 goto label14;

        $r3 = "li";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label03;

        return 9;

     label03:
        $r4 = "parseType";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label04;

        return 4;

     label04:
        $r5 = "Description";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label05;

        return 8;

     label05:
        $r6 = "about";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z3 == 0 goto label06;

        return 3;

     label06:
        $r7 = "resource";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z4 == 0 goto label07;

        return 5;

     label07:
        $r8 = "RDF";

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z5 == 0 goto label08;

        return 1;

     label08:
        $r9 = "ID";

        $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z6 == 0 goto label09;

        return 2;

     label09:
        $r10 = "nodeID";

        $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z7 == 0 goto label10;

        return 6;

     label10:
        $r11 = "datatype";

        $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z8 == 0 goto label11;

        return 7;

     label11:
        $r12 = "aboutEach";

        $z9 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z9 == 0 goto label12;

        return 10;

     label12:
        $r13 = "aboutEachPrefix";

        $z10 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z10 == 0 goto label13;

        return 11;

     label13:
        $r14 = "bagID";

        $z11 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z11 == 0 goto label14;

        return 12;

     label14:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.adobe.xmp.impl.ParseRDF: java.lang.String DEFAULT_PREFIX> = "_dflt";

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_LAST_OLD> = 12;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_FIRST_OLD> = 10;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_LAST_SYNTAX> = 9;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_FIRST_SYNTAX> = 1;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_LAST_CORE> = 7;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_FIRST_CORE> = 1;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_BAG_ID> = 12;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_ABOUT_EACH_PREFIX> = 11;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_ABOUT_EACH> = 10;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_LI> = 9;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_DESCRIPTION> = 8;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_DATATYPE> = 7;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_NODE_ID> = 6;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_RESOURCE> = 5;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_PARSE_TYPE> = 4;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_ABOUT> = 3;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_ID> = 2;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_RDF> = 1;

        <com.adobe.xmp.impl.ParseRDF: int RDFTERM_OTHER> = 0;

        $r0 = class "Lcom/adobe/xmp/impl/ParseRDF;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.adobe.xmp.impl.ParseRDF: boolean $assertionsDisabled> = $z1;

        return;
    }
}
