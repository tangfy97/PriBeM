final class com.google.common.collect.Maps$AbstractMapWrapper extends com.google.common.collect.Maps$ImprovedAbstractMap
{
    private final java.util.Map map;

    void <init>(java.util.Map)
    {
        com.google.common.collect.Maps$AbstractMapWrapper r0;
        java.util.Map r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.Maps$AbstractMapWrapper;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<com.google.common.collect.Maps$ImprovedAbstractMap: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Map) $r2;

        r0.<com.google.common.collect.Maps$AbstractMapWrapper: java.util.Map map> = $r3;

        return;
    }

    public void clear()
    {
        com.google.common.collect.Maps$AbstractMapWrapper r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Maps$AbstractMapWrapper;

        $r1 = r0.<com.google.common.collect.Maps$AbstractMapWrapper: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.common.collect.Maps$AbstractMapWrapper r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AbstractMapWrapper;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Maps$AbstractMapWrapper: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.google.common.collect.Maps$AbstractMapWrapper r0;
        java.util.Map $r2;
        java.lang.Object r1, $r3;

        r0 := @this: com.google.common.collect.Maps$AbstractMapWrapper;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Maps$AbstractMapWrapper: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.google.common.collect.Maps$AbstractMapWrapper r0;
        java.util.Map $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AbstractMapWrapper;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.common.collect.Maps$AbstractMapWrapper: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    protected java.util.Set createEntrySet()
    {
        com.google.common.collect.Maps$AbstractMapWrapper r0;
        java.util.Set $r2;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Maps$AbstractMapWrapper;

        $r1 = r0.<com.google.common.collect.Maps$AbstractMapWrapper: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.Maps$AbstractMapWrapper r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.Maps$AbstractMapWrapper;

        $r1 = r0.<com.google.common.collect.Maps$AbstractMapWrapper: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public int size()
    {
        int $i0;
        com.google.common.collect.Maps$AbstractMapWrapper r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.Maps$AbstractMapWrapper;

        $r1 = r0.<com.google.common.collect.Maps$AbstractMapWrapper: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }
}
