public abstract class org.apache.lucene.index.LogMergePolicy extends org.apache.lucene.index.MergePolicy
{
    public static final double LEVEL_LOG_SPAN;
    public static final int DEFAULT_MERGE_FACTOR;
    public static final int DEFAULT_MAX_MERGE_DOCS;
    public static final double DEFAULT_NO_CFS_RATIO;
    public static final long DEFAULT_MAX_CFS_SEGMENT_SIZE;
    protected int mergeFactor;
    protected long minMergeSize;
    protected long maxMergeSize;
    protected long maxMergeSizeForForcedMerge;
    protected int maxMergeDocs;
    protected double noCFSRatio;
    protected long maxCFSSegmentSize;
    protected boolean calibrateSizeByDeletes;
    protected boolean useCompoundFile;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.index.LogMergePolicy r0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        specialinvoke r0.<org.apache.lucene.index.MergePolicy: void <init>()>();

        r0.<org.apache.lucene.index.LogMergePolicy: int mergeFactor> = 10;

        r0.<org.apache.lucene.index.LogMergePolicy: long maxMergeSizeForForcedMerge> = 9223372036854775807L;

        r0.<org.apache.lucene.index.LogMergePolicy: int maxMergeDocs> = 2147483647;

        r0.<org.apache.lucene.index.LogMergePolicy: double noCFSRatio> = 0.1;

        r0.<org.apache.lucene.index.LogMergePolicy: long maxCFSSegmentSize> = 9223372036854775807L;

        r0.<org.apache.lucene.index.LogMergePolicy: boolean calibrateSizeByDeletes> = 1;

        r0.<org.apache.lucene.index.LogMergePolicy: boolean useCompoundFile> = 1;

        return;
    }

    protected boolean verbose()
    {
        org.apache.lucene.index.IndexWriter r3;
        org.apache.lucene.util.SetOnce $r1;
        org.apache.lucene.util.InfoStream $r4;
        java.lang.Object $r2;
        org.apache.lucene.index.LogMergePolicy r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        $r1 = r0.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        r3 = (org.apache.lucene.index.IndexWriter) $r2;

        if r3 == null goto label1;

        $r4 = r3.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r4.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("LMP");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public double getNoCFSRatio()
    {
        org.apache.lucene.index.LogMergePolicy r0;
        double $d0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        $d0 = r0.<org.apache.lucene.index.LogMergePolicy: double noCFSRatio>;

        return $d0;
    }

    public void setNoCFSRatio(double)
    {
        java.lang.IllegalArgumentException $r7;
        byte $b0, $b1;
        int $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.lang.String $r4;
        double d0;
        org.apache.lucene.index.LogMergePolicy r5;

        r5 := @this: org.apache.lucene.index.LogMergePolicy;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i2 = (int) $b0;

        if $i2 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("noCFSRatio must be 0.0 to 1.0 inclusive; got ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r7;

     label2:
        r5.<org.apache.lucene.index.LogMergePolicy: double noCFSRatio> = d0;

        return;
    }

    protected void message(java.lang.String)
    {
        org.apache.lucene.index.IndexWriter $r3;
        org.apache.lucene.util.SetOnce $r1;
        org.apache.lucene.util.InfoStream $r5;
        java.lang.Object $r2;
        java.lang.String r4;
        org.apache.lucene.index.LogMergePolicy r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        r4 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r3 = (org.apache.lucene.index.IndexWriter) $r2;

        $r5 = $r3.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r5.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("LMP", r4);

     label1:
        return;
    }

    public int getMergeFactor()
    {
        int $i0;
        org.apache.lucene.index.LogMergePolicy r0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        $i0 = r0.<org.apache.lucene.index.LogMergePolicy: int mergeFactor>;

        return $i0;
    }

    public void setMergeFactor(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r1;
        org.apache.lucene.index.LogMergePolicy r0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        i0 := @parameter0: int;

        if i0 >= 2 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mergeFactor cannot be less than 2");

        throw $r1;

     label1:
        r0.<org.apache.lucene.index.LogMergePolicy: int mergeFactor> = i0;

        return;
    }

    public boolean useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r1, r5;
        long $l0, $l1, $l5, l6;
        byte $b2, $b3, $b4;
        int $i7, $i8, $i9;
        org.apache.lucene.index.LogMergePolicy r0;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3, $d4;
        java.util.Iterator $r3;
        org.apache.lucene.index.SegmentInfos r2;
        java.lang.Object $r4;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        r2 := @parameter0: org.apache.lucene.index.SegmentInfos;

        r1 := @parameter1: org.apache.lucene.index.SegmentInfoPerCommit;

        $z0 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: boolean getUseCompoundFile()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $l0 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: long size(org.apache.lucene.index.SegmentInfoPerCommit)>(r1);

        $l1 = r0.<org.apache.lucene.index.LogMergePolicy: long maxCFSSegmentSize>;

        $b2 = $l0 cmp $l1;

        $i7 = (int) $b2;

        if $i7 <= 0 goto label2;

        return 0;

     label2:
        $d0 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: double getNoCFSRatio()>();

        $b3 = $d0 cmpl 1.0;

        $i8 = (int) $b3;

        if $i8 < 0 goto label3;

        return 1;

     label3:
        l6 = 0L;

        $r3 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.index.SegmentInfoPerCommit) $r4;

        $l5 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: long size(org.apache.lucene.index.SegmentInfoPerCommit)>(r5);

        l6 = l6 + $l5;

        goto label4;

     label5:
        $d1 = (double) $l0;

        $d2 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: double getNoCFSRatio()>();

        $d3 = (double) l6;

        $d4 = $d2 * $d3;

        $b4 = $d1 cmpg $d4;

        $i9 = (int) $b4;

        if $i9 > 0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        return $z2;
    }

    public void setUseCompoundFile(boolean)
    {
        org.apache.lucene.index.LogMergePolicy r0;
        boolean z0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.index.LogMergePolicy: boolean useCompoundFile> = z0;

        return;
    }

    public boolean getUseCompoundFile()
    {
        org.apache.lucene.index.LogMergePolicy r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        $z0 = r0.<org.apache.lucene.index.LogMergePolicy: boolean useCompoundFile>;

        return $z0;
    }

    public void setCalibrateSizeByDeletes(boolean)
    {
        org.apache.lucene.index.LogMergePolicy r0;
        boolean z0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.index.LogMergePolicy: boolean calibrateSizeByDeletes> = z0;

        return;
    }

    public boolean getCalibrateSizeByDeletes()
    {
        org.apache.lucene.index.LogMergePolicy r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        $z0 = r0.<org.apache.lucene.index.LogMergePolicy: boolean calibrateSizeByDeletes>;

        return $z0;
    }

    public void close()
    {
        org.apache.lucene.index.LogMergePolicy r0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        return;
    }

    protected abstract long size(org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException;

    protected long sizeDocs(org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r1;
        long $l1, $l4, $l5, $l6;
        java.lang.AssertionError $r8;
        int $i0, $i2, $i3, $i7;
        org.apache.lucene.index.LogMergePolicy r0;
        boolean $z0, $z1;
        org.apache.lucene.util.SetOnce $r3;
        org.apache.lucene.index.SegmentInfo $r2, $r6, $r7;
        org.apache.lucene.index.IndexWriter $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        $z0 = r0.<org.apache.lucene.index.LogMergePolicy: boolean calibrateSizeByDeletes>;

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r5 = (org.apache.lucene.index.IndexWriter) $r4;

        $i2 = virtualinvoke $r5.<org.apache.lucene.index.IndexWriter: int numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)>(r1);

        $z1 = <org.apache.lucene.index.LogMergePolicy: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $r7 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i7 = virtualinvoke $r7.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i2 <= $i7 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r6 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i3 = virtualinvoke $r6.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $l5 = (long) $i3;

        $l4 = (long) $i2;

        $l6 = $l5 - $l4;

        return $l6;

     label2:
        $r2 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $l1 = (long) $i0;

        return $l1;
    }

    protected long sizeBytes(org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long $l0, $l6;
        java.lang.AssertionError $r9;
        byte $b5;
        int $i1, $i2, $i3, $i4, $i7;
        org.apache.lucene.index.LogMergePolicy r1;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3;
        org.apache.lucene.util.SetOnce $r2;
        org.apache.lucene.index.SegmentInfo $r5, $r6, $r7;
        org.apache.lucene.index.IndexWriter $r4;
        float $f0, $f1, $f2;
        java.lang.Object $r3;

        r1 := @this: org.apache.lucene.index.LogMergePolicy;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        $l0 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes()>();

        $z0 = r1.<org.apache.lucene.index.LogMergePolicy: boolean calibrateSizeByDeletes>;

        if $z0 == 0 goto label6;

        $r2 = r1.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r4 = (org.apache.lucene.index.IndexWriter) $r3;

        $i1 = virtualinvoke $r4.<org.apache.lucene.index.IndexWriter: int numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)>(r0);

        $r5 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i2 = virtualinvoke $r5.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i2 > 0 goto label1;

        $f2 = 0.0F;

        goto label2;

     label1:
        $f0 = (float) $i1;

        $r6 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i3 = virtualinvoke $r6.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        $f1 = (float) $i3;

        $f2 = $f0 / $f1;

     label2:
        $d3 = (double) $f2;

        $z1 = <org.apache.lucene.index.LogMergePolicy: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $b5 = $d3 cmpg 1.0;

        $i7 = (int) $b5;

        if $i7 <= 0 goto label3;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label3:
        $r7 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i4 = virtualinvoke $r7.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if $i4 > 0 goto label4;

        $l6 = $l0;

        goto label5;

     label4:
        $d1 = (double) $l0;

        $d0 = 1.0 - $d3;

        $d2 = $d1 * $d0;

        $l6 = (long) $d2;

     label5:
        return $l6;

     label6:
        return $l0;
    }

    protected boolean isMerged(org.apache.lucene.index.SegmentInfos, int, java.util.Map) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r2, r6;
        org.apache.lucene.index.SegmentInfos r0;
        java.util.Map r3;
        int $i0, i1, i2, i3;
        java.lang.Boolean r5;
        java.lang.Object $r4;
        org.apache.lucene.index.LogMergePolicy r1;
        boolean $z0, z1, $z2;

        r1 := @this: org.apache.lucene.index.LogMergePolicy;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfos;

        i1 := @parameter1: int;

        r3 := @parameter2: java.util.Map;

        $i0 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: int size()>();

        i2 = 0;

        r6 = null;

        z1 = 0;

        i3 = 0;

     label1:
        if i3 >= $i0 goto label3;

        if i2 > i1 goto label3;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i3);

        $r4 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.lang.Boolean) $r4;

        if r5 == null goto label2;

        z1 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();

        i2 = i2 + 1;

        r6 = $r2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        if i2 > i1 goto label5;

        if i2 != 1 goto label4;

        if z1 == 0 goto label4;

        $z0 = virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: boolean isMerged(org.apache.lucene.index.SegmentInfoPerCommit)>(r6);

        if $z0 == 0 goto label5;

     label4:
        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    protected boolean isMerged(org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r4;
        java.lang.AssertionError $r11;
        byte $b1;
        org.apache.lucene.store.Directory $r7, $r8;
        int $i0, $i2;
        org.apache.lucene.index.LogMergePolicy r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        double $d0;
        org.apache.lucene.util.SetOnce $r1;
        org.apache.lucene.index.SegmentInfo $r5, $r6, $r9;
        org.apache.lucene.index.IndexWriter r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        r4 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        $r1 = r0.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        r3 = (org.apache.lucene.index.IndexWriter) $r2;

        $z0 = <org.apache.lucene.index.LogMergePolicy: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r3 != null goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $i0 = virtualinvoke r3.<org.apache.lucene.index.IndexWriter: int numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)>(r4);

        if $i0 <= 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        if $z4 != 0 goto label5;

        $r5 = r4.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $z1 = virtualinvoke $r5.<org.apache.lucene.index.SegmentInfo: boolean hasSeparateNorms()>();

        if $z1 != 0 goto label5;

        $r6 = r4.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r7 = $r6.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $r8 = virtualinvoke r3.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory getDirectory()>();

        if $r7 != $r8 goto label5;

        $r9 = r4.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $z2 = virtualinvoke $r9.<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()>();

        $z3 = r0.<org.apache.lucene.index.LogMergePolicy: boolean useCompoundFile>;

        if $z2 == $z3 goto label4;

        $d0 = r0.<org.apache.lucene.index.LogMergePolicy: double noCFSRatio>;

        $b1 = $d0 cmpg 1.0;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label5;

     label4:
        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        return $z5;
    }

    private org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMergesSizeLimit(org.apache.lucene.index.SegmentInfos, int, int) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r6, $r7, $r10;
        byte $b3, $b14;
        org.apache.lucene.index.LogMergePolicy r5;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.SegmentInfos r1;
        java.util.List $r2, $r4, $r9, $r21, $r22;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r25;
        long $l1, $l2, $l9, $l11, $l13;
        int $i0, $i4, $i5, $i6, $i7, $i8, $i10, $i12, $i15, $i16, i17, i18, i19, i20, $i21, $i22, $i23, $i25;
        java.lang.String $r19;
        org.apache.lucene.index.MergePolicy$MergeSpecification $r23, $r24;
        org.apache.lucene.index.MergePolicy$OneMerge $r26, $r27, $r28;

        r5 := @this: org.apache.lucene.index.LogMergePolicy;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfos;

        i17 := @parameter1: int;

        i18 := @parameter2: int;

        $r24 = new org.apache.lucene.index.MergePolicy$MergeSpecification;

        specialinvoke $r24.<org.apache.lucene.index.MergePolicy$MergeSpecification: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: java.util.List asList()>();

        i19 = i18 - 1;

     label01:
        if i19 < 0 goto label08;

        $r7 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i19);

        $l1 = virtualinvoke r5.<org.apache.lucene.index.LogMergePolicy: long size(org.apache.lucene.index.SegmentInfoPerCommit)>($r7);

        $l2 = r5.<org.apache.lucene.index.LogMergePolicy: long maxMergeSizeForForcedMerge>;

        $b3 = $l1 cmp $l2;

        $i22 = (int) $b3;

        if $i22 > 0 goto label02;

        $l11 = virtualinvoke r5.<org.apache.lucene.index.LogMergePolicy: long sizeDocs(org.apache.lucene.index.SegmentInfoPerCommit)>($r7);

        $i12 = r5.<org.apache.lucene.index.LogMergePolicy: int maxMergeDocs>;

        $l13 = (long) $i12;

        $b14 = $l11 cmp $l13;

        $i23 = (int) $b14;

        if $i23 <= 0 goto label06;

     label02:
        $z1 = virtualinvoke r5.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z1 == 0 goto label03;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findForcedMergesSizeLimit: skip segment=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": size is > maxMergeSize (");

        $l9 = r5.<org.apache.lucene.index.LogMergePolicy: long maxMergeSizeForForcedMerge>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") or sizeDocs is > maxMergeDocs (");

        $i10 = r5.<org.apache.lucene.index.LogMergePolicy: int maxMergeDocs>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r19);

     label03:
        $i4 = i18 - i19;

        $i5 = $i4 - 1;

        if $i5 > 1 goto label04;

        $i7 = i18 - 1;

        if i19 == $i7 goto label05;

        $i8 = i19 + 1;

        $r10 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>($i8);

        $z2 = virtualinvoke r5.<org.apache.lucene.index.LogMergePolicy: boolean isMerged(org.apache.lucene.index.SegmentInfoPerCommit)>($r10);

        if $z2 != 0 goto label05;

     label04:
        $r26 = new org.apache.lucene.index.MergePolicy$OneMerge;

        $i6 = i19 + 1;

        $r9 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>($i6, i18);

        specialinvoke $r26.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r9);

        virtualinvoke $r24.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r26);

     label05:
        i18 = i19;

        goto label07;

     label06:
        $i16 = i18 - i19;

        $i15 = r5.<org.apache.lucene.index.LogMergePolicy: int mergeFactor>;

        if $i16 != $i15 goto label07;

        $r27 = new org.apache.lucene.index.MergePolicy$OneMerge;

        $r21 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(i19, i18);

        specialinvoke $r27.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r21);

        virtualinvoke $r24.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r27);

        i18 = i19;

     label07:
        $i25 = (int) -1;

        i19 = i19 + $i25;

        goto label01;

     label08:
        if i18 <= 0 goto label10;

        i20 = i19 + 1;

        $i0 = i20 + 1;

        if $i0 < i18 goto label09;

        $r6 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i20);

        $z0 = virtualinvoke r5.<org.apache.lucene.index.LogMergePolicy: boolean isMerged(org.apache.lucene.index.SegmentInfoPerCommit)>($r6);

        if $z0 != 0 goto label10;

     label09:
        $r28 = new org.apache.lucene.index.MergePolicy$OneMerge;

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(i20, i18);

        specialinvoke $r28.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r4);

        virtualinvoke $r24.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r28);

     label10:
        $r22 = $r24.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $i21 = interfaceinvoke $r22.<java.util.List: int size()>();

        if $i21 != 0 goto label11;

        $r23 = null;

        goto label12;

     label11:
        $r23 = $r24;

     label12:
        return $r23;
    }

    private org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMergesMaxNumSegments(org.apache.lucene.index.SegmentInfos, int, int) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r7, $r8, $r11;
        byte $b13, $b14;
        org.apache.lucene.index.LogMergePolicy r3;
        boolean $z0;
        org.apache.lucene.index.SegmentInfos r1;
        java.util.List $r2, $r4, $r6, $r10, $r13, $r14;
        long $l11, $l12, $l16, l21, l24;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i15, $i17, $i18, $i19, i20, i22, i23, i25, $i26, $i27, $i28;
        org.apache.lucene.index.MergePolicy$MergeSpecification $r15, $r16;
        org.apache.lucene.index.MergePolicy$OneMerge $r17, $r18, $r19;

        r3 := @this: org.apache.lucene.index.LogMergePolicy;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfos;

        i0 := @parameter1: int;

        i20 := @parameter2: int;

        $r16 = new org.apache.lucene.index.MergePolicy$MergeSpecification;

        specialinvoke $r16.<org.apache.lucene.index.MergePolicy$MergeSpecification: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: java.util.List asList()>();

     label01:
        $i1 = i20 - i0;

        $i3 = $i1 + 1;

        $i2 = r3.<org.apache.lucene.index.LogMergePolicy: int mergeFactor>;

        if $i3 < $i2 goto label02;

        $r17 = new org.apache.lucene.index.MergePolicy$OneMerge;

        $i17 = r3.<org.apache.lucene.index.LogMergePolicy: int mergeFactor>;

        $i18 = i20 - $i17;

        $r13 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>($i18, i20);

        specialinvoke $r17.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r13);

        virtualinvoke $r16.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r17);

        $i19 = r3.<org.apache.lucene.index.LogMergePolicy: int mergeFactor>;

        i20 = i20 - $i19;

        goto label01;

     label02:
        $r4 = $r16.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $i4 = interfaceinvoke $r4.<java.util.List: int size()>();

        if 0 != $i4 goto label11;

        if i0 != 1 goto label04;

        if i20 > 1 goto label03;

        $r11 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(0);

        $z0 = virtualinvoke r3.<org.apache.lucene.index.LogMergePolicy: boolean isMerged(org.apache.lucene.index.SegmentInfoPerCommit)>($r11);

        if $z0 != 0 goto label11;

     label03:
        $r18 = new org.apache.lucene.index.MergePolicy$OneMerge;

        $r10 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(0, i20);

        specialinvoke $r18.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r10);

        virtualinvoke $r16.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r18);

        goto label11;

     label04:
        if i20 <= i0 goto label11;

        $i5 = i20 - i0;

        i6 = $i5 + 1;

        l21 = 0L;

        i22 = 0;

        i23 = 0;

     label05:
        $i7 = i20 - i6;

        $i8 = $i7 + 1;

        if i23 >= $i8 goto label10;

        l24 = 0L;

        i25 = 0;

     label06:
        if i25 >= i6 goto label07;

        $i15 = i25 + i23;

        $r8 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>($i15);

        $l16 = virtualinvoke r3.<org.apache.lucene.index.LogMergePolicy: long size(org.apache.lucene.index.SegmentInfoPerCommit)>($r8);

        l24 = l24 + $l16;

        i25 = i25 + 1;

        goto label06;

     label07:
        if i23 == 0 goto label08;

        $i10 = i23 - 1;

        $r7 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>($i10);

        $l11 = virtualinvoke r3.<org.apache.lucene.index.LogMergePolicy: long size(org.apache.lucene.index.SegmentInfoPerCommit)>($r7);

        $l12 = 2L * $l11;

        $b13 = l24 cmp $l12;

        $i27 = (int) $b13;

        if $i27 >= 0 goto label09;

        $b14 = l24 cmp l21;

        $i28 = (int) $b14;

        if $i28 >= 0 goto label09;

     label08:
        i22 = i23;

        l21 = l24;

     label09:
        i23 = i23 + 1;

        goto label05;

     label10:
        $r19 = new org.apache.lucene.index.MergePolicy$OneMerge;

        $i9 = i22 + i6;

        $r6 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(i22, $i9);

        specialinvoke $r19.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r6);

        virtualinvoke $r16.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r19);

     label11:
        $r14 = $r16.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $i26 = interfaceinvoke $r14.<java.util.List: int size()>();

        if $i26 != 0 goto label12;

        $r15 = null;

        goto label13;

     label12:
        $r15 = $r16;

     label13:
        return $r15;
    }

    public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r5, $r6, $r7;
        byte $b3, $b7;
        java.util.Map r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        org.apache.lucene.index.LogMergePolicy r0;
        org.apache.lucene.index.SegmentInfos r1;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r17;
        long $l1, $l2, $l4, $l6;
        java.lang.AssertionError $r16;
        int i0, $i5, i8, i9, $i11, $i12, $i13;
        java.lang.String $r14;
        org.apache.lucene.index.MergePolicy$MergeSpecification $r3, $r4;
        java.lang.Object $r8;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfos;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Map;

        $z0 = <org.apache.lucene.index.LogMergePolicy: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if i0 > 0 goto label01;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label01:
        $z1 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z1 == 0 goto label02;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findForcedMerges: maxNumSegs=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" segsToMerge=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r14);

     label02:
        $z2 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: boolean isMerged(org.apache.lucene.index.SegmentInfos,int,java.util.Map)>(r1, i0, r2);

        if $z2 == 0 goto label04;

        $z6 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z6 == 0 goto label03;

        virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>("already merged; skip");

     label03:
        return null;

     label04:
        i8 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: int size()>();

     label05:
        if i8 <= 0 goto label07;

        $i11 = (int) -1;

        i8 = i8 + $i11;

        $r7 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i8);

        $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        if $r8 == null goto label06;

        i8 = i8 + 1;

        goto label07;

     label06:
        goto label05;

     label07:
        if i8 != 0 goto label09;

        $z5 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z5 == 0 goto label08;

        virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>("last == 0; skip");

     label08:
        return null;

     label09:
        if i0 != 1 goto label11;

        if i8 != 1 goto label11;

        $r6 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(0);

        $z3 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: boolean isMerged(org.apache.lucene.index.SegmentInfoPerCommit)>($r6);

        if $z3 == 0 goto label11;

        $z4 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z4 == 0 goto label10;

        virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>("already 1 seg; skip");

     label10:
        return null;

     label11:
        z7 = 0;

        i9 = 0;

     label12:
        if i9 >= i8 goto label15;

        $r5 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i9);

        $l1 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: long size(org.apache.lucene.index.SegmentInfoPerCommit)>($r5);

        $l2 = r0.<org.apache.lucene.index.LogMergePolicy: long maxMergeSizeForForcedMerge>;

        $b3 = $l1 cmp $l2;

        $i12 = (int) $b3;

        if $i12 > 0 goto label13;

        $l4 = virtualinvoke r0.<org.apache.lucene.index.LogMergePolicy: long sizeDocs(org.apache.lucene.index.SegmentInfoPerCommit)>($r5);

        $i5 = r0.<org.apache.lucene.index.LogMergePolicy: int maxMergeDocs>;

        $l6 = (long) $i5;

        $b7 = $l4 cmp $l6;

        $i13 = (int) $b7;

        if $i13 <= 0 goto label14;

     label13:
        z7 = 1;

        goto label15;

     label14:
        i9 = i9 + 1;

        goto label12;

     label15:
        if z7 == 0 goto label16;

        $r4 = specialinvoke r0.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMergesSizeLimit(org.apache.lucene.index.SegmentInfos,int,int)>(r1, i0, i8);

        return $r4;

     label16:
        $r3 = specialinvoke r0.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMergesMaxNumSegments(org.apache.lucene.index.SegmentInfos,int,int)>(r1, i0, i8);

        return $r3;
    }

    public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r15;
        org.apache.lucene.index.SegmentInfo $r36;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r19, $r20, $r21, $r22, $r23, $r28, $r29, $r30, $r31, $r32, $r35, $r38, $r39, $r43, $r44, $r45, $r48, $r51, $r52, $r54, $r56;
        java.lang.AssertionError $r50;
        java.lang.String $r14, $r24, $r33, $r37, $r40, $r46;
        org.apache.lucene.util.SetOnce $r4;
        org.apache.lucene.index.MergePolicy$MergeSpecification $r49;
        org.apache.lucene.index.MergePolicy$OneMerge $r53, $r55, $r57;
        org.apache.lucene.index.LogMergePolicy r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.index.SegmentInfos r0;
        java.util.List $r1, $r7, $r17, $r26;
        org.apache.lucene.index.IndexWriter $r47;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i10, $i12, $i14, $i16, $i18;
        java.lang.Object $r5;

        r2 := @this: org.apache.lucene.index.LogMergePolicy;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfos;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: java.util.List asList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $z0 = virtualinvoke r2.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z0 == 0 goto label01;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findForcedDeleteMerges: ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" segments");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r46);

     label01:
        $r49 = new org.apache.lucene.index.MergePolicy$MergeSpecification;

        specialinvoke $r49.<org.apache.lucene.index.MergePolicy$MergeSpecification: void <init>()>();

        $i10 = (int) -1;

        i7 = $i10;

        $r4 = r2.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r47 = (org.apache.lucene.index.IndexWriter) $r5;

        $z1 = <org.apache.lucene.index.LogMergePolicy: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        if $r47 != null goto label02;

        $r50 = new java.lang.AssertionError;

        specialinvoke $r50.<java.lang.AssertionError: void <init>()>();

        throw $r50;

     label02:
        i8 = 0;

     label03:
        if i8 >= $i0 goto label10;

        $r15 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i8);

        $i2 = virtualinvoke $r47.<org.apache.lucene.index.IndexWriter: int numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)>($r15);

        if $i2 <= 0 goto label07;

        $z4 = virtualinvoke r2.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z4 == 0 goto label04;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  segment ");

        $r36 = $r15.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r37 = $r36.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has deletions");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r40);

     label04:
        $i12 = (int) -1;

        if i7 != $i12 goto label05;

        i7 = i8;

        goto label09;

     label05:
        $i5 = i8 - i7;

        $i4 = r2.<org.apache.lucene.index.LogMergePolicy: int mergeFactor>;

        if $i5 != $i4 goto label09;

        $z5 = virtualinvoke r2.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z5 == 0 goto label06;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  add merge ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i6 = i8 - 1;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inclusive");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r33);

     label06:
        $r53 = new org.apache.lucene.index.MergePolicy$OneMerge;

        $r26 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(i7, i8);

        specialinvoke $r53.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r26);

        virtualinvoke $r49.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r53);

        i7 = i8;

        goto label09;

     label07:
        $i14 = (int) -1;

        if i7 == $i14 goto label09;

        $z3 = virtualinvoke r2.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z3 == 0 goto label08;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  add merge ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i3 = i8 - 1;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inclusive");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r24);

     label08:
        $r55 = new org.apache.lucene.index.MergePolicy$OneMerge;

        $r17 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(i7, i8);

        specialinvoke $r55.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r17);

        virtualinvoke $r49.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r55);

        $i16 = (int) -1;

        i7 = $i16;

     label09:
        i8 = i8 + 1;

        goto label03;

     label10:
        $i18 = (int) -1;

        if i7 == $i18 goto label12;

        $z2 = virtualinvoke r2.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z2 == 0 goto label11;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  add merge ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i1 = $i0 - 1;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inclusive");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r14);

     label11:
        $r57 = new org.apache.lucene.index.MergePolicy$OneMerge;

        $r7 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(i7, $i0);

        specialinvoke $r57.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r7);

        virtualinvoke $r49.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r57);

     label12:
        return $r49;
    }

    public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.MergePolicy$MergeTrigger, org.apache.lucene.index.SegmentInfos) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r32, $r35, $r53, r84;
        byte $b3, $b6, $b7, $b11, $b15, $b18, $b19, $b20, $b22, $b25;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r19, $r24, $r25, $r26, $r27, $r28, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r56, $r61, $r62, $r63, $r64, $r69, $r70, $r73, $r74, $r76, $r77, $r78, $r87, $r90, $r91, $r92, $r96, $r98;
        java.lang.Object[] $r65;
        long $l2, $l4, $l9, $l10, $l12, $l14, $l21, $l23, $l24, $l26, l28;
        org.apache.lucene.index.MergePolicy$MergeSpecification r83, $r93;
        org.apache.lucene.index.MergePolicy$OneMerge $r97;
        java.util.Locale $r66;
        org.apache.lucene.index.LogMergePolicy r1;
        java.util.Collection $r6;
        int $i0, $i1, $i5, $i8, $i13, $i16, $i17, i27, i29, i30, i31, i32, $i33, i34, i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i47, $i48;
        java.lang.Object $r4, $r7, $r21, $r30, $r33, $r38, $r49, $r51, $r58;
        java.lang.Double $r67;
        java.lang.AssertionError $r95;
        java.util.ArrayList $r88, $r94;
        java.lang.String $r15, $r23, $r29, $r48, $r60, $r68, $r71, $r79, r82, $r85, $r86;
        org.apache.lucene.util.SetOnce $r3, $r20, $r57;
        org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel $r8, $r31, $r34, $r39, $r50, $r52, $r89;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, $z12;
        org.apache.lucene.index.SegmentInfos r0;
        org.apache.lucene.index.IndexWriter $r5, $r22, $r59;
        float $f0, $f1, $f2, $f3, $f4, f5, f6, f7, f8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        org.apache.lucene.index.MergePolicy$MergeTrigger r80;

        r1 := @this: org.apache.lucene.index.LogMergePolicy;

        r80 := @parameter0: org.apache.lucene.index.MergePolicy$MergeTrigger;

        r0 := @parameter1: org.apache.lucene.index.SegmentInfos;

        $i0 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: int size()>();

        $z0 = virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z0 == 0 goto label01;

        $r87 = new java.lang.StringBuilder;

        specialinvoke $r87.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findMerges: ");

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" segments");

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r79);

     label01:
        $r88 = new java.util.ArrayList;

        specialinvoke $r88.<java.util.ArrayList: void <init>()>();

        $i1 = r1.<org.apache.lucene.index.LogMergePolicy: int mergeFactor>;

        $d0 = (double) $i1;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $f4 = (float) $d1;

        $r3 = r1.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r5 = (org.apache.lucene.index.IndexWriter) $r4;

        $r6 = virtualinvoke $r5.<org.apache.lucene.index.IndexWriter: java.util.Collection getMergingSegments()>();

        i27 = 0;

     label02:
        if i27 >= $i0 goto label08;

        $r53 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i27);

        $l21 = virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: long size(org.apache.lucene.index.SegmentInfoPerCommit)>($r53);

        l28 = $l21;

        $b22 = $l21 cmp 1L;

        $i37 = (int) $b22;

        if $i37 >= 0 goto label03;

        l28 = 1L;

     label03:
        $r89 = new org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel;

        $d8 = (double) l28;

        $d9 = staticinvoke <java.lang.Math: double log(double)>($d8);

        $f1 = (float) $d9;

        $f2 = $f1 / $f4;

        specialinvoke $r89.<org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel: void <init>(org.apache.lucene.index.SegmentInfoPerCommit,float,int)>($r53, $f2, i27);

        interfaceinvoke $r88.<java.util.List: boolean add(java.lang.Object)>($r89);

        $z8 = virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z8 == 0 goto label07;

        $l23 = virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: long sizeBytes(org.apache.lucene.index.SegmentInfoPerCommit)>($r53);

        $z9 = interfaceinvoke $r6.<java.util.Collection: boolean contains(java.lang.Object)>($r53);

        if $z9 == 0 goto label04;

        $r86 = " [merging]";

        $r85 = " [merging]";

        goto label05;

     label04:
        $r86 = "";

        $r85 = "";

     label05:
        r82 = $r86;

        $l24 = r1.<org.apache.lucene.index.LogMergePolicy: long maxMergeSize>;

        $b25 = l28 cmp $l24;

        $i38 = (int) $b25;

        if $i38 < 0 goto label06;

        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [skip: too large]");

        r82 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seg=");

        $r57 = r1.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r58 = virtualinvoke $r57.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r59 = (org.apache.lucene.index.IndexWriter) $r58;

        $r60 = virtualinvoke $r59.<org.apache.lucene.index.IndexWriter: java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)>($r53);

        $r61 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" level=");

        $f3 = $r89.<org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel: float level>;

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $r66 = <java.util.Locale: java.util.Locale ROOT>;

        $r65 = newarray (java.lang.Object)[1];

        $l26 = $l23 / 1024L;

        $d10 = (double) $l26;

        $d11 = $d10 / 1024.0;

        $r67 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        $r65[0] = $r67;

        $r68 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r66, "%.3f MB", $r65);

        $r69 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r82);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r71);

     label07:
        i27 = i27 + 1;

        goto label02;

     label08:
        $l2 = r1.<org.apache.lucene.index.LogMergePolicy: long minMergeSize>;

        $b3 = $l2 cmp 0L;

        $i39 = (int) $b3;

        if $i39 > 0 goto label09;

        f5 = 0.0F;

        goto label10;

     label09:
        $l4 = r1.<org.apache.lucene.index.LogMergePolicy: long minMergeSize>;

        $d2 = (double) $l4;

        $d3 = staticinvoke <java.lang.Math: double log(double)>($d2);

        $d4 = (double) $f4;

        $d5 = $d3 / $d4;

        f5 = (float) $d5;

     label10:
        r83 = null;

        $i5 = interfaceinvoke $r88.<java.util.List: int size()>();

        i29 = 0;

     label11:
        if i29 >= $i5 goto label37;

        $r7 = interfaceinvoke $r88.<java.util.List: java.lang.Object get(int)>(i29);

        $r8 = (org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel) $r7;

        f6 = $r8.<org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel: float level>;

        i30 = 1 + i29;

     label12:
        if i30 >= $i5 goto label14;

        $r51 = interfaceinvoke $r88.<java.util.List: java.lang.Object get(int)>(i30);

        $r52 = (org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel) $r51;

        f7 = $r52.<org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel: float level>;

        $b20 = f7 cmpl f6;

        $i40 = (int) $b20;

        if $i40 <= 0 goto label13;

        f6 = f7;

     label13:
        i30 = i30 + 1;

        goto label12;

     label14:
        $b6 = f6 cmpg f5;

        $i41 = (int) $b6;

        if $i41 > 0 goto label15;

        f8 = -1.0F;

        goto label16;

     label15:
        $d6 = (double) f6;

        $d7 = $d6 - 0.75;

        f8 = (float) $d7;

        $b7 = f8 cmpg f5;

        $i42 = (int) $b7;

        if $i42 >= 0 goto label16;

        $b19 = f6 cmpl f5;

        $i43 = (int) $b19;

        if $i43 < 0 goto label16;

        f8 = f5;

     label16:
        i31 = $i5 - 1;

     label17:
        if i31 < i29 goto label19;

        $r49 = interfaceinvoke $r88.<java.util.List: java.lang.Object get(int)>(i31);

        $r50 = (org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel) $r49;

        $f0 = $r50.<org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel: float level>;

        $b18 = $f0 cmpl f8;

        $i44 = (int) $b18;

        if $i44 < 0 goto label18;

        goto label19;

     label18:
        $i46 = (int) -1;

        i31 = i31 + $i46;

        goto label17;

     label19:
        $z1 = virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z1 == 0 goto label20;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  level ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f8);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f6);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i16 = 1 + i31;

        $i17 = $i16 - i29;

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" segments");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r48);

     label20:
        $i8 = r1.<org.apache.lucene.index.LogMergePolicy: int mergeFactor>;

        i32 = i29 + $i8;

     label21:
        $i33 = 1 + i31;

        if i32 > $i33 goto label36;

        z10 = 0;

        z11 = 0;

        i34 = i29;

     label22:
        if i34 >= i32 goto label27;

        $r38 = interfaceinvoke $r88.<java.util.List: java.lang.Object get(int)>(i34);

        $r39 = (org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel) $r38;

        r84 = $r39.<org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z7 = z10;

        $l9 = virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: long size(org.apache.lucene.index.SegmentInfoPerCommit)>(r84);

        $l10 = r1.<org.apache.lucene.index.LogMergePolicy: long maxMergeSize>;

        $b11 = $l9 cmp $l10;

        $i47 = (int) $b11;

        if $i47 >= 0 goto label23;

        $l12 = virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: long sizeDocs(org.apache.lucene.index.SegmentInfoPerCommit)>(r84);

        $i13 = r1.<org.apache.lucene.index.LogMergePolicy: int maxMergeDocs>;

        $l14 = (long) $i13;

        $b15 = $l12 cmp $l14;

        $i48 = (int) $b15;

        if $i48 < 0 goto label24;

     label23:
        $z12 = 1;

        goto label25;

     label24:
        $z12 = 0;

     label25:
        z10 = $z7 | $z12;

        $z6 = interfaceinvoke $r6.<java.util.Collection: boolean contains(java.lang.Object)>(r84);

        if $z6 == 0 goto label26;

        z11 = 1;

        goto label27;

     label26:
        i34 = i34 + 1;

        goto label22;

     label27:
        if z11 == 0 goto label28;

        goto label35;

     label28:
        if z10 != 0 goto label34;

        if r83 != null goto label29;

        $r93 = new org.apache.lucene.index.MergePolicy$MergeSpecification;

        specialinvoke $r93.<org.apache.lucene.index.MergePolicy$MergeSpecification: void <init>()>();

        r83 = $r93;

     label29:
        $r94 = new java.util.ArrayList;

        specialinvoke $r94.<java.util.ArrayList: void <init>()>();

        i35 = i29;

     label30:
        if i35 >= i32 goto label32;

        $r30 = interfaceinvoke $r88.<java.util.List: java.lang.Object get(int)>(i35);

        $r31 = (org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel) $r30;

        $r32 = $r31.<org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel: org.apache.lucene.index.SegmentInfoPerCommit info>;

        interfaceinvoke $r94.<java.util.List: boolean add(java.lang.Object)>($r32);

        $z4 = <org.apache.lucene.index.LogMergePolicy: boolean $assertionsDisabled>;

        if $z4 != 0 goto label31;

        $r33 = interfaceinvoke $r88.<java.util.List: java.lang.Object get(int)>(i35);

        $r34 = (org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel) $r33;

        $r35 = $r34.<org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel: org.apache.lucene.index.SegmentInfoPerCommit info>;

        $z5 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: boolean contains(org.apache.lucene.index.SegmentInfoPerCommit)>($r35);

        if $z5 != 0 goto label31;

        $r95 = new java.lang.AssertionError;

        specialinvoke $r95.<java.lang.AssertionError: void <init>()>();

        throw $r95;

     label31:
        i35 = i35 + 1;

        goto label30;

     label32:
        $z3 = virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z3 == 0 goto label33;

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  add merge=");

        $r20 = r1.<org.apache.lucene.index.LogMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r21 = virtualinvoke $r20.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r22 = (org.apache.lucene.index.IndexWriter) $r21;

        $r23 = virtualinvoke $r22.<org.apache.lucene.index.IndexWriter: java.lang.String segString(java.lang.Iterable)>($r94);

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" start=");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end=");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i32);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r29);

     label33:
        $r97 = new org.apache.lucene.index.MergePolicy$OneMerge;

        specialinvoke $r97.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r94);

        virtualinvoke r83.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r97);

        goto label35;

     label34:
        $z2 = virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: boolean verbose()>();

        if $z2 == 0 goto label35;

        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i32);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": contains segment over maxMergeSize or maxMergeDocs; skipping");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.lucene.index.LogMergePolicy: void message(java.lang.String)>($r15);

     label35:
        i29 = i32;

        $i36 = r1.<org.apache.lucene.index.LogMergePolicy: int mergeFactor>;

        i32 = i32 + $i36;

        goto label21;

     label36:
        i29 = 1 + i31;

        goto label11;

     label37:
        return r83;
    }

    public void setMaxMergeDocs(int)
    {
        int i0;
        org.apache.lucene.index.LogMergePolicy r0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.index.LogMergePolicy: int maxMergeDocs> = i0;

        return;
    }

    public int getMaxMergeDocs()
    {
        int $i0;
        org.apache.lucene.index.LogMergePolicy r0;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        $i0 = r0.<org.apache.lucene.index.LogMergePolicy: int maxMergeDocs>;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.index.LogMergePolicy r3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r0, $r1, $r2, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        long $l0, $l2, $l3;
        int $i1, $i4;
        java.lang.String $r5, $r8, $r26;
        double $d0, $d1;
        java.lang.Class $r4;

        r3 := @this: org.apache.lucene.index.LogMergePolicy;

        $r0 = new java.lang.StringBuilder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minMergeSize=");

        $l0 = r3.<org.apache.lucene.index.LogMergePolicy: long minMergeSize>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mergeFactor=");

        $i1 = r3.<org.apache.lucene.index.LogMergePolicy: int mergeFactor>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxMergeSize=");

        $l2 = r3.<org.apache.lucene.index.LogMergePolicy: long maxMergeSize>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r15 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxMergeSizeForForcedMerge=");

        $l3 = r3.<org.apache.lucene.index.LogMergePolicy: long maxMergeSizeForForcedMerge>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r17 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("calibrateSizeByDeletes=");

        $z0 = r3.<org.apache.lucene.index.LogMergePolicy: boolean calibrateSizeByDeletes>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r19 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxMergeDocs=");

        $i4 = r3.<org.apache.lucene.index.LogMergePolicy: int maxMergeDocs>;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r21 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("useCompoundFile=");

        $z1 = r3.<org.apache.lucene.index.LogMergePolicy: boolean useCompoundFile>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r23 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxCFSSegmentSizeMB=");

        $d0 = virtualinvoke r3.<org.apache.lucene.index.LogMergePolicy: double getMaxCFSSegmentSizeMB()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r25 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("noCFSRatio=");

        $d1 = r3.<org.apache.lucene.index.LogMergePolicy: double noCFSRatio>;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r26 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r26;
    }

    public final double getMaxCFSSegmentSizeMB()
    {
        long $l0, $l1;
        org.apache.lucene.index.LogMergePolicy r0;
        double $d0, $d1;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        $l0 = r0.<org.apache.lucene.index.LogMergePolicy: long maxCFSSegmentSize>;

        $l1 = $l0 / 1024L;

        $d0 = (double) $l1;

        $d1 = $d0 / 1024.0;

        return $d1;
    }

    public final void setMaxCFSSegmentSizeMB(double)
    {
        long $l2;
        java.lang.IllegalArgumentException $r8;
        byte $b0, $b1;
        int $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;
        java.lang.String $r6;
        org.apache.lucene.index.LogMergePolicy r0;
        double d0, d1;

        r0 := @this: org.apache.lucene.index.LogMergePolicy;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxCFSSegmentSizeMB must be >=0 (got ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        d1 = d0 * 1048576.0;

        $b1 = d1 cmpl 9.223372036854776E18;

        $i4 = (int) $b1;

        if $i4 <= 0 goto label2;

        $l2 = 9223372036854775807L;

        goto label3;

     label2:
        $l2 = (long) d1;

     label3:
        r0.<org.apache.lucene.index.LogMergePolicy: long maxCFSSegmentSize> = $l2;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.index.LogMergePolicy: long DEFAULT_MAX_CFS_SEGMENT_SIZE> = 9223372036854775807L;

        <org.apache.lucene.index.LogMergePolicy: double DEFAULT_NO_CFS_RATIO> = 0.1;

        <org.apache.lucene.index.LogMergePolicy: int DEFAULT_MAX_MERGE_DOCS> = 2147483647;

        <org.apache.lucene.index.LogMergePolicy: int DEFAULT_MERGE_FACTOR> = 10;

        <org.apache.lucene.index.LogMergePolicy: double LEVEL_LOG_SPAN> = 0.75;

        $r0 = class "Lorg/apache/lucene/index/LogMergePolicy;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.LogMergePolicy: boolean $assertionsDisabled> = $z1;

        return;
    }
}
