public final class org.apache.poi.util.IOUtils extends java.lang.Object
{
    private static final org.apache.poi.util.POILogger logger;

    private void <init>()
    {
        org.apache.poi.util.IOUtils r0;

        r0 := @this: org.apache.poi.util.IOUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        byte[] r1, $r2;
        java.io.ByteArrayOutputStream $r4;
        int $i0, i1, $i3;
        java.io.InputStream r3;

        r3 := @parameter0: java.io.InputStream;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = newarray (byte)[4096];

        i1 = 0;

     label1:
        $i3 = (int) -1;

        if i1 == $i3 goto label2;

        $i0 = virtualinvoke r3.<java.io.InputStream: int read(byte[])>(r1);

        i1 = $i0;

        if $i0 <= 0 goto label1;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        goto label1;

     label2:
        $r2 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static byte[] toByteArray(java.nio.ByteBuffer, int)
    {
        byte[] $r1, $r2;
        int i0, $i1;
        java.nio.ByteBuffer r0;
        boolean $z0;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int arrayOffset()>();

        if $i1 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        return $r2;

     label1:
        $r1 = newarray (byte)[i0];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r1);

        return $r1;
    }

    public static int readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        byte[] r1;
        int $i0, $i1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        $i1 = staticinvoke <org.apache.poi.util.IOUtils: int readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return $i1;
    }

    public static int readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, i5, $i6, $i8;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i5 = 0;

     label1:
        $i3 = i0 + i5;

        $i2 = i1 - i5;

        $i4 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, $i3, $i2);

        if $i4 >= 0 goto label4;

        if i5 != 0 goto label2;

        $i8 = (int) -1;

        $i6 = $i8;

        goto label3;

     label2:
        $i6 = i5;

     label3:
        return $i6;

     label4:
        i5 = i5 + $i4;

        if i5 != i1 goto label5;

        return i5;

     label5:
        goto label1;
    }

    public static int readFully(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.ReadableByteChannel r0;
        java.nio.ByteBuffer r1;
        int $i0, $i1, $i2, $i3, i4, $i5, $i7;

        r0 := @parameter0: java.nio.channels.ReadableByteChannel;

        r1 := @parameter1: java.nio.ByteBuffer;

        i4 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r1);

        if $i0 >= 0 goto label4;

        if i4 != 0 goto label2;

        $i7 = (int) -1;

        $i5 = $i7;

        goto label3;

     label2:
        $i5 = i4;

     label3:
        return $i5;

     label4:
        i4 = i4 + $i0;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        if i4 == $i1 goto label5;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        if $i2 != $i3 goto label6;

     label5:
        return i4;

     label6:
        goto label1;
    }

    public static void copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        int $i0, $i2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        r0 = newarray (byte)[4096];

     label1:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        if $i0 <= 0 goto label1;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        goto label1;

     label2:
        return;
    }

    public static long calculateChecksum(byte[])
    {
        byte[] r1;
        int $i0;
        java.util.zip.CRC32 $r0;
        long $l1;

        r1 := @parameter0: byte[];

        $r0 = new java.util.zip.CRC32;

        specialinvoke $r0.<java.util.zip.CRC32: void <init>()>();

        $i0 = lengthof r1;

        interfaceinvoke $r0.<java.util.zip.Checksum: void update(byte[],int,int)>(r1, 0, $i0);

        $l1 = interfaceinvoke $r0.<java.util.zip.Checksum: long getValue()>();

        return $l1;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.lang.StringBuilder $r2, $r4, $r5;
        org.apache.poi.util.POILogger $r3;
        java.lang.String $r6;
        java.lang.Exception $r1;

        r0 := @parameter0: java.io.Closeable;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r3 = <org.apache.poi.util.IOUtils: org.apache.poi.util.POILogger logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to close resource: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Throwable)>(7, $r6, $r1);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/util/IOUtils;");

        <org.apache.poi.util.IOUtils: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
