public class org.codehaus.groovy.control.StaticImportVisitor extends org.codehaus.groovy.ast.ClassCodeExpressionTransformer
{
    private org.codehaus.groovy.ast.ClassNode currentClass;
    private org.codehaus.groovy.ast.MethodNode currentMethod;
    private org.codehaus.groovy.control.SourceUnit source;
    private org.codehaus.groovy.control.CompilationUnit compilationUnit;
    private boolean stillResolving;
    private boolean inSpecialConstructorCall;
    private boolean inClosure;
    private boolean inPropertyExpression;
    private org.codehaus.groovy.ast.expr.Expression foundConstant;
    private org.codehaus.groovy.ast.expr.Expression foundArgs;
    static java.lang.Class class$org$codehaus$groovy$ast$expr$VariableExpression;
    static java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression;
    static java.lang.Class class$org$codehaus$groovy$ast$expr$MethodCallExpression;
    static java.lang.Class class$org$codehaus$groovy$ast$expr$ClosureExpression;
    static java.lang.Class class$org$codehaus$groovy$ast$expr$ConstructorCallExpression;
    static java.lang.Class class$org$codehaus$groovy$ast$expr$ArgumentListExpression;
    static java.lang.Class class$org$codehaus$groovy$ast$expr$ConstantExpression;

    public void <init>(org.codehaus.groovy.control.CompilationUnit)
    {
        org.codehaus.groovy.control.StaticImportVisitor r0;
        org.codehaus.groovy.control.CompilationUnit r1;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r1 := @parameter0: org.codehaus.groovy.control.CompilationUnit;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void <init>()>();

        r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.control.CompilationUnit compilationUnit> = r1;

        return;
    }

    public void visitClass(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.control.SourceUnit)
    {
        org.codehaus.groovy.control.StaticImportVisitor r0;
        org.codehaus.groovy.control.SourceUnit r2;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: org.codehaus.groovy.control.SourceUnit;

        r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass> = r1;

        r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.control.SourceUnit source> = r2;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitClass(org.codehaus.groovy.ast.ClassNode)>(r1);

        return;
    }

    protected void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode, boolean)
    {
        org.codehaus.groovy.control.StaticImportVisitor r0;
        org.codehaus.groovy.ast.MethodNode r1;
        boolean z0;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        z0 := @parameter1: boolean;

        r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.MethodNode currentMethod> = r1;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode,boolean)>(r1, z0);

        r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.MethodNode currentMethod> = null;

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.control.StaticImportVisitor r15;
        boolean $z0, $z1;
        org.codehaus.groovy.ast.expr.VariableExpression $r27;
        org.codehaus.groovy.ast.expr.PropertyExpression $r25;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r23;
        org.codehaus.groovy.ast.expr.Expression r0, $r16, $r17, $r18, $r20, $r22, $r24, $r26, $r28;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r19;
        org.codehaus.groovy.ast.expr.ClosureExpression $r21;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r29, $r30, $r31, $r32, $r33, $r34, $r35;

        r15 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        if r0 != null goto label01;

        return null;

     label01:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$VariableExpression>;

        if $r2 != null goto label02;

        $r29 = staticinvoke <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.VariableExpression");

        <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$VariableExpression> = $r29;

        goto label03;

     label02:
        $r29 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$VariableExpression>;

     label03:
        if $r1 != $r29 goto label04;

        $r27 = (org.codehaus.groovy.ast.expr.VariableExpression) r0;

        $r28 = virtualinvoke r15.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression transformVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)>($r27);

        return $r28;

     label04:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

        if $r4 != null goto label05;

        $r30 = staticinvoke <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.PropertyExpression");

        <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression> = $r30;

        goto label06;

     label05:
        $r30 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

     label06:
        if $r3 != $r30 goto label07;

        $r25 = (org.codehaus.groovy.ast.expr.PropertyExpression) r0;

        $r26 = virtualinvoke r15.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression transformPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)>($r25);

        return $r26;

     label07:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$MethodCallExpression>;

        if $r6 != null goto label08;

        $r31 = staticinvoke <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.MethodCallExpression");

        <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$MethodCallExpression> = $r31;

        goto label09;

     label08:
        $r31 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$MethodCallExpression>;

     label09:
        if $r5 != $r31 goto label10;

        $r23 = (org.codehaus.groovy.ast.expr.MethodCallExpression) r0;

        $r24 = virtualinvoke r15.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression transformMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)>($r23);

        return $r24;

     label10:
        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ClosureExpression>;

        if $r8 != null goto label11;

        $r32 = staticinvoke <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.ClosureExpression");

        <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ClosureExpression> = $r32;

        goto label12;

     label11:
        $r32 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ClosureExpression>;

     label12:
        if $r7 != $r32 goto label13;

        $r21 = (org.codehaus.groovy.ast.expr.ClosureExpression) r0;

        $r22 = virtualinvoke r15.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression transformClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)>($r21);

        return $r22;

     label13:
        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ConstructorCallExpression>;

        if $r10 != null goto label14;

        $r33 = staticinvoke <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.ConstructorCallExpression");

        <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ConstructorCallExpression> = $r33;

        goto label15;

     label14:
        $r33 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ConstructorCallExpression>;

     label15:
        if $r9 != $r33 goto label16;

        $r19 = (org.codehaus.groovy.ast.expr.ConstructorCallExpression) r0;

        $r20 = virtualinvoke r15.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression transformConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)>($r19);

        return $r20;

     label16:
        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ArgumentListExpression>;

        if $r12 != null goto label17;

        $r34 = staticinvoke <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.ArgumentListExpression");

        <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ArgumentListExpression> = $r34;

        goto label18;

     label17:
        $r34 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ArgumentListExpression>;

     label18:
        if $r11 != $r34 goto label20;

        $r18 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)>(r15);

        $z1 = r15.<org.codehaus.groovy.control.StaticImportVisitor: boolean inPropertyExpression>;

        if $z1 == 0 goto label19;

        r15.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundArgs> = $r18;

     label19:
        return $r18;

     label20:
        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ConstantExpression>;

        if $r14 != null goto label21;

        $r35 = staticinvoke <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.ConstantExpression");

        <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ConstantExpression> = $r35;

        goto label22;

     label21:
        $r35 = <org.codehaus.groovy.control.StaticImportVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$ConstantExpression>;

     label22:
        if $r13 != $r35 goto label24;

        $r17 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)>(r15);

        $z0 = r15.<org.codehaus.groovy.control.StaticImportVisitor: boolean inPropertyExpression>;

        if $z0 == 0 goto label23;

        r15.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundConstant> = $r17;

     label23:
        return $r17;

     label24:
        $r16 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)>(r15);

        return $r16;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        org.codehaus.groovy.control.StaticImportVisitor r2;
        org.codehaus.groovy.ast.Variable $r1;
        java.lang.String $r3;
        org.codehaus.groovy.ast.expr.Expression $r4;
        boolean $z0, $z1, $z2;

        r2 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable getAccessedVariable()>();

        if $r1 == null goto label3;

        $z0 = $r1 instanceof org.codehaus.groovy.ast.DynamicVariable;

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r1.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r4 = specialinvoke r2.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression findStaticFieldImportFromModule(java.lang.String)>($r3);

        if $r4 == null goto label1;

        virtualinvoke $r4.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r0);

        return $r4;

     label1:
        $z1 = r2.<org.codehaus.groovy.control.StaticImportVisitor: boolean inPropertyExpression>;

        if $z1 == 0 goto label2;

        $z2 = r2.<org.codehaus.groovy.control.StaticImportVisitor: boolean inSpecialConstructorCall>;

        if $z2 == 0 goto label3;

     label2:
        specialinvoke r2.<org.codehaus.groovy.control.StaticImportVisitor: void addStaticVariableError(org.codehaus.groovy.ast.expr.VariableExpression)>(r0);

     label3:
        return r0;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression r9;
        org.codehaus.groovy.control.StaticImportVisitor r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, $z10, $z11, z12, $z13, $z14, $z15, $z16;
        org.codehaus.groovy.ast.expr.VariableExpression r20;
        org.codehaus.groovy.ast.expr.StaticMethodCallExpression $r13;
        org.codehaus.groovy.ast.MethodNode $r12, $r16;
        org.codehaus.groovy.ast.expr.MethodCallExpression r1, $r21;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String r11, $r18, $r19;
        org.codehaus.groovy.ast.ClassNode $r14, $r15, $r17;
        java.lang.Object $r10;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getMethod()>();

        $r5 = virtualinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r4);

        $r6 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $r7 = virtualinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r6);

        z9 = 0;

        $z0 = $r7 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z0 == 0 goto label4;

        r20 = (org.codehaus.groovy.ast.expr.VariableExpression) $r7;

        $z6 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isImplicitThis()>();

        if $z6 != 0 goto label2;

        $r18 = virtualinvoke r20.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z7 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z7 != 0 goto label1;

        $r19 = virtualinvoke r20.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z8 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("super");

        if $z8 == 0 goto label2;

     label1:
        $z10 = 1;

        goto label3;

     label2:
        $z10 = 0;

     label3:
        z9 = $z10;

     label4:
        $z11 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isImplicitThis()>();

        if $z11 != 0 goto label5;

        if z9 == 0 goto label9;

     label5:
        $r8 = specialinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression findStaticMethodImportFromModule(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r5, $r3);

        if $r8 == null goto label6;

        virtualinvoke $r8.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r1);

        return $r8;

     label6:
        $z1 = $r5 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z1 == 0 goto label9;

        r9 = (org.codehaus.groovy.ast.expr.ConstantExpression) $r5;

        $r10 = virtualinvoke r9.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $z2 = $r10 instanceof java.lang.String;

        if $z2 == 0 goto label9;

        r11 = (java.lang.String) $r10;

        z12 = 1;

        $r12 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.MethodNode currentMethod>;

        if $r12 == null goto label7;

        $r16 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.MethodNode currentMethod>;

        $z4 = virtualinvoke $r16.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z4 != 0 goto label7;

        $r17 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $z5 = virtualinvoke $r17.<org.codehaus.groovy.ast.ClassNode: boolean hasPossibleMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r11, $r3);

        if $z5 == 0 goto label7;

        z12 = 0;

     label7:
        $z13 = r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inSpecialConstructorCall>;

        if $z13 != 0 goto label8;

        if z12 == 0 goto label9;

        $r15 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $z3 = virtualinvoke $r15.<org.codehaus.groovy.ast.ClassNode: boolean hasPossibleStaticMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r11, $r3);

        if $z3 == 0 goto label9;

     label8:
        $r13 = new org.codehaus.groovy.ast.expr.StaticMethodCallExpression;

        $r14 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        specialinvoke $r13.<org.codehaus.groovy.ast.expr.StaticMethodCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r14, r11, $r3);

        virtualinvoke $r13.<org.codehaus.groovy.ast.expr.StaticMethodCallExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r1);

        return $r13;

     label9:
        $r21 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        specialinvoke $r21.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r7, $r5, $r3);

        $z14 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isSafe()>();

        virtualinvoke $r21.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setSafe(boolean)>($z14);

        $z15 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isImplicitThis()>();

        virtualinvoke $r21.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setImplicitThis(boolean)>($z15);

        $z16 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isSpreadSafe()>();

        virtualinvoke $r21.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setSpreadSafe(boolean)>($z16);

        virtualinvoke $r21.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r1);

        return $r21;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)
    {
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r1;
        org.codehaus.groovy.ast.expr.Expression $r2;
        org.codehaus.groovy.control.StaticImportVisitor r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSpecialCall()>();

        r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inSpecialConstructorCall> = $z0;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)>(r0);

        r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inSpecialConstructorCall> = 0;

        return $r2;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)
    {
        org.codehaus.groovy.ast.stmt.Statement $r2;
        org.codehaus.groovy.control.StaticImportVisitor r0;
        boolean z0;
        org.codehaus.groovy.ast.expr.ClosureExpression r1;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ClosureExpression;

        z0 = r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inClosure>;

        r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inClosure> = 1;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        if $r2 == null goto label1;

        virtualinvoke $r2.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

     label1:
        r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inClosure> = z0;

        return r1;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.control.StaticImportVisitor r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.codehaus.groovy.ast.expr.VariableExpression r36;
        org.codehaus.groovy.ast.expr.FieldExpression $r33;
        org.codehaus.groovy.ast.expr.PropertyExpression r3;
        org.codehaus.groovy.ast.MethodNode $r10, $r11, $r17, $r24, $r25;
        java.lang.StringBuffer $r12, $r13, $r15, $r16, $r19, $r20;
        org.codehaus.groovy.ast.expr.Expression r1, r2, $r4, $r5, $r6, $r7, $r8, $r9, r34, $r37;
        java.lang.String $r14, $r18, $r21, $r22, $r23, $r27, $r29, $r31;
        org.codehaus.groovy.ast.ClassNode $r26, $r28, $r30;
        org.codehaus.groovy.ast.expr.ClassExpression r35;
        org.codehaus.groovy.ast.FieldNode $r32;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r3 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        z0 = r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inPropertyExpression>;

        r1 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundArgs>;

        r2 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundConstant>;

        r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inPropertyExpression> = 1;

        r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundArgs> = null;

        r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundConstant> = null;

        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $r5 = virtualinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r4);

        r34 = $r5;

        $z1 = $r5 instanceof org.codehaus.groovy.ast.expr.ClassExpression;

        if $z1 == 0 goto label1;

        $r24 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.MethodNode currentMethod>;

        if $r24 == null goto label1;

        $r25 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.MethodNode currentMethod>;

        $z6 = virtualinvoke $r25.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z6 == 0 goto label1;

        r35 = (org.codehaus.groovy.ast.expr.ClassExpression) $r5;

        $r26 = virtualinvoke r35.<org.codehaus.groovy.ast.expr.ClassExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r27 = virtualinvoke $r26.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r28 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r29 = virtualinvoke $r28.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z7 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z7 == 0 goto label1;

        $r30 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r31 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.PropertyExpression: java.lang.String getPropertyAsString()>();

        $r32 = virtualinvoke $r30.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getField(java.lang.String)>($r31);

        if $r32 == null goto label1;

        $z8 = virtualinvoke $r32.<org.codehaus.groovy.ast.FieldNode: boolean isStatic()>();

        if $z8 == 0 goto label1;

        $r33 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r33.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r32);

        virtualinvoke $r33.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r3);

        return $r33;

     label1:
        $z9 = $r5 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z9 == 0 goto label5;

        r36 = (org.codehaus.groovy.ast.expr.VariableExpression) $r5;

        $z2 = virtualinvoke r3.<org.codehaus.groovy.ast.expr.PropertyExpression: boolean isImplicitThis()>();

        if $z2 != 0 goto label3;

        $r22 = virtualinvoke r36.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z4 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z4 != 0 goto label2;

        $r23 = virtualinvoke r36.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z5 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("super");

        if $z5 == 0 goto label3;

     label2:
        $z10 = 1;

        goto label4;

     label3:
        $z10 = 0;

     label4:
        if $z10 == 0 goto label5;

        $r10 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.MethodNode currentMethod>;

        if $r10 == null goto label5;

        $r11 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.MethodNode currentMethod>;

        $z3 = virtualinvoke $r11.<org.codehaus.groovy.ast.MethodNode: boolean isStatic()>();

        if $z3 == 0 goto label5;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Non-static variable \'");

        $r14 = virtualinvoke r36.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be referenced from the static method ");

        $r17 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.MethodNode currentMethod>;

        $r18 = virtualinvoke $r17.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r21, r3);

        return null;

     label5:
        $r37 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundArgs>;

        if $r37 == null goto label6;

        $r6 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundConstant>;

        if $r6 == null goto label6;

        $r8 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundConstant>;

        $r7 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundArgs>;

        $r9 = specialinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression findStaticMethodImportFromModule(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r8, $r7);

        if $r9 == null goto label6;

        r34 = $r9;

     label6:
        r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inPropertyExpression> = z0;

        r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundArgs> = r1;

        r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression foundConstant> = r2;

        virtualinvoke r3.<org.codehaus.groovy.ast.expr.PropertyExpression: void setObjectExpression(org.codehaus.groovy.ast.expr.Expression)>(r34);

        $z11 = r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inSpecialConstructorCall>;

        if $z11 != 0 goto label7;

        specialinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: void checkStaticScope(org.codehaus.groovy.ast.expr.PropertyExpression)>(r3);

     label7:
        return r3;
    }

    private void checkStaticScope(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r1, $r3;
        org.codehaus.groovy.ast.expr.VariableExpression $r2;
        org.codehaus.groovy.control.StaticImportVisitor r0;
        org.codehaus.groovy.ast.expr.Expression r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        $z0 = r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inClosure>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r4 = r1;

     label2:
        if r4 == null goto label6;

        $z1 = r4 instanceof org.codehaus.groovy.ast.expr.PropertyExpression;

        if $z1 == 0 goto label3;

        goto label5;

     label3:
        $z2 = r4 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z2 == 0 goto label4;

        $r2 = (org.codehaus.groovy.ast.expr.VariableExpression) r4;

        specialinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: void addStaticVariableError(org.codehaus.groovy.ast.expr.VariableExpression)>($r2);

     label4:
        return;

     label5:
        $r3 = (org.codehaus.groovy.ast.expr.PropertyExpression) r4;

        r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        goto label2;

     label6:
        return;
    }

    private void addStaticVariableError(org.codehaus.groovy.ast.expr.VariableExpression)
    {
        org.codehaus.groovy.control.StaticImportVisitor r0;
        org.codehaus.groovy.ast.Variable $r4;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r10, $r11;
        java.lang.String $r7, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.codehaus.groovy.ast.expr.VariableExpression r1, $r2, $r3;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.VariableExpression;

        $z0 = r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inSpecialConstructorCall>;

        if $z0 != 0 goto label2;

        $z4 = r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean inClosure>;

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.VariableExpression: boolean isInStaticContext()>();

        if $z5 != 0 goto label2;

     label1:
        return;

     label2:
        $z1 = r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean stillResolving>;

        if $z1 == 0 goto label3;

        return;

     label3:
        $r2 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        if r1 == $r2 goto label4;

        $r3 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression SUPER_EXPRESSION>;

        if r1 != $r3 goto label5;

     label4:
        return;

     label5:
        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable getAccessedVariable()>();

        if $r4 == null goto label6;

        $z2 = $r4 instanceof org.codehaus.groovy.ast.DynamicVariable;

        if $z2 != 0 goto label6;

        $z3 = interfaceinvoke $r4.<org.codehaus.groovy.ast.Variable: boolean isInStaticContext()>();

        if $z3 == 0 goto label6;

        return;

     label6:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The name ");

        $r7 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" doesn\'t refer to a declared variable or class. The static");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" scope requires that you declare variables before using them. If the variable should have");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" been a class check the spelling.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r12, r1);

        return;
    }

    private org.codehaus.groovy.ast.expr.Expression findStaticFieldImportFromModule(java.lang.String)
    {
        org.codehaus.groovy.control.StaticImportVisitor r0;
        org.codehaus.groovy.ast.ModuleNode $r2;
        java.util.Map $r3, $r5, $r12;
        java.lang.String r4, r16, r17;
        org.codehaus.groovy.ast.expr.Expression $r10, $r14;
        boolean $z0, $z1;
        java.util.Iterator $r7;
        org.codehaus.groovy.ast.ClassNode $r1, r15, r18;
        java.util.Set $r6;
        java.lang.Object $r8, $r9, $r11, $r13;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ModuleNode: java.util.Map getStaticImportAliases()>();

        r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean stillResolving> = 0;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r15 = (org.codehaus.groovy.ast.ClassNode) $r11;

        $r12 = virtualinvoke $r2.<org.codehaus.groovy.ast.ModuleNode: java.util.Map getStaticImportFields()>();

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r16 = (java.lang.String) $r13;

        $r14 = specialinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression findStaticField(org.codehaus.groovy.ast.ClassNode,java.lang.String)>(r15, r16);

        if $r14 == null goto label2;

        return $r14;

     label2:
        $r5 = virtualinvoke $r2.<org.codehaus.groovy.ast.ModuleNode: java.util.Map getStaticImportClasses()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r8;

        $r9 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17);

        r18 = (org.codehaus.groovy.ast.ClassNode) $r9;

        $r10 = specialinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression findStaticField(org.codehaus.groovy.ast.ClassNode,java.lang.String)>(r18, r4);

        if $r10 == null goto label4;

        return $r10;

     label4:
        goto label3;

     label5:
        return null;
    }

    private org.codehaus.groovy.ast.expr.Expression findStaticField(org.codehaus.groovy.ast.ClassNode, java.lang.String)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression $r3;
        org.codehaus.groovy.ast.ClassNode r0;
        org.codehaus.groovy.control.StaticImportVisitor r5;
        org.codehaus.groovy.ast.expr.ClassExpression $r4;
        org.codehaus.groovy.ast.FieldNode $r2;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r5 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryClassNode()>();

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        if $z2 == 0 goto label3;

     label1:
        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getFields()>();

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.FieldNode getField(java.lang.String)>(r1);

        if $r2 == null goto label2;

        $z1 = virtualinvoke $r2.<org.codehaus.groovy.ast.FieldNode: boolean isStatic()>();

        if $z1 == 0 goto label2;

        $r3 = new org.codehaus.groovy.ast.expr.PropertyExpression;

        $r4 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r4.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>(r0);

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.PropertyExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String)>($r4, r1);

        return $r3;

     label2:
        goto label4;

     label3:
        r5.<org.codehaus.groovy.control.StaticImportVisitor: boolean stillResolving> = 1;

     label4:
        return null;
    }

    private org.codehaus.groovy.ast.expr.Expression findStaticMethodImportFromModule(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.ConstantExpression r5;
        org.codehaus.groovy.control.StaticImportVisitor r0;
        org.codehaus.groovy.ast.ModuleNode $r2;
        java.util.Map $r4, $r8, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r9;
        org.codehaus.groovy.ast.expr.Expression r3, r14, $r23, $r28;
        java.lang.String r7, $r16, $r18, r25, r26;
        java.util.Iterator $r10;
        org.codehaus.groovy.ast.ClassNode $r1, $r12, $r15, $r17, r24, r27;
        java.lang.Object $r6, $r11, $r13, $r19, $r20, $r22;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r3 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r14 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        $r1 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        if $r2 == null goto label1;

        $z0 = r3 instanceof org.codehaus.groovy.ast.expr.ConstantExpression;

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = virtualinvoke $r2.<org.codehaus.groovy.ast.ModuleNode: java.util.Map getStaticImportAliases()>();

        r5 = (org.codehaus.groovy.ast.expr.ConstantExpression) r3;

        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.expr.ConstantExpression: java.lang.Object getValue()>();

        $z1 = $r6 instanceof java.lang.String;

        if $z1 != 0 goto label3;

        return null;

     label3:
        r7 = (java.lang.String) $r6;

        $z2 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r7);

        if $z2 == 0 goto label4;

        $r20 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r24 = (org.codehaus.groovy.ast.ClassNode) $r20;

        $r21 = virtualinvoke $r2.<org.codehaus.groovy.ast.ModuleNode: java.util.Map getStaticImportFields()>();

        $r22 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r25 = (java.lang.String) $r22;

        $r23 = specialinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression findStaticMethod(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r24, r25, r14);

        if $r23 == null goto label4;

        return $r23;

     label4:
        $r8 = virtualinvoke $r2.<org.codehaus.groovy.ast.ModuleNode: java.util.Map getStaticImportClasses()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z5 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label9;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.lang.String) $r11;

        $r12 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $z3 = specialinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: boolean isEnum(org.codehaus.groovy.ast.ClassNode)>($r12);

        if $z3 == 0 goto label6;

        $r15 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r16 = virtualinvoke $r15.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z4 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>($r16);

        if $z4 == 0 goto label6;

        $r17 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r18 = virtualinvoke $r17.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r19 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        r27 = (org.codehaus.groovy.ast.ClassNode) $r19;

        goto label7;

     label6:
        $r13 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r26);

        r27 = (org.codehaus.groovy.ast.ClassNode) $r13;

     label7:
        $r28 = specialinvoke r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.ast.expr.Expression findStaticMethod(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r27, r7, r14);

        if $r28 == null goto label8;

        return $r28;

     label8:
        goto label5;

     label9:
        return null;
    }

    private org.codehaus.groovy.ast.expr.Expression findStaticMethod(org.codehaus.groovy.ast.ClassNode, java.lang.String, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.StaticMethodCallExpression $r3;
        org.codehaus.groovy.ast.ClassNode r0;
        org.codehaus.groovy.control.StaticImportVisitor r4;
        java.lang.String r1;
        org.codehaus.groovy.ast.expr.Expression r2;
        boolean $z0, $z1, $z2;

        r4 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.codehaus.groovy.ast.expr.Expression;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryClassNode()>();

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        if $z2 == 0 goto label2;

     label1:
        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean hasPossibleStaticMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r1, r2);

        if $z1 == 0 goto label2;

        $r3 = new org.codehaus.groovy.ast.expr.StaticMethodCallExpression;

        specialinvoke $r3.<org.codehaus.groovy.ast.expr.StaticMethodCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>(r0, r1, r2);

        return $r3;

     label2:
        return null;
    }

    protected org.codehaus.groovy.control.SourceUnit getSourceUnit()
    {
        org.codehaus.groovy.control.StaticImportVisitor r0;
        org.codehaus.groovy.control.SourceUnit $r1;

        r0 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        $r1 = r0.<org.codehaus.groovy.control.StaticImportVisitor: org.codehaus.groovy.control.SourceUnit source>;

        return $r1;
    }

    private boolean isEnum(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        int $i0, $i1;
        org.codehaus.groovy.control.StaticImportVisitor r1;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.control.StaticImportVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
