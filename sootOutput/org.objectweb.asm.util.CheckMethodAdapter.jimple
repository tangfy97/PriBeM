public class org.objectweb.asm.util.CheckMethodAdapter extends org.objectweb.asm.MethodVisitor
{
    public int version;
    private int access;
    private boolean startCode;
    private boolean endCode;
    private boolean endMethod;
    private int insnCount;
    private final java.util.Map labels;
    private java.util.Set usedLabels;
    private int expandedFrames;
    private int compressedFrames;
    private int lastFrame;
    private java.util.List handlers;
    private static final int[] TYPE;
    private static java.lang.reflect.Field labelStatusField;

    public void <init>(org.objectweb.asm.MethodVisitor)
    {
        java.util.HashMap $r2;
        org.objectweb.asm.MethodVisitor r1;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: org.objectweb.asm.MethodVisitor;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void <init>(org.objectweb.asm.MethodVisitor,java.util.Map)>(r1, $r2);

        return;
    }

    public void <init>(org.objectweb.asm.MethodVisitor, java.util.Map)
    {
        org.objectweb.asm.MethodVisitor r1;
        org.objectweb.asm.util.CheckMethodAdapter r0;
        java.util.Map r2;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: org.objectweb.asm.MethodVisitor;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void <init>(int,org.objectweb.asm.MethodVisitor,java.util.Map)>(262144, r1, r2);

        return;
    }

    protected void <init>(int, org.objectweb.asm.MethodVisitor, java.util.Map)
    {
        java.util.HashSet $r5;
        org.objectweb.asm.MethodVisitor r1;
        java.util.Map r2;
        int i0, $i2;
        org.objectweb.asm.util.CheckMethodAdapter r0;
        java.util.ArrayList $r6;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.MethodVisitor;

        r2 := @parameter2: java.util.Map;

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void <init>(int,org.objectweb.asm.MethodVisitor)>(i0, r1);

        $i2 = (int) -1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int lastFrame> = $i2;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels> = r2;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Set usedLabels> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.List handlers> = $r6;

        return;
    }

    public void <init>(int, java.lang.String, java.lang.String, org.objectweb.asm.MethodVisitor, java.util.Map)
    {
        org.objectweb.asm.MethodVisitor r4;
        org.objectweb.asm.util.CheckMethodAdapter$1 $r1;
        java.util.Map r5;
        int i0;
        java.lang.String r2, r3;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.objectweb.asm.MethodVisitor;

        r5 := @parameter4: java.util.Map;

        $r1 = new org.objectweb.asm.util.CheckMethodAdapter$1;

        specialinvoke $r1.<org.objectweb.asm.util.CheckMethodAdapter$1: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],org.objectweb.asm.MethodVisitor)>(i0, r2, r3, null, null, r4);

        specialinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void <init>(org.objectweb.asm.MethodVisitor,java.util.Map)>($r1, r5);

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int access> = i0;

        return;
    }

    public org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String, boolean)
    {
        org.objectweb.asm.AnnotationVisitor $r3;
        org.objectweb.asm.util.CheckAnnotationAdapter $r2;
        java.lang.String r1;
        org.objectweb.asm.util.CheckMethodAdapter r0;
        boolean z0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndMethod()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkDesc(java.lang.String,boolean)>(r1, 0);

        $r2 = new org.objectweb.asm.util.CheckAnnotationAdapter;

        $r3 = specialinvoke r0.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(r1, z0);

        specialinvoke $r2.<org.objectweb.asm.util.CheckAnnotationAdapter: void <init>(org.objectweb.asm.AnnotationVisitor)>($r3);

        return $r2;
    }

    public org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()
    {
        org.objectweb.asm.AnnotationVisitor $r2;
        org.objectweb.asm.util.CheckMethodAdapter r0;
        org.objectweb.asm.util.CheckAnnotationAdapter $r1;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndMethod()>();

        $r1 = new org.objectweb.asm.util.CheckAnnotationAdapter;

        $r2 = specialinvoke r0.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotationDefault()>();

        specialinvoke $r1.<org.objectweb.asm.util.CheckAnnotationAdapter: void <init>(org.objectweb.asm.AnnotationVisitor,boolean)>($r2, 0);

        return $r1;
    }

    public org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int, java.lang.String, boolean)
    {
        org.objectweb.asm.AnnotationVisitor $r3;
        org.objectweb.asm.util.CheckAnnotationAdapter $r2;
        int i0;
        java.lang.String r1;
        org.objectweb.asm.util.CheckMethodAdapter r0;
        boolean z0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndMethod()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkDesc(java.lang.String,boolean)>(r1, 0);

        $r2 = new org.objectweb.asm.util.CheckAnnotationAdapter;

        $r3 = specialinvoke r0.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i0, r1, z0);

        specialinvoke $r2.<org.objectweb.asm.util.CheckAnnotationAdapter: void <init>(org.objectweb.asm.AnnotationVisitor)>($r3);

        return $r2;
    }

    public void visitAttribute(org.objectweb.asm.Attribute)
    {
        org.objectweb.asm.Attribute r1;
        java.lang.IllegalArgumentException $r2;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: org.objectweb.asm.Attribute;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndMethod()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid attribute (must not be null)");

        throw $r2;

     label1:
        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitAttribute(org.objectweb.asm.Attribute)>(r1);

        return;
    }

    public void visitCode()
    {
        int $i0, $i1;
        java.lang.RuntimeException $r1;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        $i0 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int access>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Abstract methods cannot have code");

        throw $r1;

     label1:
        r0.<org.objectweb.asm.util.CheckMethodAdapter: boolean startCode> = 1;

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitCode()>();

        return;
    }

    public void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])
    {
        java.lang.IllegalStateException $r28;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r17, $r18, $r19, $r20, $r24, $r25, $r29, $r31, $r33;
        java.lang.Object[] r1, r2;
        int $i0, $i1, $i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, $i19;
        java.lang.String $r14, $r21, $r26;
        java.lang.RuntimeException $r37;
        java.lang.IllegalArgumentException $r30, $r32, $r34, $r35, $r36;
        java.lang.Object $r4, $r6;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        r1 := @parameter2: java.lang.Object[];

        i5 := @parameter3: int;

        r2 := @parameter4: java.lang.Object[];

        $i1 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i0 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int lastFrame>;

        if $i1 != $i0 goto label01;

        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("At most one frame can be visited at a given code location.");

        throw $r28;

     label01:
        $i2 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int lastFrame> = $i2;

        tableswitch(i3)
        {
            case -1: goto label02;
            case 0: goto label02;
            case 1: goto label05;
            case 2: goto label05;
            case 3: goto label03;
            case 4: goto label04;
            default: goto label06;
        };

     label02:
        i14 = 2147483647;

        i15 = 2147483647;

        goto label07;

     label03:
        i14 = 0;

        i15 = 0;

        goto label07;

     label04:
        i14 = 0;

        i15 = 1;

        goto label07;

     label05:
        i14 = 3;

        i15 = 0;

        goto label07;

     label06:
        $r30 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid frame type ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r30;

     label07:
        if i4 <= i14 goto label08;

        $r32 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid nLocal=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for frame type ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r32;

     label08:
        if i5 <= i15 goto label09;

        $r34 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid nStack=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for frame type ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r34;

     label09:
        if i3 == 2 goto label13;

        if i4 <= 0 goto label11;

        if r1 == null goto label10;

        $i13 = lengthof r1;

        if $i13 >= i4 goto label11;

     label10:
        $r35 = new java.lang.IllegalArgumentException;

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array local[] is shorter than nLocal");

        throw $r35;

     label11:
        i16 = 0;

     label12:
        if i16 >= i4 goto label13;

        $r6 = r1[i16];

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkFrameValue(java.lang.Object)>($r6);

        i16 = i16 + 1;

        goto label12;

     label13:
        if i5 <= 0 goto label15;

        if r2 == null goto label14;

        $i12 = lengthof r2;

        if $i12 >= i5 goto label15;

     label14:
        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array stack[] is shorter than nStack");

        throw $r36;

     label15:
        i17 = 0;

     label16:
        if i17 >= i5 goto label17;

        $r4 = r2[i17];

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkFrameValue(java.lang.Object)>($r4);

        i17 = i17 + 1;

        goto label16;

     label17:
        $i19 = (int) -1;

        if i3 != $i19 goto label18;

        $i10 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int expandedFrames>;

        $i11 = $i10 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int expandedFrames> = $i11;

        goto label19;

     label18:
        $i6 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int compressedFrames>;

        $i7 = $i6 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int compressedFrames> = $i7;

     label19:
        $i8 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int expandedFrames>;

        if $i8 <= 0 goto label20;

        $i9 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int compressedFrames>;

        if $i9 <= 0 goto label20;

        $r37 = new java.lang.RuntimeException;

        specialinvoke $r37.<java.lang.RuntimeException: void <init>(java.lang.String)>("Expanded and compressed frames must not be mixed.");

        throw $r37;

     label20:
        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(i3, i4, r1, i5, r2);

        return;
    }

    public void visitInsn(int)
    {
        int i0, $i1, $i2;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkOpcode(int,int)>(i0, 0);

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(i0);

        $i1 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i2;

        return;
    }

    public void visitIntInsn(int, int)
    {
        java.lang.IllegalArgumentException $r1;
        int i0, i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkOpcode(int,int)>(i0, 1);

        lookupswitch(i0)
        {
            case 16: goto label1;
            case 17: goto label2;
            default: goto label3;
        };

     label1:
        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkSignedByte(int,java.lang.String)>(i1, "Invalid operand");

        goto label5;

     label2:
        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkSignedShort(int,java.lang.String)>(i1, "Invalid operand");

        goto label5;

     label3:
        if i1 < 4 goto label4;

        if i1 <= 11 goto label5;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid operand (must be an array type code T_...): ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label5:
        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>(i0, i1);

        $i2 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i3 = $i2 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i3;

        return;
    }

    public void visitVarInsn(int, int)
    {
        int i0, i1, $i2, $i3;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkOpcode(int,int)>(i0, 2);

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkUnsignedShort(int,java.lang.String)>(i1, "Invalid variable index");

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(i0, i1);

        $i2 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i3 = $i2 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i3;

        return;
    }

    public void visitTypeInsn(int, java.lang.String)
    {
        char $c3;
        java.lang.IllegalArgumentException $r8;
        int i0, $i1, $i2, $i4;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String r1, $r6;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkOpcode(int,int)>(i0, 3);

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>(r1, "type");

        if i0 != 187 goto label1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i4 = (int) $c3;

        if $i4 != 91 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NEW cannot be used to create arrays: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label1:
        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(i0, r1);

        $i1 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i2;

        return;
    }

    public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        int i0, $i1, $i2, $i3;
        java.lang.String r1, r2, r3;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkOpcode(int,int)>(i0, 4);

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>(r1, "owner");

        $i1 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int version>;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkUnqualifiedName(int,java.lang.String,java.lang.String)>($i1, r2, "name");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkDesc(java.lang.String,boolean)>(r3, 0);

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r1, r2, r3);

        $i2 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i3 = $i2 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i3;

        return;
    }

    public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        int i0, $i1, $i2, $i3;
        java.lang.String r1, r2, r3, $r4;
        org.objectweb.asm.util.CheckMethodAdapter r0;
        boolean $z0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkOpcode(int,int)>(i0, 5);

        if i0 != 183 goto label1;

        $r4 = "<init>";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

     label1:
        $i1 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int version>;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkMethodIdentifier(int,java.lang.String,java.lang.String)>($i1, r1, "name");

     label2:
        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>(r2, "owner");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkMethodDesc(java.lang.String)>(r3);

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r2, r1, r3);

        $i2 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i3 = $i2 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i3;

        return;
    }

    public transient void visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.objectweb.asm.Handle, java.lang.Object[])
    {
        java.lang.Object[] r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.lang.String r1, r2, $r10;
        java.lang.IllegalArgumentException $r6;
        org.objectweb.asm.Handle r3;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.objectweb.asm.Handle;

        r4 := @parameter3: java.lang.Object[];

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        $i0 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int version>;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkMethodIdentifier(int,java.lang.String,java.lang.String)>($i0, r1, "name");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkMethodDesc(java.lang.String)>(r2);

        $i1 = virtualinvoke r3.<org.objectweb.asm.Handle: int getTag()>();

        if $i1 == 6 goto label1;

        $i4 = virtualinvoke r3.<org.objectweb.asm.Handle: int getTag()>();

        if $i4 == 8 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid handle tag ");

        $i5 = virtualinvoke r3.<org.objectweb.asm.Handle: int getTag()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        i6 = 0;

     label2:
        $i7 = lengthof r4;

        if i6 >= $i7 goto label3;

        $r5 = r4[i6];

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLDCConstant(java.lang.Object)>($r5);

        i6 = i6 + 1;

        goto label2;

     label3:
        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>(r1, r2, r3, r4);

        $i2 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i3 = $i2 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i3;

        return;
    }

    public void visitJumpInsn(int, org.objectweb.asm.Label)
    {
        int i0, $i1, $i2;
        org.objectweb.asm.Label r1;
        java.util.Set $r2;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.Label;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkOpcode(int,int)>(i0, 6);

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>(r1, 0, "label");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkNonDebugLabel(org.objectweb.asm.Label)>(r1);

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(i0, r1);

        $r2 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Set usedLabels>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $i1 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i2 = $i1 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i2;

        return;
    }

    public void visitLabel(org.objectweb.asm.Label)
    {
        org.objectweb.asm.Label r1;
        java.lang.IllegalArgumentException $r6;
        java.lang.Integer $r4;
        java.util.Map $r2, $r5;
        int $i0;
        java.lang.Object $r3;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: org.objectweb.asm.Label;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>(r1, 0, "label");

        $r2 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Already visited label");

        throw $r6;

     label1:
        $r5 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r4 = new java.lang.Integer;

        $i0 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(r1);

        return;
    }

    public void visitLdcInsn(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object r1;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLDCConstant(java.lang.Object)>(r1);

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r1);

        $i0 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i1 = $i0 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i1;

        return;
    }

    public void visitIincInsn(int, int)
    {
        int i0, i1, $i2, $i3;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkUnsignedShort(int,java.lang.String)>(i0, "Invalid variable index");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkSignedShort(int,java.lang.String)>(i1, "Invalid increment");

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>(i0, i1);

        $i2 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i3 = $i2 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i3;

        return;
    }

    public transient void visitTableSwitchInsn(int, int, org.objectweb.asm.Label, org.objectweb.asm.Label[])
    {
        org.objectweb.asm.Label r1, $r4, $r7, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        org.objectweb.asm.Label[] r2;
        java.lang.String $r10, $r18;
        java.util.Set $r5;
        java.lang.IllegalArgumentException $r3, $r12;
        java.lang.StringBuilder $r6, $r8, $r9, $r13, $r14, $r15, $r16, $r17;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: org.objectweb.asm.Label;

        r2 := @parameter3: org.objectweb.asm.Label[];

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        if i0 >= i1 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max = ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be greater than or equal to min = ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label1:
        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>(r1, 0, "default label");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkNonDebugLabel(org.objectweb.asm.Label)>(r1);

        if r2 == null goto label2;

        $i4 = lengthof r2;

        $i2 = i0 - i1;

        $i3 = $i2 + 1;

        if $i4 == $i3 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("There must be max - min + 1 labels");

        throw $r3;

     label3:
        i9 = 0;

     label4:
        $i5 = lengthof r2;

        if i9 >= $i5 goto label5;

        $r7 = r2[i9];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label at index ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>($r7, 0, $r10);

        $r11 = r2[i9];

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkNonDebugLabel(org.objectweb.asm.Label)>($r11);

        i9 = i9 + 1;

        goto label4;

     label5:
        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>(i1, i0, r1, r2);

        i10 = 0;

     label6:
        $i6 = lengthof r2;

        if i10 >= $i6 goto label7;

        $r5 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Set usedLabels>;

        $r4 = r2[i10];

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r4);

        i10 = i10 + 1;

        goto label6;

     label7:
        $i7 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i8 = $i7 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i8;

        return;
    }

    public void visitLookupSwitchInsn(org.objectweb.asm.Label, int[], org.objectweb.asm.Label[])
    {
        org.objectweb.asm.Label r1, $r5, $r8, $r12;
        int[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.objectweb.asm.Label[] r3;
        java.lang.String $r11;
        java.util.Set $r4, $r6;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r7, $r9, $r10;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: org.objectweb.asm.Label;

        r2 := @parameter1: int[];

        r3 := @parameter2: org.objectweb.asm.Label[];

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>(r1, 0, "default label");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkNonDebugLabel(org.objectweb.asm.Label)>(r1);

        if r2 == null goto label1;

        if r3 == null goto label1;

        $i1 = lengthof r2;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label2;

     label1:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("There must be the same number of keys and labels");

        throw $r13;

     label2:
        i6 = 0;

     label3:
        $i2 = lengthof r3;

        if i6 >= $i2 goto label4;

        $r8 = r3[i6];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label at index ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>($r8, 0, $r11);

        $r12 = r3[i6];

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkNonDebugLabel(org.objectweb.asm.Label)>($r12);

        i6 = i6 + 1;

        goto label3;

     label4:
        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])>(r1, r2, r3);

        $r4 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Set usedLabels>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r1);

        i7 = 0;

     label5:
        $i3 = lengthof r3;

        if i7 >= $i3 goto label6;

        $r6 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Set usedLabels>;

        $r5 = r3[i7];

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r5);

        i7 = i7 + 1;

        goto label5;

     label6:
        $i4 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i5 = $i4 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i5;

        return;
    }

    public void visitMultiANewArrayInsn(java.lang.String, int)
    {
        int i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r1, $r6, $r11, $r16;
        char $c0;
        java.lang.IllegalArgumentException $r18, $r20, $r22;
        java.lang.StringBuilder $r4, $r5, $r9, $r10, $r14, $r15, $r17, $r19, $r21;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkDesc(java.lang.String,boolean)>(r1, 0);

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c0;

        if $i6 == 91 goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid descriptor (must be an array type descriptor): ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r18;

     label1:
        if i1 >= 1 goto label2;

        $r20 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid dimensions (must be greater than 0): ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r20;

     label2:
        $i2 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(91);

        $i3 = $i2 + 1;

        if i1 <= $i3 goto label3;

        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid dimensions (must not be greater than dims(desc)): ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r22;

     label3:
        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>(r1, i1);

        $i4 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount>;

        $i5 = $i4 + 1;

        r0.<org.objectweb.asm.util.CheckMethodAdapter: int insnCount> = $i5;

        return;
    }

    public void visitTryCatchBlock(org.objectweb.asm.Label, org.objectweb.asm.Label, org.objectweb.asm.Label, java.lang.String)
    {
        java.lang.IllegalStateException $r13;
        org.objectweb.asm.Label r1, r2, r3;
        java.util.List $r11, $r12;
        java.util.Map $r4, $r6, $r8;
        java.lang.Object $r5, $r7, $r9;
        java.lang.String r10;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: org.objectweb.asm.Label;

        r2 := @parameter1: org.objectweb.asm.Label;

        r3 := @parameter2: org.objectweb.asm.Label;

        r10 := @parameter3: java.lang.String;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>(r1, 0, "start label");

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>(r2, 0, "end label");

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>(r3, 0, "handler label");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkNonDebugLabel(org.objectweb.asm.Label)>(r1);

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkNonDebugLabel(org.objectweb.asm.Label)>(r2);

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkNonDebugLabel(org.objectweb.asm.Label)>(r3);

        $r4 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r5 != null goto label1;

        $r6 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if $r7 != null goto label1;

        $r8 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        if $r9 == null goto label2;

     label1:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Try catch blocks must be visited before their labels");

        throw $r13;

     label2:
        if r10 == null goto label3;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>(r10, "type");

     label3:
        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)>(r1, r2, r3, r10);

        $r11 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.List handlers>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r12 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.List handlers>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.objectweb.asm.Label, org.objectweb.asm.Label, int)
    {
        org.objectweb.asm.Label r3, r4;
        java.lang.Integer $r7, $r10;
        java.util.Map $r5, $r8;
        int $i0, i1, $i2, $i3;
        java.lang.String r1, r2, r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.Object $r6, $r9;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.String;

        r3 := @parameter3: org.objectweb.asm.Label;

        r4 := @parameter4: org.objectweb.asm.Label;

        i1 := @parameter5: int;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        $i0 = r0.<org.objectweb.asm.util.CheckMethodAdapter: int version>;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkUnqualifiedName(int,java.lang.String,java.lang.String)>($i0, r1, "name");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkDesc(java.lang.String,boolean)>(r2, 0);

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>(r3, 1, "start label");

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>(r4, 1, "end label");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkUnsignedShort(int,java.lang.String)>(i1, "Invalid variable index");

        $r5 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r7 = (java.lang.Integer) $r6;

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r10 = (java.lang.Integer) $r9;

        $i3 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if $i3 >= $i2 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid start and end labels (end must be greater than start)");

        throw $r12;

     label1:
        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>(r1, r2, r11, r3, r4, i1);

        return;
    }

    public void visitLineNumber(int, org.objectweb.asm.Label)
    {
        int i0;
        org.objectweb.asm.Label r1;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.Label;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkUnsignedShort(int,java.lang.String)>(i0, "Invalid line number");

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkLabel(org.objectweb.asm.Label,boolean,java.lang.String)>(r1, 1, "start label");

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>(i0, r1);

        return;
    }

    public void visitMaxs(int, int)
    {
        java.lang.IllegalStateException $r13, $r14, $r18;
        org.objectweb.asm.Label r19;
        java.lang.Integer r12, r20;
        java.util.Map $r5, $r9, $r16;
        int $i0, i1, i2, $i3, $i4, i5, i6;
        boolean $z0;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.List $r3, $r4, $r8;
        java.lang.Object $r6, $r7, $r10, $r11, $r15, $r17;
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkStartCode()>();

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndCode()>();

        r0.<org.objectweb.asm.util.CheckMethodAdapter: boolean endCode> = 1;

        $r1 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Set usedLabels>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r15 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.objectweb.asm.Label) $r15;

        $r16 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        if $r17 != null goto label2;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Undefined label used");

        throw $r18;

     label2:
        goto label1;

     label3:
        i5 = 0;

     label4:
        $r3 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.List handlers>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i5 >= $i0 goto label8;

        $r5 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r4 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.List handlers>;

        i6 = i5 + 1;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i5);

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r20 = (java.lang.Integer) $r7;

        $r9 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r8 = r0.<org.objectweb.asm.util.CheckMethodAdapter: java.util.List handlers>;

        i5 = i6 + 1;

        $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i6);

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r12 = (java.lang.Integer) $r11;

        if r20 == null goto label5;

        if r12 != null goto label6;

     label5:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Undefined try catch block labels");

        throw $r13;

     label6:
        $i3 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        $i4 = virtualinvoke r20.<java.lang.Integer: int intValue()>();

        if $i3 > $i4 goto label7;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Emty try catch block handler range");

        throw $r14;

     label7:
        goto label4;

     label8:
        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkUnsignedShort(int,java.lang.String)>(i1, "Invalid max stack");

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkUnsignedShort(int,java.lang.String)>(i2, "Invalid max locals");

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(i1, i2);

        return;
    }

    public void visitEnd()
    {
        org.objectweb.asm.util.CheckMethodAdapter r0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        virtualinvoke r0.<org.objectweb.asm.util.CheckMethodAdapter: void checkEndMethod()>();

        r0.<org.objectweb.asm.util.CheckMethodAdapter: boolean endMethod> = 1;

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void visitEnd()>();

        return;
    }

    void checkStartCode()
    {
        java.lang.IllegalStateException $r1;
        org.objectweb.asm.util.CheckMethodAdapter r0;
        boolean $z0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        $z0 = r0.<org.objectweb.asm.util.CheckMethodAdapter: boolean startCode>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot visit instructions before visitCode has been called.");

        throw $r1;

     label1:
        return;
    }

    void checkEndCode()
    {
        java.lang.IllegalStateException $r1;
        org.objectweb.asm.util.CheckMethodAdapter r0;
        boolean $z0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        $z0 = r0.<org.objectweb.asm.util.CheckMethodAdapter: boolean endCode>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot visit instructions after visitMaxs has been called.");

        throw $r1;

     label1:
        return;
    }

    void checkEndMethod()
    {
        java.lang.IllegalStateException $r1;
        org.objectweb.asm.util.CheckMethodAdapter r0;
        boolean $z0;

        r0 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        $z0 = r0.<org.objectweb.asm.util.CheckMethodAdapter: boolean endMethod>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot visit elements after visitEnd has been called.");

        throw $r1;

     label1:
        return;
    }

    void checkFrameValue(java.lang.Object)
    {
        org.objectweb.asm.Label $r9;
        java.lang.Integer $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r15, $r16;
        boolean $z0, $z1;
        java.util.Set $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.Object r0;
        java.lang.StringBuilder $r12, $r13, $r14;
        org.objectweb.asm.util.CheckMethodAdapter r8;

        r8 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        if r0 == $r1 goto label1;

        $r2 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        if r0 == $r2 goto label1;

        $r3 = <org.objectweb.asm.Opcodes: java.lang.Integer FLOAT>;

        if r0 == $r3 goto label1;

        $r4 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        if r0 == $r4 goto label1;

        $r5 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        if r0 == $r5 goto label1;

        $r6 = <org.objectweb.asm.Opcodes: java.lang.Integer NULL>;

        if r0 == $r6 goto label1;

        $r7 = <org.objectweb.asm.Opcodes: java.lang.Integer UNINITIALIZED_THIS>;

        if r0 != $r7 goto label2;

     label1:
        return;

     label2:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label3;

        $r16 = (java.lang.String) r0;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,java.lang.String)>($r16, "Invalid stack frame value");

        return;

     label3:
        $z1 = r0 instanceof org.objectweb.asm.Label;

        if $z1 != 0 goto label4;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid stack frame value: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label4:
        $r10 = r8.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Set usedLabels>;

        $r9 = (org.objectweb.asm.Label) r0;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r9);

        return;
    }

    static void checkOpcode(int, int)
    {
        java.lang.IllegalArgumentException $r1;
        int[] $r0;
        int i0, i1, $i2;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 > 199 goto label1;

        $r0 = <org.objectweb.asm.util.CheckMethodAdapter: int[] TYPE>;

        $i2 = $r0[i0];

        if $i2 == i1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid opcode: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    static void checkSignedByte(int, java.lang.String)
    {
        java.lang.IllegalArgumentException $r8;
        int i0, $i2;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;
        java.lang.String r2, $r6;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $i2 = (int) -128;

        if i0 < $i2 goto label1;

        if i0 <= 127 goto label2;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be a signed byte): ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label2:
        return;
    }

    static void checkSignedShort(int, java.lang.String)
    {
        java.lang.IllegalArgumentException $r8;
        int i0, $i2;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;
        java.lang.String r2, $r6;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $i2 = (int) -32768;

        if i0 < $i2 goto label1;

        if i0 <= 32767 goto label2;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be a signed short): ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label2:
        return;
    }

    static void checkUnsignedShort(int, java.lang.String)
    {
        java.lang.IllegalArgumentException $r8;
        int i0, $i2;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;
        java.lang.String r2, $r6;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        if i0 < 0 goto label1;

        $i2 = (int) 65535;

        if i0 <= $i2 goto label2;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be an unsigned short): ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label2:
        return;
    }

    static void checkConstant(java.lang.Object)
    {
        java.lang.IllegalArgumentException $r1;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Integer;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.Float;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof java.lang.Long;

        if $z2 != 0 goto label1;

        $z3 = r0 instanceof java.lang.Double;

        if $z3 != 0 goto label1;

        $z4 = r0 instanceof java.lang.String;

        if $z4 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid constant: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    void checkLDCConstant(java.lang.Object)
    {
        org.objectweb.asm.Type $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i13;
        java.lang.String $r7;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r13, $r14, $r15, $r16, $r18;
        org.objectweb.asm.Handle $r2;
        java.lang.Object r0;
        java.lang.StringBuilder $r5, $r6, $r17;
        org.objectweb.asm.util.CheckMethodAdapter r1;

        r1 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.objectweb.asm.Type;

        if $z0 == 0 goto label4;

        $r9 = (org.objectweb.asm.Type) r0;

        $i3 = virtualinvoke $r9.<org.objectweb.asm.Type: int getSort()>();

        if $i3 == 10 goto label1;

        if $i3 == 9 goto label1;

        if $i3 == 11 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal LDC constant value");

        throw $r13;

     label1:
        if $i3 == 11 goto label2;

        $i6 = r1.<org.objectweb.asm.util.CheckMethodAdapter: int version>;

        $i9 = (int) 65535;

        $i7 = $i6 & $i9;

        if $i7 >= 49 goto label2;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ldc of a constant class requires at least version 1.5");

        throw $r14;

     label2:
        if $i3 != 11 goto label3;

        $i4 = r1.<org.objectweb.asm.util.CheckMethodAdapter: int version>;

        $i11 = (int) 65535;

        $i5 = $i4 & $i11;

        if $i5 >= 51 goto label3;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ldc of a method type requires at least version 1.7");

        throw $r15;

     label3:
        goto label9;

     label4:
        $z1 = r0 instanceof org.objectweb.asm.Handle;

        if $z1 == 0 goto label8;

        $i0 = r1.<org.objectweb.asm.util.CheckMethodAdapter: int version>;

        $i13 = (int) 65535;

        $i1 = $i0 & $i13;

        if $i1 >= 51 goto label5;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ldc of a handle requires at least version 1.7");

        throw $r16;

     label5:
        $r2 = (org.objectweb.asm.Handle) r0;

        $i2 = virtualinvoke $r2.<org.objectweb.asm.Handle: int getTag()>();

        if $i2 < 1 goto label6;

        if $i2 <= 9 goto label7;

     label6:
        $r18 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid handle tag ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r18;

     label7:
        goto label9;

     label8:
        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkConstant(java.lang.Object)>(r0);

     label9:
        return;
    }

    static void checkUnqualifiedName(int, java.lang.String, java.lang.String)
    {
        int i0, $i1, $i2, $i4, i5, $i7, $i8, $i10;
        java.lang.String r0, $r1, r5, $r9;
        char $c3;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r10;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $i7 = (int) 65535;

        $i1 = i0 & $i7;

        if $i1 >= 49 goto label1;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkIdentifier(java.lang.String,java.lang.String)>(r0, r5);

        goto label4;

     label1:
        i5 = 0;

     label2:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i2 goto label4;

        $r1 = ".;[/";

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i8 = (int) $c3;

        $i4 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($i8);

        $i10 = (int) -1;

        if $i4 == $i10 goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be a valid unqualified name): ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return;
    }

    static void checkIdentifier(java.lang.String, java.lang.String)
    {
        int $i1;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i1 = (int) -1;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkIdentifier(java.lang.String,int,int,java.lang.String)>(r0, 0, $i1, r1);

        return;
    }

    static void checkIdentifier(java.lang.String, int, int, java.lang.String)
    {
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r22, $r24, $r26;
        int i0, i1, i3, $i5, $i6, i7, $i9, $i11;
        java.lang.String r0, r1, $r8, $r15, $r21;
        char $c2, $c4;
        java.lang.IllegalArgumentException $r23, $r25, $r27;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        if r0 == null goto label2;

        $i9 = (int) -1;

        if i0 != $i9 goto label1;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i5 > i1 goto label3;

        goto label2;

     label1:
        if i0 > i1 goto label3;

     label2:
        $r23 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must not be null or empty)");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r23;

     label3:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c2);

        if $z0 != 0 goto label4;

        $r25 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be a valid Java identifier): ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r25;

     label4:
        $i11 = (int) -1;

        if i0 != $i11 goto label5;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label6;

     label5:
        $i6 = i0;

     label6:
        i3 = $i6;

        i7 = i1 + 1;

     label7:
        if i7 >= i3 goto label9;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c4);

        if $z1 != 0 goto label8;

        $r27 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be a valid Java identifier): ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r27;

     label8:
        i7 = i7 + 1;

        goto label7;

     label9:
        return;
    }

    static void checkMethodIdentifier(int, java.lang.String, java.lang.String)
    {
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r5, $r6, $r10, $r11, $r12, $r13, $r17, $r18, $r19, $r20, $r25, $r26, $r27, $r28, $r30, $r32, $r34, $r36;
        int $i0, i1, $i2, $i4, $i6, $i8, i9, i10, $i12, $i13, $i15;
        java.lang.String r0, r4, $r7, $r14, $r21, $r22, $r29;
        char $c3, $c5, $c7;
        java.lang.IllegalArgumentException $r31, $r33, $r35, $r37;

        i1 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        $r31 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must not be null or empty)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r31;

     label02:
        $i12 = (int) 65535;

        $i2 = i1 & $i12;

        if $i2 < 49 goto label06;

        i9 = 0;

     label03:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if i9 >= $i6 goto label05;

        $r22 = ".;[/<>";

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        $i13 = (int) $c7;

        $i8 = virtualinvoke $r22.<java.lang.String: int indexOf(int)>($i13);

        $i15 = (int) -1;

        if $i8 == $i15 goto label04;

        $r33 = new java.lang.IllegalArgumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be a valid unqualified name): ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r33;

     label04:
        i9 = i9 + 1;

        goto label03;

     label05:
        return;

     label06:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c3);

        if $z0 != 0 goto label07;

        $r35 = new java.lang.IllegalArgumentException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be a \'<init>\', \'<clinit>\' or a valid Java identifier): ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r35;

     label07:
        i10 = 1;

     label08:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if i10 >= $i4 goto label10;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c5);

        if $z1 != 0 goto label09;

        $r37 = new java.lang.IllegalArgumentException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be \'<init>\' or \'<clinit>\' or a valid Java identifier): ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r37;

     label09:
        i10 = i10 + 1;

        goto label08;

     label10:
        return;
    }

    static void checkInternalName(java.lang.String, java.lang.String)
    {
        char $c1;
        java.lang.IllegalArgumentException $r9;
        int $i0, $i2, $i4;
        java.lang.StringBuilder $r3, $r5, $r6, $r8;
        java.lang.String r0, r4, $r7;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must not be null or empty)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label2:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        if $i2 != 91 goto label3;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkDesc(java.lang.String,boolean)>(r0, 0);

        goto label4;

     label3:
        $i4 = (int) -1;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,int,int,java.lang.String)>(r0, 0, $i4, r4);

     label4:
        return;
    }

    static void checkInternalName(java.lang.String, int, int, java.lang.String)
    {
        int i0, i1, i2, $i3, i4, $i5, $i6, i7, $i9, $i11;
        java.lang.String r0, r5, $r9;
        java.lang.IllegalArgumentException $r1, $r11;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r10;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r5 := @parameter3: java.lang.String;

        $i9 = (int) -1;

        if i0 != $i9 goto label1;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label2;

     label1:
        $i3 = i0;

     label2:
        i1 = $i3;

     label3:
        i4 = i2;

     label4:
        $i5 = i4 + 1;

        $i6 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(47, $i5);

        i7 = $i6;

        $i11 = (int) -1;

        if $i6 == $i11 goto label5;

        if $i6 <= i1 goto label6;

     label5:
        i7 = i1;

     label6:
        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkIdentifier(java.lang.String,int,int,java.lang.String)>(r0, i4, i7, null);

        i4 = i7 + 1;

        if i7 != i1 goto label4;

     label7:
        goto label9;

     label8:
        $r1 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be a fully qualified class name in internal form): ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label9:
        return;

        catch java.lang.IllegalArgumentException from label3 to label7 with label8;
    }

    static void checkDesc(java.lang.String, boolean)
    {
        java.lang.IllegalArgumentException $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r0, $r5;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: int checkDesc(java.lang.String,int,boolean)>(r0, 0, z0);

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == $i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid descriptor: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    static int checkDesc(java.lang.String, int, boolean)
    {
        boolean z0;
        java.lang.StringBuilder $r4, $r5, $r9, $r10, $r14, $r15, $r19, $r20, $r25, $r26, $r29, $r31, $r33, $r35, $r37;
        int i0, $i1, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15, $i17;
        java.lang.String r0, $r6, $r11, $r16, $r21, $r27;
        char $c2, $c6;
        java.lang.IllegalArgumentException $r22, $r28, $r30, $r32, $r34, $r36, $r38;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if r0 == null goto label01;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 < $i1 goto label02;

     label01:
        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid type descriptor (must not be null or empty)");

        throw $r28;

     label02:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i14 = (int) $c2;

        tableswitch($i14)
        {
            case 66: goto label05;
            case 67: goto label05;
            case 68: goto label05;
            case 69: goto label16;
            case 70: goto label05;
            case 71: goto label16;
            case 72: goto label16;
            case 73: goto label05;
            case 74: goto label05;
            case 75: goto label16;
            case 76: goto label10;
            case 77: goto label16;
            case 78: goto label16;
            case 79: goto label16;
            case 80: goto label16;
            case 81: goto label16;
            case 82: goto label16;
            case 83: goto label05;
            case 84: goto label16;
            case 85: goto label16;
            case 86: goto label03;
            case 87: goto label16;
            case 88: goto label16;
            case 89: goto label16;
            case 90: goto label05;
            case 91: goto label06;
            default: goto label16;
        };

     label03:
        if z0 == 0 goto label04;

        $i7 = i0 + 1;

        return $i7;

     label04:
        $r30 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid descriptor: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r30;

     label05:
        $i12 = i0 + 1;

        return $i12;

     label06:
        i13 = i0 + 1;

     label07:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i13 >= $i3 goto label08;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i13);

        $i15 = (int) $c6;

        if $i15 != 91 goto label08;

        i13 = i13 + 1;

        goto label07;

     label08:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if i13 >= $i4 goto label09;

        $i5 = staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: int checkDesc(java.lang.String,int,boolean)>(r0, i13, 0);

        return $i5;

     label09:
        $r32 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid descriptor: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r32;

     label10:
        $i8 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(59, i0);

        $i17 = (int) -1;

        if $i8 == $i17 goto label11;

        $i9 = $i8 - i0;

        if $i9 >= 2 goto label12;

     label11:
        $r34 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid descriptor: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r34;

     label12:
        $i10 = i0 + 1;

        staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: void checkInternalName(java.lang.String,int,int,java.lang.String)>(r0, $i10, $i8, null);

     label13:
        goto label15;

     label14:
        $r22 := @caughtexception;

        $r36 = new java.lang.IllegalArgumentException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid descriptor: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r36;

     label15:
        $i11 = $i8 + 1;

        return $i11;

     label16:
        $r38 = new java.lang.IllegalArgumentException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid descriptor: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r38;

        catch java.lang.IllegalArgumentException from label12 to label13 with label14;
    }

    static void checkMethodDesc(java.lang.String)
    {
        java.lang.StringBuilder $r4, $r5, $r9, $r10, $r14, $r15, $r18, $r20, $r22;
        int $i0, $i2, $i5, $i6, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String r0, $r6, $r11, $r16;
        char $c1, $c3, $c4, $c7;
        java.lang.IllegalArgumentException $r17, $r19, $r21, $r23;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid method descriptor (must not be null or empty)");

        throw $r17;

     label2:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i12 = (int) $c1;

        if $i12 != 40 goto label3;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 >= 3 goto label4;

     label3:
        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid descriptor: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r19;

     label4:
        i8 = 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $i13 = (int) $c3;

        if $i13 == 41 goto label7;

     label5:
        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        $i14 = (int) $c4;

        if $i14 != 86 goto label6;

        $r21 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid descriptor: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r21;

     label6:
        $i5 = staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: int checkDesc(java.lang.String,int,boolean)>(r0, i8, 0);

        i8 = $i5;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i5 >= $i6 goto label7;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $i15 = (int) $c7;

        if $i15 != 41 goto label5;

     label7:
        $i9 = i8 + 1;

        $i10 = staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: int checkDesc(java.lang.String,int,boolean)>(r0, $i9, 1);

        $i11 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i10 == $i11 goto label8;

        $r23 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid descriptor: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r23;

     label8:
        return;
    }

    void checkLabel(org.objectweb.asm.Label, boolean, java.lang.String)
    {
        org.objectweb.asm.Label r0;
        java.util.Map $r2;
        java.lang.String r7, $r10, $r16;
        boolean z0;
        java.lang.IllegalArgumentException $r4, $r11;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r12, $r13, $r14, $r15;
        org.objectweb.asm.util.CheckMethodAdapter r1;

        r1 := @this: org.objectweb.asm.util.CheckMethodAdapter;

        r0 := @parameter0: org.objectweb.asm.Label;

        z0 := @parameter1: boolean;

        r7 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must not be null)");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        if z0 == 0 goto label2;

        $r2 = r1.<org.objectweb.asm.util.CheckMethodAdapter: java.util.Map labels>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if $r3 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be visited first)");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        return;
    }

    private static void checkNonDebugLabel(org.objectweb.asm.Label)
    {
        java.lang.IllegalAccessException $r5;
        org.objectweb.asm.Label r1;
        java.lang.Error $r6;
        java.lang.reflect.Field $r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Integer $r3;
        int $i0, $i1;
        java.lang.Object $r2;

        r1 := @parameter0: org.objectweb.asm.Label;

        $r0 = staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: java.lang.reflect.Field getLabelStatusField()>();

     label1:
        if $r0 != null goto label2;

        $i1 = 0;

        goto label3;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $r3 = (java.lang.Integer) $r2;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>("Internal error");

        throw $r6;

     label5:
        $i0 = $i1 & 1;

        if $i0 == 0 goto label6;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Labels used for debug info cannot be reused for control flow");

        throw $r4;

     label6:
        return;

        catch java.lang.IllegalAccessException from label1 to label3 with label4;
    }

    private static java.lang.reflect.Field getLabelStatusField()
    {
        java.lang.reflect.Field $r0, $r1, $r2, $r3, $r4;

        $r0 = <org.objectweb.asm.util.CheckMethodAdapter: java.lang.reflect.Field labelStatusField>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: java.lang.reflect.Field getLabelField(java.lang.String)>("a");

        <org.objectweb.asm.util.CheckMethodAdapter: java.lang.reflect.Field labelStatusField> = $r1;

        $r2 = <org.objectweb.asm.util.CheckMethodAdapter: java.lang.reflect.Field labelStatusField>;

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.objectweb.asm.util.CheckMethodAdapter: java.lang.reflect.Field getLabelField(java.lang.String)>("status");

        <org.objectweb.asm.util.CheckMethodAdapter: java.lang.reflect.Field labelStatusField> = $r3;

     label1:
        $r4 = <org.objectweb.asm.util.CheckMethodAdapter: java.lang.reflect.Field labelStatusField>;

        return $r4;
    }

    private static java.lang.reflect.Field getLabelField(java.lang.String)
    {
        java.lang.NoSuchFieldException $r3;
        java.lang.Class $r1;
        java.lang.String r0;
        java.lang.reflect.Field $r2;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = class "Lorg/objectweb/asm/Label;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        char $c2;
        int[] $r1, $r2, $r3;
        int $i0, $i1, $i3, $i4, i5, $i6;
        java.lang.String r0, r4, r5;

        r0 = "BBBBBBBBBBBBBBBBCCIAADDDDDAAAAAAAAAAAAAAAAAAAABBBBBBBBDDDDDAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBBBBBBBBBBBBBBBHHHHHHHHHHHHHHHHDKLBBBBBBFFFFGGGGAECEBBEEBBAMHHAA";

        r5 = "BBBBBBBBBBBBBBBBCCIAADDDDDAAAAAAAAAAAAAAAAAAAABBBBBBBBDDDDDAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBBBBBBBBBBBBBBBHHHHHHHHHHHHHHHHDKLBBBBBBFFFFGGGGAECEBBEEBBAMHHAA";

        r4 = "BBBBBBBBBBBBBBBBCCIAADDDDDAAAAAAAAAAAAAAAAAAAABBBBBBBBDDDDDAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBJBBBBBBBBBBBBBBBBBBBBHHHHHHHHHHHHHHHHDKLBBBBBBFFFFGGGGAECEBBEEBBAMHHAA";

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        $r1 = newarray (int)[$i0];

        <org.objectweb.asm.util.CheckMethodAdapter: int[] TYPE> = $r1;

        i5 = 0;

     label1:
        $r2 = <org.objectweb.asm.util.CheckMethodAdapter: int[] TYPE>;

        $i1 = lengthof $r2;

        if i5 >= $i1 goto label2;

        $r3 = <org.objectweb.asm.util.CheckMethodAdapter: int[] TYPE>;

        $c2 = virtualinvoke r4.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c2;

        $i3 = $i6 - 65;

        $i4 = $i3 - 1;

        $r3[i5] = $i4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
}
