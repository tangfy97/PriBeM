public final class org.apache.poi.openxml4j.opc.internal.FileHelper extends java.lang.Object
{

    public void <init>()
    {
        org.apache.poi.openxml4j.opc.internal.FileHelper r0;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.FileHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.File getDirectory(java.io.File)
    {
        char $c0, $c1;
        java.io.File r0, $r4;
        int i2, $i4, $i5, $i6;
        java.lang.String $r1, $r3;

        r0 := @parameter0: java.io.File;

        if r0 == null goto label3;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        i2 = virtualinvoke $r1.<java.lang.String: int length()>();

     label1:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 < 0 goto label3;

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i2);

        $c1 = <java.io.File: char separatorChar>;

        $i5 = (int) $c0;

        $i6 = (int) $c1;

        if $i5 != $i6 goto label2;

        $r4 = new java.io.File;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r3);

        return $r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static void copyFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.FileOutputStream $r3;
        long $l0;
        java.io.FileInputStream $r0;
        java.nio.channels.FileChannel $r2, $r5;
        java.io.File r1, r4;

        r1 := @parameter0: java.io.File;

        r4 := @parameter1: java.io.File;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        $r2 = virtualinvoke $r0.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>(r4);

        $r5 = virtualinvoke $r3.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $l0 = virtualinvoke $r2.<java.nio.channels.FileChannel: long size()>();

        virtualinvoke $r2.<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>(0L, $l0, $r5);

        virtualinvoke $r2.<java.nio.channels.FileChannel: void close()>();

        virtualinvoke $r5.<java.nio.channels.FileChannel: void close()>();

        return;
    }

    public static java.lang.String getFilename(java.io.File)
    {
        char $c1, $c2;
        java.io.File r0;
        int $i0, $i3, i4, $i6, $i7, $i8;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.io.File;

        if r0 == null goto label3;

        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i4 = $i0;

     label1:
        $i6 = (int) -1;

        i4 = i4 + $i6;

        if i4 < 0 goto label3;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i4);

        $c2 = <java.io.File: char separatorChar>;

        $i7 = (int) $c1;

        $i8 = (int) $c2;

        if $i7 != $i8 goto label2;

        $i3 = i4 + 1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i3, $i0);

        return $r2;

     label2:
        goto label1;

     label3:
        return "";
    }
}
