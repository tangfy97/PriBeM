public class org.apache.cxf.common.xmlschema.SchemaCollection extends java.lang.Object
{
    private org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection;
    private java.util.Map xmlTypesCheckedForCrossImportsPerSchema;

    public void <init>()
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        $r1 = new org.apache.ws.commons.schema.XmlSchemaCollection;

        specialinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaCollection: void <init>()>();

        specialinvoke r0.<org.apache.cxf.common.xmlschema.SchemaCollection: void <init>(org.apache.ws.commons.schema.XmlSchemaCollection)>($r1);

        return;
    }

    public void <init>(org.apache.ws.commons.schema.XmlSchemaCollection)
    {
        org.apache.ws.commons.schema.utils.NamespaceMap $r5;
        org.apache.ws.commons.schema.XmlSchemaCollection r2, $r3, $r6;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.utils.NamespacePrefixList $r4;
        java.util.HashMap $r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r2 := @parameter0: org.apache.ws.commons.schema.XmlSchemaCollection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.cxf.common.xmlschema.SchemaCollection: java.util.Map xmlTypesCheckedForCrossImportsPerSchema> = $r1;

        r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection> = r2;

        $r3 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r4 = virtualinvoke $r3.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.utils.NamespacePrefixList getNamespaceContext()>();

        if $r4 != null goto label1;

        $r6 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r5 = new org.apache.ws.commons.schema.utils.NamespaceMap;

        specialinvoke $r5.<org.apache.ws.commons.schema.utils.NamespaceMap: void <init>()>();

        virtualinvoke $r6.<org.apache.ws.commons.schema.XmlSchemaCollection: void setNamespaceContext(org.apache.ws.commons.schema.utils.NamespacePrefixList)>($r5);

     label1:
        return;
    }

    public org.apache.ws.commons.schema.XmlSchemaCollection getXmlSchemaCollection()
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        $r1 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r1, $r3;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2, $r4, $r5;
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.cxf.common.xmlschema.SchemaCollection;

        if $z0 == 0 goto label1;

        $r5 = r1.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r3 = (org.apache.cxf.common.xmlschema.SchemaCollection) r0;

        $r4 = $r3.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $z3 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        return $z3;

     label1:
        $z1 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaCollection;

        if $z1 == 0 goto label2;

        $r2 = r1.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $z2 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        return $z2;

     label2:
        return 0;
    }

    public org.apache.ws.commons.schema.XmlSchemaElement getElementByQName(javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        javax.xml.namespace.QName r1;
        org.apache.ws.commons.schema.XmlSchemaElement $r3;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchemaElement getElementByQName(javax.xml.namespace.QName)>(r1);

        return $r3;
    }

    public org.apache.ws.commons.schema.XmlSchemaAttribute getAttributeByQName(javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaAttribute $r3;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchemaAttribute getAttributeByQName(javax.xml.namespace.QName)>(r1);

        return $r3;
    }

    public org.apache.ws.commons.schema.extensions.ExtensionRegistry getExtReg()
    {
        org.apache.ws.commons.schema.extensions.ExtensionRegistry $r2;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        $r1 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r2 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.extensions.ExtensionRegistry getExtReg()>();

        return $r2;
    }

    public org.apache.ws.commons.schema.utils.NamespacePrefixList getNamespaceContext()
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.utils.NamespacePrefixList $r2;
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        $r1 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r2 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.utils.NamespacePrefixList getNamespaceContext()>();

        return $r2;
    }

    public org.apache.ws.commons.schema.XmlSchemaType getTypeByQName(javax.xml.namespace.QName)
    {
        org.apache.ws.commons.schema.XmlSchemaType $r3;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchemaType getTypeByQName(javax.xml.namespace.QName)>(r1);

        return $r3;
    }

    public org.apache.ws.commons.schema.XmlSchema[] getXmlSchema(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        java.lang.String r1;
        org.apache.ws.commons.schema.XmlSchema[] $r3;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchema[] getXmlSchema(java.lang.String)>(r1);

        return $r3;
    }

    public org.apache.ws.commons.schema.XmlSchema[] getXmlSchemas()
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;
        org.apache.ws.commons.schema.XmlSchema[] $r2;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        $r1 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r2 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchema[] getXmlSchemas()>();

        return $r2;
    }

    public int hashCode()
    {
        int $i0;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        $r1 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public void init()
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        $r1 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaCollection: void init()>();

        return;
    }

    public org.apache.ws.commons.schema.XmlSchema read(org.w3c.dom.Element, java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchemaCollection $r3;
        org.w3c.dom.Element r1;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchema $r4;
        java.lang.String r2;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r4 = virtualinvoke $r3.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchema read(org.w3c.dom.Element,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.apache.ws.commons.schema.XmlSchema read(org.w3c.dom.Document, java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchemaCollection $r3;
        org.w3c.dom.Document r1;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchema $r4;
        java.lang.String r2;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: org.w3c.dom.Document;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r4 = virtualinvoke $r3.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchema read(org.w3c.dom.Document,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.apache.ws.commons.schema.XmlSchema read(org.w3c.dom.Element)
    {
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        org.w3c.dom.Element r1;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchema $r3;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchema read(org.w3c.dom.Element)>(r1);

        return $r3;
    }

    public void setBaseUri(java.lang.String)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: void setBaseUri(java.lang.String)>(r1);

        return;
    }

    public void setExtReg(org.apache.ws.commons.schema.extensions.ExtensionRegistry)
    {
        org.apache.ws.commons.schema.extensions.ExtensionRegistry r1;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: org.apache.ws.commons.schema.extensions.ExtensionRegistry;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: void setExtReg(org.apache.ws.commons.schema.extensions.ExtensionRegistry)>(r1);

        return;
    }

    public void setNamespaceContext(org.apache.ws.commons.schema.utils.NamespacePrefixList)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.utils.NamespacePrefixList r1;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: org.apache.ws.commons.schema.utils.NamespacePrefixList;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: void setNamespaceContext(org.apache.ws.commons.schema.utils.NamespacePrefixList)>(r1);

        return;
    }

    public void setSchemaResolver(org.apache.ws.commons.schema.resolver.URIResolver)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        org.apache.ws.commons.schema.resolver.URIResolver r1;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: org.apache.ws.commons.schema.resolver.URIResolver;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: void setSchemaResolver(org.apache.ws.commons.schema.resolver.URIResolver)>(r1);

        return;
    }

    public org.apache.ws.commons.schema.XmlSchema getSchemaByTargetNamespace(java.lang.String)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchema[] $r2;
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;
        int i0, i1;
        org.apache.ws.commons.schema.XmlSchema r3;
        java.lang.String r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r2 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchema[] getXmlSchemas()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = $r2[i1];

        $r5 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getTargetNamespace()>();

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public org.apache.ws.commons.schema.XmlSchema getSchemaForElement(javax.xml.namespace.QName)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaElement $r8, $r9;
        org.apache.ws.commons.schema.XmlSchema[] $r2;
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;
        int i0, i1;
        org.apache.ws.commons.schema.XmlSchema r3;
        javax.xml.namespace.QName r4;
        java.lang.String $r5, $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r4 := @parameter0: javax.xml.namespace.QName;

        $r1 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r2 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchema[] getXmlSchemas()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = $r2[i1];

        $r5 = virtualinvoke r4.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r6 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getTargetNamespace()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r4.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r8 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaElement getElementByName(java.lang.String)>($r7);

        if $r8 == null goto label2;

        return r3;

     label2:
        $r9 = virtualinvoke r3.<org.apache.ws.commons.schema.XmlSchema: org.apache.ws.commons.schema.XmlSchemaElement getElementByName(javax.xml.namespace.QName)>(r4);

        if $r9 == null goto label3;

        return r3;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return null;
    }

    public org.apache.ws.commons.schema.XmlSchema newXmlSchemaInCollection(java.lang.String)
    {
        org.apache.ws.commons.schema.XmlSchemaCollection $r3;
        org.apache.ws.commons.schema.XmlSchema $r0;
        org.apache.cxf.common.xmlschema.SchemaCollection r2;
        java.lang.String r1;

        r2 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.ws.commons.schema.XmlSchema;

        $r3 = r2.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        specialinvoke $r0.<org.apache.ws.commons.schema.XmlSchema: void <init>(java.lang.String,org.apache.ws.commons.schema.XmlSchemaCollection)>(r1, $r3);

        return $r0;
    }

    public void validateQNameNamespace(javax.xml.namespace.QName)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r3;
        org.apache.cxf.common.xmlschema.InvalidXmlSchemaReferenceException $r6;
        org.apache.ws.commons.schema.XmlSchema[] $r5;
        org.apache.ws.commons.schema.XmlSchemaCollection $r4;
        int i0, i1;
        org.apache.ws.commons.schema.XmlSchema r11;
        java.lang.String $r1, $r2, $r10, $r12, $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r8, $r9;
        javax.xml.namespace.QName r0;

        r3 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r0 := @parameter0: javax.xml.namespace.QName;

        $r1 = "";

        $r2 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = r3.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r5 = virtualinvoke $r4.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchema[] getXmlSchemas()>();

        i0 = lengthof $r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r11 = $r5[i1];

        $r12 = virtualinvoke r11.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getTargetNamespace()>();

        $r13 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label3;

        return;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r6 = new org.apache.cxf.common.xmlschema.InvalidXmlSchemaReferenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" refers to unknown namespace.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.cxf.common.xmlschema.InvalidXmlSchemaReferenceException: void <init>(java.lang.String)>($r10);

        throw $r6;
    }

    public void validateElementName(javax.xml.namespace.QName, javax.xml.namespace.QName)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchemaElement $r3;
        org.apache.cxf.common.xmlschema.InvalidXmlSchemaReferenceException $r4;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        javax.xml.namespace.QName r1, r6;
        java.lang.String $r10;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r6 := @parameter0: javax.xml.namespace.QName;

        r1 := @parameter1: javax.xml.namespace.QName;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchemaElement getElementByQName(javax.xml.namespace.QName)>(r1);

        if $r3 != null goto label1;

        $r4 = new org.apache.cxf.common.xmlschema.InvalidXmlSchemaReferenceException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" references non-existent element ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.cxf.common.xmlschema.InvalidXmlSchemaReferenceException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        return;
    }

    public void validateTypeName(javax.xml.namespace.QName, javax.xml.namespace.QName)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.cxf.common.xmlschema.InvalidXmlSchemaReferenceException $r4;
        org.apache.ws.commons.schema.XmlSchemaType $r3;
        org.apache.ws.commons.schema.XmlSchemaCollection $r2;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        javax.xml.namespace.QName r1, r6;
        java.lang.String $r10;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r6 := @parameter0: javax.xml.namespace.QName;

        r1 := @parameter1: javax.xml.namespace.QName;

        $r2 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchemaType getTypeByQName(javax.xml.namespace.QName)>(r1);

        if $r3 != null goto label1;

        $r4 = new org.apache.cxf.common.xmlschema.InvalidXmlSchemaReferenceException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" references non-existent type ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.cxf.common.xmlschema.InvalidXmlSchemaReferenceException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        return;
    }

    public void addCrossImports()
    {
        org.apache.ws.commons.schema.XmlSchemaCollection $r1;
        int i0, i1;
        org.apache.cxf.common.xmlschema.SchemaCollection r0;
        org.apache.ws.commons.schema.XmlSchema r3;
        org.apache.ws.commons.schema.XmlSchema[] $r2;

        r0 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        $r1 = r0.<org.apache.cxf.common.xmlschema.SchemaCollection: org.apache.ws.commons.schema.XmlSchemaCollection schemaCollection>;

        $r2 = virtualinvoke $r1.<org.apache.ws.commons.schema.XmlSchemaCollection: org.apache.ws.commons.schema.XmlSchema[] getXmlSchemas()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r2[i1];

        specialinvoke r0.<org.apache.cxf.common.xmlschema.SchemaCollection: void addOneSchemaCrossImports(org.apache.ws.commons.schema.XmlSchema)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void addOneSchemaCrossImports(org.apache.ws.commons.schema.XmlSchema)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r11;
        org.apache.ws.commons.schema.XmlSchemaAttribute r18;
        org.apache.ws.commons.schema.XmlSchemaElement r17;
        org.apache.ws.commons.schema.XmlSchemaType r19;
        java.util.Map $r1, $r4, $r7;
        org.apache.ws.commons.schema.XmlSchema r0;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3, $r6, $r9;
        java.util.Collection $r2, $r5, $r8;
        org.apache.ws.commons.schema.utils.XmlSchemaRef $r13;
        java.lang.Object $r10, $r12, $r16;
        javax.xml.namespace.QName $r14, $r15;

        r11 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r0 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map getElements()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r16 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.apache.ws.commons.schema.XmlSchemaElement) $r16;

        specialinvoke r11.<org.apache.cxf.common.xmlschema.SchemaCollection: void addElementCrossImportsElement(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaElement)>(r0, r17);

        goto label1;

     label2:
        $r4 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map getAttributes()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.ws.commons.schema.XmlSchemaAttribute) $r12;

        $r13 = virtualinvoke r18.<org.apache.ws.commons.schema.XmlSchemaAttribute: org.apache.ws.commons.schema.utils.XmlSchemaRef getRef()>();

        $r14 = virtualinvoke $r13.<org.apache.ws.commons.schema.utils.XmlSchemaRef: javax.xml.namespace.QName getTargetQName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,javax.xml.namespace.QName)>(r0, $r14);

        $r15 = virtualinvoke r18.<org.apache.ws.commons.schema.XmlSchemaAttribute: javax.xml.namespace.QName getSchemaTypeName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,javax.xml.namespace.QName)>(r0, $r15);

        goto label3;

     label4:
        $r7 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchema: java.util.Map getSchemaTypes()>();

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.ws.commons.schema.XmlSchemaType) $r10;

        specialinvoke r11.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImportsType(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaType)>(r0, r19);

        goto label5;

     label6:
        return;
    }

    private void addElementCrossImportsElement(org.apache.ws.commons.schema.XmlSchema, org.apache.ws.commons.schema.XmlSchemaElement)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r6;
        org.apache.ws.commons.schema.XmlSchemaElement r0;
        org.apache.ws.commons.schema.utils.XmlSchemaRef $r2;
        org.apache.ws.commons.schema.XmlSchemaType $r5;
        org.apache.ws.commons.schema.XmlSchema r1;
        javax.xml.namespace.QName $r3, $r4;
        boolean $z0;

        r6 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r1 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter1: org.apache.ws.commons.schema.XmlSchemaElement;

        $r2 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.utils.XmlSchemaRef getRef()>();

        $r3 = virtualinvoke $r2.<org.apache.ws.commons.schema.utils.XmlSchemaRef: javax.xml.namespace.QName getTargetQName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,javax.xml.namespace.QName)>(r1, $r3);

        $r4 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: javax.xml.namespace.QName getSchemaTypeName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,javax.xml.namespace.QName)>(r1, $r4);

        $r5 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaElement: org.apache.ws.commons.schema.XmlSchemaType getSchemaType()>();

        $z0 = specialinvoke r6.<org.apache.cxf.common.xmlschema.SchemaCollection: boolean crossImportsAdded(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaType)>(r1, $r5);

        if $z0 != 0 goto label1;

        specialinvoke r6.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImportsType(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaType)>(r1, $r5);

     label1:
        return;
    }

    private boolean crossImportsAdded(org.apache.ws.commons.schema.XmlSchema, org.apache.ws.commons.schema.XmlSchemaType)
    {
        org.apache.cxf.common.xmlschema.SchemaCollection r1;
        java.util.Set r8;
        org.apache.ws.commons.schema.XmlSchemaType r0;
        java.util.HashSet $r6;
        java.util.Map $r3, $r4, $r7;
        org.apache.ws.commons.schema.XmlSchema r2;
        java.lang.Object $r5;
        boolean $z0, $z1, z2;

        r1 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r2 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter1: org.apache.ws.commons.schema.XmlSchemaType;

        z2 = 1;

        if r0 == null goto label3;

        $r3 = r1.<org.apache.cxf.common.xmlschema.SchemaCollection: java.util.Map xmlTypesCheckedForCrossImportsPerSchema>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r8 = $r6;

        $r7 = r1.<org.apache.cxf.common.xmlschema.SchemaCollection: java.util.Map xmlTypesCheckedForCrossImportsPerSchema>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);

        goto label2;

     label1:
        $r4 = r1.<org.apache.cxf.common.xmlschema.SchemaCollection: java.util.Map xmlTypesCheckedForCrossImportsPerSchema>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r8 = (java.util.Set) $r5;

     label2:
        $z1 = interfaceinvoke r8.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z1 != 0 goto label3;

        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>(r0);

        z2 = 0;

     label3:
        return z2;
    }

    private void addCrossImportsType(org.apache.ws.commons.schema.XmlSchema, org.apache.ws.commons.schema.XmlSchemaType)
    {
        org.apache.ws.commons.schema.XmlSchemaContentModel $r5;
        org.apache.ws.commons.schema.XmlSchemaSequence $r9;
        org.apache.ws.commons.schema.XmlSchemaParticle $r7, $r8;
        org.apache.ws.commons.schema.XmlSchemaComplexType r1;
        org.apache.cxf.common.xmlschema.SchemaCollection r4;
        org.apache.ws.commons.schema.XmlSchemaAll $r10;
        org.apache.ws.commons.schema.XmlSchemaType r0;
        java.util.List $r6;
        org.apache.ws.commons.schema.XmlSchemaChoice $r11;
        org.apache.ws.commons.schema.XmlSchema r2;
        javax.xml.namespace.QName $r3;
        boolean $z0, $z1, $z2;

        r4 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r2 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter1: org.apache.ws.commons.schema.XmlSchemaType;

        $z0 = r0 instanceof org.apache.ws.commons.schema.XmlSchemaComplexType;

        if $z0 == 0 goto label3;

        r1 = (org.apache.ws.commons.schema.XmlSchemaComplexType) r0;

        $r3 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaComplexType: javax.xml.namespace.QName getBaseSchemaTypeName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,javax.xml.namespace.QName)>(r2, $r3);

        $r5 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaComplexType: org.apache.ws.commons.schema.XmlSchemaContentModel getContentModel()>();

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImports(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaContentModel)>(r2, $r5);

        $r6 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaComplexType: java.util.List getAttributes()>();

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImportsAttributeList(org.apache.ws.commons.schema.XmlSchema,java.util.List)>(r2, $r6);

        $r7 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaComplexType: org.apache.ws.commons.schema.XmlSchemaParticle getParticle()>();

        $z1 = $r7 instanceof org.apache.ws.commons.schema.XmlSchemaChoice;

        if $z1 == 0 goto label1;

        $r11 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaChoice getChoice(org.apache.ws.commons.schema.XmlSchemaComplexType)>(r1);

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImports(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaChoice)>(r2, $r11);

        goto label3;

     label1:
        $r8 = virtualinvoke r1.<org.apache.ws.commons.schema.XmlSchemaComplexType: org.apache.ws.commons.schema.XmlSchemaParticle getParticle()>();

        $z2 = $r8 instanceof org.apache.ws.commons.schema.XmlSchemaAll;

        if $z2 == 0 goto label2;

        $r10 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaAll getAll(org.apache.ws.commons.schema.XmlSchemaComplexType)>(r1);

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImports(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaAll)>(r2, $r10);

        goto label3;

     label2:
        $r9 = staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: org.apache.ws.commons.schema.XmlSchemaSequence getSequence(org.apache.ws.commons.schema.XmlSchemaComplexType)>(r1);

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImports(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaSequence)>(r2, $r9);

     label3:
        return;
    }

    private void addCrossImports(org.apache.ws.commons.schema.XmlSchema, org.apache.ws.commons.schema.XmlSchemaAll)
    {
        java.util.Iterator $r2;
        org.apache.cxf.common.xmlschema.SchemaCollection r5;
        org.apache.ws.commons.schema.XmlSchemaElement r4, $r7;
        org.apache.ws.commons.schema.XmlSchemaAll r0;
        java.util.List $r1;
        org.apache.ws.commons.schema.XmlSchema r6;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r5 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r6 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter1: org.apache.ws.commons.schema.XmlSchemaAll;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaAll: java.util.List getItems()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.ws.commons.schema.XmlSchemaElement) $r3;

        $z1 = r4 instanceof org.apache.ws.commons.schema.XmlSchemaElement;

        if $z1 == 0 goto label2;

        $r7 = (org.apache.ws.commons.schema.XmlSchemaElement) r4;

        specialinvoke r5.<org.apache.cxf.common.xmlschema.SchemaCollection: void addElementCrossImportsElement(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaElement)>(r6, $r7);

     label2:
        goto label1;

     label3:
        return;
    }

    private void addCrossImports(org.apache.ws.commons.schema.XmlSchema, org.apache.ws.commons.schema.XmlSchemaChoice)
    {
        java.util.Iterator $r2;
        org.apache.cxf.common.xmlschema.SchemaCollection r5;
        org.apache.ws.commons.schema.XmlSchemaElement $r7;
        java.util.List $r1;
        org.apache.ws.commons.schema.XmlSchemaChoice r0;
        org.apache.ws.commons.schema.XmlSchemaObject r4;
        org.apache.ws.commons.schema.XmlSchema r6;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r5 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r6 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter1: org.apache.ws.commons.schema.XmlSchemaChoice;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaChoice: java.util.List getItems()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.ws.commons.schema.XmlSchemaObject) $r3;

        $z1 = r4 instanceof org.apache.ws.commons.schema.XmlSchemaElement;

        if $z1 == 0 goto label2;

        $r7 = (org.apache.ws.commons.schema.XmlSchemaElement) r4;

        specialinvoke r5.<org.apache.cxf.common.xmlschema.SchemaCollection: void addElementCrossImportsElement(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaElement)>(r6, $r7);

     label2:
        goto label1;

     label3:
        return;
    }

    private void addCrossImports(org.apache.ws.commons.schema.XmlSchema, org.apache.ws.commons.schema.XmlSchemaSequence)
    {
        java.util.Iterator $r2;
        org.apache.ws.commons.schema.XmlSchemaSequenceMember r4;
        org.apache.ws.commons.schema.XmlSchemaSequence r0;
        org.apache.cxf.common.xmlschema.SchemaCollection r5;
        org.apache.ws.commons.schema.XmlSchemaElement $r7;
        java.util.List $r1;
        org.apache.ws.commons.schema.XmlSchema r6;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r5 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r6 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter1: org.apache.ws.commons.schema.XmlSchemaSequence;

        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaSequence: java.util.List getItems()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.ws.commons.schema.XmlSchemaSequenceMember) $r3;

        $z1 = r4 instanceof org.apache.ws.commons.schema.XmlSchemaElement;

        if $z1 == 0 goto label2;

        $r7 = (org.apache.ws.commons.schema.XmlSchemaElement) r4;

        specialinvoke r5.<org.apache.cxf.common.xmlschema.SchemaCollection: void addElementCrossImportsElement(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaElement)>(r6, $r7);

     label2:
        goto label1;

     label3:
        return;
    }

    private void addCrossImportsAttributeList(org.apache.ws.commons.schema.XmlSchema, java.util.List)
    {
        java.util.Iterator $r1;
        org.apache.ws.commons.schema.XmlSchemaAttributeGroupRef r4;
        org.apache.ws.commons.schema.XmlSchemaAttribute $r7;
        org.apache.cxf.common.xmlschema.SchemaCollection r9;
        org.apache.ws.commons.schema.XmlSchemaAttributeOrGroupRef r3;
        org.apache.ws.commons.schema.utils.XmlSchemaRef $r5, $r8;
        java.util.List r0;
        org.apache.ws.commons.schema.XmlSchema r6;
        java.lang.Object $r2;
        javax.xml.namespace.QName r10;
        boolean $z0, $z1;

        r9 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r6 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter1: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.ws.commons.schema.XmlSchemaAttributeOrGroupRef) $r2;

        $z1 = r3 instanceof org.apache.ws.commons.schema.XmlSchemaAttribute;

        if $z1 == 0 goto label2;

        $r7 = (org.apache.ws.commons.schema.XmlSchemaAttribute) r3;

        $r8 = virtualinvoke $r7.<org.apache.ws.commons.schema.XmlSchemaAttribute: org.apache.ws.commons.schema.utils.XmlSchemaRef getRef()>();

        r10 = virtualinvoke $r8.<org.apache.ws.commons.schema.utils.XmlSchemaRef: javax.xml.namespace.QName getTargetQName()>();

        goto label3;

     label2:
        r4 = (org.apache.ws.commons.schema.XmlSchemaAttributeGroupRef) r3;

        $r5 = virtualinvoke r4.<org.apache.ws.commons.schema.XmlSchemaAttributeGroupRef: org.apache.ws.commons.schema.utils.XmlSchemaRef getRef()>();

        r10 = virtualinvoke $r5.<org.apache.ws.commons.schema.utils.XmlSchemaRef: javax.xml.namespace.QName getTargetQName()>();

     label3:
        if r10 == null goto label4;

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,javax.xml.namespace.QName)>(r6, r10);

     label4:
        goto label1;

     label5:
        return;
    }

    private void addCrossImports(org.apache.ws.commons.schema.XmlSchema, org.apache.ws.commons.schema.XmlSchemaContentModel)
    {
        org.apache.ws.commons.schema.XmlSchemaSequence $r15;
        org.apache.ws.commons.schema.XmlSchemaComplexContentRestriction r17;
        org.apache.cxf.common.xmlschema.SchemaCollection r4;
        org.apache.ws.commons.schema.XmlSchemaAll $r13;
        org.apache.ws.commons.schema.XmlSchemaContent $r1;
        org.apache.ws.commons.schema.XmlSchema r2;
        org.apache.ws.commons.schema.XmlSchemaSimpleContentExtension r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.ws.commons.schema.XmlSchemaContentModel r0;
        org.apache.ws.commons.schema.XmlSchemaParticle $r12;
        org.apache.ws.commons.schema.XmlSchemaSimpleContentRestriction r19;
        java.util.List $r5, $r7, $r9, $r11;
        org.apache.ws.commons.schema.XmlSchemaComplexContentExtension r16;
        org.apache.ws.commons.schema.XmlSchemaChoice $r14;
        javax.xml.namespace.QName $r3, $r6, $r8, $r10;

        r4 := @this: org.apache.cxf.common.xmlschema.SchemaCollection;

        r2 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        r0 := @parameter1: org.apache.ws.commons.schema.XmlSchemaContentModel;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.apache.ws.commons.schema.XmlSchemaContentModel: org.apache.ws.commons.schema.XmlSchemaContent getContent()>();

        if $r1 != null goto label2;

        return;

     label2:
        $z0 = $r1 instanceof org.apache.ws.commons.schema.XmlSchemaComplexContentExtension;

        if $z0 == 0 goto label6;

        r16 = (org.apache.ws.commons.schema.XmlSchemaComplexContentExtension) $r1;

        $r10 = virtualinvoke r16.<org.apache.ws.commons.schema.XmlSchemaComplexContentExtension: javax.xml.namespace.QName getBaseTypeName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,javax.xml.namespace.QName)>(r2, $r10);

        $r11 = virtualinvoke r16.<org.apache.ws.commons.schema.XmlSchemaComplexContentExtension: java.util.List getAttributes()>();

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImportsAttributeList(org.apache.ws.commons.schema.XmlSchema,java.util.List)>(r2, $r11);

        $r12 = virtualinvoke r16.<org.apache.ws.commons.schema.XmlSchemaComplexContentExtension: org.apache.ws.commons.schema.XmlSchemaParticle getParticle()>();

        $z4 = $r12 instanceof org.apache.ws.commons.schema.XmlSchemaSequence;

        if $z4 == 0 goto label3;

        $r15 = (org.apache.ws.commons.schema.XmlSchemaSequence) $r12;

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImports(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaSequence)>(r2, $r15);

        goto label5;

     label3:
        $z5 = $r12 instanceof org.apache.ws.commons.schema.XmlSchemaChoice;

        if $z5 == 0 goto label4;

        $r14 = (org.apache.ws.commons.schema.XmlSchemaChoice) $r12;

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImports(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaChoice)>(r2, $r14);

        goto label5;

     label4:
        $z6 = $r12 instanceof org.apache.ws.commons.schema.XmlSchemaAll;

        if $z6 == 0 goto label5;

        $r13 = (org.apache.ws.commons.schema.XmlSchemaAll) $r12;

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImports(org.apache.ws.commons.schema.XmlSchema,org.apache.ws.commons.schema.XmlSchemaAll)>(r2, $r13);

     label5:
        goto label9;

     label6:
        $z1 = $r1 instanceof org.apache.ws.commons.schema.XmlSchemaComplexContentRestriction;

        if $z1 == 0 goto label7;

        r17 = (org.apache.ws.commons.schema.XmlSchemaComplexContentRestriction) $r1;

        $r8 = virtualinvoke r17.<org.apache.ws.commons.schema.XmlSchemaComplexContentRestriction: javax.xml.namespace.QName getBaseTypeName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,javax.xml.namespace.QName)>(r2, $r8);

        $r9 = virtualinvoke r17.<org.apache.ws.commons.schema.XmlSchemaComplexContentRestriction: java.util.List getAttributes()>();

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImportsAttributeList(org.apache.ws.commons.schema.XmlSchema,java.util.List)>(r2, $r9);

        goto label9;

     label7:
        $z2 = $r1 instanceof org.apache.ws.commons.schema.XmlSchemaSimpleContentExtension;

        if $z2 == 0 goto label8;

        r18 = (org.apache.ws.commons.schema.XmlSchemaSimpleContentExtension) $r1;

        $r6 = virtualinvoke r18.<org.apache.ws.commons.schema.XmlSchemaSimpleContentExtension: javax.xml.namespace.QName getBaseTypeName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,javax.xml.namespace.QName)>(r2, $r6);

        $r7 = virtualinvoke r18.<org.apache.ws.commons.schema.XmlSchemaSimpleContentExtension: java.util.List getAttributes()>();

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImportsAttributeList(org.apache.ws.commons.schema.XmlSchema,java.util.List)>(r2, $r7);

        goto label9;

     label8:
        $z3 = $r1 instanceof org.apache.ws.commons.schema.XmlSchemaSimpleContentRestriction;

        if $z3 == 0 goto label9;

        r19 = (org.apache.ws.commons.schema.XmlSchemaSimpleContentRestriction) $r1;

        $r3 = virtualinvoke r19.<org.apache.ws.commons.schema.XmlSchemaSimpleContentRestriction: javax.xml.namespace.QName getBaseTypeName()>();

        staticinvoke <org.apache.cxf.common.xmlschema.XmlSchemaUtils: void addImportIfNeeded(org.apache.ws.commons.schema.XmlSchema,javax.xml.namespace.QName)>(r2, $r3);

        $r5 = virtualinvoke r19.<org.apache.ws.commons.schema.XmlSchemaSimpleContentRestriction: java.util.List getAttributes()>();

        specialinvoke r4.<org.apache.cxf.common.xmlschema.SchemaCollection: void addCrossImportsAttributeList(org.apache.ws.commons.schema.XmlSchema,java.util.List)>(r2, $r5);

     label9:
        return;
    }
}
