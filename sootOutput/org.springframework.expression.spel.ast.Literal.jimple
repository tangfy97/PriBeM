public abstract class org.springframework.expression.spel.ast.Literal extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    protected java.lang.String literalValue;

    public void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r2;
        org.springframework.expression.spel.ast.Literal r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;

        r0 := @this: org.springframework.expression.spel.ast.Literal;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[0];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, $r1);

        r0.<org.springframework.expression.spel.ast.Literal: java.lang.String literalValue> = r2;

        return;
    }

    public abstract org.springframework.expression.TypedValue getLiteralValue();

    public final org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.spel.ExpressionState r2;
        org.springframework.expression.TypedValue $r1;
        org.springframework.expression.spel.ast.Literal r0;

        r0 := @this: org.springframework.expression.spel.ast.Literal;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.Literal: org.springframework.expression.TypedValue getLiteralValue()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.Object $r2;
        java.lang.String $r3;
        org.springframework.expression.TypedValue $r1;
        org.springframework.expression.spel.ast.Literal r0;

        r0 := @this: org.springframework.expression.spel.ast.Literal;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.Literal: org.springframework.expression.TypedValue getLiteralValue()>();

        $r2 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String toStringAST()
    {
        java.lang.String $r1;
        org.springframework.expression.spel.ast.Literal r0;

        r0 := @this: org.springframework.expression.spel.ast.Literal;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.Literal: java.lang.String toString()>();

        return $r1;
    }

    public static org.springframework.expression.spel.ast.Literal getIntLiteral(java.lang.String, int, int)
    {
        org.springframework.expression.spel.SpelMessage $r6;
        java.lang.Object[] $r5;
        java.lang.NumberFormatException $r2;
        org.springframework.expression.spel.SpelParseException $r4;
        org.springframework.expression.spel.InternalParseException $r3;
        int i0, $i1, i2, $i3;
        org.springframework.expression.spel.ast.IntLiteral $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, i0);

        $r1 = new org.springframework.expression.spel.ast.IntLiteral;

        specialinvoke $r1.<org.springframework.expression.spel.ast.IntLiteral: void <init>(java.lang.String,int,int)>(r0, i2, $i1);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.springframework.expression.spel.InternalParseException;

        $r4 = new org.springframework.expression.spel.SpelParseException;

        $i3 = i2 >> 16;

        $r6 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage NOT_AN_INTEGER>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r0;

        specialinvoke $r4.<org.springframework.expression.spel.SpelParseException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r2, $r6, $r5);

        specialinvoke $r3.<org.springframework.expression.spel.InternalParseException: void <init>(org.springframework.expression.spel.SpelParseException)>($r4);

        throw $r3;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static org.springframework.expression.spel.ast.Literal getLongLiteral(java.lang.String, int, int)
    {
        org.springframework.expression.spel.SpelMessage $r6;
        java.lang.Object[] $r5;
        long $l1;
        java.lang.NumberFormatException $r2;
        org.springframework.expression.spel.SpelParseException $r4;
        org.springframework.expression.spel.InternalParseException $r3;
        org.springframework.expression.spel.ast.LongLiteral $r1;
        int i0, i2, $i3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

     label1:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r0, i0);

        $r1 = new org.springframework.expression.spel.ast.LongLiteral;

        specialinvoke $r1.<org.springframework.expression.spel.ast.LongLiteral: void <init>(java.lang.String,int,long)>(r0, i2, $l1);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.springframework.expression.spel.InternalParseException;

        $r4 = new org.springframework.expression.spel.SpelParseException;

        $i3 = i2 >> 16;

        $r6 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage NOT_A_LONG>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r0;

        specialinvoke $r4.<org.springframework.expression.spel.SpelParseException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r2, $r6, $r5);

        specialinvoke $r3.<org.springframework.expression.spel.InternalParseException: void <init>(org.springframework.expression.spel.SpelParseException)>($r4);

        throw $r3;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static org.springframework.expression.spel.ast.Literal getRealLiteral(java.lang.String, int, boolean)
    {
        org.springframework.expression.spel.SpelMessage $r7;
        org.springframework.expression.spel.ast.RealLiteral $r1, $r2;
        java.lang.Object[] $r6;
        java.lang.NumberFormatException $r3;
        org.springframework.expression.spel.SpelParseException $r5;
        org.springframework.expression.spel.InternalParseException $r4;
        int i0, $i1;
        float $f0;
        java.lang.String r0;
        boolean z0;
        double $d0, $d1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

     label1:
        if z0 == 0 goto label3;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0);

        $r2 = new org.springframework.expression.spel.ast.RealLiteral;

        $d1 = (double) $f0;

        specialinvoke $r2.<org.springframework.expression.spel.ast.RealLiteral: void <init>(java.lang.String,int,double)>(r0, i0, $d1);

     label2:
        return $r2;

     label3:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0);

        $r1 = new org.springframework.expression.spel.ast.RealLiteral;

        specialinvoke $r1.<org.springframework.expression.spel.ast.RealLiteral: void <init>(java.lang.String,int,double)>(r0, i0, $d0);

     label4:
        return $r1;

     label5:
        $r3 := @caughtexception;

        $r4 = new org.springframework.expression.spel.InternalParseException;

        $r5 = new org.springframework.expression.spel.SpelParseException;

        $i1 = i0 >> 16;

        $r7 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage NOT_A_REAL>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r0;

        specialinvoke $r5.<org.springframework.expression.spel.SpelParseException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i1, $r3, $r7, $r6);

        specialinvoke $r4.<org.springframework.expression.spel.InternalParseException: void <init>(org.springframework.expression.spel.SpelParseException)>($r5);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label5;
        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }
}
