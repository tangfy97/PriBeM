abstract class org.apache.commons.compress.archivers.sevenz.CoderBase extends java.lang.Object
{
    private final java.lang.Class[] acceptableOptions;
    private static final byte[] NONE;

    protected transient void <init>(java.lang.Class[])
    {
        java.lang.Class[] r1;
        org.apache.commons.compress.archivers.sevenz.CoderBase r0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.CoderBase;

        r1 := @parameter0: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.archivers.sevenz.CoderBase: java.lang.Class[] acceptableOptions> = r1;

        return;
    }

    boolean canAcceptOptions(java.lang.Object)
    {
        int i0, i1;
        java.lang.Class[] r1;
        java.lang.Class r2;
        java.lang.Object r3;
        org.apache.commons.compress.archivers.sevenz.CoderBase r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.CoderBase;

        r3 := @parameter0: java.lang.Object;

        r1 = r0.<org.apache.commons.compress.archivers.sevenz.CoderBase: java.lang.Class[] acceptableOptions>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    byte[] getOptionsAsProperties(java.lang.Object)
    {
        byte[] $r0;
        java.lang.Object r2;
        org.apache.commons.compress.archivers.sevenz.CoderBase r1;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.CoderBase;

        r2 := @parameter0: java.lang.Object;

        $r0 = <org.apache.commons.compress.archivers.sevenz.CoderBase: byte[] NONE>;

        return $r0;
    }

    java.lang.Object getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream)
    {
        org.apache.commons.compress.archivers.sevenz.CoderBase r0;
        org.apache.commons.compress.archivers.sevenz.Coder r1;
        java.io.InputStream r2;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.CoderBase;

        r1 := @parameter0: org.apache.commons.compress.archivers.sevenz.Coder;

        r2 := @parameter1: java.io.InputStream;

        return null;
    }

    abstract java.io.InputStream decode(java.io.InputStream, org.apache.commons.compress.archivers.sevenz.Coder, byte[]) throws java.io.IOException;

    java.io.OutputStream encode(java.io.OutputStream, java.lang.Object) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r3;
        org.apache.commons.compress.archivers.sevenz.CoderBase r1;

        r1 := @this: org.apache.commons.compress.archivers.sevenz.CoderBase;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("method doesn\'t support writing");

        throw $r0;
    }

    protected static int numberOptionOrDefault(java.lang.Object, int)
    {
        int i0, $i1;
        java.lang.Object r0;
        java.lang.Number $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = r0 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Number) r0;

        $i1 = virtualinvoke $r1.<java.lang.Number: int intValue()>();

        goto label2;

     label1:
        $i1 = i0;

     label2:
        return $i1;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[0];

        <org.apache.commons.compress.archivers.sevenz.CoderBase: byte[] NONE> = $r0;

        return;
    }
}
