class nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer extends nu.xom.Serializer
{
    private nu.xom.Nodes nodes;
    private org.xml.sax.helpers.NamespaceSupport inScope;
    private final nu.xom.XPathContext xmlcontext;
    private final nu.xom.canonical.Canonicalizer this$0;

    void <init>(nu.xom.canonical.Canonicalizer, java.io.OutputStream)
    {
        java.io.OutputStream r1;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;
        nu.xom.canonical.Canonicalizer r2;
        nu.xom.XPathContext $r3;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r2 := @parameter0: nu.xom.canonical.Canonicalizer;

        r1 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<nu.xom.Serializer: void <init>(java.io.OutputStream)>(r1);

        r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.canonical.Canonicalizer this$0> = r2;

        $r3 = new nu.xom.XPathContext;

        specialinvoke $r3.<nu.xom.XPathContext: void <init>(java.lang.String,java.lang.String)>("xml", "http://www.w3.org/XML/1998/namespace");

        r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.XPathContext xmlcontext> = $r3;

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void setLineSeparator(java.lang.String)>("\n");

        return;
    }

    public final void write(nu.xom.Document) throws java.io.IOException
    {
        nu.xom.canonical.Canonicalizer $r7, $r9;
        int $i0, i1, i2;
        nu.xom.Nodes $r4, $r6, $r8, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.xml.sax.helpers.NamespaceSupport $r1;
        nu.xom.Node $r3, $r5;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;
        nu.xom.Document r2;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r2 := @parameter0: nu.xom.Document;

        $r1 = new org.xml.sax.helpers.NamespaceSupport;

        specialinvoke $r1.<org.xml.sax.helpers.NamespaceSupport: void <init>()>();

        r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: org.xml.sax.helpers.NamespaceSupport inScope> = $r1;

        i1 = 0;

     label01:
        $r3 = virtualinvoke r2.<nu.xom.Document: nu.xom.Node getChild(int)>(i1);

        $r4 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r4 == null goto label02;

        $z6 = $r3 instanceof nu.xom.Element;

        if $z6 != 0 goto label02;

        $r10 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z7 = virtualinvoke $r10.<nu.xom.Nodes: boolean contains(nu.xom.Node)>($r3);

        if $z7 == 0 goto label04;

     label02:
        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeChild(nu.xom.Node)>($r3);

        $z8 = $r3 instanceof nu.xom.ProcessingInstruction;

        if $z8 == 0 goto label03;

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void breakLine()>();

        goto label04;

     label03:
        $z0 = $r3 instanceof nu.xom.Comment;

        if $z0 == 0 goto label04;

        $r9 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.canonical.Canonicalizer this$0>;

        $z5 = staticinvoke <nu.xom.canonical.Canonicalizer: boolean access$100(nu.xom.canonical.Canonicalizer)>($r9);

        if $z5 == 0 goto label04;

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void breakLine()>();

     label04:
        i1 = i1 + 1;

        $z9 = $r3 instanceof nu.xom.Element;

        if $z9 == 0 goto label05;

        goto label06;

     label05:
        goto label01;

     label06:
        i2 = i1;

     label07:
        $i0 = virtualinvoke r2.<nu.xom.Document: int getChildCount()>();

        if i2 >= $i0 goto label12;

        $r5 = virtualinvoke r2.<nu.xom.Document: nu.xom.Node getChild(int)>(i2);

        $r6 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r6 == null goto label08;

        $z3 = $r5 instanceof nu.xom.Element;

        if $z3 != 0 goto label08;

        $r8 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z4 = virtualinvoke $r8.<nu.xom.Nodes: boolean contains(nu.xom.Node)>($r5);

        if $z4 == 0 goto label11;

     label08:
        $z10 = $r5 instanceof nu.xom.ProcessingInstruction;

        if $z10 == 0 goto label09;

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void breakLine()>();

        goto label10;

     label09:
        $z1 = $r5 instanceof nu.xom.Comment;

        if $z1 == 0 goto label10;

        $r7 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.canonical.Canonicalizer this$0>;

        $z2 = staticinvoke <nu.xom.canonical.Canonicalizer: boolean access$100(nu.xom.canonical.Canonicalizer)>($r7);

        if $z2 == 0 goto label10;

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void breakLine()>();

     label10:
        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeChild(nu.xom.Node)>($r5);

     label11:
        i2 = i2 + 1;

        goto label07;

     label12:
        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void flush()>();

        return;
    }

    protected final void write(nu.xom.Element) throws java.io.IOException
    {
        nu.xom.Element r0, $r3, $r4;
        int[] $r5, r7;
        int $i0, $i1, $i2, $i3, i4, i5, $i7, $i9, $i11;
        nu.xom.ParentNode $r2;
        boolean z0, z1, z2;
        nu.xom.Node r6;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r1;

        r1 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r0 := @parameter0: nu.xom.Element;

        $i0 = virtualinvoke r0.<nu.xom.Element: int getChildCount()>();

        if $i0 != 0 goto label1;

        virtualinvoke r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeStartTag(nu.xom.Element,boolean)>(r0, 0);

        virtualinvoke r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeEndTag(nu.xom.Element)>(r0);

        goto label9;

     label1:
        r6 = r0;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        $i7 = (int) -1;

        i4 = $i7;

        r7 = newarray (int)[10];

        i5 = 0;

        $i9 = (int) -1;

        r7[0] = $i9;

     label2:
        if z1 != 0 goto label3;

        $i3 = virtualinvoke r6.<nu.xom.Node: int getChildCount()>();

        if $i3 <= 0 goto label3;

        $r4 = (nu.xom.Element) r6;

        virtualinvoke r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeStartTag(nu.xom.Element,boolean)>($r4, 0);

        r6 = virtualinvoke r6.<nu.xom.Node: nu.xom.Node getChild(int)>(0);

        i4 = 0;

        i5 = i5 + 1;

        $r5 = specialinvoke r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: int[] grow(int[],int)>(r7, i5);

        r7 = $r5;

        $r5[i5] = 0;

        goto label2;

     label3:
        if z2 == 0 goto label4;

        $r3 = (nu.xom.Element) r6;

        virtualinvoke r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeEndTag(nu.xom.Element)>($r3);

        if r6 != r0 goto label5;

        goto label9;

     label4:
        virtualinvoke r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeChild(nu.xom.Node)>(r6);

     label5:
        z0 = 0;

        z2 = 0;

        z1 = 0;

        $r2 = virtualinvoke r6.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        $i1 = virtualinvoke $r2.<nu.xom.ParentNode: int getChildCount()>();

        $i2 = $i1 - 1;

        if $i2 != i4 goto label7;

        r6 = $r2;

        $i11 = (int) -1;

        i5 = i5 + $i11;

        if $r2 == r0 goto label6;

        i4 = r7[i5];

     label6:
        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label8;

     label7:
        i4 = i4 + 1;

        r7[i5] = i4;

        r6 = virtualinvoke $r2.<nu.xom.ParentNode: nu.xom.Node getChild(int)>(i4);

     label8:
        goto label2;

     label9:
        return;
    }

    private int[] grow(int[], int)
    {
        int[] r0, r1;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r2;
        int i0, $i1, $i2, $i3, $i4;

        r2 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        if i0 >= $i1 goto label1;

        return r0;

     label1:
        $i2 = lengthof r0;

        $i3 = $i2 * 2;

        r1 = newarray (int)[$i3];

        $i4 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i4);

        return r1;
    }

    protected void writeStartTag(nu.xom.Element, boolean) throws java.io.IOException
    {
        nu.xom.Attribute[] $r40;
        nu.xom.canonical.Canonicalizer $r18, $r30;
        nu.xom.Node $r13;
        nu.xom.Element r4, $r21, r36;
        nu.xom.Namespace r39;
        nu.xom.Nodes $r1, $r3, $r5, $r7, $r12, $r24, $r35, $r38;
        java.lang.String $r9, $r14, $r15, $r17, $r19, $r20, $r22, $r23, $r26, $r27, $r29, $r31, $r32, $r34;
        nu.xom.ParentNode $r11, $r25, r37;
        org.xml.sax.helpers.NamespaceSupport $r16, $r28, $r33;
        java.util.TreeMap $r42;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, $z21, $z22;
        int $i0, i1, $i2, i3, $i4, i5, $i6, $i8;
        nu.xom.Attribute $r6, $r8, $r10, $r41;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r4 := @parameter0: nu.xom.Element;

        z19 := @parameter1: boolean;

        $r1 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r1 == null goto label01;

        $r35 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z18 = virtualinvoke $r35.<nu.xom.Nodes: boolean contains(nu.xom.Node)>(r4);

        if $z18 == 0 goto label02;

     label01:
        $z22 = 1;

        $z21 = 1;

        goto label03;

     label02:
        $z22 = 0;

        $z21 = 0;

     label03:
        z0 = $z21;

        if $z22 == 0 goto label04;

        $r33 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: org.xml.sax.helpers.NamespaceSupport inScope>;

        virtualinvoke $r33.<org.xml.sax.helpers.NamespaceSupport: void pushContext()>();

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>("<");

        $r34 = virtualinvoke r4.<nu.xom.Element: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>($r34);

     label04:
        $r42 = new java.util.TreeMap;

        specialinvoke $r42.<java.util.TreeMap: void <init>()>();

        $r3 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r3 != null goto label14;

        $r25 = virtualinvoke r4.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        r36 = null;

        $z12 = $r25 instanceof nu.xom.Element;

        if $z12 == 0 goto label05;

        r36 = (nu.xom.Element) $r25;

     label05:
        i1 = 0;

     label06:
        $i2 = virtualinvoke r4.<nu.xom.Element: int getNamespaceDeclarationCount()>();

        if i1 >= $i2 goto label13;

        $r26 = virtualinvoke r4.<nu.xom.Element: java.lang.String getNamespacePrefix(int)>(i1);

        $r27 = virtualinvoke r4.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>($r26);

        $r28 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: org.xml.sax.helpers.NamespaceSupport inScope>;

        $r29 = virtualinvoke $r28.<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)>($r26);

        $z13 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z13 == 0 goto label07;

        goto label12;

     label07:
        $r30 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.canonical.Canonicalizer this$0>;

        $z14 = staticinvoke <nu.xom.canonical.Canonicalizer: boolean access$200(nu.xom.canonical.Canonicalizer)>($r30);

        if $z14 == 0 goto label08;

        $z17 = specialinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: boolean needToDeclareNamespace(nu.xom.Element,java.lang.String,java.lang.String)>(r4, $r26, $r27);

        if $z17 == 0 goto label12;

        interfaceinvoke $r42.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r27);

        goto label12;

     label08:
        $z15 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z15 == 0 goto label11;

        if r36 != null goto label09;

        goto label12;

     label09:
        $r31 = "";

        $r32 = virtualinvoke r36.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>("");

        $z16 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>($r32);

        if $z16 == 0 goto label10;

        goto label12;

     label10:
        interfaceinvoke $r42.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r27);

        goto label12;

     label11:
        interfaceinvoke $r42.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r27);

     label12:
        i1 = i1 + 1;

        goto label06;

     label13:
        specialinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeNamespaceDeclarations(java.util.SortedMap)>($r42);

        goto label24;

     label14:
        $i0 = specialinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: int indexOf(nu.xom.Element)>(r4);

        $i8 = (int) -1;

        if $i0 == $i8 goto label17;

        $r19 = "";

        $r20 = virtualinvoke r4.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $z7 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z7 == 0 goto label17;

        r37 = virtualinvoke r4.<nu.xom.Element: nu.xom.ParentNode getParent()>();

     label15:
        $z8 = r37 instanceof nu.xom.Element;

        if $z8 == 0 goto label16;

        $r24 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z11 = virtualinvoke $r24.<nu.xom.Nodes: boolean contains(nu.xom.Node)>(r37);

        if $z11 != 0 goto label16;

        r37 = virtualinvoke r37.<nu.xom.ParentNode: nu.xom.ParentNode getParent()>();

        goto label15;

     label16:
        $z9 = r37 instanceof nu.xom.Element;

        if $z9 == 0 goto label17;

        $r21 = (nu.xom.Element) r37;

        $r22 = virtualinvoke $r21.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>("");

        $r23 = "";

        $z10 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z10 != 0 goto label17;

        interfaceinvoke $r42.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("", "");

     label17:
        i3 = $i0 + 1;

     label18:
        $r38 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $i4 = virtualinvoke $r38.<nu.xom.Nodes: int size()>();

        if i3 >= $i4 goto label23;

        $r12 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $r13 = virtualinvoke $r12.<nu.xom.Nodes: nu.xom.Node get(int)>(i3);

        $z3 = $r13 instanceof nu.xom.Namespace;

        if $z3 != 0 goto label19;

        goto label23;

     label19:
        r39 = (nu.xom.Namespace) $r13;

        $r14 = virtualinvoke r39.<nu.xom.Namespace: java.lang.String getPrefix()>();

        $r15 = virtualinvoke r39.<nu.xom.Namespace: java.lang.String getValue()>();

        $r16 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: org.xml.sax.helpers.NamespaceSupport inScope>;

        $r17 = virtualinvoke $r16.<org.xml.sax.helpers.NamespaceSupport: java.lang.String getURI(java.lang.String)>($r14);

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z4 == 0 goto label20;

        goto label22;

     label20:
        $r18 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.canonical.Canonicalizer this$0>;

        $z5 = staticinvoke <nu.xom.canonical.Canonicalizer: boolean access$200(nu.xom.canonical.Canonicalizer)>($r18);

        if $z5 == 0 goto label21;

        $z6 = specialinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: boolean needToDeclareNamespace(nu.xom.Element,java.lang.String,java.lang.String)>(r4, $r14, $r15);

        if $z6 == 0 goto label22;

        interfaceinvoke $r42.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label22;

     label21:
        interfaceinvoke $r42.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

     label22:
        i3 = i3 + 1;

        goto label18;

     label23:
        specialinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeNamespaceDeclarations(java.util.SortedMap)>($r42);

     label24:
        $r40 = specialinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Attribute[] sortAttributes(nu.xom.Element)>(r4);

        i5 = 0;

     label25:
        $i6 = lengthof $r40;

        if i5 >= $i6 goto label28;

        $r5 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r5 == null goto label26;

        $r7 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $r6 = $r40[i5];

        $z1 = virtualinvoke $r7.<nu.xom.Nodes: boolean contains(nu.xom.Node)>($r6);

        if $z1 != 0 goto label26;

        $r8 = $r40[i5];

        $r9 = virtualinvoke $r8.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z2 == 0 goto label27;

        $r10 = $r40[i5];

        $r11 = virtualinvoke $r10.<nu.xom.Attribute: nu.xom.ParentNode getParent()>();

        if $r11 == r4 goto label27;

     label26:
        $r41 = $r40[i5];

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void write(nu.xom.Attribute)>($r41);

     label27:
        i5 = i5 + 1;

        goto label25;

     label28:
        if z0 == 0 goto label29;

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>(">");

     label29:
        return;
    }

    private void writeNamespaceDeclarations(java.util.SortedMap) throws java.io.IOException
    {
        org.xml.sax.helpers.NamespaceSupport $r10;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r9;
        java.lang.Object $r3, $r5, $r7;
        java.lang.String r6, r8;
        java.util.SortedMap r0;
        boolean $z0;

        r9 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r0 := @parameter0: java.util.SortedMap;

        $r1 = interfaceinvoke r0.<java.util.SortedMap: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (java.lang.String) $r7;

        virtualinvoke r9.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>(" ");

        virtualinvoke r9.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeNamespaceDeclaration(java.lang.String,java.lang.String)>(r6, r8);

        $r10 = r9.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: org.xml.sax.helpers.NamespaceSupport inScope>;

        virtualinvoke $r10.<org.xml.sax.helpers.NamespaceSupport: boolean declarePrefix(java.lang.String,java.lang.String)>(r6, r8);

        goto label1;

     label2:
        return;
    }

    private boolean needToDeclareNamespace(nu.xom.Element, java.lang.String, java.lang.String)
    {
        nu.xom.Element r1;
        nu.xom.canonical.Canonicalizer $r4;
        java.util.List $r5;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;
        java.lang.String r2, r3;
        boolean $z0, $z1, $z2;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r1 := @parameter0: nu.xom.Element;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: boolean visiblyUtilized(nu.xom.Element,java.lang.String,java.lang.String)>(r1, r2, r3);

        if $z0 != 0 goto label1;

        $r4 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.canonical.Canonicalizer this$0>;

        $r5 = staticinvoke <nu.xom.canonical.Canonicalizer: java.util.List access$300(nu.xom.canonical.Canonicalizer)>($r4);

        $z2 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z2 == 0 goto label2;

     label1:
        $z1 = specialinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: boolean noOutputAncestorUsesPrefix(nu.xom.Element,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $z1;

     label2:
        return 0;
    }

    private boolean visiblyUtilized(nu.xom.Element, java.lang.String, java.lang.String)
    {
        nu.xom.Element r0;
        int i0, $i1;
        nu.xom.Nodes $r6, $r8;
        java.lang.String $r1, $r2, r3, $r7, r9;
        boolean $z0, $z1, $z2, $z3, z4;
        nu.xom.Attribute $r4;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r5;

        r5 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r0 := @parameter0: nu.xom.Element;

        r3 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        z4 = 0;

        $r1 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespacePrefix()>();

        $r2 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z3 == 0 goto label1;

        z4 = 1;

        goto label5;

     label1:
        i0 = 0;

     label2:
        $i1 = virtualinvoke r0.<nu.xom.Element: int getAttributeCount()>();

        if i0 >= $i1 goto label5;

        $r4 = virtualinvoke r0.<nu.xom.Element: nu.xom.Attribute getAttribute(int)>(i0);

        $r6 = r5.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r6 == null goto label3;

        $r8 = r5.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z2 = virtualinvoke $r8.<nu.xom.Nodes: boolean contains(nu.xom.Node)>($r4);

        if $z2 == 0 goto label4;

     label3:
        $r7 = virtualinvoke $r4.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label4;

        z4 = 1;

        goto label5;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        return z4;
    }

    private boolean noOutputAncestorUsesPrefix(nu.xom.Element, java.lang.String, java.lang.String)
    {
        nu.xom.Element r0, $r12;
        int $i0, i1;
        nu.xom.Nodes $r3, $r11;
        nu.xom.ParentNode $r1, r14;
        java.lang.String $r4, r5, $r7, $r8, r9, $r10, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        nu.xom.Attribute $r6;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r2;

        r2 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r0 := @parameter0: nu.xom.Element;

        r5 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        r14 = $r1;

        $z0 = $r1 instanceof nu.xom.Document;

        if $z0 == 0 goto label01;

        $r13 = "";

        $z7 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z7 == 0 goto label01;

        return 0;

     label01:
        if r14 == null goto label11;

        $z1 = r14 instanceof nu.xom.Document;

        if $z1 != 0 goto label11;

        $r3 = r2.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r3 == null goto label02;

        $r11 = r2.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z6 = virtualinvoke $r11.<nu.xom.Nodes: boolean contains(nu.xom.Node)>(r14);

        if $z6 == 0 goto label10;

     label02:
        $r12 = (nu.xom.Element) r14;

        $r4 = virtualinvoke $r12.<nu.xom.Element: java.lang.String getNamespacePrefix()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 == 0 goto label05;

        $r10 = virtualinvoke $r12.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>(r5);

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z5 != 0 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        return $z8;

     label05:
        i1 = 0;

     label06:
        $i0 = virtualinvoke $r12.<nu.xom.Element: int getAttributeCount()>();

        if i1 >= $i0 goto label10;

        $r6 = virtualinvoke $r12.<nu.xom.Element: nu.xom.Attribute getAttribute(int)>(i1);

        $r7 = virtualinvoke $r6.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z3 == 0 goto label09;

        $r8 = virtualinvoke $r12.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>(r5);

        $z4 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z4 != 0 goto label07;

        $z9 = 1;

        goto label08;

     label07:
        $z9 = 0;

     label08:
        return $z9;

     label09:
        i1 = i1 + 1;

        goto label06;

     label10:
        r14 = virtualinvoke r14.<nu.xom.ParentNode: nu.xom.ParentNode getParent()>();

        goto label01;

     label11:
        return 1;
    }

    private int indexOf(nu.xom.Element)
    {
        nu.xom.Element r4;
        nu.xom.Node $r3;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;
        int $i0, i1, $i3;
        nu.xom.Nodes $r1, $r2;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r4 := @parameter0: nu.xom.Element;

        i1 = 0;

     label1:
        $r1 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $i0 = virtualinvoke $r1.<nu.xom.Nodes: int size()>();

        if i1 >= $i0 goto label3;

        $r2 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $r3 = virtualinvoke $r2.<nu.xom.Nodes: nu.xom.Node get(int)>(i1);

        if $r3 != r4 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = (int) -1;

        return $i3;
    }

    protected void write(nu.xom.Attribute) throws java.io.IOException
    {
        nu.xom.Attribute r1;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;
        java.lang.String $r2, $r3;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r1 := @parameter0: nu.xom.Attribute;

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>(" ");

        $r2 = virtualinvoke r1.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>($r2);

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>("=\"");

        $r3 = specialinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: java.lang.String prepareAttributeValue(nu.xom.Attribute)>(r1);

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>($r3);

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>("\"");

        return;
    }

    protected void writeEndTag(nu.xom.Element) throws java.io.IOException
    {
        org.xml.sax.helpers.NamespaceSupport $r4;
        nu.xom.Element r2;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;
        nu.xom.Nodes $r1, $r5;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r2 := @parameter0: nu.xom.Element;

        $r1 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r1 == null goto label1;

        $r5 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z0 = virtualinvoke $r5.<nu.xom.Nodes: boolean contains(nu.xom.Node)>(r2);

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>("</");

        $r3 = virtualinvoke r2.<nu.xom.Element: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>($r3);

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>(">");

        $r4 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: org.xml.sax.helpers.NamespaceSupport inScope>;

        virtualinvoke $r4.<org.xml.sax.helpers.NamespaceSupport: void popContext()>();

     label2:
        return;
    }

    private nu.xom.Attribute[] sortAttributes(nu.xom.Element)
    {
        nu.xom.Attribute[] $r26;
        nu.xom.canonical.Canonicalizer $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        nu.xom.XPathContext $r14;
        java.util.Collection $r4, $r16;
        nu.xom.Node $r19;
        nu.xom.Element r3, r23;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, i7, i8, $i10;
        nu.xom.Nodes $r10, $r11, $r12, $r15, $r24;
        nu.xom.ParentNode $r13, $r22;
        java.lang.String $r20;
        java.util.Iterator $r5, $r17;
        nu.xom.Attribute $r8, $r9, $r21, r25;
        java.util.TreeMap $r27;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r1;
        java.lang.Object $r7, $r18;
        java.util.Comparator $r6;

        r1 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r3 := @parameter0: nu.xom.Element;

        $r27 = new java.util.TreeMap;

        specialinvoke $r27.<java.util.TreeMap: void <init>()>();

        $r2 = r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.canonical.Canonicalizer this$0>;

        $z0 = staticinvoke <nu.xom.canonical.Canonicalizer: boolean access$200(nu.xom.canonical.Canonicalizer)>($r2);

        if $z0 != 0 goto label07;

        $r10 = r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r10 == null goto label07;

        $r11 = r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z1 = virtualinvoke $r11.<nu.xom.Nodes: boolean contains(nu.xom.Node)>(r3);

        if $z1 == 0 goto label07;

        $r12 = r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $r13 = virtualinvoke r3.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        $z2 = virtualinvoke $r12.<nu.xom.Nodes: boolean contains(nu.xom.Node)>($r13);

        if $z2 != 0 goto label07;

        $r14 = r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.XPathContext xmlcontext>;

        $r15 = virtualinvoke r3.<nu.xom.Element: nu.xom.Nodes query(java.lang.String,nu.xom.XPathContext)>("ancestor::*/@xml:*", $r14);

        $i1 = virtualinvoke $r15.<nu.xom.Nodes: int size()>();

        if $i1 == 0 goto label05;

        $i2 = virtualinvoke $r15.<nu.xom.Nodes: int size()>();

        i3 = $i2 - 1;

     label01:
        if i3 < 0 goto label05;

        $r19 = virtualinvoke $r15.<nu.xom.Nodes: nu.xom.Node get(int)>(i3);

        r25 = (nu.xom.Attribute) $r19;

        $r20 = virtualinvoke r25.<nu.xom.Attribute: java.lang.String getLocalName()>();

        $r21 = virtualinvoke r3.<nu.xom.Element: nu.xom.Attribute getAttribute(java.lang.String,java.lang.String)>($r20, "http://www.w3.org/XML/1998/namespace");

        if $r21 == null goto label02;

        goto label04;

     label02:
        $z3 = interfaceinvoke $r27.<java.util.Map: boolean containsKey(java.lang.Object)>($r20);

        if $z3 != 0 goto label04;

        $r22 = virtualinvoke r25.<nu.xom.Attribute: nu.xom.ParentNode getParent()>();

        r23 = (nu.xom.Element) $r22;

        $r24 = r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z4 = virtualinvoke $r24.<nu.xom.Nodes: boolean contains(nu.xom.Node)>(r23);

        if $z4 != 0 goto label03;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r25);

        goto label04;

     label03:
        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, null);

     label04:
        $i10 = (int) -1;

        i3 = i3 + $i10;

        goto label01;

     label05:
        $r16 = interfaceinvoke $r27.<java.util.Map: java.util.Collection values()>();

        $r17 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label07;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        if $r18 != null goto label06;

        interfaceinvoke $r17.<java.util.Iterator: void remove()>();

        goto label06;

     label07:
        $i4 = virtualinvoke r3.<nu.xom.Element: int getAttributeCount()>();

        $i5 = interfaceinvoke $r27.<java.util.Map: int size()>();

        $i6 = $i4 + $i5;

        $r26 = newarray (nu.xom.Attribute)[$i6];

        i7 = 0;

     label08:
        if i7 >= $i4 goto label09;

        $r9 = virtualinvoke r3.<nu.xom.Element: nu.xom.Attribute getAttribute(int)>(i7);

        $r26[i7] = $r9;

        i7 = i7 + 1;

        goto label08;

     label09:
        $r4 = interfaceinvoke $r27.<java.util.Map: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

        i8 = $i4;

     label10:
        $i0 = lengthof $r26;

        if i8 >= $i0 goto label11;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (nu.xom.Attribute) $r7;

        $r26[i8] = $r8;

        i8 = i8 + 1;

        goto label10;

     label11:
        $r6 = staticinvoke <nu.xom.canonical.Canonicalizer: java.util.Comparator access$400()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r26, $r6);

        return $r26;
    }

    private java.lang.String prepareAttributeValue(nu.xom.Attribute)
    {
        boolean $z0, $z1, z2;
        nu.xom.Attribute$Type $r3, $r4, $r7, $r8;
        java.lang.StringBuffer $r11;
        int $i0, $i1, $i10, $i11, $i12, i15, $i16, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        java.lang.String $r1, $r6;
        char $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c13, $c14, c17;
        nu.xom.Attribute r0;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r10;
        char[] $r5, $r9;

        r10 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r0 := @parameter0: nu.xom.Attribute;

        $r1 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getValue()>();

        $r11 = new java.lang.StringBuffer;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        specialinvoke $r11.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r3 = virtualinvoke r0.<nu.xom.Attribute: nu.xom.Attribute$Type getType()>();

        $r4 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type CDATA>;

        $z0 = virtualinvoke $r3.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label01;

        $r7 = virtualinvoke r0.<nu.xom.Attribute: nu.xom.Attribute$Type getType()>();

        $r8 = <nu.xom.Attribute$Type: nu.xom.Attribute$Type UNDECLARED>;

        $z1 = virtualinvoke $r7.<nu.xom.Attribute$Type: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label11;

     label01:
        $r5 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        i15 = 0;

     label02:
        $i16 = lengthof $r5;

        if i15 >= $i16 goto label10;

        c17 = $r5[i15];

        $i19 = (int) c17;

        if $i19 != 9 goto label03;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#x9;");

        goto label09;

     label03:
        $i20 = (int) c17;

        if $i20 != 10 goto label04;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#xA;");

        goto label09;

     label04:
        $i21 = (int) c17;

        if $i21 != 13 goto label05;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#xD;");

        goto label09;

     label05:
        $i22 = (int) c17;

        if $i22 != 34 goto label06;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&quot;");

        goto label09;

     label06:
        $i23 = (int) c17;

        if $i23 != 38 goto label07;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label09;

     label07:
        $i24 = (int) c17;

        if $i24 != 60 goto label08;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label09;

     label08:
        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c17);

     label09:
        i15 = i15 + 1;

        goto label02;

     label10:
        goto label21;

     label11:
        $r9 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        z2 = 0;

        i18 = 0;

     label12:
        $i1 = lengthof $r9;

        if i18 >= $i1 goto label21;

        $c2 = $r9[i18];

        $i25 = (int) $c2;

        if $i25 != 32 goto label13;

        $i10 = lengthof $r9;

        $i11 = $i10 - 1;

        if i18 == $i11 goto label20;

        $i12 = i18 + 1;

        $c13 = $r9[$i12];

        $i26 = (int) $c13;

        if $i26 == 32 goto label20;

        if z2 == 0 goto label20;

        $c14 = $r9[i18];

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14);

        goto label20;

     label13:
        z2 = 1;

        $c3 = $r9[i18];

        $i27 = (int) $c3;

        if $i27 != 9 goto label14;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#x9;");

        goto label20;

     label14:
        $c4 = $r9[i18];

        $i28 = (int) $c4;

        if $i28 != 10 goto label15;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#xA;");

        goto label20;

     label15:
        $c5 = $r9[i18];

        $i29 = (int) $c5;

        if $i29 != 13 goto label16;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#xD;");

        goto label20;

     label16:
        $c6 = $r9[i18];

        $i30 = (int) $c6;

        if $i30 != 34 goto label17;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&quot;");

        goto label20;

     label17:
        $c7 = $r9[i18];

        $i31 = (int) $c7;

        if $i31 != 38 goto label18;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label20;

     label18:
        $c8 = $r9[i18];

        $i32 = (int) $c8;

        if $i32 != 60 goto label19;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label20;

     label19:
        $c9 = $r9[i18];

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c9);

     label20:
        i18 = i18 + 1;

        goto label12;

     label21:
        $r6 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    protected final void write(nu.xom.Text) throws java.io.IOException
    {
        java.lang.StringBuffer $r7;
        int $i0, i2, $i3, $i4, $i5, $i6, $i7;
        nu.xom.Nodes $r1, $r6;
        java.lang.String $r3, $r5;
        nu.xom.Text r2;
        boolean $z0;
        char $c1;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r2 := @parameter0: nu.xom.Text;

        $r1 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r1 == null goto label1;

        $r6 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z0 = virtualinvoke $r6.<nu.xom.Nodes: boolean contains(nu.xom.Node)>(r2);

        if $z0 == 0 goto label9;

     label1:
        $r3 = virtualinvoke r2.<nu.xom.Text: java.lang.String getValue()>();

        $r7 = new java.lang.StringBuffer;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(int)>($i0);

        i2 = 0;

     label2:
        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        if i2 >= $i3 goto label8;

        $c1 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(i2);

        $i4 = (int) $c1;

        if $i4 != 13 goto label3;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#xD;");

        goto label7;

     label3:
        $i5 = (int) $c1;

        if $i5 != 38 goto label4;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label7;

     label4:
        $i6 = (int) $c1;

        if $i6 != 60 goto label5;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label7;

     label5:
        $i7 = (int) $c1;

        if $i7 != 62 goto label6;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");

        goto label7;

     label6:
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label7:
        i2 = i2 + 1;

        goto label2;

     label8:
        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>($r5);

     label9:
        return;
    }

    protected final void write(nu.xom.Comment) throws java.io.IOException
    {
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;
        nu.xom.canonical.Canonicalizer $r1;
        nu.xom.Nodes $r2, $r4;
        nu.xom.Comment r3;
        boolean $z0, $z1;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r3 := @parameter0: nu.xom.Comment;

        $r1 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.canonical.Canonicalizer this$0>;

        $z0 = staticinvoke <nu.xom.canonical.Canonicalizer: boolean access$100(nu.xom.canonical.Canonicalizer)>($r1);

        if $z0 == 0 goto label2;

        $r2 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r2 == null goto label1;

        $r4 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z1 = virtualinvoke $r4.<nu.xom.Nodes: boolean contains(nu.xom.Node)>(r3);

        if $z1 == 0 goto label2;

     label1:
        specialinvoke r0.<nu.xom.Serializer: void write(nu.xom.Comment)>(r3);

     label2:
        return;
    }

    protected final void write(nu.xom.ProcessingInstruction) throws java.io.IOException
    {
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;
        nu.xom.Nodes $r1, $r3;
        nu.xom.ProcessingInstruction r2;
        boolean $z0;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r2 := @parameter0: nu.xom.ProcessingInstruction;

        $r1 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        if $r1 == null goto label1;

        $r3 = r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes>;

        $z0 = virtualinvoke $r3.<nu.xom.Nodes: boolean contains(nu.xom.Node)>(r2);

        if $z0 == 0 goto label2;

     label1:
        specialinvoke r0.<nu.xom.Serializer: void write(nu.xom.ProcessingInstruction)>(r2);

     label2:
        return;
    }

    protected final void write(nu.xom.DocType)
    {
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;
        nu.xom.DocType r1;

        r0 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r1 := @parameter0: nu.xom.DocType;

        return;
    }

    public void write(nu.xom.Node) throws java.io.IOException
    {
        nu.xom.Node r0;
        nu.xom.Attribute $r3;
        nu.xom.Namespace $r2;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r1;
        nu.xom.Document $r4;
        boolean $z0, $z1, $z2;

        r1 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r0 := @parameter0: nu.xom.Node;

        $z0 = r0 instanceof nu.xom.Document;

        if $z0 == 0 goto label1;

        $r4 = (nu.xom.Document) r0;

        virtualinvoke r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void write(nu.xom.Document)>($r4);

        goto label4;

     label1:
        $z1 = r0 instanceof nu.xom.Attribute;

        if $z1 == 0 goto label2;

        $r3 = (nu.xom.Attribute) r0;

        virtualinvoke r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void write(nu.xom.Attribute)>($r3);

        goto label4;

     label2:
        $z2 = r0 instanceof nu.xom.Namespace;

        if $z2 == 0 goto label3;

        $r2 = (nu.xom.Namespace) r0;

        specialinvoke r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void write(nu.xom.Namespace)>($r2);

        goto label4;

     label3:
        virtualinvoke r1.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeChild(nu.xom.Node)>(r0);

     label4:
        return;
    }

    private void write(nu.xom.Namespace) throws java.io.IOException
    {
        nu.xom.Namespace r0;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r3;
        java.lang.String $r1, $r2, $r4;
        boolean $z0;

        r3 := @this: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r0 := @parameter0: nu.xom.Namespace;

        $r1 = virtualinvoke r0.<nu.xom.Namespace: java.lang.String getPrefix()>();

        $r2 = virtualinvoke r0.<nu.xom.Namespace: java.lang.String getValue()>();

        virtualinvoke r3.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>(" xmlns");

        $r4 = "";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        virtualinvoke r3.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>(":");

        virtualinvoke r3.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>($r1);

     label1:
        virtualinvoke r3.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>("=\"");

        virtualinvoke r3.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeAttributeValue(java.lang.String)>($r2);

        virtualinvoke r3.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: void writeRaw(java.lang.String)>("\"");

        return;
    }

    static nu.xom.Nodes access$502(nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer, nu.xom.Nodes)
    {
        nu.xom.Nodes r1;
        nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer r0;

        r0 := @parameter0: nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer;

        r1 := @parameter1: nu.xom.Nodes;

        r0.<nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer: nu.xom.Nodes nodes> = r1;

        return r1;
    }
}
