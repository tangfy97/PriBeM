class org.apache.lucene.search.FieldCacheImpl extends java.lang.Object implements org.apache.lucene.search.FieldCache
{
    private java.util.Map caches;
    final org.apache.lucene.index.SegmentReader$CoreClosedListener purgeCore;
    final org.apache.lucene.index.IndexReader$ReaderClosedListener purgeReader;
    private volatile java.io.PrintStream infoStream;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.search.FieldCacheImpl r0;
        org.apache.lucene.search.FieldCacheImpl$2 $r2;
        org.apache.lucene.search.FieldCacheImpl$1 $r1;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.lucene.search.FieldCacheImpl$1;

        specialinvoke $r1.<org.apache.lucene.search.FieldCacheImpl$1: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        r0.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.index.SegmentReader$CoreClosedListener purgeCore> = $r1;

        $r2 = new org.apache.lucene.search.FieldCacheImpl$2;

        specialinvoke $r2.<org.apache.lucene.search.FieldCacheImpl$2: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        r0.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.index.IndexReader$ReaderClosedListener purgeReader> = $r2;

        specialinvoke r0.<org.apache.lucene.search.FieldCacheImpl: void init()>();

        return;
    }

    private synchronized void init()
    {
        org.apache.lucene.search.FieldCacheImpl$SortedDocValuesCache $r22;
        java.util.HashMap $r1;
        org.apache.lucene.search.FieldCacheImpl$BinaryDocValuesCache $r20;
        org.apache.lucene.search.FieldCacheImpl$ShortCache $r5;
        java.util.Map $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r23, $r25, $r27;
        org.apache.lucene.search.FieldCacheImpl$LongCache $r14;
        org.apache.lucene.search.FieldCacheImpl$FloatCache $r11;
        org.apache.lucene.search.FieldCacheImpl$IntCache $r8;
        org.apache.lucene.search.FieldCacheImpl r0;
        org.apache.lucene.search.FieldCacheImpl$DocsWithFieldCache $r26;
        org.apache.lucene.search.FieldCacheImpl$DoubleCache $r17;
        org.apache.lucene.search.FieldCacheImpl$ByteCache $r2;
        org.apache.lucene.search.FieldCacheImpl$DocTermOrdsCache $r24;
        java.lang.Class $r4, $r7, $r10, $r13, $r16, $r19;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(9);

        r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches> = $r1;

        $r3 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        $r2 = new org.apache.lucene.search.FieldCacheImpl$ByteCache;

        specialinvoke $r2.<org.apache.lucene.search.FieldCacheImpl$ByteCache: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r2);

        $r6 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r7 = <java.lang.Short: java.lang.Class TYPE>;

        $r5 = new org.apache.lucene.search.FieldCacheImpl$ShortCache;

        specialinvoke $r5.<org.apache.lucene.search.FieldCacheImpl$ShortCache: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r5);

        $r9 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        $r8 = new org.apache.lucene.search.FieldCacheImpl$IntCache;

        specialinvoke $r8.<org.apache.lucene.search.FieldCacheImpl$IntCache: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r8);

        $r12 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r13 = <java.lang.Float: java.lang.Class TYPE>;

        $r11 = new org.apache.lucene.search.FieldCacheImpl$FloatCache;

        specialinvoke $r11.<org.apache.lucene.search.FieldCacheImpl$FloatCache: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r11);

        $r15 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r16 = <java.lang.Long: java.lang.Class TYPE>;

        $r14 = new org.apache.lucene.search.FieldCacheImpl$LongCache;

        specialinvoke $r14.<org.apache.lucene.search.FieldCacheImpl$LongCache: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r14);

        $r18 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r19 = <java.lang.Double: java.lang.Class TYPE>;

        $r17 = new org.apache.lucene.search.FieldCacheImpl$DoubleCache;

        specialinvoke $r17.<org.apache.lucene.search.FieldCacheImpl$DoubleCache: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r17);

        $r21 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r20 = new org.apache.lucene.search.FieldCacheImpl$BinaryDocValuesCache;

        specialinvoke $r20.<org.apache.lucene.search.FieldCacheImpl$BinaryDocValuesCache: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/lucene/index/BinaryDocValues;", $r20);

        $r23 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r22 = new org.apache.lucene.search.FieldCacheImpl$SortedDocValuesCache;

        specialinvoke $r22.<org.apache.lucene.search.FieldCacheImpl$SortedDocValuesCache: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/lucene/index/SortedDocValues;", $r22);

        $r25 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r24 = new org.apache.lucene.search.FieldCacheImpl$DocTermOrdsCache;

        specialinvoke $r24.<org.apache.lucene.search.FieldCacheImpl$DocTermOrdsCache: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/lucene/index/DocTermOrds;", $r24);

        $r27 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r26 = new org.apache.lucene.search.FieldCacheImpl$DocsWithFieldCache;

        specialinvoke $r26.<org.apache.lucene.search.FieldCacheImpl$DocsWithFieldCache: void <init>(org.apache.lucene.search.FieldCacheImpl)>(r0);

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/lucene/search/FieldCacheImpl$DocsWithFieldCache;", $r26);

        return;
    }

    public synchronized void purgeAllCaches()
    {
        org.apache.lucene.search.FieldCacheImpl r0;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        specialinvoke r0.<org.apache.lucene.search.FieldCacheImpl: void init()>();

        return;
    }

    public synchronized void purge(org.apache.lucene.index.AtomicReader)
    {
        org.apache.lucene.search.FieldCacheImpl$Cache r5;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.apache.lucene.search.FieldCacheImpl r0;
        java.util.Map $r1;
        java.lang.Object $r4;
        org.apache.lucene.index.AtomicReader r6;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        r6 := @parameter0: org.apache.lucene.index.AtomicReader;

        $r1 = r0.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r4;

        virtualinvoke r5.<org.apache.lucene.search.FieldCacheImpl$Cache: void purge(org.apache.lucene.index.AtomicReader)>(r6);

        goto label1;

     label2:
        return;
    }

    public synchronized org.apache.lucene.search.FieldCache$CacheEntry[] getCacheEntries()
    {
        org.apache.lucene.search.FieldCacheImpl$CacheKey r28;
        java.util.Map $r2, $r14, $r15, r22;
        boolean $z0, $z1, $z2;
        java.util.Set $r3, $r16, $r23;
        org.apache.lucene.search.FieldCache$CacheEntry $r29;
        java.lang.Throwable $r33;
        java.lang.Object[] $r6;
        java.util.ArrayList $r0;
        org.apache.lucene.search.FieldCache$CacheEntry[] $r5, $r7;
        int $i0;
        java.lang.String $r30;
        org.apache.lucene.search.FieldCacheImpl$Cache r11;
        java.util.Map$Entry r9, r19, r26;
        java.util.Iterator $r4, $r17, $r24;
        org.apache.lucene.search.FieldCacheImpl r1;
        java.lang.Object $r8, $r10, $r12, $r18, $r20, $r21, $r25, $r27, $r31, $r32;
        java.lang.Class r13;

        r1 := @this: org.apache.lucene.search.FieldCacheImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(17);

        $r2 = r1.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r10;

        $r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        r13 = (java.lang.Class) $r12;

        $r14 = r11.<org.apache.lucene.search.FieldCacheImpl$Cache: java.util.Map readerCache>;

        entermonitor $r14;

     label02:
        $r15 = r11.<org.apache.lucene.search.FieldCacheImpl$Cache: java.util.Map readerCache>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Set entrySet()>();

        $r17 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.util.Map$Entry) $r18;

        $r20 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r20 != null goto label04;

        goto label03;

     label04:
        $r21 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        r22 = (java.util.Map) $r21;

        $r23 = interfaceinvoke r22.<java.util.Map: java.util.Set entrySet()>();

        $r24 = interfaceinvoke $r23.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.util.Map$Entry) $r25;

        $r27 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getKey()>();

        r28 = (org.apache.lucene.search.FieldCacheImpl$CacheKey) $r27;

        $r29 = new org.apache.lucene.search.FieldCache$CacheEntry;

        $r30 = r28.<org.apache.lucene.search.FieldCacheImpl$CacheKey: java.lang.String field>;

        $r31 = r28.<org.apache.lucene.search.FieldCacheImpl$CacheKey: java.lang.Object custom>;

        $r32 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getValue()>();

        specialinvoke $r29.<org.apache.lucene.search.FieldCache$CacheEntry: void <init>(java.lang.Object,java.lang.String,java.lang.Class,java.lang.Object,java.lang.Object)>($r20, $r30, r13, $r31, $r32);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label05;

     label06:
        goto label03;

     label07:
        exitmonitor $r14;

     label08:
        goto label11;

     label09:
        $r33 := @caughtexception;

        exitmonitor $r14;

     label10:
        throw $r33;

     label11:
        goto label01;

     label12:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r5 = newarray (org.apache.lucene.search.FieldCache$CacheEntry)[$i0];

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.lucene.search.FieldCache$CacheEntry[]) $r6;

        return $r7;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void initReader(org.apache.lucene.index.AtomicReader)
    {
        org.apache.lucene.search.FieldCacheImpl r2;
        java.lang.Object $r1;
        org.apache.lucene.index.SegmentReader$CoreClosedListener $r6;
        org.apache.lucene.index.SegmentReader $r7;
        org.apache.lucene.index.IndexReader$ReaderClosedListener $r3, $r4;
        org.apache.lucene.index.AtomicReader r0, $r5;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        $z0 = r0 instanceof org.apache.lucene.index.SegmentReader;

        if $z0 == 0 goto label1;

        $r7 = (org.apache.lucene.index.SegmentReader) r0;

        $r6 = r2.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.index.SegmentReader$CoreClosedListener purgeCore>;

        virtualinvoke $r7.<org.apache.lucene.index.SegmentReader: void addCoreClosedListener(org.apache.lucene.index.SegmentReader$CoreClosedListener)>($r6);

        goto label3;

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: java.lang.Object getCoreCacheKey()>();

        $z1 = $r1 instanceof org.apache.lucene.index.AtomicReader;

        if $z1 == 0 goto label2;

        $r5 = (org.apache.lucene.index.AtomicReader) $r1;

        $r4 = r2.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.index.IndexReader$ReaderClosedListener purgeReader>;

        virtualinvoke $r5.<org.apache.lucene.index.AtomicReader: void addReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)>($r4);

        goto label3;

     label2:
        $r3 = r2.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.index.IndexReader$ReaderClosedListener purgeReader>;

        virtualinvoke r0.<org.apache.lucene.index.AtomicReader: void addReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)>($r3);

     label3:
        return;
    }

    void setDocsWithField(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.util.Bits)
    {
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r12;
        org.apache.lucene.util.FixedBitSet $r4;
        java.lang.AssertionError $r6;
        java.util.Map $r9;
        int $i0, $i1;
        java.lang.String r3;
        org.apache.lucene.util.Bits r1, r8;
        boolean $z0, $z1;
        org.apache.lucene.search.FieldCacheImpl$Cache $r11;
        org.apache.lucene.util.Bits$MatchAllBits $r5;
        org.apache.lucene.search.FieldCacheImpl r2;
        org.apache.lucene.util.Bits$MatchNoBits $r7;
        java.lang.Object $r10;
        org.apache.lucene.index.AtomicReader r0;

        r2 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.lucene.util.Bits;

        $i0 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        if r1 != null goto label1;

        $r7 = new org.apache.lucene.util.Bits$MatchNoBits;

        specialinvoke $r7.<org.apache.lucene.util.Bits$MatchNoBits: void <init>(int)>($i0);

        r8 = $r7;

        goto label6;

     label1:
        $z0 = r1 instanceof org.apache.lucene.util.FixedBitSet;

        if $z0 == 0 goto label5;

        $r4 = (org.apache.lucene.util.FixedBitSet) r1;

        $i1 = virtualinvoke $r4.<org.apache.lucene.util.FixedBitSet: int cardinality()>();

        if $i1 < $i0 goto label3;

        $z1 = <org.apache.lucene.search.FieldCacheImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if $i1 == $i0 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $r5 = new org.apache.lucene.util.Bits$MatchAllBits;

        specialinvoke $r5.<org.apache.lucene.util.Bits$MatchAllBits: void <init>(int)>($i0);

        r8 = $r5;

        goto label4;

     label3:
        r8 = r1;

     label4:
        goto label6;

     label5:
        r8 = r1;

     label6:
        $r9 = r2.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(class "Lorg/apache/lucene/search/FieldCacheImpl$DocsWithFieldCache;");

        $r11 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r10;

        $r12 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        specialinvoke $r12.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r3, null);

        virtualinvoke $r11.<org.apache.lucene.search.FieldCacheImpl$Cache: void put(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,java.lang.Object)>(r0, $r12, r8);

        return;
    }

    public org.apache.lucene.search.FieldCache$Bytes getBytes(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCache$Bytes $r3;
        org.apache.lucene.search.FieldCacheImpl r0;
        java.lang.String r2;
        org.apache.lucene.index.AtomicReader r1;
        boolean z0;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        r1 := @parameter0: org.apache.lucene.index.AtomicReader;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.search.FieldCache$Bytes getBytes(org.apache.lucene.index.AtomicReader,java.lang.String,org.apache.lucene.search.FieldCache$ByteParser,boolean)>(r1, r2, null, z0);

        return $r3;
    }

    public org.apache.lucene.search.FieldCache$Bytes getBytes(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$ByteParser, boolean) throws java.io.IOException
    {
        java.lang.IllegalStateException $r15;
        org.apache.lucene.index.NumericDocValues $r2;
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r9;
        java.util.Map $r7;
        java.lang.String r1, $r22;
        org.apache.lucene.index.FieldInfos $r3;
        boolean $z0, $z1, z2;
        org.apache.lucene.search.FieldCacheImpl$Cache $r11;
        org.apache.lucene.search.FieldCache$Bytes $r13, $r14, $r23;
        org.apache.lucene.search.FieldCacheImpl r5;
        org.apache.lucene.search.FieldCache$ByteParser r10;
        org.apache.lucene.index.FieldInfo$DocValuesType $r20;
        org.apache.lucene.index.FieldInfo $r4;
        java.lang.Class $r6;
        java.lang.Object $r8, $r12;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r21;
        org.apache.lucene.search.FieldCacheImpl$3 $r24;
        org.apache.lucene.index.AtomicReader r0;

        r5 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r1 := @parameter1: java.lang.String;

        r10 := @parameter2: org.apache.lucene.search.FieldCache$ByteParser;

        z2 := @parameter3: boolean;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r24 = new org.apache.lucene.search.FieldCacheImpl$3;

        specialinvoke $r24.<org.apache.lucene.search.FieldCacheImpl$3: void <init>(org.apache.lucene.search.FieldCacheImpl,org.apache.lucene.index.NumericDocValues)>(r5, $r2);

        return $r24;

     label1:
        $r3 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r1);

        if $r4 != null goto label2;

        $r23 = <org.apache.lucene.search.FieldCache$Bytes: org.apache.lucene.search.FieldCache$Bytes EMPTY>;

        return $r23;

     label2:
        $z0 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        if $z0 == 0 goto label3;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was indexed as ");

        $r20 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label3:
        $z1 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 != 0 goto label4;

        $r14 = <org.apache.lucene.search.FieldCache$Bytes: org.apache.lucene.search.FieldCache$Bytes EMPTY>;

        return $r14;

     label4:
        $r7 = r5.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r11 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r8;

        $r9 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        specialinvoke $r9.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r1, r10);

        $r12 = virtualinvoke $r11.<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,boolean)>(r0, $r9, z2);

        $r13 = (org.apache.lucene.search.FieldCache$Bytes) $r12;

        return $r13;
    }

    public org.apache.lucene.search.FieldCache$Shorts getShorts(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCache$Shorts $r3;
        org.apache.lucene.search.FieldCacheImpl r0;
        java.lang.String r2;
        org.apache.lucene.index.AtomicReader r1;
        boolean z0;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        r1 := @parameter0: org.apache.lucene.index.AtomicReader;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.search.FieldCache$Shorts getShorts(org.apache.lucene.index.AtomicReader,java.lang.String,org.apache.lucene.search.FieldCache$ShortParser,boolean)>(r1, r2, null, z0);

        return $r3;
    }

    public org.apache.lucene.search.FieldCache$Shorts getShorts(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$ShortParser, boolean) throws java.io.IOException
    {
        java.lang.IllegalStateException $r15;
        org.apache.lucene.index.NumericDocValues $r2;
        org.apache.lucene.search.FieldCache$Shorts $r13, $r14, $r23;
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r9;
        java.util.Map $r7;
        org.apache.lucene.search.FieldCache$ShortParser r10;
        java.lang.String r1, $r22;
        org.apache.lucene.index.FieldInfos $r3;
        boolean $z0, $z1, z2;
        org.apache.lucene.search.FieldCacheImpl$Cache $r11;
        org.apache.lucene.search.FieldCacheImpl r5;
        org.apache.lucene.index.FieldInfo$DocValuesType $r20;
        org.apache.lucene.search.FieldCacheImpl$4 $r24;
        org.apache.lucene.index.FieldInfo $r4;
        java.lang.Class $r6;
        java.lang.Object $r8, $r12;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r21;
        org.apache.lucene.index.AtomicReader r0;

        r5 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r1 := @parameter1: java.lang.String;

        r10 := @parameter2: org.apache.lucene.search.FieldCache$ShortParser;

        z2 := @parameter3: boolean;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r24 = new org.apache.lucene.search.FieldCacheImpl$4;

        specialinvoke $r24.<org.apache.lucene.search.FieldCacheImpl$4: void <init>(org.apache.lucene.search.FieldCacheImpl,org.apache.lucene.index.NumericDocValues)>(r5, $r2);

        return $r24;

     label1:
        $r3 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r1);

        if $r4 != null goto label2;

        $r23 = <org.apache.lucene.search.FieldCache$Shorts: org.apache.lucene.search.FieldCache$Shorts EMPTY>;

        return $r23;

     label2:
        $z0 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        if $z0 == 0 goto label3;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was indexed as ");

        $r20 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label3:
        $z1 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 != 0 goto label4;

        $r14 = <org.apache.lucene.search.FieldCache$Shorts: org.apache.lucene.search.FieldCache$Shorts EMPTY>;

        return $r14;

     label4:
        $r7 = r5.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r6 = <java.lang.Short: java.lang.Class TYPE>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r11 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r8;

        $r9 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        specialinvoke $r9.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r1, r10);

        $r12 = virtualinvoke $r11.<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,boolean)>(r0, $r9, z2);

        $r13 = (org.apache.lucene.search.FieldCache$Shorts) $r12;

        return $r13;
    }

    public org.apache.lucene.search.FieldCache$Ints getInts(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCacheImpl r0;
        java.lang.String r2;
        org.apache.lucene.search.FieldCache$Ints $r3;
        org.apache.lucene.index.AtomicReader r1;
        boolean z0;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        r1 := @parameter0: org.apache.lucene.index.AtomicReader;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.search.FieldCache$Ints getInts(org.apache.lucene.index.AtomicReader,java.lang.String,org.apache.lucene.search.FieldCache$IntParser,boolean)>(r1, r2, null, z0);

        return $r3;
    }

    public org.apache.lucene.search.FieldCache$Ints getInts(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$IntParser, boolean) throws java.io.IOException
    {
        java.lang.IllegalStateException $r15;
        org.apache.lucene.index.NumericDocValues $r2;
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r9;
        java.util.Map $r7;
        java.lang.String r1, $r22;
        org.apache.lucene.index.FieldInfos $r3;
        org.apache.lucene.search.FieldCache$Ints $r13, $r14, $r23;
        boolean $z0, $z1, z2;
        org.apache.lucene.search.FieldCacheImpl$Cache $r11;
        org.apache.lucene.search.FieldCacheImpl r5;
        org.apache.lucene.search.FieldCache$IntParser r10;
        org.apache.lucene.index.FieldInfo$DocValuesType $r20;
        org.apache.lucene.search.FieldCacheImpl$5 $r24;
        org.apache.lucene.index.FieldInfo $r4;
        java.lang.Class $r6;
        java.lang.Object $r8, $r12;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r21;
        org.apache.lucene.index.AtomicReader r0;

        r5 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r1 := @parameter1: java.lang.String;

        r10 := @parameter2: org.apache.lucene.search.FieldCache$IntParser;

        z2 := @parameter3: boolean;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r24 = new org.apache.lucene.search.FieldCacheImpl$5;

        specialinvoke $r24.<org.apache.lucene.search.FieldCacheImpl$5: void <init>(org.apache.lucene.search.FieldCacheImpl,org.apache.lucene.index.NumericDocValues)>(r5, $r2);

        return $r24;

     label1:
        $r3 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r1);

        if $r4 != null goto label2;

        $r23 = <org.apache.lucene.search.FieldCache$Ints: org.apache.lucene.search.FieldCache$Ints EMPTY>;

        return $r23;

     label2:
        $z0 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        if $z0 == 0 goto label3;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was indexed as ");

        $r20 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label3:
        $z1 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 != 0 goto label4;

        $r14 = <org.apache.lucene.search.FieldCache$Ints: org.apache.lucene.search.FieldCache$Ints EMPTY>;

        return $r14;

     label4:
        $r7 = r5.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r11 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r8;

        $r9 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        specialinvoke $r9.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r1, r10);

        $r12 = virtualinvoke $r11.<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,boolean)>(r0, $r9, z2);

        $r13 = (org.apache.lucene.search.FieldCache$Ints) $r12;

        return $r13;
    }

    public org.apache.lucene.util.Bits getDocsWithField(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r7;
        java.util.Map $r5;
        int $i0, $i1, $i2;
        java.lang.String r2;
        org.apache.lucene.index.FieldInfos $r1;
        org.apache.lucene.util.Bits $r10;
        boolean $z0, $z1;
        org.apache.lucene.search.FieldCacheImpl$Cache $r8;
        org.apache.lucene.util.Bits$MatchAllBits $r12;
        org.apache.lucene.search.FieldCacheImpl r4;
        org.apache.lucene.index.FieldInfo $r3;
        org.apache.lucene.util.Bits$MatchNoBits $r11, $r13;
        java.lang.Object $r6, $r9;
        org.apache.lucene.index.AtomicReader r0;

        r4 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r3 = virtualinvoke $r1.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r2);

        if $r3 != null goto label1;

        $r13 = new org.apache.lucene.util.Bits$MatchNoBits;

        $i2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        specialinvoke $r13.<org.apache.lucene.util.Bits$MatchNoBits: void <init>(int)>($i2);

        return $r13;

     label1:
        $z0 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        if $z0 == 0 goto label2;

        $r12 = new org.apache.lucene.util.Bits$MatchAllBits;

        $i1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        specialinvoke $r12.<org.apache.lucene.util.Bits$MatchAllBits: void <init>(int)>($i1);

        return $r12;

     label2:
        $z1 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 != 0 goto label3;

        $r11 = new org.apache.lucene.util.Bits$MatchNoBits;

        $i0 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        specialinvoke $r11.<org.apache.lucene.util.Bits$MatchNoBits: void <init>(int)>($i0);

        return $r11;

     label3:
        $r5 = r4.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(class "Lorg/apache/lucene/search/FieldCacheImpl$DocsWithFieldCache;");

        $r8 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r6;

        $r7 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        specialinvoke $r7.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r2, null);

        $r9 = virtualinvoke $r8.<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,boolean)>(r0, $r7, 0);

        $r10 = (org.apache.lucene.util.Bits) $r9;

        return $r10;
    }

    public org.apache.lucene.search.FieldCache$Floats getFloats(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCacheImpl r0;
        java.lang.String r2;
        org.apache.lucene.search.FieldCache$Floats $r3;
        org.apache.lucene.index.AtomicReader r1;
        boolean z0;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        r1 := @parameter0: org.apache.lucene.index.AtomicReader;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.search.FieldCache$Floats getFloats(org.apache.lucene.index.AtomicReader,java.lang.String,org.apache.lucene.search.FieldCache$FloatParser,boolean)>(r1, r2, null, z0);

        return $r3;
    }

    public org.apache.lucene.search.FieldCache$Floats getFloats(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$FloatParser, boolean) throws java.io.IOException
    {
        java.lang.IllegalStateException $r15;
        org.apache.lucene.search.FieldCache$FloatParser r10;
        org.apache.lucene.index.NumericDocValues $r2;
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r9;
        java.util.Map $r7;
        java.lang.String r1, $r22;
        org.apache.lucene.index.FieldInfos $r3;
        boolean $z0, $z1, z2;
        org.apache.lucene.search.FieldCacheImpl$Cache $r11;
        org.apache.lucene.search.FieldCacheImpl r5;
        org.apache.lucene.search.FieldCache$Floats $r13, $r14, $r23;
        org.apache.lucene.index.FieldInfo$DocValuesType $r20;
        org.apache.lucene.search.FieldCacheImpl$6 $r24;
        org.apache.lucene.index.FieldInfo $r4;
        java.lang.Class $r6;
        java.lang.Object $r8, $r12;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r21;
        org.apache.lucene.index.AtomicReader r0;

        r5 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r1 := @parameter1: java.lang.String;

        r10 := @parameter2: org.apache.lucene.search.FieldCache$FloatParser;

        z2 := @parameter3: boolean;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r24 = new org.apache.lucene.search.FieldCacheImpl$6;

        specialinvoke $r24.<org.apache.lucene.search.FieldCacheImpl$6: void <init>(org.apache.lucene.search.FieldCacheImpl,org.apache.lucene.index.NumericDocValues)>(r5, $r2);

        return $r24;

     label1:
        $r3 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r1);

        if $r4 != null goto label2;

        $r23 = <org.apache.lucene.search.FieldCache$Floats: org.apache.lucene.search.FieldCache$Floats EMPTY>;

        return $r23;

     label2:
        $z0 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        if $z0 == 0 goto label3;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was indexed as ");

        $r20 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label3:
        $z1 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 != 0 goto label4;

        $r14 = <org.apache.lucene.search.FieldCache$Floats: org.apache.lucene.search.FieldCache$Floats EMPTY>;

        return $r14;

     label4:
        $r7 = r5.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r6 = <java.lang.Float: java.lang.Class TYPE>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r11 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r8;

        $r9 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        specialinvoke $r9.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r1, r10);

        $r12 = virtualinvoke $r11.<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,boolean)>(r0, $r9, z2);

        $r13 = (org.apache.lucene.search.FieldCache$Floats) $r12;

        return $r13;
    }

    public org.apache.lucene.search.FieldCache$Longs getLongs(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCacheImpl r0;
        java.lang.String r2;
        org.apache.lucene.index.AtomicReader r1;
        org.apache.lucene.search.FieldCache$Longs $r3;
        boolean z0;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        r1 := @parameter0: org.apache.lucene.index.AtomicReader;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.search.FieldCache$Longs getLongs(org.apache.lucene.index.AtomicReader,java.lang.String,org.apache.lucene.search.FieldCache$LongParser,boolean)>(r1, r2, null, z0);

        return $r3;
    }

    public org.apache.lucene.search.FieldCache$Longs getLongs(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$LongParser, boolean) throws java.io.IOException
    {
        java.lang.IllegalStateException $r15;
        org.apache.lucene.index.NumericDocValues $r2;
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r9;
        java.util.Map $r7;
        java.lang.String r1, $r22;
        org.apache.lucene.index.FieldInfos $r3;
        boolean $z0, $z1, z2;
        org.apache.lucene.search.FieldCacheImpl$Cache $r11;
        org.apache.lucene.search.FieldCacheImpl r5;
        org.apache.lucene.search.FieldCache$Longs $r13, $r14, $r23;
        org.apache.lucene.index.FieldInfo$DocValuesType $r20;
        org.apache.lucene.search.FieldCacheImpl$7 $r24;
        org.apache.lucene.search.FieldCache$LongParser r10;
        org.apache.lucene.index.FieldInfo $r4;
        java.lang.Class $r6;
        java.lang.Object $r8, $r12;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r21;
        org.apache.lucene.index.AtomicReader r0;

        r5 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r1 := @parameter1: java.lang.String;

        r10 := @parameter2: org.apache.lucene.search.FieldCache$LongParser;

        z2 := @parameter3: boolean;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r24 = new org.apache.lucene.search.FieldCacheImpl$7;

        specialinvoke $r24.<org.apache.lucene.search.FieldCacheImpl$7: void <init>(org.apache.lucene.search.FieldCacheImpl,org.apache.lucene.index.NumericDocValues)>(r5, $r2);

        return $r24;

     label1:
        $r3 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r1);

        if $r4 != null goto label2;

        $r23 = <org.apache.lucene.search.FieldCache$Longs: org.apache.lucene.search.FieldCache$Longs EMPTY>;

        return $r23;

     label2:
        $z0 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        if $z0 == 0 goto label3;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was indexed as ");

        $r20 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label3:
        $z1 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 != 0 goto label4;

        $r14 = <org.apache.lucene.search.FieldCache$Longs: org.apache.lucene.search.FieldCache$Longs EMPTY>;

        return $r14;

     label4:
        $r7 = r5.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r11 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r8;

        $r9 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        specialinvoke $r9.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r1, r10);

        $r12 = virtualinvoke $r11.<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,boolean)>(r0, $r9, z2);

        $r13 = (org.apache.lucene.search.FieldCache$Longs) $r12;

        return $r13;
    }

    public org.apache.lucene.search.FieldCache$Doubles getDoubles(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCache$Doubles $r3;
        org.apache.lucene.search.FieldCacheImpl r0;
        java.lang.String r2;
        org.apache.lucene.index.AtomicReader r1;
        boolean z0;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        r1 := @parameter0: org.apache.lucene.index.AtomicReader;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.search.FieldCache$Doubles getDoubles(org.apache.lucene.index.AtomicReader,java.lang.String,org.apache.lucene.search.FieldCache$DoubleParser,boolean)>(r1, r2, null, z0);

        return $r3;
    }

    public org.apache.lucene.search.FieldCache$Doubles getDoubles(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$DoubleParser, boolean) throws java.io.IOException
    {
        java.lang.IllegalStateException $r15;
        org.apache.lucene.index.NumericDocValues $r2;
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r9;
        org.apache.lucene.search.FieldCache$DoubleParser r10;
        org.apache.lucene.search.FieldCache$Doubles $r13, $r14, $r23;
        java.util.Map $r7;
        java.lang.String r1, $r22;
        org.apache.lucene.index.FieldInfos $r3;
        boolean $z0, $z1, z2;
        org.apache.lucene.search.FieldCacheImpl$Cache $r11;
        org.apache.lucene.search.FieldCacheImpl r5;
        org.apache.lucene.index.FieldInfo$DocValuesType $r20;
        org.apache.lucene.search.FieldCacheImpl$8 $r24;
        org.apache.lucene.index.FieldInfo $r4;
        java.lang.Class $r6;
        java.lang.Object $r8, $r12;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r21;
        org.apache.lucene.index.AtomicReader r0;

        r5 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r1 := @parameter1: java.lang.String;

        r10 := @parameter2: org.apache.lucene.search.FieldCache$DoubleParser;

        z2 := @parameter3: boolean;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r24 = new org.apache.lucene.search.FieldCacheImpl$8;

        specialinvoke $r24.<org.apache.lucene.search.FieldCacheImpl$8: void <init>(org.apache.lucene.search.FieldCacheImpl,org.apache.lucene.index.NumericDocValues)>(r5, $r2);

        return $r24;

     label1:
        $r3 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r1);

        if $r4 != null goto label2;

        $r23 = <org.apache.lucene.search.FieldCache$Doubles: org.apache.lucene.search.FieldCache$Doubles EMPTY>;

        return $r23;

     label2:
        $z0 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        if $z0 == 0 goto label3;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was indexed as ");

        $r20 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label3:
        $z1 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 != 0 goto label4;

        $r14 = <org.apache.lucene.search.FieldCache$Doubles: org.apache.lucene.search.FieldCache$Doubles EMPTY>;

        return $r14;

     label4:
        $r7 = r5.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r11 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r8;

        $r9 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        specialinvoke $r9.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r1, r10);

        $r12 = virtualinvoke $r11.<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,boolean)>(r0, $r9, z2);

        $r13 = (org.apache.lucene.search.FieldCache$Doubles) $r12;

        return $r13;
    }

    public org.apache.lucene.index.SortedDocValues getTermsIndex(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCacheImpl r0;
        java.lang.String r2;
        org.apache.lucene.index.SortedDocValues $r3;
        org.apache.lucene.index.AtomicReader r1;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        r1 := @parameter0: org.apache.lucene.index.AtomicReader;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.index.SortedDocValues getTermsIndex(org.apache.lucene.index.AtomicReader,java.lang.String,float)>(r1, r2, 0.5F);

        return $r3;
    }

    public org.apache.lucene.index.SortedDocValues getTermsIndex(org.apache.lucene.index.AtomicReader, java.lang.String, float) throws java.io.IOException
    {
        java.lang.Float $r10;
        java.lang.IllegalStateException $r14;
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r8;
        java.util.Map $r6;
        java.lang.String r1, $r21;
        org.apache.lucene.index.SortedDocValues $r2, $r12, $r13, $r22;
        org.apache.lucene.index.FieldInfos $r3;
        boolean $z0, $z1;
        org.apache.lucene.search.FieldCacheImpl$Cache $r9;
        org.apache.lucene.search.FieldCacheImpl r5;
        org.apache.lucene.index.FieldInfo$DocValuesType $r19;
        org.apache.lucene.index.FieldInfo $r4;
        float f0;
        java.lang.Object $r7, $r11;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r20;
        org.apache.lucene.index.AtomicReader r0;

        r5 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r1);

        if $r4 != null goto label2;

        $r22 = <org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.index.SortedDocValues EMPTY_TERMSINDEX>;

        return $r22;

     label2:
        $z0 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        if $z0 == 0 goto label3;

        $r14 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was indexed as ");

        $r19 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r14;

     label3:
        $z1 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 != 0 goto label4;

        $r13 = <org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.index.SortedDocValues EMPTY_TERMSINDEX>;

        return $r13;

     label4:
        $r6 = r5.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(class "Lorg/apache/lucene/index/SortedDocValues;");

        $r9 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r7;

        $r8 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        specialinvoke $r8.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r1, $r10);

        $r11 = virtualinvoke $r9.<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,boolean)>(r0, $r8, 0);

        $r12 = (org.apache.lucene.index.SortedDocValues) $r11;

        return $r12;
    }

    public org.apache.lucene.index.BinaryDocValues getTerms(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.search.FieldCacheImpl r0;
        java.lang.String r2;
        org.apache.lucene.index.BinaryDocValues $r3;
        org.apache.lucene.index.AtomicReader r1;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        r1 := @parameter0: org.apache.lucene.index.AtomicReader;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.index.BinaryDocValues getTerms(org.apache.lucene.index.AtomicReader,java.lang.String,float)>(r1, r2, 0.5F);

        return $r3;
    }

    public org.apache.lucene.index.BinaryDocValues getTerms(org.apache.lucene.index.AtomicReader, java.lang.String, float) throws java.io.IOException
    {
        java.lang.Float $r10;
        java.lang.IllegalStateException $r14;
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r8;
        java.util.Map $r6;
        java.lang.String r1, $r21;
        org.apache.lucene.index.FieldInfos $r3;
        boolean $z0, $z1;
        org.apache.lucene.search.FieldCacheImpl$Cache $r9;
        org.apache.lucene.search.FieldCacheImpl r5;
        org.apache.lucene.index.FieldInfo$DocValuesType $r19;
        org.apache.lucene.index.FieldInfo $r4;
        float f0;
        java.lang.Object $r7, $r11;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r20;
        org.apache.lucene.index.BinaryDocValues $r2, $r12, $r13, $r22, r23;
        org.apache.lucene.index.AtomicReader r0;

        r5 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String)>(r1);

        r23 = $r2;

        if $r2 != null goto label1;

        r23 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String)>(r1);

     label1:
        if r23 == null goto label2;

        return r23;

     label2:
        $r3 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r1);

        if $r4 != null goto label3;

        $r22 = <org.apache.lucene.index.BinaryDocValues: org.apache.lucene.index.BinaryDocValues EMPTY>;

        return $r22;

     label3:
        $z0 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        if $z0 == 0 goto label4;

        $r14 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was indexed as ");

        $r19 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r14;

     label4:
        $z1 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 != 0 goto label5;

        $r13 = <org.apache.lucene.index.BinaryDocValues: org.apache.lucene.index.BinaryDocValues EMPTY>;

        return $r13;

     label5:
        $r6 = r5.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(class "Lorg/apache/lucene/index/BinaryDocValues;");

        $r9 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r7;

        $r8 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        specialinvoke $r8.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r1, $r10);

        $r11 = virtualinvoke $r9.<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,boolean)>(r0, $r8, 0);

        $r12 = (org.apache.lucene.index.BinaryDocValues) $r11;

        return $r12;
    }

    public org.apache.lucene.index.SortedSetDocValues getDocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException
    {
        java.lang.IllegalStateException $r15;
        org.apache.lucene.search.FieldCacheImpl$CacheKey $r9;
        java.util.Map $r7;
        org.apache.lucene.index.SortedSetDocValues $r2, $r13, $r14, $r23;
        java.lang.String r1, $r22;
        org.apache.lucene.index.SortedDocValues $r3;
        org.apache.lucene.index.FieldInfos $r4;
        boolean $z0, $z1;
        org.apache.lucene.search.FieldCacheImpl$Cache $r10;
        org.apache.lucene.index.DocTermOrds r12;
        org.apache.lucene.search.FieldCacheImpl r6;
        org.apache.lucene.index.FieldInfo$DocValuesType $r20;
        org.apache.lucene.index.FieldInfo $r5;
        java.lang.Object $r8, $r11;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r21;
        org.apache.lucene.index.AtomicReader r0;
        org.apache.lucene.index.SingletonSortedSetDocValues $r24;

        r6 := @this: org.apache.lucene.search.FieldCacheImpl;

        r0 := @parameter0: org.apache.lucene.index.AtomicReader;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String)>(r1);

        if $r3 == null goto label2;

        $r24 = new org.apache.lucene.index.SingletonSortedSetDocValues;

        specialinvoke $r24.<org.apache.lucene.index.SingletonSortedSetDocValues: void <init>(org.apache.lucene.index.SortedDocValues)>($r3);

        return $r24;

     label2:
        $r4 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r1);

        if $r5 != null goto label3;

        $r23 = <org.apache.lucene.index.SortedSetDocValues: org.apache.lucene.index.SortedSetDocValues EMPTY>;

        return $r23;

     label3:
        $z0 = virtualinvoke $r5.<org.apache.lucene.index.FieldInfo: boolean hasDocValues()>();

        if $z0 == 0 goto label4;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was indexed as ");

        $r20 = virtualinvoke $r5.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$DocValuesType getDocValuesType()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label4:
        $z1 = virtualinvoke $r5.<org.apache.lucene.index.FieldInfo: boolean isIndexed()>();

        if $z1 != 0 goto label5;

        $r14 = <org.apache.lucene.index.SortedSetDocValues: org.apache.lucene.index.SortedSetDocValues EMPTY>;

        return $r14;

     label5:
        $r7 = r6.<org.apache.lucene.search.FieldCacheImpl: java.util.Map caches>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(class "Lorg/apache/lucene/index/DocTermOrds;");

        $r10 = (org.apache.lucene.search.FieldCacheImpl$Cache) $r8;

        $r9 = new org.apache.lucene.search.FieldCacheImpl$CacheKey;

        specialinvoke $r9.<org.apache.lucene.search.FieldCacheImpl$CacheKey: void <init>(java.lang.String,java.lang.Object)>(r1, null);

        $r11 = virtualinvoke $r10.<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.AtomicReader,org.apache.lucene.search.FieldCacheImpl$CacheKey,boolean)>(r0, $r9, 0);

        r12 = (org.apache.lucene.index.DocTermOrds) $r11;

        $r13 = virtualinvoke r12.<org.apache.lucene.index.DocTermOrds: org.apache.lucene.index.SortedSetDocValues iterator(org.apache.lucene.index.AtomicReader)>(r0);

        return $r13;
    }

    public void setInfoStream(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        org.apache.lucene.search.FieldCacheImpl r0;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        r1 := @parameter0: java.io.PrintStream;

        r0.<org.apache.lucene.search.FieldCacheImpl: java.io.PrintStream infoStream> = r1;

        return;
    }

    public java.io.PrintStream getInfoStream()
    {
        java.io.PrintStream $r1;
        org.apache.lucene.search.FieldCacheImpl r0;

        r0 := @this: org.apache.lucene.search.FieldCacheImpl;

        $r1 = r0.<org.apache.lucene.search.FieldCacheImpl: java.io.PrintStream infoStream>;

        return $r1;
    }

    static void access$000(org.apache.lucene.search.FieldCacheImpl, org.apache.lucene.index.AtomicReader)
    {
        org.apache.lucene.search.FieldCacheImpl r0;
        org.apache.lucene.index.AtomicReader r1;

        r0 := @parameter0: org.apache.lucene.search.FieldCacheImpl;

        r1 := @parameter1: org.apache.lucene.index.AtomicReader;

        specialinvoke r0.<org.apache.lucene.search.FieldCacheImpl: void initReader(org.apache.lucene.index.AtomicReader)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/FieldCacheImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.FieldCacheImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
