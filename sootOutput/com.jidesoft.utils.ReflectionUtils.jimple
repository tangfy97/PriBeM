public class com.jidesoft.utils.ReflectionUtils extends java.lang.Object
{

    public void <init>()
    {
        com.jidesoft.utils.ReflectionUtils r0;

        r0 := @this: com.jidesoft.utils.ReflectionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void callSetBoolean(java.lang.Object, java.lang.String, boolean) throws java.lang.Exception
    {
        java.lang.Object[] $r2;
        java.lang.Class[] $r0;
        java.lang.Boolean $r7;
        java.lang.Class $r1, $r4;
        java.lang.Object r3;
        java.lang.String r5;
        java.lang.reflect.Method $r6;
        boolean z0;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r0 = newarray (java.lang.Class)[1];

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r0[0] = $r1;

        $r2 = newarray (java.lang.Object)[1];

        if z0 == 0 goto label1;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label2:
        $r2[0] = $r7;

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r5, $r0);

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r2);

        return;
    }

    public static void callSetInt(java.lang.Object, java.lang.String, int) throws java.lang.Exception
    {
        java.lang.Object[] $r2;
        java.lang.Class[] $r0;
        java.lang.Integer $r3;
        int i0;
        java.lang.Class $r1, $r5;
        java.lang.Object r4;
        java.lang.String r6;
        java.lang.reflect.Method $r7;

        r4 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r0 = newarray (java.lang.Class)[1];

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[0] = $r1;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r6, $r0);

        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r2);

        return;
    }

    public static void callSet(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object[] $r3;
        java.lang.Class[] $r0;
        java.lang.Object r1, r4;
        java.lang.Class $r2, $r5;
        java.lang.String r6;
        java.lang.reflect.Method $r7;

        r4 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object;

        $r0 = newarray (java.lang.Class)[1];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r0[0] = $r2;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r6, $r0);

        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r3);

        return;
    }

    public static java.lang.Object callGet(java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        java.lang.Object[] $r5;
        java.lang.Class[] $r3;
        java.lang.Object r0, $r6;
        java.lang.Class $r1;
        java.lang.String r2;
        java.lang.reflect.Method $r4;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = (java.lang.Class[]) null;

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r2, $r3);

        $r5 = (java.lang.Object[]) null;

        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r5);

        return $r6;
    }

    public static void call(java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        java.lang.Object[] $r5;
        java.lang.Class[] $r3;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String r2;
        java.lang.reflect.Method $r4;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = (java.lang.Class[]) null;

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r2, $r3);

        $r5 = (java.lang.Object[]) null;

        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r5);

        return;
    }

    public static java.lang.Object callConstructor(java.lang.Class, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object[] r3;
        java.lang.Class[] r1;
        java.lang.Class r0;
        java.lang.Object $r4;
        java.lang.reflect.Constructor $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        r3 := @parameter2: java.lang.Object[];

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r1);

        $r4 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3);

        return $r4;
    }

    public static java.lang.Object callAny(java.lang.Object, java.lang.String, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object[] r0;
        java.lang.Class[] r6;
        int $i0, $i1, i2;
        java.lang.Object r1, $r3, $r4;
        java.lang.Class $r5;
        java.lang.String r2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Object[];

        r6 = null;

        if r0 == null goto label2;

        $i0 = lengthof r0;

        r6 = newarray (java.lang.Class)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r4 = r0[i2];

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        r6[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <com.jidesoft.utils.ReflectionUtils: java.lang.Object callAny(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])>(r1, r2, r6, r0);

        return $r3;
    }

    public static java.lang.Object callAny(java.lang.Object, java.lang.String, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object[] r5;
        java.lang.Class[] r3;
        java.lang.Object r0, $r6;
        java.lang.Class $r1;
        java.lang.String r2;
        java.lang.reflect.Method $r4;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        r5 := @parameter3: java.lang.Object[];

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r2, r3);

        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r5);

        return $r6;
    }

    public static java.lang.Object callAnyWithoutException(java.lang.Object, java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Object[])
    {
        java.lang.Throwable $r6;
        java.lang.Object[] r4;
        java.lang.Class[] r2;
        java.lang.Exception $r7, $r8;
        java.lang.Class r0;
        java.lang.Object r3, $r5;
        java.lang.String r1;
        java.lang.reflect.Method r9;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.Object[];

     label01:
        r9 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r1, r2);

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        r9 = null;

     label04:
        if r9 == null goto label11;

     label05:
        virtualinvoke r9.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r5 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, r4);

     label06:
        virtualinvoke r9.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        return $r5;

     label07:
        $r7 := @caughtexception;

     label08:
        virtualinvoke r9.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        return null;

     label09:
        $r6 := @caughtexception;

     label10:
        virtualinvoke r9.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        throw $r6;

     label11:
        return null;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static java.lang.Object callStatic(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Throwable $r5;
        java.lang.Object[] r4;
        java.lang.Class[] r2;
        java.lang.Class r0;
        java.lang.Object r6;
        java.lang.String r1;
        java.lang.reflect.Method $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        r4 := @parameter3: java.lang.Object[];

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

        r6 = null;

        if $r3 == null goto label5;

     label1:
        virtualinvoke $r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        r6 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, r4);

     label2:
        virtualinvoke $r3.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r3.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        throw $r5;

     label5:
        return r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.Object createInstance(java.lang.String, java.lang.Class[], java.lang.Object[])
    {
        java.lang.Object[] r4;
        java.lang.Class[] r2;
        java.lang.reflect.Constructor $r3;
        java.lang.Exception $r5;
        int $i0;
        java.lang.Class $r1;
        java.lang.Object r6;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        r4 := @parameter2: java.lang.Object[];

        r6 = null;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        if r2 == null goto label2;

        $i0 = lengthof r2;

        if $i0 == 0 goto label2;

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r2);

        r6 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r4);

        goto label3;

     label2:
        r6 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        return r6;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public static boolean isSubClassOf(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.Class r3;
        java.lang.String $r1, r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        if r3 == null goto label4;

        $r1 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label2;

     label4:
        return 0;
    }
}
