final class kodkod.util.ints.RangeSequence$DescendingIterator extends kodkod.util.ints.RangeSequence$EntryIterator
{
    final kodkod.util.ints.RangeSequence this$0;

    void <init>(kodkod.util.ints.RangeSequence, int, int)
    {
        kodkod.util.ints.RangeSequence$DescendingIterator r0;
        kodkod.util.ints.IntTree $r2, $r6, $r19;
        kodkod.util.ints.RangeSequence r1;
        kodkod.util.ints.RangeSequence$Entry $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r20, $r22;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        kodkod.util.ints.IntTree$Node $r3, $r7, $r21;
        java.lang.Object $r13, $r18;

        r0 := @this: kodkod.util.ints.RangeSequence$DescendingIterator;

        r1 := @parameter0: kodkod.util.ints.RangeSequence;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence this$0> = r1;

        specialinvoke r0.<kodkod.util.ints.RangeSequence$EntryIterator: void <init>(kodkod.util.ints.RangeSequence,int)>(r1, i0);

        $r2 = staticinvoke <kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree access$1(kodkod.util.ints.RangeSequence)>(r1);

        $r3 = virtualinvoke $r2.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchGTE(int)>(i1);

        $r4 = (kodkod.util.ints.RangeSequence$Entry) $r3;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next> = $r4;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int index> = 2147483647;

        $r5 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        if $r5 == null goto label1;

        $r14 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $i4 = virtualinvoke $r14.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        if $i4 <= i1 goto label3;

     label1:
        $r6 = staticinvoke <kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree access$1(kodkod.util.ints.RangeSequence)>(r1);

        $r7 = virtualinvoke $r6.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchLTE(int)>(i1);

        $r8 = (kodkod.util.ints.RangeSequence$Entry) $r7;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next> = $r8;

        $r9 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        if $r9 != null goto label2;

        $i9 = (int) -1;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int cursor> = $i9;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int endpoint> = 0;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: java.lang.Object value> = null;

        goto label4;

     label2:
        $r10 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $i2 = $r10.<kodkod.util.ints.RangeSequence$Entry: int key>;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int cursor> = $i2;

        $r11 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $i3 = virtualinvoke $r11.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int endpoint> = $i3;

        $r12 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $r13 = $r12.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: java.lang.Object value> = $r13;

        goto label4;

     label3:
        $r15 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $i5 = $r15.<kodkod.util.ints.RangeSequence$Entry: int key>;

        $i6 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i5, i1);

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int cursor> = $i6;

        $r16 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $i7 = virtualinvoke $r16.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int endpoint> = $i7;

        $r17 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $r18 = $r17.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: java.lang.Object value> = $r18;

        $r19 = staticinvoke <kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree access$1(kodkod.util.ints.RangeSequence)>(r1);

        $r20 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $r21 = virtualinvoke $r19.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node predecessor(kodkod.util.ints.IntTree$Node)>($r20);

        $r22 = (kodkod.util.ints.RangeSequence$Entry) $r21;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next> = $r22;

     label4:
        return;
    }

    public boolean hasNext()
    {
        kodkod.util.ints.RangeSequence$Entry $r1, $r2, $r3, $r4, $r8, $r10;
        kodkod.util.ints.RangeSequence$DescendingIterator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        kodkod.util.ints.IntTree $r7;
        kodkod.util.ints.RangeSequence $r6;
        kodkod.util.ints.IntTree$Node $r9;
        java.lang.Object $r5;

        r0 := @this: kodkod.util.ints.RangeSequence$DescendingIterator;

        $i1 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int cursor>;

        $i0 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int endpoint>;

        if $i1 >= $i0 goto label2;

        $r1 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $i5 = $r2.<kodkod.util.ints.RangeSequence$Entry: int key>;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int cursor> = $i5;

        $r3 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $i6 = virtualinvoke $r3.<kodkod.util.ints.RangeSequence$Entry: int min()>();

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int endpoint> = $i6;

        $r4 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $r5 = $r4.<kodkod.util.ints.RangeSequence$Entry: java.lang.Object value>;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: java.lang.Object value> = $r5;

        $r6 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence this$0>;

        $r7 = staticinvoke <kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree access$1(kodkod.util.ints.RangeSequence)>($r6);

        $r8 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next>;

        $r9 = virtualinvoke $r7.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node predecessor(kodkod.util.ints.IntTree$Node)>($r8);

        $r10 = (kodkod.util.ints.RangeSequence$Entry) $r9;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next> = $r10;

     label2:
        $i2 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int index>;

        if $i2 <= -2147483648 goto label3;

        $i4 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int cursor>;

        $i3 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int endIndex>;

        if $i4 < $i3 goto label3;

        return 1;

     label3:
        return 0;
    }

    public kodkod.util.ints.IndexedEntry next()
    {
        kodkod.util.ints.RangeSequence$DescendingIterator r0;
        int $i0, $i1;
        java.util.NoSuchElementException $r1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.RangeSequence$DescendingIterator;

        $z0 = virtualinvoke r0.<kodkod.util.ints.RangeSequence$DescendingIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int cursor>;

        $i1 = $i0 - 1;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int cursor> = $i1;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int index> = $i0;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: boolean canRemove> = 1;

        return r0;
    }

    public void remove()
    {
        java.lang.IllegalStateException $r6;
        kodkod.util.ints.RangeSequence$Entry $r5;
        kodkod.util.ints.RangeSequence$DescendingIterator r0;
        kodkod.util.ints.RangeSequence $r1, $r2;
        kodkod.util.ints.IntTree$Node $r4;
        int $i0, $i1;
        kodkod.util.ints.IntTree $r3;
        boolean $z0;

        r0 := @this: kodkod.util.ints.RangeSequence$DescendingIterator;

        $z0 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: boolean canRemove>;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $r1 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence this$0>;

        $i0 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int index>;

        virtualinvoke $r1.<kodkod.util.ints.RangeSequence: java.lang.Object remove(int)>($i0);

        $r2 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence this$0>;

        $r3 = staticinvoke <kodkod.util.ints.RangeSequence: kodkod.util.ints.IntTree access$1(kodkod.util.ints.RangeSequence)>($r2);

        $i1 = r0.<kodkod.util.ints.RangeSequence$DescendingIterator: int cursor>;

        $r4 = virtualinvoke $r3.<kodkod.util.ints.IntTree: kodkod.util.ints.IntTree$Node searchLTE(int)>($i1);

        $r5 = (kodkod.util.ints.RangeSequence$Entry) $r4;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.RangeSequence$Entry next> = $r5;

        r0.<kodkod.util.ints.RangeSequence$DescendingIterator: boolean canRemove> = 0;

        return;
    }

    public volatile java.lang.Object next()
    {
        kodkod.util.ints.RangeSequence$DescendingIterator r0;
        kodkod.util.ints.IndexedEntry $r1;

        r0 := @this: kodkod.util.ints.RangeSequence$DescendingIterator;

        $r1 = virtualinvoke r0.<kodkod.util.ints.RangeSequence$DescendingIterator: kodkod.util.ints.IndexedEntry next()>();

        return $r1;
    }
}
