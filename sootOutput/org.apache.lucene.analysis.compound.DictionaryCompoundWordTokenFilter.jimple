public class org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter extends org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase
{

    public void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.util.CharArraySet)
    {
        org.apache.lucene.analysis.TokenStream r2;
        org.apache.lucene.analysis.util.CharArraySet r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.lucene.util.Version r1;
        org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter r0;

        r0 := @this: org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r3 := @parameter2: org.apache.lucene.analysis.util.CharArraySet;

        specialinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.util.CharArraySet)>(r1, r2, r3);

        if r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dictionary cannot be null");

        throw $r4;

     label1:
        return;
    }

    public void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.TokenStream, org.apache.lucene.analysis.util.CharArraySet, int, int, int, boolean)
    {
        org.apache.lucene.analysis.TokenStream r2;
        java.lang.IllegalArgumentException $r4;
        org.apache.lucene.util.Version r1;
        org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter r0;
        int i0, i1, i2;
        org.apache.lucene.analysis.util.CharArraySet r3;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r3 := @parameter2: org.apache.lucene.analysis.util.CharArraySet;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        z0 := @parameter6: boolean;

        specialinvoke r0.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.util.CharArraySet,int,int,int,boolean)>(r1, r2, r3, i0, i1, i2, z0);

        if r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dictionary cannot be null");

        throw $r4;

     label1:
        return;
    }

    protected void decompose()
    {
        org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken $r6, $r8, $r10, r11;
        java.util.LinkedList $r2, $r7;
        boolean $z0, $z1, $z2;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r1, $r3;
        java.lang.CharSequence $r9;
        org.apache.lucene.analysis.util.CharArraySet $r4;
        char[] $r5;

        r0 := @this: org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter;

        $r1 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $i0 = interfaceinvoke $r1.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        i6 = 0;

     label1:
        $i1 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: int minSubwordSize>;

        $i2 = $i0 - $i1;

        if i6 > $i2 goto label9;

        r11 = null;

        i7 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: int minSubwordSize>;

     label2:
        $i3 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: int maxSubwordSize>;

        if i7 > $i3 goto label7;

        $i4 = i6 + i7;

        if $i4 <= $i0 goto label3;

        goto label7;

     label3:
        $r4 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: org.apache.lucene.analysis.util.CharArraySet dictionary>;

        $r3 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r5 = interfaceinvoke $r3.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: char[] buffer()>();

        $z1 = virtualinvoke $r4.<org.apache.lucene.analysis.util.CharArraySet: boolean contains(char[],int,int)>($r5, i6, i7);

        if $z1 == 0 goto label6;

        $z2 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: boolean onlyLongestMatch>;

        if $z2 == 0 goto label5;

        if r11 == null goto label4;

        $r9 = r11.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: java.lang.CharSequence txt>;

        $i5 = interfaceinvoke $r9.<java.lang.CharSequence: int length()>();

        if $i5 >= i7 goto label6;

        $r10 = new org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken;

        specialinvoke $r10.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: void <init>(org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase,int,int)>(r0, i6, i7);

        r11 = $r10;

        goto label6;

     label4:
        $r8 = new org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken;

        specialinvoke $r8.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: void <init>(org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase,int,int)>(r0, i6, i7);

        r11 = $r8;

        goto label6;

     label5:
        $r7 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: java.util.LinkedList tokens>;

        $r6 = new org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken;

        specialinvoke $r6.<org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase$CompoundToken: void <init>(org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase,int,int)>(r0, i6, i7);

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

     label6:
        i7 = i7 + 1;

        goto label2;

     label7:
        $z0 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: boolean onlyLongestMatch>;

        if $z0 == 0 goto label8;

        if r11 == null goto label8;

        $r2 = r0.<org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter: java.util.LinkedList tokens>;

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r11);

     label8:
        i6 = i6 + 1;

        goto label1;

     label9:
        return;
    }
}
