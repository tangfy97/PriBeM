class bsh.BSHPrimarySuffix extends bsh.SimpleNode
{
    public static final int CLASS;
    public static final int INDEX;
    public static final int NAME;
    public static final int PROPERTY;
    public int operation;
    java.lang.Object index;
    public java.lang.String field;

    void <init>(int)
    {
        int i0;
        bsh.BSHPrimarySuffix r0;

        r0 := @this: bsh.BSHPrimarySuffix;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object doSuffix(java.lang.Object, boolean, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.SimpleNode $r8;
        bsh.LHS $r7;
        boolean $z0, $z1, z2, $z3, $z4;
        bsh.TargetError $r15;
        bsh.BSHPrimarySuffix r0;
        bsh.Interpreter r2;
        java.lang.reflect.InvocationTargetException $r14;
        bsh.InterpreterError $r6;
        java.lang.Throwable $r16;
        bsh.UtilEvalError $r23;
        bsh.CallStack r1;
        bsh.BSHType $r11;
        bsh.BSHAmbiguousName $r9;
        java.lang.StringBuffer $r19, $r20, $r21;
        int $i0, $i1;
        java.lang.String $r22;
        bsh.ReflectError $r17;
        bsh.EvalError $r10, $r13, $r18, $r24;
        java.lang.Object $r3, $r4, $r5, r25;
        java.lang.Class $r12;

        r0 := @this: bsh.BSHPrimarySuffix;

        r25 := @parameter0: java.lang.Object;

        z2 := @parameter1: boolean;

        r1 := @parameter2: bsh.CallStack;

        r2 := @parameter3: bsh.Interpreter;

        $i0 = r0.<bsh.BSHPrimarySuffix: int operation>;

        if $i0 != 0 goto label03;

        $z4 = r25 instanceof bsh.BSHType;

        if $z4 == 0 goto label02;

        if z2 == 0 goto label01;

        $r13 = new bsh.EvalError;

        specialinvoke $r13.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Can\'t assign .class", r0, r1);

        throw $r13;

     label01:
        virtualinvoke r1.<bsh.CallStack: bsh.NameSpace top()>();

        $r11 = (bsh.BSHType) r25;

        $r12 = virtualinvoke $r11.<bsh.BSHType: java.lang.Class getType(bsh.CallStack,bsh.Interpreter)>(r1, r2);

        return $r12;

     label02:
        $r10 = new bsh.EvalError;

        specialinvoke $r10.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Attempt to use .class suffix on non class.", r0, r1);

        throw $r10;

     label03:
        $z0 = r25 instanceof bsh.SimpleNode;

        if $z0 == 0 goto label05;

        $z3 = r25 instanceof bsh.BSHAmbiguousName;

        if $z3 == 0 goto label04;

        $r9 = (bsh.BSHAmbiguousName) r25;

        r25 = virtualinvoke $r9.<bsh.BSHAmbiguousName: java.lang.Object toObject(bsh.CallStack,bsh.Interpreter)>(r1, r2);

        goto label09;

     label04:
        $r8 = (bsh.SimpleNode) r25;

        r25 = virtualinvoke $r8.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r1, r2);

        goto label09;

     label05:
        $z1 = r25 instanceof bsh.LHS;

        if $z1 == 0 goto label09;

     label06:
        $r7 = (bsh.LHS) r25;

        r25 = virtualinvoke $r7.<bsh.LHS: java.lang.Object getValue()>();

     label07:
        goto label09;

     label08:
        $r23 := @caughtexception;

        $r24 = virtualinvoke $r23.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r1);

        throw $r24;

     label09:
        $i1 = r0.<bsh.BSHPrimarySuffix: int operation>;

        tableswitch($i1)
        {
            case 1: goto label10;
            case 2: goto label12;
            case 3: goto label14;
            default: goto label16;
        };

     label10:
        $r5 = specialinvoke r0.<bsh.BSHPrimarySuffix: java.lang.Object doIndex(java.lang.Object,boolean,bsh.CallStack,bsh.Interpreter)>(r25, z2, r1, r2);

     label11:
        return $r5;

     label12:
        $r4 = specialinvoke r0.<bsh.BSHPrimarySuffix: java.lang.Object doName(java.lang.Object,boolean,bsh.CallStack,bsh.Interpreter)>(r25, z2, r1, r2);

     label13:
        return $r4;

     label14:
        $r3 = specialinvoke r0.<bsh.BSHPrimarySuffix: java.lang.Object doProperty(boolean,java.lang.Object,bsh.CallStack,bsh.Interpreter)>(z2, r25, r1, r2);

     label15:
        return $r3;

     label16:
        $r6 = new bsh.InterpreterError;

        specialinvoke $r6.<bsh.InterpreterError: void <init>(java.lang.String)>("Unknown suffix type");

        throw $r6;

     label17:
        $r17 := @caughtexception;

        $r18 = new bsh.EvalError;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("reflection error: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r17);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r22, r0, r1);

        throw $r18;

     label18:
        $r14 := @caughtexception;

        $r15 = new bsh.TargetError;

        $r16 = virtualinvoke $r14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r15.<bsh.TargetError: void <init>(java.lang.String,java.lang.Throwable,bsh.SimpleNode,bsh.CallStack,boolean)>("target exception", $r16, r0, r1, 1);

        throw $r15;

        catch bsh.UtilEvalError from label06 to label07 with label08;
        catch bsh.ReflectError from label09 to label11 with label17;
        catch bsh.ReflectError from label12 to label13 with label17;
        catch bsh.ReflectError from label14 to label15 with label17;
        catch bsh.ReflectError from label16 to label17 with label17;
        catch java.lang.reflect.InvocationTargetException from label09 to label11 with label18;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label18;
        catch java.lang.reflect.InvocationTargetException from label14 to label15 with label18;
        catch java.lang.reflect.InvocationTargetException from label16 to label17 with label18;
    }

    private java.lang.Object doName(java.lang.Object, boolean, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError, bsh.ReflectError, java.lang.reflect.InvocationTargetException
    {
        bsh.LHS $r13;
        bsh.BSHArguments $r5;
        boolean $z0, z1, $z2, $z3, $z4, z5;
        bsh.TargetError $r26, $r34;
        bsh.BSHPrimarySuffix r0;
        bsh.Interpreter r4;
        java.lang.reflect.InvocationTargetException $r19;
        bsh.Node $r2;
        java.lang.Throwable $r25;
        java.lang.Object[] $r6;
        bsh.UtilEvalError $r17;
        bsh.CallStack r3;
        java.lang.StringBuffer $r20, $r21, $r23, $r29, $r30, $r32;
        int $i0, $i1;
        java.lang.String $r1, $r8, $r10, $r12, $r22, $r24, $r31, $r33;
        bsh.ReflectError $r27;
        bsh.EvalError $r16, $r18, $r28;
        bsh.Primitive $r15;
        java.lang.Object r7, $r9, $r11;
        java.lang.Class $r14;

        r0 := @this: bsh.BSHPrimarySuffix;

        r7 := @parameter0: java.lang.Object;

        z1 := @parameter1: boolean;

        r3 := @parameter2: bsh.CallStack;

        r4 := @parameter3: bsh.Interpreter;

     label01:
        $r1 = r0.<bsh.BSHPrimarySuffix: java.lang.String field>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("length");

        if $z0 == 0 goto label04;

        $r14 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r14.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label04;

        if z1 == 0 goto label02;

        $r16 = new bsh.EvalError;

        specialinvoke $r16.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Can\'t assign array length", r0, r3);

        throw $r16;

     label02:
        $r15 = new bsh.Primitive;

        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r7);

        specialinvoke $r15.<bsh.Primitive: void <init>(int)>($i1);

     label03:
        return $r15;

     label04:
        $i0 = virtualinvoke r0.<bsh.BSHPrimarySuffix: int jjtGetNumChildren()>();

        if $i0 != 0 goto label08;

        if z1 == 0 goto label06;

        $r12 = r0.<bsh.BSHPrimarySuffix: java.lang.String field>;

        $r13 = staticinvoke <bsh.Reflect: bsh.LHS getLHSObjectField(java.lang.Object,java.lang.String)>(r7, $r12);

     label05:
        return $r13;

     label06:
        $r10 = r0.<bsh.BSHPrimarySuffix: java.lang.String field>;

        $r11 = staticinvoke <bsh.Reflect: java.lang.Object getObjectFieldValue(java.lang.Object,java.lang.String)>(r7, $r10);

     label07:
        return $r11;

     label08:
        $r2 = virtualinvoke r0.<bsh.BSHPrimarySuffix: bsh.Node jjtGetChild(int)>(0);

        $r5 = (bsh.BSHArguments) $r2;

        $r6 = virtualinvoke $r5.<bsh.BSHArguments: java.lang.Object[] getArguments(bsh.CallStack,bsh.Interpreter)>(r3, r4);

     label09:
        $r8 = r0.<bsh.BSHPrimarySuffix: java.lang.String field>;

        $r9 = staticinvoke <bsh.Reflect: java.lang.Object invokeObjectMethod(java.lang.Object,java.lang.String,java.lang.Object[],bsh.Interpreter,bsh.CallStack,bsh.SimpleNode)>(r7, $r8, $r6, r4, r3, r0);

     label10:
        return $r9;

     label11:
        $r27 := @caughtexception;

        $r28 = new bsh.EvalError;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error in method invocation: ");

        $r31 = virtualinvoke $r27.<bsh.ReflectError: java.lang.String getMessage()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r28.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r33, r0, r3);

        throw $r28;

     label12:
        $r19 := @caughtexception;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method Invocation ");

        $r22 = r0.<bsh.BSHPrimarySuffix: java.lang.String field>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        $r25 = virtualinvoke $r19.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        z5 = 1;

        $z3 = $r25 instanceof bsh.EvalError;

        if $z3 == 0 goto label14;

        $z4 = $r25 instanceof bsh.TargetError;

        if $z4 == 0 goto label13;

        $r26 = (bsh.TargetError) $r25;

        z5 = virtualinvoke $r26.<bsh.TargetError: boolean inNativeCode()>();

        goto label14;

     label13:
        z5 = 0;

     label14:
        $r34 = new bsh.TargetError;

        specialinvoke $r34.<bsh.TargetError: void <init>(java.lang.String,java.lang.Throwable,bsh.SimpleNode,bsh.CallStack,boolean)>($r24, $r25, r0, r3, z5);

        throw $r34;

     label15:
        $r17 := @caughtexception;

        $r18 = virtualinvoke $r17.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r3);

        throw $r18;

        catch bsh.ReflectError from label09 to label10 with label11;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label12;
        catch bsh.UtilEvalError from label01 to label03 with label15;
        catch bsh.UtilEvalError from label04 to label05 with label15;
        catch bsh.UtilEvalError from label06 to label07 with label15;
        catch bsh.UtilEvalError from label08 to label10 with label15;
        catch bsh.UtilEvalError from label11 to label15 with label15;
    }

    static int getIndexAux(java.lang.Object, bsh.CallStack, bsh.Interpreter, bsh.SimpleNode) throws bsh.EvalError
    {
        bsh.UtilEvalError $r11;
        bsh.SimpleNode r2, $r6;
        bsh.CallStack r4;
        java.lang.StringBuffer $r12, $r13, $r14;
        int $i0;
        java.lang.String $r15;
        boolean $z0, $z1;
        bsh.EvalError $r10, $r16;
        bsh.Interpreter r5;
        bsh.Primitive $r8;
        java.lang.Object r0, $r7, r17;
        java.lang.Class $r1, $r9;
        bsh.Node $r3;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: bsh.CallStack;

        r5 := @parameter2: bsh.Interpreter;

        r2 := @parameter3: bsh.SimpleNode;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r10 = new bsh.EvalError;

        specialinvoke $r10.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Not an array", r2, r4);

        throw $r10;

     label1:
        $r3 = virtualinvoke r2.<bsh.SimpleNode: bsh.Node jjtGetChild(int)>(0);

        $r6 = (bsh.SimpleNode) $r3;

        $r7 = virtualinvoke $r6.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r4, r5);

        r17 = $r7;

        $z1 = $r7 instanceof bsh.Primitive;

        if $z1 != 0 goto label2;

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        r17 = staticinvoke <bsh.Types: java.lang.Object castObject(java.lang.Object,java.lang.Class,int)>($r7, $r9, 1);

     label2:
        $r8 = (bsh.Primitive) r17;

        $i0 = virtualinvoke $r8.<bsh.Primitive: int intValue()>();

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("doIndex: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r15);

        $r16 = virtualinvoke $r11.<bsh.UtilEvalError: bsh.EvalError toEvalError(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Arrays may only be indexed by integer types.", r2, r4);

        throw $r16;

     label5:
        return $i0;

        catch bsh.UtilEvalError from label1 to label3 with label4;
    }

    private java.lang.Object doIndex(java.lang.Object, boolean, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError, bsh.ReflectError
    {
        bsh.EvalError $r7;
        bsh.Interpreter r2;
        bsh.BSHPrimarySuffix r3;
        bsh.UtilEvalError $r6;
        bsh.CallStack r1;
        bsh.LHS $r5;
        int $i0;
        java.lang.Object r0, $r4;
        boolean z0;

        r3 := @this: bsh.BSHPrimarySuffix;

        r0 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r1 := @parameter2: bsh.CallStack;

        r2 := @parameter3: bsh.Interpreter;

        $i0 = staticinvoke <bsh.BSHPrimarySuffix: int getIndexAux(java.lang.Object,bsh.CallStack,bsh.Interpreter,bsh.SimpleNode)>(r0, r1, r2, r3);

        if z0 == 0 goto label1;

        $r5 = new bsh.LHS;

        specialinvoke $r5.<bsh.LHS: void <init>(java.lang.Object,int)>(r0, $i0);

        return $r5;

     label1:
        $r4 = staticinvoke <bsh.Reflect: java.lang.Object getIndex(java.lang.Object,int)>(r0, $i0);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r3, r1);

        throw $r7;

        catch bsh.UtilEvalError from label1 to label2 with label3;
    }

    private java.lang.Object doProperty(boolean, java.lang.Object, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.CollectionManager $r8;
        bsh.SimpleNode $r6;
        bsh.LHS $r12;
        boolean $z0, $z1, z2, $z3;
        bsh.BSHPrimarySuffix r2;
        bsh.Interpreter r5;
        bsh.Node $r3;
        bsh.UtilEvalError $r23;
        bsh.CallStack r4;
        java.lang.StringBuffer $r19, $r20, $r21, $r24, $r25, $r26;
        java.lang.String $r9, $r13, $r22, $r27;
        bsh.ReflectError $r17;
        bsh.EvalError $r14, $r15, $r16, $r18, $r28;
        bsh.Primitive $r1;
        java.lang.Object r0, $r7, $r10, $r11, $r29;

        r2 := @this: bsh.BSHPrimarySuffix;

        z2 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Object;

        r4 := @parameter2: bsh.CallStack;

        r5 := @parameter3: bsh.Interpreter;

        $r1 = <bsh.Primitive: bsh.Primitive VOID>;

        if r0 != $r1 goto label01;

        $r16 = new bsh.EvalError;

        specialinvoke $r16.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Attempt to access property on undefined variable or class name", r2, r4);

        throw $r16;

     label01:
        $z0 = r0 instanceof bsh.Primitive;

        if $z0 == 0 goto label02;

        $r15 = new bsh.EvalError;

        specialinvoke $r15.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Attempt to access property on a primitive", r2, r4);

        throw $r15;

     label02:
        $r3 = virtualinvoke r2.<bsh.BSHPrimarySuffix: bsh.Node jjtGetChild(int)>(0);

        $r6 = (bsh.SimpleNode) $r3;

        $r7 = virtualinvoke $r6.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r4, r5);

        $z1 = $r7 instanceof java.lang.String;

        if $z1 != 0 goto label03;

        $r14 = new bsh.EvalError;

        specialinvoke $r14.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Property expression must be a String or identifier.", r2, r4);

        throw $r14;

     label03:
        if z2 == 0 goto label04;

        $r12 = new bsh.LHS;

        $r13 = (java.lang.String) $r7;

        specialinvoke $r12.<bsh.LHS: void <init>(java.lang.Object,java.lang.String)>(r0, $r13);

        return $r12;

     label04:
        $r8 = staticinvoke <bsh.CollectionManager: bsh.CollectionManager getCollectionManager()>();

        $z3 = virtualinvoke $r8.<bsh.CollectionManager: boolean isMap(java.lang.Object)>(r0);

        if $z3 == 0 goto label07;

        $r11 = virtualinvoke $r8.<bsh.CollectionManager: java.lang.Object getFromMap(java.lang.Object,java.lang.Object)>(r0, $r7);

        if $r11 != null goto label05;

        $r29 = <bsh.Primitive: bsh.Primitive NULL>;

        goto label06;

     label05:
        $r29 = $r11;

     label06:
        return $r29;

     label07:
        $r9 = (java.lang.String) $r7;

        $r10 = staticinvoke <bsh.Reflect: java.lang.Object getObjectProperty(java.lang.Object,java.lang.String)>(r0, $r9);

     label08:
        return $r10;

     label09:
        $r23 := @caughtexception;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Property: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        $r28 = virtualinvoke $r23.<bsh.UtilEvalError: bsh.EvalError toEvalError(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r27, r2, r4);

        throw $r28;

     label10:
        $r17 := @caughtexception;

        $r18 = new bsh.EvalError;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No such property: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r22, r2, r4);

        throw $r18;

        catch bsh.UtilEvalError from label07 to label08 with label09;
        catch bsh.ReflectError from label07 to label08 with label10;
    }

    public static void <clinit>()
    {
        <bsh.BSHPrimarySuffix: int PROPERTY> = 3;

        <bsh.BSHPrimarySuffix: int NAME> = 2;

        <bsh.BSHPrimarySuffix: int INDEX> = 1;

        <bsh.BSHPrimarySuffix: int CLASS> = 0;

        return;
    }
}
