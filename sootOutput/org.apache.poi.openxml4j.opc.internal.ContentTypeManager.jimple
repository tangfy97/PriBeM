public abstract class org.apache.poi.openxml4j.opc.internal.ContentTypeManager extends java.lang.Object
{
    public static final java.lang.String CONTENT_TYPES_PART_NAME;
    public static final java.lang.String TYPES_NAMESPACE_URI;
    private static final java.lang.String TYPES_TAG_NAME;
    private static final java.lang.String DEFAULT_TAG_NAME;
    private static final java.lang.String EXTENSION_ATTRIBUTE_NAME;
    private static final java.lang.String CONTENT_TYPE_ATTRIBUTE_NAME;
    private static final java.lang.String OVERRIDE_TAG_NAME;
    private static final java.lang.String PART_NAME_ATTRIBUTE_NAME;
    protected org.apache.poi.openxml4j.opc.OPCPackage container;
    private java.util.TreeMap defaultContentType;
    private java.util.TreeMap overrideContentType;

    public void <init>(java.io.InputStream, org.apache.poi.openxml4j.opc.OPCPackage) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        java.util.TreeMap $r2;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r4, $r5;
        org.apache.poi.openxml4j.opc.OPCPackage r1;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r0;
        java.io.InputStream r3;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r3 := @parameter0: java.io.InputStream;

        r1 := @parameter1: org.apache.poi.openxml4j.opc.OPCPackage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: org.apache.poi.openxml4j.opc.OPCPackage container> = r1;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap defaultContentType> = $r2;

        if r3 == null goto label4;

     label1:
        specialinvoke r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void parseContentTypesFile(java.io.InputStream)>(r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        specialinvoke $r5.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>("Can\'t read content types part !");

        throw $r5;

     label4:
        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label1 to label2 with label3;
    }

    public void addContentType(org.apache.poi.openxml4j.opc.PackagePartName, java.lang.String)
    {
        org.apache.poi.openxml4j.opc.PackagePartName r0;
        java.util.TreeMap $r5, $r6;
        int $i0;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r3;
        java.lang.String $r1, $r2, r4;
        boolean $z0, $z1, z2;

        r3 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        r4 := @parameter1: java.lang.String;

        z2 = 0;

        $r1 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getExtension()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r5 = r3.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap defaultContentType>;

        $z0 = virtualinvoke $r5.<java.util.TreeMap: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r6 = r3.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap defaultContentType>;

        $z1 = virtualinvoke $r6.<java.util.TreeMap: boolean containsValue(java.lang.Object)>(r4);

        z2 = $z1;

        if $z1 != 0 goto label2;

     label1:
        specialinvoke r3.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void addOverrideContentType(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>(r0, r4);

        goto label3;

     label2:
        if z2 != 0 goto label3;

        specialinvoke r3.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void addDefaultContentType(java.lang.String,java.lang.String)>($r2, r4);

     label3:
        return;
    }

    private void addOverrideContentType(org.apache.poi.openxml4j.opc.PackagePartName, java.lang.String)
    {
        java.util.TreeMap $r1, $r4, $r5;
        org.apache.poi.openxml4j.opc.PackagePartName r2;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r0;
        java.lang.String r3;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r2 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        if $r1 != null goto label1;

        $r5 = new java.util.TreeMap;

        specialinvoke $r5.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType> = $r5;

     label1:
        $r4 = r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        virtualinvoke $r4.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    private void addDefaultContentType(java.lang.String, java.lang.String)
    {
        java.util.TreeMap $r2;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r0;
        java.lang.String r1, $r3, r4;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap defaultContentType>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r4);

        return;
    }

    public void removeContentType(org.apache.poi.openxml4j.opc.PackagePartName) throws org.apache.poi.openxml4j.exceptions.InvalidOperationException
    {
        org.apache.poi.openxml4j.opc.PackagePart r38, r39;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r32, $r35;
        org.apache.poi.openxml4j.opc.PackagePartName r0, $r10, $r11, $r16, $r25, $r26;
        org.apache.poi.openxml4j.exceptions.InvalidOperationException $r13, $r33, $r36;
        org.apache.poi.openxml4j.opc.OPCPackage $r4, $r5, $r6, $r21;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r1;
        java.lang.StringBuilder $r14, $r15, $r18;
        java.util.ArrayList $r7, $r22;
        java.lang.String $r3, $r12, $r17, $r19, $r27, $r34, $r37;
        java.util.Iterator $r8, $r23;
        java.lang.IllegalArgumentException $r31;
        java.util.TreeMap $r2, $r20, $r28, $r30;
        java.lang.Object $r9, $r24, $r29;

        r1 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        if r0 != null goto label01;

        $r31 = new java.lang.IllegalArgumentException;

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partName");

        throw $r31;

     label01:
        $r2 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        if $r2 == null goto label02;

        $r28 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        $r29 = virtualinvoke $r28.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r0);

        if $r29 == null goto label02;

        $r30 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        virtualinvoke $r30.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>(r0);

        return;

     label02:
        $r3 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getExtension()>();

        z5 = 1;

        $r4 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: org.apache.poi.openxml4j.opc.OPCPackage container>;

        if $r4 == null goto label08;

     label03:
        $r21 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: org.apache.poi.openxml4j.opc.OPCPackage container>;

        $r22 = virtualinvoke $r21.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.ArrayList getParts()>();

        $r23 = virtualinvoke $r22.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r38 = (org.apache.poi.openxml4j.opc.PackagePart) $r24;

        $r25 = virtualinvoke r38.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $z3 = virtualinvoke $r25.<org.apache.poi.openxml4j.opc.PackagePartName: boolean equals(java.lang.Object)>(r0);

        if $z3 != 0 goto label05;

        $r26 = virtualinvoke r38.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r27 = virtualinvoke $r26.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getExtension()>();

        $z4 = virtualinvoke $r27.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z4 == 0 goto label05;

        z5 = 0;

        goto label06;

     label05:
        goto label04;

     label06:
        goto label08;

     label07:
        $r35 := @caughtexception;

        $r36 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        $r37 = virtualinvoke $r35.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: java.lang.String getMessage()>();

        specialinvoke $r36.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>($r37);

        throw $r36;

     label08:
        if z5 == 0 goto label09;

        $r20 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap defaultContentType>;

        virtualinvoke $r20.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r3);

     label09:
        $r5 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: org.apache.poi.openxml4j.opc.OPCPackage container>;

        if $r5 == null goto label15;

     label10:
        $r6 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: org.apache.poi.openxml4j.opc.OPCPackage container>;

        $r7 = virtualinvoke $r6.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.ArrayList getParts()>();

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r39 = (org.apache.poi.openxml4j.opc.PackagePart) $r9;

        $r10 = virtualinvoke r39.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $z1 = virtualinvoke $r10.<org.apache.poi.openxml4j.opc.PackagePartName: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label12;

        $r11 = virtualinvoke r39.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r12 = virtualinvoke r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String getContentType(org.apache.poi.openxml4j.opc.PackagePartName)>($r11);

        if $r12 != null goto label12;

        $r13 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rule M2.4 is not respected: Nor a default element or override element is associated with the part: ");

        $r16 = virtualinvoke r39.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r17 = virtualinvoke $r16.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label12:
        goto label11;

     label13:
        goto label15;

     label14:
        $r32 := @caughtexception;

        $r33 = new org.apache.poi.openxml4j.exceptions.InvalidOperationException;

        $r34 = virtualinvoke $r32.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: java.lang.String getMessage()>();

        specialinvoke $r33.<org.apache.poi.openxml4j.exceptions.InvalidOperationException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label15:
        return;

        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label03 to label06 with label07;
        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label10 to label13 with label14;
    }

    public boolean isContentTypeRegister(java.lang.String)
    {
        java.util.Collection $r3, $r6;
        java.lang.IllegalArgumentException $r7;
        java.util.TreeMap $r2, $r4, $r5;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r1;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("contentType");

        throw $r7;

     label1:
        $r2 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap defaultContentType>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.Collection values()>();

        $z0 = interfaceinvoke $r3.<java.util.Collection: boolean contains(java.lang.Object)>(r0);

        if $z0 != 0 goto label2;

        $r4 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        if $r4 == null goto label3;

        $r5 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        $r6 = virtualinvoke $r5.<java.util.TreeMap: java.util.Collection values()>();

        $z1 = interfaceinvoke $r6.<java.util.Collection: boolean contains(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public java.lang.String getContentType(org.apache.poi.openxml4j.opc.PackagePartName)
    {
        org.apache.poi.openxml4j.opc.PackagePart $r8;
        java.lang.String $r3, $r4, $r12, $r16;
        boolean $z0, $z1;
        org.apache.poi.openxml4j.opc.PackagePartName r0;
        org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException $r9;
        java.lang.IllegalArgumentException $r17;
        java.util.TreeMap $r2, $r5, $r10, $r13, $r14;
        org.apache.poi.openxml4j.opc.OPCPackage $r6, $r7;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r1;
        java.lang.Object $r11, $r15;

        r1 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.PackagePartName;

        if r0 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partName");

        throw $r17;

     label1:
        $r2 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        if $r2 == null goto label2;

        $r13 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        $z1 = virtualinvoke $r13.<java.util.TreeMap: boolean containsKey(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r14 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        $r15 = virtualinvoke $r14.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r0);

        $r16 = (java.lang.String) $r15;

        return $r16;

     label2:
        $r3 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getExtension()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap defaultContentType>;

        $z0 = virtualinvoke $r5.<java.util.TreeMap: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r10 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap defaultContentType>;

        $r11 = virtualinvoke $r10.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r4);

        $r12 = (java.lang.String) $r11;

        return $r12;

     label3:
        $r6 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: org.apache.poi.openxml4j.opc.OPCPackage container>;

        if $r6 == null goto label4;

        $r7 = r1.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: org.apache.poi.openxml4j.opc.OPCPackage container>;

        $r8 = virtualinvoke $r7.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackagePartName)>(r0);

        if $r8 == null goto label4;

        $r9 = new org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException;

        specialinvoke $r9.<org.apache.poi.openxml4j.exceptions.OpenXML4JRuntimeException: void <init>(java.lang.String)>("Rule M2.4 exception : this error should NEVER happen, if so please send a mail to the developers team, thanks !");

        throw $r9;

     label4:
        return null;
    }

    public void clearAll()
    {
        java.util.TreeMap $r1, $r2, $r3;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r0;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        $r1 = r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap defaultContentType>;

        virtualinvoke $r1.<java.util.TreeMap: void clear()>();

        $r2 = r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        virtualinvoke $r3.<java.util.TreeMap: void clear()>();

     label1:
        return;
    }

    public void clearOverrideContentTypes()
    {
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r0;
        java.util.TreeMap $r1, $r2;

        r0 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        $r1 = r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        virtualinvoke $r2.<java.util.TreeMap: void clear()>();

     label1:
        return;
    }

    private void parseContentTypesFile(java.io.InputStream) throws org.apache.poi.openxml4j.exceptions.InvalidFormatException
    {
        java.net.URISyntaxException $r21;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node $r6, $r12;
        int $i0, $i1, i2, i3;
        java.net.URI $r7;
        java.lang.String $r8, $r10, $r13, $r14, $r17, $r20, $r23;
        org.w3c.dom.NodeList $r3, $r5;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r16, $r19, $r22;
        org.apache.poi.openxml4j.opc.PackagePartName $r9;
        java.io.IOException $r15;
        org.w3c.dom.Element $r2, $r4, r24, r25;
        org.xml.sax.SAXException $r18;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r11;
        java.io.InputStream r0;

        r11 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r0 := @parameter0: java.io.InputStream;

     label1:
        $r1 = staticinvoke <org.apache.poi.util.DocumentHelper: org.w3c.dom.Document readDocument(java.io.InputStream)>(r0);

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Default");

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        i2 = 0;

     label2:
        if i2 >= $i0 goto label3;

        $r12 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        r24 = (org.w3c.dom.Element) $r12;

        $r13 = interfaceinvoke r24.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("Extension");

        $r14 = interfaceinvoke r24.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("ContentType");

        specialinvoke r11.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void addDefaultContentType(java.lang.String,java.lang.String)>($r13, $r14);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r4 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Override");

        $i1 = interfaceinvoke $r5.<org.w3c.dom.NodeList: int getLength()>();

        i3 = 0;

     label4:
        if i3 >= $i1 goto label5;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r25 = (org.w3c.dom.Element) $r6;

        $r7 = new java.net.URI;

        $r8 = interfaceinvoke r25.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("PartName");

        specialinvoke $r7.<java.net.URI: void <init>(java.lang.String)>($r8);

        $r9 = staticinvoke <org.apache.poi.openxml4j.opc.PackagingURIHelper: org.apache.poi.openxml4j.opc.PackagePartName createPartName(java.net.URI)>($r7);

        $r10 = interfaceinvoke r25.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("ContentType");

        specialinvoke r11.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void addOverrideContentType(org.apache.poi.openxml4j.opc.PackagePartName,java.lang.String)>($r9, $r10);

        i3 = i3 + 1;

        goto label4;

     label5:
        goto label9;

     label6:
        $r21 := @caughtexception;

        $r22 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r23 = virtualinvoke $r21.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke $r22.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label7:
        $r18 := @caughtexception;

        $r19 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r20 = virtualinvoke $r18.<org.xml.sax.SAXException: java.lang.String getMessage()>();

        specialinvoke $r19.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label8:
        $r15 := @caughtexception;

        $r16 = new org.apache.poi.openxml4j.exceptions.InvalidFormatException;

        $r17 = virtualinvoke $r15.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r16.<org.apache.poi.openxml4j.exceptions.InvalidFormatException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label9:
        return;

        catch java.net.URISyntaxException from label1 to label5 with label6;
        catch org.xml.sax.SAXException from label1 to label5 with label7;
        catch java.io.IOException from label1 to label5 with label8;
    }

    public boolean save(java.io.OutputStream)
    {
        org.w3c.dom.Document $r0;
        boolean $z0, $z1, $z2;
        java.io.OutputStream r7;
        java.util.Map$Entry r13, r14;
        java.util.Iterator $r5, $r10;
        java.util.Set $r4, $r9;
        org.w3c.dom.Element $r1;
        java.util.TreeMap $r3, $r6, $r8;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r2;
        java.lang.Object $r11, $r12;

        r2 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r7 := @parameter0: java.io.OutputStream;

        $r0 = staticinvoke <org.apache.poi.util.DocumentHelper: org.w3c.dom.Document createDocument()>();

        $r1 = interfaceinvoke $r0.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://schemas.openxmlformats.org/package/2006/content-types", "Types");

        interfaceinvoke $r0.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r1);

        $r3 = r2.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap defaultContentType>;

        $r4 = virtualinvoke $r3.<java.util.TreeMap: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r12;

        specialinvoke r2.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void appendDefaultType(org.w3c.dom.Element,java.util.Map$Entry)>($r1, r13);

        goto label1;

     label2:
        $r6 = r2.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        if $r6 == null goto label4;

        $r8 = r2.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.util.TreeMap overrideContentType>;

        $r9 = virtualinvoke $r8.<java.util.TreeMap: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r11;

        specialinvoke r2.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: void appendSpecificTypes(org.w3c.dom.Element,java.util.Map$Entry)>($r1, r14);

        goto label3;

     label4:
        interfaceinvoke $r0.<org.w3c.dom.Document: void normalize()>();

        $z1 = virtualinvoke r2.<org.apache.poi.openxml4j.opc.internal.ContentTypeManager: boolean saveImpl(org.w3c.dom.Document,java.io.OutputStream)>($r0, r7);

        return $z1;
    }

    private void appendSpecificTypes(org.w3c.dom.Element, java.util.Map$Entry)
    {
        java.util.Map$Entry r3;
        org.apache.poi.openxml4j.opc.PackagePartName $r5;
        org.w3c.dom.Element r0, $r2;
        org.w3c.dom.Document $r1;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r9;
        java.lang.Object $r4, $r7;
        java.lang.String $r6, $r8;

        r9 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r0 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("Override");

        $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = (org.apache.poi.openxml4j.opc.PackagePartName) $r4;

        $r6 = virtualinvoke $r5.<org.apache.poi.openxml4j.opc.PackagePartName: java.lang.String getName()>();

        interfaceinvoke $r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("PartName", $r6);

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.String) $r7;

        interfaceinvoke $r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("ContentType", $r8);

        interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        return;
    }

    private void appendDefaultType(org.w3c.dom.Element, java.util.Map$Entry)
    {
        java.util.Map$Entry r3;
        org.w3c.dom.Element r0, $r2;
        org.w3c.dom.Document $r1;
        org.apache.poi.openxml4j.opc.internal.ContentTypeManager r8;
        java.lang.Object $r4, $r6;
        java.lang.String $r5, $r7;

        r8 := @this: org.apache.poi.openxml4j.opc.internal.ContentTypeManager;

        r0 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("Default");

        $r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = (java.lang.String) $r4;

        interfaceinvoke $r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("Extension", $r5);

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.String) $r6;

        interfaceinvoke $r2.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("ContentType", $r7);

        interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        return;
    }

    public abstract boolean saveImpl(org.w3c.dom.Document, java.io.OutputStream);

    public static void <clinit>()
    {
        <org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String PART_NAME_ATTRIBUTE_NAME> = "PartName";

        <org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String OVERRIDE_TAG_NAME> = "Override";

        <org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String CONTENT_TYPE_ATTRIBUTE_NAME> = "ContentType";

        <org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String EXTENSION_ATTRIBUTE_NAME> = "Extension";

        <org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String DEFAULT_TAG_NAME> = "Default";

        <org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String TYPES_TAG_NAME> = "Types";

        <org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String TYPES_NAMESPACE_URI> = "http://schemas.openxmlformats.org/package/2006/content-types";

        <org.apache.poi.openxml4j.opc.internal.ContentTypeManager: java.lang.String CONTENT_TYPES_PART_NAME> = "[Content_Types].xml";

        return;
    }
}
