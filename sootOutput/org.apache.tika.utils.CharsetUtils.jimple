public class org.apache.tika.utils.CharsetUtils extends java.lang.Object
{
    private static final java.util.regex.Pattern CHARSET_NAME_PATTERN;
    private static final java.util.regex.Pattern ISO_NAME_PATTERN;
    private static final java.util.regex.Pattern CP_NAME_PATTERN;
    private static final java.util.regex.Pattern WIN_NAME_PATTERN;
    private static final java.util.Map COMMON_CHARSETS;
    private static java.lang.reflect.Method getCharsetICU;
    private static java.lang.reflect.Method isSupportedICU;

    public void <init>()
    {
        org.apache.tika.utils.CharsetUtils r0;

        r0 := @this: org.apache.tika.utils.CharsetUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static transient java.util.Map initCommonCharsets(java.lang.String[])
    {
        java.util.HashMap $r0;
        java.lang.String[] r1;
        java.nio.charset.Charset $r3;
        java.util.Locale $r4, $r11;
        java.util.Map $r5, $r12;
        int i0, i1;
        java.lang.String r2, $r6, r10, $r13;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.Set $r7;
        java.lang.Exception $r14;
        java.lang.Object $r9;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r2 = r1[i1];

     label2:
        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r2);

        $r5 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r3);

        $r7 = virtualinvoke $r3.<java.nio.charset.Charset: java.util.Set aliases()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $r12 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r11 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r13 = virtualinvoke r10.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r11);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r3);

        goto label3;

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return $r0;

        catch java.lang.Exception from label2 to label4 with label5;
    }

    public static boolean isSupported(java.lang.String)
    {
        java.lang.Object[] $r2;
        java.lang.IllegalArgumentException $r7;
        java.lang.Exception $r6;
        java.lang.Boolean $r5;
        java.lang.Object $r4;
        java.nio.charset.IllegalCharsetNameException $r8;
        java.lang.String r1;
        java.lang.reflect.Method $r0, $r3;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = <org.apache.tika.utils.CharsetUtils: java.lang.reflect.Method isSupportedICU>;

        if $r0 == null goto label3;

        $r3 = <org.apache.tika.utils.CharsetUtils: java.lang.reflect.Method isSupportedICU>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

     label2:
        return 1;

     label3:
        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r1);

     label4:
        return $z0;

     label5:
        $r8 := @caughtexception;

        return 0;

     label6:
        $r7 := @caughtexception;

        return 0;

     label7:
        $r6 := @caughtexception;

        return 0;

        catch java.nio.charset.IllegalCharsetNameException from label1 to label2 with label5;
        catch java.nio.charset.IllegalCharsetNameException from label3 to label4 with label5;
        catch java.lang.IllegalArgumentException from label1 to label2 with label6;
        catch java.lang.IllegalArgumentException from label3 to label4 with label6;
        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
    }

    public static java.lang.String clean(java.lang.String)
    {
        java.nio.charset.Charset $r1;
        java.lang.String r0, $r2;
        java.lang.Exception $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <org.apache.tika.utils.CharsetUtils: java.nio.charset.Charset forName(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.nio.charset.Charset: java.lang.String name()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.nio.charset.Charset forName(java.lang.String)
    {
        java.util.regex.Matcher $r1, $r11, $r13, $r15;
        java.util.Locale $r3;
        java.util.Map $r5, $r25, $r32, $r39;
        java.lang.reflect.Method $r16, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Exception $r43;
        java.lang.StringBuilder $r20, $r21, $r23, $r27, $r28, $r30, $r34, $r35, $r37;
        java.util.regex.Pattern $r0, $r10, $r12, $r14;
        java.lang.Object[] $r17;
        java.nio.charset.Charset r46, r47, $r48;
        java.nio.charset.IllegalCharsetNameException $r8, $r41;
        java.lang.String $r2, $r4, $r7, $r9, $r22, $r24, $r29, $r31, $r36, $r38, r44, r45;
        java.lang.IllegalArgumentException $r42;
        java.lang.Object $r6, $r19, $r26, $r33, $r40;

        r44 := @parameter0: java.lang.String;

        if r44 != null goto label01;

        $r42 = new java.lang.IllegalArgumentException;

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r42;

     label01:
        $r0 = <org.apache.tika.utils.CharsetUtils: java.util.regex.Pattern CHARSET_NAME_PATTERN>;

        $r1 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r44);

        $z0 = virtualinvoke $r1.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label02;

        $r41 = new java.nio.charset.IllegalCharsetNameException;

        specialinvoke $r41.<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>(r44);

        throw $r41;

     label02:
        $r2 = virtualinvoke $r1.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        r45 = $r2;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $r5 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r46 = (java.nio.charset.Charset) $r6;

        if r46 == null goto label03;

        return r46;

     label03:
        $r7 = "none";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label04;

        $r9 = "no";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label05;

     label04:
        $r8 = new java.nio.charset.IllegalCharsetNameException;

        specialinvoke $r8.<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>($r2);

        throw $r8;

     label05:
        $r10 = <org.apache.tika.utils.CharsetUtils: java.util.regex.Pattern ISO_NAME_PATTERN>;

        $r11 = virtualinvoke $r10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $r12 = <org.apache.tika.utils.CharsetUtils: java.util.regex.Pattern CP_NAME_PATTERN>;

        $r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $r14 = <org.apache.tika.utils.CharsetUtils: java.util.regex.Pattern WIN_NAME_PATTERN>;

        $r15 = virtualinvoke $r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $z3 = virtualinvoke $r11.<java.util.regex.Matcher: boolean matches()>();

        if $z3 == 0 goto label06;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iso-8859-");

        $r36 = virtualinvoke $r11.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        r45 = $r38;

        $r39 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r40 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>($r38);

        r46 = (java.nio.charset.Charset) $r40;

        goto label08;

     label06:
        $z4 = virtualinvoke $r13.<java.util.regex.Matcher: boolean matches()>();

        if $z4 == 0 goto label07;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cp");

        $r29 = virtualinvoke $r13.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        r45 = $r31;

        $r32 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r33 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>($r31);

        r46 = (java.nio.charset.Charset) $r33;

        goto label08;

     label07:
        $z5 = virtualinvoke $r15.<java.util.regex.Matcher: boolean matches()>();

        if $z5 == 0 goto label08;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("windows-");

        $r22 = virtualinvoke $r15.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        r45 = $r24;

        $r25 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        r46 = (java.nio.charset.Charset) $r26;

     label08:
        if r46 == null goto label09;

        return r46;

     label09:
        $r16 = <org.apache.tika.utils.CharsetUtils: java.lang.reflect.Method getCharsetICU>;

        if $r16 == null goto label14;

     label10:
        $r18 = <org.apache.tika.utils.CharsetUtils: java.lang.reflect.Method getCharsetICU>;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r45;

        $r19 = virtualinvoke $r18.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r17);

        r47 = (java.nio.charset.Charset) $r19;

        if r47 == null goto label12;

     label11:
        return r47;

     label12:
        goto label14;

     label13:
        $r43 := @caughtexception;

     label14:
        $r48 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r45);

        return $r48;

        catch java.lang.Exception from label10 to label11 with label13;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r21, $r22;
        java.util.HashMap $r4;
        java.lang.String[] $r5;
        java.util.Map $r6, $r7, $r9, $r10, $r12, $r13;
        java.lang.reflect.Method $r18, $r20;
        java.lang.Class[] $r17, $r19;
        java.lang.RuntimeException $r23;
        java.lang.Object $r8, $r11, $r14;
        java.lang.Class $r15, r25;
        java.lang.ClassNotFoundException $r24;
        java.util.regex.Pattern $r0, $r1, $r2, $r3;
        java.lang.ClassLoader $r16;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[ \\\"]*([^ >,;\\\"]+).*");

        <org.apache.tika.utils.CharsetUtils: java.util.regex.Pattern CHARSET_NAME_PATTERN> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".*8859-(\\d+)");

        <org.apache.tika.utils.CharsetUtils: java.util.regex.Pattern ISO_NAME_PATTERN> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("cp-(\\d+)");

        <org.apache.tika.utils.CharsetUtils: java.util.regex.Pattern CP_NAME_PATTERN> = $r2;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("win-?(\\d+)");

        <org.apache.tika.utils.CharsetUtils: java.util.regex.Pattern WIN_NAME_PATTERN> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS> = $r4;

        <org.apache.tika.utils.CharsetUtils: java.lang.reflect.Method getCharsetICU> = null;

        <org.apache.tika.utils.CharsetUtils: java.lang.reflect.Method isSupportedICU> = null;

        $r5 = newarray (java.lang.String)[32];

        $r5[0] = "Big5";

        $r5[1] = "EUC-JP";

        $r5[2] = "EUC-KR";

        $r5[3] = "x-EUC-TW";

        $r5[4] = "GB18030";

        $r5[5] = "IBM855";

        $r5[6] = "IBM866";

        $r5[7] = "ISO-2022-CN";

        $r5[8] = "ISO-2022-JP";

        $r5[9] = "ISO-2022-KR";

        $r5[10] = "ISO-8859-1";

        $r5[11] = "ISO-8859-2";

        $r5[12] = "ISO-8859-3";

        $r5[13] = "ISO-8859-4";

        $r5[14] = "ISO-8859-5";

        $r5[15] = "ISO-8859-6";

        $r5[16] = "ISO-8859-7";

        $r5[17] = "ISO-8859-8";

        $r5[18] = "ISO-8859-9";

        $r5[19] = "ISO-8859-11";

        $r5[20] = "ISO-8859-13";

        $r5[21] = "ISO-8859-15";

        $r5[22] = "KOI8-R";

        $r5[23] = "x-MacCyrillic";

        $r5[24] = "SHIFT_JIS";

        $r5[25] = "UTF-8";

        $r5[26] = "UTF-16BE";

        $r5[27] = "UTF-16LE";

        $r5[28] = "windows-1251";

        $r5[29] = "windows-1252";

        $r5[30] = "windows-1253";

        $r5[31] = "windows-1255";

        staticinvoke <org.apache.tika.utils.CharsetUtils: java.util.Map initCommonCharsets(java.lang.String[])>($r5);

        $r7 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r6 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("iso-8859-1");

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("iso-8851-1", $r8);

        $r10 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r9 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>("windows-1252");

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("windows", $r11);

        $r13 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r12 = <org.apache.tika.utils.CharsetUtils: java.util.Map COMMON_CHARSETS>;

        $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>("koi8-r");

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("koi8r", $r14);

        r25 = null;

     label01:
        $r15 = class "Lorg/apache/tika/utils/CharsetUtils;";

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r25 = virtualinvoke $r16.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("com.ibm.icu.charset.CharsetICU");

     label02:
        goto label04;

     label03:
        $r24 := @caughtexception;

     label04:
        if r25 == null goto label11;

     label05:
        $r17 = newarray (java.lang.Class)[1];

        $r17[0] = class "Ljava/lang/String;";

        $r18 = virtualinvoke r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("forNameICU", $r17);

        <org.apache.tika.utils.CharsetUtils: java.lang.reflect.Method getCharsetICU> = $r18;

     label06:
        goto label08;

     label07:
        $r22 := @caughtexception;

        $r23 = new java.lang.RuntimeException;

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r22);

        throw $r23;

     label08:
        $r19 = newarray (java.lang.Class)[1];

        $r19[0] = class "Ljava/lang/String;";

        $r20 = virtualinvoke r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isSupported", $r19);

        <org.apache.tika.utils.CharsetUtils: java.lang.reflect.Method isSupportedICU> = $r20;

     label09:
        goto label11;

     label10:
        $r21 := @caughtexception;

     label11:
        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
}
