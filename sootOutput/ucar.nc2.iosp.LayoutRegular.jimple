public class ucar.nc2.iosp.LayoutRegular extends java.lang.Object implements ucar.nc2.iosp.Layout
{
    private ucar.nc2.iosp.IndexChunker chunker;
    private long startPos;
    private int elemSize;
    static final boolean $assertionsDisabled;

    public void <init>(long, int, int[], ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        ucar.nc2.iosp.LayoutRegular r0;
        ucar.ma2.Section r3;
        ucar.nc2.iosp.IndexChunker $r8;
        long l0;
        java.lang.AssertionError $r6, $r7;
        byte $b2;
        int[] r2;
        int i1, $i3;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.iosp.LayoutRegular;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r2 := @parameter2: int[];

        r3 := @parameter3: ucar.ma2.Section;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <ucar.nc2.iosp.LayoutRegular: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b2 = l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $z1 = <ucar.nc2.iosp.LayoutRegular: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i1 > 0 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        r0.<ucar.nc2.iosp.LayoutRegular: long startPos> = l0;

        r0.<ucar.nc2.iosp.LayoutRegular: int elemSize> = i1;

        $r8 = new ucar.nc2.iosp.IndexChunker;

        specialinvoke $r8.<ucar.nc2.iosp.IndexChunker: void <init>(int[],ucar.ma2.Section)>(r2, r3);

        r0.<ucar.nc2.iosp.LayoutRegular: ucar.nc2.iosp.IndexChunker chunker> = $r8;

        return;
    }

    public long getTotalNelems()
    {
        ucar.nc2.iosp.IndexChunker $r1;
        long $l0;
        ucar.nc2.iosp.LayoutRegular r0;

        r0 := @this: ucar.nc2.iosp.LayoutRegular;

        $r1 = r0.<ucar.nc2.iosp.LayoutRegular: ucar.nc2.iosp.IndexChunker chunker>;

        $l0 = virtualinvoke $r1.<ucar.nc2.iosp.IndexChunker: long getTotalNelems()>();

        return $l0;
    }

    public int getElemSize()
    {
        int $i0;
        ucar.nc2.iosp.LayoutRegular r0;

        r0 := @this: ucar.nc2.iosp.LayoutRegular;

        $i0 = r0.<ucar.nc2.iosp.LayoutRegular: int elemSize>;

        return $i0;
    }

    public boolean hasNext()
    {
        ucar.nc2.iosp.IndexChunker $r1;
        ucar.nc2.iosp.LayoutRegular r0;
        boolean $z0;

        r0 := @this: ucar.nc2.iosp.LayoutRegular;

        $r1 = r0.<ucar.nc2.iosp.LayoutRegular: ucar.nc2.iosp.IndexChunker chunker>;

        $z0 = virtualinvoke $r1.<ucar.nc2.iosp.IndexChunker: boolean hasNext()>();

        return $z0;
    }

    public ucar.nc2.iosp.Layout$Chunk next()
    {
        ucar.nc2.iosp.LayoutRegular r0;
        ucar.nc2.iosp.IndexChunker$Chunk $r2;
        ucar.nc2.iosp.IndexChunker $r1;
        long $l0, $l1, $l3, $l4, $l5;
        int $i2;

        r0 := @this: ucar.nc2.iosp.LayoutRegular;

        $r1 = r0.<ucar.nc2.iosp.LayoutRegular: ucar.nc2.iosp.IndexChunker chunker>;

        $r2 = virtualinvoke $r1.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexChunker$Chunk next()>();

        $l0 = r0.<ucar.nc2.iosp.LayoutRegular: long startPos>;

        $l1 = virtualinvoke $r2.<ucar.nc2.iosp.IndexChunker$Chunk: long getSrcElem()>();

        $i2 = r0.<ucar.nc2.iosp.LayoutRegular: int elemSize>;

        $l3 = (long) $i2;

        $l4 = $l1 * $l3;

        $l5 = $l0 + $l4;

        virtualinvoke $r2.<ucar.nc2.iosp.IndexChunker$Chunk: void setSrcPos(long)>($l5);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/iosp/LayoutRegular;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.LayoutRegular: boolean $assertionsDisabled> = $z1;

        return;
    }
}
