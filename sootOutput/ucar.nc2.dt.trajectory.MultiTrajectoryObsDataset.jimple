public class ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset extends ucar.nc2.dt.TypedDatasetImpl implements ucar.nc2.dt.TrajectoryObsDataset
{
    protected ucar.nc2.Dimension trajDim;
    protected ucar.nc2.Variable trajVar;
    protected ucar.nc2.Dimension timeDim;
    protected ucar.nc2.Variable timeVar;
    protected ucar.nc2.Structure recordVar;
    protected ucar.nc2.Variable latVar;
    protected ucar.nc2.Variable lonVar;
    protected ucar.nc2.Variable elevVar;
    protected java.lang.String timeVarUnitsString;
    protected double elevVarUnitsConversionFactor;
    protected java.util.List trajectoryIds;
    protected java.util.List trajectories;
    protected java.util.HashMap trajectoriesMap;
    protected int trajectoryNumPoint;
    protected java.util.HashMap trajectoryVarsMap;

    public void <init>()
    {
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        specialinvoke r0.<ucar.nc2.dt.TypedDatasetImpl: void <init>()>();

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Structure recordVar> = null;

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r0;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        specialinvoke r0.<ucar.nc2.dt.TypedDatasetImpl: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Structure recordVar> = null;

        return;
    }

    public void setTrajectoryInfo(ucar.nc2.Dimension, ucar.nc2.Variable, ucar.nc2.Dimension, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable) throws java.io.IOException
    {
        ucar.nc2.Attribute $r10, $r15, $r18, $r21, $r195, $r200, $r205, $r248, $r249, $r250;
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset$MyTypedDataVariable $r253;
        ucar.ma2.Array $r31, $r33, $r220;
        ucar.ma2.InvalidRangeException $r170, $r177;
        ucar.nc2.dataset.VariableDS $r252;
        ucar.ma2.DataType $r35, $r36, $r38, $r39, $r41, $r42, $r49, $r68, $r69, $r71, $r72, $r74, $r75, $r77, $r78, $r86;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i13, $i14;
        java.lang.Exception $r184;
        java.util.ArrayList $r258, $r259, $r270, $r271;
        java.lang.String $r11, $r12, $r16, $r19, $r22, $r46, $r50, $r53, $r59, $r65, $r82, $r87, $r90, $r101, $r107, $r113, $r119, $r131, $r132, $r134, $r136, $r150, $r156, $r162, $r166, $r169, $r174, $r176, $r181, $r183, $r190, $r193, $r198, $r203, r212, r213, r222, $r228;
        ucar.nc2.Dimension r1, r3, $r8, $r139;
        ucar.nc2.dataset.NetcdfDataset $r23, $r25, $r138, $r140, $r141, $r207;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        ucar.ma2.Range $r254, $r255;
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r0;
        java.util.List $r129, $r209, $r232, $r234, $r235;
        double $d0, $d1, $d2, $d3;
        ucar.nc2.StructurePseudo $r247;
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset$MultiTrajectory $r275;
        byte $b12;
        java.lang.StringBuilder $r44, $r47, $r48, $r51, $r52, $r57, $r58, $r60, $r63, $r64, $r66, $r80, $r83, $r84, $r88, $r89, $r99, $r100, $r102, $r105, $r106, $r108, $r111, $r112, $r114, $r117, $r118, $r120, $r147, $r148, $r149, $r153, $r154, $r155, $r159, $r160, $r161, $r165, $r167, $r168, $r173, $r175, $r180, $r182, $r187, $r188, $r189, $r237, $r239, $r241, $r243, $r245, $r256, $r260, $r262, $r263, $r264, $r265, $r266, $r267, $r268, $r273;
        long $l10, $l11;
        java.io.IOException $r257, $r261;
        ucar.ma2.Index $r56, $r62, $r92, $r93, $r94, $r95, $r98, $r104, $r110, $r116, $r221;
        java.util.Date $r13, $r214, $r215, $r224, $r225;
        ucar.nc2.Variable r2, r4, r5, r6, r7, $r9, $r14, $r17, $r20, $r30, $r32, $r34, $r37, $r40, $r45, $r67, $r70, $r73, $r76, $r81, $r85, $r122, $r123, $r124, $r143, $r192, $r194, $r197, $r199, $r202, $r204, r211, $r219, $r226, $r227, $r229, $r230, $r231;
        java.lang.Object $r96, $r121;
        ucar.nc2.Group $r142, $r208;
        ucar.nc2.Structure $r125, $r126, $r144, $r191, $r196, $r201;
        java.lang.IllegalStateException $r274;
        float $f0, $f1, $f2;
        java.util.HashMap $r130, $r233, $r236, $r251, $r272;
        java.util.Iterator $r210;
        java.lang.IllegalArgumentException $r238, $r240, $r242, $r244, $r246, $r269;

        r0 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        r1 := @parameter0: ucar.nc2.Dimension;

        r2 := @parameter1: ucar.nc2.Variable;

        r3 := @parameter2: ucar.nc2.Dimension;

        r4 := @parameter3: ucar.nc2.Variable;

        r5 := @parameter4: ucar.nc2.Variable;

        r6 := @parameter5: ucar.nc2.Variable;

        r7 := @parameter6: ucar.nc2.Variable;

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Dimension trajDim> = r1;

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable trajVar> = r2;

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Dimension timeDim> = r3;

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable timeVar> = r4;

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable latVar> = r5;

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable lonVar> = r6;

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable elevVar> = r7;

        $r8 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Dimension timeDim>;

        $i0 = virtualinvoke $r8.<ucar.nc2.Dimension: int getLength()>();

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: int trajectoryNumPoint> = $i0;

        $r9 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r10 = virtualinvoke $r9.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        $r11 = virtualinvoke $r10.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.lang.String timeVarUnitsString> = $r11;

        $r12 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r13 = staticinvoke <ucar.nc2.units.DateUnit: java.util.Date getStandardDate(java.lang.String)>($r12);

        if $r13 != null goto label01;

        $r238 = new java.lang.IllegalArgumentException;

        $r237 = new java.lang.StringBuilder;

        specialinvoke $r237.<java.lang.StringBuilder: void <init>()>();

        $r165 = virtualinvoke $r237.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Units of time variable <");

        $r166 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r167 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r166);

        $r168 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not a date unit.");

        $r169 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r238.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r169);

        throw $r238;

     label01:
        $r14 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable latVar>;

        $r15 = virtualinvoke $r14.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        $r16 = virtualinvoke $r15.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z0 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r16, "degrees_north");

        if $z0 != 0 goto label02;

        $r240 = new java.lang.IllegalArgumentException;

        $r239 = new java.lang.StringBuilder;

        specialinvoke $r239.<java.lang.StringBuilder: void <init>()>();

        $r159 = virtualinvoke $r239.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Units of lat var <");

        $r160 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r161 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not compatible with \"degrees_north\".");

        $r162 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r240.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r162);

        throw $r240;

     label02:
        $r17 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable lonVar>;

        $r18 = virtualinvoke $r17.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        $r19 = virtualinvoke $r18.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z1 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r19, "degrees_east");

        if $z1 != 0 goto label03;

        $r242 = new java.lang.IllegalArgumentException;

        $r241 = new java.lang.StringBuilder;

        specialinvoke $r241.<java.lang.StringBuilder: void <init>()>();

        $r153 = virtualinvoke $r241.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Units of lon var <");

        $r154 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r155 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not compatible with \"degrees_east\".");

        $r156 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r242.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r156);

        throw $r242;

     label03:
        $r20 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable elevVar>;

        $r21 = virtualinvoke $r20.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        $r22 = virtualinvoke $r21.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z2 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r22, "meters");

        if $z2 != 0 goto label04;

        $r244 = new java.lang.IllegalArgumentException;

        $r243 = new java.lang.StringBuilder;

        specialinvoke $r243.<java.lang.StringBuilder: void <init>()>();

        $r147 = virtualinvoke $r243.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Units of elev var <");

        $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r149 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not compatible with \"meters\".");

        $r150 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r244.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r150);

        throw $r244;

     label04:
        $d0 = staticinvoke <ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: double getMetersConversionFactor(java.lang.String)>($r22);

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: double elevVarUnitsConversionFactor> = $d0;

     label05:
        goto label07;

     label06:
        $r184 := @caughtexception;

        $r246 = new java.lang.IllegalArgumentException;

        $r245 = new java.lang.StringBuilder;

        specialinvoke $r245.<java.lang.StringBuilder: void <init>()>();

        $r187 = virtualinvoke $r245.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception on getMetersConversionFactor() for the units of elev var <");

        $r188 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r189 = virtualinvoke $r188.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r190 = virtualinvoke $r189.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r246.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r190);

        throw $r246;

     label07:
        $r23 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $z3 = virtualinvoke $r23.<ucar.nc2.dataset.NetcdfDataset: boolean hasUnlimitedDimension()>();

        if $z3 == 0 goto label08;

        $r138 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r139 = virtualinvoke $r138.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Dimension getUnlimitedDimension()>();

        $z18 = virtualinvoke $r139.<ucar.nc2.Dimension: boolean equals(java.lang.Object)>(r3);

        if $z18 == 0 goto label08;

        $r140 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        virtualinvoke $r140.<ucar.nc2.dataset.NetcdfDataset: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

        $r141 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r142 = virtualinvoke $r141.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r143 = virtualinvoke $r142.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>("record");

        $r144 = (ucar.nc2.Structure) $r143;

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Structure recordVar> = $r144;

        goto label09;

     label08:
        $r247 = new ucar.nc2.StructurePseudo;

        $r25 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        specialinvoke $r247.<ucar.nc2.StructurePseudo: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,java.lang.String,ucar.nc2.Dimension)>($r25, null, "record", r3);

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Structure recordVar> = $r247;

     label09:
        $r191 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Structure recordVar>;

        $r192 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable latVar>;

        $r193 = virtualinvoke $r192.<ucar.nc2.Variable: java.lang.String getName()>();

        $r194 = virtualinvoke $r191.<ucar.nc2.Structure: ucar.nc2.Variable findVariable(java.lang.String)>($r193);

        $r195 = virtualinvoke $r194.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        if $r195 == null goto label10;

        $r136 = virtualinvoke $r195.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z17 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r136);

        if $z17 != 0 goto label10;

        $r248 = new ucar.nc2.Attribute;

        specialinvoke $r248.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r16);

        virtualinvoke $r194.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r248);

     label10:
        $r196 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Structure recordVar>;

        $r197 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable lonVar>;

        $r198 = virtualinvoke $r197.<ucar.nc2.Variable: java.lang.String getName()>();

        $r199 = virtualinvoke $r196.<ucar.nc2.Structure: ucar.nc2.Variable findVariable(java.lang.String)>($r198);

        $r200 = virtualinvoke $r199.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        if $r200 == null goto label11;

        $r134 = virtualinvoke $r200.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z16 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r134);

        if $z16 != 0 goto label11;

        $r249 = new ucar.nc2.Attribute;

        specialinvoke $r249.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r19);

        virtualinvoke $r199.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r249);

     label11:
        $r201 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Structure recordVar>;

        $r202 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable elevVar>;

        $r203 = virtualinvoke $r202.<ucar.nc2.Variable: java.lang.String getName()>();

        $r204 = virtualinvoke $r201.<ucar.nc2.Structure: ucar.nc2.Variable findVariable(java.lang.String)>($r203);

        $r205 = virtualinvoke $r204.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        if $r205 == null goto label12;

        $r132 = virtualinvoke $r205.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z15 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r132);

        if $z15 != 0 goto label12;

        $r250 = new ucar.nc2.Attribute;

        specialinvoke $r250.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r22);

        virtualinvoke $r204.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r250);

     label12:
        $r251 = new java.util.HashMap;

        specialinvoke $r251.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.HashMap trajectoryVarsMap> = $r251;

        $r207 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r208 = virtualinvoke $r207.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r209 = virtualinvoke $r208.<ucar.nc2.Group: java.util.List getVariables()>();

        $r210 = interfaceinvoke $r209.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z19 = interfaceinvoke $r210.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label17;

        $r121 = interfaceinvoke $r210.<java.util.Iterator: java.lang.Object next()>();

        r211 = (ucar.nc2.Variable) $r121;

        $i8 = virtualinvoke r211.<ucar.nc2.Variable: int getRank()>();

        if $i8 < 2 goto label16;

        $r122 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable latVar>;

        $z11 = virtualinvoke r211.<ucar.nc2.Variable: boolean equals(java.lang.Object)>($r122);

        if $z11 != 0 goto label16;

        $r123 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable lonVar>;

        $z12 = virtualinvoke r211.<ucar.nc2.Variable: boolean equals(java.lang.Object)>($r123);

        if $z12 != 0 goto label16;

        $r124 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable elevVar>;

        $z13 = virtualinvoke r211.<ucar.nc2.Variable: boolean equals(java.lang.Object)>($r124);

        if $z13 != 0 goto label16;

        $r125 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Structure recordVar>;

        if $r125 != null goto label14;

        goto label15;

     label14:
        $r126 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Structure recordVar>;

        $z14 = virtualinvoke r211.<ucar.nc2.Variable: boolean equals(java.lang.Object)>($r126);

        if $z14 != 0 goto label16;

     label15:
        $r253 = new ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset$MyTypedDataVariable;

        $r252 = new ucar.nc2.dataset.VariableDS;

        specialinvoke $r252.<ucar.nc2.dataset.VariableDS: void <init>(ucar.nc2.Group,ucar.nc2.Variable,boolean)>(null, r211, 1);

        specialinvoke $r253.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset$MyTypedDataVariable: void <init>(ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset,ucar.nc2.dataset.VariableDS,ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset$1)>(r0, $r252, null);

        $r129 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.List dataVariables>;

        interfaceinvoke $r129.<java.util.List: boolean add(java.lang.Object)>($r253);

        $r130 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.HashMap trajectoryVarsMap>;

        $r131 = virtualinvoke $r253.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset$MyTypedDataVariable: java.lang.String getName()>();

        virtualinvoke $r130.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r131, $r253);

     label16:
        goto label13;

     label17:
        $r254 = new ucar.ma2.Range;

        specialinvoke $r254.<ucar.ma2.Range: void <init>(int,int)>(0, 0);

        $r255 = new ucar.ma2.Range;

        $i1 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: int trajectoryNumPoint>;

        $i4 = $i1 - 1;

        $i2 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: int trajectoryNumPoint>;

        $i3 = $i2 - 1;

        specialinvoke $r255.<ucar.ma2.Range: void <init>(int,int)>($i4, $i3);

     label18:
        goto label20;

     label19:
        $r177 := @caughtexception;

        $r257 = new java.io.IOException;

        $r256 = new java.lang.StringBuilder;

        specialinvoke $r256.<java.lang.StringBuilder: void <init>()>();

        $r180 = virtualinvoke $r256.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start or end point range invalid: ");

        $r181 = virtualinvoke $r177.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r182 = virtualinvoke $r180.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r181);

        $r183 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r257.<java.io.IOException: void <init>(java.lang.String)>($r183);

        virtualinvoke $r257.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r177);

        throw $r257;

     label20:
        $r258 = new java.util.ArrayList;

        specialinvoke $r258.<java.util.ArrayList: void <init>(int)>(1);

        $r259 = new java.util.ArrayList;

        specialinvoke $r259.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r258.<java.util.List: boolean add(java.lang.Object)>($r254);

        interfaceinvoke $r259.<java.util.List: boolean add(java.lang.Object)>($r255);

     label21:
        $r30 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r31 = virtualinvoke $r30.<ucar.nc2.Variable: ucar.ma2.Array read(java.util.List)>($r258);

        $r32 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r33 = virtualinvoke $r32.<ucar.nc2.Variable: ucar.ma2.Array read(java.util.List)>($r259);

     label22:
        goto label24;

     label23:
        $r170 := @caughtexception;

        $r261 = new java.io.IOException;

        $r260 = new java.lang.StringBuilder;

        specialinvoke $r260.<java.lang.StringBuilder: void <init>()>();

        $r173 = virtualinvoke $r260.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range during read of start or end point: ");

        $r174 = virtualinvoke $r170.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        $r175 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r174);

        $r176 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r261.<java.io.IOException: void <init>(java.lang.String)>($r176);

        virtualinvoke $r261.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r170);

        throw $r261;

     label24:
        $r34 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r35 = virtualinvoke $r34.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r36 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $z4 = virtualinvoke $r35.<ucar.ma2.DataType: boolean equals(java.lang.Object)>($r36);

        if $z4 == 0 goto label25;

        $r262 = new java.lang.StringBuilder;

        specialinvoke $r262.<java.lang.StringBuilder: void <init>()>();

        $r110 = virtualinvoke $r31.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $d2 = virtualinvoke $r31.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r110);

        $r111 = virtualinvoke $r262.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r113 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r114 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r113);

        r212 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>();

        $r263 = new java.lang.StringBuilder;

        specialinvoke $r263.<java.lang.StringBuilder: void <init>()>();

        $r116 = virtualinvoke $r33.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $d3 = virtualinvoke $r33.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r116);

        $r117 = virtualinvoke $r263.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r119 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r120 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r119);

        r213 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label28;

     label25:
        $r37 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r38 = virtualinvoke $r37.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r39 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        $z5 = virtualinvoke $r38.<ucar.ma2.DataType: boolean equals(java.lang.Object)>($r39);

        if $z5 == 0 goto label26;

        $r264 = new java.lang.StringBuilder;

        specialinvoke $r264.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r31.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f1 = virtualinvoke $r31.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r98);

        $r99 = virtualinvoke $r264.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r101 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r102 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r101);

        r212 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        $r265 = new java.lang.StringBuilder;

        specialinvoke $r265.<java.lang.StringBuilder: void <init>()>();

        $r104 = virtualinvoke $r33.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $f2 = virtualinvoke $r33.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r104);

        $r105 = virtualinvoke $r265.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r107 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r108 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r107);

        r213 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label28;

     label26:
        $r40 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r41 = virtualinvoke $r40.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r42 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        $z6 = virtualinvoke $r41.<ucar.ma2.DataType: boolean equals(java.lang.Object)>($r42);

        if $z6 == 0 goto label27;

        $r266 = new java.lang.StringBuilder;

        specialinvoke $r266.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r31.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $i5 = virtualinvoke $r31.<ucar.ma2.Array: int getInt(ucar.ma2.Index)>($r56);

        $r57 = virtualinvoke $r266.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r59 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        r212 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        $r267 = new java.lang.StringBuilder;

        specialinvoke $r267.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r33.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $i6 = virtualinvoke $r33.<ucar.ma2.Array: int getInt(ucar.ma2.Index)>($r62);

        $r63 = virtualinvoke $r267.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r65 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        r213 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label28;

     label27:
        $r268 = new java.lang.StringBuilder;

        specialinvoke $r268.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r268.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time var <");

        $r45 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r46 = virtualinvoke $r45.<ucar.nc2.Variable: java.lang.String getName()>();

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> is not a double, float, or integer <");

        $r49 = virtualinvoke r4.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r50 = virtualinvoke $r49.<ucar.ma2.DataType: java.lang.String toString()>();

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        $r269 = new java.lang.IllegalArgumentException;

        specialinvoke $r269.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r53);

        throw $r269;

     label28:
        $r214 = staticinvoke <ucar.nc2.units.DateUnit: java.util.Date getStandardDate(java.lang.String)>(r212);

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.Date startDate> = $r214;

        $r215 = staticinvoke <ucar.nc2.units.DateUnit: java.util.Date getStandardDate(java.lang.String)>(r213);

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.Date endDate> = $r215;

        $r270 = new java.util.ArrayList;

        specialinvoke $r270.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.List trajectoryIds> = $r270;

        $r271 = new java.util.ArrayList;

        specialinvoke $r271.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.List trajectories> = $r271;

        $r272 = new java.util.HashMap;

        specialinvoke $r272.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.HashMap trajectoriesMap> = $r272;

        $r219 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable trajVar>;

        $r220 = virtualinvoke $r219.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r221 = virtualinvoke $r220.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        i9 = 0;

     label29:
        $l10 = (long) i9;

        $l11 = virtualinvoke $r220.<ucar.ma2.Array: long getSize()>();

        $b12 = $l10 cmp $l11;

        $i14 = (int) $b12;

        if $i14 >= 0 goto label35;

        $r67 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable trajVar>;

        $r68 = virtualinvoke $r67.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r69 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        $z7 = virtualinvoke $r68.<ucar.ma2.DataType: boolean equals(java.lang.Object)>($r69);

        if $z7 == 0 goto label30;

        $r95 = virtualinvoke $r221.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i9);

        $r96 = virtualinvoke $r220.<ucar.ma2.Array: java.lang.Object getObject(ucar.ma2.Index)>($r95);

        r222 = (java.lang.String) $r96;

        goto label34;

     label30:
        $r70 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable trajVar>;

        $r71 = virtualinvoke $r70.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r72 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        $z8 = virtualinvoke $r71.<ucar.ma2.DataType: boolean equals(java.lang.Object)>($r72);

        if $z8 == 0 goto label31;

        $r94 = virtualinvoke $r221.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i9);

        $d1 = virtualinvoke $r220.<ucar.ma2.Array: double getDouble(ucar.ma2.Index)>($r94);

        r222 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d1);

        goto label34;

     label31:
        $r73 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable trajVar>;

        $r74 = virtualinvoke $r73.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r75 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        $z9 = virtualinvoke $r74.<ucar.ma2.DataType: boolean equals(java.lang.Object)>($r75);

        if $z9 == 0 goto label32;

        $r93 = virtualinvoke $r221.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i9);

        $f0 = virtualinvoke $r220.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r93);

        r222 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>($f0);

        goto label34;

     label32:
        $r76 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable trajVar>;

        $r77 = virtualinvoke $r76.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r78 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        $z10 = virtualinvoke $r77.<ucar.ma2.DataType: boolean equals(java.lang.Object)>($r78);

        if $z10 == 0 goto label33;

        $r92 = virtualinvoke $r221.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i9);

        $i7 = virtualinvoke $r220.<ucar.ma2.Array: int getInt(ucar.ma2.Index)>($r92);

        r222 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i7);

        goto label34;

     label33:
        $r273 = new java.lang.StringBuilder;

        specialinvoke $r273.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r273.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trajectory var <");

        $r81 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable trajVar>;

        $r82 = virtualinvoke $r81.<ucar.nc2.Variable: java.lang.String getName()>();

        $r83 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> is not a string, double, float, or integer <");

        $r85 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable trajVar>;

        $r86 = virtualinvoke $r85.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r87 = virtualinvoke $r86.<ucar.ma2.DataType: java.lang.String toString()>();

        $r88 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        $r274 = new java.lang.IllegalStateException;

        specialinvoke $r274.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r90);

        throw $r274;

     label34:
        $r275 = new ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset$MultiTrajectory;

        $i13 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: int trajectoryNumPoint>;

        $r224 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.Date startDate>;

        $r225 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.Date endDate>;

        $r226 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable trajVar>;

        $r227 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r228 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r229 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable latVar>;

        $r230 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable lonVar>;

        $r231 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.Variable elevVar>;

        $r232 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.List dataVariables>;

        $r233 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.HashMap trajectoryVarsMap>;

        specialinvoke $r275.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset$MultiTrajectory: void <init>(ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset,java.lang.String,int,int,java.util.Date,java.util.Date,ucar.nc2.Variable,ucar.nc2.Variable,java.lang.String,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,java.util.List,java.util.HashMap,ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset$1)>(r0, r222, i9, $i13, $r224, $r225, $r226, $r227, $r228, $r229, $r230, $r231, $r232, $r233, null);

        $r234 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.List trajectoryIds>;

        interfaceinvoke $r234.<java.util.List: boolean add(java.lang.Object)>(r222);

        $r235 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.List trajectories>;

        interfaceinvoke $r235.<java.util.List: boolean add(java.lang.Object)>($r275);

        $r236 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.HashMap trajectoriesMap>;

        virtualinvoke $r236.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r222, $r275);

        i9 = i9 + 1;

        goto label29;

     label35:
        return;

        catch java.lang.Exception from label04 to label05 with label06;
        catch ucar.ma2.InvalidRangeException from label17 to label18 with label19;
        catch ucar.ma2.InvalidRangeException from label21 to label22 with label23;
    }

    protected static double getMetersConversionFactor(java.lang.String) throws java.lang.Exception
    {
        ucar.nc2.units.SimpleUnit $r1, $r2;
        java.lang.String r0;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <ucar.nc2.units.SimpleUnit: ucar.nc2.units.SimpleUnit factoryWithExceptions(java.lang.String)>(r0);

        $r2 = <ucar.nc2.units.SimpleUnit: ucar.nc2.units.SimpleUnit meterUnit>;

        $d0 = virtualinvoke $r1.<ucar.nc2.units.SimpleUnit: double convertTo(double,ucar.nc2.units.SimpleUnit)>(1.0, $r2);

        return $d0;
    }

    public boolean syncExtend()
    {
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        return 0;
    }

    protected void setStartDate()
    {
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        return;
    }

    protected void setEndDate()
    {
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        return;
    }

    protected void setBoundingBox()
    {
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        return;
    }

    public java.util.List getTrajectoryIds()
    {
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r0;
        java.util.List $r1;

        r0 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        $r1 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.List trajectoryIds>;

        return $r1;
    }

    public java.util.List getTrajectories()
    {
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r0;
        java.util.List $r1;

        r0 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        $r1 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.List trajectories>;

        return $r1;
    }

    public ucar.nc2.dt.TrajectoryObsDatatype getTrajectory(java.lang.String)
    {
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r0;
        ucar.nc2.dt.TrajectoryObsDatatype $r4;

        r1 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.HashMap trajectoriesMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (ucar.nc2.dt.TrajectoryObsDatatype) $r3;

        return $r4;
    }

    public java.lang.String getDetailInfo()
    {
        java.lang.StringBuffer $r0;
        java.lang.String $r5, $r8, $r11, $r12, $r16, $r19;
        boolean $z0;
        java.util.Iterator $r10;
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r3;
        java.util.List $r9;
        java.lang.StringBuilder $r1, $r2, $r6, $r7, $r13, $r14, $r17, $r18;
        java.lang.Class $r4;
        java.lang.Object $r15;

        r3 := @this: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TrajectoryObsDataset\n");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  adapter   = ");

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  trajectories:\n");

        $r9 = virtualinvoke r3.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: java.util.List getTrajectoryIds()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r15 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (java.lang.String) $r15;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        goto label1;

     label2:
        $r11 = specialinvoke r3.<ucar.nc2.dt.TypedDatasetImpl: java.lang.String getDetailInfo()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    static ucar.nc2.dataset.NetcdfDataset access$400(ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset)
    {
        ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset r0;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @parameter0: ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset;

        $r1 = r0.<ucar.nc2.dt.trajectory.MultiTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        return $r1;
    }
}
