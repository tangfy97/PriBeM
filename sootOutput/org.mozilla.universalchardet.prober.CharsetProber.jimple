public abstract class org.mozilla.universalchardet.prober.CharsetProber extends java.lang.Object
{
    public static final float SHORTCUT_THRESHOLD;
    public static final int ASCII_A;
    public static final int ASCII_Z;
    public static final int ASCII_A_CAPITAL;
    public static final int ASCII_Z_CAPITAL;
    public static final int ASCII_LT;
    public static final int ASCII_GT;
    public static final int ASCII_SP;

    public void <init>()
    {
        org.mozilla.universalchardet.prober.CharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.CharsetProber;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.String getCharSetName();

    public abstract org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int);

    public abstract org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState();

    public abstract void reset();

    public abstract float getConfidence();

    public abstract void setOption();

    public java.nio.ByteBuffer filterWithoutEnglishLetters(byte[], int, int)
    {
        org.mozilla.universalchardet.prober.CharsetProber r2;
        byte[] r1;
        java.nio.ByteBuffer $r0;
        byte b4;
        int i0, i1, i2, $i3, $i5, i6, i7;
        boolean $z0, $z1, z2, z3, z4;

        r2 := @this: org.mozilla.universalchardet.prober.CharsetProber;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        z2 = 0;

        z4 = 0;

        z3 = 0;

        i6 = i1;

        i7 = i1;

        i2 = i1 + i0;

     label1:
        if i7 >= i2 goto label5;

        b4 = r1[i7];

        $z0 = specialinvoke r2.<org.mozilla.universalchardet.prober.CharsetProber: boolean isAscii(byte)>(b4);

        if $z0 != 0 goto label2;

        z2 = 1;

        z4 = 1;

        z3 = 1;

        goto label4;

     label2:
        $z1 = specialinvoke r2.<org.mozilla.universalchardet.prober.CharsetProber: boolean isAsciiSymbol(byte)>(b4);

        if $z1 == 0 goto label4;

        if z4 == 0 goto label3;

        if i7 <= i6 goto label3;

        $i5 = i7 - i6;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i6, $i5);

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(32);

        i6 = i7 + 1;

        z2 = 0;

        z4 = 0;

        z3 = 0;

        goto label4;

     label3:
        i6 = i7 + 1;

     label4:
        i7 = i7 + 1;

        goto label1;

     label5:
        if z3 == 0 goto label6;

        if i7 <= i6 goto label6;

        $i3 = i7 - i6;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i6, $i3);

     label6:
        return $r0;
    }

    public java.nio.ByteBuffer filterWithEnglishLetters(byte[], int, int)
    {
        org.mozilla.universalchardet.prober.CharsetProber r2;
        byte[] r1;
        java.nio.ByteBuffer $r0;
        byte b4;
        int i0, i1, i2, $i3, $i5, i6, i7, $i8, $i9;
        boolean $z0, z1, $z2, z3, z4;

        r2 := @this: org.mozilla.universalchardet.prober.CharsetProber;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        z1 = 0;

        z4 = 0;

        z3 = 0;

        i6 = i1;

        i7 = i1;

        i2 = i1 + i0;

     label1:
        if i7 >= i2 goto label6;

        b4 = r1[i7];

        $i8 = (int) b4;

        if $i8 != 62 goto label2;

        z1 = 0;

        z4 = 0;

        z3 = 0;

        goto label3;

     label2:
        $i9 = (int) b4;

        if $i9 != 60 goto label3;

        z1 = 1;

        z4 = 1;

        z3 = 1;

     label3:
        $z2 = specialinvoke r2.<org.mozilla.universalchardet.prober.CharsetProber: boolean isAscii(byte)>(b4);

        if $z2 == 0 goto label5;

        $z0 = specialinvoke r2.<org.mozilla.universalchardet.prober.CharsetProber: boolean isAsciiSymbol(byte)>(b4);

        if $z0 == 0 goto label5;

        if i7 <= i6 goto label4;

        if z3 != 0 goto label4;

        $i5 = i7 - i6;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i6, $i5);

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(32);

        i6 = i7 + 1;

        goto label5;

     label4:
        i6 = i7 + 1;

     label5:
        i7 = i7 + 1;

        goto label1;

     label6:
        if z4 != 0 goto label7;

        if i7 <= i6 goto label7;

        $i3 = i7 - i6;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i6, $i3);

     label7:
        return $r0;
    }

    private boolean isAscii(byte)
    {
        org.mozilla.universalchardet.prober.CharsetProber r0;
        short $s1, $s2;
        byte b0;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.CharsetProber;

        b0 := @parameter0: byte;

        $s2 = (short) b0;

        $s1 = $s2 & 128;

        if $s1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isAsciiSymbol(byte)
    {
        org.mozilla.universalchardet.prober.CharsetProber r0;
        short s1, $s2;
        byte b0;
        int $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.CharsetProber;

        b0 := @parameter0: byte;

        $s2 = (short) b0;

        s1 = $s2 & 255;

        $i3 = (int) s1;

        if $i3 < 65 goto label2;

        $i4 = (int) s1;

        if $i4 <= 90 goto label1;

        $i5 = (int) s1;

        if $i5 < 97 goto label2;

     label1:
        $i6 = (int) s1;

        if $i6 <= 122 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static void <clinit>()
    {
        <org.mozilla.universalchardet.prober.CharsetProber: int ASCII_SP> = 32;

        <org.mozilla.universalchardet.prober.CharsetProber: int ASCII_GT> = 62;

        <org.mozilla.universalchardet.prober.CharsetProber: int ASCII_LT> = 60;

        <org.mozilla.universalchardet.prober.CharsetProber: int ASCII_Z_CAPITAL> = 90;

        <org.mozilla.universalchardet.prober.CharsetProber: int ASCII_A_CAPITAL> = 65;

        <org.mozilla.universalchardet.prober.CharsetProber: int ASCII_Z> = 122;

        <org.mozilla.universalchardet.prober.CharsetProber: int ASCII_A> = 97;

        <org.mozilla.universalchardet.prober.CharsetProber: float SHORTCUT_THRESHOLD> = 0.95F;

        return;
    }
}
