public class org.apache.batik.gvt.font.AWTGVTGlyphVector extends java.lang.Object implements org.apache.batik.gvt.font.GVTGlyphVector
{
    public static final java.text.AttributedCharacterIterator$Attribute PAINT_INFO;
    private java.awt.font.GlyphVector awtGlyphVector;
    private org.apache.batik.gvt.font.AWTGVTFont gvtFont;
    private java.text.CharacterIterator ci;
    private java.awt.geom.Point2D[] defaultGlyphPositions;
    private java.awt.geom.Point2D$Float[] glyphPositions;
    private java.awt.geom.AffineTransform[] glyphTransforms;
    private java.awt.Shape[] glyphOutlines;
    private java.awt.Shape[] glyphVisualBounds;
    private java.awt.Shape[] glyphLogicalBounds;
    private boolean[] glyphVisible;
    private org.apache.batik.gvt.font.GVTGlyphMetrics[] glyphMetrics;
    private java.awt.geom.GeneralPath outline;
    private java.awt.geom.Rectangle2D visualBounds;
    private java.awt.geom.Rectangle2D logicalBounds;
    private java.awt.geom.Rectangle2D bounds2D;
    private float scaleFactor;
    private float ascent;
    private float descent;
    private org.apache.batik.gvt.text.TextPaintInfo cacheTPI;
    private static final boolean outlinesPositioned;
    private static final boolean drawGlyphVectorWorks;
    private static final boolean glyphVectorTransformWorks;

    public void <init>(java.awt.font.GlyphVector, org.apache.batik.gvt.font.AWTGVTFont, float, java.text.CharacterIterator)
    {
        java.awt.Shape[] $r10, $r11, $r12;
        int $i0, $i1, i2;
        org.apache.batik.gvt.font.AWTGVTFont r2, $r5;
        org.apache.batik.gvt.font.GVTLineMetrics $r7;
        java.awt.geom.Point2D$Float[] $r8;
        java.text.CharacterIterator r3;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        boolean[] $r13, $r15;
        java.awt.font.GlyphVector r1, $r4;
        java.awt.geom.AffineTransform[] $r9;
        java.awt.font.FontRenderContext $r6;
        float f0, $f1, $f2;
        org.apache.batik.gvt.font.GVTGlyphMetrics[] $r14;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        r1 := @parameter0: java.awt.font.GlyphVector;

        r2 := @parameter1: org.apache.batik.gvt.font.AWTGVTFont;

        f0 := @parameter2: float;

        r3 := @parameter3: java.text.CharacterIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector> = r1;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.AWTGVTFont gvtFont> = r2;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor> = f0;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci> = r3;

        $r5 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.AWTGVTFont gvtFont>;

        $r4 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        $r6 = virtualinvoke $r4.<java.awt.font.GlyphVector: java.awt.font.FontRenderContext getFontRenderContext()>();

        $r7 = virtualinvoke $r5.<org.apache.batik.gvt.font.AWTGVTFont: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)>("By", $r6);

        $f1 = virtualinvoke $r7.<org.apache.batik.gvt.font.GVTLineMetrics: float getAscent()>();

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float ascent> = $f1;

        $f2 = virtualinvoke $r7.<org.apache.batik.gvt.font.GVTLineMetrics: float getDescent()>();

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float descent> = $f2;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.GeneralPath outline> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D visualBounds> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

        $i0 = virtualinvoke r1.<java.awt.font.GlyphVector: int getNumGlyphs()>();

        $i1 = $i0 + 1;

        $r8 = newarray (java.awt.geom.Point2D$Float)[$i1];

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D$Float[] glyphPositions> = $r8;

        $r9 = newarray (java.awt.geom.AffineTransform)[$i0];

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.AffineTransform[] glyphTransforms> = $r9;

        $r10 = newarray (java.awt.Shape)[$i0];

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphOutlines> = $r10;

        $r11 = newarray (java.awt.Shape)[$i0];

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphVisualBounds> = $r11;

        $r12 = newarray (java.awt.Shape)[$i0];

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds> = $r12;

        $r13 = newarray (boolean)[$i0];

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean[] glyphVisible> = $r13;

        $r14 = newarray (org.apache.batik.gvt.font.GVTGlyphMetrics)[$i0];

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics[] glyphMetrics> = $r14;

        i2 = 0;

        goto label2;

     label1:
        $r15 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean[] glyphVisible>;

        $r15[i2] = 1;

        i2 = i2 + 1;

     label2:
        if i2 < $i0 goto label1;

        return;
    }

    public org.apache.batik.gvt.font.GVTFont getFont()
    {
        org.apache.batik.gvt.font.AWTGVTFont $r1;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.AWTGVTFont gvtFont>;

        return $r1;
    }

    public java.awt.font.FontRenderContext getFontRenderContext()
    {
        java.awt.font.GlyphVector $r1;
        java.awt.font.FontRenderContext $r2;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        $r2 = virtualinvoke $r1.<java.awt.font.GlyphVector: java.awt.font.FontRenderContext getFontRenderContext()>();

        return $r2;
    }

    public int getGlyphCode(int)
    {
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        int i0, $i1;
        java.awt.font.GlyphVector $r1;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        $i1 = virtualinvoke $r1.<java.awt.font.GlyphVector: int getGlyphCode(int)>(i0);

        return $i1;
    }

    public int[] getGlyphCodes(int, int, int[])
    {
        int[] r1, $r3;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        int i0, i1;
        java.awt.font.GlyphVector $r2;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        $r2 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        $r3 = virtualinvoke $r2.<java.awt.font.GlyphVector: int[] getGlyphCodes(int,int,int[])>(i0, i1, r1);

        return $r3;
    }

    public java.awt.font.GlyphJustificationInfo getGlyphJustificationInfo(int)
    {
        java.awt.font.GlyphJustificationInfo $r2;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        int i0;
        java.awt.font.GlyphVector $r1;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        $r2 = virtualinvoke $r1.<java.awt.font.GlyphVector: java.awt.font.GlyphJustificationInfo getGlyphJustificationInfo(int)>(i0);

        return $r2;
    }

    public java.awt.geom.Rectangle2D getBounds2D(java.text.AttributedCharacterIterator)
    {
        java.awt.geom.Rectangle2D $r5, $r8, $r9, $r11, $r12, $r13, $r15, $r19, $r21, $r22;
        java.text.AttributedCharacterIterator$Attribute $r1;
        byte $b0, $b1;
        boolean $z0, $z1;
        double $d0, $d1;
        java.awt.Shape $r10, $r14, r20;
        java.awt.Stroke $r16;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r4;
        org.apache.batik.gvt.text.TextPaintInfo r3, $r6, $r18;
        java.text.AttributedCharacterIterator r0;
        java.awt.Paint $r7, $r17;
        java.lang.Object $r2;

        r4 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        interfaceinvoke r0.<java.text.CharacterIterator: char first()>();

        $r1 = <org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        $r2 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r1);

        r3 = (org.apache.batik.gvt.text.TextPaintInfo) $r2;

        $r5 = r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        if $r5 == null goto label01;

        $r18 = r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.text.TextPaintInfo cacheTPI>;

        $z1 = staticinvoke <org.apache.batik.gvt.text.TextPaintInfo: boolean equivilent(org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.gvt.text.TextPaintInfo)>(r3, $r18);

        if $z1 == 0 goto label01;

        $r19 = r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        return $r19;

     label01:
        if r3 != null goto label02;

        return null;

     label02:
        $z0 = r3.<org.apache.batik.gvt.text.TextPaintInfo: boolean visible>;

        if $z0 != 0 goto label03;

        return null;

     label03:
        $r6 = new org.apache.batik.gvt.text.TextPaintInfo;

        specialinvoke $r6.<org.apache.batik.gvt.text.TextPaintInfo: void <init>(org.apache.batik.gvt.text.TextPaintInfo)>(r3);

        r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.text.TextPaintInfo cacheTPI> = $r6;

        r20 = null;

        $r7 = r3.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        if $r7 == null goto label04;

        $r14 = virtualinvoke r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape getOutline()>();

        r20 = $r14;

        $r15 = interfaceinvoke $r14.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = $r15;

     label04:
        $r16 = r3.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        $r17 = r3.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        if $r16 == null goto label07;

        if $r17 == null goto label07;

        if r20 != null goto label05;

        r20 = virtualinvoke r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape getOutline()>();

     label05:
        $r10 = interfaceinvoke $r16.<java.awt.Stroke: java.awt.Shape createStrokedShape(java.awt.Shape)>(r20);

        $r11 = interfaceinvoke $r10.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r12 = r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        if $r12 != null goto label06;

        r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = $r11;

        goto label07;

     label06:
        $r13 = r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        virtualinvoke $r13.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r11);

     label07:
        $r21 = r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        if $r21 != null goto label08;

        return null;

     label08:
        $r8 = r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        $d0 = virtualinvoke $r8.<java.awt.geom.RectangularShape: double getWidth()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label09;

        $r9 = r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        $d1 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getHeight()>();

        $b1 = $d1 cmpl 0.0;

        if $b1 != 0 goto label10;

     label09:
        r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

     label10:
        $r22 = r4.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D>;

        return $r22;
    }

    public java.awt.geom.Rectangle2D getLogicalBounds()
    {
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        java.awt.geom.Rectangle2D $r1, $r2;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: void computeGlyphLogicalBounds()>();

     label1:
        $r2 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds>;

        return $r2;
    }

    public java.awt.Shape getGlyphLogicalBounds(int)
    {
        java.awt.Shape $r2, $r5;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        boolean[] $r3;
        java.awt.Shape[] $r1, $r4;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r2 = $r1[i0];

        if $r2 != null goto label1;

        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean[] glyphVisible>;

        $z0 = $r3[i0];

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: void computeGlyphLogicalBounds()>();

     label1:
        $r4 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r5 = $r4[i0];

        return $r5;
    }

    private void computeGlyphLogicalBounds()
    {
        byte $b2, $b3, $b4, $b5, $b6, $b8, $b9, $b14, $b15, $b16, $b21, $b22, $b23, $b25;
        java.awt.geom.GeneralPath $r50;
        java.awt.geom.Point2D$Double $r44, $r45, $r46, $r47, $r48, $r49;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        boolean[] r2, $r3;
        java.awt.geom.Point2D $r10;
        java.awt.Shape[] r1, $r42;
        java.awt.geom.Rectangle2D$Double $r43, $r51, $r52;
        int $i0, $i1, $i7, $i10, $i11, $i12, $i13, $i17, $i18, $i19, $i20, i24, $i26, i27, $i28, i29, $i30, i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47;
        java.awt.geom.Rectangle2D $r19, $r20, $r21, $r24, $r27, $r30, $r33, $r35, $r37, $r38, $r40, $r41;
        org.apache.batik.gvt.font.GVTGlyphMetrics $r5;
        java.awt.geom.AffineTransform $r4, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.awt.Shape $r12, $r17, $r18, $r22, $r23, $r25, $r26, $r28, $r29, $r31, $r32, $r34;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, f7, $f8, $f9, f10, f11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, d61, d62, $d63, d64, d65, d66, $d67, $d68, d69, d70, d71, $d72, $d73;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $i0 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        r1 = newarray (java.awt.Shape)[$i0];

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        r2 = newarray (boolean)[$i1];

        d61 = -1.0;

        d62 = -1.0;

        i24 = 0;

        goto label12;

     label01:
        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean[] glyphVisible>;

        $z0 = $r3[i24];

        if $z0 != 0 goto label02;

        r1[i24] = null;

        goto label11;

     label02:
        $r4 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.AffineTransform getGlyphTransform(int)>(i24);

        $r5 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(int)>(i24);

        $f0 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float ascent>;

        $f2 = neg $f0;

        $f1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        f10 = $f2 / $f1;

        $f3 = virtualinvoke $r5.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getHorizontalAdvance()>();

        $f4 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        f11 = $f3 / $f4;

        $f5 = virtualinvoke $r5.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getVerticalAdvance()>();

        $f6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        f7 = $f5 / $f6;

        $r43 = new java.awt.geom.Rectangle2D$Double;

        $d3 = (double) 0.0F;

        $d2 = (double) f10;

        $d1 = (double) f11;

        $d0 = (double) f7;

        specialinvoke $r43.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d3, $d2, $d1, $d0);

        $z1 = virtualinvoke $r43.<java.awt.geom.RectangularShape: boolean isEmpty()>();

        if $z1 == 0 goto label04;

        if i24 <= 0 goto label03;

        $i7 = i24 - 1;

        $z2 = r2[$i7];

        r2[i24] = $z2;

        goto label11;

     label03:
        r2[i24] = 1;

        goto label11;

     label04:
        $r44 = new java.awt.geom.Point2D$Double;

        $d4 = virtualinvoke $r43.<java.awt.geom.RectangularShape: double getMinX()>();

        $d5 = virtualinvoke $r43.<java.awt.geom.RectangularShape: double getMinY()>();

        specialinvoke $r44.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d4, $d5);

        $r45 = new java.awt.geom.Point2D$Double;

        $d6 = virtualinvoke $r43.<java.awt.geom.RectangularShape: double getMaxX()>();

        $d7 = virtualinvoke $r43.<java.awt.geom.RectangularShape: double getMinY()>();

        specialinvoke $r45.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d6, $d7);

        $r46 = new java.awt.geom.Point2D$Double;

        $d8 = virtualinvoke $r43.<java.awt.geom.RectangularShape: double getMinX()>();

        $d9 = virtualinvoke $r43.<java.awt.geom.RectangularShape: double getMaxY()>();

        specialinvoke $r46.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d8, $d9);

        $r10 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>(i24);

        $d10 = virtualinvoke $r10.<java.awt.geom.Point2D: double getX()>();

        $d11 = virtualinvoke $r10.<java.awt.geom.Point2D: double getY()>();

        $r11 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d10, $d11);

        if $r4 == null goto label05;

        virtualinvoke $r11.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r4);

     label05:
        $f8 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d13 = (double) $f8;

        $f9 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d12 = (double) $f9;

        virtualinvoke $r11.<java.awt.geom.AffineTransform: void scale(double,double)>($d13, $d12);

        $r12 = virtualinvoke $r11.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r43);

        r1[i24] = $r12;

        $r47 = new java.awt.geom.Point2D$Double;

        specialinvoke $r47.<java.awt.geom.Point2D$Double: void <init>()>();

        $r48 = new java.awt.geom.Point2D$Double;

        specialinvoke $r48.<java.awt.geom.Point2D$Double: void <init>()>();

        $r49 = new java.awt.geom.Point2D$Double;

        specialinvoke $r49.<java.awt.geom.Point2D$Double: void <init>()>();

        virtualinvoke $r11.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r44, $r47);

        virtualinvoke $r11.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r45, $r48);

        virtualinvoke $r11.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r46, $r49);

        $d14 = virtualinvoke $r47.<java.awt.geom.Point2D: double getX()>();

        $d15 = virtualinvoke $r48.<java.awt.geom.Point2D: double getX()>();

        $d27 = $d14 - $d15;

        $d16 = virtualinvoke $r47.<java.awt.geom.Point2D: double getX()>();

        $d17 = virtualinvoke $r49.<java.awt.geom.Point2D: double getX()>();

        $d28 = $d16 - $d17;

        $d18 = virtualinvoke $r47.<java.awt.geom.Point2D: double getY()>();

        $d19 = virtualinvoke $r48.<java.awt.geom.Point2D: double getY()>();

        $d29 = $d18 - $d19;

        $d20 = virtualinvoke $r47.<java.awt.geom.Point2D: double getY()>();

        $d21 = virtualinvoke $r49.<java.awt.geom.Point2D: double getY()>();

        $d30 = $d20 - $d21;

        $d22 = staticinvoke <java.lang.Math: double abs(double)>($d27);

        $b2 = $d22 cmpg 0.001;

        $i34 = (int) $b2;

        if $i34 >= 0 goto label06;

        $d26 = staticinvoke <java.lang.Math: double abs(double)>($d30);

        $b6 = $d26 cmpg 0.001;

        $i35 = (int) $b6;

        if $i35 < 0 goto label07;

     label06:
        $d23 = staticinvoke <java.lang.Math: double abs(double)>($d28);

        $b3 = $d23 cmpg 0.001;

        $i36 = (int) $b3;

        if $i36 >= 0 goto label08;

        $d25 = staticinvoke <java.lang.Math: double abs(double)>($d29);

        $b5 = $d25 cmpg 0.001;

        $i37 = (int) $b5;

        if $i37 >= 0 goto label08;

     label07:
        r2[i24] = 0;

        goto label09;

     label08:
        r2[i24] = 1;

     label09:
        $r34 = r1[i24];

        $r35 = interfaceinvoke $r34.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d63 = virtualinvoke $r35.<java.awt.geom.RectangularShape: double getWidth()>();

        $b25 = $d63 cmpl d61;

        $i38 = (int) $b25;

        if $i38 <= 0 goto label10;

        d61 = virtualinvoke $r35.<java.awt.geom.RectangularShape: double getWidth()>();

     label10:
        $d24 = virtualinvoke $r35.<java.awt.geom.RectangularShape: double getHeight()>();

        $b4 = $d24 cmpl d62;

        $i39 = (int) $b4;

        if $i39 <= 0 goto label11;

        d62 = virtualinvoke $r35.<java.awt.geom.RectangularShape: double getHeight()>();

     label11:
        i24 = i24 + 1;

     label12:
        $i26 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        if i24 < $i26 goto label01;

        $r50 = new java.awt.geom.GeneralPath;

        specialinvoke $r50.<java.awt.geom.GeneralPath: void <init>()>();

        i27 = 0;

        goto label15;

     label13:
        $r17 = r1[i27];

        if $r17 == null goto label14;

        $r18 = r1[i27];

        virtualinvoke $r50.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r18, 0);

     label14:
        i27 = i27 + 1;

     label15:
        $i28 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        if i27 < $i28 goto label13;

        $r19 = virtualinvoke $r50.<java.awt.geom.GeneralPath: java.awt.geom.Rectangle2D getBounds2D()>();

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = $r19;

        $r20 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds>;

        $d31 = virtualinvoke $r20.<java.awt.geom.RectangularShape: double getHeight()>();

        $d32 = d62 * 1.5;

        $b8 = $d31 cmpg $d32;

        $i40 = (int) $b8;

        if $i40 >= 0 goto label22;

        i29 = 0;

        goto label21;

     label16:
        $z4 = r2[i29];

        if $z4 == 0 goto label17;

        goto label20;

     label17:
        $r28 = r1[i29];

        if $r28 != null goto label18;

        goto label20;

     label18:
        $r29 = r1[i29];

        $r30 = interfaceinvoke $r29.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d48 = virtualinvoke $r30.<java.awt.geom.RectangularShape: double getMinX()>();

        $d49 = virtualinvoke $r30.<java.awt.geom.RectangularShape: double getWidth()>();

        d64 = $d49;

        $i17 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        $i18 = $i17 - 1;

        if i29 >= $i18 goto label19;

        $i19 = i29 + 1;

        $r31 = r1[$i19];

        if $r31 == null goto label19;

        $i20 = i29 + 1;

        $r32 = r1[$i20];

        $r33 = interfaceinvoke $r32.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d50 = virtualinvoke $r33.<java.awt.geom.RectangularShape: double getX()>();

        $b21 = $d50 cmpl $d48;

        $i41 = (int) $b21;

        if $i41 <= 0 goto label19;

        $d51 = virtualinvoke $r33.<java.awt.geom.RectangularShape: double getX()>();

        d65 = $d51 - $d48;

        $d52 = $d49 * 1.15;

        $b22 = d65 cmpg $d52;

        $i42 = (int) $b22;

        if $i42 >= 0 goto label19;

        $d53 = $d49 * 0.85;

        $b23 = d65 cmpl $d53;

        $i43 = (int) $b23;

        if $i43 <= 0 goto label19;

        $d54 = d65 - $d49;

        d66 = $d54 * 0.5;

        d64 = $d49 + d66;

        $d55 = virtualinvoke $r33.<java.awt.geom.RectangularShape: double getX()>();

        $d56 = $d55 - d66;

        $d57 = virtualinvoke $r33.<java.awt.geom.RectangularShape: double getY()>();

        $d58 = virtualinvoke $r33.<java.awt.geom.RectangularShape: double getWidth()>();

        $d59 = $d58 + d66;

        $d60 = virtualinvoke $r33.<java.awt.geom.RectangularShape: double getHeight()>();

        virtualinvoke $r33.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d56, $d57, $d59, $d60);

     label19:
        $r51 = new java.awt.geom.Rectangle2D$Double;

        $r37 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds>;

        $d67 = virtualinvoke $r37.<java.awt.geom.RectangularShape: double getMinY()>();

        $r38 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds>;

        $d68 = virtualinvoke $r38.<java.awt.geom.RectangularShape: double getHeight()>();

        specialinvoke $r51.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d48, $d67, d64, $d68);

        r1[i29] = $r51;

     label20:
        i29 = i29 + 1;

     label21:
        $i30 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        if i29 < $i30 goto label16;

        goto label29;

     label22:
        $r21 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds>;

        $d33 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getWidth()>();

        $d34 = d61 * 1.5;

        $b9 = $d33 cmpg $d34;

        $i44 = (int) $b9;

        if $i44 >= 0 goto label29;

        i31 = 0;

        goto label28;

     label23:
        $z3 = r2[i31];

        if $z3 == 0 goto label24;

        goto label27;

     label24:
        $r22 = r1[i31];

        if $r22 != null goto label25;

        goto label27;

     label25:
        $r23 = r1[i31];

        $r24 = interfaceinvoke $r23.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d35 = virtualinvoke $r24.<java.awt.geom.RectangularShape: double getMinY()>();

        $d36 = virtualinvoke $r24.<java.awt.geom.RectangularShape: double getHeight()>();

        d69 = $d36;

        $i10 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        $i11 = $i10 - 1;

        if i31 >= $i11 goto label26;

        $i12 = i31 + 1;

        $r25 = r1[$i12];

        if $r25 == null goto label26;

        $i13 = i31 + 1;

        $r26 = r1[$i13];

        $r27 = interfaceinvoke $r26.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d37 = virtualinvoke $r27.<java.awt.geom.RectangularShape: double getY()>();

        $b14 = $d37 cmpl $d35;

        $i45 = (int) $b14;

        if $i45 <= 0 goto label26;

        $d38 = virtualinvoke $r27.<java.awt.geom.RectangularShape: double getY()>();

        d70 = $d38 - $d35;

        $d39 = $d36 * 1.15;

        $b15 = d70 cmpg $d39;

        $i46 = (int) $b15;

        if $i46 >= 0 goto label26;

        $d40 = $d36 * 0.85;

        $b16 = d70 cmpl $d40;

        $i47 = (int) $b16;

        if $i47 <= 0 goto label26;

        $d41 = d70 - $d36;

        d71 = $d41 * 0.5;

        d69 = $d36 + d71;

        $d42 = virtualinvoke $r27.<java.awt.geom.RectangularShape: double getX()>();

        $d43 = virtualinvoke $r27.<java.awt.geom.RectangularShape: double getY()>();

        $d44 = $d43 - d71;

        $d45 = virtualinvoke $r27.<java.awt.geom.RectangularShape: double getWidth()>();

        $d46 = virtualinvoke $r27.<java.awt.geom.RectangularShape: double getHeight()>();

        $d47 = $d46 + d71;

        virtualinvoke $r27.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d42, $d44, $d45, $d47);

     label26:
        $r52 = new java.awt.geom.Rectangle2D$Double;

        $r40 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds>;

        $d72 = virtualinvoke $r40.<java.awt.geom.RectangularShape: double getMinX()>();

        $r41 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds>;

        $d73 = virtualinvoke $r41.<java.awt.geom.RectangularShape: double getWidth()>();

        specialinvoke $r52.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d72, $d35, $d73, d69);

        r1[i31] = $r52;

     label27:
        i31 = i31 + 1;

     label28:
        $i32 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        if i31 < $i32 goto label23;

     label29:
        $r42 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $i33 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r42, 0, $i33);

        return;
    }

    public org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(int)
    {
        java.awt.geom.Point2D r4, $r15, $r17;
        java.awt.geom.Rectangle2D $r12;
        org.apache.batik.gvt.font.GVTGlyphMetrics $r2, $r18, $r21, $r23;
        java.awt.geom.Rectangle2D$Double $r13;
        java.text.CharacterIterator $r5, $r6, $r7, $r8;
        float $f0, $f1, $f2, $f3, f4, $f5, $f6, $f7, $f8, $f9;
        int i0, $i1, $i2, $i4, $i5;
        org.apache.batik.gvt.font.AWTGVTFont $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        char $c3;
        java.awt.font.GlyphVector $r9;
        org.apache.batik.gvt.font.GVTGlyphMetrics[] $r1, $r19, $r20, $r22;
        java.awt.geom.Point2D[] $r3, $r14, $r16;
        org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value $r11;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics[] glyphMetrics>;

        $r2 = $r1[i0];

        if $r2 == null goto label1;

        $r22 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics[] glyphMetrics>;

        $r23 = $r22[i0];

        return $r23;

     label1:
        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions>;

        r4 = $r3[i0];

        $r6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $r5 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $i1 = interfaceinvoke $r5.<java.text.CharacterIterator: int getBeginIndex()>();

        $i2 = $i1 + i0;

        $c3 = interfaceinvoke $r6.<java.text.CharacterIterator: char setIndex(int)>($i2);

        $r8 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $r7 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $i4 = interfaceinvoke $r7.<java.text.CharacterIterator: int getBeginIndex()>();

        interfaceinvoke $r8.<java.text.CharacterIterator: char setIndex(int)>($i4);

        $r10 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.AWTGVTFont gvtFont>;

        $r9 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        $r11 = staticinvoke <org.apache.batik.gvt.font.AWTGVTFont: org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value getGlyphGeometry(org.apache.batik.gvt.font.AWTGVTFont,char,java.awt.font.GlyphVector,int,java.awt.geom.Point2D)>($r10, $c3, $r9, i0, r4);

        $r12 = virtualinvoke $r11.<org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value: java.awt.geom.Rectangle2D getBounds2D()>();

        $r13 = new java.awt.geom.Rectangle2D$Double;

        $d0 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getX()>();

        $f0 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d1 = (double) $f0;

        $d2 = $d0 * $d1;

        $d3 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getY()>();

        $f1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d4 = (double) $f1;

        $d5 = $d3 * $d4;

        $d6 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getWidth()>();

        $f2 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d7 = (double) $f2;

        $d8 = $d6 * $d7;

        $d9 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getHeight()>();

        $f3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d10 = (double) $f3;

        $d11 = $d9 * $d10;

        specialinvoke $r13.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d2, $d5, $d8, $d11);

        $r14 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions>;

        $i5 = i0 + 1;

        $r15 = $r14[$i5];

        $d12 = virtualinvoke $r15.<java.awt.geom.Point2D: double getX()>();

        $r16 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions>;

        $r17 = $r16[i0];

        $d13 = virtualinvoke $r17.<java.awt.geom.Point2D: double getX()>();

        $d14 = $d12 - $d13;

        f4 = (float) $d14;

        $r19 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics[] glyphMetrics>;

        $r18 = new org.apache.batik.gvt.font.GVTGlyphMetrics;

        $f5 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $f9 = f4 * $f5;

        $f7 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float ascent>;

        $f6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float descent>;

        $f8 = $f7 + $f6;

        specialinvoke $r18.<org.apache.batik.gvt.font.GVTGlyphMetrics: void <init>(float,float,java.awt.geom.Rectangle2D,byte)>($f9, $f8, $r13, 0);

        $r19[i0] = $r18;

        $r20 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics[] glyphMetrics>;

        $r21 = $r20[i0];

        return $r21;
    }

    public java.awt.Shape getGlyphOutline(int)
    {
        java.awt.geom.Point2D r4, $r13, $r14;
        java.awt.Shape[] $r1, $r17, $r19;
        java.awt.Shape $r2, $r12, $r18, $r20;
        java.text.CharacterIterator $r5, $r6, $r7, $r8;
        java.awt.geom.AffineTransform $r15, $r16;
        float $f0, $f1;
        int i0, $i1, $i2, $i4;
        org.apache.batik.gvt.font.AWTGVTFont $r10;
        double $d0, $d1, $d2, $d3;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        char $c3;
        java.awt.font.GlyphVector $r9;
        java.awt.geom.Point2D[] $r3;
        org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value $r11;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphOutlines>;

        $r2 = $r1[i0];

        if $r2 != null goto label2;

        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions>;

        r4 = $r3[i0];

        $r6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $r5 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $i1 = interfaceinvoke $r5.<java.text.CharacterIterator: int getBeginIndex()>();

        $i2 = $i1 + i0;

        $c3 = interfaceinvoke $r6.<java.text.CharacterIterator: char setIndex(int)>($i2);

        $r8 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $r7 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $i4 = interfaceinvoke $r7.<java.text.CharacterIterator: int getBeginIndex()>();

        interfaceinvoke $r8.<java.text.CharacterIterator: char setIndex(int)>($i4);

        $r10 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.AWTGVTFont gvtFont>;

        $r9 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        $r11 = staticinvoke <org.apache.batik.gvt.font.AWTGVTFont: org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value getGlyphGeometry(org.apache.batik.gvt.font.AWTGVTFont,char,java.awt.font.GlyphVector,int,java.awt.geom.Point2D)>($r10, $c3, $r9, i0, r4);

        $r12 = virtualinvoke $r11.<org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value: java.awt.Shape getOutline()>();

        $r13 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>(i0);

        $d0 = virtualinvoke $r13.<java.awt.geom.Point2D: double getX()>();

        $r14 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>(i0);

        $d1 = virtualinvoke $r14.<java.awt.geom.Point2D: double getY()>();

        $r15 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        $r16 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.AffineTransform getGlyphTransform(int)>(i0);

        if $r16 == null goto label1;

        virtualinvoke $r15.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r16);

     label1:
        $f0 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d3 = (double) $f0;

        $f1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d2 = (double) $f1;

        virtualinvoke $r15.<java.awt.geom.AffineTransform: void scale(double,double)>($d3, $d2);

        $r17 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphOutlines>;

        $r18 = virtualinvoke $r15.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r12);

        $r17[i0] = $r18;

     label2:
        $r19 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphOutlines>;

        $r20 = $r19[i0];

        return $r20;
    }

    static boolean outlinesPositioned()
    {
        boolean $z0;

        $z0 = <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean outlinesPositioned>;

        return $z0;
    }

    public java.awt.geom.Rectangle2D getGlyphCellBounds(int)
    {
        java.awt.Shape $r1;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        java.awt.geom.Rectangle2D $r2;
        int i0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape getGlyphLogicalBounds(int)>(i0);

        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r2;
    }

    public java.awt.geom.Point2D getGlyphPosition(int)
    {
        java.awt.geom.Point2D$Float[] $r1;
        java.awt.geom.Point2D$Float $r2;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        int i0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D$Float[] glyphPositions>;

        $r2 = $r1[i0];

        return $r2;
    }

    public float[] getGlyphPositions(int, int, float[])
    {
        java.awt.geom.Point2D $r1;
        float[] r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        double $d0, $d1;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        float $f0, $f1;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: float[];

        if r2 != null goto label1;

        $i8 = i1 * 2;

        r2 = newarray (float)[$i8];

     label1:
        i9 = i0;

        goto label3;

     label2:
        $r1 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>(i9);

        $i3 = i9 - i0;

        $i4 = $i3 * 2;

        $d0 = virtualinvoke $r1.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        r2[$i4] = $f0;

        $i5 = i9 - i0;

        $i6 = $i5 * 2;

        $i7 = $i6 + 1;

        $d1 = virtualinvoke $r1.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        r2[$i7] = $f1;

        i9 = i9 + 1;

     label3:
        $i2 = i0 + i1;

        if i9 < $i2 goto label2;

        return r2;
    }

    public java.awt.geom.AffineTransform getGlyphTransform(int)
    {
        java.awt.geom.AffineTransform[] $r1;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        int i0;
        java.awt.geom.AffineTransform $r2;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.AffineTransform[] glyphTransforms>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.awt.Shape getGlyphVisualBounds(int)
    {
        java.awt.geom.Point2D r4, $r13, $r14;
        java.awt.geom.Rectangle2D $r12;
        java.awt.Shape[] $r1, $r17, $r19;
        java.awt.Shape $r2, $r18, $r20;
        java.text.CharacterIterator $r5, $r6, $r7, $r8;
        java.awt.geom.AffineTransform $r15, $r16;
        float $f0, $f1;
        int i0, $i1, $i2, $i4;
        org.apache.batik.gvt.font.AWTGVTFont $r10;
        double $d0, $d1, $d2, $d3;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        char $c3;
        java.awt.font.GlyphVector $r9;
        java.awt.geom.Point2D[] $r3;
        org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value $r11;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphVisualBounds>;

        $r2 = $r1[i0];

        if $r2 != null goto label2;

        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions>;

        r4 = $r3[i0];

        $r6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $r5 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $i1 = interfaceinvoke $r5.<java.text.CharacterIterator: int getBeginIndex()>();

        $i2 = $i1 + i0;

        $c3 = interfaceinvoke $r6.<java.text.CharacterIterator: char setIndex(int)>($i2);

        $r8 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $r7 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $i4 = interfaceinvoke $r7.<java.text.CharacterIterator: int getBeginIndex()>();

        interfaceinvoke $r8.<java.text.CharacterIterator: char setIndex(int)>($i4);

        $r10 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.AWTGVTFont gvtFont>;

        $r9 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        $r11 = staticinvoke <org.apache.batik.gvt.font.AWTGVTFont: org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value getGlyphGeometry(org.apache.batik.gvt.font.AWTGVTFont,char,java.awt.font.GlyphVector,int,java.awt.geom.Point2D)>($r10, $c3, $r9, i0, r4);

        $r12 = virtualinvoke $r11.<org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value: java.awt.geom.Rectangle2D getOutlineBounds2D()>();

        $r13 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>(i0);

        $d0 = virtualinvoke $r13.<java.awt.geom.Point2D: double getX()>();

        $r14 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>(i0);

        $d1 = virtualinvoke $r14.<java.awt.geom.Point2D: double getY()>();

        $r15 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        $r16 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.AffineTransform getGlyphTransform(int)>(i0);

        if $r16 == null goto label1;

        virtualinvoke $r15.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r16);

     label1:
        $f0 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d3 = (double) $f0;

        $f1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d2 = (double) $f1;

        virtualinvoke $r15.<java.awt.geom.AffineTransform: void scale(double,double)>($d3, $d2);

        $r17 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphVisualBounds>;

        $r18 = virtualinvoke $r15.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r12);

        $r17[i0] = $r18;

     label2:
        $r19 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphVisualBounds>;

        $r20 = $r19[i0];

        return $r20;
    }

    public int getNumGlyphs()
    {
        int $i0;
        java.awt.font.GlyphVector $r1;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        $i0 = virtualinvoke $r1.<java.awt.font.GlyphVector: int getNumGlyphs()>();

        return $i0;
    }

    public java.awt.Shape getOutline()
    {
        java.awt.Shape $r4;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        boolean[] $r3;
        int i0, $i1;
        java.awt.geom.GeneralPath $r1, $r2, $r5, $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.GeneralPath outline>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.GeneralPath outline>;

        return $r7;

     label1:
        $r2 = new java.awt.geom.GeneralPath;

        specialinvoke $r2.<java.awt.geom.GeneralPath: void <init>()>();

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.GeneralPath outline> = $r2;

        i0 = 0;

        goto label4;

     label2:
        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean[] glyphVisible>;

        $z0 = $r3[i0];

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape getGlyphOutline(int)>(i0);

        $r5 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.GeneralPath outline>;

        virtualinvoke $r5.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r4, 0);

     label3:
        i0 = i0 + 1;

     label4:
        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        if i0 < $i1 goto label2;

        $r6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.GeneralPath outline>;

        return $r6;
    }

    public java.awt.Shape getOutline(float, float)
    {
        java.awt.Shape $r1, $r3;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        java.awt.geom.AffineTransform $r2;
        float f0, f1;
        double $d0, $d1;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape getOutline()>();

        $d1 = (double) f0;

        $d0 = (double) f1;

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d0);

        $r3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        return $r3;
    }

    public java.awt.geom.Rectangle2D getGeometricBounds()
    {
        java.awt.Shape $r3;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        java.awt.geom.Rectangle2D $r1, $r2, $r4;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D visualBounds>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape getOutline()>();

        $r4 = interfaceinvoke $r3.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D visualBounds> = $r4;

     label1:
        $r2 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D visualBounds>;

        return $r2;
    }

    public void performDefaultLayout()
    {
        java.awt.geom.Point2D $r25, r26, r27;
        java.awt.Shape[] $r3, $r4, $r5;
        java.text.CharacterIterator $r8, $r9;
        java.awt.geom.AffineTransform[] $r2;
        float $f0, f1, $f2, f3, $f4, $f5, $f6, $f7;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        java.awt.geom.Point2D$Float[] $r10, $r12, $r14, $r17, $r20, $r22;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        java.awt.font.GlyphVector $r21, $r23;
        java.awt.geom.Point2D$Float $r11, $r13, $r15, $r16, $r19;
        org.apache.batik.gvt.font.GVTGlyphMetrics[] $r6;
        java.awt.geom.Point2D[] $r1, $r7, $r18, $r24;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions>;

        if $r1 != null goto label3;

        $r21 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        virtualinvoke $r21.<java.awt.font.GlyphVector: void performDefaultLayout()>();

        $i2 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        $i3 = $i2 + 1;

        $r22 = newarray (java.awt.geom.Point2D$Float)[$i3];

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions> = $r22;

        i5 = 0;

        goto label2;

     label1:
        $r24 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions>;

        $r23 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        $r25 = virtualinvoke $r23.<java.awt.font.GlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>(i5);

        $r24[i5] = $r25;

        i5 = i5 + 1;

     label2:
        $i4 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        if i5 <= $i4 goto label1;

     label3:
        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.GeneralPath outline> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D visualBounds> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

        i6 = 0;

        goto label7;

     label4:
        $r2 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.AffineTransform[] glyphTransforms>;

        $r2[i6] = null;

        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphVisualBounds>;

        $r3[i6] = null;

        $r4 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r4[i6] = null;

        $r5 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphOutlines>;

        $r5[i6] = null;

        $r6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics[] glyphMetrics>;

        $r6[i6] = null;

        $r7 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions>;

        r26 = $r7[i6];

        $d0 = virtualinvoke r26.<java.awt.geom.Point2D: double getX()>();

        $f0 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d1 = (double) $f0;

        $d3 = $d0 * $d1;

        $d2 = (double) 0.0F;

        $d4 = $d3 - $d2;

        f1 = (float) $d4;

        $d5 = virtualinvoke r26.<java.awt.geom.Point2D: double getY()>();

        $f2 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d6 = (double) $f2;

        $d7 = $d5 * $d6;

        f3 = (float) $d7;

        $r9 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $r8 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $i0 = interfaceinvoke $r8.<java.text.CharacterIterator: int getBeginIndex()>();

        $i1 = i6 + $i0;

        interfaceinvoke $r9.<java.text.CharacterIterator: char setIndex(int)>($i1);

        $r10 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D$Float[] glyphPositions>;

        $r11 = $r10[i6];

        if $r11 != null goto label5;

        $r17 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D$Float[] glyphPositions>;

        $r16 = new java.awt.geom.Point2D$Float;

        specialinvoke $r16.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f1, f3);

        $r17[i6] = $r16;

        goto label6;

     label5:
        $r12 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D$Float[] glyphPositions>;

        $r13 = $r12[i6];

        $r13.<java.awt.geom.Point2D$Float: float x> = f1;

        $r14 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D$Float[] glyphPositions>;

        $r15 = $r14[i6];

        $r15.<java.awt.geom.Point2D$Float: float y> = f3;

     label6:
        i6 = i6 + 1;

     label7:
        $i7 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        if i6 < $i7 goto label4;

        $r18 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions>;

        r27 = $r18[i6];

        $r20 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D$Float[] glyphPositions>;

        $r19 = new java.awt.geom.Point2D$Float;

        $d8 = virtualinvoke r27.<java.awt.geom.Point2D: double getX()>();

        $f4 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d9 = (double) $f4;

        $d11 = $d8 * $d9;

        $d10 = (double) 0.0F;

        $d12 = $d11 - $d10;

        $f5 = (float) $d12;

        $d13 = virtualinvoke r27.<java.awt.geom.Point2D: double getY()>();

        $f6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        $d14 = (double) $f6;

        $d15 = $d13 * $d14;

        $f7 = (float) $d15;

        specialinvoke $r19.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f5, $f7);

        $r20[i6] = $r19;

        return;
    }

    public void setGlyphPosition(int, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r2;
        java.awt.Shape[] $r6, $r7, $r8;
        int i0, $i1;
        double $d0, $d1;
        java.awt.geom.Point2D$Float[] $r1, $r4;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        java.awt.geom.Point2D$Float $r3, $r5;
        float $f0, $f1;
        org.apache.batik.gvt.font.GVTGlyphMetrics[] $r9;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        r2 := @parameter1: java.awt.geom.Point2D;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D$Float[] glyphPositions>;

        $r3 = $r1[i0];

        $d0 = virtualinvoke r2.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        $r3.<java.awt.geom.Point2D$Float: float x> = $f0;

        $r4 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D$Float[] glyphPositions>;

        $r5 = $r4[i0];

        $d1 = virtualinvoke r2.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        $r5.<java.awt.geom.Point2D$Float: float y> = $f1;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.GeneralPath outline> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D visualBounds> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        if i0 == $i1 goto label1;

        $r6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphVisualBounds>;

        $r6[i0] = null;

        $r7 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r7[i0] = null;

        $r8 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphOutlines>;

        $r8[i0] = null;

        $r9 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics[] glyphMetrics>;

        $r9[i0] = null;

     label1:
        return;
    }

    public void setGlyphTransform(int, java.awt.geom.AffineTransform)
    {
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        java.awt.geom.AffineTransform r1;
        java.awt.geom.AffineTransform[] $r2;
        java.awt.Shape[] $r3, $r4, $r5;
        int i0;
        org.apache.batik.gvt.font.GVTGlyphMetrics[] $r6;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.awt.geom.AffineTransform;

        $r2 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.AffineTransform[] glyphTransforms>;

        $r2[i0] = r1;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.GeneralPath outline> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D visualBounds> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphVisualBounds>;

        $r3[i0] = null;

        $r4 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r4[i0] = null;

        $r5 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphOutlines>;

        $r5[i0] = null;

        $r6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics[] glyphMetrics>;

        $r6[i0] = null;

        return;
    }

    public void setGlyphVisible(int, boolean)
    {
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        boolean[] $r1, $r2;
        java.awt.Shape[] $r3, $r4, $r5;
        int i0;
        org.apache.batik.gvt.font.GVTGlyphMetrics[] $r6;
        boolean z0, $z1;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean[] glyphVisible>;

        $z1 = $r1[i0];

        if z0 != $z1 goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean[] glyphVisible>;

        $r2[i0] = z0;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.GeneralPath outline> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D visualBounds> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D logicalBounds> = null;

        r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Rectangle2D bounds2D> = null;

        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphVisualBounds>;

        $r3[i0] = null;

        $r4 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphLogicalBounds>;

        $r4[i0] = null;

        $r5 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape[] glyphOutlines>;

        $r5[i0] = null;

        $r6 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics[] glyphMetrics>;

        $r6[i0] = null;

        return;
    }

    public boolean isGlyphVisible(int)
    {
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        int i0;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean[] glyphVisible>;

        $z0 = $r1[i0];

        return $z0;
    }

    public int getCharacterCount(int, int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        java.text.CharacterIterator $r1, $r2, $r3, $r4, $r5;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        char c11;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        i8 := @parameter0: int;

        i9 := @parameter1: int;

        if i8 >= 0 goto label1;

        i8 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        if i9 < $i0 goto label2;

        $i5 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        i9 = $i5 - 1;

     label2:
        i10 = 0;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $i1 = interfaceinvoke $r1.<java.text.CharacterIterator: int getBeginIndex()>();

        $i6 = i8 + $i1;

        $r2 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $i2 = interfaceinvoke $r2.<java.text.CharacterIterator: int getBeginIndex()>();

        $i7 = i9 + $i2;

        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        c11 = interfaceinvoke $r3.<java.text.CharacterIterator: char setIndex(int)>($i6);

        goto label4;

     label3:
        $i4 = staticinvoke <org.apache.batik.gvt.text.ArabicTextHandler: int getNumChars(char)>(c11);

        i10 = i10 + $i4;

        $r5 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        c11 = interfaceinvoke $r5.<java.text.CharacterIterator: char next()>();

     label4:
        $r4 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.CharacterIterator ci>;

        $i3 = interfaceinvoke $r4.<java.text.CharacterIterator: int getIndex()>();

        if $i3 <= $i7 goto label3;

        return i10;
    }

    public void draw(java.awt.Graphics2D, java.text.AttributedCharacterIterator)
    {
        byte $b1, $b2, $b3, $b4;
        java.awt.geom.AffineTransform $r18, r25, r28, $r34;
        java.awt.geom.AffineTransform[] $r11, $r17;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r2;
        double[] r26;
        java.awt.geom.Point2D$Double $r35;
        java.awt.Stroke r6;
        org.apache.batik.gvt.font.AWTGVTGlyphVector r0;
        boolean[] $r16;
        java.awt.font.GlyphVector $r12, $r14, $r15, $r31, $r32;
        java.awt.geom.Point2D$Float r27;
        java.awt.RenderingHints$Key $r19, $r21;
        java.awt.geom.Point2D[] $r13;
        java.awt.geom.Point2D r33;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.awt.Shape $r8;
        java.text.AttributedCharacterIterator r1;
        java.awt.Paint r5, r7;
        float $f0;
        java.awt.Graphics2D r9;
        int $i0, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, $i16;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11, d12, $d13, $d14;
        java.awt.geom.Point2D$Float[] $r10;
        org.apache.batik.gvt.text.TextPaintInfo r4;
        java.lang.Object $r3, $r20, $r22, $r23, $r24;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTGlyphVector;

        r9 := @parameter0: java.awt.Graphics2D;

        r1 := @parameter1: java.text.AttributedCharacterIterator;

        $i0 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: int getNumGlyphs()>();

        interfaceinvoke r1.<java.text.CharacterIterator: char first()>();

        $r2 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute PAINT_INFO>;

        $r3 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r2);

        r4 = (org.apache.batik.gvt.text.TextPaintInfo) $r3;

        if r4 != null goto label01;

        return;

     label01:
        $z0 = r4.<org.apache.batik.gvt.text.TextPaintInfo: boolean visible>;

        if $z0 != 0 goto label02;

        return;

     label02:
        r5 = r4.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        r6 = r4.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        r7 = r4.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        if r5 != null goto label04;

        if r7 == null goto label03;

        if r6 != null goto label04;

     label03:
        return;

     label04:
        $z4 = <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean drawGlyphVectorWorks>;

        z5 = $z4;

        if $z4 == 0 goto label05;

        if r6 == null goto label05;

        if r7 == null goto label05;

        z5 = 0;

     label05:
        if z5 == 0 goto label06;

        if r5 == null goto label06;

        $z3 = r5 instanceof java.awt.Color;

        if $z3 != 0 goto label06;

        z5 = 0;

     label06:
        if z5 == 0 goto label07;

        $r19 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r20 = virtualinvoke r9.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r19);

        $r21 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $r22 = virtualinvoke r9.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r21);

        $r23 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        if $r20 != $r23 goto label07;

        $r24 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_PURE>;

        if $r22 != $r24 goto label07;

        z5 = 0;

     label07:
        if z5 == 0 goto label09;

        $r18 = virtualinvoke r9.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $i9 = virtualinvoke $r18.<java.awt.geom.AffineTransform: int getType()>();

        $i10 = $i9 & 32;

        if $i10 != 0 goto label08;

        $i11 = $i9 & 16;

        if $i11 == 0 goto label09;

     label08:
        z5 = 0;

     label09:
        if z5 == 0 goto label16;

        i12 = 0;

        goto label15;

     label10:
        $r16 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean[] glyphVisible>;

        $z1 = $r16[i12];

        if $z1 != 0 goto label11;

        z5 = 0;

        goto label16;

     label11:
        $r17 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.AffineTransform[] glyphTransforms>;

        r25 = $r17[i12];

        if r25 == null goto label14;

        $i5 = virtualinvoke r25.<java.awt.geom.AffineTransform: int getType()>();

        $i16 = (int) -2;

        $i6 = $i5 & $i16;

        if $i6 != 0 goto label12;

        goto label14;

     label12:
        $z2 = <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean glyphVectorTransformWorks>;

        if $z2 == 0 goto label13;

        $i7 = $i5 & 32;

        if $i7 != 0 goto label13;

        $i8 = $i5 & 16;

        if $i8 != 0 goto label13;

        goto label14;

     label13:
        z5 = 0;

        goto label16;

     label14:
        i12 = i12 + 1;

     label15:
        if i12 < $i0 goto label10;

     label16:
        if z5 == 0 goto label24;

        $f0 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: float scaleFactor>;

        d10 = (double) $f0;

        r26 = newarray (double)[6];

        i13 = 0;

        goto label21;

     label17:
        $r10 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D$Float[] glyphPositions>;

        r27 = $r10[i13];

        $d0 = virtualinvoke r27.<java.awt.geom.Point2D: double getX()>();

        d11 = $d0;

        $d1 = virtualinvoke r27.<java.awt.geom.Point2D: double getY()>();

        d12 = $d1;

        $r11 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.AffineTransform[] glyphTransforms>;

        r28 = $r11[i13];

        if r28 == null goto label20;

        virtualinvoke r28.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r26);

        $d2 = r26[4];

        d11 = $d0 + $d2;

        $d3 = r26[5];

        d12 = $d1 + $d3;

        $d4 = r26[0];

        $b1 = $d4 cmpl 1.0;

        if $b1 != 0 goto label18;

        $d5 = r26[1];

        $b2 = $d5 cmpl 0.0;

        if $b2 != 0 goto label18;

        $d6 = r26[2];

        $b3 = $d6 cmpl 0.0;

        if $b3 != 0 goto label18;

        $d7 = r26[3];

        $b4 = $d7 cmpl 1.0;

        if $b4 == 0 goto label19;

     label18:
        r26[4] = 0.0;

        r26[5] = 0.0;

        $r34 = new java.awt.geom.AffineTransform;

        specialinvoke $r34.<java.awt.geom.AffineTransform: void <init>(double[])>(r26);

        r28 = $r34;

        goto label20;

     label19:
        r28 = null;

     label20:
        $r35 = new java.awt.geom.Point2D$Double;

        $d13 = d11 / d10;

        $d14 = d12 / d10;

        specialinvoke $r35.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d13, $d14);

        $r31 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        virtualinvoke $r31.<java.awt.font.GlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>(i13, $r35);

        $r32 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        virtualinvoke $r32.<java.awt.font.GlyphVector: void setGlyphTransform(int,java.awt.geom.AffineTransform)>(i13, r28);

        i13 = i13 + 1;

     label21:
        if i13 < $i0 goto label17;

        virtualinvoke r9.<java.awt.Graphics2D: void scale(double,double)>(d10, d10);

        virtualinvoke r9.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r5);

        $r12 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        virtualinvoke r9.<java.awt.Graphics2D: void drawGlyphVector(java.awt.font.GlyphVector,float,float)>($r12, 0.0F, 0.0F);

        $d9 = 1.0 / d10;

        $d8 = 1.0 / d10;

        virtualinvoke r9.<java.awt.Graphics2D: void scale(double,double)>($d9, $d8);

        i14 = 0;

        goto label23;

     label22:
        $r13 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.geom.Point2D[] defaultGlyphPositions>;

        r33 = $r13[i14];

        $r14 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        virtualinvoke $r14.<java.awt.font.GlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>(i14, r33);

        $r15 = r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.font.GlyphVector awtGlyphVector>;

        virtualinvoke $r15.<java.awt.font.GlyphVector: void setGlyphTransform(int,java.awt.geom.AffineTransform)>(i14, null);

        i14 = i14 + 1;

     label23:
        if i14 < $i0 goto label22;

        goto label26;

     label24:
        $r8 = virtualinvoke r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: java.awt.Shape getOutline()>();

        if r5 == null goto label25;

        virtualinvoke r9.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r5);

        virtualinvoke r9.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r8);

     label25:
        if r6 == null goto label26;

        if r7 == null goto label26;

        virtualinvoke r9.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(r6);

        virtualinvoke r9.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r7);

        virtualinvoke r9.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r8);

     label26:
        return;
    }

    static void <clinit>()
    {
        int $i0;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0;

        $r0 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute PAINT_INFO>;

        <org.apache.batik.gvt.font.AWTGVTGlyphVector: java.text.AttributedCharacterIterator$Attribute PAINT_INFO> = $r0;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.specification.version");

        $r2 = "1.4";

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r1);

        if $i0 > 0 goto label1;

        <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean outlinesPositioned> = 1;

        <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean drawGlyphVectorWorks> = 1;

        <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean glyphVectorTransformWorks> = 1;

        goto label3;

     label1:
        $r3 = "Mac OS X";

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean outlinesPositioned> = 1;

        <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean drawGlyphVectorWorks> = 0;

        <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean glyphVectorTransformWorks> = 0;

        goto label3;

     label2:
        <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean outlinesPositioned> = 0;

        <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean drawGlyphVectorWorks> = 1;

        <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean glyphVectorTransformWorks> = 0;

     label3:
        return;
    }
}
