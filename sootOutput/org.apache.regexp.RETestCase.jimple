final class org.apache.regexp.RETestCase extends java.lang.Object
{
    private final java.lang.StringBuffer log;
    private final int number;
    private final java.lang.String tag;
    private final java.lang.String pattern;
    private final java.lang.String toMatch;
    private final boolean badPattern;
    private final boolean shouldMatch;
    private final java.lang.String[] parens;
    private final org.apache.regexp.RETest test;
    private org.apache.regexp.RE regexp;

    public void <init>(org.apache.regexp.RETest, java.lang.String, java.lang.String, java.lang.String, boolean, boolean, java.lang.String[])
    {
        org.apache.regexp.RETest r2;
        java.lang.String[] r6, $r7, $r9;
        java.lang.StringBuffer $r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r3, r4, r5, $r8;
        boolean z0, z1;
        org.apache.regexp.RETestCase r0;

        r0 := @this: org.apache.regexp.RETestCase;

        r2 := @parameter0: org.apache.regexp.RETest;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        r6 := @parameter6: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log> = $r1;

        $i0 = r2.<org.apache.regexp.RETest: int testCount>;

        $i1 = $i0 + 1;

        r2.<org.apache.regexp.RETest: int testCount> = $i1;

        r0.<org.apache.regexp.RETestCase: int number> = $i1;

        r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test> = r2;

        r0.<org.apache.regexp.RETestCase: java.lang.String tag> = r3;

        r0.<org.apache.regexp.RETestCase: java.lang.String pattern> = r4;

        r0.<org.apache.regexp.RETestCase: java.lang.String toMatch> = r5;

        r0.<org.apache.regexp.RETestCase: boolean badPattern> = z0;

        r0.<org.apache.regexp.RETestCase: boolean shouldMatch> = z1;

        if r6 == null goto label3;

        $i2 = lengthof r6;

        $r7 = newarray (java.lang.String)[$i2];

        r0.<org.apache.regexp.RETestCase: java.lang.String[] parens> = $r7;

        i4 = 0;

        goto label2;

     label1:
        $r9 = r0.<org.apache.regexp.RETestCase: java.lang.String[] parens>;

        $r8 = r6[i4];

        $r9[i4] = $r8;

        i4 = i4 + 1;

     label2:
        $i3 = lengthof r6;

        if i4 < $i3 goto label1;

        goto label4;

     label3:
        r0.<org.apache.regexp.RETestCase: java.lang.String[] parens> = null;

     label4:
        return;
    }

    public void runTest()
    {
        org.apache.regexp.RETest $r2;
        org.apache.regexp.RETestCase r0;
        java.lang.StringBuffer $r1, $r4, $r5, $r6, $r7, $r9;
        int $i0;
        java.lang.String $r3, $r8, $r10;
        boolean $z0;

        r0 := @this: org.apache.regexp.RETestCase;

        $r2 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = r0.<org.apache.regexp.RETestCase: java.lang.String tag>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $i0 = r0.<org.apache.regexp.RETestCase: int number>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("): ");

        $r8 = r0.<org.apache.regexp.RETestCase: java.lang.String pattern>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<org.apache.regexp.RETest: void say(java.lang.String)>($r10);

        $z0 = virtualinvoke r0.<org.apache.regexp.RETestCase: boolean testCreation()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.regexp.RETestCase: void testMatch()>();

     label1:
        return;
    }

    boolean testCreation()
    {
        org.apache.regexp.RE $r1, $r5;
        boolean $z0, $z1;
        org.apache.regexp.RETestCase r0;
        java.lang.Exception $r18;
        org.apache.regexp.RETest $r2, $r8, $r11, $r21;
        java.lang.Error $r9;
        java.lang.StringBuffer $r7, $r10, $r12, $r13, $r15, $r16, $r20, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r31, $r32;
        java.lang.String $r3, $r14, $r17, $r19, $r26, $r30, $r33, $r34;
        org.apache.regexp.REDebugCompiler $r4;
        org.apache.regexp.REProgram $r6;

        r0 := @this: org.apache.regexp.RETestCase;

     label1:
        $r1 = new org.apache.regexp.RE;

        specialinvoke $r1.<org.apache.regexp.RE: void <init>()>();

        r0.<org.apache.regexp.RETestCase: org.apache.regexp.RE regexp> = $r1;

        $r5 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RE regexp>;

        $r2 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r4 = $r2.<org.apache.regexp.RETest: org.apache.regexp.REDebugCompiler compiler>;

        $r3 = r0.<org.apache.regexp.RETestCase: java.lang.String pattern>;

        $r6 = virtualinvoke $r4.<org.apache.regexp.RECompiler: org.apache.regexp.REProgram compile(java.lang.String)>($r3);

        virtualinvoke $r5.<org.apache.regexp.RE: void setProgram(org.apache.regexp.REProgram)>($r6);

        $z0 = r0.<org.apache.regexp.RETestCase: boolean badPattern>;

        if $z0 == 0 goto label2;

        $r8 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r7 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        virtualinvoke $r8.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>($r7, "Was expected to be an error, but wasn\'t.");

        return 0;

     label2:
        return 1;

     label3:
        $r18 := @caughtexception;

        $z1 = r0.<org.apache.regexp.RETestCase: boolean badPattern>;

        if $z1 == 0 goto label4;

        $r27 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   Match: ERR\n");

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Produces an error (");

        $r30 = virtualinvoke $r18.<java.lang.Throwable: java.lang.String toString()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("), as expected.");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RETestCase: void success(java.lang.String)>($r33);

        return 0;

     label4:
        $r19 = virtualinvoke $r18.<java.lang.Throwable: java.lang.String getMessage()>();

        if $r19 != null goto label5;

        $r34 = virtualinvoke $r18.<java.lang.Throwable: java.lang.String toString()>();

        goto label6;

     label5:
        $r34 = virtualinvoke $r18.<java.lang.Throwable: java.lang.String getMessage()>();

     label6:
        $r21 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r22 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Produces an unexpected exception \"");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r21.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>($r22, $r26);

        virtualinvoke $r18.<java.lang.Throwable: void printStackTrace()>();

        goto label8;

     label7:
        $r9 := @caughtexception;

        $r11 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r12 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Compiler threw fatal error \"");

        $r14 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>($r12, $r17);

        virtualinvoke $r9.<java.lang.Throwable: void printStackTrace()>();

     label8:
        return 0;

        catch java.lang.Exception from label1 to label3 with label3;
        catch java.lang.Error from label1 to label3 with label7;
    }

    private void testMatch()
    {
        org.apache.regexp.RE $r9;
        org.apache.regexp.StreamCharacterIterator $r25;
        org.apache.regexp.ReaderCharacterIterator $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.regexp.RETestCase r0;
        java.lang.Exception $r41;
        org.apache.regexp.RETest $r34, $r43;
        java.lang.Error $r32;
        java.io.StringBufferInputStream $r26;
        java.lang.StringBuffer $r1, $r2, $r3, $r5, $r6, $r10, $r11, $r12, $r13, $r14, $r16, $r19, $r24, $r28, $r33, $r35, $r36, $r38, $r39, $r42, $r44, $r45, $r47;
        int $i0;
        java.lang.String $r4, $r7, $r8, $r15, $r18, $r21, $r23, $r27, $r31, $r37, $r40, $r46, $r48, $r49;
        org.apache.regexp.StringCharacterIterator $r17;
        java.io.StringReader $r30;
        org.apache.regexp.CharacterArrayCharacterIterator $r20;
        char[] $r22;

        r0 := @this: org.apache.regexp.RETestCase;

        $r2 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   Match against: \'");

        $r4 = r0.<org.apache.regexp.RETestCase: java.lang.String toMatch>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label01:
        $r9 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RE regexp>;

        $r8 = r0.<org.apache.regexp.RETestCase: java.lang.String toMatch>;

        $z0 = virtualinvoke $r9.<org.apache.regexp.RE: boolean match(java.lang.String)>($r8);

        $r11 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   Matched: ");

        if $z0 == 0 goto label02;

        $r49 = "YES";

        goto label03;

     label02:
        $r49 = "NO";

     label03:
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r49);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $z1 = specialinvoke r0.<org.apache.regexp.RETestCase: boolean checkResult(boolean)>($z0);

        if $z1 == 0 goto label08;

        $z2 = r0.<org.apache.regexp.RETestCase: boolean shouldMatch>;

        if $z2 == 0 goto label04;

        $z7 = specialinvoke r0.<org.apache.regexp.RETestCase: boolean checkParens()>();

        if $z7 == 0 goto label08;

     label04:
        $r16 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   Match using StringCharacterIterator\n");

        $r17 = new org.apache.regexp.StringCharacterIterator;

        $r18 = r0.<org.apache.regexp.RETestCase: java.lang.String toMatch>;

        specialinvoke $r17.<org.apache.regexp.StringCharacterIterator: void <init>(java.lang.String)>($r18);

        $z3 = virtualinvoke r0.<org.apache.regexp.RETestCase: boolean tryMatchUsingCI(org.apache.regexp.CharacterIterator)>($r17);

        if $z3 != 0 goto label05;

        return;

     label05:
        $r19 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   Match using CharacterArrayCharacterIterator\n");

        $r20 = new org.apache.regexp.CharacterArrayCharacterIterator;

        $r21 = r0.<org.apache.regexp.RETestCase: java.lang.String toMatch>;

        $r22 = virtualinvoke $r21.<java.lang.String: char[] toCharArray()>();

        $r23 = r0.<org.apache.regexp.RETestCase: java.lang.String toMatch>;

        $i0 = virtualinvoke $r23.<java.lang.String: int length()>();

        specialinvoke $r20.<org.apache.regexp.CharacterArrayCharacterIterator: void <init>(char[],int,int)>($r22, 0, $i0);

        $z4 = virtualinvoke r0.<org.apache.regexp.RETestCase: boolean tryMatchUsingCI(org.apache.regexp.CharacterIterator)>($r20);

        if $z4 != 0 goto label06;

        return;

     label06:
        $r24 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   Match using StreamCharacterIterator\n");

        $r25 = new org.apache.regexp.StreamCharacterIterator;

        $r26 = new java.io.StringBufferInputStream;

        $r27 = r0.<org.apache.regexp.RETestCase: java.lang.String toMatch>;

        specialinvoke $r26.<java.io.StringBufferInputStream: void <init>(java.lang.String)>($r27);

        specialinvoke $r25.<org.apache.regexp.StreamCharacterIterator: void <init>(java.io.InputStream)>($r26);

        $z5 = virtualinvoke r0.<org.apache.regexp.RETestCase: boolean tryMatchUsingCI(org.apache.regexp.CharacterIterator)>($r25);

        if $z5 != 0 goto label07;

        return;

     label07:
        $r28 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   Match using ReaderCharacterIterator\n");

        $r29 = new org.apache.regexp.ReaderCharacterIterator;

        $r30 = new java.io.StringReader;

        $r31 = r0.<org.apache.regexp.RETestCase: java.lang.String toMatch>;

        specialinvoke $r30.<java.io.StringReader: void <init>(java.lang.String)>($r31);

        specialinvoke $r29.<org.apache.regexp.ReaderCharacterIterator: void <init>(java.io.Reader)>($r30);

        $z6 = virtualinvoke r0.<org.apache.regexp.RETestCase: boolean tryMatchUsingCI(org.apache.regexp.CharacterIterator)>($r29);

        if $z6 != 0 goto label08;

        return;

     label08:
        goto label11;

     label09:
        $r41 := @caughtexception;

        $r43 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r44 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Matcher threw exception: ");

        $r46 = virtualinvoke $r41.<java.lang.Throwable: java.lang.String toString()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r43.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>($r44, $r48);

        virtualinvoke $r41.<java.lang.Throwable: void printStackTrace()>();

        goto label11;

     label10:
        $r32 := @caughtexception;

        $r34 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r35 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Matcher threw fatal error \"");

        $r37 = virtualinvoke $r32.<java.lang.Throwable: java.lang.String getMessage()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r34.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>($r35, $r40);

        virtualinvoke $r32.<java.lang.Throwable: void printStackTrace()>();

     label11:
        return;

        catch java.lang.Exception from label01 to label08 with label09;
        catch java.lang.Error from label01 to label08 with label10;
    }

    private boolean checkResult(boolean)
    {
        org.apache.regexp.RETest $r2, $r10;
        java.lang.StringBuffer $r1, $r3, $r4, $r6, $r7, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r21, $r22;
        java.lang.String $r5, $r8, $r13, $r16, $r20, $r23, $r24;
        boolean z0, $z1, $z2, $z3;
        org.apache.regexp.RETestCase r0;

        r0 := @this: org.apache.regexp.RETestCase;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.regexp.RETestCase: boolean shouldMatch>;

        if z0 != $z1 goto label3;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $z3 = r0.<org.apache.regexp.RETestCase: boolean shouldMatch>;

        if $z3 == 0 goto label1;

        $r24 = "Matched";

        goto label2;

     label1:
        $r24 = "Did not match";

     label2:
        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" \"");

        $r20 = r0.<org.apache.regexp.RETestCase: java.lang.String toMatch>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\", as expected:");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RETestCase: void success(java.lang.String)>($r23);

        return 1;

     label3:
        $z2 = r0.<org.apache.regexp.RETestCase: boolean shouldMatch>;

        if $z2 == 0 goto label4;

        $r10 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r11 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Did not match \"");

        $r13 = r0.<org.apache.regexp.RETestCase: java.lang.String toMatch>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\", when expected to.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>($r11, $r16);

        goto label5;

     label4:
        $r2 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r3 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Matched \"");

        $r5 = r0.<org.apache.regexp.RETestCase: java.lang.String toMatch>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\", when not expected to.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>($r3, $r8);

     label5:
        return 0;
    }

    private boolean checkParens()
    {
        org.apache.regexp.RE $r4, $r9, $r16, $r30, $r33, $r35;
        boolean $z0, $z1, $z2;
        org.apache.regexp.RETestCase r0;
        java.lang.String[] $r8, $r21, $r29;
        java.lang.StringBuffer $r1, $r2, $r3, $r5, $r6, $r10, $r11, $r12, $r13, $r14, $r15, $r18, $r19, $r24, $r25, $r26, $r27;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.String $r7, $r17, $r20, $r22, $r23, $r28, $r31, $r32, $r34;

        r0 := @this: org.apache.regexp.RETestCase;

        $r2 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   Paren count: ");

        $r4 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RE regexp>;

        $i0 = virtualinvoke $r4.<org.apache.regexp.RE: int getParenCount()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r10 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r8 = r0.<org.apache.regexp.RETestCase: java.lang.String[] parens>;

        $i1 = lengthof $r8;

        $r9 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RE regexp>;

        $i2 = virtualinvoke $r9.<org.apache.regexp.RE: int getParenCount()>();

        $z0 = virtualinvoke r0.<org.apache.regexp.RETestCase: boolean assertEquals(java.lang.StringBuffer,java.lang.String,int,int)>($r10, "Wrong number of parens", $i1, $i2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        i3 = 0;

        goto label5;

     label2:
        $r12 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   Paren ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r16 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RE regexp>;

        $r17 = virtualinvoke $r16.<org.apache.regexp.RE: java.lang.String getParen(int)>(i3);

        $r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r23 = "null";

        $r21 = r0.<org.apache.regexp.RETestCase: java.lang.String[] parens>;

        $r22 = $r21[i3];

        $z1 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z1 == 0 goto label3;

        $r33 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RE regexp>;

        $r34 = virtualinvoke $r33.<org.apache.regexp.RE: java.lang.String getParen(int)>(i3);

        if $r34 != null goto label3;

        goto label4;

     label3:
        $r25 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong register ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        $r29 = r0.<org.apache.regexp.RETestCase: java.lang.String[] parens>;

        $r31 = $r29[i3];

        $r30 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RE regexp>;

        $r32 = virtualinvoke $r30.<org.apache.regexp.RE: java.lang.String getParen(int)>(i3);

        $z2 = virtualinvoke r0.<org.apache.regexp.RETestCase: boolean assertEquals(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String)>($r25, $r28, $r31, $r32);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

     label5:
        $r35 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RE regexp>;

        $i4 = virtualinvoke $r35.<org.apache.regexp.RE: int getParenCount()>();

        if i3 < $i4 goto label2;

        return 1;
    }

    boolean tryMatchUsingCI(org.apache.regexp.CharacterIterator)
    {
        org.apache.regexp.RE $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.regexp.RETestCase r0;
        java.lang.Exception $r18;
        org.apache.regexp.CharacterIterator r1;
        org.apache.regexp.RETest $r11, $r20;
        java.lang.Error $r9;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r10, $r12, $r13, $r15, $r16, $r19, $r21, $r22, $r24;
        java.lang.String $r8, $r14, $r17, $r23, $r25, $r26;

        r0 := @this: org.apache.regexp.RETestCase;

        r1 := @parameter0: org.apache.regexp.CharacterIterator;

     label1:
        $r2 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RE regexp>;

        $z0 = virtualinvoke $r2.<org.apache.regexp.RE: boolean match(org.apache.regexp.CharacterIterator,int)>(r1, 0);

        $r4 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   Match: ");

        if $z0 == 0 goto label2;

        $r26 = "YES";

        goto label3;

     label2:
        $r26 = "NO";

     label3:
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $z1 = specialinvoke r0.<org.apache.regexp.RETestCase: boolean checkResult(boolean)>($z0);

        if $z1 == 0 goto label5;

        $z2 = r0.<org.apache.regexp.RETestCase: boolean shouldMatch>;

        if $z2 == 0 goto label4;

        $z3 = specialinvoke r0.<org.apache.regexp.RETestCase: boolean checkParens()>();

        if $z3 == 0 goto label5;

     label4:
        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        return $z4;

     label7:
        $r18 := @caughtexception;

        $r20 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r21 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Matcher threw exception: ");

        $r23 = virtualinvoke $r18.<java.lang.Throwable: java.lang.String toString()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r20.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>($r21, $r25);

        virtualinvoke $r18.<java.lang.Throwable: void printStackTrace()>();

        goto label9;

     label8:
        $r9 := @caughtexception;

        $r11 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r12 = r0.<org.apache.regexp.RETestCase: java.lang.StringBuffer log>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Matcher threw fatal error \"");

        $r14 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>($r12, $r17);

        virtualinvoke $r9.<java.lang.Throwable: void printStackTrace()>();

     label9:
        return 0;

        catch java.lang.Exception from label1 to label7 with label7;
        catch java.lang.Error from label1 to label7 with label8;
    }

    public boolean assertEquals(java.lang.StringBuffer, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.regexp.RETest $r5;
        java.lang.StringBuffer r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String r0, r1, r6, $r13;
        boolean $z0, $z1;
        org.apache.regexp.RETestCase r2;

        r2 := @this: org.apache.regexp.RETestCase;

        r3 := @parameter0: java.lang.StringBuffer;

        r6 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        if r0 == null goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label3;

     label2:
        $r5 = r2.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (expected \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\", actual \"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>(r3, $r13);

        return 0;

     label3:
        return 1;
    }

    public boolean assertEquals(java.lang.StringBuffer, java.lang.String, int, int)
    {
        org.apache.regexp.RETest $r3;
        org.apache.regexp.RETestCase r0;
        java.lang.StringBuffer r1, $r2, $r5, $r6, $r7, $r8, $r9, $r10;
        int i0, i1;
        java.lang.String r4, $r11;

        r0 := @this: org.apache.regexp.RETestCase;

        r1 := @parameter0: java.lang.StringBuffer;

        r4 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i0 == i1 goto label1;

        $r3 = r0.<org.apache.regexp.RETestCase: org.apache.regexp.RETest test>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (expected \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\", actual \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.regexp.RETest: void fail(java.lang.StringBuffer,java.lang.String)>(r1, $r11);

        return 0;

     label1:
        return 1;
    }

    void success(java.lang.String)
    {
        java.lang.String r1;
        org.apache.regexp.RETestCase r0;

        r0 := @this: org.apache.regexp.RETestCase;

        r1 := @parameter0: java.lang.String;

        return;
    }
}
