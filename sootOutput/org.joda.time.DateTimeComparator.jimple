public class org.joda.time.DateTimeComparator extends java.lang.Object implements java.util.Comparator, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final org.joda.time.DateTimeComparator ALL_INSTANCE;
    private static final org.joda.time.DateTimeComparator DATE_INSTANCE;
    private static final org.joda.time.DateTimeComparator TIME_INSTANCE;
    private final org.joda.time.DateTimeFieldType iLowerLimit;
    private final org.joda.time.DateTimeFieldType iUpperLimit;

    public static org.joda.time.DateTimeComparator getInstance()
    {
        org.joda.time.DateTimeComparator $r0;

        $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator ALL_INSTANCE>;

        return $r0;
    }

    public static org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.DateTimeComparator $r1;
        org.joda.time.DateTimeFieldType r0;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        $r1 = staticinvoke <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, null);

        return $r1;
    }

    public static org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType, org.joda.time.DateTimeFieldType)
    {
        org.joda.time.DateTimeComparator $r2, $r5, $r6, $r7;
        org.joda.time.DateTimeFieldType r0, $r1, r3, $r4;

        r0 := @parameter0: org.joda.time.DateTimeFieldType;

        r3 := @parameter1: org.joda.time.DateTimeFieldType;

        if r0 != null goto label1;

        if r3 != null goto label1;

        $r7 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator ALL_INSTANCE>;

        return $r7;

     label1:
        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        if r0 != $r1 goto label2;

        if r3 != null goto label2;

        $r6 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator DATE_INSTANCE>;

        return $r6;

     label2:
        if r0 != null goto label3;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        if r3 != $r4 goto label3;

        $r5 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator TIME_INSTANCE>;

        return $r5;

     label3:
        $r2 = new org.joda.time.DateTimeComparator;

        specialinvoke $r2.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, r3);

        return $r2;
    }

    public static org.joda.time.DateTimeComparator getDateOnlyInstance()
    {
        org.joda.time.DateTimeComparator $r0;

        $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator DATE_INSTANCE>;

        return $r0;
    }

    public static org.joda.time.DateTimeComparator getTimeOnlyInstance()
    {
        org.joda.time.DateTimeComparator $r0;

        $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator TIME_INSTANCE>;

        return $r0;
    }

    protected void <init>(org.joda.time.DateTimeFieldType, org.joda.time.DateTimeFieldType)
    {
        org.joda.time.DateTimeComparator r0;
        org.joda.time.DateTimeFieldType r1, r2;

        r0 := @this: org.joda.time.DateTimeComparator;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        r2 := @parameter1: org.joda.time.DateTimeFieldType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit> = r1;

        r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> = r2;

        return;
    }

    public org.joda.time.DateTimeFieldType getLowerLimit()
    {
        org.joda.time.DateTimeComparator r0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.DateTimeComparator;

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        return $r1;
    }

    public org.joda.time.DateTimeFieldType getUpperLimit()
    {
        org.joda.time.DateTimeComparator r0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.DateTimeComparator;

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        return $r1;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        long $l0, $l1, l4, l5;
        org.joda.time.convert.InstantConverter $r2, $r6;
        byte $b2, $b3;
        int $i6, $i8, $i9;
        org.joda.time.DateTimeFieldType $r9, $r10, $r11, $r13, $r15, $r17;
        org.joda.time.DateTimeField $r12, $r14, $r16, $r18;
        org.joda.time.Chronology $r3, $r7;
        org.joda.time.DateTimeComparator r8;
        org.joda.time.convert.ConverterManager $r0, $r4;
        java.lang.Object r1, r5;

        r8 := @this: org.joda.time.DateTimeComparator;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r0 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r2 = virtualinvoke $r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>(r1);

        $r3 = interfaceinvoke $r2.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r1, null);

        $l0 = interfaceinvoke $r2.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>(r1, $r3);

        l4 = $l0;

        $r4 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>(r5);

        $r7 = interfaceinvoke $r6.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r5, null);

        $l1 = interfaceinvoke $r6.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>(r5, $r7);

        l5 = $l1;

        $r9 = r8.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        if $r9 == null goto label1;

        $r15 = r8.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r16 = virtualinvoke $r15.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        l4 = virtualinvoke $r16.<org.joda.time.DateTimeField: long roundFloor(long)>($l0);

        $r17 = r8.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r18 = virtualinvoke $r17.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r7);

        l5 = virtualinvoke $r18.<org.joda.time.DateTimeField: long roundFloor(long)>($l1);

     label1:
        $r10 = r8.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        if $r10 == null goto label2;

        $r11 = r8.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r12 = virtualinvoke $r11.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        l4 = virtualinvoke $r12.<org.joda.time.DateTimeField: long remainder(long)>(l4);

        $r13 = r8.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r14 = virtualinvoke $r13.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r7);

        l5 = virtualinvoke $r14.<org.joda.time.DateTimeField: long remainder(long)>(l5);

     label2:
        $b2 = l4 cmp l5;

        $i6 = (int) $b2;

        if $i6 >= 0 goto label3;

        $i8 = (int) -1;

        return $i8;

     label3:
        $b3 = l4 cmp l5;

        $i9 = (int) $b3;

        if $i9 <= 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.DateTimeComparator r0, $r3;
        org.joda.time.DateTimeFieldType $r1, $r2;

        r0 := @this: org.joda.time.DateTimeComparator;

        $r2 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r3 = staticinvoke <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>($r2, $r1);

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.DateTimeFieldType $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.joda.time.DateTimeComparator r1, r2;
        java.lang.Object r0;

        r2 := @this: org.joda.time.DateTimeComparator;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.joda.time.DateTimeComparator;

        if $z0 == 0 goto label5;

        r1 = (org.joda.time.DateTimeComparator) r0;

        $r3 = r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r4 = virtualinvoke r1.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>();

        if $r3 == $r4 goto label1;

        $r10 = r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        if $r10 == null goto label3;

        $r11 = r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r12 = virtualinvoke r1.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>();

        $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label3;

     label1:
        $r5 = r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r6 = virtualinvoke r1.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>();

        if $r5 == $r6 goto label2;

        $r7 = r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        if $r7 == null goto label3;

        $r8 = r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r9 = virtualinvoke r1.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>();

        $z1 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;

     label5:
        return 0;
    }

    public int hashCode()
    {
        org.joda.time.DateTimeComparator r0;
        int $i0, $i1, $i2, $i3;
        org.joda.time.DateTimeFieldType $r1, $r2, $r3, $r4;

        r0 := @this: org.joda.time.DateTimeComparator;

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label2:
        $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        if $r3 != null goto label3;

        $i1 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $i1 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

     label4:
        $i2 = 123 * $i1;

        $i3 = $i0 + $i2;

        return $i3;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r3, $r4, $r7, $r8, $r11, $r12, $r14, $r15, $r18, $r19;
        org.joda.time.DateTimeFieldType $r1, $r2, $r5, $r6, $r9, $r10, $r16, $r17;
        java.lang.String $r13, $r20, $r21, $r22, $r23;
        org.joda.time.DateTimeComparator r0;

        r0 := @this: org.joda.time.DateTimeComparator;

        $r2 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        if $r2 != $r1 goto label3;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DateTimeComparator[");

        $r16 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        if $r16 != null goto label1;

        $r21 = "";

        goto label2;

     label1:
        $r17 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r21 = virtualinvoke $r17.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

     label2:
        $r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r20;

     label3:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DateTimeComparator[");

        $r5 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        if $r5 != null goto label4;

        $r22 = "";

        goto label5;

     label4:
        $r6 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>;

        $r22 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

     label5:
        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r9 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        if $r9 != null goto label6;

        $r23 = "";

        goto label7;

     label6:
        $r10 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>;

        $r23 = virtualinvoke $r10.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

     label7:
        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeComparator $r0, $r1, $r3;
        org.joda.time.DateTimeFieldType $r2, $r4;

        <org.joda.time.DateTimeComparator: long serialVersionUID> = -6097339773320178364L;

        $r0 = new org.joda.time.DateTimeComparator;

        specialinvoke $r0.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(null, null);

        <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator ALL_INSTANCE> = $r0;

        $r1 = new org.joda.time.DateTimeComparator;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        specialinvoke $r1.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>($r2, null);

        <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator DATE_INSTANCE> = $r1;

        $r3 = new org.joda.time.DateTimeComparator;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        specialinvoke $r3.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(null, $r4);

        <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator TIME_INSTANCE> = $r3;

        return;
    }
}
