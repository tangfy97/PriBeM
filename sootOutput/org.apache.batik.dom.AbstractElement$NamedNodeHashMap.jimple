public class org.apache.batik.dom.AbstractElement$NamedNodeHashMap extends java.lang.Object implements org.w3c.dom.NamedNodeMap, java.io.Serializable
{
    protected static final int INITIAL_CAPACITY;
    protected org.apache.batik.dom.AbstractElement$Entry[] table;
    protected int count;
    private final org.apache.batik.dom.AbstractElement this$0;

    public void <init>(org.apache.batik.dom.AbstractElement)
    {
        org.apache.batik.dom.AbstractElement r1;
        org.apache.batik.dom.AbstractElement$Entry[] $r2;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r1 := @parameter0: org.apache.batik.dom.AbstractElement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0> = r1;

        $r2 = newarray (org.apache.batik.dom.AbstractElement$Entry)[3];

        r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table> = $r2;

        return;
    }

    public org.w3c.dom.Node getNamedItem(java.lang.String)
    {
        java.lang.String r0;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r1;
        org.w3c.dom.Node $r2;

        r1 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.w3c.dom.Node get(java.lang.String,java.lang.String)>(null, r0);

        return $r2;
    }

    public org.w3c.dom.Node setNamedItem(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r1;
        org.w3c.dom.Node r0, $r3;
        java.lang.String $r2;

        r1 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r0 := @parameter0: org.w3c.dom.Node;

        if r0 != null goto label1;

        return null;

     label1:
        virtualinvoke r1.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: void checkNode(org.w3c.dom.Node)>(r0);

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r3 = virtualinvoke r1.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.w3c.dom.Node setNamedItem(java.lang.String,java.lang.String,org.w3c.dom.Node)>(null, $r2, r0);

        return $r3;
    }

    public org.w3c.dom.Node removeNamedItem(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String r1;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.w3c.dom.Node removeNamedItemNS(java.lang.String,java.lang.String)>(null, r1);

        return $r2;
    }

    public org.w3c.dom.Node item(int)
    {
        org.apache.batik.dom.AbstractElement$Entry r3;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;
        org.apache.batik.dom.AbstractElement$Entry[] $r1, $r4;
        org.w3c.dom.Node $r2;
        int i0, $i1, $i2, i3, i4, $i5;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: int count>;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        i3 = 0;

        i4 = 0;

        goto label7;

     label3:
        $r1 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        r3 = $r1[i4];

        if r3 != null goto label4;

        goto label6;

     label4:
        $i2 = i3;

        i3 = i3 + 1;

        if $i2 != i0 goto label5;

        $r2 = r3.<org.apache.batik.dom.AbstractElement$Entry: org.w3c.dom.Node value>;

        return $r2;

     label5:
        r3 = r3.<org.apache.batik.dom.AbstractElement$Entry: org.apache.batik.dom.AbstractElement$Entry next>;

        if r3 != null goto label4;

     label6:
        i4 = i4 + 1;

     label7:
        $r4 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $i5 = lengthof $r4;

        if i4 < $i5 goto label3;

        return null;
    }

    public int getLength()
    {
        int $i0;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        $i0 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: int count>;

        return $i0;
    }

    public org.w3c.dom.Node getNamedItemNS(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;
        org.w3c.dom.Node $r3;
        int $i0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r2 == null goto label1;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r2 = null;

     label1:
        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.w3c.dom.Node get(java.lang.String,java.lang.String)>(r2, r1);

        return $r3;
    }

    public org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r2;
        org.w3c.dom.Node r0, $r3;
        java.lang.String $r1, $r4;

        r2 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r0 := @parameter0: org.w3c.dom.Node;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r1 != null goto label2;

        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        goto label3;

     label2:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

     label3:
        $r3 = virtualinvoke r2.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.w3c.dom.Node setNamedItem(java.lang.String,java.lang.String,org.w3c.dom.Node)>($r1, $r4, r0);

        return $r3;
    }

    public org.w3c.dom.Node removeNamedItemNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement $r1, $r3, $r7, $r10, $r13;
        java.lang.Object[] $r6, $r9, $r12;
        org.apache.batik.dom.AbstractAttr $r17;
        org.w3c.dom.DOMException $r8, $r11, $r14;
        org.w3c.dom.Node $r16;
        int $i0;
        java.lang.String r2, $r4, $r5, r15;
        boolean $z0;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r15 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r13 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $r12 = newarray (java.lang.Object)[0];

        $r14 = virtualinvoke $r13.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node.map", $r12);

        throw $r14;

     label1:
        if r2 != null goto label2;

        $r10 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = "";

        $r11 = virtualinvoke $r10.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "attribute.missing", $r9);

        throw $r11;

     label2:
        if r15 == null goto label3;

        $i0 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        r15 = null;

     label3:
        $r16 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.w3c.dom.Node remove(java.lang.String,java.lang.String)>(r15, r2);

        $r17 = (org.apache.batik.dom.AbstractAttr) $r16;

        if $r17 != null goto label4;

        $r7 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r2;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "attribute.missing", $r6);

        throw $r8;

     label4:
        virtualinvoke $r17.<org.apache.batik.dom.AbstractAttr: void setOwnerElement(org.apache.batik.dom.AbstractElement)>(null);

        $r3 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $r4 = virtualinvoke $r17.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeName()>();

        $r5 = virtualinvoke $r17.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeValue()>();

        virtualinvoke $r3.<org.apache.batik.dom.AbstractElement: void fireDOMAttrModifiedEvent(java.lang.String,org.w3c.dom.Attr,java.lang.String,java.lang.String,short)>($r4, $r17, $r5, "", 3);

        return $r17;
    }

    public org.w3c.dom.Node setNamedItem(java.lang.String, java.lang.String, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement $r3, $r6, $r10;
        org.apache.batik.dom.AbstractAttr $r9, $r12;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r1;
        org.w3c.dom.Attr $r4;
        org.w3c.dom.Node r0, $r11;
        int $i0;
        java.lang.String r2, $r5, $r7, r8;

        r1 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r8 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: org.w3c.dom.Node;

        if r8 == null goto label1;

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r8 = null;

     label1:
        $r9 = (org.apache.batik.dom.AbstractAttr) r0;

        $r10 = r1.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        virtualinvoke $r9.<org.apache.batik.dom.AbstractAttr: void setOwnerElement(org.apache.batik.dom.AbstractElement)>($r10);

        $r11 = virtualinvoke r1.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.w3c.dom.Node put(java.lang.String,java.lang.String,org.w3c.dom.Node)>(r8, r2, r0);

        $r12 = (org.apache.batik.dom.AbstractAttr) $r11;

        if $r12 == null goto label2;

        virtualinvoke $r12.<org.apache.batik.dom.AbstractAttr: void setOwnerElement(org.apache.batik.dom.AbstractElement)>(null);

        $r6 = r1.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $r7 = virtualinvoke $r12.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeValue()>();

        virtualinvoke $r6.<org.apache.batik.dom.AbstractElement: void fireDOMAttrModifiedEvent(java.lang.String,org.w3c.dom.Attr,java.lang.String,java.lang.String,short)>(r2, $r12, $r7, "", 3);

     label2:
        $r3 = r1.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $r4 = (org.w3c.dom.Attr) r0;

        $r5 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r3.<org.apache.batik.dom.AbstractElement: void fireDOMAttrModifiedEvent(java.lang.String,org.w3c.dom.Attr,java.lang.String,java.lang.String,short)>(r2, $r4, "", $r5, 2);

        return $r12;
    }

    protected void checkNode(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractElement $r1, $r2, $r9, $r14, $r18;
        java.lang.Object[] $r8, $r12, $r17;
        org.w3c.dom.Attr $r6;
        java.lang.Integer $r20;
        short $s0, $s1;
        org.w3c.dom.Document $r3, $r5;
        org.w3c.dom.Node r4;
        org.w3c.dom.DOMException $r11, $r16, $r19;
        int $i2, $i3;
        java.lang.String $r10, $r15;
        boolean $z0;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;
        org.w3c.dom.Element $r7;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r4 := @parameter0: org.w3c.dom.Node;

        $r1 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r18 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $r17 = newarray (java.lang.Object)[0];

        $r19 = virtualinvoke $r18.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node.map", $r17);

        throw $r19;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $r3 = virtualinvoke $r2.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r5 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        if $r3 == $r5 goto label2;

        $r14 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $r12 = newarray (java.lang.Object)[2];

        $r20 = new java.lang.Integer;

        $s1 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s1;

        specialinvoke $r20.<java.lang.Integer: void <init>(int)>($i2);

        $r12[0] = $r20;

        $r15 = interfaceinvoke r4.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r12[1] = $r15;

        $r16 = virtualinvoke $r14.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(4, "node.from.wrong.document", $r12);

        throw $r16;

     label2:
        $s0 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s0;

        if $i3 != 2 goto label3;

        $r6 = (org.w3c.dom.Attr) r4;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        if $r7 == null goto label3;

        $r9 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement this$0>;

        $r8 = newarray (java.lang.Object)[1];

        $r10 = interfaceinvoke r4.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r8[0] = $r10;

        $r11 = virtualinvoke $r9.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(4, "inuse.attribute", $r8);

        throw $r11;

     label3:
        return;
    }

    protected org.w3c.dom.Node get(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractElement$Entry r6;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;
        org.apache.batik.dom.AbstractElement$Entry[] $r3, $r4;
        org.w3c.dom.Node $r5;
        int $i0, i1, $i2, i3, $i4;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: int hashCode(java.lang.String,java.lang.String)>(r1, r2);

        i1 = $i0 & 2147483647;

        $r3 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $i2 = lengthof $r3;

        i3 = i1 % $i2;

        $r4 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        r6 = $r4[i3];

        goto label3;

     label1:
        $i4 = r6.<org.apache.batik.dom.AbstractElement$Entry: int hash>;

        if $i4 != i1 goto label2;

        $z0 = virtualinvoke r6.<org.apache.batik.dom.AbstractElement$Entry: boolean match(java.lang.String,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label2;

        $r5 = r6.<org.apache.batik.dom.AbstractElement$Entry: org.w3c.dom.Node value>;

        return $r5;

     label2:
        r6 = r6.<org.apache.batik.dom.AbstractElement$Entry: org.apache.batik.dom.AbstractElement$Entry next>;

     label3:
        if r6 != null goto label1;

        return null;
    }

    protected org.w3c.dom.Node put(java.lang.String, java.lang.String, org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractElement$Entry[] $r3, $r4, $r6, $r8, $r10, $r11;
        org.w3c.dom.Node r5, r13;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.lang.String r1, r2;
        boolean $z0;
        org.apache.batik.dom.AbstractElement$Entry $r7, $r9, r12;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: org.w3c.dom.Node;

        $i0 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: int hashCode(java.lang.String,java.lang.String)>(r1, r2);

        i1 = $i0 & 2147483647;

        $r3 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $i2 = lengthof $r3;

        i9 = i1 % $i2;

        $r4 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        r12 = $r4[i9];

        goto label3;

     label1:
        $i3 = r12.<org.apache.batik.dom.AbstractElement$Entry: int hash>;

        if $i3 != i1 goto label2;

        $z0 = virtualinvoke r12.<org.apache.batik.dom.AbstractElement$Entry: boolean match(java.lang.String,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label2;

        r13 = r12.<org.apache.batik.dom.AbstractElement$Entry: org.w3c.dom.Node value>;

        r12.<org.apache.batik.dom.AbstractElement$Entry: org.w3c.dom.Node value> = r5;

        return r13;

     label2:
        r12 = r12.<org.apache.batik.dom.AbstractElement$Entry: org.apache.batik.dom.AbstractElement$Entry next>;

     label3:
        if r12 != null goto label1;

        $r6 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        i10 = lengthof $r6;

        $i4 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: int count>;

        $i5 = $i4 + 1;

        r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: int count> = $i5;

        $i6 = i10 >> 2;

        $i7 = i10 - $i6;

        if $i4 < $i7 goto label4;

        virtualinvoke r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: void rehash()>();

        $r11 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $i8 = lengthof $r11;

        i9 = i1 % $i8;

     label4:
        $r7 = new org.apache.batik.dom.AbstractElement$Entry;

        $r8 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $r9 = $r8[i9];

        specialinvoke $r7.<org.apache.batik.dom.AbstractElement$Entry: void <init>(int,java.lang.String,java.lang.String,org.w3c.dom.Node,org.apache.batik.dom.AbstractElement$Entry)>(i1, r1, r2, r5, $r9);

        $r10 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $r10[i9] = $r7;

        return null;
    }

    protected org.w3c.dom.Node remove(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractElement$Entry[] $r3, $r4, $r8;
        org.w3c.dom.Node r5;
        int $i0, i1, $i2, i3, $i4, $i5, $i6;
        java.lang.String r1, r2;
        boolean $z0;
        org.apache.batik.dom.AbstractElement$Entry $r6, $r7, r9, r10;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: int hashCode(java.lang.String,java.lang.String)>(r1, r2);

        i1 = $i0 & 2147483647;

        $r3 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $i2 = lengthof $r3;

        i3 = i1 % $i2;

        r9 = null;

        $r4 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        r10 = $r4[i3];

        goto label5;

     label1:
        $i4 = r10.<org.apache.batik.dom.AbstractElement$Entry: int hash>;

        if $i4 != i1 goto label4;

        $z0 = virtualinvoke r10.<org.apache.batik.dom.AbstractElement$Entry: boolean match(java.lang.String,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label4;

        r5 = r10.<org.apache.batik.dom.AbstractElement$Entry: org.w3c.dom.Node value>;

        if r9 != null goto label2;

        $r8 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $r7 = r10.<org.apache.batik.dom.AbstractElement$Entry: org.apache.batik.dom.AbstractElement$Entry next>;

        $r8[i3] = $r7;

        goto label3;

     label2:
        $r6 = r10.<org.apache.batik.dom.AbstractElement$Entry: org.apache.batik.dom.AbstractElement$Entry next>;

        r9.<org.apache.batik.dom.AbstractElement$Entry: org.apache.batik.dom.AbstractElement$Entry next> = $r6;

     label3:
        $i5 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: int count>;

        $i6 = $i5 - 1;

        r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: int count> = $i6;

        return r5;

     label4:
        r9 = r10;

        r10 = r10.<org.apache.batik.dom.AbstractElement$Entry: org.apache.batik.dom.AbstractElement$Entry next>;

     label5:
        if r10 != null goto label1;

        return null;
    }

    protected void rehash()
    {
        org.apache.batik.dom.AbstractElement$Entry[] r1, $r2, $r4, $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i9;
        org.apache.batik.dom.AbstractElement$Entry r3, $r6, r8;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r0;

        r0 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r1 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $i0 = lengthof r1;

        $i1 = $i0 * 2;

        $i2 = $i1 + 1;

        $r2 = newarray (org.apache.batik.dom.AbstractElement$Entry)[$i2];

        r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table> = $r2;

        $i3 = lengthof r1;

        i7 = $i3 - 1;

        goto label4;

     label1:
        r8 = r1[i7];

        goto label3;

     label2:
        r3 = r8;

        r8 = r8.<org.apache.batik.dom.AbstractElement$Entry: org.apache.batik.dom.AbstractElement$Entry next>;

        $i5 = r3.<org.apache.batik.dom.AbstractElement$Entry: int hash>;

        $r4 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $i4 = lengthof $r4;

        i6 = $i5 % $i4;

        $r5 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $r6 = $r5[i6];

        r3.<org.apache.batik.dom.AbstractElement$Entry: org.apache.batik.dom.AbstractElement$Entry next> = $r6;

        $r7 = r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: org.apache.batik.dom.AbstractElement$Entry[] table>;

        $r7[i6] = r3;

     label3:
        if r8 != null goto label2;

        $i9 = (int) -1;

        i7 = i7 + $i9;

     label4:
        if i7 >= 0 goto label1;

        return;
    }

    protected int hashCode(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap r2;
        int $i0, $i1, $i2;
        java.lang.String r0, r1;

        r2 := @this: org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int hashCode()>();

     label2:
        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        $i1 = $i2 ^ $i0;

        return $i1;
    }

    public static void <clinit>()
    {
        <org.apache.batik.dom.AbstractElement$NamedNodeHashMap: int INITIAL_CAPACITY> = 3;

        return;
    }
}
