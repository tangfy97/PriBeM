public class org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent extends org.waveprotocol.wave.model.document.util.FilteredView implements org.waveprotocol.wave.client.editor.content.ContentView
{

    public void <init>(org.waveprotocol.wave.client.editor.content.ContentView)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent r0;
        org.waveprotocol.wave.client.editor.content.ContentView r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentView;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: void <init>(org.waveprotocol.wave.model.document.ReadableDocument)>(r1);

        return;
    }

    protected org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent r1;
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isRendered()>();

        if $z0 == 0 goto label1;

        $r2 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip NONE>;

        goto label2;

     label1:
        $r2 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip SHALLOW>;

     label2:
        return $r2;
    }

    protected volatile org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent r0;
        org.waveprotocol.wave.client.editor.content.ContentNode $r2;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentNode) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$RenderedContent: org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(org.waveprotocol.wave.client.editor.content.ContentNode)>($r2);

        return $r3;
    }
}
