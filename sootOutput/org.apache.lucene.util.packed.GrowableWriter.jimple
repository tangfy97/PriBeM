public class org.apache.lucene.util.packed.GrowableWriter extends java.lang.Object implements org.apache.lucene.util.packed.PackedInts$Mutable
{
    private long currentMaxValue;
    private org.apache.lucene.util.packed.PackedInts$Mutable current;
    private final float acceptableOverheadRatio;
    static final boolean $assertionsDisabled;

    public void <init>(int, int, float)
    {
        org.apache.lucene.util.packed.GrowableWriter r0;
        long $l3;
        int i0, i1, $i2;
        float f0, $f1;
        org.apache.lucene.util.packed.PackedInts$Mutable $r1, $r2;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.packed.GrowableWriter: float acceptableOverheadRatio> = f0;

        $f1 = r0.<org.apache.lucene.util.packed.GrowableWriter: float acceptableOverheadRatio>;

        $r1 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int,int,float)>(i0, i1, $f1);

        r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current> = $r1;

        $r2 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        $i2 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Mutable: int getBitsPerValue()>();

        $l3 = staticinvoke <org.apache.lucene.util.packed.PackedInts: long maxValue(int)>($i2);

        r0.<org.apache.lucene.util.packed.GrowableWriter: long currentMaxValue> = $l3;

        return;
    }

    public long get(int)
    {
        org.apache.lucene.util.packed.GrowableWriter r0;
        int i0;
        long $l1;
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        $l1 = interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Mutable: long get(int)>(i0);

        return $l1;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;
        org.apache.lucene.util.packed.GrowableWriter r0;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        $r1 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        $i0 = interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Mutable: int size()>();

        return $i0;
    }

    public int getBitsPerValue()
    {
        int $i0;
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;
        org.apache.lucene.util.packed.GrowableWriter r0;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        $r1 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        $i0 = interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Mutable: int getBitsPerValue()>();

        return $i0;
    }

    public org.apache.lucene.util.packed.PackedInts$Mutable getMutable()
    {
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;
        org.apache.lucene.util.packed.GrowableWriter r0;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        $r1 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        return $r1;
    }

    public java.lang.Object getArray()
    {
        java.lang.Object $r2;
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;
        org.apache.lucene.util.packed.GrowableWriter r0;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        $r1 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        $r2 = interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Mutable: java.lang.Object getArray()>();

        return $r2;
    }

    public boolean hasArray()
    {
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;
        org.apache.lucene.util.packed.GrowableWriter r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        $r1 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        $z0 = interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Mutable: boolean hasArray()>();

        return $z0;
    }

    private void ensureCapacity(long)
    {
        org.apache.lucene.util.packed.GrowableWriter r0;
        long l0, $l1, $l6;
        java.lang.AssertionError $r5;
        byte $b2, $b7;
        int $i3, $i4, $i5, $i8, $i9;
        org.apache.lucene.util.packed.PackedInts$Mutable $r1, $r2, $r3;
        boolean $z0;
        float $f0;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.packed.GrowableWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b7 = l0 cmp 0L;

        $i8 = (int) $b7;

        if $i8 >= 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $l1 = r0.<org.apache.lucene.util.packed.GrowableWriter: long currentMaxValue>;

        $b2 = l0 cmp $l1;

        $i9 = (int) $b2;

        if $i9 > 0 goto label2;

        return;

     label2:
        $i3 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(l0);

        $i4 = virtualinvoke r0.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        $f0 = r0.<org.apache.lucene.util.packed.GrowableWriter: float acceptableOverheadRatio>;

        $r1 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int,int,float)>($i4, $i3, $f0);

        $r2 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        staticinvoke <org.apache.lucene.util.packed.PackedInts: void copy(org.apache.lucene.util.packed.PackedInts$Reader,int,org.apache.lucene.util.packed.PackedInts$Mutable,int,int,int)>($r2, 0, $r1, 0, $i4, 1024);

        r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current> = $r1;

        $r3 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        $i5 = interfaceinvoke $r3.<org.apache.lucene.util.packed.PackedInts$Mutable: int getBitsPerValue()>();

        $l6 = staticinvoke <org.apache.lucene.util.packed.PackedInts: long maxValue(int)>($i5);

        r0.<org.apache.lucene.util.packed.GrowableWriter: long currentMaxValue> = $l6;

        return;
    }

    public void set(int, long)
    {
        org.apache.lucene.util.packed.GrowableWriter r0;
        int i1;
        long l0;
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        i1 := @parameter0: int;

        l0 := @parameter1: long;

        specialinvoke r0.<org.apache.lucene.util.packed.GrowableWriter: void ensureCapacity(long)>(l0);

        $r1 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Mutable: void set(int,long)>(i1, l0);

        return;
    }

    public void clear()
    {
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;
        org.apache.lucene.util.packed.GrowableWriter r0;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        $r1 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Mutable: void clear()>();

        return;
    }

    public org.apache.lucene.util.packed.GrowableWriter resize(int)
    {
        org.apache.lucene.util.packed.GrowableWriter $r0, r1;
        int $i0, i1, $i2, $i3;
        float $f0;
        org.apache.lucene.util.packed.PackedInts$Mutable $r2;

        r1 := @this: org.apache.lucene.util.packed.GrowableWriter;

        i1 := @parameter0: int;

        $r0 = new org.apache.lucene.util.packed.GrowableWriter;

        $i0 = virtualinvoke r1.<org.apache.lucene.util.packed.GrowableWriter: int getBitsPerValue()>();

        $f0 = r1.<org.apache.lucene.util.packed.GrowableWriter: float acceptableOverheadRatio>;

        specialinvoke $r0.<org.apache.lucene.util.packed.GrowableWriter: void <init>(int,int,float)>($i0, i1, $f0);

        $i2 = virtualinvoke r1.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i1);

        $r2 = r1.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        staticinvoke <org.apache.lucene.util.packed.PackedInts: void copy(org.apache.lucene.util.packed.PackedInts$Reader,int,org.apache.lucene.util.packed.PackedInts$Mutable,int,int,int)>($r2, 0, $r0, 0, $i3, 1024);

        return $r0;
    }

    public int get(int, long[], int, int)
    {
        long[] r1;
        org.apache.lucene.util.packed.GrowableWriter r0;
        int i0, i1, i2, $i3;
        org.apache.lucene.util.packed.PackedInts$Mutable $r2;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        $i3 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Mutable: int get(int,long[],int,int)>(i0, r1, i1, i2);

        return $i3;
    }

    public int set(int, long[], int, int)
    {
        org.apache.lucene.util.packed.GrowableWriter r0;
        long $l5, l6;
        long[] r1;
        int i0, i1, i2, i3, $i4, i7;
        org.apache.lucene.util.packed.PackedInts$Mutable $r2;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        i3 := @parameter0: int;

        r1 := @parameter1: long[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l6 = 0L;

        i7 = i0;

        i2 = i0 + i1;

     label1:
        if i7 >= i2 goto label2;

        $l5 = r1[i7];

        l6 = l6 | $l5;

        i7 = i7 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.lucene.util.packed.GrowableWriter: void ensureCapacity(long)>(l6);

        $r2 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        $i4 = interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Mutable: int set(int,long[],int,int)>(i3, r1, i0, i1);

        return $i4;
    }

    public void fill(int, int, long)
    {
        org.apache.lucene.util.packed.GrowableWriter r0;
        int i1, i2;
        long l0;
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        l0 := @parameter2: long;

        specialinvoke r0.<org.apache.lucene.util.packed.GrowableWriter: void ensureCapacity(long)>(l0);

        $r1 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Mutable: void fill(int,int,long)>(i1, i2, l0);

        return;
    }

    public long ramBytesUsed()
    {
        long $l0;
        org.apache.lucene.util.packed.PackedInts$Mutable $r1;
        org.apache.lucene.util.packed.GrowableWriter r0;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        $r1 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        $l0 = interfaceinvoke $r1.<org.apache.lucene.util.packed.PackedInts$Mutable: long ramBytesUsed()>();

        return $l0;
    }

    public void save(org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        org.apache.lucene.util.packed.PackedInts$Mutable $r2;
        org.apache.lucene.store.DataOutput r1;
        org.apache.lucene.util.packed.GrowableWriter r0;

        r0 := @this: org.apache.lucene.util.packed.GrowableWriter;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        $r2 = r0.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.PackedInts$Mutable current>;

        interfaceinvoke $r2.<org.apache.lucene.util.packed.PackedInts$Mutable: void save(org.apache.lucene.store.DataOutput)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/GrowableWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.GrowableWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
