final class com.mycila.inject.scope.ConcurrentSingleton$FutureInjector extends java.lang.Object
{
    private volatile java.lang.ref.WeakReference injector;
    private final java.util.concurrent.CountDownLatch injectorAvailable;

    private void <init>()
    {
        java.util.concurrent.CountDownLatch $r2;
        com.mycila.inject.scope.ConcurrentSingleton$FutureInjector r0;
        java.lang.ref.WeakReference $r1;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$FutureInjector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.ref.WeakReference;

        specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(null);

        r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: java.lang.ref.WeakReference injector> = $r1;

        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: java.util.concurrent.CountDownLatch injectorAvailable> = $r2;

        return;
    }

    public void setInjector(com.google.inject.Injector)
    {
        com.google.inject.Injector r4;
        java.util.concurrent.CountDownLatch $r5;
        com.mycila.inject.scope.ConcurrentSingleton$FutureInjector r0;
        java.lang.Object $r2;
        java.lang.ref.WeakReference $r1, $r3;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$FutureInjector;

        r4 := @parameter0: com.google.inject.Injector;

        $r1 = r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: java.lang.ref.WeakReference injector>;

        $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r2 == null goto label1;

        return;

     label1:
        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r4);

        r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: java.lang.ref.WeakReference injector> = $r3;

        $r5 = r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: java.util.concurrent.CountDownLatch injectorAvailable>;

        virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public java.lang.ref.Reference waitAndGet(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.CountDownLatch $r2;
        com.mycila.inject.scope.ConcurrentSingleton$FutureInjector r0;
        long l0;
        java.lang.ref.WeakReference $r3;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$FutureInjector;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: java.util.concurrent.CountDownLatch injectorAvailable>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(l0, r1);

        $r3 = r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: java.lang.ref.WeakReference injector>;

        return $r3;
    }

    void <init>(com.mycila.inject.scope.ConcurrentSingleton$1)
    {
        com.mycila.inject.scope.ConcurrentSingleton$FutureInjector r0;
        com.mycila.inject.scope.ConcurrentSingleton$1 r1;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$FutureInjector;

        r1 := @parameter0: com.mycila.inject.scope.ConcurrentSingleton$1;

        specialinvoke r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureInjector: void <init>()>();

        return;
    }
}
