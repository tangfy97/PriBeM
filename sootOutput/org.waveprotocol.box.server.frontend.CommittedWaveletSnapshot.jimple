public final class org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot extends java.lang.Object
{
    public final org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot;
    public final org.waveprotocol.wave.model.version.HashedVersion committedVersion;

    public void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.version.HashedVersion r2;
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot r0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;

        r0 := @this: org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r0.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot> = r1;

        r0.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion> = r2;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot r0, r4;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r7, $r8;
        org.waveprotocol.wave.model.version.HashedVersion $r5, $r6;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label4;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label4;

        r4 = (org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot) r1;

        $r6 = r0.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        $r5 = r4.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        $z0 = virtualinvoke $r6.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $r8 = r0.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        $r7 = r4.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        $z1 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot r0;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r3, $r4;
        org.waveprotocol.wave.model.version.HashedVersion $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot;

        $r1 = r0.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        if $r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.version.HashedVersion committedVersion>;

        $i3 = virtualinvoke $r2.<org.waveprotocol.wave.model.version.HashedVersion: int hashCode()>();

     label2:
        $i2 = 31 + $i3;

        $i0 = 31 * $i2;

        $r3 = r0.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        if $r3 != null goto label3;

        $i4 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        $i4 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

     label4:
        $i1 = $i0 + $i4;

        return $i1;
    }
}
