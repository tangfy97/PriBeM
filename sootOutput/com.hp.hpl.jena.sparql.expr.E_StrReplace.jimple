public class com.hp.hpl.jena.sparql.expr.E_StrReplace extends com.hp.hpl.jena.sparql.expr.ExprFunctionN
{
    private static final java.lang.String symbol;
    private java.util.regex.Pattern pattern;

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r6, $r7, $r9;
        com.hp.hpl.jena.sparql.expr.Expr[] $r1;
        com.hp.hpl.jena.sparql.expr.Expr r2, r3, r4, r5;
        int i0;
        java.lang.String $r8, $r10;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.expr.E_StrReplace r0;
        java.util.regex.Pattern $r11;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_StrReplace;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r4 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        r5 := @parameter3: com.hp.hpl.jena.sparql.expr.Expr;

        $r1 = newarray (com.hp.hpl.jena.sparql.expr.Expr)[4];

        $r1[0] = r2;

        $r1[1] = r3;

        $r1[2] = r4;

        $r1[3] = r5;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.Expr[])>("replace", $r1);

        r0.<com.hp.hpl.jena.sparql.expr.E_StrReplace: java.util.regex.Pattern pattern> = null;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.E_StrReplace: boolean isString(com.hp.hpl.jena.sparql.expr.Expr)>(r3);

        if $z0 == 0 goto label3;

        if r5 == null goto label1;

        $z3 = staticinvoke <com.hp.hpl.jena.sparql.expr.E_StrReplace: boolean isString(com.hp.hpl.jena.sparql.expr.Expr)>(r5);

        if $z3 == 0 goto label3;

     label1:
        i0 = 0;

        if r5 == null goto label2;

        $z1 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        $z2 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z2 == 0 goto label2;

        $r7 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

        i0 = staticinvoke <com.hp.hpl.jena.sparql.expr.RegexJava: int makeMask(java.lang.String)>($r8);

     label2:
        $r9 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

        $r11 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r10, i0);

        r0.<com.hp.hpl.jena.sparql.expr.E_StrReplace: java.util.regex.Pattern pattern> = $r11;

     label3:
        return;
    }

    private static boolean isString(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r1;
        com.hp.hpl.jena.sparql.expr.Expr r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue eval(java.util.List)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r4, $r6, $r8, $r10, $r11, $r13, $r15, $r17, $r18, $r20, $r23, $r24;
        int $i0;
        com.hp.hpl.jena.sparql.expr.E_StrReplace r0;
        java.util.List r2;
        java.lang.Object $r3, $r5, $r7, $r9, $r12, $r14, $r16, $r19, $r22;
        java.util.regex.Pattern $r1, $r21;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_StrReplace;

        r2 := @parameter0: java.util.List;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.E_StrReplace: java.util.regex.Pattern pattern>;

        if $r1 == null goto label1;

        $r19 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r20 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r19;

        $r21 = r0.<com.hp.hpl.jena.sparql.expr.E_StrReplace: java.util.regex.Pattern pattern>;

        $r22 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(2);

        $r23 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r22;

        $r24 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue strReplace(com.hp.hpl.jena.sparql.expr.NodeValue,java.util.regex.Pattern,com.hp.hpl.jena.sparql.expr.NodeValue)>($r20, $r21, $r23);

        return $r24;

     label1:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 3 goto label2;

        $r12 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r12;

        $r14 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);

        $r15 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r14;

        $r16 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(2);

        $r17 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r16;

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue strReplace(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>($r13, $r15, $r17);

        return $r18;

     label2:
        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r3;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);

        $r6 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r5;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(2);

        $r8 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r7;

        $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(3);

        $r10 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r9;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue strReplace(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>($r4, $r6, $r8, $r10);

        return $r11;
    }

    protected com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.E_StrReplace $r1, $r6, r10;
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r3, $r4, $r5, $r7, $r8, $r9;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        int $i0;

        r10 := @this: com.hp.hpl.jena.sparql.expr.E_StrReplace;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i0 != 3 goto label1;

        $r6 = new com.hp.hpl.jena.sparql.expr.E_StrReplace;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(0);

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(1);

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(2);

        specialinvoke $r6.<com.hp.hpl.jena.sparql.expr.E_StrReplace: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r7, $r8, $r9, null);

        return $r6;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.expr.E_StrReplace;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(0);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(2);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(3);

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.E_StrReplace: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r2, $r3, $r4, $r5);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.E_StrReplace: java.lang.String symbol> = "replace";

        return;
    }
}
