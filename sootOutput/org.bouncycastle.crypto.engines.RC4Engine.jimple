public class org.bouncycastle.crypto.engines.RC4Engine extends java.lang.Object implements org.bouncycastle.crypto.StreamCipher
{
    private static final int STATE_LENGTH;
    private byte[] engineState;
    private int x;
    private int y;
    private byte[] workingKey;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.RC4Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC4Engine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState> = null;

        r0.<org.bouncycastle.crypto.engines.RC4Engine: int x> = 0;

        r0.<org.bouncycastle.crypto.engines.RC4Engine: int y> = 0;

        r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] workingKey> = null;

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r10, $r11;
        java.lang.IllegalArgumentException $r1;
        org.bouncycastle.crypto.engines.RC4Engine r8;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.lang.Class $r4;
        java.lang.String $r5, $r7;
        org.bouncycastle.crypto.params.KeyParameter $r9;
        org.bouncycastle.crypto.CipherParameters r0;
        boolean $z0, z1;

        r8 := @this: org.bouncycastle.crypto.engines.RC4Engine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z0 == 0 goto label1;

        $r9 = (org.bouncycastle.crypto.params.KeyParameter) r0;

        $r10 = virtualinvoke $r9.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        r8.<org.bouncycastle.crypto.engines.RC4Engine: byte[] workingKey> = $r10;

        $r11 = r8.<org.bouncycastle.crypto.engines.RC4Engine: byte[] workingKey>;

        specialinvoke r8.<org.bouncycastle.crypto.engines.RC4Engine: void setKey(byte[])>($r11);

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to RC4 init - ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.RC4Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC4Engine;

        return "RC4";
    }

    public byte returnByte(byte)
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        byte $b5, b9, $b11, b14, $b17, $b18, $b21, $b22, $b23;
        org.bouncycastle.crypto.engines.RC4Engine r0;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i10, $i12, $i13, $i15, $i16, $i19, $i20, $i24, $i25, $i26;

        r0 := @this: org.bouncycastle.crypto.engines.RC4Engine;

        b14 := @parameter0: byte;

        $i0 = r0.<org.bouncycastle.crypto.engines.RC4Engine: int x>;

        $i1 = $i0 + 1;

        $i2 = $i1 & 255;

        r0.<org.bouncycastle.crypto.engines.RC4Engine: int x> = $i2;

        $r1 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i3 = r0.<org.bouncycastle.crypto.engines.RC4Engine: int x>;

        $b5 = $r1[$i3];

        $i4 = r0.<org.bouncycastle.crypto.engines.RC4Engine: int y>;

        $i24 = (int) $b5;

        $i6 = $i24 + $i4;

        $i7 = $i6 & 255;

        r0.<org.bouncycastle.crypto.engines.RC4Engine: int y> = $i7;

        $r2 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i8 = r0.<org.bouncycastle.crypto.engines.RC4Engine: int x>;

        b9 = $r2[$i8];

        $r4 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i12 = r0.<org.bouncycastle.crypto.engines.RC4Engine: int x>;

        $r3 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i10 = r0.<org.bouncycastle.crypto.engines.RC4Engine: int y>;

        $b11 = $r3[$i10];

        $r4[$i12] = $b11;

        $r5 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i13 = r0.<org.bouncycastle.crypto.engines.RC4Engine: int y>;

        $r5[$i13] = b9;

        $r8 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $r6 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i15 = r0.<org.bouncycastle.crypto.engines.RC4Engine: int x>;

        $b18 = $r6[$i15];

        $r7 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i16 = r0.<org.bouncycastle.crypto.engines.RC4Engine: int y>;

        $b17 = $r7[$i16];

        $i25 = (int) $b18;

        $i26 = (int) $b17;

        $i19 = $i25 + $i26;

        $i20 = $i19 & 255;

        $b21 = $r8[$i20];

        $b22 = b14 ^ $b21;

        $b23 = (byte) $b22;

        return $b23;
    }

    public void processBytes(byte[], int, int, byte[], int)
    {
        byte[] r0, r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        org.bouncycastle.crypto.DataLengthException $r13, $r14;
        byte $b12, b16, $b18, $b24, $b25, $b28, $b29, $b30, $b31;
        org.bouncycastle.crypto.engines.RC4Engine r2;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i17, $i19, $i20, $i21, $i22, $i23, $i26, $i27, $i32, i33, $i34, $i35, $i36;

        r2 := @this: org.bouncycastle.crypto.engines.RC4Engine;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: byte[];

        i4 := @parameter4: int;

        $i3 = i0 + i1;

        $i2 = lengthof r0;

        if $i3 <= $i2 goto label1;

        $r13 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r13.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r13;

     label1:
        $i6 = i4 + i1;

        $i5 = lengthof r1;

        if $i6 <= $i5 goto label2;

        $r14 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r14.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r14;

     label2:
        i33 = 0;

     label3:
        if i33 >= i1 goto label4;

        $i7 = r2.<org.bouncycastle.crypto.engines.RC4Engine: int x>;

        $i8 = $i7 + 1;

        $i9 = $i8 & 255;

        r2.<org.bouncycastle.crypto.engines.RC4Engine: int x> = $i9;

        $r3 = r2.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i10 = r2.<org.bouncycastle.crypto.engines.RC4Engine: int x>;

        $b12 = $r3[$i10];

        $i11 = r2.<org.bouncycastle.crypto.engines.RC4Engine: int y>;

        $i34 = (int) $b12;

        $i13 = $i34 + $i11;

        $i14 = $i13 & 255;

        r2.<org.bouncycastle.crypto.engines.RC4Engine: int y> = $i14;

        $r4 = r2.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i15 = r2.<org.bouncycastle.crypto.engines.RC4Engine: int x>;

        b16 = $r4[$i15];

        $r6 = r2.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i19 = r2.<org.bouncycastle.crypto.engines.RC4Engine: int x>;

        $r5 = r2.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i17 = r2.<org.bouncycastle.crypto.engines.RC4Engine: int y>;

        $b18 = $r5[$i17];

        $r6[$i19] = $b18;

        $r7 = r2.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i20 = r2.<org.bouncycastle.crypto.engines.RC4Engine: int y>;

        $r7[$i20] = b16;

        $i32 = i33 + i4;

        $i21 = i33 + i0;

        $b29 = r0[$i21];

        $r10 = r2.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $r8 = r2.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i22 = r2.<org.bouncycastle.crypto.engines.RC4Engine: int x>;

        $b25 = $r8[$i22];

        $r9 = r2.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $i23 = r2.<org.bouncycastle.crypto.engines.RC4Engine: int y>;

        $b24 = $r9[$i23];

        $i35 = (int) $b25;

        $i36 = (int) $b24;

        $i26 = $i35 + $i36;

        $i27 = $i26 & 255;

        $b28 = $r10[$i27];

        $b30 = $b29 ^ $b28;

        $b31 = (byte) $b30;

        r1[$i32] = $b31;

        i33 = i33 + 1;

        goto label3;

     label4:
        return;
    }

    public void reset()
    {
        byte[] $r1;
        org.bouncycastle.crypto.engines.RC4Engine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RC4Engine;

        $r1 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] workingKey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.RC4Engine: void setKey(byte[])>($r1);

        return;
    }

    private void setKey(byte[])
    {
        byte[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        org.bouncycastle.crypto.engines.RC4Engine r0;
        short $s2, $s14;
        byte $b0, $b1, b5, $b6, $b9;
        int $i3, $i4, $i7, $i8, i10, i11, i12, i13, $i15, $i16;

        r0 := @this: org.bouncycastle.crypto.engines.RC4Engine;

        r1 := @parameter0: byte[];

        r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] workingKey> = r1;

        r0.<org.bouncycastle.crypto.engines.RC4Engine: int x> = 0;

        r0.<org.bouncycastle.crypto.engines.RC4Engine: int y> = 0;

        $r2 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        if $r2 != null goto label1;

        $r9 = newarray (byte)[256];

        r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState> = $r9;

     label1:
        i10 = 0;

     label2:
        if i10 >= 256 goto label3;

        $r8 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $b9 = (byte) i10;

        $r8[i10] = $b9;

        i10 = i10 + 1;

        goto label2;

     label3:
        i11 = 0;

        i12 = 0;

        i13 = 0;

     label4:
        if i13 >= 256 goto label5;

        $b0 = r1[i11];

        $s14 = (short) $b0;

        $s2 = $s14 & 255;

        $r3 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $b1 = $r3[i13];

        $i15 = (int) $s2;

        $i16 = (int) $b1;

        $i3 = $i15 + $i16;

        $i4 = $i3 + i12;

        i12 = $i4 & 255;

        $r4 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        b5 = $r4[i13];

        $r6 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $r5 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $b6 = $r5[i12];

        $r6[i13] = $b6;

        $r7 = r0.<org.bouncycastle.crypto.engines.RC4Engine: byte[] engineState>;

        $r7[i12] = b5;

        $i8 = i11 + 1;

        $i7 = lengthof r1;

        i11 = $i8 % $i7;

        i13 = i13 + 1;

        goto label4;

     label5:
        return;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.crypto.engines.RC4Engine: int STATE_LENGTH> = 256;

        return;
    }
}
