final class org.apache.lucene.util.InfoStream$NoOutput extends org.apache.lucene.util.InfoStream
{
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.lucene.util.InfoStream$NoOutput r0;

        r0 := @this: org.apache.lucene.util.InfoStream$NoOutput;

        specialinvoke r0.<org.apache.lucene.util.InfoStream: void <init>()>();

        return;
    }

    public void message(java.lang.String, java.lang.String)
    {
        org.apache.lucene.util.InfoStream$NoOutput r1;
        java.lang.AssertionError $r0;
        java.lang.String r2, r3;
        boolean $z0;

        r1 := @this: org.apache.lucene.util.InfoStream$NoOutput;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = <org.apache.lucene.util.InfoStream$NoOutput: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("message() should not be called when isEnabled returns false");

        throw $r0;

     label1:
        return;
    }

    public boolean isEnabled(java.lang.String)
    {
        java.lang.String r1;
        org.apache.lucene.util.InfoStream$NoOutput r0;

        r0 := @this: org.apache.lucene.util.InfoStream$NoOutput;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public void close()
    {
        org.apache.lucene.util.InfoStream$NoOutput r0;

        r0 := @this: org.apache.lucene.util.InfoStream$NoOutput;

        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.util.InfoStream $r1;
        org.apache.lucene.util.InfoStream$NoOutput r0;

        r0 := @this: org.apache.lucene.util.InfoStream$NoOutput;

        $r1 = specialinvoke r0.<org.apache.lucene.util.InfoStream: org.apache.lucene.util.InfoStream clone()>();

        return $r1;
    }

    void <init>(org.apache.lucene.util.InfoStream$1)
    {
        org.apache.lucene.util.InfoStream$1 r1;
        org.apache.lucene.util.InfoStream$NoOutput r0;

        r0 := @this: org.apache.lucene.util.InfoStream$NoOutput;

        r1 := @parameter0: org.apache.lucene.util.InfoStream$1;

        specialinvoke r0.<org.apache.lucene.util.InfoStream$NoOutput: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/InfoStream;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.InfoStream$NoOutput: boolean $assertionsDisabled> = $z1;

        return;
    }
}
