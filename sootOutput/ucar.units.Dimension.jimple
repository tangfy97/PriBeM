public abstract class ucar.units.Dimension extends java.lang.Object
{
    protected final ucar.units.Factor[] _factors;
    private transient volatile int hashCode;

    public void <init>()
    {
        ucar.units.Dimension r0;
        ucar.units.Factor[] $r1;

        r0 := @this: ucar.units.Dimension;

        $r1 = newarray (ucar.units.Factor)[0];

        specialinvoke r0.<ucar.units.Dimension: void <init>(ucar.units.Factor[])>($r1);

        return;
    }

    protected void <init>(ucar.units.Factor)
    {
        ucar.units.Dimension r0;
        ucar.units.Factor r2;
        ucar.units.Factor[] $r1;

        r0 := @this: ucar.units.Dimension;

        r2 := @parameter0: ucar.units.Factor;

        $r1 = newarray (ucar.units.Factor)[1];

        $r1[0] = r2;

        specialinvoke r0.<ucar.units.Dimension: void <init>(ucar.units.Factor[])>($r1);

        return;
    }

    protected void <init>(ucar.units.Factor[])
    {
        ucar.units.Dimension r0;
        ucar.units.Factor[] r1;

        r0 := @this: ucar.units.Dimension;

        r1 := @parameter0: ucar.units.Factor[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.units.Dimension: ucar.units.Factor[] _factors> = r1;

        return;
    }

    public final int getRank()
    {
        int $i0;
        ucar.units.Dimension r0;
        ucar.units.Factor[] $r1;

        r0 := @this: ucar.units.Dimension;

        $r1 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public final ucar.units.Factor[] getFactors()
    {
        ucar.units.Dimension r0;
        int $i0, $i1;
        ucar.units.Factor[] $r1, r2, $r3;

        r0 := @this: ucar.units.Dimension;

        $r1 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $i0 = lengthof $r1;

        r2 = newarray (ucar.units.Factor)[$i0];

        $r3 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i1);

        return r2;
    }

    protected ucar.units.Factor[] mult(ucar.units.Dimension)
    {
        ucar.units.Factor r4, $r7, r9;
        ucar.units.Factor[] r1, r3, r8, r10;
        ucar.units.Dimension r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20;
        java.lang.String $r5, $r6;

        r0 := @this: ucar.units.Dimension;

        r2 := @parameter0: ucar.units.Dimension;

        r1 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        r3 = r2.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        i15 = 0;

        i16 = 0;

        i17 = 0;

        $i1 = lengthof r1;

        $i0 = lengthof r3;

        $i2 = $i1 + $i0;

        r8 = newarray (ucar.units.Factor)[$i2];

     label1:
        $i3 = lengthof r1;

        if i15 != $i3 goto label2;

        $i14 = lengthof r3;

        i18 = $i14 - i16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i16, r8, i17, i18);

        i19 = i17 + i18;

        goto label8;

     label2:
        $i4 = lengthof r3;

        if i16 != $i4 goto label3;

        $i12 = lengthof r1;

        i20 = $i12 - i15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i15, r8, i17, i20);

        i19 = i17 + i20;

        goto label8;

     label3:
        r9 = r1[i15];

        r4 = r3[i16];

        $r5 = virtualinvoke r9.<ucar.units.Factor: java.lang.String getID()>();

        $r6 = virtualinvoke r4.<ucar.units.Factor: java.lang.String getID()>();

        $i5 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r6);

        if $i5 >= 0 goto label4;

        $i11 = i17;

        i17 = i17 + 1;

        r8[$i11] = r9;

        i15 = i15 + 1;

        goto label7;

     label4:
        if $i5 != 0 goto label6;

        $i7 = virtualinvoke r9.<ucar.units.Factor: int getExponent()>();

        $i8 = virtualinvoke r4.<ucar.units.Factor: int getExponent()>();

        i9 = $i7 + $i8;

        if i9 == 0 goto label5;

        $i10 = i17;

        i17 = i17 + 1;

        $r7 = new ucar.units.Factor;

        specialinvoke $r7.<ucar.units.Factor: void <init>(ucar.units.Factor,int)>(r9, i9);

        r8[$i10] = $r7;

     label5:
        i15 = i15 + 1;

        i16 = i16 + 1;

        goto label7;

     label6:
        $i6 = i17;

        i17 = i17 + 1;

        r8[$i6] = r4;

        i16 = i16 + 1;

     label7:
        goto label1;

     label8:
        $i13 = lengthof r8;

        if i19 >= $i13 goto label9;

        r10 = newarray (ucar.units.Factor)[i19];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r10, 0, i19);

        r8 = r10;

     label9:
        return r8;
    }

    protected ucar.units.Factor[] pow(int)
    {
        ucar.units.Factor $r2, $r3;
        ucar.units.Dimension r0;
        int i0, i1, $i3;
        ucar.units.Factor[] $r1, r4;

        r0 := @this: ucar.units.Dimension;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        r4 = newarray (ucar.units.Factor)[0];

        goto label3;

     label1:
        $r1 = virtualinvoke r0.<ucar.units.Dimension: ucar.units.Factor[] getFactors()>();

        r4 = $r1;

        if i0 == 1 goto label3;

        i1 = lengthof $r1;

     label2:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        if i1 < 0 goto label3;

        $r2 = $r1[i1];

        $r3 = virtualinvoke $r2.<ucar.units.Factor: ucar.units.Factor pow(int)>(i0);

        $r1[i1] = $r3;

        goto label2;

     label3:
        return r4;
    }

    public final boolean isReciprocalOf(ucar.units.Dimension)
    {
        ucar.units.Factor $r4, $r5;
        ucar.units.Dimension r0, r2;
        int $i0, $i1, i2, $i4;
        ucar.units.Factor[] r1, r3;
        boolean $z0, z1, $z2;

        r0 := @this: ucar.units.Dimension;

        r2 := @parameter0: ucar.units.Dimension;

        r1 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        r3 = r2.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $i1 = lengthof r1;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label1;

        z1 = 0;

        goto label6;

     label1:
        i2 = lengthof r1;

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 < 0 goto label3;

        $r5 = r1[i2];

        $r4 = r3[i2];

        $z0 = virtualinvoke $r5.<ucar.units.Factor: boolean isReciprocalOf(ucar.units.Factor)>($r4);

        if $z0 != 0 goto label2;

        goto label3;

     label3:
        if i2 >= 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        z1 = $z2;

     label6:
        return z1;
    }

    public final boolean equals(java.lang.Object)
    {
        ucar.units.Factor $r7, $r8;
        int $i0, $i1, i2, $i4;
        boolean $z0, $z1, z2, $z3;
        ucar.units.Factor[] r3, $r4, $r5, $r6;
        ucar.units.Dimension r0, $r2;
        java.lang.Object r1;

        r0 := @this: ucar.units.Dimension;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        z2 = 1;

        goto label8;

     label1:
        $z0 = r1 instanceof ucar.units.Dimension;

        if $z0 != 0 goto label2;

        z2 = 0;

        goto label8;

     label2:
        $r2 = (ucar.units.Dimension) r1;

        r3 = $r2.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $r4 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $i1 = lengthof $r4;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label3;

        z2 = 0;

        goto label8;

     label3:
        $r5 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        i2 = lengthof $r5;

     label4:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 < 0 goto label5;

        $r6 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $r8 = $r6[i2];

        $r7 = r3[i2];

        $z1 = virtualinvoke $r8.<ucar.units.Factor: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label4;

        goto label5;

     label5:
        if i2 >= 0 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        z2 = $z3;

     label8:
        return z2;
    }

    public int hashCode()
    {
        ucar.units.Factor $r3;
        ucar.units.Dimension r0;
        int $i0, $i1, $i2, $i3, i4, i5;
        ucar.units.Factor[] $r1, $r2;

        r0 := @this: ucar.units.Dimension;

        $i0 = r0.<ucar.units.Dimension: int hashCode>;

        if $i0 != 0 goto label3;

        i4 = 0;

        i5 = 0;

     label1:
        $r1 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $i2 = lengthof $r1;

        if i5 >= $i2 goto label2;

        $r2 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $r3 = $r2[i5];

        $i3 = virtualinvoke $r3.<ucar.units.Factor: int hashCode()>();

        i4 = i4 ^ $i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        r0.<ucar.units.Dimension: int hashCode> = i4;

     label3:
        $i1 = r0.<ucar.units.Dimension: int hashCode>;

        return $i1;
    }

    public final boolean isDimensionless()
    {
        ucar.units.Dimension r0;
        int i0, $i2;
        ucar.units.Factor $r3;
        ucar.units.Factor[] $r1, $r2;
        boolean $z0;

        r0 := @this: ucar.units.Dimension;

        $r1 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        i0 = lengthof $r1;

     label1:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label2;

        $r2 = r0.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $r3 = $r2[i0];

        $z0 = virtualinvoke $r3.<ucar.units.Factor: boolean isDimensionless()>();

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public java.lang.String toString()
    {
        ucar.units.Factor $r5;
        ucar.units.Dimension r1;
        java.lang.StringBuffer $r0, $r6;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r3;
        ucar.units.Factor[] $r2, $r4;

        r1 := @this: ucar.units.Dimension;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(40);

        i4 = 0;

     label1:
        $r2 = r1.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $i0 = lengthof $r2;

        if i4 >= $i0 goto label2;

        $r4 = r1.<ucar.units.Dimension: ucar.units.Factor[] _factors>;

        $r5 = $r4[i4];

        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        i4 = i4 + 1;

        goto label1;

     label2:
        $i1 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        if $i1 == 0 goto label3;

        $i2 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        $i3 = $i2 - 1;

        virtualinvoke $r0.<java.lang.StringBuffer: void setLength(int)>($i3);

     label3:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
}
