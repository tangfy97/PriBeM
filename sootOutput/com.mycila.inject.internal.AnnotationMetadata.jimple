final class com.mycila.inject.internal.AnnotationMetadata extends java.lang.Object
{
    private static final boolean hasAnnotationType;
    private static final java.util.Map DEFAULTS;
    private final java.lang.Class type;
    private final java.util.Map properties;
    private transient volatile java.lang.reflect.Method[] memberMethods;
    static final boolean $assertionsDisabled;

    private static boolean hasAnnotationType(java.lang.ClassLoader)
    {
        java.lang.ClassNotFoundException $r1;
        java.lang.ClassLoader r0;

        r0 := @parameter0: java.lang.ClassLoader;

     label1:
        virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("sun.reflect.annotation.AnnotationType");

     label2:
        return 1;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    void <init>(java.lang.Class, java.util.Map)
    {
        com.mycila.inject.internal.AnnotationMetadata r0;
        java.lang.Class r1;
        java.util.Map r2;

        r0 := @this: com.mycila.inject.internal.AnnotationMetadata;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.AnnotationMetadata: java.lang.Class type> = r1;

        r0.<com.mycila.inject.internal.AnnotationMetadata: java.util.Map properties> = r2;

        return;
    }

    public java.lang.Class getType()
    {
        com.mycila.inject.internal.AnnotationMetadata r0;
        java.lang.Class $r1;

        r0 := @this: com.mycila.inject.internal.AnnotationMetadata;

        $r1 = r0.<com.mycila.inject.internal.AnnotationMetadata: java.lang.Class type>;

        return $r1;
    }

    public java.lang.Object get(java.lang.String)
    {
        java.lang.'annotation'.IncompleteAnnotationException $r5;
        java.util.Map $r2;
        com.mycila.inject.internal.AnnotationMetadata r0;
        int $i0;
        java.lang.Object $r3, $r7;
        java.lang.Class $r4, $r6;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.AnnotationMetadata;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.mycila.inject.internal.AnnotationMetadata: java.util.Map properties>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r5 = new java.lang.'annotation'.IncompleteAnnotationException;

        $r6 = r0.<com.mycila.inject.internal.AnnotationMetadata: java.lang.Class type>;

        specialinvoke $r5.<java.lang.'annotation'.IncompleteAnnotationException: void <init>(java.lang.Class,java.lang.String)>($r6, r1);

        throw $r5;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>($r3);

        if $i0 == 0 goto label2;

        $r7 = staticinvoke <com.mycila.inject.internal.AnnotationMetadata: java.lang.Object cloneArray(java.lang.Object)>($r3);

        goto label3;

     label2:
        $r7 = $r3;

     label3:
        return $r7;
    }

    public java.lang.String toString()
    {
        java.util.Map $r4;
        com.mycila.inject.internal.AnnotationMetadata r1;
        java.lang.String $r3, $r7, $r11, $r13;
        boolean $z0, z1;
        java.util.Map$Entry r9;
        java.util.Iterator $r6;
        java.util.Set $r5;
        java.lang.StringBuilder $r0;
        java.lang.Class $r2;
        java.lang.Object $r8, $r10, $r12;

        r1 := @this: com.mycila.inject.internal.AnnotationMetadata;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r2 = r1.<com.mycila.inject.internal.AnnotationMetadata: java.lang.Class type>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        z1 = 1;

        $r4 = r1.<com.mycila.inject.internal.AnnotationMetadata: java.util.Map properties>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = staticinvoke <com.mycila.inject.internal.AnnotationMetadata: java.lang.String memberValueToString(java.lang.Object)>($r12);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public int hashCode()
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map $r1;
        com.mycila.inject.internal.AnnotationMetadata r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r4, $r6, $r8;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.AnnotationMetadata;

        i4 = 0;

        $r1 = r0.<com.mycila.inject.internal.AnnotationMetadata: java.util.Map properties>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $i0 = virtualinvoke $r7.<java.lang.String: int hashCode()>();

        $i1 = 127 * $i0;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $i2 = staticinvoke <com.mycila.inject.internal.AnnotationMetadata: int memberValueHashCode(java.lang.Object)>($r8);

        $i3 = $i1 ^ $i2;

        i4 = i4 + $i3;

        goto label1;

     label2:
        return i4;
    }

    private boolean isEqual(java.lang.Object)
    {
        java.lang.Object[] $r9;
        java.lang.AssertionError $r14;
        java.lang.reflect.Method[] $r4;
        com.mycila.inject.internal.AnnotationMetadata r0, $r10, $r12;
        int $i0, i1;
        java.lang.String $r6;
        java.lang.reflect.Method r5;
        boolean $z0, $z1, $z2;
        java.lang.IllegalAccessException $r13;
        java.lang.reflect.InvocationTargetException $r15;
        com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler $r8, $r11;
        java.lang.Object r1, $r7, r16;
        java.lang.Class $r2, $r3;

        r0 := @this: com.mycila.inject.internal.AnnotationMetadata;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.AnnotationMetadata: java.lang.Class type>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r3 = class "Lcom/mycila/inject/internal/AnnotationMetadata$AnnotationHandler;";

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z1 == 0 goto label02;

        $r11 = (com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler) r1;

        $r12 = $r11.<com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler: com.mycila.inject.internal.AnnotationMetadata metadata>;

        if $r12 != r0 goto label02;

        return 1;

     label02:
        $r4 = specialinvoke r0.<com.mycila.inject.internal.AnnotationMetadata: java.lang.reflect.Method[] getMemberMethods()>();

        $i0 = lengthof $r4;

        i1 = 0;

     label03:
        if i1 >= $i0 goto label10;

        r5 = $r4[i1];

        $r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $r7 = virtualinvoke r0.<com.mycila.inject.internal.AnnotationMetadata: java.lang.Object get(java.lang.String)>($r6);

        $r8 = specialinvoke r0.<com.mycila.inject.internal.AnnotationMetadata: com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler asOneOfUs(java.lang.Object)>(r1);

        if $r8 == null goto label04;

        $r10 = $r8.<com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler: com.mycila.inject.internal.AnnotationMetadata metadata>;

        r16 = virtualinvoke $r10.<com.mycila.inject.internal.AnnotationMetadata: java.lang.Object get(java.lang.String)>($r6);

        goto label08;

     label04:
        $r9 = newarray (java.lang.Object)[0];

        r16 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r9);

     label05:
        goto label08;

     label06:
        $r15 := @caughtexception;

        return 0;

     label07:
        $r13 := @caughtexception;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r14;

     label08:
        $z2 = staticinvoke <com.mycila.inject.internal.AnnotationMetadata: boolean memberValueEquals(java.lang.Object,java.lang.Object)>($r7, r16);

        if $z2 != 0 goto label09;

        return 0;

     label09:
        i1 = i1 + 1;

        goto label03;

     label10:
        return 1;

        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label06;
        catch java.lang.IllegalAccessException from label04 to label05 with label07;
    }

    private com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler asOneOfUs(java.lang.Object)
    {
        com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler $r3;
        com.mycila.inject.internal.AnnotationMetadata r4;
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.reflect.InvocationHandler $r2;
        boolean $z0, $z1;

        r4 := @this: com.mycila.inject.internal.AnnotationMetadata;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r1);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>(r0);

        $z1 = $r2 instanceof com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler;

        if $z1 == 0 goto label1;

        $r3 = (com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler) $r2;

        return $r3;

     label1:
        return null;
    }

    private java.lang.reflect.Method[] getMemberMethods()
    {
        com.mycila.inject.internal.AnnotationMetadata r0;
        java.lang.Class $r3;
        java.lang.reflect.Method[] $r1, $r2, $r4;

        r0 := @this: com.mycila.inject.internal.AnnotationMetadata;

        $r1 = r0.<com.mycila.inject.internal.AnnotationMetadata: java.lang.reflect.Method[] memberMethods>;

        if $r1 != null goto label1;

        $r3 = r0.<com.mycila.inject.internal.AnnotationMetadata: java.lang.Class type>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>($r4, 1);

        r0.<com.mycila.inject.internal.AnnotationMetadata: java.lang.reflect.Method[] memberMethods> = $r4;

     label1:
        $r2 = r0.<com.mycila.inject.internal.AnnotationMetadata: java.lang.reflect.Method[] memberMethods>;

        return $r2;
    }

    public static java.lang.'annotation'.Annotation buildRandomAnnotation(java.lang.Class)
    {
        com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler $r3;
        com.mycila.inject.internal.AnnotationMetadata $r4;
        java.lang.'annotation'.Annotation $r6;
        java.lang.Class[] $r2;
        java.lang.Class r0;
        java.lang.Object $r5;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = r0;

        $r3 = new com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler;

        $r4 = staticinvoke <com.mycila.inject.internal.AnnotationMetadata: com.mycila.inject.internal.AnnotationMetadata randomAnnotation(java.lang.Class)>(r0);

        specialinvoke $r3.<com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler: void <init>(com.mycila.inject.internal.AnnotationMetadata)>($r4);

        $r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r1, $r2, $r3);

        $r6 = (java.lang.'annotation'.Annotation) $r5;

        return $r6;
    }

    public static java.lang.'annotation'.Annotation buildAnnotation(java.lang.Class, java.util.Map)
    {
        java.lang.Class[] $r2;
        com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler $r3;
        java.util.Map r4;
        com.mycila.inject.internal.AnnotationMetadata $r5;
        java.lang.'annotation'.Annotation $r7;
        java.lang.Class r0;
        java.lang.Object $r6;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.util.Map;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = r0;

        $r3 = new com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler;

        $r5 = staticinvoke <com.mycila.inject.internal.AnnotationMetadata: com.mycila.inject.internal.AnnotationMetadata randomAnnotation(java.lang.Class,java.util.Map)>(r0, r4);

        specialinvoke $r3.<com.mycila.inject.internal.AnnotationMetadata$AnnotationHandler: void <init>(com.mycila.inject.internal.AnnotationMetadata)>($r5);

        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r1, $r2, $r3);

        $r7 = (java.lang.'annotation'.Annotation) $r6;

        return $r7;
    }

    private static boolean memberValueEquals(java.lang.Object, java.lang.Object)
    {
        byte[] $r33, $r34, $r35, $r36;
        int[] $r17, $r18, $r19, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        short[] $r9, $r10, $r11, $r12;
        java.lang.Object[] $r37, $r38, $r39, $r40;
        double[] $r25, $r26, $r27, $r28;
        float[] $r21, $r22, $r23, $r24;
        java.lang.AssertionError $r8;
        long[] $r13, $r14, $r15, $r16;
        boolean[] $r4, $r5, $r6, $r7;
        char[] $r29, $r30, $r31, $r32;
        java.lang.Object r0, r2;
        java.lang.Class $r1, $r3;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label01;

        $z13 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        return $z13;

     label01:
        $z1 = r0 instanceof java.lang.Object[];

        if $z1 == 0 goto label02;

        $z11 = r2 instanceof java.lang.Object[];

        if $z11 == 0 goto label02;

        $r37 = (java.lang.Object[]) r0;

        $r40 = (java.lang.Object[]) $r37;

        $r38 = (java.lang.Object[]) r2;

        $r39 = (java.lang.Object[]) $r38;

        $z12 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r40, $r39);

        return $z12;

     label02:
        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r1 goto label03;

        return 0;

     label03:
        if $r1 != class "[B" goto label04;

        $r33 = (byte[]) r0;

        $r36 = (byte[]) $r33;

        $r34 = (byte[]) r2;

        $r35 = (byte[]) $r34;

        $z10 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r36, $r35);

        return $z10;

     label04:
        if $r1 != class "[C" goto label05;

        $r29 = (char[]) r0;

        $r32 = (char[]) $r29;

        $r30 = (char[]) r2;

        $r31 = (char[]) $r30;

        $z9 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r32, $r31);

        return $z9;

     label05:
        if $r1 != class "[D" goto label06;

        $r25 = (double[]) r0;

        $r28 = (double[]) $r25;

        $r26 = (double[]) r2;

        $r27 = (double[]) $r26;

        $z8 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r28, $r27);

        return $z8;

     label06:
        if $r1 != class "[F" goto label07;

        $r21 = (float[]) r0;

        $r24 = (float[]) $r21;

        $r22 = (float[]) r2;

        $r23 = (float[]) $r22;

        $z7 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r24, $r23);

        return $z7;

     label07:
        if $r1 != class "[I" goto label08;

        $r17 = (int[]) r0;

        $r20 = (int[]) $r17;

        $r18 = (int[]) r2;

        $r19 = (int[]) $r18;

        $z6 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r20, $r19);

        return $z6;

     label08:
        if $r1 != class "[J" goto label09;

        $r13 = (long[]) r0;

        $r16 = (long[]) $r13;

        $r14 = (long[]) r2;

        $r15 = (long[]) $r14;

        $z5 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r16, $r15);

        return $z5;

     label09:
        if $r1 != class "[S" goto label10;

        $r9 = (short[]) r0;

        $r12 = (short[]) $r9;

        $r10 = (short[]) r2;

        $r11 = (short[]) $r10;

        $z4 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r12, $r11);

        return $z4;

     label10:
        $z2 = <com.mycila.inject.internal.AnnotationMetadata: boolean $assertionsDisabled>;

        if $z2 != 0 goto label11;

        if $r1 == class "[Z" goto label11;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label11:
        $r4 = (boolean[]) r0;

        $r7 = (boolean[]) $r4;

        $r5 = (boolean[]) r2;

        $r6 = (boolean[]) $r5;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r7, $r6);

        return $z3;
    }

    private static java.lang.Object cloneArray(java.lang.Object)
    {
        byte[] $r18, r20;
        java.lang.Object[] $r2, r28;
        double[] $r14, r22;
        float[] $r12, r23;
        long[] $r8, r25;
        int[] $r10, r24;
        boolean[] $r4, r27;
        char[] $r16, r21;
        java.lang.Object r0, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        java.lang.Class $r1;
        short[] $r6, r26;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "[B" goto label1;

        $r18 = (byte[]) r0;

        r20 = (byte[]) $r18;

        $r19 = virtualinvoke r20.<java.lang.Object: java.lang.Object clone()>();

        return $r19;

     label1:
        if $r1 != class "[C" goto label2;

        $r16 = (char[]) r0;

        r21 = (char[]) $r16;

        $r17 = virtualinvoke r21.<java.lang.Object: java.lang.Object clone()>();

        return $r17;

     label2:
        if $r1 != class "[D" goto label3;

        $r14 = (double[]) r0;

        r22 = (double[]) $r14;

        $r15 = virtualinvoke r22.<java.lang.Object: java.lang.Object clone()>();

        return $r15;

     label3:
        if $r1 != class "[F" goto label4;

        $r12 = (float[]) r0;

        r23 = (float[]) $r12;

        $r13 = virtualinvoke r23.<java.lang.Object: java.lang.Object clone()>();

        return $r13;

     label4:
        if $r1 != class "[I" goto label5;

        $r10 = (int[]) r0;

        r24 = (int[]) $r10;

        $r11 = virtualinvoke r24.<java.lang.Object: java.lang.Object clone()>();

        return $r11;

     label5:
        if $r1 != class "[J" goto label6;

        $r8 = (long[]) r0;

        r25 = (long[]) $r8;

        $r9 = virtualinvoke r25.<java.lang.Object: java.lang.Object clone()>();

        return $r9;

     label6:
        if $r1 != class "[S" goto label7;

        $r6 = (short[]) r0;

        r26 = (short[]) $r6;

        $r7 = virtualinvoke r26.<java.lang.Object: java.lang.Object clone()>();

        return $r7;

     label7:
        if $r1 != class "[Z" goto label8;

        $r4 = (boolean[]) r0;

        r27 = (boolean[]) $r4;

        $r5 = virtualinvoke r27.<java.lang.Object: java.lang.Object clone()>();

        return $r5;

     label8:
        $r2 = (java.lang.Object[]) r0;

        r28 = (java.lang.Object[]) $r2;

        $r3 = virtualinvoke r28.<java.lang.Object: java.lang.Object clone()>();

        return $r3;
    }

    private static int memberValueHashCode(java.lang.Object)
    {
        byte[] $r18, $r19;
        java.lang.Object[] $r2, $r3;
        double[] $r14, $r15;
        float[] $r12, $r13;
        long[] $r8, $r9;
        int[] $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;
        boolean[] $r4, $r5;
        char[] $r16, $r17;
        java.lang.Object r0;
        java.lang.Class $r1;
        short[] $r6, $r7;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $i9 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        return $i9;

     label1:
        if $r1 != class "[B" goto label2;

        $r18 = (byte[]) r0;

        $r19 = (byte[]) $r18;

        $i8 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r19);

        return $i8;

     label2:
        if $r1 != class "[C" goto label3;

        $r16 = (char[]) r0;

        $r17 = (char[]) $r16;

        $i7 = staticinvoke <java.util.Arrays: int hashCode(char[])>($r17);

        return $i7;

     label3:
        if $r1 != class "[D" goto label4;

        $r14 = (double[]) r0;

        $r15 = (double[]) $r14;

        $i6 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r15);

        return $i6;

     label4:
        if $r1 != class "[F" goto label5;

        $r12 = (float[]) r0;

        $r13 = (float[]) $r12;

        $i5 = staticinvoke <java.util.Arrays: int hashCode(float[])>($r13);

        return $i5;

     label5:
        if $r1 != class "[I" goto label6;

        $r10 = (int[]) r0;

        $r11 = (int[]) $r10;

        $i4 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r11);

        return $i4;

     label6:
        if $r1 != class "[J" goto label7;

        $r8 = (long[]) r0;

        $r9 = (long[]) $r8;

        $i3 = staticinvoke <java.util.Arrays: int hashCode(long[])>($r9);

        return $i3;

     label7:
        if $r1 != class "[S" goto label8;

        $r6 = (short[]) r0;

        $r7 = (short[]) $r6;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(short[])>($r7);

        return $i2;

     label8:
        if $r1 != class "[Z" goto label9;

        $r4 = (boolean[]) r0;

        $r5 = (boolean[]) $r4;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(boolean[])>($r5);

        return $i1;

     label9:
        $r2 = (java.lang.Object[]) r0;

        $r3 = (java.lang.Object[]) $r2;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r3);

        return $i0;
    }

    private static java.lang.String memberValueToString(java.lang.Object)
    {
        byte[] $r26, $r27;
        java.lang.Object[] $r2, $r3;
        double[] $r20, $r21;
        float[] $r17, $r18;
        long[] $r11, $r12;
        int[] $r14, $r15;
        java.lang.String $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r29;
        boolean $z0;
        boolean[] $r5, $r6;
        char[] $r23, $r24;
        java.lang.Object r0;
        java.lang.Class $r1;
        short[] $r8, $r9;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r29 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r29;

     label1:
        if $r1 != class "[B" goto label2;

        $r26 = (byte[]) r0;

        $r27 = (byte[]) $r26;

        $r28 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r27);

        return $r28;

     label2:
        if $r1 != class "[C" goto label3;

        $r23 = (char[]) r0;

        $r24 = (char[]) $r23;

        $r25 = staticinvoke <java.util.Arrays: java.lang.String toString(char[])>($r24);

        return $r25;

     label3:
        if $r1 != class "[D" goto label4;

        $r20 = (double[]) r0;

        $r21 = (double[]) $r20;

        $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r21);

        return $r22;

     label4:
        if $r1 != class "[F" goto label5;

        $r17 = (float[]) r0;

        $r18 = (float[]) $r17;

        $r19 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>($r18);

        return $r19;

     label5:
        if $r1 != class "[I" goto label6;

        $r14 = (int[]) r0;

        $r15 = (int[]) $r14;

        $r16 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r15);

        return $r16;

     label6:
        if $r1 != class "[J" goto label7;

        $r11 = (long[]) r0;

        $r12 = (long[]) $r11;

        $r13 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>($r12);

        return $r13;

     label7:
        if $r1 != class "[S" goto label8;

        $r8 = (short[]) r0;

        $r9 = (short[]) $r8;

        $r10 = staticinvoke <java.util.Arrays: java.lang.String toString(short[])>($r9);

        return $r10;

     label8:
        if $r1 != class "[Z" goto label9;

        $r5 = (boolean[]) r0;

        $r6 = (boolean[]) $r5;

        $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(boolean[])>($r6);

        return $r7;

     label9:
        $r2 = (java.lang.Object[]) r0;

        $r3 = (java.lang.Object[]) $r2;

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r3);

        return $r4;
    }

    private static com.mycila.inject.internal.AnnotationMetadata randomAnnotation(java.lang.Class)
    {
        java.util.LinkedHashMap $r1;
        com.mycila.inject.internal.AnnotationMetadata $r2;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.AnnotationMetadata: com.mycila.inject.internal.AnnotationMetadata randomAnnotation(java.lang.Class,java.util.Map)>(r0, $r1);

        return $r2;
    }

    private static com.mycila.inject.internal.AnnotationMetadata randomAnnotation(java.lang.Class, java.util.Map)
    {
        java.util.HashMap $r14;
        java.lang.reflect.Method[] $r3;
        java.util.LinkedHashMap $r13;
        java.util.Map r1, r7, $r11;
        int $i0, i1;
        com.mycila.inject.internal.AnnotationMetadata $r15;
        java.lang.String $r6;
        java.lang.reflect.Method r5;
        boolean $z0, $z1;
        java.lang.Class r2, $r9;
        java.lang.Object $r8, $r10, r12;

        r2 := @parameter0: java.lang.Class;

        r7 := @parameter1: java.util.Map;

        $r13 = new java.util.LinkedHashMap;

        specialinvoke $r13.<java.util.LinkedHashMap: void <init>()>();

        $z0 = <com.mycila.inject.internal.AnnotationMetadata: boolean hasAnnotationType>;

        if $z0 == 0 goto label1;

        $r11 = staticinvoke <com.mycila.inject.internal.AnnotationMetadata: java.util.Map getAnnotationDefaults(java.lang.Class)>(r2);

        goto label2;

     label1:
        $r14 = new java.util.HashMap;

        $r11 = $r14;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

     label2:
        r1 = $r11;

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>($r3, 1);

        $i0 = lengthof $r3;

        i1 = 0;

     label3:
        if i1 >= $i0 goto label7;

        r5 = $r3[i1];

        $r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = interfaceinvoke r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

        goto label6;

     label4:
        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r12 = $r8;

        if $r8 != null goto label5;

        $r9 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        r12 = staticinvoke <com.mycila.inject.internal.AnnotationMetadata: java.lang.Object getTypeDefaults(java.lang.Class)>($r9);

     label5:
        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r12);

     label6:
        i1 = i1 + 1;

        goto label3;

     label7:
        $r15 = new com.mycila.inject.internal.AnnotationMetadata;

        specialinvoke $r15.<com.mycila.inject.internal.AnnotationMetadata: void <init>(java.lang.Class,java.util.Map)>(r2, $r13);

        return $r15;
    }

    private static java.lang.Object getTypeDefaults(java.lang.Class)
    {
        java.lang.Enum $r12;
        java.util.Map $r1;
        java.lang.String $r6, $r8, $r11, $r20;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r3, $r16;
        java.lang.reflect.Field $r10;
        java.lang.Exception $r15;
        java.lang.reflect.Field[] $r9;
        java.lang.Class r0, $r13;
        java.lang.Object $r2, $r14;
        java.lang.StringBuilder $r4, $r5, $r7, $r17, $r18, $r19;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.mycila.inject.internal.AnnotationMetadata: java.util.Map DEFAULTS>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r13, 0);

        return $r14;

     label2:
        if r0 != class "Ljava/lang/String;" goto label3;

        return "";

     label3:
        if r0 != class "Ljava/lang/Class;" goto label4;

        return class "Ljava/lang/Void;";

     label4:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isEnum()>();

        if $z1 == 0 goto label6;

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r10 = $r9[0];

        $r11 = virtualinvoke $r10.<java.lang.reflect.Field: java.lang.String getName()>();

        $r12 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(r0, $r11);

     label5:
        return $r12;

     label6:
        goto label8;

     label7:
        $r15 := @caughtexception;

        $r16 = new java.lang.UnsupportedOperationException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to randomize annotation: cannot get first enum of ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label8:
        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type: ");

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r3;

        catch java.lang.Exception from label4 to label5 with label7;
    }

    private static java.util.Map getAnnotationDefaults(java.lang.Class)
    {
        sun.reflect.'annotation'.AnnotationType r5;
        java.lang.reflect.Field $r2;
        java.lang.Exception $r7;
        java.util.LinkedHashMap $r0;
        java.util.Map $r6;
        java.lang.Class $r1, r3;
        java.lang.Object $r4;

        r3 := @parameter0: java.lang.Class;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

     label1:
        $r1 = class "Ljava/lang/Class;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("annotationType");

        virtualinvoke $r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r4 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r3);

        r5 = (sun.reflect.'annotation'.AnnotationType) $r4;

        $r6 = virtualinvoke r5.<sun.reflect.'annotation'.AnnotationType: java.util.Map memberDefaults()>();

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return $r0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static boolean access$000(com.mycila.inject.internal.AnnotationMetadata, java.lang.Object)
    {
        com.mycila.inject.internal.AnnotationMetadata r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.AnnotationMetadata;

        r1 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.AnnotationMetadata: boolean isEqual(java.lang.Object)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.AnnotationMetadata$1 $r1;
        java.lang.Class $r0, $r2;
        java.lang.ClassLoader $r3;
        boolean $z0, $z1, $z2;

        $r0 = class "Lcom/mycila/inject/internal/AnnotationMetadata;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        <com.mycila.inject.internal.AnnotationMetadata: boolean $assertionsDisabled> = $z2;

        $r1 = new com.mycila.inject.internal.AnnotationMetadata$1;

        specialinvoke $r1.<com.mycila.inject.internal.AnnotationMetadata$1: void <init>(int)>(16);

        <com.mycila.inject.internal.AnnotationMetadata: java.util.Map DEFAULTS> = $r1;

        $r2 = class "Lcom/mycila/inject/internal/AnnotationMetadata;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z1 = staticinvoke <com.mycila.inject.internal.AnnotationMetadata: boolean hasAnnotationType(java.lang.ClassLoader)>($r3);

        <com.mycila.inject.internal.AnnotationMetadata: boolean hasAnnotationType> = $z1;

        return;
    }
}
