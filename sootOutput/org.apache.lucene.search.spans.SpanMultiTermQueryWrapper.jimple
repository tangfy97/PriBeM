public class org.apache.lucene.search.spans.SpanMultiTermQueryWrapper extends org.apache.lucene.search.spans.SpanQuery
{
    protected final org.apache.lucene.search.MultiTermQuery query;
    public static final org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod SCORING_SPAN_QUERY_REWRITE;

    public void <init>(org.apache.lucene.search.MultiTermQuery)
    {
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite $r5;
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper r0;
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod $r3;
        org.apache.lucene.search.MultiTermQuery r1;
        org.apache.lucene.search.TopTermsRewrite $r4;
        int $i0;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;

        r1 := @parameter0: org.apache.lucene.search.MultiTermQuery;

        specialinvoke r0.<org.apache.lucene.search.spans.SpanQuery: void <init>()>();

        r0.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.MultiTermQuery query> = r1;

        $r2 = virtualinvoke r1.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod getRewriteMethod()>();

        $z0 = $r2 instanceof org.apache.lucene.search.TopTermsRewrite;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.lucene.search.TopTermsRewrite) $r2;

        $i0 = virtualinvoke $r4.<org.apache.lucene.search.TopTermsRewrite: int getSize()>();

        $r5 = new org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite;

        specialinvoke $r5.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite: void <init>(int)>($i0);

        virtualinvoke r0.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: void setRewriteMethod(org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod)>($r5);

        goto label2;

     label1:
        $r3 = <org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod SCORING_SPAN_QUERY_REWRITE>;

        virtualinvoke r0.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: void setRewriteMethod(org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod)>($r3);

     label2:
        return;
    }

    public final org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod getRewriteMethod()
    {
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper r0;
        java.lang.UnsupportedOperationException $r4;
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod $r3;
        org.apache.lucene.search.MultiTermQuery $r1;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;

        $r1 = r0.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.MultiTermQuery query>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod getRewriteMethod()>();

        $z0 = $r2 instanceof org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("You can only use SpanMultiTermQueryWrapper with a suitable SpanRewriteMethod.");

        throw $r4;

     label1:
        $r3 = (org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod) $r2;

        return $r3;
    }

    public final void setRewriteMethod(org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod)
    {
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper r0;
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod r1;
        org.apache.lucene.search.MultiTermQuery $r2;

        r0 := @this: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;

        r1 := @parameter0: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod;

        $r2 = r0.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.MultiTermQuery query>;

        virtualinvoke $r2.<org.apache.lucene.search.MultiTermQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>(r1);

        return;
    }

    public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map) throws java.io.IOException
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper r1;
        java.util.Map r4;
        org.apache.lucene.util.Bits r3;
        org.apache.lucene.index.AtomicReaderContext r2;

        r1 := @this: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;

        r2 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        r3 := @parameter1: org.apache.lucene.util.Bits;

        r4 := @parameter2: java.util.Map;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Query should have been rewritten");

        throw $r0;
    }

    public java.lang.String getField()
    {
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper r0;
        java.lang.String $r2;
        org.apache.lucene.search.MultiTermQuery $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;

        $r1 = r0.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.MultiTermQuery query>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.search.MultiTermQuery: java.lang.String getField()>();

        return $r2;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper r1;
        org.apache.lucene.search.MultiTermQuery $r3;
        java.lang.StringBuilder $r0;
        java.lang.String r2, $r4, $r5;

        r1 := @this: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SpanMultiTermQueryWrapper(");

        $r3 = r1.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.MultiTermQuery query>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.search.MultiTermQuery: java.lang.String toString(java.lang.String)>(r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper r0;
        java.lang.UnsupportedOperationException $r4;
        org.apache.lucene.search.MultiTermQuery $r2;
        org.apache.lucene.index.IndexReader r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        $r2 = r0.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.MultiTermQuery query>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)>(r1);

        $z0 = $r3 instanceof org.apache.lucene.search.spans.SpanQuery;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("You can only use SpanMultiTermQueryWrapper with a suitable SpanRewriteMethod.");

        throw $r4;

     label1:
        return $r3;
    }

    public int hashCode()
    {
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper r0;
        org.apache.lucene.search.MultiTermQuery $r1;
        int $i0, $i1;

        r0 := @this: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;

        $r1 = r0.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.MultiTermQuery query>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.MultiTermQuery: int hashCode()>();

        $i1 = 31 * $i0;

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper r0, r4;
        org.apache.lucene.search.MultiTermQuery $r5, $r6;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.apache.lucene.search.spans.SpanMultiTermQueryWrapper) r1;

        $r6 = r0.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.MultiTermQuery query>;

        $r5 = r4.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.MultiTermQuery query>;

        $z0 = virtualinvoke $r6.<org.apache.lucene.search.MultiTermQuery: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    static void <clinit>()
    {
        org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1 $r0;

        $r0 = new org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1;

        specialinvoke $r0.<org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1: void <init>()>();

        <org.apache.lucene.search.spans.SpanMultiTermQueryWrapper: org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod SCORING_SPAN_QUERY_REWRITE> = $r0;

        return;
    }
}
