public class org.waveprotocol.wave.client.editor.impl.NodeManager extends java.lang.Object
{
    private static final java.lang.String BACKREF_NAME;
    private static final java.lang.String TRANSPARENCY;
    private static final java.lang.String TRANSPARENT_BACKREF;
    private static final java.lang.String MAY_CONTAIN_SELECTION;
    private static int markerIndex;
    private final org.waveprotocol.wave.client.editor.impl.HtmlView filteredHtmlView;
    private final org.waveprotocol.wave.client.editor.content.ContentView renderedContentView;
    private final org.waveprotocol.wave.client.editor.extract.Repairer repairer;
    static final boolean $assertionsDisabled;

    public static java.lang.String getNextMarkerName(java.lang.String)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, r8, $r10;
        boolean $z0;
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r5, $r6, $r7, $r9;

        r8 := @parameter0: java.lang.String;

        $i0 = <org.waveprotocol.wave.client.editor.impl.NodeManager: int markerIndex>;

        $i1 = $i0 + 1;

        <org.waveprotocol.wave.client.editor.impl.NodeManager: int markerIndex> = $i1;

        $z0 = staticinvoke <org.waveprotocol.wave.client.debug.logger.LogLevel: boolean showDebug()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_x_");

        $i3 = <org.waveprotocol.wave.client.editor.impl.NodeManager: int markerIndex>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_x");

        $i2 = <org.waveprotocol.wave.client.editor.impl.NodeManager: int markerIndex>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static boolean isTransparent(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        java.lang.Object $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String TRANSPARENCY>;

        $r2 = virtualinvoke r0.<com.google.gwt.dom.client.Element: java.lang.Object getPropertyObject(java.lang.String)>($r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void setTransparency(com.google.gwt.dom.client.Element, org.waveprotocol.wave.model.document.util.FilteredView$Skip)
    {
        com.google.gwt.dom.client.Element r0;
        java.lang.String $r2;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip r1;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.FilteredView$Skip;

        $r2 = <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String TRANSPARENCY>;

        virtualinvoke r0.<com.google.gwt.dom.client.Element: void setPropertyObject(java.lang.String,java.lang.Object)>($r2, r1);

        return;
    }

    public static org.waveprotocol.wave.model.document.util.FilteredView$Skip getTransparency(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        java.lang.Object $r2;
        java.lang.String $r1;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r3;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String TRANSPARENCY>;

        $r2 = virtualinvoke r0.<com.google.gwt.dom.client.Element: java.lang.Object getPropertyObject(java.lang.String)>($r1);

        $r3 = (org.waveprotocol.wave.model.document.util.FilteredView$Skip) $r2;

        return $r3;
    }

    public static org.waveprotocol.wave.client.editor.content.TransparentManager getTransparentManager(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        java.lang.Object $r2;
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.content.TransparentManager $r3;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String TRANSPARENT_BACKREF>;

        $r2 = virtualinvoke r0.<com.google.gwt.dom.client.Element: java.lang.Object getPropertyObject(java.lang.String)>($r1);

        $r3 = (org.waveprotocol.wave.client.editor.content.TransparentManager) $r2;

        return $r3;
    }

    public static void setTransparentBackref(com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.content.TransparentManager)
    {
        com.google.gwt.dom.client.Element r0;
        java.lang.String $r2;
        org.waveprotocol.wave.client.editor.content.TransparentManager r1;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.TransparentManager;

        $r2 = <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String TRANSPARENT_BACKREF>;

        virtualinvoke r0.<com.google.gwt.dom.client.Element: void setPropertyObject(java.lang.String,java.lang.Object)>($r2, r1);

        return;
    }

    public void <init>(org.waveprotocol.wave.client.editor.impl.HtmlView, org.waveprotocol.wave.client.editor.content.ContentView, org.waveprotocol.wave.client.editor.extract.Repairer)
    {
        org.waveprotocol.wave.client.editor.content.ContentView r2;
        org.waveprotocol.wave.client.editor.extract.Repairer r3;
        org.waveprotocol.wave.client.editor.impl.NodeManager r0;
        org.waveprotocol.wave.client.editor.impl.HtmlView r1;

        r0 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.impl.HtmlView;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentView;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.extract.Repairer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.impl.HtmlView filteredHtmlView> = r1;

        r0.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView> = r2;

        r0.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.extract.Repairer repairer> = r3;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode findNodeWrapper(com.google.gwt.dom.client.Node) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r2;
        org.waveprotocol.wave.client.editor.impl.NodeManager r0;
        com.google.gwt.dom.client.Node r1;

        r0 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r1 := @parameter0: com.google.gwt.dom.client.Node;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentNode findNodeWrapper(com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Element)>(r1, null);

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode findNodeWrapper(com.google.gwt.dom.client.Node, com.google.gwt.dom.client.Element) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        com.google.gwt.core.client.JavaScriptObject $r2, $r6;
        com.google.gwt.dom.client.Text $r7;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r8;
        com.google.gwt.dom.client.Element r3, $r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r5;
        org.waveprotocol.wave.client.editor.impl.NodeManager r1;
        com.google.gwt.dom.client.Node r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r0 := @parameter0: com.google.gwt.dom.client.Node;

        r3 := @parameter1: com.google.gwt.dom.client.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r0);

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r7 = (com.google.gwt.dom.client.Text) $r6;

        $r8 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentTextNode findTextWrapper(com.google.gwt.dom.client.Text,boolean)>($r7, 0);

        return $r8;

     label2:
        $r2 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r4 = (com.google.gwt.dom.client.Element) $r2;

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement findElementWrapper(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Element)>($r4, r3);

        return $r5;
    }

    private org.waveprotocol.wave.client.editor.content.ContentNode nullifyIfWrongDocument(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentView $r1, $r3;
        org.waveprotocol.wave.client.editor.impl.NodeManager r2;

        r2 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentView getRenderedContentView()>();

        $r3 = r2.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        if $r1 != $r3 goto label1;

        return r0;

     label1:
        return null;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement findElementWrapper(com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r8;
        com.google.gwt.core.client.JavaScriptObject $r5;
        org.waveprotocol.wave.client.editor.impl.HtmlView r2;
        com.google.gwt.dom.client.Element r0, r6;
        java.lang.Object $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r7, $r9;
        org.waveprotocol.wave.client.editor.impl.NodeManager r1;
        com.google.gwt.dom.client.Node $r4;

        r1 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        if r0 != null goto label1;

        return null;

     label1:
        r2 = r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.impl.HtmlView filteredHtmlView>;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getVisibleNode(java.lang.Object)>(r0);

        $r4 = (com.google.gwt.dom.client.Node) $r3;

        $r5 = virtualinvoke $r4.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r6 = (com.google.gwt.dom.client.Element) $r5;

        if r6 == null goto label2;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>(r6);

        $r8 = specialinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentNode nullifyIfWrongDocument(org.waveprotocol.wave.client.editor.content.ContentNode)>($r7);

        $r9 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r8;

        goto label3;

     label2:
        $r9 = null;

     label3:
        return $r9;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement findElementWrapper(com.google.gwt.dom.client.Element, com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r1, r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.impl.NodeManager r0;

        r0 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r1 := @parameter0: com.google.gwt.dom.client.Element;

        r3 := @parameter1: com.google.gwt.dom.client.Element;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement findElementWrapper(com.google.gwt.dom.client.Element)>(r1);

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentTextNode findTextWrapper(com.google.gwt.dom.client.Text, boolean) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r18, $r23, r42, r43;
        com.google.gwt.dom.client.Text r0, $r13, r39, r41;
        boolean z0, $z1, $z2;
        org.waveprotocol.wave.client.editor.content.ContentView r2;
        org.waveprotocol.wave.model.document.util.Point$El $r21, $r22, $r27, $r28, $r37, $r38;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r11, $r19, $r24;
        com.google.gwt.dom.client.Element $r8, $r33;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted $r20, $r26, $r36;
        java.lang.ClassCastException $r34;
        org.waveprotocol.wave.client.editor.content.ContentElement $r6, $r9;
        com.google.gwt.core.client.JavaScriptObject $r7, $r17;
        java.lang.RuntimeException $r30;
        org.waveprotocol.wave.client.editor.impl.HtmlView r3;
        java.lang.Object $r4, $r5, $r10, $r12, $r15, $r29, $r31, $r32;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r25, $r35;
        org.waveprotocol.wave.client.editor.impl.NodeManager r1;
        com.google.gwt.dom.client.Node r14, $r16, r40, $r44;

        r1 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r0 := @parameter0: com.google.gwt.dom.client.Text;

        z0 := @parameter1: boolean;

        if r0 != null goto label01;

        return null;

     label01:
        r2 = r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        r3 = r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.impl.HtmlView filteredHtmlView>;

        r39 = r0;

        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getPreviousSibling(java.lang.Object)>(r0);

        r40 = (com.google.gwt.dom.client.Node) $r4;

     label02:
        if r40 == null goto label04;

        $r31 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object asText(java.lang.Object)>(r40);

        r41 = (com.google.gwt.dom.client.Text) $r31;

        if r41 != null goto label03;

        goto label04;

     label03:
        r39 = r41;

        $r32 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getPreviousSibling(java.lang.Object)>(r40);

        r40 = (com.google.gwt.dom.client.Node) $r32;

        goto label02;

     label04:
        $r5 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getParentElement(java.lang.Object)>(r0);

        $r33 = (com.google.gwt.dom.client.Element) $r5;

        if $r33 != null goto label05;

        $r30 = new java.lang.RuntimeException;

        specialinvoke $r30.<java.lang.RuntimeException: void <init>(java.lang.String)>("Somehow we are asking for the wrapper of something not in the editor??");

        throw $r30;

     label05:
        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>($r33);

        if r40 != null goto label06;

        $r29 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getFirstChild(java.lang.Object)>($r6);

        r42 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r29;

        goto label07;

     label06:
        $r7 = virtualinvoke r40.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r8 = (com.google.gwt.dom.client.Element) $r7;

        $r9 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>($r8);

        $r10 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getNextSibling(java.lang.Object)>($r9);

        r42 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r10;

     label07:
        if r42 != null goto label08;

        $r26 = new org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted;

        $r27 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r6, null);

        $r28 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r3, $r33);

        specialinvoke $r26.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted: void <init>(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r27, $r28);

        throw $r26;

     label08:
        r11 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r42;

     label09:
        goto label12;

     label10:
        $r34 := @caughtexception;

        $z2 = virtualinvoke r42.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isImplAttached()>();

        if $z2 == 0 goto label11;

        $r36 = new org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted;

        $r37 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r6, r42);

        $r38 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElementReverse(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>(r3, $r33, r40);

        specialinvoke $r36.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted: void <init>(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r37, $r38);

        throw $r36;

     label11:
        $r35 = new org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing;

        specialinvoke $r35.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing: void <init>(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element)>(r42, $r33);

        throw $r35;

     label12:
        $r12 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getNextSibling(java.lang.Object)>(r11);

        r43 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r12;

        if r43 == null goto label13;

        $z1 = virtualinvoke r43.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isImplAttached()>();

        if $z1 != 0 goto label13;

        $r25 = new org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing;

        specialinvoke $r25.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing: void <init>(org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Element)>(r43, $r33);

        throw $r25;

     label13:
        $r13 = virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        if r39 == $r13 goto label15;

        if z0 == 0 goto label14;

        virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void setTextNodelet(com.google.gwt.dom.client.Text)>(r39);

        $r23 = specialinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentNode nullifyIfWrongDocument(org.waveprotocol.wave.client.editor.content.ContentNode)>(r11);

        $r24 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r23;

        return $r24;

     label14:
        $r20 = new org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted;

        $r21 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r6, r11);

        $r22 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r33, r39);

        specialinvoke $r20.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted: void <init>(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r21, $r22);

        throw $r20;

     label15:
        if r43 != null goto label16;

        $r44 = null;

        goto label17;

     label16:
        $r44 = virtualinvoke r43.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

     label17:
        r14 = $r44;

     label18:
        if r39 == r14 goto label20;

        if r39 == null goto label20;

        if r39 != r0 goto label19;

        $r18 = specialinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentNode nullifyIfWrongDocument(org.waveprotocol.wave.client.editor.content.ContentNode)>(r11);

        $r19 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r18;

        return $r19;

     label19:
        $r15 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r39);

        $r16 = (com.google.gwt.dom.client.Node) $r15;

        $r17 = virtualinvoke $r16.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r39 = (com.google.gwt.dom.client.Text) $r17;

        goto label18;

     label20:
        r42 = r43;

        goto label07;

        catch java.lang.ClassCastException from label08 to label09 with label10;
    }

    public org.waveprotocol.wave.model.document.util.Point nodeOffsetToWrapperPoint(com.google.gwt.dom.client.Node, int) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        com.google.gwt.core.client.JavaScriptObject $r1, $r6;
        com.google.gwt.dom.client.Text $r7;
        com.google.gwt.dom.client.Element r2;
        int i0;
        org.waveprotocol.wave.client.editor.impl.NodeManager r3;
        com.google.gwt.dom.client.Node r0, $r4;
        org.waveprotocol.wave.model.document.util.Point $r5, $r8;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r0 := @parameter0: com.google.gwt.dom.client.Node;

        i0 := @parameter1: int;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r0);

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r7 = (com.google.gwt.dom.client.Text) $r6;

        $r8 = specialinvoke r3.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point textNodeToWrapperPoint(com.google.gwt.dom.client.Text,int)>($r7, i0);

        return $r8;

     label1:
        $r1 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r2 = (com.google.gwt.dom.client.Element) $r1;

        $r4 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.dom.client.Node nodeAfterFromOffset(com.google.gwt.dom.client.Element,int)>(r2, i0);

        $r5 = specialinvoke r3.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point elementNodeToWrapperPoint(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Node)>(r2, $r4);

        return $r5;
    }

    private org.waveprotocol.wave.model.document.util.Point textNodeToWrapperPoint(com.google.gwt.dom.client.Text, int) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        com.google.gwt.dom.client.Text r0;
        org.waveprotocol.wave.model.document.util.Point$Tx $r6;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r5;
        com.google.gwt.dom.client.Element $r1, $r7, $r8;
        int i0, $i1, $i2;
        org.waveprotocol.wave.client.editor.impl.NodeManager r4;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r2, $r3;
        com.google.gwt.dom.client.Node $r10;
        org.waveprotocol.wave.model.document.util.Point $r9;

        r4 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r0 := @parameter0: com.google.gwt.dom.client.Text;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Element getParentElement()>();

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.FilteredView$Skip getTransparency(com.google.gwt.dom.client.Element)>($r1);

        $r3 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip DEEP>;

        if $r2 != $r3 goto label1;

        $r7 = virtualinvoke r0.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Element getParentElement()>();

        $r8 = virtualinvoke $r7.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        $r10 = (com.google.gwt.dom.client.Node) $r7;

        $r9 = specialinvoke r4.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point elementNodeToWrapperPoint(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Node)>($r8, $r10);

        return $r9;

     label1:
        $r5 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentTextNode findTextWrapper(com.google.gwt.dom.client.Text,boolean)>(r0, 1);

        $i1 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getOffset(com.google.gwt.dom.client.Text)>(r0);

        $i2 = i0 + $i1;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r5, $i2);

        return $r6;
    }

    private org.waveprotocol.wave.model.document.util.Point elementNodeToWrapperPoint(com.google.gwt.dom.client.Element, com.google.gwt.dom.client.Node) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r7;
        org.waveprotocol.wave.model.document.util.Point$El $r8;
        org.waveprotocol.wave.client.editor.impl.HtmlView r1;
        com.google.gwt.dom.client.Element r4;
        java.lang.Object $r2, $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r6;
        org.waveprotocol.wave.client.editor.impl.NodeManager r0;
        com.google.gwt.dom.client.Node r5;

        r0 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r4 := @parameter0: com.google.gwt.dom.client.Element;

        r5 := @parameter1: com.google.gwt.dom.client.Node;

        r1 = r0.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.impl.HtmlView filteredHtmlView>;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getVisibleNode(java.lang.Object)>(r5);

        if $r2 == r5 goto label1;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r5);

        r5 = (com.google.gwt.dom.client.Node) $r3;

        if r5 == null goto label1;

        r4 = virtualinvoke r5.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

     label1:
        $r6 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement findElementWrapper(com.google.gwt.dom.client.Element)>(r4);

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentNode findNodeWrapper(com.google.gwt.dom.client.Node)>(r5);

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r6, $r7);

        return $r8;
    }

    public org.waveprotocol.wave.model.document.util.Point nodeletPointToWrapperPoint(org.waveprotocol.wave.model.document.util.Point) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        com.google.gwt.dom.client.Text $r12;
        int $i0;
        org.waveprotocol.wave.model.document.util.Point r0, $r8, $r13;
        boolean $z0;
        com.google.gwt.core.client.JavaScriptObject $r4, $r11;
        com.google.gwt.dom.client.Element $r5;
        java.lang.Object $r2, $r6, $r9;
        org.waveprotocol.wave.client.editor.impl.NodeManager r1;
        com.google.gwt.dom.client.Node $r3, $r7, $r10;

        r1 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r10 = (com.google.gwt.dom.client.Node) $r9;

        $r11 = virtualinvoke $r10.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r12 = (com.google.gwt.dom.client.Text) $r11;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $r13 = specialinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point textNodeToWrapperPoint(com.google.gwt.dom.client.Text,int)>($r12, $i0);

        return $r13;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r3 = (com.google.gwt.dom.client.Node) $r2;

        $r4 = virtualinvoke $r3.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r5 = (com.google.gwt.dom.client.Element) $r4;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r7 = (com.google.gwt.dom.client.Node) $r6;

        $r8 = specialinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point elementNodeToWrapperPoint(com.google.gwt.dom.client.Element,com.google.gwt.dom.client.Node)>($r5, $r7);

        return $r8;
    }

    public org.waveprotocol.wave.client.editor.content.HtmlPoint wrapperPointToHtmlPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.HtmlPoint $r3, $r4;
        org.waveprotocol.wave.client.editor.impl.NodeManager r1;
        org.waveprotocol.wave.model.document.util.Point r0, $r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.HtmlPoint wrapperTextPointToHtmlPoint(org.waveprotocol.wave.model.document.util.Point)>(r0);

        return $r4;

     label1:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point wrapperElementPointToNodeletPoint(org.waveprotocol.wave.model.document.util.Point)>(r0);

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletPointToHtmlPoint(org.waveprotocol.wave.model.document.util.Point)>($r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.document.util.Point wrapperPointToNodeletPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.HtmlPoint $r3;
        org.waveprotocol.wave.model.document.util.Point$Tx $r5;
        int $i0;
        org.waveprotocol.wave.client.editor.impl.NodeManager r1;
        com.google.gwt.dom.client.Node $r4;
        org.waveprotocol.wave.model.document.util.Point r0, $r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r3 = specialinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.HtmlPoint wrapperTextPointToHtmlPoint(org.waveprotocol.wave.model.document.util.Point)>(r0);

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.HtmlPoint: com.google.gwt.dom.client.Node getNode()>();

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.HtmlPoint: int getOffset()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r4, $i0);

        return $r5;

     label1:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point wrapperElementPointToNodeletPoint(org.waveprotocol.wave.model.document.util.Point)>(r0);

        return $r2;
    }

    private org.waveprotocol.wave.client.editor.content.HtmlPoint wrapperTextPointToHtmlPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.HtmlPoint $r0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r9;
        int $i0, i1;
        org.waveprotocol.wave.client.editor.EditorRuntimeException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Object $r8;
        java.lang.String $r7;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r10;
        org.waveprotocol.wave.client.editor.extract.Repairer $r12;
        org.waveprotocol.wave.client.editor.impl.NodeManager r11;
        com.google.gwt.dom.client.Node $r1;
        org.waveprotocol.wave.model.document.util.Point r5;

        r11 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r5 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r0 = new org.waveprotocol.wave.client.editor.content.HtmlPoint;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.HtmlPoint: void <init>(com.google.gwt.dom.client.Node,int)>(null, 0);

        i1 = 1;

     label1:
        if i1 > 2 goto label5;

     label2:
        $r8 = virtualinvoke r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r9 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r8;

        $i0 = virtualinvoke r5.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentTextNode: void findNodeletWithOffset(int,org.waveprotocol.wave.client.editor.content.HtmlPoint)>($i0, $r0);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r12 = r11.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.extract.Repairer repairer>;

        virtualinvoke $r12.<org.waveprotocol.wave.client.editor.extract.Repairer: void handle(org.waveprotocol.wave.client.editor.extract.InconsistencyException)>($r10);

        i1 = i1 + 1;

        goto label1;

     label5:
        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.content.HtmlPoint: com.google.gwt.dom.client.Node getNode()>();

        if $r1 != null goto label6;

        $r2 = new org.waveprotocol.wave.client.editor.EditorRuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Don\'t know what to do with this - offset too big? point: ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.EditorRuntimeException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label6:
        return $r0;

        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label2 to label3 with label4;
    }

    org.waveprotocol.wave.model.document.util.Point wrapperElementPointToNodeletPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r3, $r9;
        java.lang.AssertionError $r12;
        org.waveprotocol.wave.client.editor.content.ContentElement $r10, $r14, $r18;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.editor.content.ContentView $r6;
        com.google.gwt.core.client.JavaScriptObject $r16;
        org.waveprotocol.wave.model.document.util.Point$El $r22, $r23;
        com.google.gwt.dom.client.Element $r11, $r15, $r17;
        java.lang.Object $r1, $r2, $r7, $r8, $r13;
        org.waveprotocol.wave.client.editor.impl.NodeManager r5;
        com.google.gwt.dom.client.Node $r4, r19, $r20, r21;

        r5 := @this: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r1 != null goto label06;

        $r13 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r14 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r13;

        $r15 = virtualinvoke $r14.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        if $r15 != null goto label01;

        return null;

     label01:
        r19 = virtualinvoke $r15.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getLastChild()>();

     label02:
        if r19 == null goto label03;

        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r19);

        if $z1 != 0 goto label03;

        $r16 = virtualinvoke r19.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r17 = (com.google.gwt.dom.client.Element) $r16;

        $r18 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>($r17);

        if $r18 != null goto label03;

        r19 = virtualinvoke r19.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getPreviousSibling()>();

        goto label02;

     label03:
        if r19 != null goto label04;

        $r20 = virtualinvoke $r15.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getFirstChild()>();

        goto label05;

     label04:
        $r20 = virtualinvoke r19.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getNextSibling()>();

     label05:
        r21 = $r20;

        goto label07;

     label06:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r2;

        r21 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodeletRightwards()>();

     label07:
        if r21 != null goto label11;

        $r6 = r5.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentView renderedContentView>;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r8 = interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getVisibleNode(java.lang.Object)>($r7);

        $r9 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r8;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $z0 = <org.waveprotocol.wave.client.editor.impl.NodeManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label08;

        if $r10 != null goto label08;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label08:
        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        if $r11 == null goto label09;

        $r22 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r11, null);

        goto label10;

     label09:
        $r22 = null;

     label10:
        return $r22;

     label11:
        $r4 = virtualinvoke r21.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getParentNode()>();

        if $r4 == null goto label12;

        $r23 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r4, r21);

        goto label13;

     label12:
        $r23 = null;

     label13:
        return $r23;
    }

    public static org.waveprotocol.wave.client.editor.content.HtmlPoint nodeletPointToHtmlPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.HtmlPoint $r10, $r13;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;
        java.lang.Object $r1, $r2, $r4, $r6, $r8, $r11;
        com.google.gwt.dom.client.Node $r3, $r5, $r7, $r9, $r12;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r10 = new org.waveprotocol.wave.client.editor.content.HtmlPoint;

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r12 = (com.google.gwt.dom.client.Node) $r11;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        specialinvoke $r10.<org.waveprotocol.wave.client.editor.content.HtmlPoint: void <init>(com.google.gwt.dom.client.Node,int)>($r12, $i2);

        return $r10;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r1 != null goto label2;

        $r13 = new org.waveprotocol.wave.client.editor.content.HtmlPoint;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r7 = (com.google.gwt.dom.client.Node) $r6;

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r9 = (com.google.gwt.dom.client.Node) $r8;

        $i1 = virtualinvoke $r9.<com.google.gwt.dom.client.Node: int getChildCount()>();

        specialinvoke $r13.<org.waveprotocol.wave.client.editor.content.HtmlPoint: void <init>(com.google.gwt.dom.client.Node,int)>($r7, $i1);

        goto label3;

     label2:
        $r13 = new org.waveprotocol.wave.client.editor.content.HtmlPoint;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r3 = (com.google.gwt.dom.client.Node) $r2;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r5 = (com.google.gwt.dom.client.Node) $r4;

        $i0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: int findChildIndex(com.google.gwt.dom.client.Node)>($r5);

        specialinvoke $r13.<org.waveprotocol.wave.client.editor.content.HtmlPoint: void <init>(com.google.gwt.dom.client.Node,int)>($r3, $i0);

     label3:
        return $r13;
    }

    public static void setBackReference(com.google.gwt.dom.client.Element, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        com.google.gwt.dom.client.Element r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        java.lang.String $r2;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r2 = <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String BACKREF_NAME>;

        virtualinvoke r0.<com.google.gwt.dom.client.Element: void setPropertyObject(java.lang.String,java.lang.Object)>($r2, r1);

        return;
    }

    public static org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        java.lang.String $r1;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        if r0 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r1 = <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String BACKREF_NAME>;

        $r2 = virtualinvoke r0.<com.google.gwt.dom.client.Element: java.lang.Object getPropertyObject(java.lang.String)>($r1);

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r2;

     label2:
        return $r3;
    }

    public static boolean hasBackReference(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        java.lang.Object $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        if r0 != null goto label1;

        $z0 = 0;

        goto label3;

     label1:
        $r1 = <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String BACKREF_NAME>;

        $r2 = virtualinvoke r0.<com.google.gwt.dom.client.Element: java.lang.Object getPropertyObject(java.lang.String)>($r1);

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static org.waveprotocol.wave.model.document.util.Point$El forceElementPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        com.google.gwt.core.client.JavaScriptObject $r4;
        org.waveprotocol.wave.model.document.util.Point$El $r1, $r8;
        com.google.gwt.dom.client.Text r5;
        com.google.gwt.dom.client.Element $r6;
        int $i0, $i1;
        java.lang.Object $r2, r7;
        com.google.gwt.dom.client.Node $r3;
        org.waveprotocol.wave.model.document.util.Point r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El asElementPoint()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r3 = (com.google.gwt.dom.client.Node) $r2;

        $r4 = virtualinvoke $r3.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r5 = (com.google.gwt.dom.client.Text) $r4;

        $r6 = virtualinvoke r5.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Element getParentElement()>();

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i0 != 0 goto label2;

        r7 = r5;

        goto label4;

     label2:
        $i1 = virtualinvoke r5.<com.google.gwt.dom.client.Text: int getLength()>();

        if $i0 != $i1 goto label3;

        r7 = virtualinvoke r5.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Node getNextSibling()>();

        goto label4;

     label3:
        r7 = virtualinvoke r5.<com.google.gwt.dom.client.Text: com.google.gwt.dom.client.Text splitText(int)>($i0);

     label4:
        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r6, r7);

        return $r8;
    }

    public static void setMayContainSelectionEvenWhenDeep(com.google.gwt.dom.client.Element, boolean)
    {
        com.google.gwt.dom.client.Element r0;
        java.lang.String $r1;
        boolean z0;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        z0 := @parameter1: boolean;

        $r1 = <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String MAY_CONTAIN_SELECTION>;

        virtualinvoke r0.<com.google.gwt.dom.client.Element: void setPropertyBoolean(java.lang.String,boolean)>($r1, z0);

        return;
    }

    public static boolean mayContainSelectionEvenWhenDeep(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String MAY_CONTAIN_SELECTION>;

        $z0 = virtualinvoke r0.<com.google.gwt.dom.client.Element: boolean getPropertyBoolean(java.lang.String)>($r1);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/impl/NodeManager;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.impl.NodeManager: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String getNextMarkerName(java.lang.String)>("cn");

        <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String BACKREF_NAME> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String getNextMarkerName(java.lang.String)>("tl");

        <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String TRANSPARENCY> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String getNextMarkerName(java.lang.String)>("tb");

        <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String TRANSPARENT_BACKREF> = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String getNextMarkerName(java.lang.String)>("mcs");

        <org.waveprotocol.wave.client.editor.impl.NodeManager: java.lang.String MAY_CONTAIN_SELECTION> = $r4;

        return;
    }
}
