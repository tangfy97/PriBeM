public abstract class com.google.gxp.compiler.codegen.BaseCodeGenerator extends java.lang.Object implements com.google.gxp.compiler.codegen.CodeGenerator
{
    protected final com.google.gxp.compiler.base.Tree tree;

    public void <init>(com.google.gxp.compiler.base.Tree)
    {
        com.google.gxp.compiler.codegen.BaseCodeGenerator r0;
        com.google.gxp.compiler.base.Tree r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.google.gxp.compiler.codegen.BaseCodeGenerator;

        r1 := @parameter0: com.google.gxp.compiler.base.Tree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (com.google.gxp.compiler.base.Tree) $r2;

        r0.<com.google.gxp.compiler.codegen.BaseCodeGenerator: com.google.gxp.compiler.base.Tree tree> = $r3;

        return;
    }

    protected static java.lang.String loadFormat(java.lang.String)
    {
        java.nio.charset.Charset $r9;
        java.lang.String r2, $r5, $r10, $r11, $r16;
        java.io.IOException $r17;
        java.lang.RuntimeException $r18;
        java.io.InputStreamReader $r8;
        java.io.FileNotFoundException $r12;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r13, $r14, $r15;
        java.lang.Class $r6;
        java.io.InputStream $r7;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/com/google/gxp/compiler/");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".format");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = class "Lcom/google/gxp/compiler/codegen/BaseCodeGenerator;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r5);

     label1:
        if $r7 != null goto label2;

        $r12 = new java.io.FileNotFoundException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load resource ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label2:
        $r8 = new java.io.InputStreamReader;

        $r9 = <com.google.gxp.com.google.common.base.Charsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r7, $r9);

        $r10 = staticinvoke <com.google.gxp.com.google.common.io.Characters: java.lang.String toString(java.lang.Readable)>($r8);

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

     label3:
        return $r11;

     label4:
        $r17 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

        catch java.io.IOException from label1 to label3 with label4;
    }

    protected static java.lang.String getDefaultMethodName(com.google.gxp.compiler.base.FormalParameter)
    {
        char $c0, $c1;
        com.google.gxp.compiler.base.FormalParameter r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r9;
        java.lang.String $r1, $r4, $r6, $r10;

        r0 := @parameter0: com.google.gxp.compiler.base.FormalParameter;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.FormalParameter: java.lang.String getPrimaryName()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getDefault");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    protected static java.lang.String getDefaultMethodName(com.google.gxp.compiler.base.Parameter)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.Parameter r0;
        com.google.gxp.compiler.base.FormalParameter $r1;

        r0 := @parameter0: com.google.gxp.compiler.base.Parameter;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.FormalParameter getFormalParameter()>();

        $r2 = staticinvoke <com.google.gxp.compiler.codegen.BaseCodeGenerator: java.lang.String getDefaultMethodName(com.google.gxp.compiler.base.FormalParameter)>($r1);

        return $r2;
    }

    protected static java.lang.String getConstructorMethodName(com.google.gxp.compiler.base.FormalParameter)
    {
        char $c0, $c1;
        com.google.gxp.compiler.base.FormalParameter r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r9;
        java.lang.String $r1, $r4, $r6, $r10;

        r0 := @parameter0: com.google.gxp.compiler.base.FormalParameter;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.FormalParameter: java.lang.String getPrimaryName()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("construct");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    protected static java.lang.String getConstructorMethodName(com.google.gxp.compiler.base.Parameter)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.Parameter r0;
        com.google.gxp.compiler.base.FormalParameter $r1;

        r0 := @parameter0: com.google.gxp.compiler.base.Parameter;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.FormalParameter getFormalParameter()>();

        $r2 = staticinvoke <com.google.gxp.compiler.codegen.BaseCodeGenerator: java.lang.String getConstructorMethodName(com.google.gxp.compiler.base.FormalParameter)>($r1);

        return $r2;
    }
}
