public class org.bouncycastle.jce.provider.JCESecretKeyFactory extends javax.crypto.SecretKeyFactorySpi implements org.bouncycastle.jce.provider.PBE
{
    protected java.lang.String algName;
    protected org.bouncycastle.asn1.DERObjectIdentifier algOid;

    protected void <init>(java.lang.String, org.bouncycastle.asn1.DERObjectIdentifier)
    {
        org.bouncycastle.jce.provider.JCESecretKeyFactory r0;
        java.lang.String r1;
        org.bouncycastle.asn1.DERObjectIdentifier r2;

        r0 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.bouncycastle.asn1.DERObjectIdentifier;

        specialinvoke r0.<javax.crypto.SecretKeyFactorySpi: void <init>()>();

        r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: java.lang.String algName> = r1;

        r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: org.bouncycastle.asn1.DERObjectIdentifier algOid> = r2;

        return;
    }

    protected javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        java.security.spec.KeySpec r0;
        org.bouncycastle.jce.provider.JCESecretKeyFactory r3;
        java.security.spec.InvalidKeySpecException $r1;
        javax.crypto.SecretKey $r2;
        boolean $z0;

        r3 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory;

        r0 := @parameter0: java.security.spec.KeySpec;

        $z0 = r0 instanceof javax.crypto.spec.SecretKeySpec;

        if $z0 == 0 goto label1;

        $r2 = (javax.crypto.SecretKey) r0;

        return $r2;

     label1:
        $r1 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r1.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Invalid KeySpec");

        throw $r1;
    }

    protected java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        byte[] $r6, $r10;
        org.bouncycastle.jce.provider.JCESecretKeyFactory r11;
        java.lang.Object[] r5;
        java.security.spec.InvalidKeySpecException $r13, $r14, $r16;
        javax.crypto.spec.SecretKeySpec $r9;
        java.lang.reflect.Constructor $r4;
        java.security.spec.KeySpec $r8;
        java.lang.String $r12, $r17;
        boolean $z0;
        java.lang.Class[] $r3;
        java.lang.Exception $r15;
        java.lang.Class r0, $r2;
        java.lang.Object $r7;
        javax.crypto.SecretKey r1;

        r11 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory;

        r1 := @parameter0: javax.crypto.SecretKey;

        r0 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        $r14 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r14.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec parameter is null");

        throw $r14;

     label1:
        if r1 != null goto label2;

        $r13 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r13.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key parameter is null");

        throw $r13;

     label2:
        $r2 = class "Ljavax/crypto/spec/SecretKeySpec;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label3;

        $r9 = new javax.crypto.spec.SecretKeySpec;

        $r10 = interfaceinvoke r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r12 = r11.<org.bouncycastle.jce.provider.JCESecretKeyFactory: java.lang.String algName>;

        specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r10, $r12);

        return $r9;

     label3:
        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "[B";

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        r5 = newarray (java.lang.Object)[1];

        $r6 = interfaceinvoke r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

        r5[0] = $r6;

        $r7 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r5);

        $r8 = (java.security.spec.KeySpec) $r7;

     label4:
        return $r8;

     label5:
        $r15 := @caughtexception;

        $r16 = new java.security.spec.InvalidKeySpecException;

        $r17 = virtualinvoke $r15.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r16.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r17);

        throw $r16;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey) throws java.security.InvalidKeyException
    {
        byte[] $r5;
        org.bouncycastle.jce.provider.JCESecretKeyFactory r2;
        javax.crypto.spec.SecretKeySpec $r4;
        java.lang.String $r1, $r3, $r6, $r10, $r13;
        boolean $z0;
        java.security.InvalidKeyException $r7, $r14;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;
        javax.crypto.SecretKey r0;

        r2 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory;

        r0 := @parameter0: javax.crypto.SecretKey;

        if r0 != null goto label1;

        $r14 = new java.security.InvalidKeyException;

        specialinvoke $r14.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key parameter is null");

        throw $r14;

     label1:
        $r1 = interfaceinvoke r0.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        $r3 = r2.<org.bouncycastle.jce.provider.JCESecretKeyFactory: java.lang.String algName>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 != 0 goto label2;

        $r7 = new java.security.InvalidKeyException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key not of type ");

        $r10 = r2.<org.bouncycastle.jce.provider.JCESecretKeyFactory: java.lang.String algName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        $r4 = new javax.crypto.spec.SecretKeySpec;

        $r5 = interfaceinvoke r0.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r6 = r2.<org.bouncycastle.jce.provider.JCESecretKeyFactory: java.lang.String algName>;

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, $r6);

        return $r4;
    }
}
