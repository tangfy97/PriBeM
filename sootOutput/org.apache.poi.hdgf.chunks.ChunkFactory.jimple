public final class org.apache.poi.hdgf.chunks.ChunkFactory extends java.lang.Object
{
    private int version;
    private java.util.Hashtable chunkCommandDefinitions;
    private static java.lang.String chunkTableName;
    private static org.apache.poi.util.POILogger logger;

    public void <init>(int) throws java.io.IOException
    {
        int i0;
        java.util.Hashtable $r1;
        org.apache.poi.hdgf.chunks.ChunkFactory r0;

        r0 := @this: org.apache.poi.hdgf.chunks.ChunkFactory;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.poi.hdgf.chunks.ChunkFactory: java.util.Hashtable chunkCommandDefinitions> = $r1;

        r0.<org.apache.poi.hdgf.chunks.ChunkFactory: int version> = i0;

        specialinvoke r0.<org.apache.poi.hdgf.chunks.ChunkFactory: void processChunkParseCommands()>();

        return;
    }

    private void processChunkParseCommands() throws java.io.IOException
    {
        java.lang.IllegalStateException $r20, $r25;
        java.lang.Integer $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.poi.hdgf.chunks.ChunkFactory r11;
        org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition[] $r8, $r10, r32;
        org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition $r19;
        java.lang.StringBuilder $r21, $r22, $r23, $r26, $r27, $r29;
        java.lang.Object[] $r9;
        java.util.ArrayList $r6;
        java.util.StringTokenizer $r14;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r0, $r5, $r7, $r15, $r16, $r17, $r18, $r24, $r28, $r30, $r31;
        java.util.Hashtable $r12;
        java.io.InputStreamReader $r4;
        java.lang.Class $r1;
        java.io.BufferedReader $r3;
        java.io.InputStream $r2;

        r11 := @this: org.apache.poi.hdgf.chunks.ChunkFactory;

        $r1 = class "Lorg/apache/poi/hdgf/chunks/ChunkFactory;";

        $r0 = <org.apache.poi.hdgf.chunks.ChunkFactory: java.lang.String chunkTableName>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r0);

        if $r2 != null goto label01;

        $r25 = new java.lang.IllegalStateException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find HDGF chunk definition on the classpath - ");

        $r28 = <org.apache.poi.hdgf.chunks.ChunkFactory: java.lang.String chunkTableName>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r30);

        throw $r25;

     label01:
        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r2);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

     label02:
        $r31 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r31 == null goto label10;

        $z0 = virtualinvoke $r31.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z0 == 0 goto label03;

        goto label02;

     label03:
        $z1 = virtualinvoke $r31.<java.lang.String: boolean startsWith(java.lang.String)>(" ");

        if $z1 == 0 goto label04;

        goto label02;

     label04:
        $z2 = virtualinvoke $r31.<java.lang.String: boolean startsWith(java.lang.String)>("\t");

        if $z2 == 0 goto label05;

        goto label02;

     label05:
        $i0 = virtualinvoke $r31.<java.lang.String: int length()>();

        if $i0 != 0 goto label06;

        goto label02;

     label06:
        $z3 = virtualinvoke $r31.<java.lang.String: boolean startsWith(java.lang.String)>("start");

        if $z3 != 0 goto label07;

        $r20 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting start xxx, found ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label07:
        $r5 = virtualinvoke $r31.<java.lang.String: java.lang.String substring(int)>(6);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

     label08:
        $r7 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>();

        $z4 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("end");

        if $z4 != 0 goto label09;

        $r14 = new java.util.StringTokenizer;

        specialinvoke $r14.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r7, " ");

        $r15 = virtualinvoke $r14.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        $r17 = virtualinvoke $r14.<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>("\uffff");

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String substring(int)>(1);

        $r19 = new org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition;

        specialinvoke $r19.<org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition: void <init>(int,int,java.lang.String)>($i3, $i4, $r18);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        goto label08;

     label09:
        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $r8 = newarray (org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition)[$i2];

        $r9 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition[]) $r9;

        r32 = (org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition[]) $r10;

        $r12 = r11.<org.apache.poi.hdgf.chunks.ChunkFactory: java.util.Hashtable chunkCommandDefinitions>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r32);

        goto label02;

     label10:
        virtualinvoke $r3.<java.io.BufferedReader: void close()>();

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        return;
    }

    public int getVersion()
    {
        int $i0;
        org.apache.poi.hdgf.chunks.ChunkFactory r0;

        r0 := @this: org.apache.poi.hdgf.chunks.ChunkFactory;

        $i0 = r0.<org.apache.poi.hdgf.chunks.ChunkFactory: int version>;

        return $i0;
    }

    public org.apache.poi.hdgf.chunks.Chunk createChunk(byte[], int)
    {
        byte[] r1, $r30;
        org.apache.poi.hdgf.chunks.ChunkSeparator r29, $r42;
        java.lang.Integer $r33;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r14, $r15, $r16, $r17, $r18, $r23, $r24, $r25, $r39, $r41, $r43;
        java.lang.String $r10, $r19, $r26;
        org.apache.poi.hdgf.chunks.Chunk $r44;
        boolean $z0, $z1, $z2, $z3;
        org.apache.poi.hdgf.chunks.ChunkFactory r0;
        org.apache.poi.util.POILogger $r4, $r13, $r22;
        org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition[] $r35, $r36, r37;
        org.apache.poi.hdgf.chunks.ChunkTrailer r28, $r40;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23, $i24, $i25, $i26, $i27, $i29, $i31;
        java.util.Hashtable $r32;
        java.lang.IllegalArgumentException $r38;
        org.apache.poi.hdgf.chunks.ChunkHeader $r2;
        java.lang.Object $r34;

        r0 := @this: org.apache.poi.hdgf.chunks.ChunkFactory;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.poi.hdgf.chunks.ChunkFactory: int version>;

        $r2 = staticinvoke <org.apache.poi.hdgf.chunks.ChunkHeader: org.apache.poi.hdgf.chunks.ChunkHeader createChunkHeader(int,byte[],int)>($i1, r1, i0);

        $i2 = $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int length>;

        if $i2 >= 0 goto label1;

        $r38 = new java.lang.IllegalArgumentException;

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Found a chunk with a negative length, which isn\'t allowed");

        throw $r38;

     label1:
        $i3 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int getLength()>();

        $i4 = i0 + $i3;

        $i5 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int getSizeInBytes()>();

        i22 = $i4 + $i5;

        $i6 = lengthof r1;

        if i22 <= $i6 goto label3;

        $r22 = <org.apache.poi.hdgf.chunks.ChunkFactory: org.apache.poi.util.POILogger logger>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header called for ");

        $i13 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int getLength()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, but that would take us passed the end of the data!");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(5, $r26);

        i22 = lengthof r1;

        $i14 = lengthof r1;

        $i15 = $i14 - i0;

        $i16 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int getSizeInBytes()>();

        $i17 = $i15 - $i16;

        $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int length> = $i17;

        $z0 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: boolean hasTrailer()>();

        if $z0 == 0 goto label2;

        $i20 = $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int length>;

        $i21 = $i20 - 8;

        $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int length> = $i21;

        $i29 = (int) -8;

        i22 = i22 + $i29;

     label2:
        $z1 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: boolean hasSeparator()>();

        if $z1 == 0 goto label3;

        $i18 = $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int length>;

        $i19 = $i18 - 4;

        $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int length> = $i19;

        $i31 = (int) -4;

        i22 = i22 + $i31;

     label3:
        r28 = null;

        r29 = null;

        $z2 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: boolean hasTrailer()>();

        if $z2 == 0 goto label5;

        $i10 = lengthof r1;

        $i11 = $i10 - 8;

        if i22 > $i11 goto label4;

        $r40 = new org.apache.poi.hdgf.chunks.ChunkTrailer;

        specialinvoke $r40.<org.apache.poi.hdgf.chunks.ChunkTrailer: void <init>(byte[],int)>(r1, i22);

        r28 = $r40;

        i22 = i22 + 8;

        goto label5;

     label4:
        $r13 = <org.apache.poi.hdgf.chunks.ChunkFactory: org.apache.poi.util.POILogger logger>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header claims a length to ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i22);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" there\'s then no space for the trailer in the data (");

        $i12 = lengthof r1;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(7, $r19);

     label5:
        $z3 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: boolean hasSeparator()>();

        if $z3 == 0 goto label7;

        $i7 = lengthof r1;

        $i8 = $i7 - 4;

        if i22 > $i8 goto label6;

        $r42 = new org.apache.poi.hdgf.chunks.ChunkSeparator;

        specialinvoke $r42.<org.apache.poi.hdgf.chunks.ChunkSeparator: void <init>(byte[],int)>(r1, i22);

        r29 = $r42;

        goto label7;

     label6:
        $r4 = <org.apache.poi.hdgf.chunks.ChunkFactory: org.apache.poi.util.POILogger logger>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header claims a length to ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i22);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" there\'s then no space for the separator in the data (");

        $i9 = lengthof r1;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<org.apache.poi.util.POILogger: void log(int,java.lang.Object)>(7, $r10);

     label7:
        $i23 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int getLength()>();

        $r30 = newarray (byte)[$i23];

        $i24 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int getSizeInBytes()>();

        $i25 = i0 + $i24;

        $i26 = lengthof $r30;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i25, $r30, 0, $i26);

        $r44 = new org.apache.poi.hdgf.chunks.Chunk;

        specialinvoke $r44.<org.apache.poi.hdgf.chunks.Chunk: void <init>(org.apache.poi.hdgf.chunks.ChunkHeader,org.apache.poi.hdgf.chunks.ChunkTrailer,org.apache.poi.hdgf.chunks.ChunkSeparator,byte[])>($r2, r28, r29, $r30);

        $r32 = r0.<org.apache.poi.hdgf.chunks.ChunkFactory: java.util.Hashtable chunkCommandDefinitions>;

        $i27 = virtualinvoke $r2.<org.apache.poi.hdgf.chunks.ChunkHeader: int getType()>();

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i27);

        $r34 = virtualinvoke $r32.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r33);

        $r35 = (org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition[]) $r34;

        $r36 = (org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition[]) $r35;

        r37 = $r36;

        if $r36 != null goto label8;

        r37 = newarray (org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition)[0];

     label8:
        $r44.<org.apache.poi.hdgf.chunks.Chunk: org.apache.poi.hdgf.chunks.ChunkFactory$CommandDefinition[] commandDefinitions> = r37;

        virtualinvoke $r44.<org.apache.poi.hdgf.chunks.Chunk: void processCommands()>();

        return $r44;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        <org.apache.poi.hdgf.chunks.ChunkFactory: java.lang.String chunkTableName> = "/org/apache/poi/hdgf/chunks_parse_cmds.tbl";

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hdgf/chunks/ChunkFactory;");

        <org.apache.poi.hdgf.chunks.ChunkFactory: org.apache.poi.util.POILogger logger> = $r0;

        return;
    }
}
