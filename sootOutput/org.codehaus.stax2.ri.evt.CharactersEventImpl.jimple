public class org.codehaus.stax2.ri.evt.CharactersEventImpl extends org.codehaus.stax2.ri.evt.BaseEventImpl implements javax.xml.stream.events.Characters
{
    final java.lang.String mContent;
    final boolean mIsCData;
    final boolean mIgnorableWS;
    boolean mWhitespaceChecked;
    boolean mIsWhitespace;

    public void <init>(javax.xml.stream.Location, java.lang.String, boolean)
    {
        javax.xml.stream.Location r1;
        java.lang.String r2;
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;
        boolean z0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        r1 := @parameter0: javax.xml.stream.Location;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.codehaus.stax2.ri.evt.BaseEventImpl: void <init>(javax.xml.stream.Location)>(r1);

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mWhitespaceChecked> = 0;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsWhitespace> = 0;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: java.lang.String mContent> = r2;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsCData> = z0;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIgnorableWS> = 0;

        return;
    }

    private void <init>(javax.xml.stream.Location, java.lang.String, boolean, boolean, boolean)
    {
        javax.xml.stream.Location r1;
        java.lang.String r2;
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;
        boolean z0, z1, z2;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        r1 := @parameter0: javax.xml.stream.Location;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        specialinvoke r0.<org.codehaus.stax2.ri.evt.BaseEventImpl: void <init>(javax.xml.stream.Location)>(r1);

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mWhitespaceChecked> = 0;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsWhitespace> = 0;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: java.lang.String mContent> = r2;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsCData> = z0;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsWhitespace> = z1;

        if z1 == 0 goto label1;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mWhitespaceChecked> = 1;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIgnorableWS> = z2;

        goto label2;

     label1:
        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mWhitespaceChecked> = 0;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIgnorableWS> = 0;

     label2:
        return;
    }

    public static final org.codehaus.stax2.ri.evt.CharactersEventImpl createIgnorableWS(javax.xml.stream.Location, java.lang.String)
    {
        java.lang.String r2;
        org.codehaus.stax2.ri.evt.CharactersEventImpl $r0;
        javax.xml.stream.Location r1;

        r1 := @parameter0: javax.xml.stream.Location;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.codehaus.stax2.ri.evt.CharactersEventImpl;

        specialinvoke $r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: void <init>(javax.xml.stream.Location,java.lang.String,boolean,boolean,boolean)>(r1, r2, 0, 1, 1);

        return $r0;
    }

    public static final org.codehaus.stax2.ri.evt.CharactersEventImpl createNonIgnorableWS(javax.xml.stream.Location, java.lang.String)
    {
        java.lang.String r2;
        org.codehaus.stax2.ri.evt.CharactersEventImpl $r0;
        javax.xml.stream.Location r1;

        r1 := @parameter0: javax.xml.stream.Location;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.codehaus.stax2.ri.evt.CharactersEventImpl;

        specialinvoke $r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: void <init>(javax.xml.stream.Location,java.lang.String,boolean,boolean,boolean)>(r1, r2, 0, 1, 0);

        return $r0;
    }

    public javax.xml.stream.events.Characters asCharacters()
    {
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        return r0;
    }

    public int getEventType()
    {
        byte $b0;
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        $z0 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsCData>;

        if $z0 == 0 goto label1;

        $b0 = 12;

        goto label2;

     label1:
        $b0 = 4;

     label2:
        return $b0;
    }

    public boolean isCharacters()
    {
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        return 1;
    }

    public void writeAsEncodedUnicode(java.io.Writer) throws javax.xml.stream.XMLStreamException
    {
        java.io.Writer r1;
        java.io.IOException $r4;
        java.lang.String $r2, $r3;
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        r1 := @parameter0: java.io.Writer;

     label1:
        $z0 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsCData>;

        if $z0 == 0 goto label2;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("<![CDATA[");

        $r3 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: java.lang.String mContent>;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r3);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("]]>");

        goto label3;

     label2:
        $r2 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: java.lang.String mContent>;

        staticinvoke <org.codehaus.stax2.ri.evt.CharactersEventImpl: void writeEscapedXMLText(java.io.Writer,java.lang.String)>(r1, $r2);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        virtualinvoke r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: void throwFromIOE(java.io.IOException)>($r4);

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public void writeUsing(org.codehaus.stax2.XMLStreamWriter2) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String $r2, $r3;
        org.codehaus.stax2.XMLStreamWriter2 r1;
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        r1 := @parameter0: org.codehaus.stax2.XMLStreamWriter2;

        $z0 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsCData>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: java.lang.String mContent>;

        interfaceinvoke r1.<org.codehaus.stax2.XMLStreamWriter2: void writeCData(java.lang.String)>($r3);

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: java.lang.String mContent>;

        interfaceinvoke r1.<org.codehaus.stax2.XMLStreamWriter2: void writeCharacters(java.lang.String)>($r2);

     label2:
        return;
    }

    public java.lang.String getData()
    {
        java.lang.String $r1;
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        $r1 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: java.lang.String mContent>;

        return $r1;
    }

    public boolean isCData()
    {
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        $z0 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsCData>;

        return $z0;
    }

    public boolean isIgnorableWhiteSpace()
    {
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        $z0 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIgnorableWS>;

        return $z0;
    }

    public boolean isWhiteSpace()
    {
        char $c1;
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;
        int $i0, i2, $i3;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        $z0 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mWhitespaceChecked>;

        if $z0 != 0 goto label6;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mWhitespaceChecked> = 1;

        r1 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: java.lang.String mContent>;

        i2 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label1:
        if i2 >= $i0 goto label3;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 <= 32 goto label2;

        goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        if i2 != $i0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsWhitespace> = $z1;

     label6:
        $z2 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsWhitespace>;

        return $z2;
    }

    public void setWhitespaceStatus(boolean)
    {
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;
        boolean z0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mWhitespaceChecked> = 1;

        r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean mIsWhitespace> = z0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.stax2.ri.evt.CharactersEventImpl r1;
        javax.xml.stream.events.Characters r2;
        java.lang.Object r0;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $z0 = r0 instanceof javax.xml.stream.events.Characters;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (javax.xml.stream.events.Characters) r0;

        $r3 = r1.<org.codehaus.stax2.ri.evt.CharactersEventImpl: java.lang.String mContent>;

        $r4 = interfaceinvoke r2.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label6;

        $z2 = virtualinvoke r1.<org.codehaus.stax2.ri.evt.CharactersEventImpl: boolean isCData()>();

        $z3 = interfaceinvoke r2.<javax.xml.stream.events.Characters: boolean isCData()>();

        if $z2 != $z3 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;

     label6:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.String $r1;
        org.codehaus.stax2.ri.evt.CharactersEventImpl r0;

        r0 := @this: org.codehaus.stax2.ri.evt.CharactersEventImpl;

        $r1 = r0.<org.codehaus.stax2.ri.evt.CharactersEventImpl: java.lang.String mContent>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    protected static void writeEscapedXMLText(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        int $i0, i1, $i3, $i5, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String r0;
        char $c2, $c4, $c6;
        java.io.Writer r1;

        r1 := @parameter0: java.io.Writer;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i7 = 0;

     label01:
        if i7 >= $i0 goto label10;

        i1 = i7;

        i8 = 0;

     label02:
        if i7 >= $i0 goto label05;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        i8 = $c2;

        $i10 = (int) $c2;

        if $i10 == 60 goto label05;

        $i11 = (int) $c2;

        if $i11 != 38 goto label03;

        goto label05;

     label03:
        $i12 = (int) $c2;

        if $i12 != 62 goto label04;

        if i7 < 2 goto label04;

        $i3 = i7 - 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i13 = (int) $c4;

        if $i13 != 93 goto label04;

        $i5 = i7 - 2;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $i14 = (int) $c6;

        if $i14 != 93 goto label04;

        goto label05;

     label04:
        i7 = i7 + 1;

        goto label02;

     label05:
        $i9 = i7 - i1;

        if $i9 <= 0 goto label06;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String,int,int)>(r0, i1, $i9);

     label06:
        if i7 >= $i0 goto label09;

        if i8 != 60 goto label07;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&lt;");

        goto label09;

     label07:
        if i8 != 38 goto label08;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&amp;");

        goto label09;

     label08:
        if i8 != 62 goto label09;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&gt;");

     label09:
        i7 = i7 + 1;

        goto label01;

     label10:
        return;
    }
}
