public class org.bouncycastle.jce.provider.JCEIESCipher extends org.bouncycastle.jce.provider.WrapCipherSpi
{
    private org.bouncycastle.crypto.engines.IESEngine cipher;
    private int state;
    private java.io.ByteArrayOutputStream buffer;
    private java.security.AlgorithmParameters engineParam;
    private org.bouncycastle.jce.spec.IESParameterSpec engineParams;
    private java.lang.Class[] availableSpecs;

    public void <init>(org.bouncycastle.crypto.engines.IESEngine)
    {
        org.bouncycastle.jce.provider.JCEIESCipher r0;
        java.io.ByteArrayOutputStream $r4;
        int $i1;
        java.lang.Class[] $r2;
        org.bouncycastle.crypto.engines.IESEngine r3;

        r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        r3 := @parameter0: org.bouncycastle.crypto.engines.IESEngine;

        specialinvoke r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void <init>()>();

        $i1 = (int) -1;

        r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state> = $i1;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer> = $r4;

        r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam> = null;

        r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams> = null;

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Lorg/bouncycastle/jce/spec/IESParameterSpec;";

        r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.lang.Class[] availableSpecs> = $r2;

        r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.crypto.engines.IESEngine cipher> = r3;

        return;
    }

    protected int engineGetBlockSize()
    {
        org.bouncycastle.jce.provider.JCEIESCipher r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        return 0;
    }

    protected byte[] engineGetIV()
    {
        org.bouncycastle.jce.provider.JCEIESCipher r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        return null;
    }

    protected int engineGetKeySize(java.security.Key)
    {
        javax.crypto.interfaces.DHPrivateKey r11;
        org.bouncycastle.jce.provider.JCEIESCipher r10;
        int $i0, $i1;
        java.math.BigInteger $r6, $r8;
        boolean $z0, $z1, $z2;
        org.bouncycastle.jce.interfaces.IESKey r1;
        java.lang.IllegalArgumentException $r4, $r9;
        java.security.Key r0;
        org.bouncycastle.jce.interfaces.ECPrivateKey r12;
        java.security.PrivateKey $r2, $r3, $r5, $r7;

        r10 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        r0 := @parameter0: java.security.Key;

        $z0 = r0 instanceof org.bouncycastle.jce.interfaces.IESKey;

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("must be passed IE key");

        throw $r9;

     label1:
        r1 = (org.bouncycastle.jce.interfaces.IESKey) r0;

        $r2 = interfaceinvoke r1.<org.bouncycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $z1 = $r2 instanceof javax.crypto.interfaces.DHPrivateKey;

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r1.<org.bouncycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        r11 = (javax.crypto.interfaces.DHPrivateKey) $r7;

        $r8 = interfaceinvoke r11.<javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()>();

        $i1 = virtualinvoke $r8.<java.math.BigInteger: int bitLength()>();

        return $i1;

     label2:
        $r3 = interfaceinvoke r1.<org.bouncycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $z2 = $r3 instanceof org.bouncycastle.jce.interfaces.ECPrivateKey;

        if $z2 == 0 goto label3;

        $r5 = interfaceinvoke r1.<org.bouncycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        r12 = (org.bouncycastle.jce.interfaces.ECPrivateKey) $r5;

        $r6 = interfaceinvoke r12.<org.bouncycastle.jce.interfaces.ECPrivateKey: java.math.BigInteger getD()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not an IE key!");

        throw $r4;
    }

    protected int engineGetOutputSize(int)
    {
        java.lang.IllegalStateException $r3;
        java.io.ByteArrayOutputStream $r1, $r2;
        org.bouncycastle.jce.provider.JCEIESCipher r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        i2 := @parameter0: int;

        $i0 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state>;

        if $i0 == 1 goto label1;

        $i5 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state>;

        if $i5 != 3 goto label2;

     label1:
        $r1 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        $i1 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        $i3 = $i1 + i2;

        $i4 = $i3 + 20;

        return $i4;

     label2:
        $i6 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state>;

        if $i6 == 2 goto label3;

        $i10 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state>;

        if $i10 != 4 goto label4;

     label3:
        $r2 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        $i7 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: int size()>();

        $i8 = $i7 + i2;

        $i9 = $i8 - 20;

        return $i9;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cipher not initialised");

        throw $r3;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        java.lang.RuntimeException $r7;
        java.security.AlgorithmParameters $r1, $r3, $r5, $r9;
        java.lang.Exception $r6;
        org.bouncycastle.jce.provider.JCEIESCipher r0;
        org.bouncycastle.jce.spec.IESParameterSpec $r2, $r4;
        java.lang.String $r8;

        r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam>;

        if $r1 != null goto label4;

        $r2 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams>;

        if $r2 == null goto label4;

     label1:
        $r3 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>("IES", "BC");

        r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam> = $r3;

        $r5 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam>;

        $r4 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams>;

        virtualinvoke $r5.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        $r8 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        $r9 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam>;

        return $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void engineSetMode(java.lang.String)
    {
        org.bouncycastle.jce.provider.JCEIESCipher r6;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;
        java.lang.IllegalArgumentException $r0;

        r6 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.bouncycastle.jce.provider.JCEIESCipher r6;
        javax.crypto.NoSuchPaddingException $r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String r2, $r5;

        r6 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        r2 := @parameter0: java.lang.String;

        $r0 = new javax.crypto.NoSuchPaddingException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unavailable with RSA.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        byte[] $r8, $r10, $r22, $r23;
        java.security.SecureRandom $r21, r26;
        java.security.spec.AlgorithmParameterSpec r25;
        org.bouncycastle.crypto.engines.IESEngine $r13, $r14;
        boolean $z0, $z1, $z2;
        org.bouncycastle.crypto.params.IESParameters $r6;
        java.security.Key r0;
        java.security.PrivateKey $r3, $r17;
        java.security.InvalidKeyException $r24;
        java.io.ByteArrayOutputStream $r12;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter r27, r28;
        java.security.InvalidAlgorithmParameterException $r18;
        org.bouncycastle.jce.provider.JCEIESCipher r4;
        org.bouncycastle.jce.spec.IESParameterSpec $r5, $r7, $r9, $r11, $r19;
        int $i0, i1;
        java.io.PrintStream $r15;
        org.bouncycastle.jce.interfaces.IESKey $r20;
        java.security.PublicKey $r1, $r2, $r16;

        r4 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        i1 := @parameter0: int;

        r0 := @parameter1: java.security.Key;

        r25 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        r26 := @parameter3: java.security.SecureRandom;

        $z0 = r0 instanceof org.bouncycastle.jce.interfaces.IESKey;

        if $z0 != 0 goto label01;

        $r24 = new java.security.InvalidKeyException;

        specialinvoke $r24.<java.security.InvalidKeyException: void <init>(java.lang.String)>("must be passed IES key");

        throw $r24;

     label01:
        if r25 != null goto label04;

        if i1 == 1 goto label02;

        if i1 != 3 goto label04;

     label02:
        $r22 = newarray (byte)[16];

        $r23 = newarray (byte)[16];

        if r26 != null goto label03;

        $r21 = new java.security.SecureRandom;

        specialinvoke $r21.<java.security.SecureRandom: void <init>()>();

        r26 = $r21;

     label03:
        virtualinvoke r26.<java.security.SecureRandom: void nextBytes(byte[])>($r22);

        virtualinvoke r26.<java.security.SecureRandom: void nextBytes(byte[])>($r23);

        $r19 = new org.bouncycastle.jce.spec.IESParameterSpec;

        specialinvoke $r19.<org.bouncycastle.jce.spec.IESParameterSpec: void <init>(byte[],byte[],int)>($r22, $r23, 128);

        r25 = $r19;

        goto label05;

     label04:
        $z1 = r25 instanceof org.bouncycastle.jce.spec.IESParameterSpec;

        if $z1 != 0 goto label05;

        $r18 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r18.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("must be passed IES parameters");

        throw $r18;

     label05:
        $r20 = (org.bouncycastle.jce.interfaces.IESKey) r0;

        $r1 = interfaceinvoke $r20.<org.bouncycastle.jce.interfaces.IESKey: java.security.PublicKey getPublic()>();

        $z2 = $r1 instanceof org.bouncycastle.jce.interfaces.ECPublicKey;

        if $z2 == 0 goto label06;

        $r16 = interfaceinvoke $r20.<org.bouncycastle.jce.interfaces.IESKey: java.security.PublicKey getPublic()>();

        r27 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r16);

        $r17 = interfaceinvoke $r20.<org.bouncycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        r28 = staticinvoke <org.bouncycastle.jce.provider.asymmetric.ec.ECUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r17);

        goto label07;

     label06:
        $r2 = interfaceinvoke $r20.<org.bouncycastle.jce.interfaces.IESKey: java.security.PublicKey getPublic()>();

        r27 = staticinvoke <org.bouncycastle.jce.provider.DHUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r2);

        $r3 = interfaceinvoke $r20.<org.bouncycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        r28 = staticinvoke <org.bouncycastle.jce.provider.DHUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r3);

     label07:
        $r5 = (org.bouncycastle.jce.spec.IESParameterSpec) r25;

        r4.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams> = $r5;

        $r6 = new org.bouncycastle.crypto.params.IESParameters;

        $r7 = r4.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams>;

        $r8 = virtualinvoke $r7.<org.bouncycastle.jce.spec.IESParameterSpec: byte[] getDerivationV()>();

        $r9 = r4.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams>;

        $r10 = virtualinvoke $r9.<org.bouncycastle.jce.spec.IESParameterSpec: byte[] getEncodingV()>();

        $r11 = r4.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams>;

        $i0 = virtualinvoke $r11.<org.bouncycastle.jce.spec.IESParameterSpec: int getMacKeySize()>();

        specialinvoke $r6.<org.bouncycastle.crypto.params.IESParameters: void <init>(byte[],byte[],int)>($r8, $r10, $i0);

        r4.<org.bouncycastle.jce.provider.JCEIESCipher: int state> = i1;

        $r12 = r4.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r12.<java.io.ByteArrayOutputStream: void reset()>();

        tableswitch(i1)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label08;
            case 4: goto label09;
            default: goto label10;
        };

     label08:
        $r14 = r4.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.crypto.engines.IESEngine cipher>;

        virtualinvoke $r14.<org.bouncycastle.crypto.engines.IESEngine: void init(boolean,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters)>(1, r28, r27, $r6);

        goto label11;

     label09:
        $r13 = r4.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.crypto.engines.IESEngine cipher>;

        virtualinvoke $r13.<org.bouncycastle.crypto.engines.IESEngine: void init(boolean,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters)>(0, r28, r27, $r6);

        goto label11;

     label10:
        $r15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("eeek!");

     label11:
        return;
    }

    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        java.security.InvalidAlgorithmParameterException $r5;
        java.security.SecureRandom r3;
        org.bouncycastle.jce.provider.JCEIESCipher r1;
        int i0, $i1, i2;
        java.lang.String $r8, $r10;
        java.security.spec.AlgorithmParameterSpec r14;
        java.lang.Class[] $r4, $r11;
        java.security.AlgorithmParameters r0;
        java.lang.Exception $r13;
        java.security.Key r2;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.Class $r12;

        r1 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        i0 := @parameter0: int;

        r2 := @parameter1: java.security.Key;

        r0 := @parameter2: java.security.AlgorithmParameters;

        r3 := @parameter3: java.security.SecureRandom;

        r14 = null;

        if r0 == null goto label7;

        i2 = 0;

     label1:
        $r4 = r1.<org.bouncycastle.jce.provider.JCEIESCipher: java.lang.Class[] availableSpecs>;

        $i1 = lengthof $r4;

        if i2 == $i1 goto label6;

     label2:
        $r11 = r1.<org.bouncycastle.jce.provider.JCEIESCipher: java.lang.Class[] availableSpecs>;

        $r12 = $r11[i2];

        r14 = virtualinvoke r0.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r12);

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;

        goto label5;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        if r14 != null goto label7;

        $r5 = new java.security.InvalidAlgorithmParameterException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r8 = virtualinvoke r0.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label7:
        r1.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam> = r0;

        virtualinvoke r1.<org.bouncycastle.jce.provider.JCEIESCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r2, r14, r3);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.Key r1;
        java.security.SecureRandom r2;
        org.bouncycastle.jce.provider.JCEIESCipher r0;
        int i0;
        java.lang.IllegalArgumentException $r3;
        java.security.InvalidAlgorithmParameterException $r4;

        r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.SecureRandom;

        if i0 == 1 goto label1;

        if i0 != 3 goto label4;

     label1:
        virtualinvoke r0.<org.bouncycastle.jce.provider.JCEIESCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, null, r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t handle null parameter spec in IES");

        throw $r3;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    protected byte[] engineUpdate(byte[], int, int)
    {
        byte[] r1;
        org.bouncycastle.jce.provider.JCEIESCipher r0;
        java.io.ByteArrayOutputStream $r2;
        int i0, i1;

        r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return null;
    }

    protected int engineUpdate(byte[], int, int, byte[], int)
    {
        byte[] r1, r3;
        org.bouncycastle.jce.provider.JCEIESCipher r0;
        java.io.ByteArrayOutputStream $r2;
        int i0, i1, i2;

        r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: byte[];

        i2 := @parameter4: int;

        $r2 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return 0;
    }

    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        byte[] $r2, $r5, r6;
        java.io.ByteArrayOutputStream $r1, $r3, $r7;
        org.bouncycastle.crypto.InvalidCipherTextException $r8;
        javax.crypto.BadPaddingException $r9;
        org.bouncycastle.jce.provider.JCEIESCipher r0;
        int i0, $i1, i2;
        java.lang.String $r10;
        org.bouncycastle.crypto.engines.IESEngine $r4;

        r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        r6 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 == 0 goto label1;

        $r7 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r6, i2, i0);

     label1:
        $r1 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r3 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void reset()>();

        $r4 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.crypto.engines.IESEngine cipher>;

        $i1 = lengthof $r2;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.engines.IESEngine: byte[] processBlock(byte[],int,int)>($r2, 0, $i1);

     label2:
        return $r5;

     label3:
        $r8 := @caughtexception;

        $r9 = new javax.crypto.BadPaddingException;

        $r10 = virtualinvoke $r8.<org.bouncycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r9.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch org.bouncycastle.crypto.InvalidCipherTextException from label1 to label2 with label3;
    }

    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        byte[] $r2, $r5, r6, r7;
        java.io.ByteArrayOutputStream $r1, $r3, $r8;
        org.bouncycastle.crypto.InvalidCipherTextException $r9;
        org.bouncycastle.jce.provider.JCEIESCipher r0;
        int i0, $i1, i2, $i3, $i4, i5;
        java.lang.String $r11;
        org.bouncycastle.crypto.engines.IESEngine $r4;
        javax.crypto.BadPaddingException $r10;

        r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        r7 := @parameter0: byte[];

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        r6 := @parameter3: byte[];

        i2 := @parameter4: int;

        if i0 == 0 goto label1;

        $r8 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r7, i5, i0);

     label1:
        $r1 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r3 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void reset()>();

        $r4 = r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.crypto.engines.IESEngine cipher>;

        $i1 = lengthof $r2;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.engines.IESEngine: byte[] processBlock(byte[],int,int)>($r2, 0, $i1);

        $i3 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r6, i2, $i3);

        $i4 = lengthof $r5;

     label2:
        return $i4;

     label3:
        $r9 := @caughtexception;

        $r10 = new javax.crypto.BadPaddingException;

        $r11 = virtualinvoke $r9.<org.bouncycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r10.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch org.bouncycastle.crypto.InvalidCipherTextException from label1 to label2 with label3;
    }
}
