public class com.jidesoft.swing.Contour extends javax.swing.JComponent implements com.jidesoft.swing.IContour
{
    public static final int PARTIAL_OUTLINE_MODE;
    public static final int MIX_OUTLINE_MODE;
    public static final int FULL_OUTLINE_MODE;
    private int _thickness;
    private static final int TAB_WIDTH;
    private static final int TAB_LEADING;
    private java.awt.Color _lineColor;
    private int _tabHeight;
    private boolean _allowDocking;
    private boolean _tabDocking;
    private int _tabSide;
    private boolean _floating;
    private java.awt.Component _attachedComponent;
    private int _attachedSide;
    private boolean _single;
    private javax.swing.JComponent _saveDraggedComponent;
    private int _saveX;
    private int _saveY;
    private int _saveMouseModifier;
    private java.awt.Container _relativeContainer;
    private int _outlineMode;
    private com.jidesoft.swing.Contour$Outline _topOutline;
    private com.jidesoft.swing.Contour$Outline _bottomOutline;
    private com.jidesoft.swing.Contour$Outline _leftOutline;
    private com.jidesoft.swing.Contour$Outline _rightOutline;
    private boolean _ghost;
    private java.awt.Component _glassPane;
    private boolean _changeCursor;

    public void <init>()
    {
        com.jidesoft.swing.Contour r0;

        r0 := @this: com.jidesoft.swing.Contour;

        specialinvoke r0.<com.jidesoft.swing.Contour: void <init>(int)>(22);

        virtualinvoke r0.<com.jidesoft.swing.Contour: void setOpaque(boolean)>(0);

        virtualinvoke r0.<com.jidesoft.swing.Contour: void setDoubleBuffered(boolean)>(1);

        return;
    }

    public void <init>(int)
    {
        java.awt.Color $r1, $r2, $r3;
        com.jidesoft.swing.Contour r0;
        int $i0, i1, $i2, $i3;

        r0 := @this: com.jidesoft.swing.Contour;

        i1 := @parameter0: int;

        specialinvoke r0.<javax.swing.JComponent: void <init>()>();

        r0.<com.jidesoft.swing.Contour: int _thickness> = 4;

        $r1 = new java.awt.Color;

        specialinvoke $r1.<java.awt.Color: void <init>(int,int,int)>(136, 136, 136);

        r0.<com.jidesoft.swing.Contour: java.awt.Color _lineColor> = $r1;

        r0.<com.jidesoft.swing.Contour: int _tabHeight> = 22;

        r0.<com.jidesoft.swing.Contour: boolean _allowDocking> = 1;

        r0.<com.jidesoft.swing.Contour: int _outlineMode> = 0;

        r0.<com.jidesoft.swing.Contour: boolean _ghost> = 0;

        r0.<com.jidesoft.swing.Contour: boolean _changeCursor> = 0;

        $i0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: int getInt(java.lang.Object)>("Contour.thickness");

        if $i0 != 0 goto label1;

        $i3 = 4;

        goto label2;

     label1:
        $i3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: int getInt(java.lang.Object)>("Contour.thickness");

     label2:
        r0.<com.jidesoft.swing.Contour: int _thickness> = $i3;

        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("Contour.color");

        if $r2 != null goto label3;

        $r3 = new java.awt.Color;

        specialinvoke $r3.<java.awt.Color: void <init>(int,int,int)>(136, 136, 136);

        goto label4;

     label3:
        $r3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("Contour.color");

     label4:
        r0.<com.jidesoft.swing.Contour: java.awt.Color _lineColor> = $r3;

        virtualinvoke r0.<com.jidesoft.swing.Contour: void setTabHeight(int)>(i1);

        $i2 = virtualinvoke r0.<com.jidesoft.swing.Contour: int getOutlineMode()>();

        if $i2 == 0 goto label5;

        specialinvoke r0.<com.jidesoft.swing.Contour: void initOutline()>();

     label5:
        return;
    }

    private void initOutline()
    {
        com.jidesoft.swing.Contour$Outline $r1, $r2, $r3, $r4;
        com.jidesoft.swing.Contour r0;

        r0 := @this: com.jidesoft.swing.Contour;

        $r1 = new com.jidesoft.swing.Contour$Outline;

        specialinvoke $r1.<com.jidesoft.swing.Contour$Outline: void <init>(com.jidesoft.swing.Contour)>(r0);

        r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _topOutline> = $r1;

        $r2 = new com.jidesoft.swing.Contour$Outline;

        specialinvoke $r2.<com.jidesoft.swing.Contour$Outline: void <init>(com.jidesoft.swing.Contour)>(r0);

        r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _bottomOutline> = $r2;

        $r3 = new com.jidesoft.swing.Contour$Outline;

        specialinvoke $r3.<com.jidesoft.swing.Contour$Outline: void <init>(com.jidesoft.swing.Contour)>(r0);

        r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _leftOutline> = $r3;

        $r4 = new com.jidesoft.swing.Contour$Outline;

        specialinvoke $r4.<com.jidesoft.swing.Contour$Outline: void <init>(com.jidesoft.swing.Contour)>(r0);

        r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _rightOutline> = $r4;

        return;
    }

    public boolean isDoubleBuffered()
    {
        com.jidesoft.swing.Contour r0;

        r0 := @this: com.jidesoft.swing.Contour;

        return 1;
    }

    public void paint(java.awt.Graphics)
    {
        com.jidesoft.swing.Contour r0;
        java.awt.Graphics r1;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.Contour;

        r1 := @parameter0: java.awt.Graphics;

        $z0 = r0.<com.jidesoft.swing.Contour: boolean _ghost>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.jidesoft.swing.Contour: void paintOutline(java.awt.Graphics,boolean)>(r1, 0);

     label1:
        return;
    }

    private void paintOutline(java.awt.Graphics, boolean)
    {
        java.awt.Color $r3;
        java.awt.Rectangle $r1, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.awt.Container $r4, $r6;
        boolean z0, $z1;
        com.jidesoft.swing.Contour r0;
        java.awt.Graphics r2;

        r0 := @this: com.jidesoft.swing.Contour;

        r2 := @parameter0: java.awt.Graphics;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Rectangle getBounds()>();

        r5 = $r1;

        $i0 = $r1.<java.awt.Rectangle: int x>;

        $i3 = neg $i0;

        $i1 = $r1.<java.awt.Rectangle: int y>;

        $i2 = neg $i1;

        virtualinvoke r2.<java.awt.Graphics: void translate(int,int)>($i3, $i2);

        if z0 == 0 goto label3;

        $r4 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getRelativeContainer()>();

        if $r4 == null goto label1;

        $r6 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getRelativeContainer()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getParent()>();

     label2:
        r5 = staticinvoke <javax.swing.SwingUtilities: java.awt.Rectangle convertRectangle(java.awt.Component,java.awt.Rectangle,java.awt.Component)>(r0, $r1, $r6);

        goto label4;

     label3:
        $r3 = r0.<com.jidesoft.swing.Contour: java.awt.Color _lineColor>;

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

     label4:
        $i4 = virtualinvoke r0.<com.jidesoft.swing.Contour: int getOutlineMode()>();

        if $i4 == 2 goto label5;

        $z1 = virtualinvoke r0.<com.jidesoft.swing.Contour: boolean isTabDocking()>();

        if $z1 == 0 goto label5;

        $i14 = r5.<java.awt.Rectangle: int x>;

        $i15 = r5.<java.awt.Rectangle: int y>;

        $i16 = r5.<java.awt.Rectangle: int width>;

        $i12 = r5.<java.awt.Rectangle: int height>;

        $i17 = $i12 - 1;

        $i13 = r0.<com.jidesoft.swing.Contour: int _tabHeight>;

        $i18 = $i13 - 1;

        $i19 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        $i20 = virtualinvoke r0.<com.jidesoft.swing.Contour: int getTabSide()>();

        staticinvoke <com.jidesoft.swing.Contour: void drawTab(java.awt.Graphics,int,int,int,int,int,int,int,int,int)>(r2, $i14, $i15, $i16, $i17, $i18, 42, 8, $i19, $i20);

        goto label6;

     label5:
        $i11 = r5.<java.awt.Rectangle: int x>;

        $i10 = r5.<java.awt.Rectangle: int y>;

        $i5 = r5.<java.awt.Rectangle: int width>;

        $i9 = $i5 - 1;

        $i6 = r5.<java.awt.Rectangle: int height>;

        $i8 = $i6 - 1;

        $i7 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        staticinvoke <com.jidesoft.swing.Contour: void drawRect(java.awt.Graphics,int,int,int,int,int)>(r2, $i11, $i10, $i9, $i8, $i7);

     label6:
        return;
    }

    private static void drawLine(java.awt.Graphics, int, int, int, int, int)
    {
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        java.awt.Graphics r0;

        r0 := @parameter0: java.awt.Graphics;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        i1 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        if i0 != i1 goto label2;

        if i3 <= i2 goto label1;

        $i8 = i3 - i2;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>(i0, i2, i4, $i8);

        goto label4;

     label1:
        $i7 = i2 - i3;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>(i0, i3, i4, $i7);

        goto label4;

     label2:
        if i2 != i3 goto label4;

        if i1 <= i0 goto label3;

        $i6 = i1 - i0;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>(i0, i2, $i6, i4);

        goto label4;

     label3:
        $i5 = i0 - i1;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>(i1, i2, $i5, i4);

     label4:
        return;
    }

    private static void drawRect(java.awt.Graphics, int, int, int, int, int)
    {
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.awt.Graphics r0;

        r0 := @parameter0: java.awt.Graphics;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        i2 := @parameter4: int;

        i1 := @parameter5: int;

        if i0 > i1 goto label1;

        $i22 = i4 + i2;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, i3, i4, i3, $i22, i1);

        goto label3;

     label1:
        if i2 > i1 goto label2;

        $i21 = i3 + i0;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, i3, i4, $i21, i4, i1);

        goto label3;

     label2:
        $i5 = i3 + i0;

        $i6 = $i5 - i1;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, i3, i4, $i6, i4, i1);

        $i7 = i3 + i0;

        $i12 = $i7 - i1;

        $i8 = i3 + i0;

        $i11 = $i8 - i1;

        $i9 = i4 + i2;

        $i10 = $i9 - i1;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i12, i4, $i11, $i10, i1);

        $i18 = i3 + i0;

        $i13 = i4 + i2;

        $i17 = $i13 - i1;

        $i16 = i3 + i1;

        $i14 = i4 + i2;

        $i15 = $i14 - i1;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i18, $i17, $i16, $i15, i1);

        $i20 = i4 + i2;

        $i19 = i4 + i1;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, i3, $i20, i3, $i19, i1);

     label3:
        return;
    }

    private static void drawTab(java.awt.Graphics, int, int, int, int, int, int, int, int, int)
    {
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        java.awt.Graphics r0;

        r0 := @parameter0: java.awt.Graphics;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        i8 := @parameter8: int;

        i0 := @parameter9: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 3: goto label2;
            default: goto label3;
        };

     label1:
        staticinvoke <com.jidesoft.swing.Contour: void drawTopTab(java.awt.Graphics,int,int,int,int,int,int,int,int)>(r0, i1, i2, i3, i4, i5, i6, i7, i8);

        goto label3;

     label2:
        staticinvoke <com.jidesoft.swing.Contour: void drawBottomTab(java.awt.Graphics,int,int,int,int,int,int,int,int)>(r0, i1, i2, i3, i4, i5, i6, i7, i8);

     label3:
        return;
    }

    private static void drawTopTab(java.awt.Graphics, int, int, int, int, int, int, int, int)
    {
        java.awt.Graphics r0;
        int i0, i1, i2, $i3, i4, i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42;

        r0 := @parameter0: java.awt.Graphics;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        i1 := @parameter3: int;

        i7 := @parameter4: int;

        i5 := @parameter5: int;

        i18 := @parameter6: int;

        i13 := @parameter7: int;

        i2 := @parameter8: int;

        $i3 = i0 + i1;

        $i12 = $i3 - i2;

        $i11 = i4 + i5;

        $i6 = i0 + i1;

        $i10 = $i6 - i2;

        $i8 = i4 + i7;

        $i9 = $i8 - 1;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i12, $i11, $i10, $i9, i2);

        $i14 = i0 + i13;

        $i17 = $i14 + i2;

        $i16 = i4 + i5;

        $i15 = i4 + i5;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i17, $i16, i0, $i15, i2);

        $i19 = i0 + i18;

        $i23 = $i19 + i13;

        $i22 = i4 + i5;

        $i20 = i0 + i18;

        $i21 = $i20 + i13;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i23, $i22, $i21, i4, i2);

        $i24 = i0 + i18;

        $i27 = $i24 + i13;

        $i25 = i0 + i13;

        $i26 = $i25 + 1;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i27, i4, $i26, i4, i2);

        $i30 = i0 + i13;

        $i29 = i0 + i13;

        $i28 = i4 + i5;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i30, i4, $i29, $i28, i2);

        $i35 = i0 + i1;

        $i34 = i4 + i5;

        $i31 = i0 + i18;

        $i33 = $i31 + i13;

        $i32 = i4 + i5;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i35, $i34, $i33, $i32, i2);

        $i37 = i4 + i5;

        $i36 = i4 + i7;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, i0, $i37, i0, $i36, i2);

        $i38 = i4 + i7;

        $i42 = $i38 - i2;

        $i41 = i0 + i1;

        $i39 = i4 + i7;

        $i40 = $i39 - i2;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, i0, $i42, $i41, $i40, i2);

        return;
    }

    private static void drawBottomTab(java.awt.Graphics, int, int, int, int, int, int, int, int)
    {
        java.awt.Graphics r0;
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57;

        r0 := @parameter0: java.awt.Graphics;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i8 := @parameter4: int;

        i9 := @parameter5: int;

        i17 := @parameter6: int;

        i18 := @parameter7: int;

        i4 := @parameter8: int;

        $i3 = i0 + i2;

        $i5 = $i3 - 1;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, i0, i1, $i5, i1, i4);

        $i6 = i0 + i2;

        $i14 = $i6 - i4;

        $i7 = i0 + i2;

        $i13 = $i7 - i4;

        $i10 = i1 + i8;

        $i11 = $i10 - i9;

        $i12 = $i11 - 1;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i14, i1, $i13, $i12, i4);

        $i25 = i0 + i2;

        $i15 = i1 + i8;

        $i16 = $i15 - i9;

        $i24 = $i16 - i4;

        $i19 = i0 + i17;

        $i23 = $i19 + i18;

        $i20 = i1 + i8;

        $i21 = $i20 - i9;

        $i22 = $i21 - i4;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i25, $i24, $i23, $i22, i4);

        $i26 = i0 + i17;

        $i32 = $i26 + i18;

        $i27 = i1 + i8;

        $i31 = $i27 - i9;

        $i28 = i0 + i17;

        $i30 = $i28 + i18;

        $i29 = i1 + i8;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i32, $i31, $i30, $i29, i4);

        $i33 = i0 + i17;

        $i40 = $i33 + i18;

        $i34 = i1 + i8;

        $i39 = $i34 - i4;

        $i35 = i0 + i18;

        $i38 = $i35 + 1;

        $i36 = i1 + i8;

        $i37 = $i36 - i4;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i40, $i39, $i38, $i37, i4);

        $i45 = i0 + i18;

        $i44 = i1 + i8;

        $i43 = i0 + i18;

        $i41 = i1 + i8;

        $i42 = $i41 - i9;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i45, $i44, $i43, $i42, i4);

        $i46 = i0 + i18;

        $i54 = $i46 + i4;

        $i47 = i1 + i8;

        $i48 = $i47 - i9;

        $i53 = $i48 - i4;

        $i52 = i0 + 1;

        $i49 = i1 + i8;

        $i50 = $i49 - i9;

        $i51 = $i50 - i4;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, $i54, $i53, $i52, $i51, i4);

        $i55 = i1 + i8;

        $i57 = $i55 - i9;

        $i56 = i1 + 1;

        staticinvoke <com.jidesoft.swing.Contour: void drawLine(java.awt.Graphics,int,int,int,int,int)>(r0, i0, $i57, i0, $i56, i4);

        return;
    }

    public void setBounds(java.awt.Rectangle)
    {
        java.awt.Rectangle r1;
        com.jidesoft.swing.Contour r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.jidesoft.swing.Contour;

        r1 := @parameter0: java.awt.Rectangle;

        $i3 = r1.<java.awt.Rectangle: int x>;

        $i2 = r1.<java.awt.Rectangle: int y>;

        $i1 = r1.<java.awt.Rectangle: int width>;

        $i0 = r1.<java.awt.Rectangle: int height>;

        virtualinvoke r0.<com.jidesoft.swing.Contour: void setBounds(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public void setBounds(int, int, int, int)
    {
        java.awt.Color $r15;
        java.awt.Point $r2, $r6;
        boolean $z0, $z1, $z2;
        java.awt.Graphics $r14;
        java.awt.Rectangle $r5, $r18;
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        java.awt.Container $r1, $r3, $r4, $r7, $r12, $r13, $r16, $r17, $r19;
        com.jidesoft.swing.Contour$Outline $r8, $r9, $r10, $r11;
        com.jidesoft.swing.Contour r0;

        r0 := @this: com.jidesoft.swing.Contour;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i4 := @parameter3: int;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.Contour: boolean isLightweight()>();

        if $z0 == 0 goto label24;

        $i6 = virtualinvoke r0.<com.jidesoft.swing.Contour: int getOutlineMode()>();

        if $i6 != 0 goto label13;

        $z2 = r0.<com.jidesoft.swing.Contour: boolean _ghost>;

        if $z2 == 0 goto label08;

        $r12 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getRelativeContainer()>();

        if $r12 != null goto label01;

        $r16 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getParent()>();

        if $r16 == null goto label08;

     label01:
        $r13 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getRelativeContainer()>();

        if $r13 == null goto label02;

        $r17 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getRelativeContainer()>();

        goto label03;

     label02:
        $r17 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getParent()>();

     label03:
        $r14 = virtualinvoke $r17.<java.awt.Container: java.awt.Graphics getGraphics()>();

        $r15 = r0.<com.jidesoft.swing.Contour: java.awt.Color _lineColor>;

        virtualinvoke $r14.<java.awt.Graphics: void setXORMode(java.awt.Color)>($r15);

        specialinvoke r0.<com.jidesoft.swing.Contour: void paintOutline(java.awt.Graphics,boolean)>($r14, 1);

        $i13 = i2 % 2;

        if $i13 != 0 goto label04;

        $i15 = i2 + 1;

        goto label05;

     label04:
        $i15 = i2;

     label05:
        $i14 = i4 % 2;

        if $i14 != 0 goto label06;

        $i16 = i4 + 1;

        goto label07;

     label06:
        $i16 = i4;

     label07:
        specialinvoke r0.<javax.swing.JComponent: void setBounds(int,int,int,int)>(i0, i1, $i15, $i16);

        goto label29;

     label08:
        $i11 = i2 % 2;

        if $i11 != 0 goto label09;

        $i17 = i2 + 1;

        goto label10;

     label09:
        $i17 = i2;

     label10:
        $i12 = i4 % 2;

        if $i12 != 0 goto label11;

        $i18 = i4 + 1;

        goto label12;

     label11:
        $i18 = i4;

     label12:
        specialinvoke r0.<javax.swing.JComponent: void setBounds(int,int,int,int)>(i0, i1, $i17, $i18);

        goto label29;

     label13:
        $r18 = new java.awt.Rectangle;

        $i7 = i2 % 2;

        if $i7 != 0 goto label14;

        $i19 = i2 + 1;

        goto label15;

     label14:
        $i19 = i2;

     label15:
        $i8 = i4 % 2;

        if $i8 != 0 goto label16;

        $i20 = i4 + 1;

        goto label17;

     label16:
        $i20 = i4;

     label17:
        specialinvoke $r18.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, $i19, $i20);

        $r19 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getParent()>();

        if $r19 == null goto label23;

        $r4 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getParent()>();

        $r5 = virtualinvoke $r4.<java.awt.Container: java.awt.Rectangle getBounds()>();

        $i9 = i2 % 2;

        if $i9 != 0 goto label18;

        $i21 = i2 + 1;

        goto label19;

     label18:
        $i21 = i2;

     label19:
        $i10 = i4 % 2;

        if $i10 != 0 goto label20;

        $i22 = i4 + 1;

        goto label21;

     label20:
        $i22 = i4;

     label21:
        specialinvoke r0.<javax.swing.JComponent: void setBounds(int,int,int,int)>(i0, i1, $i21, $i22);

        $i23 = virtualinvoke r0.<com.jidesoft.swing.Contour: int getOutlineMode()>();

        if $i23 != 1 goto label22;

        $z1 = virtualinvoke $r5.<java.awt.Rectangle: boolean contains(java.awt.Rectangle)>($r18);

        if $z1 == 0 goto label22;

        $r8 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _leftOutline>;

        virtualinvoke $r8.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(0);

        $r9 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _rightOutline>;

        virtualinvoke $r9.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(0);

        $r10 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _topOutline>;

        virtualinvoke $r10.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(0);

        $r11 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _bottomOutline>;

        virtualinvoke $r11.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(0);

        goto label23;

     label22:
        specialinvoke r0.<javax.swing.JComponent: void setVisible(boolean)>(0);

        $r6 = virtualinvoke $r18.<java.awt.Rectangle: java.awt.Point getLocation()>();

        $r7 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getParent()>();

        staticinvoke <javax.swing.SwingUtilities: void convertPointToScreen(java.awt.Point,java.awt.Component)>($r6, $r7);

        specialinvoke r0.<com.jidesoft.swing.Contour: void arrangeOutline(java.awt.Rectangle,java.awt.Point)>($r18, $r6);

     label23:
        goto label29;

     label24:
        $r1 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getRelativeContainer()>();

        if $r1 == null goto label29;

        $r2 = new java.awt.Point;

        specialinvoke $r2.<java.awt.Point: void <init>(int,int)>(i0, i1);

        $r3 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Container getRelativeContainer()>();

        staticinvoke <javax.swing.SwingUtilities: void convertPointToScreen(java.awt.Point,java.awt.Component)>($r2, $r3);

        $i24 = $r2.<java.awt.Point: int x>;

        $i25 = $r2.<java.awt.Point: int y>;

        $i3 = i2 % 2;

        if $i3 != 0 goto label25;

        $i26 = i2 + 1;

        goto label26;

     label25:
        $i26 = i2;

     label26:
        $i5 = i4 % 2;

        if $i5 != 0 goto label27;

        $i27 = i4 + 1;

        goto label28;

     label27:
        $i27 = i4;

     label28:
        specialinvoke r0.<javax.swing.JComponent: void setBounds(int,int,int,int)>($i24, $i25, $i26, $i27);

     label29:
        return;
    }

    private void arrangeOutline(java.awt.Rectangle, java.awt.Point)
    {
        java.awt.Point r1;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Rectangle r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        com.jidesoft.swing.Contour$Outline $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        com.jidesoft.swing.Contour r0;

        r0 := @this: com.jidesoft.swing.Contour;

        r2 := @parameter0: java.awt.Rectangle;

        r1 := @parameter1: java.awt.Point;

        $r3 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _leftOutline>;

        $i5 = r1.<java.awt.Point: int x>;

        $i4 = r1.<java.awt.Point: int y>;

        $i3 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        $i1 = r2.<java.awt.Rectangle: int height>;

        $i0 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        $i2 = $i1 - $i0;

        virtualinvoke $r3.<com.jidesoft.swing.Contour$Outline: void setBounds(int,int,int,int)>($i5, $i4, $i3, $i2);

        $r4 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _topOutline>;

        $i7 = r1.<java.awt.Point: int x>;

        $i6 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        $i14 = $i7 + $i6;

        $i13 = r1.<java.awt.Point: int y>;

        $i9 = r2.<java.awt.Rectangle: int width>;

        $i8 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        $i10 = $i9 - $i8;

        $i12 = $i10 - 1;

        $i11 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        virtualinvoke $r4.<com.jidesoft.swing.Contour$Outline: void setBounds(int,int,int,int)>($i14, $i13, $i12, $i11);

        $r5 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _rightOutline>;

        $i16 = r1.<java.awt.Point: int x>;

        $i15 = r2.<java.awt.Rectangle: int width>;

        $i18 = $i16 + $i15;

        $i17 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        $i19 = $i18 - $i17;

        $i27 = $i19 - 1;

        $i21 = r1.<java.awt.Point: int y>;

        $i20 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        $i26 = $i21 + $i20;

        $i25 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        $i23 = r2.<java.awt.Rectangle: int height>;

        $i22 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        $i24 = $i23 - $i22;

        virtualinvoke $r5.<com.jidesoft.swing.Contour$Outline: void setBounds(int,int,int,int)>($i27, $i26, $i25, $i24);

        $r6 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _bottomOutline>;

        $i36 = r1.<java.awt.Point: int x>;

        $i29 = r1.<java.awt.Point: int y>;

        $i28 = r2.<java.awt.Rectangle: int height>;

        $i31 = $i29 + $i28;

        $i30 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        $i35 = $i31 - $i30;

        $i32 = r2.<java.awt.Rectangle: int width>;

        $i34 = $i32 - 1;

        $i33 = r0.<com.jidesoft.swing.Contour: int _thickness>;

        virtualinvoke $r6.<com.jidesoft.swing.Contour$Outline: void setBounds(int,int,int,int)>($i36, $i35, $i34, $i33);

        $r7 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _topOutline>;

        $z0 = virtualinvoke $r7.<com.jidesoft.swing.Contour$Outline: boolean isVisible()>();

        if $z0 != 0 goto label1;

        $r14 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _topOutline>;

        virtualinvoke $r14.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(1);

     label1:
        $r8 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _leftOutline>;

        $z1 = virtualinvoke $r8.<com.jidesoft.swing.Contour$Outline: boolean isVisible()>();

        if $z1 != 0 goto label2;

        $r13 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _leftOutline>;

        virtualinvoke $r13.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(1);

     label2:
        $r9 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _rightOutline>;

        $z2 = virtualinvoke $r9.<com.jidesoft.swing.Contour$Outline: boolean isVisible()>();

        if $z2 != 0 goto label3;

        $r12 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _rightOutline>;

        virtualinvoke $r12.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(1);

     label3:
        $r10 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _bottomOutline>;

        $z3 = virtualinvoke $r10.<com.jidesoft.swing.Contour$Outline: boolean isVisible()>();

        if $z3 != 0 goto label4;

        $r11 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _bottomOutline>;

        virtualinvoke $r11.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(1);

     label4:
        return;
    }

    public int getTabHeight()
    {
        com.jidesoft.swing.Contour r0;
        int $i0;

        r0 := @this: com.jidesoft.swing.Contour;

        $i0 = r0.<com.jidesoft.swing.Contour: int _tabHeight>;

        return $i0;
    }

    public void setTabHeight(int)
    {
        com.jidesoft.swing.Contour r0;
        int i0;

        r0 := @this: com.jidesoft.swing.Contour;

        i0 := @parameter0: int;

        r0.<com.jidesoft.swing.Contour: int _tabHeight> = i0;

        return;
    }

    public boolean isTabDocking()
    {
        com.jidesoft.swing.Contour r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.Contour;

        $z0 = r0.<com.jidesoft.swing.Contour: boolean _tabDocking>;

        return $z0;
    }

    public void setTabDocking(boolean)
    {
        com.jidesoft.swing.Contour r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.Contour;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.Contour: boolean _tabDocking> = z0;

        specialinvoke r0.<com.jidesoft.swing.Contour: void updateCursor()>();

        return;
    }

    public int getTabSide()
    {
        com.jidesoft.swing.Contour r0;
        int $i0;

        r0 := @this: com.jidesoft.swing.Contour;

        $i0 = r0.<com.jidesoft.swing.Contour: int _tabSide>;

        return $i0;
    }

    public void setTabSide(int)
    {
        com.jidesoft.swing.Contour r0;
        int i0;

        r0 := @this: com.jidesoft.swing.Contour;

        i0 := @parameter0: int;

        r0.<com.jidesoft.swing.Contour: int _tabSide> = i0;

        return;
    }

    public boolean isFloating()
    {
        com.jidesoft.swing.Contour r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.Contour;

        $z0 = r0.<com.jidesoft.swing.Contour: boolean _floating>;

        return $z0;
    }

    public void setFloating(boolean)
    {
        com.jidesoft.swing.Contour r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.Contour;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.Contour: boolean _floating> = z0;

        specialinvoke r0.<com.jidesoft.swing.Contour: void updateCursor()>();

        return;
    }

    public java.awt.Component getAttachedComponent()
    {
        com.jidesoft.swing.Contour r0;
        java.awt.Component $r1;

        r0 := @this: com.jidesoft.swing.Contour;

        $r1 = r0.<com.jidesoft.swing.Contour: java.awt.Component _attachedComponent>;

        return $r1;
    }

    public void setAttachedComponent(java.awt.Component)
    {
        com.jidesoft.swing.Contour r0;
        java.awt.Component r1;

        r0 := @this: com.jidesoft.swing.Contour;

        r1 := @parameter0: java.awt.Component;

        r0.<com.jidesoft.swing.Contour: java.awt.Component _attachedComponent> = r1;

        return;
    }

    public int getAttachedSide()
    {
        com.jidesoft.swing.Contour r0;
        int $i0;

        r0 := @this: com.jidesoft.swing.Contour;

        $i0 = r0.<com.jidesoft.swing.Contour: int _attachedSide>;

        return $i0;
    }

    public void setAttachedSide(int)
    {
        com.jidesoft.swing.Contour r0;
        int i0;

        r0 := @this: com.jidesoft.swing.Contour;

        i0 := @parameter0: int;

        r0.<com.jidesoft.swing.Contour: int _attachedSide> = i0;

        specialinvoke r0.<com.jidesoft.swing.Contour: void updateCursor()>();

        return;
    }

    private void updateCursor()
    {
        java.awt.Cursor $r3, $r6, $r8, $r10, $r12, $r14, $r19, $r21, $r23, $r25, $r27, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.awt.Component $r1, $r2, $r4, $r5, $r7, $r9, $r11, $r13, $r15, $r18, $r20, $r22, $r24, $r26, $r28;
        com.jidesoft.swing.JideSplitPaneDivider $r16;
        int $i0, $i1;
        com.jidesoft.swing.Contour r0;
        com.jidesoft.swing.JideSplitPane $r17;

        r0 := @this: com.jidesoft.swing.Contour;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        if $r1 != null goto label01;

        return;

     label01:
        $z0 = virtualinvoke r0.<com.jidesoft.swing.Contour: boolean isVisible()>();

        if $z0 != 0 goto label02;

        $z9 = r0.<com.jidesoft.swing.Contour: boolean _floating>;

        if $z9 == 0 goto label02;

        $r28 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r29 = staticinvoke <com.jidesoft.swing.JideCursors: java.awt.Cursor getPredefinedCursor(int)>(23);

        virtualinvoke $r28.<java.awt.Component: void setCursor(java.awt.Cursor)>($r29);

        return;

     label02:
        $r2 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r3 = staticinvoke <java.awt.Cursor: java.awt.Cursor getDefaultCursor()>();

        virtualinvoke $r2.<java.awt.Component: void setCursor(java.awt.Cursor)>($r3);

        $z1 = r0.<com.jidesoft.swing.Contour: boolean _changeCursor>;

        if $z1 != 0 goto label03;

        return;

     label03:
        $z2 = virtualinvoke r0.<com.jidesoft.swing.Contour: boolean isVisible()>();

        if $z2 != 0 goto label04;

        $r26 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r27 = staticinvoke <java.awt.Cursor: java.awt.Cursor getDefaultCursor()>();

        virtualinvoke $r26.<java.awt.Component: void setCursor(java.awt.Cursor)>($r27);

        return;

     label04:
        $z3 = virtualinvoke r0.<com.jidesoft.swing.Contour: boolean isVisible()>();

        if $z3 == 0 goto label06;

        $z7 = r0.<com.jidesoft.swing.Contour: boolean _allowDocking>;

        if $z7 == 0 goto label05;

        $z8 = r0.<com.jidesoft.swing.Contour: boolean _floating>;

        if $z8 == 0 goto label06;

     label05:
        $r24 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r25 = staticinvoke <com.jidesoft.swing.JideCursors: java.awt.Cursor getPredefinedCursor(int)>(29);

        virtualinvoke $r24.<java.awt.Component: void setCursor(java.awt.Cursor)>($r25);

        goto label15;

     label06:
        $z4 = virtualinvoke r0.<com.jidesoft.swing.Contour: boolean isVisible()>();

        if $z4 == 0 goto label07;

        $z6 = r0.<com.jidesoft.swing.Contour: boolean _tabDocking>;

        if $z6 == 0 goto label07;

        $r22 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r23 = staticinvoke <com.jidesoft.swing.JideCursors: java.awt.Cursor getPredefinedCursor(int)>(28);

        virtualinvoke $r22.<java.awt.Component: void setCursor(java.awt.Cursor)>($r23);

        goto label15;

     label07:
        $r4 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getAttachedComponent()>();

        $z5 = $r4 instanceof com.jidesoft.swing.JideSplitPaneDivider;

        if $z5 == 0 goto label09;

        $r15 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getAttachedComponent()>();

        $r16 = (com.jidesoft.swing.JideSplitPaneDivider) $r15;

        $r17 = virtualinvoke $r16.<com.jidesoft.swing.JideSplitPaneDivider: com.jidesoft.swing.JideSplitPane getJideSplitPane()>();

        $i1 = virtualinvoke $r17.<com.jidesoft.swing.JideSplitPane: int getOrientation()>();

        if $i1 != 1 goto label08;

        $r20 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r21 = staticinvoke <com.jidesoft.swing.JideCursors: java.awt.Cursor getPredefinedCursor(int)>(31);

        virtualinvoke $r20.<java.awt.Component: void setCursor(java.awt.Cursor)>($r21);

        goto label15;

     label08:
        $r18 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r19 = staticinvoke <com.jidesoft.swing.JideCursors: java.awt.Cursor getPredefinedCursor(int)>(30);

        virtualinvoke $r18.<java.awt.Component: void setCursor(java.awt.Cursor)>($r19);

        goto label15;

     label09:
        $i0 = r0.<com.jidesoft.swing.Contour: int _attachedSide>;

        tableswitch($i0)
        {
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label14;
            case 4: goto label12;
            case 5: goto label14;
            case 6: goto label14;
            case 7: goto label14;
            case 8: goto label13;
            default: goto label14;
        };

     label10:
        $r11 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r12 = staticinvoke <com.jidesoft.swing.JideCursors: java.awt.Cursor getPredefinedCursor(int)>(24);

        virtualinvoke $r11.<java.awt.Component: void setCursor(java.awt.Cursor)>($r12);

        goto label15;

     label11:
        $r9 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r10 = staticinvoke <com.jidesoft.swing.JideCursors: java.awt.Cursor getPredefinedCursor(int)>(25);

        virtualinvoke $r9.<java.awt.Component: void setCursor(java.awt.Cursor)>($r10);

        goto label15;

     label12:
        $r7 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r8 = staticinvoke <com.jidesoft.swing.JideCursors: java.awt.Cursor getPredefinedCursor(int)>(26);

        virtualinvoke $r7.<java.awt.Component: void setCursor(java.awt.Cursor)>($r8);

        goto label15;

     label13:
        $r5 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r6 = staticinvoke <com.jidesoft.swing.JideCursors: java.awt.Cursor getPredefinedCursor(int)>(27);

        virtualinvoke $r5.<java.awt.Component: void setCursor(java.awt.Cursor)>($r6);

        goto label15;

     label14:
        $r13 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r14 = staticinvoke <java.awt.Cursor: java.awt.Cursor getDefaultCursor()>();

        virtualinvoke $r13.<java.awt.Component: void setCursor(java.awt.Cursor)>($r14);

     label15:
        return;
    }

    public boolean isSingle()
    {
        com.jidesoft.swing.Contour r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.Contour;

        $z0 = r0.<com.jidesoft.swing.Contour: boolean _single>;

        return $z0;
    }

    public void setSingle(boolean)
    {
        com.jidesoft.swing.Contour r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.Contour;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.Contour: boolean _single> = z0;

        return;
    }

    public boolean isAllowDocking()
    {
        com.jidesoft.swing.Contour r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.Contour;

        $z0 = r0.<com.jidesoft.swing.Contour: boolean _allowDocking>;

        return $z0;
    }

    public void setAllowDocking(boolean)
    {
        com.jidesoft.swing.Contour r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.Contour;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.Contour: boolean _allowDocking> = z0;

        specialinvoke r0.<com.jidesoft.swing.Contour: void updateCursor()>();

        return;
    }

    public java.awt.Container getRelativeContainer()
    {
        com.jidesoft.swing.Contour r0;
        java.awt.Container $r1;

        r0 := @this: com.jidesoft.swing.Contour;

        $r1 = r0.<com.jidesoft.swing.Contour: java.awt.Container _relativeContainer>;

        return $r1;
    }

    public void setRelativeContainer(java.awt.Container)
    {
        com.jidesoft.swing.Contour r0;
        java.awt.Container r1;

        r0 := @this: com.jidesoft.swing.Contour;

        r1 := @parameter0: java.awt.Container;

        r0.<com.jidesoft.swing.Contour: java.awt.Container _relativeContainer> = r1;

        return;
    }

    public int getSaveX()
    {
        com.jidesoft.swing.Contour r0;
        int $i0;

        r0 := @this: com.jidesoft.swing.Contour;

        $i0 = r0.<com.jidesoft.swing.Contour: int _saveX>;

        return $i0;
    }

    public int getSaveY()
    {
        com.jidesoft.swing.Contour r0;
        int $i0;

        r0 := @this: com.jidesoft.swing.Contour;

        $i0 = r0.<com.jidesoft.swing.Contour: int _saveY>;

        return $i0;
    }

    public int getSaveMouseModifier()
    {
        com.jidesoft.swing.Contour r0;
        int $i0;

        r0 := @this: com.jidesoft.swing.Contour;

        $i0 = r0.<com.jidesoft.swing.Contour: int _saveMouseModifier>;

        return $i0;
    }

    public javax.swing.JComponent getSaveDraggedComponent()
    {
        com.jidesoft.swing.Contour r0;
        javax.swing.JComponent $r1;

        r0 := @this: com.jidesoft.swing.Contour;

        $r1 = r0.<com.jidesoft.swing.Contour: javax.swing.JComponent _saveDraggedComponent>;

        return $r1;
    }

    public void setDraggingInformation(javax.swing.JComponent, int, int, int)
    {
        javax.swing.JComponent r1;
        com.jidesoft.swing.Contour r0;
        int i0, i1, i2;

        r0 := @this: com.jidesoft.swing.Contour;

        r1 := @parameter0: javax.swing.JComponent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r0.<com.jidesoft.swing.Contour: javax.swing.JComponent _saveDraggedComponent> = r1;

        r0.<com.jidesoft.swing.Contour: int _saveX> = i0;

        r0.<com.jidesoft.swing.Contour: int _saveY> = i1;

        r0.<com.jidesoft.swing.Contour: int _saveMouseModifier> = i2;

        return;
    }

    public void cleanup()
    {
        java.awt.Cursor $r3;
        java.awt.Component $r1, $r2;
        com.jidesoft.swing.Contour$Outline $r4, $r5, $r6, $r7;
        com.jidesoft.swing.Contour r0;
        int $i0;

        r0 := @this: com.jidesoft.swing.Contour;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.Contour: int getOutlineMode()>();

        if $i0 == 0 goto label1;

        $r4 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _leftOutline>;

        virtualinvoke $r4.<com.jidesoft.swing.Contour$Outline: void dispose()>();

        $r5 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _rightOutline>;

        virtualinvoke $r5.<com.jidesoft.swing.Contour$Outline: void dispose()>();

        $r6 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _topOutline>;

        virtualinvoke $r6.<com.jidesoft.swing.Contour$Outline: void dispose()>();

        $r7 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _bottomOutline>;

        virtualinvoke $r7.<com.jidesoft.swing.Contour$Outline: void dispose()>();

        r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _leftOutline> = null;

        r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _rightOutline> = null;

        r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _topOutline> = null;

        r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _bottomOutline> = null;

     label1:
        $r1 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.Contour: java.awt.Component getGlassPane()>();

        $r3 = staticinvoke <java.awt.Cursor: java.awt.Cursor getDefaultCursor()>();

        virtualinvoke $r2.<java.awt.Component: void setCursor(java.awt.Cursor)>($r3);

     label2:
        return;
    }

    public void setVisible(boolean)
    {
        com.jidesoft.swing.Contour$Outline $r1, $r2, $r3, $r4;
        com.jidesoft.swing.Contour r0;
        int $i0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.Contour;

        z0 := @parameter0: boolean;

        specialinvoke r0.<javax.swing.JComponent: void setVisible(boolean)>(z0);

        specialinvoke r0.<com.jidesoft.swing.Contour: void updateCursor()>();

        if z0 != 0 goto label1;

        $i0 = virtualinvoke r0.<com.jidesoft.swing.Contour: int getOutlineMode()>();

        if $i0 == 0 goto label1;

        $r1 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _leftOutline>;

        virtualinvoke $r1.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(0);

        $r2 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _rightOutline>;

        virtualinvoke $r2.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(0);

        $r3 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _topOutline>;

        virtualinvoke $r3.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(0);

        $r4 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _bottomOutline>;

        virtualinvoke $r4.<com.jidesoft.swing.Contour$Outline: void setVisible(boolean)>(0);

     label1:
        return;
    }

    public boolean isVisible()
    {
        com.jidesoft.swing.Contour$Outline $r1, $r2, $r3, $r4;
        com.jidesoft.swing.Contour r0;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.jidesoft.swing.Contour;

        $z0 = specialinvoke r0.<javax.swing.JComponent: boolean isVisible()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke r0.<com.jidesoft.swing.Contour: int getOutlineMode()>();

        if $i0 == 0 goto label3;

        $r1 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _topOutline>;

        $z1 = virtualinvoke $r1.<com.jidesoft.swing.Contour$Outline: boolean isVisible()>();

        if $z1 != 0 goto label2;

        $r2 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _bottomOutline>;

        $z2 = virtualinvoke $r2.<com.jidesoft.swing.Contour$Outline: boolean isVisible()>();

        if $z2 != 0 goto label2;

        $r3 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _leftOutline>;

        $z3 = virtualinvoke $r3.<com.jidesoft.swing.Contour$Outline: boolean isVisible()>();

        if $z3 != 0 goto label2;

        $r4 = r0.<com.jidesoft.swing.Contour: com.jidesoft.swing.Contour$Outline _rightOutline>;

        $z4 = virtualinvoke $r4.<com.jidesoft.swing.Contour$Outline: boolean isVisible()>();

        if $z4 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public int getOutlineMode()
    {
        com.jidesoft.swing.Contour r0;
        int $i0;

        r0 := @this: com.jidesoft.swing.Contour;

        $i0 = r0.<com.jidesoft.swing.Contour: int _outlineMode>;

        return $i0;
    }

    public void setOutlineMode(int)
    {
        int i0, $i1;
        com.jidesoft.swing.Contour r0;

        r0 := @this: com.jidesoft.swing.Contour;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $i1 = r0.<com.jidesoft.swing.Contour: int _outlineMode>;

        if $i1 != 0 goto label1;

        specialinvoke r0.<com.jidesoft.swing.Contour: void initOutline()>();

     label1:
        r0.<com.jidesoft.swing.Contour: int _outlineMode> = i0;

        return;
    }

    public java.awt.Component getGlassPane()
    {
        com.jidesoft.swing.Contour r0;
        java.awt.Component $r1;

        r0 := @this: com.jidesoft.swing.Contour;

        $r1 = r0.<com.jidesoft.swing.Contour: java.awt.Component _glassPane>;

        return $r1;
    }

    public void setGlassPane(java.awt.Component)
    {
        com.jidesoft.swing.Contour r0;
        java.awt.Component r1;

        r0 := @this: com.jidesoft.swing.Contour;

        r1 := @parameter0: java.awt.Component;

        r0.<com.jidesoft.swing.Contour: java.awt.Component _glassPane> = r1;

        return;
    }

    public boolean isChangeCursor()
    {
        com.jidesoft.swing.Contour r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.Contour;

        $z0 = r0.<com.jidesoft.swing.Contour: boolean _changeCursor>;

        return $z0;
    }

    public void setChangeCursor(boolean)
    {
        com.jidesoft.swing.Contour r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.Contour;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.Contour: boolean _changeCursor> = z0;

        return;
    }

    static java.awt.Color access$000(com.jidesoft.swing.Contour)
    {
        com.jidesoft.swing.Contour r0;
        java.awt.Color $r1;

        r0 := @parameter0: com.jidesoft.swing.Contour;

        $r1 = r0.<com.jidesoft.swing.Contour: java.awt.Color _lineColor>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.jidesoft.swing.Contour: int TAB_LEADING> = 8;

        <com.jidesoft.swing.Contour: int TAB_WIDTH> = 42;

        <com.jidesoft.swing.Contour: int FULL_OUTLINE_MODE> = 2;

        <com.jidesoft.swing.Contour: int MIX_OUTLINE_MODE> = 1;

        <com.jidesoft.swing.Contour: int PARTIAL_OUTLINE_MODE> = 0;

        return;
    }
}
