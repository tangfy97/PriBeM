public class org.codehaus.groovy.ast.Parameter extends org.codehaus.groovy.ast.AnnotatedNode implements org.codehaus.groovy.ast.Variable
{
    public static final org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY;
    private org.codehaus.groovy.ast.ClassNode type;
    private final java.lang.String name;
    private boolean dynamicTyped;
    private org.codehaus.groovy.ast.expr.Expression defaultValue;
    private boolean hasDefaultValue;
    private boolean inStaticContext;
    private boolean closureShare;

    public void <init>(org.codehaus.groovy.ast.ClassNode, java.lang.String)
    {
        org.codehaus.groovy.ast.Parameter r0;
        java.lang.String r1;
        org.codehaus.groovy.ast.ClassNode r2;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.codehaus.groovy.ast.AnnotatedNode: void <init>()>();

        r0.<org.codehaus.groovy.ast.Parameter: boolean closureShare> = 0;

        r0.<org.codehaus.groovy.ast.Parameter: java.lang.String name> = r1;

        virtualinvoke r0.<org.codehaus.groovy.ast.Parameter: void setType(org.codehaus.groovy.ast.ClassNode)>(r2);

        r0.<org.codehaus.groovy.ast.Parameter: boolean hasDefaultValue> = 0;

        return;
    }

    public void <init>(org.codehaus.groovy.ast.ClassNode, java.lang.String, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.Parameter r0;
        org.codehaus.groovy.ast.ClassNode r1;
        java.lang.String r2;
        org.codehaus.groovy.ast.expr.Expression r3;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>(r1, r2);

        r0.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.expr.Expression defaultValue> = r3;

        r0.<org.codehaus.groovy.ast.Parameter: boolean hasDefaultValue> = 1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r8, $r9, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r2, $r5, $r11, $r17, $r18;
        boolean $z0;
        org.codehaus.groovy.ast.Parameter r1;
        org.codehaus.groovy.ast.ClassNode $r7, $r10;

        r1 := @this: org.codehaus.groovy.ast.Parameter;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[name:");

        $r5 = r1.<org.codehaus.groovy.ast.Parameter: java.lang.String name>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = r1.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode type>;

        if $r7 != null goto label1;

        $r18 = "";

        goto label2;

     label1:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" type: ");

        $r10 = r1.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode type>;

        $r11 = virtualinvoke $r10.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r18 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r13 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", hasDefaultValue: ");

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.Parameter: boolean hasInitialExpression()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r17;
    }

    public java.lang.String getName()
    {
        org.codehaus.groovy.ast.Parameter r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        $r1 = r0.<org.codehaus.groovy.ast.Parameter: java.lang.String name>;

        return $r1;
    }

    public org.codehaus.groovy.ast.ClassNode getType()
    {
        org.codehaus.groovy.ast.Parameter r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        $r1 = r0.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode type>;

        return $r1;
    }

    public void setType(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.Parameter r0;
        org.codehaus.groovy.ast.ClassNode r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode type> = r1;

        $z0 = r0.<org.codehaus.groovy.ast.Parameter: boolean dynamicTyped>;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        if r1 != $r2 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $z1 = $z0 | $z2;

        r0.<org.codehaus.groovy.ast.Parameter: boolean dynamicTyped> = $z1;

        return;
    }

    public boolean hasInitialExpression()
    {
        org.codehaus.groovy.ast.Parameter r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        $z0 = r0.<org.codehaus.groovy.ast.Parameter: boolean hasDefaultValue>;

        return $z0;
    }

    public org.codehaus.groovy.ast.expr.Expression getInitialExpression()
    {
        org.codehaus.groovy.ast.Parameter r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        $r1 = r0.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.expr.Expression defaultValue>;

        return $r1;
    }

    public void setInitialExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.Parameter r0;
        org.codehaus.groovy.ast.expr.Expression r1, $r2;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r0.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.expr.Expression defaultValue> = r1;

        $r2 = r0.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.expr.Expression defaultValue>;

        if $r2 != null goto label1;

        r0.<org.codehaus.groovy.ast.Parameter: boolean hasDefaultValue> = 0;

     label1:
        return;
    }

    public boolean isInStaticContext()
    {
        org.codehaus.groovy.ast.Parameter r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        $z0 = r0.<org.codehaus.groovy.ast.Parameter: boolean inStaticContext>;

        return $z0;
    }

    public void setInStaticContext(boolean)
    {
        org.codehaus.groovy.ast.Parameter r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.Parameter: boolean inStaticContext> = z0;

        return;
    }

    public boolean isDynamicTyped()
    {
        org.codehaus.groovy.ast.Parameter r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        $z0 = r0.<org.codehaus.groovy.ast.Parameter: boolean dynamicTyped>;

        return $z0;
    }

    public boolean isClosureSharedVariable()
    {
        org.codehaus.groovy.ast.Parameter r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        $z0 = r0.<org.codehaus.groovy.ast.Parameter: boolean closureShare>;

        return $z0;
    }

    public void setClosureSharedVariable(boolean)
    {
        org.codehaus.groovy.ast.Parameter r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.Parameter: boolean closureShare> = z0;

        return;
    }

    public org.codehaus.groovy.ast.ClassNode getOriginType()
    {
        org.codehaus.groovy.ast.Parameter r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.Parameter;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.ast.Parameter[] $r0;

        $r0 = newarray (org.codehaus.groovy.ast.Parameter)[0];

        <org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.Parameter[] EMPTY_ARRAY> = $r0;

        return;
    }
}
