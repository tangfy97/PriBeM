public class org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator extends org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase
{
    protected int _startNodeID;
    private final org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0;

    public void <init>(org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r1;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator;

        r1 := @parameter0: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: void <init>(org.apache.xml.dtm.ref.DTMDefaultBaseIterators)>(r1);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0> = r1;

        return;
    }

    public boolean isReverse()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator;

        return 1;
    }

    public org.apache.xml.dtm.DTMAxisIterator setStartNode(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 $r1, $r2, $r3, $r4, $r6;
        org.apache.xml.dtm.DTMAxisIterator $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8, $i10;
        boolean $z0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator;

        i6 := @parameter0: int;

        if i6 != 0 goto label1;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        i6 = virtualinvoke $r6.<org.apache.xml.dtm.ref.DTMDefaultBase: int getDocument()>();

     label1:
        $z0 = r0.<org.apache.xml.dtm.ref.DTMAxisIteratorBase: boolean _isRestartable>;

        if $z0 == 0 goto label7;

        r0.<org.apache.xml.dtm.ref.DTMAxisIteratorBase: int _startNode> = i6;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        $i0 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i6);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator: int _startNodeID> = $i0;

        $i8 = (int) -1;

        if $i0 != $i8 goto label2;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode> = $i0;

        $r5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMAxisIteratorBase: org.apache.xml.dtm.DTMAxisIterator resetPosition()>();

        return $r5;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        $i1 = virtualinvoke $r2.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>($i0);

        if 2 == $i1 goto label3;

        if 13 != $i1 goto label4;

     label3:
        r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode> = $i0;

        goto label6;

     label4:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        $i2 = virtualinvoke $r3.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>($i0);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode> = $i2;

        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode>;

        $i10 = (int) -1;

        if $i10 == $i3 goto label5;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        $i4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode>;

        $i5 = virtualinvoke $r4.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>($i4);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode> = $i5;

        goto label6;

     label5:
        r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode> = $i0;

     label6:
        $r7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMAxisIteratorBase: org.apache.xml.dtm.DTMAxisIterator resetPosition()>();

        return $r7;

     label7:
        return r0;
    }

    public int next()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 $r1, $r2;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator r0;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i8, $i10;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode>;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator: int _startNodeID>;

        if $i1 == $i0 goto label1;

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode>;

        $i8 = (int) -1;

        if $i2 != $i8 goto label2;

     label1:
        $i10 = (int) -1;

        return $i10;

     label2:
        i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode>;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        $i4 = virtualinvoke $r1.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _nextsib2(int)>(i3);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode> = $i4;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$PrecedingSiblingIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        $i5 = virtualinvoke $r2.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i3);

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMAxisIteratorBase: int returnNode(int)>($i5);

        return $i6;
    }
}
