public class org.apache.jena.riot.lang.LangRDFJSON extends org.apache.jena.riot.lang.LangBase
{

    public void <init>(org.apache.jena.riot.tokens.Tokenizer, org.apache.jena.riot.system.ParserProfile, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.riot.system.ParserProfile r2;
        org.apache.jena.riot.lang.LangRDFJSON r0;
        org.apache.jena.riot.system.StreamRDF r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r2 := @parameter1: org.apache.jena.riot.system.ParserProfile;

        r3 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        specialinvoke r0.<org.apache.jena.riot.lang.LangBase: void <init>(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.ParserProfile,org.apache.jena.riot.system.StreamRDF)>(r1, r2, r3);

        $z0 = r1 instanceof org.apache.jena.atlas.json.io.parser.TokenizerJSON;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Tokenizer for the RDF/JSON parser must be an instance of org.openjena.atlas.json.io.parser.TokenizerJSON");

        throw $r4;

     label1:
        return;
    }

    public org.apache.jena.riot.Lang getLang()
    {
        org.apache.jena.riot.Lang $r0;
        org.apache.jena.riot.lang.LangRDFJSON r1;

        r1 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        $r0 = <org.apache.jena.riot.RDFLanguages: org.apache.jena.riot.Lang RDFJSON>;

        return $r0;
    }

    protected void runParser()
    {
        org.apache.jena.riot.lang.LangRDFJSON r0;

        r0 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void tryParseGraph()>();

        return;
    }

    private void tryParseGraph()
    {
        java.lang.Object[] $r3, $r8, $r10;
        org.apache.jena.riot.tokens.Token $r2, $r4, $r7, $r9, $r11;
        org.apache.jena.riot.tokens.TokenType $r1, $r5, $r6;
        org.apache.jena.riot.lang.LangRDFJSON r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void tryParseTriples()>();

        $r5 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r5);

        if $z1 != 0 goto label1;

        $r9 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r10 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r10[0] = $r11;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r9, "Expected a } character to end a JSON Object but got %s", $r10);

     label1:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        $r6 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType EOF>;

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r6);

        if $z2 != 0 goto label2;

        $r7 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r7, "Expected the end of the JSON but there is additional content beyond the end of the JSON Object", $r8);

     label2:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label4;

     label3:
        $r2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3[0] = $r4;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Expected a { character to start a JSON Object but got %s", $r3);

     label4:
        return;
    }

    private void tryParseTriples()
    {
        com.hp.hpl.jena.graph.Node r19;
        boolean $z0, $z1, $z2, $z3, z4, $z5, z6, z7;
        org.apache.jena.riot.system.ParserProfile $r10, $r13;
        java.lang.Object[] $r3, $r6, $r17;
        long $l0, $l1, $l2, $l3;
        org.apache.jena.riot.tokens.Token $r2, $r4, $r5, $r7, $r8, $r16, $r18;
        org.apache.jena.riot.lang.LangRDFJSON r0;
        java.lang.String $r9, $r11, $r14, $r15;
        org.apache.jena.riot.tokens.TokenType $r1, $r12;

        r0 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        z4 = 0;

        z7 = 0;

        z6 = 0;

     label1:
        $z5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean moreTokens()>();

        if $z5 == 0 goto label9;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label3;

        if z7 == 0 goto label2;

        $r16 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r17 = newarray (java.lang.Object)[1];

        $r18 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r17[0] = $r18;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r16, "Expected a Property Name after a comma to represent the Subject of the next block of triples but got %s", $r17);

     label2:
        return;

     label3:
        $z1 = specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean isPropertyName()>();

        if $z1 == 0 goto label7;

        z4 = 0;

        z7 = 0;

        z6 = 0;

        $r8 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        $r9 = virtualinvoke $r8.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("_:");

        if $z2 == 0 goto label4;

        $r13 = r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.system.ParserProfile profile>;

        $r14 = virtualinvoke $r8.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int)>(2);

        $l2 = virtualinvoke $r8.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l3 = virtualinvoke $r8.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        r19 = interfaceinvoke $r13.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createBlankNode(com.hp.hpl.jena.graph.Node,java.lang.String,long,long)>(null, $r15, $l2, $l3);

        goto label5;

     label4:
        $r10 = r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.system.ParserProfile profile>;

        $r11 = virtualinvoke $r8.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $l0 = virtualinvoke $r8.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l1 = virtualinvoke $r8.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        r19 = interfaceinvoke $r10.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createURI(java.lang.String,long,long)>($r11, $l0, $l1);

     label5:
        specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void checkColon()>();

        specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void tryParsePredicateObjectList(com.hp.hpl.jena.graph.Node)>(r19);

        $r12 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType COMMA>;

        $z3 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r12);

        if $z3 == 0 goto label6;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        z4 = 1;

        z7 = 1;

        z6 = 1;

     label6:
        goto label1;

     label7:
        if z6 == 0 goto label8;

        $r5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6[0] = $r7;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r5, "Expected a Property Name after a comma to represent the Subject of the next block of triples but got %s", $r6);

        goto label1;

     label8:
        $r2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3[0] = $r4;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Expected either the end of the JSON Object (the } character) or a JSON Property Name (String) to set the Subject for some Triples but got %s", $r3);

        goto label1;

     label9:
        return;
    }

    private void tryParsePredicateObjectList(com.hp.hpl.jena.graph.Node)
    {
        java.lang.Object[] $r3, $r6, $r10, $r19;
        long $l0, $l1;
        com.hp.hpl.jena.graph.Node $r15, r16;
        org.apache.jena.riot.tokens.Token $r2, $r4, $r5, $r7, $r9, $r11, $r12, $r18, $r20;
        org.apache.jena.riot.lang.LangRDFJSON r0;
        java.lang.String $r14;
        boolean $z0, $z1, $z2, z3, z4, $z5, z6, z7;
        org.apache.jena.riot.system.ParserProfile $r13;
        org.apache.jena.riot.tokens.TokenType $r1, $r8, $r17;

        r0 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        r16 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 != 0 goto label1;

        $r18 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r19 = newarray (java.lang.Object)[1];

        $r20 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r19[0] = $r20;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r18, "Expected a { character to start the JSON Object for a Predicate Object List but got a %s", $r19);

     label1:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        z3 = 1;

        z4 = 1;

        z7 = 1;

        z6 = 1;

     label2:
        $z5 = specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean isPropertyName()>();

        if $z5 == 0 goto label4;

        z3 = 0;

        z4 = 0;

        z7 = 0;

        z6 = 0;

        $r12 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        $r13 = r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.system.ParserProfile profile>;

        $r14 = virtualinvoke $r12.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $l0 = virtualinvoke $r12.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l1 = virtualinvoke $r12.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        $r15 = interfaceinvoke $r13.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createURI(java.lang.String,long,long)>($r14, $l0, $l1);

        specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void checkColon()>();

        specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void tryParseObjectList(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r16, $r15);

        $r17 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType COMMA>;

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r17);

        if $z2 == 0 goto label3;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        z4 = 1;

        z7 = 1;

        z6 = 1;

     label3:
        goto label2;

     label4:
        if z3 != 0 goto label6;

        $r8 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r8);

        if $z1 == 0 goto label6;

        if z6 == 0 goto label5;

        $r9 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r10 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r10[0] = $r11;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r9, "Expected a further Property Name to represent a Predicate after a comma in a Predicate Object List but got %s", $r10);

     label5:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        return;

     label6:
        if z7 == 0 goto label7;

        $r5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6[0] = $r7;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r5, "Expected a Property Name to represent a Predicate as part of a Predicate Object List but got %s", $r6);

        goto label2;

     label7:
        $r2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3[0] = $r4;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Expected a Property Name or the end of the Predicate Object List but got %s", $r3);

        goto label2;
    }

    private void tryParseObjectList(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node $r15, r16, r17;
        boolean $z0, $z1, $z2, z3, z4, $z5, z6, z7, z8;
        org.apache.jena.riot.system.ParserProfile $r18;
        com.hp.hpl.jena.graph.Triple $r19;
        java.lang.Object[] $r3, $r6, $r9, $r13, $r23;
        long $l0, $l1;
        org.apache.jena.riot.tokens.Token $r2, $r4, $r5, $r7, $r8, $r10, $r12, $r14, $r22, $r24;
        org.apache.jena.riot.lang.LangRDFJSON r0;
        org.apache.jena.riot.system.StreamRDF $r20;
        org.apache.jena.riot.tokens.TokenType $r1, $r11, $r21, $r25;

        r0 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        r16 := @parameter0: com.hp.hpl.jena.graph.Node;

        r17 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACKET>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label8;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        z3 = 1;

        z4 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

     label1:
        $r25 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r25);

        if $z5 == 0 goto label4;

        if z8 != 0 goto label2;

        $r22 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r23 = newarray (java.lang.Object)[1];

        $r24 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r23[0] = $r24;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r22, "Expected the end of the JSON Array for the Object List as no comma was seen after the preceding } but got %s", $r23);

     label2:
        z3 = 0;

        z4 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

        $r15 = specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: com.hp.hpl.jena.graph.Node tryParseObject()>();

        $r18 = r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.system.ParserProfile profile>;

        $l1 = r0.<org.apache.jena.riot.lang.LangRDFJSON: long currLine>;

        $l0 = r0.<org.apache.jena.riot.lang.LangRDFJSON: long currCol>;

        $r19 = interfaceinvoke $r18.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Triple createTriple(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,long,long)>(r16, r17, $r15, $l1, $l0);

        $r20 = r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.system.StreamRDF dest>;

        interfaceinvoke $r20.<org.apache.jena.riot.system.StreamRDF: void triple(com.hp.hpl.jena.graph.Triple)>($r19);

        $r21 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType COMMA>;

        $z2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r21);

        if $z2 == 0 goto label3;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        z4 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

     label3:
        goto label1;

     label4:
        if z3 != 0 goto label6;

        $r11 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACKET>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r11);

        if $z1 == 0 goto label6;

        if z7 == 0 goto label5;

        $r12 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r13 = newarray (java.lang.Object)[1];

        $r14 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r13[0] = $r14;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r12, "Expected a further JSON Object to represent an Object after a comma in a Object List but got %s", $r13);

     label5:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        return;

     label6:
        if z6 == 0 goto label7;

        $r8 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r9 = newarray (java.lang.Object)[1];

        $r10 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r9[0] = $r10;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r8, "Expected a JSON Object to represent an Object as part of a Object List but got %s", $r9);

        goto label1;

     label7:
        $r5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6[0] = $r7;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r5, "Expected a JSON Object or the end of the Object List but got %s", $r6);

        goto label1;

     label8:
        $r2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3[0] = $r4;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Expected a [ character to start a JSON Array for the Object List but got %s", $r3);

        return;
    }

    private com.hp.hpl.jena.graph.Node tryParseObject()
    {
        com.hp.hpl.jena.graph.Node r41;
        java.lang.Object[] $r3, $r6, $r10, $r27, $r29, $r31, $r35, $r36, $r38, $r39, $r40;
        com.hp.hpl.jena.datatypes.TypeMapper $r15;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9;
        java.lang.String $r9, $r12, $r14, $r16, $r19, $r20, $r22, $r23, $r25, $r34, $r37;
        org.apache.jena.riot.tokens.TokenType $r1, $r8, $r46;
        com.hp.hpl.jena.datatypes.RDFDatatype $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, $z12, $z13;
        org.apache.jena.riot.system.ParserProfile $r11, $r13, $r18, $r21, $r24;
        org.apache.jena.riot.tokens.Token $r2, $r4, $r5, $r7, $r26, $r28, $r30, $r32, $r33, r42, r43, r44, r45;
        org.apache.jena.riot.lang.LangRDFJSON r0;

        r0 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        r41 = null;

        r42 = null;

        r43 = null;

        r44 = null;

        r45 = null;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType LBRACE>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label24;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        z10 = 1;

        z11 = 1;

     label01:
        $z12 = specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean isPropertyName()>();

        if $z12 == 0 goto label13;

        z10 = 0;

        z11 = 0;

        $r33 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        $r34 = virtualinvoke $r33.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void checkColon()>();

        $z5 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>("value");

        if $z5 == 0 goto label03;

        if r42 != null goto label02;

        r42 = specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token checkValidForObjectProperty()>();

        goto label11;

     label02:
        $r40 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r33, "Encountered the value property on an Object when the value property has already been specified", $r40);

        goto label11;

     label03:
        $z6 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>("type");

        if $z6 == 0 goto label05;

        if r43 != null goto label04;

        r43 = specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token checkValidForObjectProperty()>();

        goto label11;

     label04:
        $r39 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r33, "Encountered the type property on an Object when the type property has already been specified", $r39);

        goto label11;

     label05:
        $z7 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>("lang");

        if $z7 != 0 goto label06;

        $z8 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>("xml:lang");

        if $z8 == 0 goto label08;

     label06:
        if r44 != null goto label07;

        if r45 != null goto label07;

        r44 = specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token checkValidForObjectProperty()>();

        goto label11;

     label07:
        $r35 = newarray (java.lang.Object)[1];

        $r35[0] = $r34;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r33, "Encountered the %s property on an Object when lang/datatype has already been specified", $r35);

        goto label11;

     label08:
        $z9 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>("datatype");

        if $z9 == 0 goto label10;

        if r44 != null goto label09;

        if r45 != null goto label09;

        r45 = specialinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token checkValidForObjectProperty()>();

        goto label11;

     label09:
        $r38 = newarray (java.lang.Object)[1];

        $r38[0] = $r34;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r33, "Encountered the %s property on an Object when lang/datatype has already been specified", $r38);

        goto label11;

     label10:
        $r36 = newarray (java.lang.Object)[1];

        $r37 = virtualinvoke $r33.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r36[0] = $r37;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r33, "Unexpected Property Name %s encountered, expected one of value, type, lang or datatype", $r36);

     label11:
        $r46 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType COMMA>;

        $z13 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r46);

        if $z13 == 0 goto label12;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        z11 = 1;

     label12:
        goto label01;

     label13:
        if z10 != 0 goto label14;

        $r8 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType RBRACE>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r8);

        if $z1 == 0 goto label14;

        if z11 == 0 goto label15;

        $r30 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r31 = newarray (java.lang.Object)[1];

        $r32 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r31[0] = $r32;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r30, "Expected a further Property Name to represent a property of the Object of a Triple after a comma but got %s", $r31);

        goto label15;

     label14:
        $r5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r6[0] = $r7;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r5, "Expected a Property Name to define a property relating to the Object of a Triple but got %s", $r6);

        goto label01;

     label15:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        if r43 != null goto label16;

        $r28 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r29 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r28, "Unable to parse the Object for a Triple from a JSON Object as the required \'type\' property is not present", $r29);

     label16:
        if r42 != null goto label17;

        $r26 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r27 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r26, "Unable to parse the Object for a Triple from a JSON Object as the required \'value\' property is not present", $r27);

     label17:
        $r9 = virtualinvoke r43.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("uri");

        if $z2 == 0 goto label18;

        $r24 = r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.system.ParserProfile profile>;

        $r25 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $l8 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l9 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        r41 = interfaceinvoke $r24.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createURI(java.lang.String,long,long)>($r25, $l8, $l9);

        goto label23;

     label18:
        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("bnode");

        if $z3 == 0 goto label19;

        $r21 = r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.system.ParserProfile profile>;

        $r22 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String substring(int)>(2);

        $l6 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l7 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        r41 = interfaceinvoke $r21.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createBlankNode(com.hp.hpl.jena.graph.Node,java.lang.String,long,long)>(null, $r23, $l6, $l7);

        goto label23;

     label19:
        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("literal");

        if $z4 == 0 goto label22;

        if r44 == null goto label20;

        $r18 = r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.system.ParserProfile profile>;

        $r19 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r20 = virtualinvoke r44.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $l4 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l5 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        r41 = interfaceinvoke $r18.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createLangLiteral(java.lang.String,java.lang.String,long,long)>($r19, $r20, $l4, $l5);

        goto label23;

     label20:
        if r45 == null goto label21;

        $r13 = r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.system.ParserProfile profile>;

        $r14 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r15 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r16 = virtualinvoke r45.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $r17 = virtualinvoke $r15.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>($r16);

        $l2 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l3 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        r41 = interfaceinvoke $r13.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createTypedLiteral(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,long,long)>($r14, $r17, $l2, $l3);

        goto label23;

     label21:
        $r11 = r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.system.ParserProfile profile>;

        $r12 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: java.lang.String getImage()>();

        $l0 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: long getLine()>();

        $l1 = virtualinvoke r42.<org.apache.jena.riot.tokens.Token: long getColumn()>();

        r41 = interfaceinvoke $r11.<org.apache.jena.riot.system.ParserProfile: com.hp.hpl.jena.graph.Node createStringLiteral(java.lang.String,long,long)>($r12, $l0, $l1);

        goto label23;

     label22:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r9;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>(r43, "Unable to parse the Object for a Triple from a JSON Object as the value %s given for the \'type\' property is not one of uri, bnode or literal", $r10);

     label23:
        goto label25;

     label24:
        $r2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3[0] = $r4;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Expected a { character to start a JSON Object to represent the Object of a Triple but got %s", $r3);

     label25:
        return r41;
    }

    private boolean isPropertyName()
    {
        org.apache.jena.riot.tokens.TokenType $r1, $r2;
        org.apache.jena.riot.lang.LangRDFJSON r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING1>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 != 0 goto label1;

        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private org.apache.jena.riot.tokens.Token checkValidForObjectProperty()
    {
        java.lang.Object[] $r4;
        org.apache.jena.riot.tokens.Token $r3, r5;
        org.apache.jena.riot.tokens.TokenType $r1, $r2;
        org.apache.jena.riot.lang.LangRDFJSON r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        r5 = null;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING1>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 != 0 goto label1;

        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label2;

     label1:
        r5 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r3, "JSON Values given for properties for an Object must be Strings", $r4);

     label3:
        return r5;
    }

    private void checkColon()
    {
        org.apache.jena.riot.tokens.TokenType $r1;
        java.lang.Object[] $r3;
        org.apache.jena.riot.lang.LangRDFJSON r0;
        org.apache.jena.riot.tokens.Token $r2, $r4;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.lang.LangRDFJSON;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType COLON>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: boolean lookingAt(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token peekToken()>();

        $r3[0] = $r4;

        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>($r2, "Expected a : character after a JSON Property Name but got %s", $r3);

     label1:
        virtualinvoke r0.<org.apache.jena.riot.lang.LangRDFJSON: org.apache.jena.riot.tokens.Token nextToken()>();

        return;
    }
}
