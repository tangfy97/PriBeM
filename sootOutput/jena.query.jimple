public class jena.query extends java.lang.Object
{

    public void <init>()
    {
        jena.query r0;

        r0 := @this: jena.query;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <jena.query: void invokeCmd(java.lang.String,java.lang.String[])>("arq.query", r0);

        return;
    }

    public static void invokeCmd(java.lang.String, java.lang.String[])
    {
        java.lang.NoSuchMethodException $r25;
        java.lang.reflect.Method r40;
        java.lang.IllegalAccessException $r11;
        java.lang.reflect.InvocationTargetException $r4;
        java.lang.StringBuilder $r5, $r7, $r9, $r12, $r14, $r16, $r19, $r21, $r23, $r26, $r28, $r29, $r30, $r33, $r35, $r36, $r37;
        java.lang.Object[] $r2;
        java.lang.String[] r3;
        java.lang.String r0, $r8, $r10, $r15, $r17, $r22, $r24, $r31, $r38;
        java.io.PrintStream $r6, $r13, $r20, $r27, $r34;
        java.lang.Class[] $r1;
        java.lang.IllegalArgumentException $r18;
        java.lang.ClassNotFoundException $r32;
        java.lang.Class r39;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String[];

        r39 = null;

     label01:
        r39 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label02:
        goto label04;

     label03:
        $r32 := @caughtexception;

        $r34 = <java.lang.System: java.io.PrintStream err>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not found");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r38);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label04:
        r40 = null;

     label05:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "[Ljava/lang/String;";

        r40 = virtualinvoke r39.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("main", $r1);

     label06:
        goto label08;

     label07:
        $r25 := @caughtexception;

        $r27 = <java.lang.System: java.io.PrintStream err>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'main\' not found but the class \'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>($r31);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label08:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        virtualinvoke r40.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

     label09:
        return;

     label10:
        $r18 := @caughtexception;

        $r20 = <java.lang.System: java.io.PrintStream err>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IllegalArgumentException exception: ");

        $r22 = virtualinvoke $r18.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r24);

        staticinvoke <java.lang.System: void exit(int)>(7);

        goto label13;

     label11:
        $r11 := @caughtexception;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IllegalAccessException exception: ");

        $r15 = virtualinvoke $r11.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r17);

        staticinvoke <java.lang.System: void exit(int)>(8);

        goto label13;

     label12:
        $r4 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InvocationTargetException exception: ");

        $r8 = virtualinvoke $r4.<java.lang.reflect.InvocationTargetException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

        staticinvoke <java.lang.System: void exit(int)>(9);

     label13:
        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.NoSuchMethodException from label05 to label06 with label07;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.IllegalAccessException from label08 to label09 with label11;
        catch java.lang.reflect.InvocationTargetException from label08 to label09 with label12;
    }

    static void <clinit>()
    {
        staticinvoke <jena.cmdline.CmdLineUtils: void setLog4jConfiguration()>();

        return;
    }
}
