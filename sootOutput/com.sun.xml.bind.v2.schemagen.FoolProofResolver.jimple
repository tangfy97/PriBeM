final class com.sun.xml.bind.v2.schemagen.FoolProofResolver extends javax.xml.bind.SchemaOutputResolver
{
    private static final java.util.logging.Logger logger;
    private final javax.xml.bind.SchemaOutputResolver resolver;
    static final boolean $assertionsDisabled;

    public void <init>(javax.xml.bind.SchemaOutputResolver)
    {
        com.sun.xml.bind.v2.schemagen.FoolProofResolver r0;
        javax.xml.bind.SchemaOutputResolver r1;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.schemagen.FoolProofResolver;

        r1 := @parameter0: javax.xml.bind.SchemaOutputResolver;

        specialinvoke r0.<javax.xml.bind.SchemaOutputResolver: void <init>()>();

        $z0 = <com.sun.xml.bind.v2.schemagen.FoolProofResolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<com.sun.xml.bind.v2.schemagen.FoolProofResolver: javax.xml.bind.SchemaOutputResolver resolver> = r1;

        return;
    }

    public javax.xml.transform.Result createOutput(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.Object[] $r4;
        javax.xml.transform.Result $r8;
        java.lang.AssertionError $r18;
        com.sun.xml.bind.v2.schemagen.FoolProofResolver r0;
        java.lang.String $r3, r5, r6, $r11, $r12, $r17;
        java.util.logging.Logger $r1, $r9, $r14;
        javax.xml.bind.SchemaOutputResolver $r7;
        java.lang.Class $r2, $r10;
        java.lang.StringBuilder $r13, $r15, $r16;

        r0 := @this: com.sun.xml.bind.v2.schemagen.FoolProofResolver;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r1 = <com.sun.xml.bind.v2.schemagen.FoolProofResolver: java.util.logging.Logger logger>;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r5;

        $r4[1] = r6;

        virtualinvoke $r1.<java.util.logging.Logger: void entering(java.lang.String,java.lang.String,java.lang.Object[])>($r3, "createOutput", $r4);

        $r7 = r0.<com.sun.xml.bind.v2.schemagen.FoolProofResolver: javax.xml.bind.SchemaOutputResolver resolver>;

        $r8 = virtualinvoke $r7.<javax.xml.bind.SchemaOutputResolver: javax.xml.transform.Result createOutput(java.lang.String,java.lang.String)>(r5, r6);

        if $r8 == null goto label2;

        $r12 = interfaceinvoke $r8.<javax.xml.transform.Result: java.lang.String getSystemId()>();

        $r14 = <com.sun.xml.bind.v2.schemagen.FoolProofResolver: java.util.logging.Logger logger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("system ID = ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.logging.Logger: void finer(java.lang.String)>($r17);

        if $r12 == null goto label1;

        goto label2;

     label1:
        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>("system ID cannot be null");

        throw $r18;

     label2:
        $r9 = <com.sun.xml.bind.v2.schemagen.FoolProofResolver: java.util.logging.Logger logger>;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r9.<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String,java.lang.Object)>($r11, "createOutput", $r8);

        return $r8;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.util.logging.Logger $r1;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/schemagen/FoolProofResolver;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.schemagen.FoolProofResolver: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <com.sun.xml.bind.Util: java.util.logging.Logger getClassLogger()>();

        <com.sun.xml.bind.v2.schemagen.FoolProofResolver: java.util.logging.Logger logger> = $r1;

        return;
    }
}
