public class org.xmlpull.v1.builder.adapter.XmlElementAdapter extends java.lang.Object implements org.xmlpull.v1.builder.XmlElement
{
    private org.xmlpull.v1.builder.adapter.XmlElementAdapter topAdapter;
    private org.xmlpull.v1.builder.XmlElement target;
    private org.xmlpull.v1.builder.XmlContainer parent;
    static java.lang.Class class$org$xmlpull$v1$builder$adapter$XmlElementAdapter;
    static java.lang.Class class$org$xmlpull$v1$builder$XmlElement;

    public void <init>(org.xmlpull.v1.builder.XmlElement)
    {
        org.xmlpull.v1.builder.XmlElement r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: void setTarget(org.xmlpull.v1.builder.XmlElement)>(r1);

        return;
    }

    private void setTarget(org.xmlpull.v1.builder.XmlElement)
    {
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.util.Iterator $r11;
        org.xmlpull.v1.builder.XmlDocument r9;
        org.xmlpull.v1.builder.XmlElement r1, r10;
        org.xmlpull.v1.builder.XmlContainer $r2, $r4, $r5, $r6, $r7, $r8;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target> = r1;

        $r2 = interfaceinvoke r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlContainer getParent()>();

        if $r2 == null goto label2;

        $r4 = interfaceinvoke r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlContainer getParent()>();

        r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlContainer parent> = $r4;

        $r5 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlContainer parent>;

        $z0 = $r5 instanceof org.xmlpull.v1.builder.XmlDocument;

        if $z0 == 0 goto label1;

        $r8 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlContainer parent>;

        r9 = (org.xmlpull.v1.builder.XmlDocument) $r8;

        interfaceinvoke r9.<org.xmlpull.v1.builder.XmlDocument: void setDocumentElement(org.xmlpull.v1.builder.XmlElement)>(r0);

     label1:
        $r6 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlContainer parent>;

        $z1 = $r6 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z1 == 0 goto label2;

        $r7 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlContainer parent>;

        r10 = (org.xmlpull.v1.builder.XmlElement) $r7;

        interfaceinvoke r10.<org.xmlpull.v1.builder.XmlElement: void replaceChild(java.lang.Object,java.lang.Object)>(r0, r1);

     label2:
        $r11 = interfaceinvoke r1.<org.xmlpull.v1.builder.XmlElement: java.util.Iterator children()>();

     label3:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r3 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        specialinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: void fixImportedChildParent(java.lang.Object)>($r3);

        goto label3;

     label4:
        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.xmlpull.v1.builder.XmlElement $r3, $r5;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0, r2;
        java.lang.Object $r1, $r4;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.xmlpull.v1.builder.adapter.XmlElementAdapter) $r1;

        r2.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlContainer parent> = null;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: java.lang.Object clone()>();

        $r5 = (org.xmlpull.v1.builder.XmlElement) $r4;

        r2.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target> = $r5;

        return r2;
    }

    public org.xmlpull.v1.builder.XmlElement getTarget()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        return $r1;
    }

    public org.xmlpull.v1.builder.adapter.XmlElementAdapter getTopAdapter()
    {
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0, $r1, $r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.adapter.XmlElementAdapter topAdapter>;

        if $r1 == null goto label1;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.adapter.XmlElementAdapter topAdapter>;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public void setTopAdapter(org.xmlpull.v1.builder.adapter.XmlElementAdapter)
    {
        org.xmlpull.v1.builder.XmlElement $r2, $r3;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0, r1, $r4;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.adapter.XmlElementAdapter topAdapter> = r1;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $z0 = $r2 instanceof org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = (org.xmlpull.v1.builder.adapter.XmlElementAdapter) $r3;

        virtualinvoke $r4.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: void setTopAdapter(org.xmlpull.v1.builder.adapter.XmlElementAdapter)>(r1);

     label1:
        return;
    }

    public static org.xmlpull.v1.builder.adapter.XmlElementAdapter castOrWrap(org.xmlpull.v1.builder.XmlElement, java.lang.Class)
    {
        org.xmlpull.v1.builder.adapter.XmlElementAdapter $r8, $r10, $r11, $r17, $r18, $r19, $r20, $r21, r46, r47;
        org.xmlpull.v1.builder.XmlBuilderException $r33, $r39;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Exception $r32, $r38;
        java.lang.Object[] $r6, $r15;
        java.lang.reflect.Constructor $r5, $r14;
        java.lang.StringBuffer $r26, $r27, $r29, $r34, $r35, $r36, $r40, $r41, $r42;
        java.lang.String $r30, $r37, $r43;
        java.lang.Class[] $r3, $r12;
        java.lang.IllegalArgumentException $r25, $r31;
        org.xmlpull.v1.builder.XmlElement r0, $r23, $r24;
        java.lang.Class $r1, r2, $r4, $r9, $r13, $r22, $r28, $r44, $r45, $r48, $r49;
        java.lang.Object $r7, $r16;

        r0 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        r2 := @parameter1: java.lang.Class;

        if r0 != null goto label01;

        $r31 = new java.lang.IllegalArgumentException;

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null element can not be wrapped");

        throw $r31;

     label01:
        $r1 = <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$adapter$XmlElementAdapter>;

        if $r1 != null goto label02;

        $r44 = staticinvoke <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$(java.lang.String)>("org.xmlpull.v1.builder.adapter.XmlElementAdapter");

        <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$adapter$XmlElementAdapter> = $r44;

        goto label03;

     label02:
        $r44 = <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$adapter$XmlElementAdapter>;

     label03:
        $z0 = virtualinvoke $r44.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 != 0 goto label06;

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class for cast/wrap must extend ");

        $r28 = <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$adapter$XmlElementAdapter>;

        if $r28 != null goto label04;

        $r45 = staticinvoke <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$(java.lang.String)>("org.xmlpull.v1.builder.adapter.XmlElementAdapter");

        <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$adapter$XmlElementAdapter> = $r45;

        goto label05;

     label04:
        $r45 = <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$adapter$XmlElementAdapter>;

     label05:
        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r45);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r25;

     label06:
        $z1 = r0 instanceof org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        if $z1 == 0 goto label15;

        r46 = (org.xmlpull.v1.builder.adapter.XmlElementAdapter) r0;

        $r9 = virtualinvoke r46.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9);

        if $z2 == 0 goto label07;

        return r46;

     label07:
        $r10 = virtualinvoke r46.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.adapter.XmlElementAdapter getTopAdapter()>();

        r47 = $r10;

     label08:
        $r11 = r47.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.adapter.XmlElementAdapter topAdapter>;

        if $r11 == null goto label10;

        $r22 = virtualinvoke r47.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = virtualinvoke $r22.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z3 == 0 goto label09;

        return r47;

     label09:
        $r23 = r47.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $z4 = $r23 instanceof org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        if $z4 == 0 goto label10;

        $r24 = r47.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        r47 = (org.xmlpull.v1.builder.adapter.XmlElementAdapter) $r24;

        goto label08;

     label10:
        $r21 = r47;

        $r12 = newarray (java.lang.Class)[1];

        $r13 = <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$XmlElement>;

        if $r13 != null goto label11;

        $r48 = staticinvoke <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$(java.lang.String)>("org.xmlpull.v1.builder.XmlElement");

        <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$XmlElement> = $r48;

        goto label12;

     label11:
        $r48 = <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$XmlElement>;

     label12:
        $r12[0] = $r48;

        $r14 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r12);

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = $r10;

        $r16 = virtualinvoke $r14.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r15);

        $r17 = (org.xmlpull.v1.builder.adapter.XmlElementAdapter) $r16;

        $r21.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.adapter.XmlElementAdapter topAdapter> = $r17;

        $r19 = r47.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.adapter.XmlElementAdapter topAdapter>;

        $r18 = r47.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.adapter.XmlElementAdapter topAdapter>;

        virtualinvoke $r19.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: void setTopAdapter(org.xmlpull.v1.builder.adapter.XmlElementAdapter)>($r18);

        $r20 = r47.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.adapter.XmlElementAdapter topAdapter>;

     label13:
        return $r20;

     label14:
        $r38 := @caughtexception;

        $r39 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not create wrapper of ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r39.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>($r43, $r38);

        throw $r39;

     label15:
        $r3 = newarray (java.lang.Class)[1];

        $r4 = <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$XmlElement>;

        if $r4 != null goto label16;

        $r49 = staticinvoke <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$(java.lang.String)>("org.xmlpull.v1.builder.XmlElement");

        <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$XmlElement> = $r49;

        goto label17;

     label16:
        $r49 = <org.xmlpull.v1.builder.adapter.XmlElementAdapter: java.lang.Class class$org$xmlpull$v1$builder$XmlElement>;

     label17:
        $r3[0] = $r49;

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r0;

        $r7 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

        $r8 = (org.xmlpull.v1.builder.adapter.XmlElementAdapter) $r7;

     label18:
        return $r8;

     label19:
        $r32 := @caughtexception;

        $r33 = new org.xmlpull.v1.builder.XmlBuilderException;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("could not wrap element ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r33.<org.xmlpull.v1.builder.XmlBuilderException: void <init>(java.lang.String,java.lang.Throwable)>($r37, $r32);

        throw $r33;

        catch java.lang.Exception from label10 to label13 with label14;
        catch java.lang.Exception from label15 to label18 with label19;
    }

    private void fixImportedChildParent(java.lang.Object)
    {
        org.xmlpull.v1.builder.XmlElement r1, $r4;
        org.xmlpull.v1.builder.XmlContainer $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r3;
        java.lang.Object r0;
        boolean $z0;

        r3 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z0 == 0 goto label1;

        r1 = (org.xmlpull.v1.builder.XmlElement) r0;

        $r2 = interfaceinvoke r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlContainer getParent()>();

        $r4 = r3.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        if $r2 != $r4 goto label1;

        interfaceinvoke r1.<org.xmlpull.v1.builder.XmlElement: void setParent(org.xmlpull.v1.builder.XmlContainer)>(r3);

     label1:
        return;
    }

    private org.xmlpull.v1.builder.XmlElement fixElementParent(org.xmlpull.v1.builder.XmlElement)
    {
        org.xmlpull.v1.builder.XmlElement r0;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r1;

        r1 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r0 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        interfaceinvoke r0.<org.xmlpull.v1.builder.XmlElement: void setParent(org.xmlpull.v1.builder.XmlContainer)>(r1);

        return r0;
    }

    public org.xmlpull.v1.builder.XmlContainer getRoot()
    {
        org.xmlpull.v1.builder.XmlElement $r1, $r3;
        org.xmlpull.v1.builder.XmlContainer $r2, r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlContainer getRoot()>();

        r4 = $r2;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        if $r2 != $r3 goto label1;

        r4 = r0;

     label1:
        return r4;
    }

    public org.xmlpull.v1.builder.XmlContainer getParent()
    {
        org.xmlpull.v1.builder.XmlContainer $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlContainer parent>;

        return $r1;
    }

    public void setParent(org.xmlpull.v1.builder.XmlContainer)
    {
        org.xmlpull.v1.builder.XmlContainer r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlContainer;

        r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlContainer parent> = r1;

        return;
    }

    public org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace $r4;
        java.lang.String r1, r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlAttribute attribute(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlAttribute $r3;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlAttribute attribute(java.lang.String)>(r1);

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlAttribute attribute(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlAttribute $r4;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlAttribute attribute(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlAttribute findAttribute(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlAttribute $r4;
        java.lang.String r1, r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlAttribute findAttribute(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public java.util.Iterator attributes()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.util.Iterator $r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: java.util.Iterator attributes()>();

        return $r2;
    }

    public void removeAllChildren()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: void removeAllChildren()>();

        return;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlAttribute $r7;
        org.xmlpull.v1.builder.XmlElement $r6;
        java.lang.String r1, r2, r3, r4, r5;
        boolean z0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        $r6 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r7 = interfaceinvoke $r6.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, r5, z0);

        return $r7;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1, r2, $r4;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(org.xmlpull.v1.builder.XmlNamespace, java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlAttribute $r5;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2, r3;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r5 = interfaceinvoke $r4.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlAttribute addAttribute(org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $r5;
    }

    public java.lang.String getNamespaceName()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String $r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: java.lang.String getNamespaceName()>();

        return $r2;
    }

    public void ensureChildrenCapacity(int)
    {
        int i0;
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: void ensureChildrenCapacity(int)>(i0);

        return;
    }

    public java.util.Iterator namespaces()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.util.Iterator $r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: java.util.Iterator namespaces()>();

        return $r2;
    }

    public void removeAllAttributes()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: void removeAllAttributes()>();

        return;
    }

    public org.xmlpull.v1.builder.XmlNamespace getNamespace()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.XmlNamespace $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace getNamespace()>();

        return $r2;
    }

    public java.lang.String getBaseUri()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String $r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: java.lang.String getBaseUri()>();

        return $r2;
    }

    public void removeAttribute(org.xmlpull.v1.builder.XmlAttribute)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlAttribute r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlAttribute;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: void removeAttribute(org.xmlpull.v1.builder.XmlAttribute)>(r1);

        return;
    }

    public org.xmlpull.v1.builder.XmlNamespace declareNamespace(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace $r4;
        java.lang.String r1, r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace declareNamespace(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public void removeAllNamespaceDeclarations()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: void removeAllNamespaceDeclarations()>();

        return;
    }

    public boolean hasAttributes()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $z0 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: boolean hasAttributes()>();

        return $z0;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String, org.xmlpull.v1.builder.XmlNamespace, java.lang.String, java.lang.String, boolean)
    {
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlAttribute $r6;
        org.xmlpull.v1.builder.XmlNamespace r2;
        org.xmlpull.v1.builder.XmlElement $r5;
        java.lang.String r1, r3, r4;
        boolean z0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.xmlpull.v1.builder.XmlNamespace;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $r5 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r6 = interfaceinvoke $r5.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String,org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, z0);

        return $r6;
    }

    public org.xmlpull.v1.builder.XmlNamespace declareNamespace(org.xmlpull.v1.builder.XmlNamespace)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace r1, $r3;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace declareNamespace(org.xmlpull.v1.builder.XmlNamespace)>(r1);

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlAttribute $r4;
        java.lang.String r1, r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public boolean hasNamespaceDeclarations()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $z0 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: boolean hasNamespaceDeclarations()>();

        return $z0;
    }

    public org.xmlpull.v1.builder.XmlNamespace lookupNamespaceByName(java.lang.String)
    {
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace $r3, $r6;
        org.xmlpull.v1.builder.XmlElement $r2, r5;
        org.xmlpull.v1.builder.XmlContainer $r4;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace lookupNamespaceByName(java.lang.String)>(r1);

        if $r3 != null goto label1;

        $r4 = virtualinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlContainer getParent()>();

        $z0 = $r4 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z0 == 0 goto label1;

        r5 = (org.xmlpull.v1.builder.XmlElement) $r4;

        $r6 = interfaceinvoke r5.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace lookupNamespaceByName(java.lang.String)>(r1);

        return $r6;

     label1:
        return $r3;
    }

    public org.xmlpull.v1.builder.XmlNamespace lookupNamespaceByPrefix(java.lang.String)
    {
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace $r3, $r6;
        org.xmlpull.v1.builder.XmlElement $r2, r5;
        org.xmlpull.v1.builder.XmlContainer $r4;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace lookupNamespaceByPrefix(java.lang.String)>(r1);

        if $r3 != null goto label1;

        $r4 = virtualinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlContainer getParent()>();

        $z0 = $r4 instanceof org.xmlpull.v1.builder.XmlElement;

        if $z0 == 0 goto label1;

        r5 = (org.xmlpull.v1.builder.XmlElement) $r4;

        $r6 = interfaceinvoke r5.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace lookupNamespaceByPrefix(java.lang.String)>(r1);

        return $r6;

     label1:
        return $r3;
    }

    public org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace $r3;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlNamespace newNamespace(java.lang.String)>(r1);

        return $r3;
    }

    public void setBaseUri(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: void setBaseUri(java.lang.String)>(r1);

        return;
    }

    public void setNamespace(org.xmlpull.v1.builder.XmlNamespace)
    {
        org.xmlpull.v1.builder.XmlNamespace r1;
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: void setNamespace(org.xmlpull.v1.builder.XmlNamespace)>(r1);

        return;
    }

    public void ensureNamespaceDeclarationsCapacity(int)
    {
        int i0;
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: void ensureNamespaceDeclarationsCapacity(int)>(i0);

        return;
    }

    public java.lang.String getName()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String $r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: java.lang.String getName()>();

        return $r2;
    }

    public void setName(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: void setName(java.lang.String)>(r1);

        return;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String, org.xmlpull.v1.builder.XmlNamespace, java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r5;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlAttribute $r6;
        org.xmlpull.v1.builder.XmlNamespace r2;
        java.lang.String r1, r3, r4;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.xmlpull.v1.builder.XmlNamespace;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r6 = interfaceinvoke $r5.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlAttribute addAttribute(java.lang.String,org.xmlpull.v1.builder.XmlNamespace,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        return $r6;
    }

    public void ensureAttributeCapacity(int)
    {
        int i0;
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: void ensureAttributeCapacity(int)>(i0);

        return;
    }

    public org.xmlpull.v1.builder.XmlAttribute addAttribute(org.xmlpull.v1.builder.XmlAttribute)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlAttribute r1, $r3;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlAttribute;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlAttribute addAttribute(org.xmlpull.v1.builder.XmlAttribute)>(r1);

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlElement element(int)
    {
        org.xmlpull.v1.builder.XmlElement $r1, $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        int i0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement element(int)>(i0);

        return $r2;
    }

    public org.xmlpull.v1.builder.XmlElement requiredElement(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3, $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement requiredElement(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3, $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace, java.lang.String, boolean)
    {
        org.xmlpull.v1.builder.XmlElement $r3, $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement element(org.xmlpull.v1.builder.XmlNamespace,java.lang.String,boolean)>(r1, r2, z0);

        return $r4;
    }

    public org.xmlpull.v1.builder.Iterable elements(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.Iterable $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.Iterable elements(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String, org.xmlpull.v1.builder.XmlElement)
    {
        org.xmlpull.v1.builder.XmlElement r2, $r3, $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.xmlpull.v1.builder.XmlElement;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String,org.xmlpull.v1.builder.XmlElement)>(r1, r2);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlElement newElement(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3, $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement newElement(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlElement addElement(org.xmlpull.v1.builder.XmlElement)
    {
        org.xmlpull.v1.builder.XmlElement r1, $r2, $r3, $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlElement;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement addElement(org.xmlpull.v1.builder.XmlElement)>(r1);

        $r4 = specialinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement fixElementParent(org.xmlpull.v1.builder.XmlElement)>($r3);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlElement addElement(int, org.xmlpull.v1.builder.XmlElement)
    {
        org.xmlpull.v1.builder.XmlElement r1, $r2, $r3, $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        int i0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: org.xmlpull.v1.builder.XmlElement;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement addElement(int,org.xmlpull.v1.builder.XmlElement)>(i0, r1);

        $r4 = specialinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement fixElementParent(org.xmlpull.v1.builder.XmlElement)>($r3);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlElement addElement(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r2, $r3, $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement addElement(java.lang.String)>(r1);

        $r4 = specialinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement fixElementParent(org.xmlpull.v1.builder.XmlElement)>($r3);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3, $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1, r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public void addChild(java.lang.Object)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        java.lang.Object r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: void addChild(java.lang.Object)>(r1);

        specialinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: void fixImportedChildParent(java.lang.Object)>(r1);

        return;
    }

    public void insertChild(int, java.lang.Object)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: void insertChild(int,java.lang.Object)>(i0, r1);

        specialinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: void fixImportedChildParent(java.lang.Object)>(r1);

        return;
    }

    public org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r2, $r3;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String)>(r1);

        return $r3;
    }

    public org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String, java.lang.String, org.xmlpull.v1.builder.XmlElement)
    {
        org.xmlpull.v1.builder.XmlElement r3, $r4, $r5;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1, r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.xmlpull.v1.builder.XmlElement;

        $r4 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r5 = interfaceinvoke $r4.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement findElementByName(java.lang.String,java.lang.String,org.xmlpull.v1.builder.XmlElement)>(r1, r2, r3);

        return $r5;
    }

    public void removeChild(java.lang.Object)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        java.lang.Object r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: void removeChild(java.lang.Object)>(r1);

        return;
    }

    public java.util.Iterator children()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.util.Iterator $r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: java.util.Iterator children()>();

        return $r2;
    }

    public org.xmlpull.v1.builder.Iterable requiredElementContent()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.Iterable $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.Iterable requiredElementContent()>();

        return $r2;
    }

    public java.lang.String requiredTextContent()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String $r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: java.lang.String requiredTextContent()>();

        return $r2;
    }

    public boolean hasChild(java.lang.Object)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $z0 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: boolean hasChild(java.lang.Object)>(r1);

        return $z0;
    }

    public org.xmlpull.v1.builder.XmlElement newElement(java.lang.String, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3, $r4;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1, r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement newElement(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public org.xmlpull.v1.builder.XmlElement addElement(org.xmlpull.v1.builder.XmlNamespace, java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r3, $r4, $r5;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        org.xmlpull.v1.builder.XmlNamespace r1;
        java.lang.String r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: org.xmlpull.v1.builder.XmlNamespace;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement addElement(org.xmlpull.v1.builder.XmlNamespace,java.lang.String)>(r1, r2);

        $r5 = specialinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement fixElementParent(org.xmlpull.v1.builder.XmlElement)>($r4);

        return $r5;
    }

    public boolean hasChildren()
    {
        org.xmlpull.v1.builder.XmlElement $r1;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        boolean $z0;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        $r1 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $z0 = interfaceinvoke $r1.<org.xmlpull.v1.builder.XmlElement: boolean hasChildren()>();

        return $z0;
    }

    public void addChild(int, java.lang.Object)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: void addChild(int,java.lang.Object)>(i0, r1);

        specialinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: void fixImportedChildParent(java.lang.Object)>(r1);

        return;
    }

    public void replaceChild(java.lang.Object, java.lang.Object)
    {
        org.xmlpull.v1.builder.XmlElement $r3;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.Object r1, r2;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r3.<org.xmlpull.v1.builder.XmlElement: void replaceChild(java.lang.Object,java.lang.Object)>(r1, r2);

        specialinvoke r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: void fixImportedChildParent(java.lang.Object)>(r1);

        return;
    }

    public org.xmlpull.v1.builder.XmlElement newElement(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r2, $r3;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        $r3 = interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: org.xmlpull.v1.builder.XmlElement newElement(java.lang.String)>(r1);

        return $r3;
    }

    public void replaceChildrenWithText(java.lang.String)
    {
        org.xmlpull.v1.builder.XmlElement $r2;
        org.xmlpull.v1.builder.adapter.XmlElementAdapter r0;
        java.lang.String r1;

        r0 := @this: org.xmlpull.v1.builder.adapter.XmlElementAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.xmlpull.v1.builder.adapter.XmlElementAdapter: org.xmlpull.v1.builder.XmlElement target>;

        interfaceinvoke $r2.<org.xmlpull.v1.builder.XmlElement: void replaceChildrenWithText(java.lang.String)>(r1);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
