public class org.apache.xalan.transformer.StackGuard extends java.lang.Object
{
    public static int m_recursionLimit;
    org.apache.xalan.transformer.TransformerImpl m_transformer;

    public int getRecursionLimit()
    {
        int $i0;
        org.apache.xalan.transformer.StackGuard r0;

        r0 := @this: org.apache.xalan.transformer.StackGuard;

        $i0 = <org.apache.xalan.transformer.StackGuard: int m_recursionLimit>;

        return $i0;
    }

    public void setRecursionLimit(int)
    {
        int i0;
        org.apache.xalan.transformer.StackGuard r0;

        r0 := @this: org.apache.xalan.transformer.StackGuard;

        i0 := @parameter0: int;

        <org.apache.xalan.transformer.StackGuard: int m_recursionLimit> = i0;

        return;
    }

    public void <init>(org.apache.xalan.transformer.TransformerImpl)
    {
        org.apache.xalan.transformer.StackGuard r0;
        org.apache.xalan.transformer.TransformerImpl r1;

        r0 := @this: org.apache.xalan.transformer.StackGuard;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.transformer.StackGuard: org.apache.xalan.transformer.TransformerImpl m_transformer> = r1;

        return;
    }

    public int countLikeTemplates(org.apache.xalan.templates.ElemTemplate, int)
    {
        org.apache.xalan.templates.ElemTemplateElement $r5;
        org.apache.xml.utils.ObjectStack $r2;
        org.apache.xalan.transformer.StackGuard r0;
        org.apache.xalan.templates.ElemTemplate r4;
        int i0, i1, i2, $i4;
        java.lang.Object $r3;
        org.apache.xalan.transformer.TransformerImpl $r1;

        r0 := @this: org.apache.xalan.transformer.StackGuard;

        r4 := @parameter0: org.apache.xalan.templates.ElemTemplate;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.xalan.transformer.StackGuard: org.apache.xalan.transformer.TransformerImpl m_transformer>;

        $r2 = virtualinvoke $r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.utils.ObjectStack getCurrentTemplateElements()>();

        i1 = 1;

        i2 = i0 - 1;

        goto label3;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i2);

        $r5 = (org.apache.xalan.templates.ElemTemplateElement) $r3;

        if $r5 != r4 goto label2;

        i1 = i1 + 1;

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

     label3:
        if i2 >= 0 goto label1;

        return i1;
    }

    private org.apache.xalan.templates.ElemTemplate getNextMatchOrNamedTemplate(int)
    {
        org.apache.xalan.templates.ElemTemplateElement r4;
        org.apache.xml.utils.ObjectStack $r2;
        org.apache.xalan.transformer.StackGuard r0;
        org.apache.xalan.templates.ElemTemplate $r5;
        int i0, $i1, i2, $i4;
        java.lang.Object $r3;
        org.apache.xalan.transformer.TransformerImpl $r1;

        r0 := @this: org.apache.xalan.transformer.StackGuard;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xalan.transformer.StackGuard: org.apache.xalan.transformer.TransformerImpl m_transformer>;

        $r2 = virtualinvoke $r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.utils.ObjectStack getCurrentTemplateElements()>();

        i2 = i0;

        goto label3;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i2);

        r4 = (org.apache.xalan.templates.ElemTemplateElement) $r3;

        if null == r4 goto label2;

        $i1 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if $i1 != 19 goto label2;

        $r5 = (org.apache.xalan.templates.ElemTemplate) r4;

        return $r5;

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

     label3:
        if i2 >= 0 goto label1;

        return null;
    }

    public void checkForInfinateLoop() throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r5;
        javax.xml.transform.TransformerException $r15;
        java.lang.Integer $r14;
        org.apache.xalan.templates.ElemTemplate $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8;
        java.lang.String $r4, $r9, $r12, $r13;
        org.apache.xml.utils.QName $r3, $r7, $r11;
        org.apache.xpath.XPath $r8;
        org.apache.xalan.transformer.StackGuard r0;
        org.apache.xalan.transformer.TransformerImpl $r1;

        r0 := @this: org.apache.xalan.transformer.StackGuard;

        $r1 = r0.<org.apache.xalan.transformer.StackGuard: org.apache.xalan.transformer.TransformerImpl m_transformer>;

        $i0 = virtualinvoke $r1.<org.apache.xalan.transformer.TransformerImpl: int getCurrentTemplateElementsCount()>();

        $i1 = <org.apache.xalan.transformer.StackGuard: int m_recursionLimit>;

        if $i0 >= $i1 goto label01;

        return;

     label01:
        $i2 = <org.apache.xalan.transformer.StackGuard: int m_recursionLimit>;

        if $i2 > 0 goto label02;

        return;

     label02:
        i6 = $i0 - 1;

        goto label10;

     label03:
        $r2 = specialinvoke r0.<org.apache.xalan.transformer.StackGuard: org.apache.xalan.templates.ElemTemplate getNextMatchOrNamedTemplate(int)>(i6);

        if null != $r2 goto label04;

        goto label11;

     label04:
        $i4 = virtualinvoke r0.<org.apache.xalan.transformer.StackGuard: int countLikeTemplates(org.apache.xalan.templates.ElemTemplate,int)>($r2, i6);

        $i5 = <org.apache.xalan.transformer.StackGuard: int m_recursionLimit>;

        if $i4 < $i5 goto label09;

        $r3 = virtualinvoke $r2.<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>();

        if null == $r3 goto label05;

        $r12 = "nameIs";

        goto label06;

     label05:
        $r12 = "matchPatternIs";

     label06:
        $r4 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>($r12, null);

        $r5 = newarray (java.lang.Object)[3];

        $r14 = new java.lang.Integer;

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i4);

        $r5[0] = $r14;

        $r5[1] = $r4;

        $r7 = virtualinvoke $r2.<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>();

        if null == $r7 goto label07;

        $r11 = virtualinvoke $r2.<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>();

        $r13 = virtualinvoke $r11.<org.apache.xml.utils.QName: java.lang.String toString()>();

        goto label08;

     label07:
        $r8 = virtualinvoke $r2.<org.apache.xalan.templates.ElemTemplate: org.apache.xpath.XPath getMatch()>();

        $r13 = virtualinvoke $r8.<org.apache.xpath.XPath: java.lang.String getPatternString()>();

     label08:
        $r5[2] = $r13;

        $r9 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("recursionTooDeep", $r5);

        $r15 = new javax.xml.transform.TransformerException;

        specialinvoke $r15.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>($r9);

        throw $r15;

     label09:
        $i8 = (int) -1;

        i6 = i6 + $i8;

     label10:
        $i3 = <org.apache.xalan.transformer.StackGuard: int m_recursionLimit>;

        if i6 >= $i3 goto label03;

     label11:
        return;
    }

    static void <clinit>()
    {
        <org.apache.xalan.transformer.StackGuard: int m_recursionLimit> = -1;

        return;
    }
}
