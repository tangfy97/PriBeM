public class org.junit.experimental.theories.Theories$TheoryAnchor extends org.junit.runners.model.Statement
{
    private int successes;
    private org.junit.runners.model.FrameworkMethod fTestMethod;
    private org.junit.runners.model.TestClass fTestClass;
    private java.util.List fInvalidParameters;

    public void <init>(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)
    {
        org.junit.runners.model.FrameworkMethod r2;
        org.junit.experimental.theories.Theories$TheoryAnchor r0;
        org.junit.runners.model.TestClass r3;
        java.util.ArrayList $r1;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        r2 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r3 := @parameter1: org.junit.runners.model.TestClass;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        r0.<org.junit.experimental.theories.Theories$TheoryAnchor: int successes> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.junit.experimental.theories.Theories$TheoryAnchor: java.util.List fInvalidParameters> = $r1;

        r0.<org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.FrameworkMethod fTestMethod> = r2;

        r0.<org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.TestClass fTestClass> = r3;

        return;
    }

    private org.junit.runners.model.TestClass getTestClass()
    {
        org.junit.experimental.theories.Theories$TheoryAnchor r0;
        org.junit.runners.model.TestClass $r1;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        $r1 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.TestClass fTestClass>;

        return $r1;
    }

    public void evaluate() throws java.lang.Throwable
    {
        org.junit.runners.model.FrameworkMethod $r1;
        org.junit.experimental.theories.Theories$TheoryAnchor r0;
        java.util.List $r7;
        org.junit.runners.model.TestClass $r3;
        org.junit.experimental.theories.internal.Assignments $r4;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9;
        java.lang.reflect.Method $r2;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        $r1 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.FrameworkMethod fTestMethod>;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.FrameworkMethod: java.lang.reflect.Method getMethod()>();

        $r3 = specialinvoke r0.<org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.TestClass getTestClass()>();

        $r4 = staticinvoke <org.junit.experimental.theories.internal.Assignments: org.junit.experimental.theories.internal.Assignments allUnassigned(java.lang.reflect.Method,org.junit.runners.model.TestClass)>($r2, $r3);

        virtualinvoke r0.<org.junit.experimental.theories.Theories$TheoryAnchor: void runWithAssignment(org.junit.experimental.theories.internal.Assignments)>($r4);

        $i0 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor: int successes>;

        if $i0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Never found parameters that satisfied method assumptions.  Violated assumptions: ");

        $r7 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor: java.util.List fInvalidParameters>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label1:
        return;
    }

    protected void runWithAssignment(org.junit.experimental.theories.internal.Assignments) throws java.lang.Throwable
    {
        org.junit.experimental.theories.Theories$TheoryAnchor r1;
        org.junit.experimental.theories.internal.Assignments r0;
        boolean $z0;

        r1 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        r0 := @parameter0: org.junit.experimental.theories.internal.Assignments;

        $z0 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: boolean isComplete()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<org.junit.experimental.theories.Theories$TheoryAnchor: void runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)>(r0);

        goto label2;

     label1:
        virtualinvoke r1.<org.junit.experimental.theories.Theories$TheoryAnchor: void runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)>(r0);

     label2:
        return;
    }

    protected void runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.Throwable
    {
        java.util.Iterator $r2;
        org.junit.experimental.theories.Theories$TheoryAnchor r5;
        java.util.List $r1;
        org.junit.experimental.theories.internal.Assignments r0, $r6;
        org.junit.experimental.theories.PotentialAssignment r4;
        java.lang.Object $r3;
        boolean $z0;

        r5 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        r0 := @parameter0: org.junit.experimental.theories.internal.Assignments;

        $r1 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: java.util.List potentialsForNextUnassigned()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.junit.experimental.theories.PotentialAssignment) $r3;

        $r6 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: org.junit.experimental.theories.internal.Assignments assignNext(org.junit.experimental.theories.PotentialAssignment)>(r4);

        virtualinvoke r5.<org.junit.experimental.theories.Theories$TheoryAnchor: void runWithAssignment(org.junit.experimental.theories.internal.Assignments)>($r6);

        goto label1;

     label2:
        return;
    }

    protected void runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.NoSuchMethodException, java.lang.Throwable
    {
        org.junit.runners.model.Statement $r6;
        org.junit.runners.model.FrameworkMethod $r5;
        org.junit.experimental.theories.Theories$TheoryAnchor r1;
        org.junit.runners.model.TestClass $r2;
        org.junit.experimental.theories.internal.Assignments r4;
        org.junit.experimental.theories.Theories$TheoryAnchor$1 $r0;
        java.lang.Class $r3;

        r1 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        r4 := @parameter0: org.junit.experimental.theories.internal.Assignments;

        $r0 = new org.junit.experimental.theories.Theories$TheoryAnchor$1;

        $r2 = specialinvoke r1.<org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.TestClass getTestClass()>();

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        specialinvoke $r0.<org.junit.experimental.theories.Theories$TheoryAnchor$1: void <init>(org.junit.experimental.theories.Theories$TheoryAnchor,java.lang.Class,org.junit.experimental.theories.internal.Assignments)>(r1, $r3, r4);

        $r5 = r1.<org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.FrameworkMethod fTestMethod>;

        $r6 = virtualinvoke $r0.<org.junit.experimental.theories.Theories$TheoryAnchor$1: org.junit.runners.model.Statement methodBlock(org.junit.runners.model.FrameworkMethod)>($r5);

        virtualinvoke $r6.<org.junit.runners.model.Statement: void evaluate()>();

        return;
    }

    private org.junit.runners.model.Statement methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)
    {
        org.junit.runners.model.FrameworkMethod r3;
        org.junit.experimental.theories.Theories$TheoryAnchor r1;
        org.junit.experimental.theories.internal.Assignments r2;
        java.lang.Object r4;
        org.junit.experimental.theories.Theories$TheoryAnchor$2 $r0;

        r1 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        r3 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: org.junit.experimental.theories.internal.Assignments;

        r4 := @parameter2: java.lang.Object;

        $r0 = new org.junit.experimental.theories.Theories$TheoryAnchor$2;

        specialinvoke $r0.<org.junit.experimental.theories.Theories$TheoryAnchor$2: void <init>(org.junit.experimental.theories.Theories$TheoryAnchor,org.junit.experimental.theories.internal.Assignments,org.junit.runners.model.FrameworkMethod,java.lang.Object)>(r1, r2, r3, r4);

        return $r0;
    }

    protected void handleAssumptionViolation(org.junit.internal.AssumptionViolatedException)
    {
        java.util.List $r2;
        org.junit.internal.AssumptionViolatedException r1;
        org.junit.experimental.theories.Theories$TheoryAnchor r0;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        r1 := @parameter0: org.junit.internal.AssumptionViolatedException;

        $r2 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor: java.util.List fInvalidParameters>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected transient void reportParameterizedError(java.lang.Throwable, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Throwable r2;
        java.lang.Object[] r0;
        org.junit.runners.model.FrameworkMethod $r4;
        org.junit.experimental.theories.Theories$TheoryAnchor r3;
        int $i0;
        java.lang.String $r5;
        org.junit.experimental.theories.internal.ParameterizedAssertionError $r1;

        r3 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        r2 := @parameter0: java.lang.Throwable;

        r0 := @parameter1: java.lang.Object[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        throw r2;

     label1:
        $r1 = new org.junit.experimental.theories.internal.ParameterizedAssertionError;

        $r4 = r3.<org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.FrameworkMethod fTestMethod>;

        $r5 = virtualinvoke $r4.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        specialinvoke $r1.<org.junit.experimental.theories.internal.ParameterizedAssertionError: void <init>(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, $r5, r0);

        throw $r1;
    }

    private boolean nullsOk()
    {
        org.junit.runners.model.FrameworkMethod $r1;
        org.junit.experimental.theories.Theories$TheoryAnchor r0;
        java.lang.'annotation'.Annotation $r3;
        java.lang.reflect.Method $r2;
        org.junit.experimental.theories.Theory r4;
        boolean $z0;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        $r1 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.FrameworkMethod fTestMethod>;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.FrameworkMethod: java.lang.reflect.Method getMethod()>();

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/theories/Theory;");

        r4 = (org.junit.experimental.theories.Theory) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke r4.<org.junit.experimental.theories.Theory: boolean nullsAccepted()>();

        return $z0;
    }

    protected void handleDataPointSuccess()
    {
        int $i0, $i1;
        org.junit.experimental.theories.Theories$TheoryAnchor r0;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor;

        $i0 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor: int successes>;

        $i1 = $i0 + 1;

        r0.<org.junit.experimental.theories.Theories$TheoryAnchor: int successes> = $i1;

        return;
    }

    static boolean access$000(org.junit.experimental.theories.Theories$TheoryAnchor)
    {
        org.junit.experimental.theories.Theories$TheoryAnchor r0;
        boolean $z0;

        r0 := @parameter0: org.junit.experimental.theories.Theories$TheoryAnchor;

        $z0 = specialinvoke r0.<org.junit.experimental.theories.Theories$TheoryAnchor: boolean nullsOk()>();

        return $z0;
    }

    static org.junit.runners.model.Statement access$100(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)
    {
        org.junit.runners.model.Statement $r4;
        org.junit.runners.model.FrameworkMethod r1;
        org.junit.experimental.theories.Theories$TheoryAnchor r0;
        org.junit.experimental.theories.internal.Assignments r2;
        java.lang.Object r3;

        r0 := @parameter0: org.junit.experimental.theories.Theories$TheoryAnchor;

        r1 := @parameter1: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter2: org.junit.experimental.theories.internal.Assignments;

        r3 := @parameter3: java.lang.Object;

        $r4 = specialinvoke r0.<org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.Statement methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod,org.junit.experimental.theories.internal.Assignments,java.lang.Object)>(r1, r2, r3);

        return $r4;
    }
}
