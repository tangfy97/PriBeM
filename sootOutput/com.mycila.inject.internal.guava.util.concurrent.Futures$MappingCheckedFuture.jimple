class com.mycila.inject.internal.guava.util.concurrent.Futures$MappingCheckedFuture extends com.mycila.inject.internal.guava.util.concurrent.AbstractCheckedFuture
{
    final com.mycila.inject.internal.guava.base.Function mapper;

    void <init>(com.mycila.inject.internal.guava.util.concurrent.ListenableFuture, com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture r1;
        com.mycila.inject.internal.guava.util.concurrent.Futures$MappingCheckedFuture r0;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.base.Function r2, $r4;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$MappingCheckedFuture;

        r1 := @parameter0: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture;

        r2 := @parameter1: com.mycila.inject.internal.guava.base.Function;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractCheckedFuture: void <init>(com.mycila.inject.internal.guava.util.concurrent.ListenableFuture)>(r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (com.mycila.inject.internal.guava.base.Function) $r3;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$MappingCheckedFuture: com.mycila.inject.internal.guava.base.Function mapper> = $r4;

        return;
    }

    protected java.lang.Exception mapException(java.lang.Exception)
    {
        com.mycila.inject.internal.guava.util.concurrent.Futures$MappingCheckedFuture r0;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.base.Function $r2;
        java.lang.Exception r1, $r4;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$MappingCheckedFuture;

        r1 := @parameter0: java.lang.Exception;

        $r2 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$MappingCheckedFuture: com.mycila.inject.internal.guava.base.Function mapper>;

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.base.Function: java.lang.Object apply(java.lang.Object)>(r1);

        $r4 = (java.lang.Exception) $r3;

        return $r4;
    }
}
