public class com.hp.hpl.jena.tdb.solver.StageMatchTuple extends org.apache.jena.atlas.iterator.RepeatApplyIterator
{
    private final com.hp.hpl.jena.tdb.nodetable.NodeTupleTable nodeTupleTable;
    private final org.apache.jena.atlas.lib.Tuple patternTuple;
    private final com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt;
    private boolean anyGraphs;
    private org.apache.jena.atlas.iterator.Filter filter;
    private static org.apache.jena.atlas.iterator.Transform projectToTriples;
    private static org.apache.jena.atlas.iterator.Action quadsToAnyTriples;

    public void <init>(com.hp.hpl.jena.tdb.nodetable.NodeTupleTable, java.util.Iterator, org.apache.jena.atlas.lib.Tuple, boolean, org.apache.jena.atlas.iterator.Filter, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable r3;
        java.util.Iterator r1;
        org.apache.jena.atlas.lib.Tuple r4;
        org.apache.jena.atlas.iterator.Filter r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r5;
        com.hp.hpl.jena.tdb.solver.StageMatchTuple r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.tdb.solver.StageMatchTuple;

        r3 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable;

        r1 := @parameter1: java.util.Iterator;

        r4 := @parameter2: org.apache.jena.atlas.lib.Tuple;

        z0 := @parameter3: boolean;

        r2 := @parameter4: org.apache.jena.atlas.iterator.Filter;

        r5 := @parameter5: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<org.apache.jena.atlas.iterator.RepeatApplyIterator: void <init>(java.util.Iterator)>(r1);

        r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: org.apache.jena.atlas.iterator.Filter filter> = r2;

        r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable nodeTupleTable> = r3;

        r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: org.apache.jena.atlas.lib.Tuple patternTuple> = r4;

        r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt> = r5;

        r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: boolean anyGraphs> = z0;

        return;
    }

    public static void prepare(com.hp.hpl.jena.tdb.nodetable.NodeTable, org.apache.jena.atlas.lib.Tuple, com.hp.hpl.jena.tdb.solver.BindingNodeId, com.hp.hpl.jena.tdb.store.NodeId[], com.hp.hpl.jena.sparql.core.Var[])
    {
        org.apache.jena.atlas.lib.Tuple r0;
        com.hp.hpl.jena.tdb.store.NodeId[] r6;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.tdb.solver.BindingNodeId r4;
        com.hp.hpl.jena.sparql.core.Var $r8;
        org.apache.jena.atlas.iterator.NullIterator $r9;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r3;
        com.hp.hpl.jena.tdb.store.NodeId $r5;
        int $i0, i1;
        java.lang.Object $r1;
        com.hp.hpl.jena.sparql.core.Var[] r7;
        boolean $z0;

        r3 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        r0 := @parameter1: org.apache.jena.atlas.lib.Tuple;

        r4 := @parameter2: com.hp.hpl.jena.tdb.solver.BindingNodeId;

        r6 := @parameter3: com.hp.hpl.jena.tdb.store.NodeId[];

        r7 := @parameter4: com.hp.hpl.jena.sparql.core.Var[];

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.jena.atlas.lib.Tuple: int size()>();

        if i1 >= $i0 goto label4;

        $r1 = virtualinvoke r0.<org.apache.jena.atlas.lib.Tuple: java.lang.Object get(int)>(i1);

        r2 = (com.hp.hpl.jena.graph.Node) $r1;

        $r5 = staticinvoke <com.hp.hpl.jena.tdb.solver.StageMatchTuple: com.hp.hpl.jena.tdb.store.NodeId idFor(com.hp.hpl.jena.tdb.nodetable.NodeTable,com.hp.hpl.jena.tdb.solver.BindingNodeId,com.hp.hpl.jena.graph.Node)>(r3, r4, r2);

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeId: boolean isDoesNotExist(com.hp.hpl.jena.tdb.store.NodeId)>($r5);

        if $z0 == 0 goto label2;

        $r9 = new org.apache.jena.atlas.iterator.NullIterator;

        specialinvoke $r9.<org.apache.jena.atlas.iterator.NullIterator: void <init>()>();

     label2:
        r6[i1] = $r5;

        if $r5 != null goto label3;

        $r8 = staticinvoke <com.hp.hpl.jena.tdb.solver.StageMatchTuple: com.hp.hpl.jena.sparql.core.Var asVar(com.hp.hpl.jena.graph.Node)>(r2);

        r7[i1] = $r8;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    protected java.util.Iterator makeNextStage(com.hp.hpl.jena.tdb.solver.BindingNodeId)
    {
        org.apache.jena.atlas.lib.Tuple $r1, $r3, $r8, $r10;
        com.hp.hpl.jena.tdb.store.NodeId[] r2;
        com.hp.hpl.jena.tdb.solver.StageMatchTuple r0;
        org.apache.jena.atlas.iterator.Action $r17;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r6;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.core.Var[] r4;
        org.apache.jena.atlas.iterator.Iter $r14, $r15, $r16;
        boolean $z0;
        com.hp.hpl.jena.tdb.solver.StageMatchTuple$1 $r13;
        java.util.Iterator $r11, $r18, r20;
        org.apache.jena.atlas.iterator.Filter $r12, $r19;
        com.hp.hpl.jena.tdb.solver.BindingNodeId r7;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r5, $r9;

        r0 := @this: com.hp.hpl.jena.tdb.solver.StageMatchTuple;

        r7 := @parameter0: com.hp.hpl.jena.tdb.solver.BindingNodeId;

        $r1 = r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: org.apache.jena.atlas.lib.Tuple patternTuple>;

        $i0 = virtualinvoke $r1.<org.apache.jena.atlas.lib.Tuple: int size()>();

        r2 = newarray (com.hp.hpl.jena.tdb.store.NodeId)[$i0];

        $r3 = r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: org.apache.jena.atlas.lib.Tuple patternTuple>;

        $i1 = virtualinvoke $r3.<org.apache.jena.atlas.lib.Tuple: int size()>();

        r4 = newarray (com.hp.hpl.jena.sparql.core.Var)[$i1];

        $r5 = r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable nodeTupleTable>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $r8 = r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: org.apache.jena.atlas.lib.Tuple patternTuple>;

        staticinvoke <com.hp.hpl.jena.tdb.solver.StageMatchTuple: void prepare(com.hp.hpl.jena.tdb.nodetable.NodeTable,org.apache.jena.atlas.lib.Tuple,com.hp.hpl.jena.tdb.solver.BindingNodeId,com.hp.hpl.jena.tdb.store.NodeId[],com.hp.hpl.jena.sparql.core.Var[])>($r6, $r8, r7, r2, r4);

        $r9 = r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable nodeTupleTable>;

        $r10 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>(r2);

        $r11 = interfaceinvoke $r9.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: java.util.Iterator find(org.apache.jena.atlas.lib.Tuple)>($r10);

        r20 = $r11;

        $r12 = r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: org.apache.jena.atlas.iterator.Filter filter>;

        if $r12 == null goto label1;

        $r19 = r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: org.apache.jena.atlas.iterator.Filter filter>;

        r20 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator filter(java.util.Iterator,org.apache.jena.atlas.iterator.Filter)>($r11, $r19);

     label1:
        $z0 = r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: boolean anyGraphs>;

        if $z0 == 0 goto label2;

        $r17 = <com.hp.hpl.jena.tdb.solver.StageMatchTuple: org.apache.jena.atlas.iterator.Action quadsToAnyTriples>;

        $r18 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator operate(java.util.Iterator,org.apache.jena.atlas.iterator.Action)>(r20, $r17);

        r20 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator distinctAdjacent(java.util.Iterator)>($r18);

     label2:
        $r13 = new com.hp.hpl.jena.tdb.solver.StageMatchTuple$1;

        specialinvoke $r13.<com.hp.hpl.jena.tdb.solver.StageMatchTuple$1: void <init>(com.hp.hpl.jena.tdb.solver.StageMatchTuple,com.hp.hpl.jena.tdb.solver.BindingNodeId,com.hp.hpl.jena.sparql.core.Var[])>(r0, r7, r4);

        $r14 = staticinvoke <org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter iter(java.util.Iterator)>(r20);

        $r15 = virtualinvoke $r14.<org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter map(org.apache.jena.atlas.iterator.Transform)>($r13);

        $r16 = virtualinvoke $r15.<org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter removeNulls()>();

        return $r16;
    }

    private static java.util.Iterator print(java.util.Iterator)
    {
        java.io.PrintStream $r2, $r3;
        java.util.List $r0;
        java.util.Iterator r4;
        java.lang.String $r1;
        boolean $z0;

        r4 := @parameter0: java.util.Iterator;

        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("<empty>");

        goto label2;

     label1:
        $r0 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List toList(java.util.Iterator)>(r4);

        $r1 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.lang.String asString(java.lang.Iterable,java.lang.String)>($r0, "\n");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r1);

        r4 = staticinvoke <org.apache.jena.atlas.iterator.Iter: org.apache.jena.atlas.iterator.Iter iter(java.util.Collection)>($r0);

     label2:
        return r4;
    }

    private static boolean reject(com.hp.hpl.jena.tdb.solver.BindingNodeId, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.tdb.store.NodeId)
    {
        com.hp.hpl.jena.tdb.store.NodeId r3, $r4;
        java.lang.Object $r2;
        com.hp.hpl.jena.tdb.solver.BindingNodeId r0;
        com.hp.hpl.jena.sparql.core.Var r1;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.solver.BindingNodeId;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        r3 := @parameter2: com.hp.hpl.jena.tdb.store.NodeId;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.solver.BindingNodeId: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.solver.BindingNodeId: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.hp.hpl.jena.tdb.store.NodeId) $r2;

        $z1 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.store.NodeId: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private static com.hp.hpl.jena.sparql.core.Var asVar(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.Var $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

        return $r1;

     label1:
        return null;
    }

    private static com.hp.hpl.jena.tdb.store.NodeId idFor(com.hp.hpl.jena.tdb.nodetable.NodeTable, com.hp.hpl.jena.tdb.solver.BindingNodeId, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.tdb.solver.BindingNodeId r3;
        com.hp.hpl.jena.sparql.core.Var $r4;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r1;
        com.hp.hpl.jena.tdb.store.NodeId $r2, r6;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        r3 := @parameter1: com.hp.hpl.jena.tdb.solver.BindingNodeId;

        r0 := @parameter2: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.tdb.solver.BindingNodeId: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (com.hp.hpl.jena.tdb.store.NodeId) $r5;

        return r6;

     label1:
        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.tdb.nodetable.NodeTable: com.hp.hpl.jena.tdb.store.NodeId getNodeIdForNode(com.hp.hpl.jena.graph.Node)>(r0);

        return $r2;
    }

    protected volatile java.util.Iterator makeNextStage(java.lang.Object)
    {
        java.util.Iterator $r3;
        java.lang.Object r1;
        com.hp.hpl.jena.tdb.solver.BindingNodeId $r2;
        com.hp.hpl.jena.tdb.solver.StageMatchTuple r0;

        r0 := @this: com.hp.hpl.jena.tdb.solver.StageMatchTuple;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.tdb.solver.BindingNodeId) r1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple: java.util.Iterator makeNextStage(com.hp.hpl.jena.tdb.solver.BindingNodeId)>($r2);

        return $r3;
    }

    static boolean access$000(com.hp.hpl.jena.tdb.solver.BindingNodeId, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.tdb.store.NodeId)
    {
        com.hp.hpl.jena.tdb.store.NodeId r2;
        com.hp.hpl.jena.tdb.solver.BindingNodeId r0;
        com.hp.hpl.jena.sparql.core.Var r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.solver.BindingNodeId;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        r2 := @parameter2: com.hp.hpl.jena.tdb.store.NodeId;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.solver.StageMatchTuple: boolean reject(com.hp.hpl.jena.tdb.solver.BindingNodeId,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.tdb.store.NodeId)>(r0, r1, r2);

        return $z0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.tdb.solver.StageMatchTuple$2 $r0;
        com.hp.hpl.jena.tdb.solver.StageMatchTuple$3 $r1;

        $r0 = new com.hp.hpl.jena.tdb.solver.StageMatchTuple$2;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.solver.StageMatchTuple$2: void <init>()>();

        <com.hp.hpl.jena.tdb.solver.StageMatchTuple: org.apache.jena.atlas.iterator.Transform projectToTriples> = $r0;

        $r1 = new com.hp.hpl.jena.tdb.solver.StageMatchTuple$3;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.solver.StageMatchTuple$3: void <init>()>();

        <com.hp.hpl.jena.tdb.solver.StageMatchTuple: org.apache.jena.atlas.iterator.Action quadsToAnyTriples> = $r1;

        return;
    }
}
