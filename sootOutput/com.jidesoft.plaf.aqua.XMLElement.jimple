class com.jidesoft.plaf.aqua.XMLElement extends java.lang.Object
{
    static final long serialVersionUID;
    public static final int NANOXML_MAJOR_VERSION;
    public static final int NANOXML_MINOR_VERSION;
    private java.util.HashMap attributes;
    private java.util.ArrayList children;
    private java.lang.String name;
    private java.lang.String contents;
    private java.util.HashMap entities;
    private int lineNr;
    private boolean ignoreCase;
    private boolean ignoreWhitespace;
    private char charReadTooMuch;
    private java.io.Reader reader;
    private int parserLineNr;

    public void <init>()
    {
        java.util.HashMap $r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void <init>(java.util.HashMap,boolean,boolean,boolean)>($r1, 0, 1, 1);

        return;
    }

    public void <init>(java.util.HashMap)
    {
        java.util.HashMap r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.util.HashMap;

        specialinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void <init>(java.util.HashMap,boolean,boolean,boolean)>(r1, 0, 1, 1);

        return;
    }

    public void <init>(boolean)
    {
        java.util.HashMap $r1;
        com.jidesoft.plaf.aqua.XMLElement r0;
        boolean z0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        z0 := @parameter0: boolean;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void <init>(java.util.HashMap,boolean,boolean,boolean)>($r1, z0, 1, 1);

        return;
    }

    public void <init>(java.util.HashMap, boolean)
    {
        java.util.HashMap r1;
        com.jidesoft.plaf.aqua.XMLElement r0;
        boolean z0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.util.HashMap;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void <init>(java.util.HashMap,boolean,boolean,boolean)>(r1, z0, 1, 1);

        return;
    }

    public void <init>(java.util.HashMap, boolean, boolean)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.HashMap r1;
        boolean z0, z1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.util.HashMap;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void <init>(java.util.HashMap,boolean,boolean,boolean)>(r1, z0, 1, z1);

        return;
    }

    protected void <init>(java.util.HashMap, boolean, boolean, boolean)
    {
        java.util.HashMap $r1, r3, $r4, $r8, $r10, $r12, $r14, $r16, $r18, $r22;
        java.util.ArrayList $r2;
        java.lang.String $r20;
        boolean z0, z1, $z2, z3, $z4;
        java.util.Iterator $r6;
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.Set $r5;
        char[] $r7, $r9, $r11, $r13, $r15, $r21;
        java.lang.Object $r17, $r19;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r3 := @parameter0: java.util.HashMap;

        z0 := @parameter1: boolean;

        z3 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreWhitespace> = z0;

        r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase> = z1;

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String name> = null;

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String contents> = "";

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.ArrayList children> = $r2;

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities> = r3;

        r0.<com.jidesoft.plaf.aqua.XMLElement: int lineNr> = 0;

        $r4 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r17 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r18 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities>;

        $r19 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        $z4 = $r19 instanceof java.lang.String;

        if $z4 == 0 goto label2;

        $r20 = (java.lang.String) $r19;

        $r21 = virtualinvoke $r20.<java.lang.String: char[] toCharArray()>();

        $r22 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities>;

        virtualinvoke $r22.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r21);

     label2:
        goto label1;

     label3:
        if z3 == 0 goto label4;

        $r8 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities>;

        $r7 = newarray (char)[1];

        $r7[0] = 38;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("amp", $r7);

        $r10 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities>;

        $r9 = newarray (char)[1];

        $r9[0] = 34;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("quot", $r9);

        $r12 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities>;

        $r11 = newarray (char)[1];

        $r11[0] = 39;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("apos", $r11);

        $r14 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities>;

        $r13 = newarray (char)[1];

        $r13[0] = 60;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("lt", $r13);

        $r16 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities>;

        $r15 = newarray (char)[1];

        $r15[0] = 62;

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("gt", $r15);

     label4:
        return;
    }

    public void addChild(com.jidesoft.plaf.aqua.XMLElement)
    {
        com.jidesoft.plaf.aqua.XMLElement r0, r1;
        java.util.ArrayList $r2;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: com.jidesoft.plaf.aqua.XMLElement;

        $r2 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.ArrayList children>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.Object r1;
        java.util.HashMap $r2;
        java.lang.String $r3, r4;
        boolean $z0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r2 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r3);

        return;
    }

    public void addProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void setAttribute(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    public void setIntAttribute(java.lang.String, int)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        int i0;
        java.util.HashMap $r1;
        java.lang.String $r2, r3;
        boolean $z0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r2);

        return;
    }

    public void addProperty(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void setIntAttribute(java.lang.String,int)>(r1, i0);

        return;
    }

    public void setDoubleAttribute(java.lang.String, double)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.HashMap $r1;
        java.lang.String $r2, r3;
        boolean $z0;
        double d0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r3 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r2 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r2);

        return;
    }

    public void addProperty(java.lang.String, double)
    {
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;
        double d0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void setDoubleAttribute(java.lang.String,double)>(r1, d0);

        return;
    }

    public int countChildren()
    {
        int $i0;
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.ArrayList $r1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.ArrayList children>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public java.util.Iterator enumerateAttributeNames()
    {
        java.util.Iterator $r3;
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.Set $r2;
        java.util.HashMap $r1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.util.Iterator enumeratePropertyNames()
    {
        java.util.Iterator $r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.Iterator enumerateAttributeNames()>();

        return $r1;
    }

    public java.util.Iterator iterateChildren()
    {
        java.util.Iterator $r2;
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.ArrayList $r1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.ArrayList children>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.util.ArrayList getChildren()
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.Object $r2;
        java.lang.Exception $r4;
        java.util.ArrayList $r1, $r3;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.ArrayList children>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object clone()>();

        $r3 = (java.util.ArrayList) $r2;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getContents()
    {
        java.lang.String $r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getContent()>();

        return $r1;
    }

    public java.lang.String getContent()
    {
        java.lang.String $r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String contents>;

        return $r1;
    }

    public int getLineNr()
    {
        int $i0;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $i0 = r0.<com.jidesoft.plaf.aqua.XMLElement: int lineNr>;

        return $i0;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.Object getAttribute(java.lang.String,java.lang.Object)>(r1, null);

        return $r2;
    }

    public java.lang.Object getAttribute(java.lang.String, java.lang.Object)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.HashMap $r1;
        java.lang.Object $r2, r3, r5;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r4 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = $r2;

        if $r2 != null goto label2;

        r5 = r3;

     label2:
        return r5;
    }

    public java.lang.Object getAttribute(java.lang.String, java.util.HashMap, java.lang.String, boolean)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        com.jidesoft.plaf.aqua.XMLParseException $r6;
        java.util.HashMap $r1, r3;
        java.lang.Object $r2, $r4, r9, r10;
        java.lang.String $r5, r7, r8;
        boolean $z0, z1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r8 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.HashMap;

        r7 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r8 = virtualinvoke r8.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r9 = $r2;

        if $r2 != null goto label2;

        r9 = r7;

     label2:
        $r4 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9);

        r10 = $r4;

        if $r4 != null goto label4;

        if z1 == 0 goto label3;

        r10 = r9;

        goto label4;

     label3:
        $r5 = (java.lang.String) r9;

        $r6 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException invalidValue(java.lang.String,java.lang.String)>(r8, $r5);

        throw $r6;

     label4:
        return r10;
    }

    public java.lang.String getStringAttribute(java.lang.String)
    {
        java.lang.String r1, $r2;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getStringAttribute(java.lang.String,java.lang.String)>(r1, null);

        return $r2;
    }

    public java.lang.String getStringAttribute(java.lang.String, java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.Object $r3;
        java.lang.String r1, r2, $r4;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.Object getAttribute(java.lang.String,java.lang.Object)>(r1, r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String getStringAttribute(java.lang.String, java.util.HashMap, java.lang.String, boolean)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.HashMap r2;
        java.lang.Object $r4;
        java.lang.String r1, r3, $r5;
        boolean z0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.HashMap;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r4 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.Object getAttribute(java.lang.String,java.util.HashMap,java.lang.String,boolean)>(r1, r2, r3, z0);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public int getIntAttribute(java.lang.String)
    {
        int $i0;
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: int getIntAttribute(java.lang.String,int)>(r1, 0);

        return $i0;
    }

    public int getIntAttribute(java.lang.String, int)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        com.jidesoft.plaf.aqua.XMLParseException $r5;
        java.util.HashMap $r1;
        java.lang.NumberFormatException $r4;
        int $i0, i1;
        java.lang.Object $r2;
        java.lang.String $r3, r6;
        boolean $z0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r6 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        $r3 = (java.lang.String) $r2;

        if $r3 != null goto label2;

        return i1;

     label2:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label3:
        return $i0;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException invalidValue(java.lang.String,java.lang.String)>(r6, $r3);

        throw $r5;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public int getIntAttribute(java.lang.String, java.util.HashMap, java.lang.String, boolean)
    {
        com.jidesoft.plaf.aqua.XMLParseException $r7, $r12, $r14;
        java.util.HashMap $r1, r3;
        java.lang.Integer $r9, r17;
        java.lang.ClassCastException $r13;
        int $i0;
        java.lang.String $r5, $r6, r8, $r11, r15;
        boolean $z0, z1;
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.NumberFormatException $r10;
        java.lang.Object $r2, $r4, r16;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r15 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.HashMap;

        r8 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r15 = virtualinvoke r15.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r15);

        r16 = $r2;

        if $r2 != null goto label2;

        r16 = r8;

     label2:
        $r4 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r16);

        $r9 = (java.lang.Integer) $r4;

        r17 = $r9;

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException invalidValueSet(java.lang.String)>(r15);

        throw $r14;

     label5:
        if $r9 != null goto label9;

        if z1 != 0 goto label6;

        $r6 = (java.lang.String) r16;

        $r7 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException invalidValue(java.lang.String,java.lang.String)>(r15, $r6);

        throw $r7;

     label6:
        $r5 = (java.lang.String) r16;

        r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r5);

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        $r11 = (java.lang.String) r16;

        $r12 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException invalidValue(java.lang.String,java.lang.String)>(r15, $r11);

        throw $r12;

     label9:
        $i0 = virtualinvoke r17.<java.lang.Integer: int intValue()>();

        return $i0;

        catch java.lang.ClassCastException from label2 to label3 with label4;
        catch java.lang.NumberFormatException from label6 to label7 with label8;
    }

    public double getDoubleAttribute(java.lang.String)
    {
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;
        double $d0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        $d0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: double getDoubleAttribute(java.lang.String,double)>(r1, 0.0);

        return $d0;
    }

    public double getDoubleAttribute(java.lang.String, double)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.Double $r3;
        com.jidesoft.plaf.aqua.XMLParseException $r6;
        java.util.HashMap $r1;
        java.lang.NumberFormatException $r5;
        java.lang.Object $r2;
        java.lang.String $r4, r7;
        boolean $z0;
        double $d0, d1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r7 := @parameter0: java.lang.String;

        d1 := @parameter1: double;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        $r4 = (java.lang.String) $r2;

        if $r4 != null goto label2;

        return d1;

     label2:
        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r4);

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

     label3:
        return $d0;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException invalidValue(java.lang.String,java.lang.String)>(r7, $r4);

        throw $r6;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public double getDoubleAttribute(java.lang.String, java.util.HashMap, java.lang.String, boolean)
    {
        java.lang.Double $r9, r17;
        com.jidesoft.plaf.aqua.XMLParseException $r7, $r12, $r14;
        java.util.HashMap $r1, r3;
        java.lang.ClassCastException $r13;
        java.lang.String $r5, $r6, r8, $r11, r15;
        boolean $z0, z1;
        double $d0;
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.NumberFormatException $r10;
        java.lang.Object $r2, $r4, r16;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r15 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.HashMap;

        r8 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r15 = virtualinvoke r15.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r15);

        r16 = $r2;

        if $r2 != null goto label2;

        r16 = r8;

     label2:
        $r4 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r16);

        $r9 = (java.lang.Double) $r4;

        r17 = $r9;

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException invalidValueSet(java.lang.String)>(r15);

        throw $r14;

     label5:
        if $r9 != null goto label9;

        if z1 != 0 goto label6;

        $r6 = (java.lang.String) r16;

        $r7 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException invalidValue(java.lang.String,java.lang.String)>(r15, $r6);

        throw $r7;

     label6:
        $r5 = (java.lang.String) r16;

        r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r5);

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        $r11 = (java.lang.String) r16;

        $r12 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException invalidValue(java.lang.String,java.lang.String)>(r15, $r11);

        throw $r12;

     label9:
        $d0 = virtualinvoke r17.<java.lang.Double: double doubleValue()>();

        return $d0;

        catch java.lang.ClassCastException from label2 to label3 with label4;
        catch java.lang.NumberFormatException from label6 to label7 with label8;
    }

    public boolean getBooleanAttribute(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        com.jidesoft.plaf.aqua.XMLParseException $r6;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.lang.String r3, r4, $r5, r7;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r7 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        z3 := @parameter3: boolean;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        if $r2 != null goto label2;

        return z3;

     label2:
        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $z2 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label4;

        return 0;

     label4:
        $r5 = (java.lang.String) $r2;

        $r6 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException invalidValue(java.lang.String,java.lang.String)>(r7, $r5);

        throw $r6;
    }

    public int getIntProperty(java.lang.String, java.util.HashMap, java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        int $i0;
        java.util.HashMap r2;
        java.lang.String r1, r3;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.HashMap;

        r3 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: int getIntAttribute(java.lang.String,java.util.HashMap,java.lang.String,boolean)>(r1, r2, r3, 0);

        return $i0;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        java.lang.String r1, $r2;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getStringAttribute(java.lang.String)>(r1);

        return $r2;
    }

    public java.lang.String getProperty(java.lang.String, java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.String r1, r2, $r3;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getStringAttribute(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public int getProperty(java.lang.String, int)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        int i0, $i1;
        java.lang.String r1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: int getIntAttribute(java.lang.String,int)>(r1, i0);

        return $i1;
    }

    public double getProperty(java.lang.String, double)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.String r1;
        double d0, $d1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $d1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: double getDoubleAttribute(java.lang.String,double)>(r1, d0);

        return $d1;
    }

    public boolean getProperty(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.String r1, r2, r3;
        boolean z0, $z1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $z1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: boolean getBooleanAttribute(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, z0);

        return $z1;
    }

    public java.lang.Object getProperty(java.lang.String, java.util.HashMap, java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.HashMap r2;
        java.lang.Object $r4;
        java.lang.String r1, r3;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.HashMap;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.Object getAttribute(java.lang.String,java.util.HashMap,java.lang.String,boolean)>(r1, r2, r3, 0);

        return $r4;
    }

    public java.lang.String getStringProperty(java.lang.String, java.util.HashMap, java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.HashMap r2;
        java.lang.String r1, r3, $r4;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.HashMap;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getStringAttribute(java.lang.String,java.util.HashMap,java.lang.String,boolean)>(r1, r2, r3, 0);

        return $r4;
    }

    public int getSpecialIntProperty(java.lang.String, java.util.HashMap, java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        int $i0;
        java.util.HashMap r2;
        java.lang.String r1, r3;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.HashMap;

        r3 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: int getIntAttribute(java.lang.String,java.util.HashMap,java.lang.String,boolean)>(r1, r2, r3, 1);

        return $i0;
    }

    public double getSpecialDoubleProperty(java.lang.String, java.util.HashMap, java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.HashMap r2;
        java.lang.String r1, r3;
        double $d0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.HashMap;

        r3 := @parameter2: java.lang.String;

        $d0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: double getDoubleAttribute(java.lang.String,java.util.HashMap,java.lang.String,boolean)>(r1, r2, r3, 1);

        return $d0;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String name>;

        return $r1;
    }

    public java.lang.String getTagName()
    {
        java.lang.String $r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getName()>();

        return $r1;
    }

    public void parseFromReader(java.io.Reader) throws java.io.IOException, com.jidesoft.plaf.aqua.XMLParseException
    {
        java.io.Reader r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.io.Reader;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void parseFromReader(java.io.Reader,int)>(r1, 1);

        return;
    }

    public void parseFromReader(java.io.Reader, int) throws java.io.IOException, com.jidesoft.plaf.aqua.XMLParseException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        com.jidesoft.plaf.aqua.XMLParseException $r4;
        char $c1, $c2;
        java.util.HashMap $r5;
        java.io.Reader r3;
        java.util.ArrayList $r6;
        int i0, $i3, $i4, $i5;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r3 := @parameter0: java.io.Reader;

        i0 := @parameter1: int;

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String name> = null;

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String contents> = "";

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.ArrayList children> = $r6;

        r0.<com.jidesoft.plaf.aqua.XMLElement: char charReadTooMuch> = 0;

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.io.Reader reader> = r3;

        r0.<com.jidesoft.plaf.aqua.XMLElement: int parserLineNr> = i0;

     label1:
        $c1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char scanWhitespace()>();

        $i3 = (int) $c1;

        if $i3 == 60 goto label2;

        $r4 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>("<");

        throw $r4;

     label2:
        $c2 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i4 = (int) $c2;

        if $i4 == 33 goto label3;

        $i5 = (int) $c2;

        if $i5 != 63 goto label4;

     label3:
        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void skipSpecialTag(int)>(0);

        goto label5;

     label4:
        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>($c2);

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void scanElement(com.jidesoft.plaf.aqua.XMLElement)>(r0);

        return;

     label5:
        goto label1;
    }

    public void parseString(java.lang.String) throws com.jidesoft.plaf.aqua.XMLParseException
    {
        java.io.StringReader $r1;
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.io.IOException $r3;
        java.lang.String r2;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r2 := @parameter0: java.lang.String;

     label1:
        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>(r2);

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void parseFromReader(java.io.Reader,int)>($r1, 1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void parseString(java.lang.String, int) throws com.jidesoft.plaf.aqua.XMLParseException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        int i0;
        java.lang.String r1, $r2;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0);

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void parseString(java.lang.String)>($r2);

        return;
    }

    public void parseString(java.lang.String, int, int) throws com.jidesoft.plaf.aqua.XMLParseException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        int i0, i1;
        java.lang.String r1, $r2;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void parseString(java.lang.String)>($r2);

        return;
    }

    public void parseString(java.lang.String, int, int, int) throws com.jidesoft.plaf.aqua.XMLParseException
    {
        com.jidesoft.plaf.aqua.XMLElement r1;
        java.io.IOException $r3;
        java.io.StringReader $r2;
        int i0, i1, i2;
        java.lang.String $r0, r4;

        r1 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r0 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

     label1:
        $r2 = new java.io.StringReader;

        specialinvoke $r2.<java.io.StringReader: void <init>(java.lang.String)>($r0);

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void parseFromReader(java.io.Reader,int)>($r2, i2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void parseCharArray(char[], int, int) throws com.jidesoft.plaf.aqua.XMLParseException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        int i0, i1;
        char[] r1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void parseCharArray(char[],int,int,int)>(r1, i0, i1, 1);

        return;
    }

    public void parseCharArray(char[], int, int, int) throws com.jidesoft.plaf.aqua.XMLParseException
    {
        java.io.CharArrayReader $r0;
        com.jidesoft.plaf.aqua.XMLElement r2;
        int i0, i1, i2;
        char[] r1;
        java.io.IOException $r3;

        r2 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label1:
        $r0 = new java.io.CharArrayReader;

        specialinvoke $r0.<java.io.CharArrayReader: void <init>(char[],int,int)>(r1, i0, i1);

        virtualinvoke r2.<com.jidesoft.plaf.aqua.XMLElement: void parseFromReader(java.io.Reader,int)>($r0, i2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void removeChild(com.jidesoft.plaf.aqua.XMLElement)
    {
        com.jidesoft.plaf.aqua.XMLElement r0, r1;
        java.util.ArrayList $r2;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: com.jidesoft.plaf.aqua.XMLElement;

        $r2 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.ArrayList children>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void removeAttribute(java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.util.HashMap $r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase()>();

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        return;
    }

    public void removeProperty(java.lang.String)
    {
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void removeAttribute(java.lang.String)>(r1);

        return;
    }

    public void removeChild(java.lang.String)
    {
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void removeAttribute(java.lang.String)>(r1);

        return;
    }

    public com.jidesoft.plaf.aqua.XMLElement createAnotherElement()
    {
        com.jidesoft.plaf.aqua.XMLElement $r0, r1;
        java.util.HashMap $r2;
        boolean $z0, $z1;

        r1 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r0 = new com.jidesoft.plaf.aqua.XMLElement;

        $r2 = r1.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities>;

        $z1 = r1.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreWhitespace>;

        $z0 = r1.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreCase>;

        specialinvoke $r0.<com.jidesoft.plaf.aqua.XMLElement: void <init>(java.util.HashMap,boolean,boolean,boolean)>($r2, $z1, 0, $z0);

        return $r0;
    }

    public void setContent(java.lang.String)
    {
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String contents> = r1;

        return;
    }

    public void setTagName(java.lang.String)
    {
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>(r1);

        return;
    }

    public void setName(java.lang.String)
    {
        java.lang.String r1;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.String;

        r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String name> = r1;

        return;
    }

    public java.lang.String toString()
    {
        byte[] $r4;
        java.io.ByteArrayOutputStream $r0;
        com.jidesoft.plaf.aqua.XMLElement r2;
        java.io.OutputStreamWriter $r1;
        java.io.IOException $r5;
        java.lang.String $r3, $r6;

        r2 := @this: com.jidesoft.plaf.aqua.XMLElement;

     label1:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r0);

        virtualinvoke r2.<com.jidesoft.plaf.aqua.XMLElement: void write(java.io.Writer)>($r1);

        virtualinvoke $r1.<java.io.OutputStreamWriter: void flush()>();

        $r3 = new java.lang.String;

        $r4 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>($r4);

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        $r6 = specialinvoke r2.<java.lang.Object: java.lang.String toString()>();

        return $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void write(java.io.Writer) throws java.io.IOException
    {
        java.util.HashMap $r4, $r13, $r17;
        java.util.ArrayList $r6;
        int $i0;
        java.lang.String $r1, $r3, $r5, $r8, $r10, $r11, $r12, r19, $r20, r21;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r7, $r15;
        com.jidesoft.plaf.aqua.XMLElement r0, r22;
        java.util.Set $r14;
        java.io.Writer r2;
        java.lang.Object $r9, $r16, $r18;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r2 := @parameter0: java.io.Writer;

        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String name>;

        if $r1 != null goto label1;

        $r20 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String contents>;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void writeEncoded(java.io.Writer,java.lang.String)>(r2, $r20);

        return;

     label1:
        virtualinvoke r2.<java.io.Writer: void write(int)>(60);

        $r3 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String name>;

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r3);

        $r4 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r13 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r14 = virtualinvoke $r13.<java.util.HashMap: java.util.Set keySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        virtualinvoke r2.<java.io.Writer: void write(int)>(32);

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r16;

        $r17 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap attributes>;

        $r18 = virtualinvoke $r17.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r21);

        r19 = (java.lang.String) $r18;

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>(r21);

        virtualinvoke r2.<java.io.Writer: void write(int)>(61);

        virtualinvoke r2.<java.io.Writer: void write(int)>(34);

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void writeEncoded(java.io.Writer,java.lang.String)>(r2, r19);

        virtualinvoke r2.<java.io.Writer: void write(int)>(34);

        goto label2;

     label3:
        $r5 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String contents>;

        if $r5 == null goto label4;

        $r10 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String contents>;

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        virtualinvoke r2.<java.io.Writer: void write(int)>(62);

        $r11 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String contents>;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void writeEncoded(java.io.Writer,java.lang.String)>(r2, $r11);

        virtualinvoke r2.<java.io.Writer: void write(int)>(60);

        virtualinvoke r2.<java.io.Writer: void write(int)>(47);

        $r12 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String name>;

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r12);

        virtualinvoke r2.<java.io.Writer: void write(int)>(62);

        goto label8;

     label4:
        $r6 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.ArrayList children>;

        $z1 = virtualinvoke $r6.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        virtualinvoke r2.<java.io.Writer: void write(int)>(47);

        virtualinvoke r2.<java.io.Writer: void write(int)>(62);

        goto label8;

     label5:
        virtualinvoke r2.<java.io.Writer: void write(int)>(62);

        $r7 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: java.util.Iterator iterateChildren()>();

     label6:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r22 = (com.jidesoft.plaf.aqua.XMLElement) $r9;

        virtualinvoke r22.<com.jidesoft.plaf.aqua.XMLElement: void write(java.io.Writer)>(r2);

        goto label6;

     label7:
        virtualinvoke r2.<java.io.Writer: void write(int)>(60);

        virtualinvoke r2.<java.io.Writer: void write(int)>(47);

        $r8 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String name>;

        virtualinvoke r2.<java.io.Writer: void write(java.lang.String)>($r8);

        virtualinvoke r2.<java.io.Writer: void write(int)>(62);

     label8:
        return;
    }

    protected void writeEncoded(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLElement r3;
        char $c1;
        int $i0, i2, $i3, $i4, $i5, $i6, $i7;
        java.io.Writer r1;
        java.lang.String r0, $r2;

        r3 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.io.Writer;

        r0 := @parameter1: java.lang.String;

        i2 = 0;

     label01:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label11;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        lookupswitch($i3)
        {
            case 34: goto label05;
            case 38: goto label04;
            case 39: goto label06;
            case 60: goto label02;
            case 62: goto label03;
            default: goto label07;
        };

     label02:
        virtualinvoke r1.<java.io.Writer: void write(int)>(38);

        virtualinvoke r1.<java.io.Writer: void write(int)>(108);

        virtualinvoke r1.<java.io.Writer: void write(int)>(116);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        goto label10;

     label03:
        virtualinvoke r1.<java.io.Writer: void write(int)>(38);

        virtualinvoke r1.<java.io.Writer: void write(int)>(103);

        virtualinvoke r1.<java.io.Writer: void write(int)>(116);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        goto label10;

     label04:
        virtualinvoke r1.<java.io.Writer: void write(int)>(38);

        virtualinvoke r1.<java.io.Writer: void write(int)>(97);

        virtualinvoke r1.<java.io.Writer: void write(int)>(109);

        virtualinvoke r1.<java.io.Writer: void write(int)>(112);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        goto label10;

     label05:
        virtualinvoke r1.<java.io.Writer: void write(int)>(38);

        virtualinvoke r1.<java.io.Writer: void write(int)>(113);

        virtualinvoke r1.<java.io.Writer: void write(int)>(117);

        virtualinvoke r1.<java.io.Writer: void write(int)>(111);

        virtualinvoke r1.<java.io.Writer: void write(int)>(116);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        goto label10;

     label06:
        virtualinvoke r1.<java.io.Writer: void write(int)>(38);

        virtualinvoke r1.<java.io.Writer: void write(int)>(97);

        virtualinvoke r1.<java.io.Writer: void write(int)>(112);

        virtualinvoke r1.<java.io.Writer: void write(int)>(111);

        virtualinvoke r1.<java.io.Writer: void write(int)>(115);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        goto label10;

     label07:
        $i4 = (int) $c1;

        if $i4 < 32 goto label08;

        $i5 = (int) $c1;

        if $i5 <= 126 goto label09;

     label08:
        virtualinvoke r1.<java.io.Writer: void write(int)>(38);

        virtualinvoke r1.<java.io.Writer: void write(int)>(35);

        virtualinvoke r1.<java.io.Writer: void write(int)>(120);

        $i6 = (int) $c1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i6, 16);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke r1.<java.io.Writer: void write(int)>(59);

        goto label10;

     label09:
        $i7 = (int) $c1;

        virtualinvoke r1.<java.io.Writer: void write(int)>($i7);

     label10:
        i2 = i2 + 1;

        goto label01;

     label11:
        return;
    }

    protected void scanIdentifier(java.lang.StringBuffer) throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        char $c0;
        java.lang.StringBuffer r1;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.StringBuffer;

     label1:
        $c0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i1 = (int) $c0;

        if $i1 < 65 goto label2;

        $i2 = (int) $c0;

        if $i2 <= 90 goto label5;

     label2:
        $i3 = (int) $c0;

        if $i3 < 97 goto label3;

        $i4 = (int) $c0;

        if $i4 <= 122 goto label5;

     label3:
        $i5 = (int) $c0;

        if $i5 < 48 goto label4;

        $i6 = (int) $c0;

        if $i6 <= 57 goto label5;

     label4:
        $i7 = (int) $c0;

        if $i7 == 95 goto label5;

        $i8 = (int) $c0;

        if $i8 == 46 goto label5;

        $i9 = (int) $c0;

        if $i9 == 58 goto label5;

        $i10 = (int) $c0;

        if $i10 == 45 goto label5;

        $i11 = (int) $c0;

        if $i11 > 126 goto label5;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>($c0);

        return;

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label1;
    }

    protected char scanWhitespace() throws java.io.IOException
    {
        int $i1;
        char $c0;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

     label1:
        $c0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 9: goto label2;
            case 10: goto label2;
            case 13: goto label2;
            case 32: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        return $c0;

     label4:
        goto label1;
    }

    protected char scanWhitespace(java.lang.StringBuffer) throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.StringBuffer r1;
        int $i1;
        char $c0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.StringBuffer;

     label1:
        $c0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 9: goto label2;
            case 10: goto label2;
            case 13: goto label3;
            case 32: goto label2;
            default: goto label4;
        };

     label2:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

     label3:
        goto label5;

     label4:
        return $c0;

     label5:
        goto label1;
    }

    protected void scanString(java.lang.StringBuffer) throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        com.jidesoft.plaf.aqua.XMLParseException $r2;
        char $c0, $c1;
        java.lang.StringBuffer r1;
        int $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.StringBuffer;

        $c0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i2 = (int) $c0;

        if $i2 == 39 goto label1;

        $i3 = (int) $c0;

        if $i3 == 34 goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>("\' or \"");

        throw $r2;

     label1:
        $c1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i4 = (int) $c1;

        $i5 = (int) $c0;

        if $i4 != $i5 goto label2;

        return;

     label2:
        $i6 = (int) $c1;

        if $i6 != 38 goto label3;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void resolveEntity(java.lang.StringBuffer)>(r1);

        goto label4;

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label4:
        goto label1;
    }

    protected void scanPCData(java.lang.StringBuffer) throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        java.lang.StringBuffer r1;
        int $i2, $i3, $i4;
        char $c0, $c1;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.StringBuffer;

     label1:
        $c0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i2 = (int) $c0;

        if $i2 != 60 goto label3;

        $c1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i3 = (int) $c1;

        if $i3 != 33 goto label2;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: boolean checkCDATA(java.lang.StringBuffer)>(r1);

        goto label5;

     label2:
        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>($c1);

        return;

     label3:
        $i4 = (int) $c0;

        if $i4 != 38 goto label4;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void resolveEntity(java.lang.StringBuffer)>(r1);

        goto label5;

     label4:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

     label5:
        goto label1;
    }

    protected boolean checkCDATA(java.lang.StringBuffer) throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        char $c0, $c1;
        java.lang.StringBuffer r1;
        int i2, i3, i4, $i5, $i6;
        boolean $z0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r1 := @parameter0: java.lang.StringBuffer;

        $c0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i5 = (int) $c0;

        if $i5 == 91 goto label01;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>($c0);

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void skipSpecialTag(int)>(0);

        return 0;

     label01:
        $z0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: boolean checkLiteral(java.lang.String)>("CDATA[");

        if $z0 != 0 goto label02;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void skipSpecialTag(int)>(1);

        return 0;

     label02:
        i2 = 0;

     label03:
        if i2 >= 3 goto label13;

        $c1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i6 = (int) $c1;

        lookupswitch($i6)
        {
            case 62: goto label06;
            case 93: goto label04;
            default: goto label10;
        };

     label04:
        if i2 >= 2 goto label05;

        i2 = i2 + 1;

        goto label03;

     label05:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        i2 = 0;

        goto label03;

     label06:
        if i2 >= 2 goto label09;

        i3 = 0;

     label07:
        if i3 >= i2 goto label08;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        i3 = i3 + 1;

        goto label07;

     label08:
        i2 = 0;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        goto label03;

     label09:
        i2 = 3;

        goto label03;

     label10:
        i4 = 0;

     label11:
        if i4 >= i2 goto label12;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        i4 = i4 + 1;

        goto label11;

     label12:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        i2 = 0;

        goto label03;

     label13:
        return 1;
    }

    protected void skipComment() throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        com.jidesoft.plaf.aqua.XMLParseException $r1;
        char $c0, $c1;
        int i2, $i3, $i5, $i6;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        i2 = 2;

     label1:
        if i2 <= 0 goto label4;

        $c1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i3 = (int) $c1;

        if $i3 != 45 goto label2;

        $i5 = (int) -1;

        i2 = i2 + $i5;

        goto label3;

     label2:
        i2 = 2;

     label3:
        goto label1;

     label4:
        $c0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i6 = (int) $c0;

        if $i6 == 62 goto label5;

        $r1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>(">");

        throw $r1;

     label5:
        return;
    }

    protected void skipSpecialTag(int) throws java.io.IOException
    {
        int i3, i4, i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i22, $i23;
        com.jidesoft.plaf.aqua.XMLElement r0;
        char $c0, $c1, $c2;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        i3 := @parameter0: int;

        i4 = 1;

        i5 = 0;

        if i3 != 0 goto label04;

        $c1 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i6 = (int) $c1;

        if $i6 != 91 goto label01;

        i3 = i3 + 1;

        goto label04;

     label01:
        $i7 = (int) $c1;

        if $i7 != 45 goto label04;

        $c2 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i8 = (int) $c2;

        if $i8 != 91 goto label02;

        i3 = i3 + 1;

        goto label04;

     label02:
        $i9 = (int) $c2;

        if $i9 != 93 goto label03;

        $i11 = (int) -1;

        i3 = i3 + $i11;

        goto label04;

     label03:
        $i12 = (int) $c2;

        if $i12 != 45 goto label04;

        virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: void skipComment()>();

        return;

     label04:
        if i4 <= 0 goto label12;

        $c0 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        if i5 != 0 goto label10;

        $i13 = (int) $c0;

        if $i13 == 34 goto label05;

        $i14 = (int) $c0;

        if $i14 != 39 goto label06;

     label05:
        i5 = $c0;

        goto label08;

     label06:
        if i3 > 0 goto label08;

        $i15 = (int) $c0;

        if $i15 != 60 goto label07;

        i4 = i4 + 1;

        goto label08;

     label07:
        $i16 = (int) $c0;

        if $i16 != 62 goto label08;

        $i18 = (int) -1;

        i4 = i4 + $i18;

     label08:
        $i19 = (int) $c0;

        if $i19 != 91 goto label09;

        i3 = i3 + 1;

        goto label11;

     label09:
        $i20 = (int) $c0;

        if $i20 != 93 goto label11;

        $i22 = (int) -1;

        i3 = i3 + $i22;

        goto label11;

     label10:
        $i23 = (int) $c0;

        if $i23 != i5 goto label11;

        i5 = 0;

     label11:
        goto label04;

     label12:
        return;
    }

    protected boolean checkLiteral(java.lang.String) throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLElement r1;
        char $c1, $c2;
        int $i0, i3, $i4, $i5;
        java.lang.String r0;

        r1 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label1:
        if i3 >= $i0 goto label3;

        $c1 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        $i5 = (int) $c2;

        if $i4 == $i5 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    protected char readChar() throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLElement r0;
        com.jidesoft.plaf.aqua.XMLParseException $r2;
        char $c0, $c2, c5;
        java.io.Reader $r1;
        int $i1, $i3, $i4;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $c0 = r0.<com.jidesoft.plaf.aqua.XMLElement: char charReadTooMuch>;

        if $c0 == 0 goto label1;

        c5 = r0.<com.jidesoft.plaf.aqua.XMLElement: char charReadTooMuch>;

        r0.<com.jidesoft.plaf.aqua.XMLElement: char charReadTooMuch> = 0;

        return c5;

     label1:
        $r1 = r0.<com.jidesoft.plaf.aqua.XMLElement: java.io.Reader reader>;

        $i1 = virtualinvoke $r1.<java.io.Reader: int read()>();

        if $i1 >= 0 goto label2;

        $r2 = virtualinvoke r0.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException unexpectedEndOfData()>();

        throw $r2;

     label2:
        if $i1 != 10 goto label3;

        $i3 = r0.<com.jidesoft.plaf.aqua.XMLElement: int parserLineNr>;

        $i4 = $i3 + 1;

        r0.<com.jidesoft.plaf.aqua.XMLElement: int parserLineNr> = $i4;

        return 10;

     label3:
        $c2 = (char) $i1;

        return $c2;
    }

    protected void scanElement(com.jidesoft.plaf.aqua.XMLElement) throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLParseException $r5, $r6, $r7, $r11, $r12, $r13, $r14, $r16;
        boolean $z0, $z1, $z2, $z3;
        com.jidesoft.plaf.aqua.XMLElement r1, r3, $r10;
        java.lang.StringBuffer $r17;
        int $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        java.lang.String $r2, $r4, $r8, $r9, $r15;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c10, c11, c12, $c14;

        r1 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r3 := @parameter0: com.jidesoft.plaf.aqua.XMLElement;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void scanIdentifier(java.lang.StringBuffer)>($r17);

        $r2 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<com.jidesoft.plaf.aqua.XMLElement: void setName(java.lang.String)>($r2);

        c11 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char scanWhitespace()>();

     label01:
        $i15 = (int) c11;

        if $i15 == 62 goto label03;

        $i16 = (int) c11;

        if $i16 == 47 goto label03;

        virtualinvoke $r17.<java.lang.StringBuffer: void setLength(int)>(0);

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>(c11);

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void scanIdentifier(java.lang.StringBuffer)>($r17);

        $r15 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        $c9 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char scanWhitespace()>();

        $i17 = (int) $c9;

        if $i17 == 61 goto label02;

        $r16 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>("=");

        throw $r16;

     label02:
        $c10 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char scanWhitespace()>();

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>($c10);

        virtualinvoke $r17.<java.lang.StringBuffer: void setLength(int)>(0);

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void scanString(java.lang.StringBuffer)>($r17);

        virtualinvoke r3.<com.jidesoft.plaf.aqua.XMLElement: void setAttribute(java.lang.String,java.lang.Object)>($r15, $r17);

        c11 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char scanWhitespace()>();

        goto label01;

     label03:
        $i18 = (int) c11;

        if $i18 != 47 goto label05;

        $c8 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i19 = (int) $c8;

        if $i19 == 62 goto label04;

        $r14 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>(">");

        throw $r14;

     label04:
        return;

     label05:
        virtualinvoke $r17.<java.lang.StringBuffer: void setLength(int)>(0);

        $c0 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char scanWhitespace(java.lang.StringBuffer)>($r17);

        c12 = $c0;

        $i20 = (int) $c0;

        if $i20 == 60 goto label06;

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>($c0);

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void scanPCData(java.lang.StringBuffer)>($r17);

        goto label11;

     label06:
        $c1 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        c12 = $c1;

        $i21 = (int) $c1;

        if $i21 != 33 goto label08;

        $z3 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: boolean checkCDATA(java.lang.StringBuffer)>($r17);

        if $z3 == 0 goto label07;

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void scanPCData(java.lang.StringBuffer)>($r17);

        goto label11;

     label07:
        $c7 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char scanWhitespace(java.lang.StringBuffer)>($r17);

        c12 = $c7;

        $i22 = (int) $c7;

        if $i22 == 60 goto label06;

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>($c7);

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void scanPCData(java.lang.StringBuffer)>($r17);

        goto label11;

     label08:
        $i23 = (int) $c1;

        if $i23 != 47 goto label09;

        $z2 = r1.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreWhitespace>;

        if $z2 == 0 goto label10;

     label09:
        virtualinvoke $r17.<java.lang.StringBuffer: void setLength(int)>(0);

     label10:
        $i24 = (int) $c1;

        if $i24 != 47 goto label11;

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>($c1);

        goto label11;

     label11:
        $i13 = virtualinvoke $r17.<java.lang.StringBuffer: int length()>();

        if $i13 != 0 goto label19;

     label12:
        $i25 = (int) c12;

        if $i25 == 47 goto label18;

        $i26 = (int) c12;

        if $i26 != 33 goto label15;

        $c5 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i27 = (int) $c5;

        if $i27 == 45 goto label13;

        $r13 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>("Comment or Element");

        throw $r13;

     label13:
        $c6 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i28 = (int) $c6;

        if $i28 == 45 goto label14;

        $r12 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>("Comment or Element");

        throw $r12;

     label14:
        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void skipComment()>();

        goto label16;

     label15:
        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>(c12);

        $r10 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLElement createAnotherElement()>();

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void scanElement(com.jidesoft.plaf.aqua.XMLElement)>($r10);

        virtualinvoke r3.<com.jidesoft.plaf.aqua.XMLElement: void addChild(com.jidesoft.plaf.aqua.XMLElement)>($r10);

     label16:
        $c4 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char scanWhitespace()>();

        $i29 = (int) $c4;

        if $i29 == 60 goto label17;

        $r11 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>("<");

        throw $r11;

     label17:
        c12 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        goto label12;

     label18:
        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>(c12);

        goto label21;

     label19:
        $z0 = r1.<com.jidesoft.plaf.aqua.XMLElement: boolean ignoreWhitespace>;

        if $z0 == 0 goto label20;

        $r8 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r3.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r9);

        goto label21;

     label20:
        $r4 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<com.jidesoft.plaf.aqua.XMLElement: void setContent(java.lang.String)>($r4);

     label21:
        $c14 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i30 = (int) $c14;

        if $i30 == 47 goto label22;

        $r7 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>("/");

        throw $r7;

     label22:
        $c2 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char scanWhitespace()>();

        virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: void unreadChar(char)>($c2);

        $z1 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: boolean checkLiteral(java.lang.String)>($r2);

        if $z1 != 0 goto label23;

        $r6 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>($r2);

        throw $r6;

     label23:
        $c3 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char scanWhitespace()>();

        $i31 = (int) $c3;

        if $i31 == 62 goto label24;

        $r5 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)>(">");

        throw $r5;

     label24:
        return;
    }

    protected void resolveEntity(java.lang.StringBuffer) throws java.io.IOException
    {
        com.jidesoft.plaf.aqua.XMLParseException $r7, $r11;
        java.util.HashMap $r3;
        java.lang.StringBuffer r6, $r13;
        int $i3, $i4, $i6, $i7, $i8;
        java.lang.String $r2, $r8, $r9;
        com.jidesoft.plaf.aqua.XMLElement r1;
        char $c0, $c1, $c2, c5;
        java.lang.NumberFormatException $r10;
        char[] $r5, r12;
        java.lang.Object $r4;

        r1 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r6 := @parameter0: java.lang.StringBuffer;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

     label01:
        $c0 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: char readChar()>();

        $i6 = (int) $c0;

        if $i6 != 59 goto label02;

        goto label03;

     label02:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label01;

     label03:
        $r2 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c1;

        if $i7 != 35 goto label09;

     label04:
        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(1);

        $i8 = (int) $c2;

        if $i8 != 120 goto label05;

        $r9 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(2);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r9, 16);

        c5 = (char) $i4;

        goto label06;

     label05:
        $r8 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(1);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r8, 10);

        c5 = (char) $i3;

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        $r11 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException unknownEntity(java.lang.String)>($r2);

        throw $r11;

     label08:
        virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c5);

        goto label11;

     label09:
        $r3 = r1.<com.jidesoft.plaf.aqua.XMLElement: java.util.HashMap entities>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (char[]) $r4;

        r12 = (char[]) $r5;

        if r12 != null goto label10;

        $r7 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: com.jidesoft.plaf.aqua.XMLParseException unknownEntity(java.lang.String)>($r2);

        throw $r7;

     label10:
        virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>(r12);

     label11:
        return;

        catch java.lang.NumberFormatException from label04 to label06 with label07;
    }

    protected void unreadChar(char)
    {
        char c0;
        com.jidesoft.plaf.aqua.XMLElement r0;

        r0 := @this: com.jidesoft.plaf.aqua.XMLElement;

        c0 := @parameter0: char;

        r0.<com.jidesoft.plaf.aqua.XMLElement: char charReadTooMuch> = c0;

        return;
    }

    protected com.jidesoft.plaf.aqua.XMLParseException invalidValueSet(java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r7;
        com.jidesoft.plaf.aqua.XMLParseException $r6;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String r2, $r5, $r8;

        r7 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value set (entity name = \"");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new com.jidesoft.plaf.aqua.XMLParseException;

        $r8 = virtualinvoke r7.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getName()>();

        $i0 = r7.<com.jidesoft.plaf.aqua.XMLElement: int parserLineNr>;

        specialinvoke $r6.<com.jidesoft.plaf.aqua.XMLParseException: void <init>(java.lang.String,int,java.lang.String)>($r8, $i0, $r5);

        return $r6;
    }

    protected com.jidesoft.plaf.aqua.XMLParseException invalidValue(java.lang.String, java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r11;
        com.jidesoft.plaf.aqua.XMLParseException $r10;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r7, $r8;
        java.lang.String r2, r6, $r9, $r12;

        r11 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute \"");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" does not contain a valid ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value (\"");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new com.jidesoft.plaf.aqua.XMLParseException;

        $r12 = virtualinvoke r11.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getName()>();

        $i0 = r11.<com.jidesoft.plaf.aqua.XMLElement: int parserLineNr>;

        specialinvoke $r10.<com.jidesoft.plaf.aqua.XMLParseException: void <init>(java.lang.String,int,java.lang.String)>($r12, $i0, $r9);

        return $r10;
    }

    protected com.jidesoft.plaf.aqua.XMLParseException unexpectedEndOfData()
    {
        com.jidesoft.plaf.aqua.XMLElement r1;
        com.jidesoft.plaf.aqua.XMLParseException $r0;
        int $i0;
        java.lang.String $r2;

        r1 := @this: com.jidesoft.plaf.aqua.XMLElement;

        $r0 = new com.jidesoft.plaf.aqua.XMLParseException;

        $r2 = virtualinvoke r1.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getName()>();

        $i0 = r1.<com.jidesoft.plaf.aqua.XMLElement: int parserLineNr>;

        specialinvoke $r0.<com.jidesoft.plaf.aqua.XMLParseException: void <init>(java.lang.String,int,java.lang.String)>($r2, $i0, "Unexpected end of data reached");

        return $r0;
    }

    protected com.jidesoft.plaf.aqua.XMLParseException syntaxError(java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r6;
        com.jidesoft.plaf.aqua.XMLParseException $r5;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String r2, $r4, $r7;

        r6 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Syntax error while parsing ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new com.jidesoft.plaf.aqua.XMLParseException;

        $r7 = virtualinvoke r6.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getName()>();

        $i0 = r6.<com.jidesoft.plaf.aqua.XMLElement: int parserLineNr>;

        specialinvoke $r5.<com.jidesoft.plaf.aqua.XMLParseException: void <init>(java.lang.String,int,java.lang.String)>($r7, $i0, $r4);

        return $r5;
    }

    protected com.jidesoft.plaf.aqua.XMLParseException expectedInput(java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r6;
        com.jidesoft.plaf.aqua.XMLParseException $r5;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String r2, $r4, $r7;

        r6 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected: ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new com.jidesoft.plaf.aqua.XMLParseException;

        $r7 = virtualinvoke r6.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getName()>();

        $i0 = r6.<com.jidesoft.plaf.aqua.XMLElement: int parserLineNr>;

        specialinvoke $r5.<com.jidesoft.plaf.aqua.XMLParseException: void <init>(java.lang.String,int,java.lang.String)>($r7, $i0, $r4);

        return $r5;
    }

    protected com.jidesoft.plaf.aqua.XMLParseException unknownEntity(java.lang.String)
    {
        com.jidesoft.plaf.aqua.XMLElement r7;
        com.jidesoft.plaf.aqua.XMLParseException $r6;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String r2, $r5, $r8;

        r7 := @this: com.jidesoft.plaf.aqua.XMLElement;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown or invalid entity: &");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new com.jidesoft.plaf.aqua.XMLParseException;

        $r8 = virtualinvoke r7.<com.jidesoft.plaf.aqua.XMLElement: java.lang.String getName()>();

        $i0 = r7.<com.jidesoft.plaf.aqua.XMLElement: int parserLineNr>;

        specialinvoke $r6.<com.jidesoft.plaf.aqua.XMLParseException: void <init>(java.lang.String,int,java.lang.String)>($r8, $i0, $r5);

        return $r6;
    }

    public static void <clinit>()
    {
        <com.jidesoft.plaf.aqua.XMLElement: int NANOXML_MINOR_VERSION> = 2;

        <com.jidesoft.plaf.aqua.XMLElement: int NANOXML_MAJOR_VERSION> = 2;

        <com.jidesoft.plaf.aqua.XMLElement: long serialVersionUID> = 6685035139346394777L;

        return;
    }
}
