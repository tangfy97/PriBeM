public class com.hp.hpl.jena.n3.N3JenaWriterCommon extends java.lang.Object implements com.hp.hpl.jena.rdf.model.RDFWriter
{
    static org.slf4j.Logger logger;
    protected java.util.Map writerPropertyMap;
    protected boolean alwaysAllocateBNodeLabel;
    protected com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler;
    protected java.util.Map prefixMap;
    protected java.util.Map reversePrefixMap;
    protected java.util.Map bNodesMap;
    protected int bNodeCounter;
    protected static final java.lang.String NS_W3_log;
    protected static java.util.Map wellKnownPropsMapN3;
    protected static java.util.Map wellKnownPropsMapTurtle;
    protected java.util.Map wellKnownPropsMap;
    protected com.hp.hpl.jena.n3.N3IndentedWriter out;
    protected int minGap;
    protected java.lang.String minGapStr;
    protected int indentProperty;
    protected int widePropertyLen;
    protected int propertyCol;
    protected int indentObject;
    protected int subjectColumn;
    protected int shortSubject;
    protected boolean useWellKnownPropertySymbols;
    protected boolean allowTripleQuotedStrings;
    protected boolean allowDoubles;
    protected boolean allowDecimals;
    protected static final java.lang.String WS;

    public void <init>()
    {
        java.util.HashMap $r1, $r2;
        java.util.Map $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r4;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map writerPropertyMap> = null;

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean alwaysAllocateBNodeLabel> = 0;

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map prefixMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map reversePrefixMap> = $r2;

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map bNodesMap> = null;

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int bNodeCounter> = 0;

        $r3 = <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map wellKnownPropsMapN3>;

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map wellKnownPropsMap> = $r3;

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out> = null;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int getIntValue(java.lang.String,int)>("minGap", 1);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int minGap> = $i0;

        $i1 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int minGap>;

        $r4 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String pad(int)>($i1);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String minGapStr> = $r4;

        $i2 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int getIntValue(java.lang.String,int)>("indentProperty", 6);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int indentProperty> = $i2;

        $i3 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int getIntValue(java.lang.String,int)>("widePropertyLen", 20);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int widePropertyLen> = $i3;

        $i4 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int getIntValue(java.lang.String,int)>("propertyColumn", 8);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int propertyCol> = $i4;

        $i5 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int propertyCol>;

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int indentObject> = $i5;

        $i6 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int indentProperty>;

        $i7 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int getIntValue(java.lang.String,int)>("subjectColumn", $i6);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int subjectColumn> = $i7;

        $i9 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int subjectColumn>;

        $i8 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int minGap>;

        $i10 = $i9 - $i8;

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int shortSubject> = $i10;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean getBooleanValue(java.lang.String,boolean)>("usePropertySymbols", 1);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean useWellKnownPropertySymbols> = $z0;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean getBooleanValue(java.lang.String,boolean)>("useTripleQuotedStrings", 1);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean allowTripleQuotedStrings> = $z1;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean getBooleanValue(java.lang.String,boolean)>("useDoubles", 1);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean allowDoubles> = $z2;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean getBooleanValue(java.lang.String,boolean)>("useDecimals", 1);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean allowDecimals> = $z3;

        return;
    }

    public com.hp.hpl.jena.rdf.model.RDFErrorHandler setErrorHandler(com.hp.hpl.jena.rdf.model.RDFErrorHandler)
    {
        com.hp.hpl.jena.rdf.model.RDFErrorHandler r1, r2;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFErrorHandler;

        r1 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler>;

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.rdf.model.RDFErrorHandler errorHandler> = r2;

        return r1;
    }

    public java.lang.Object setProperty(java.lang.String, java.lang.Object)
    {
        java.util.HashMap $r6;
        java.util.Map $r2, $r3, $r5;
        java.lang.String $r1, $r12, r13;
        boolean $z0;
        org.slf4j.Logger $r8;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        java.lang.Object $r4, r14;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.Object;

        $z0 = r14 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $r8 = <com.hp.hpl.jena.n3.N3JenaWriterCommon: org.slf4j.Logger logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("N3.setProperty: Property for \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a string");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>($r12);

        r14 = virtualinvoke r14.<java.lang.Object: java.lang.String toString()>();

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String absolutePropName(java.lang.String)>(r13);

        $r2 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map writerPropertyMap>;

        if $r2 != null goto label2;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map writerPropertyMap> = $r6;

     label2:
        $r3 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map writerPropertyMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map writerPropertyMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r14);

        return $r4;
    }

    public void write(com.hp.hpl.jena.rdf.model.Model, java.io.Writer, java.lang.String)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r1;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        java.io.BufferedWriter $r3;
        com.hp.hpl.jena.rdf.model.Model r2;
        java.io.Writer r5;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r5 := @parameter1: java.io.Writer;

        r4 := @parameter2: java.lang.String;

        $z0 = r5 instanceof java.io.BufferedWriter;

        if $z0 != 0 goto label1;

        $r3 = new java.io.BufferedWriter;

        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer)>(r5);

        r5 = $r3;

     label1:
        $r1 = new com.hp.hpl.jena.n3.N3IndentedWriter;

        specialinvoke $r1.<com.hp.hpl.jena.n3.N3IndentedWriter: void <init>(java.io.Writer)>(r5);

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out> = $r1;

        virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void processModel(com.hp.hpl.jena.rdf.model.Model)>(r2);

        return;
    }

    public synchronized void write(com.hp.hpl.jena.rdf.model.Model, java.io.OutputStream, java.lang.String)
    {
        java.io.OutputStream r2;
        java.io.PrintStream $r7;
        com.hp.hpl.jena.shared.JenaException $r9;
        java.io.BufferedWriter $r0;
        java.io.IOException $r8;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r3;
        com.hp.hpl.jena.rdf.model.Model r4;
        java.io.OutputStreamWriter $r1;
        java.lang.String r5;
        java.io.UnsupportedEncodingException $r6;

        r3 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r4 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r2 := @parameter1: java.io.OutputStream;

        r5 := @parameter2: java.lang.String;

     label1:
        $r0 = new java.io.BufferedWriter;

        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r2, "UTF-8");

        specialinvoke $r0.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r1);

        virtualinvoke r3.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void write(com.hp.hpl.jena.rdf.model.Model,java.io.Writer,java.lang.String)>(r4, $r0, r5);

     label2:
        virtualinvoke $r0.<java.io.Writer: void flush()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r9.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("Failed to create UTF-8 writer");

     label7:
        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.io.UnsupportedEncodingException from label1 to label5 with label6;
    }

    protected void startWriting()
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        return;
    }

    protected void finishWriting()
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        return;
    }

    protected void prepare(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        return;
    }

    protected void processModel(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r11;
        java.util.HashMap $r3;
        java.util.Map $r2, $r4, $r7, $r10, $r18;
        int $i0;
        java.lang.String r6, r15, r17;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r13;
        java.util.Iterator $r9;
        java.util.Set $r8;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        com.hp.hpl.jena.rdf.model.Model r1;
        java.lang.Object $r5, $r12, $r14, $r16;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: java.util.Map getNsPrefixMap()>();

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map prefixMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map bNodesMap> = $r3;

        $r4 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map prefixMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("");

        r6 = (java.lang.String) $r5;

        $r7 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map prefixMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r12;

        $r14 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        r15 = (java.lang.String) $r14;

        $r16 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        r17 = (java.lang.String) $r16;

        $z1 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean checkPrefixPart(java.lang.String)>(r15);

        if $z1 != 0 goto label2;

        interfaceinvoke $r9.<java.util.Iterator: void remove()>();

        goto label3;

     label2:
        $z2 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean checkPrefixPart(java.lang.String)>(r15);

        if $z2 == 0 goto label3;

        $r18 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map reversePrefixMap>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r15);

     label3:
        goto label1;

     label4:
        virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void startWriting()>();

        virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void prepare(com.hp.hpl.jena.rdf.model.Model)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void writeHeader(com.hp.hpl.jena.rdf.model.Model)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void writePrefixes(com.hp.hpl.jena.rdf.model.Model)>(r1);

        $r10 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map prefixMap>;

        $i0 = interfaceinvoke $r10.<java.util.Map: int size()>();

        if $i0 == 0 goto label5;

        $r11 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r11.<com.hp.hpl.jena.n3.N3IndentedWriter: void println()>();

     label5:
        virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void writeModel(com.hp.hpl.jena.rdf.model.Model)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void finishWriting()>();

        r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map bNodesMap> = null;

        return;
    }

    protected void writeModel(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r4, $r6;
        com.hp.hpl.jena.rdf.model.ResIterator $r2;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        com.hp.hpl.jena.rdf.model.Model r1;
        java.lang.StringBuilder $r5, $r7, $r9;
        java.lang.String $r8, $r10;
        boolean $z0, $z1, z2, $z3;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        z2 = 1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.rdf.model.ResIterator listSubjects(com.hp.hpl.jena.rdf.model.Model)>(r1);

     label1:
        $z3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.ResIterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.ResIterator: com.hp.hpl.jena.rdf.model.Resource nextResource()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean skipThisSubject(com.hp.hpl.jena.rdf.model.Resource)>($r3);

        if $z0 == 0 goto label2;

        $z1 = <com.hp.hpl.jena.n3.N3JenaWriter: boolean DEBUG>;

        if $z1 == 0 goto label1;

        $r6 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# Skipping: ");

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatResource(com.hp.hpl.jena.rdf.model.Resource)>($r3);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<com.hp.hpl.jena.n3.N3IndentedWriter: void println(java.lang.String)>($r10);

        goto label1;

     label2:
        if z2 == 0 goto label3;

        z2 = 0;

        goto label4;

     label3:
        $r4 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r4.<com.hp.hpl.jena.n3.N3IndentedWriter: void println()>();

     label4:
        virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void writeOneGraphNode(com.hp.hpl.jena.rdf.model.Resource)>($r3);

        goto label1;

     label5:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.ResIterator: void close()>();

        return;
    }

    protected com.hp.hpl.jena.rdf.model.ResIterator listSubjects(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r0;
        com.hp.hpl.jena.rdf.model.ResIterator $r1;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r2;

        r2 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.ResIterator listSubjects()>();

        return $r1;
    }

    protected void writeOneGraphNode(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r1, $r4, $r5;
        com.hp.hpl.jena.util.iterator.ClosableIterator $r3;
        com.hp.hpl.jena.rdf.model.Resource r2;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $i0 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int indentProperty>;

        virtualinvoke $r1.<com.hp.hpl.jena.n3.N3IndentedWriter: void incIndent(int)>($i0);

        virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void writeSubject(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.util.iterator.ClosableIterator preparePropertiesForSubject(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void writePropertiesForSubject(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.util.iterator.ClosableIterator)>(r2, $r3);

        $r4 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $i1 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int indentProperty>;

        virtualinvoke $r4.<com.hp.hpl.jena.n3.N3IndentedWriter: void decIndent(int)>($i1);

        $r5 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r5.<com.hp.hpl.jena.n3.N3IndentedWriter: void println(java.lang.String)>(" .");

        return;
    }

    protected void writePropertiesForSubject(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.util.iterator.ClosableIterator)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r5;
        com.hp.hpl.jena.util.iterator.ClosableIterator r0;
        com.hp.hpl.jena.rdf.model.Resource r4;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r3;
        com.hp.hpl.jena.rdf.model.Property r2;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r4 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r0 := @parameter1: com.hp.hpl.jena.util.iterator.ClosableIterator;

     label1:
        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        r2 = (com.hp.hpl.jena.rdf.model.Property) $r1;

        virtualinvoke r3.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void writeObjectList(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property)>(r4, r2);

        $z1 = interfaceinvoke r0.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = r3.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r5.<com.hp.hpl.jena.n3.N3IndentedWriter: void println(java.lang.String)>(" ;");

     label2:
        goto label1;

     label3:
        interfaceinvoke r0.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return;
    }

    protected boolean skipThisSubject(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        com.hp.hpl.jena.rdf.model.Resource r1;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        return 0;
    }

    protected void writeSubject(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r3, $r4, $r5;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r2, $r6;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatResource(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $r3 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r3.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r2);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int shortSubject>;

        if $i0 >= $i1 goto label1;

        $r5 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $i2 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int subjectColumn>;

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i4 = $i2 - $i3;

        $r6 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String pad(int)>($i4);

        virtualinvoke $r5.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r6);

        goto label2;

     label1:
        $r4 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r4.<com.hp.hpl.jena.n3.N3IndentedWriter: void println()>();

     label2:
        return;
    }

    protected void writeHeader(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.rdf.model.Model r1;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        return;
    }

    protected com.hp.hpl.jena.n3.N3IndentedWriter getOutput()
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r1;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        $r1 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        return $r1;
    }

    protected java.util.Map getPrefixes()
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        java.util.Map $r1;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        $r1 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map prefixMap>;

        return $r1;
    }

    protected void writePrefixes(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r14, $r15, $r18;
        java.util.Map $r1, $r6;
        int $i0, $i1;
        java.lang.String r5, r8, $r13, $r16, $r22;
        boolean $z0;
        java.util.Iterator $r3;
        java.util.Set $r2;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        com.hp.hpl.jena.rdf.model.Model r23;
        java.lang.Object $r4, $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r17, $r19, $r20, $r21;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r23 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        $r1 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map prefixMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map prefixMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r8 = (java.lang.String) $r7;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@prefix ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r14.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r13);

        $r15 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $i0 = virtualinvoke $r13.<java.lang.String: int length()>();

        $i1 = 16 - $i0;

        $r16 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String pad(int)>($i1);

        virtualinvoke $r15.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r16);

        $r18 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> .");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<com.hp.hpl.jena.n3.N3IndentedWriter: void println(java.lang.String)>($r22);

        goto label1;

     label2:
        return;
    }

    protected void writeObjectList(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        com.hp.hpl.jena.rdf.model.StmtIterator $r4;
        com.hp.hpl.jena.rdf.model.Property r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r2, $r7, $r15;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.RDFNode $r6;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.rdf.model.Resource r3;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatProperty(com.hp.hpl.jena.rdf.model.Property)>(r1);

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>(r1);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatNode(com.hp.hpl.jena.rdf.model.RDFNode)>($r6);

        $r8 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r8.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r2);

        $r9 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $i0 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int indentObject>;

        virtualinvoke $r9.<com.hp.hpl.jena.n3.N3IndentedWriter: void incIndent(int)>($i0);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int minGap>;

        $i4 = $i1 + $i2;

        $i3 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int widePropertyLen>;

        if $i4 > $i3 goto label2;

        $i6 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int calcPropertyPadding(java.lang.String)>($r2);

        $r14 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $r15 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String pad(int)>($i6);

        virtualinvoke $r14.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r15);

        goto label3;

     label2:
        $r10 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r10.<com.hp.hpl.jena.n3.N3IndentedWriter: void println()>();

     label3:
        $r11 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r11.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r7);

        $r12 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $i5 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int indentObject>;

        virtualinvoke $r12.<com.hp.hpl.jena.n3.N3IndentedWriter: void decIndent(int)>($i5);

        $z1 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r13 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r13.<com.hp.hpl.jena.n3.N3IndentedWriter: void println(java.lang.String)>(" ;");

     label4:
        goto label1;

     label5:
        interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return;
    }

    protected java.lang.String formatNode(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r1;
        java.lang.String $r3, $r5;
        com.hp.hpl.jena.rdf.model.Literal $r4;
        com.hp.hpl.jena.rdf.model.Resource $r2;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z0 == 0 goto label1;

        $r4 = (com.hp.hpl.jena.rdf.model.Literal) r0;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatLiteral(com.hp.hpl.jena.rdf.model.Literal)>($r4);

        return $r5;

     label1:
        $r2 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatResource(com.hp.hpl.jena.rdf.model.Resource)>($r2);

        return $r3;
    }

    protected void writeObject(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r3;
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r2;
        java.lang.String $r4;
        com.hp.hpl.jena.rdf.model.Literal $r5;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z0 == 0 goto label1;

        $r5 = (com.hp.hpl.jena.rdf.model.Literal) r0;

        virtualinvoke r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void writeLiteral(com.hp.hpl.jena.rdf.model.Literal)>($r5);

        return;

     label1:
        r1 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        $r3 = r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatResource(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        virtualinvoke $r3.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r4);

        return;
    }

    protected void writeLiteral(com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r2;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        java.lang.String $r3;
        com.hp.hpl.jena.rdf.model.Literal r1;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Literal;

        $r2 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatLiteral(com.hp.hpl.jena.rdf.model.Literal)>(r1);

        virtualinvoke $r2.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r3);

        return;
    }

    protected com.hp.hpl.jena.util.iterator.ClosableIterator preparePropertiesForSubject(com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.rdf.model.Resource r1;
        java.util.HashSet $r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r7;
        com.hp.hpl.jena.rdf.model.Property $r6;
        boolean $z0;

        r7 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        $r3 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r3);

        return $r4;
    }

    protected java.lang.String formatResource(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r15;
        java.util.Map $r5, $r6, $r10;
        int $i0, $i1;
        java.lang.String $r3, $r4, $r8, $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.rdf.model.Resource r0, $r1;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r2;
        com.hp.hpl.jena.rdf.model.Model $r14;
        java.lang.Object $r7;
        java.lang.StringBuilder $r9, $r11, $r12;

        r2 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 == 0 goto label4;

        $z2 = r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean alwaysAllocateBNodeLabel>;

        if $z2 != 0 goto label2;

        $r14 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, null, r0);

        $z4 = interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z4 != 0 goto label1;

        interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return "[]";

     label1:
        interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label2:
        $r5 = r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map bNodesMap>;

        $z3 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z3 != 0 goto label3;

        $r10 = r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map bNodesMap>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_:b");

        $i0 = r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int bNodeCounter>;

        $i1 = $i0 + 1;

        r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int bNodeCounter> = $i1;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r13);

     label3:
        $r6 = r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map bNodesMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r8 = (java.lang.String) $r7;

        return $r8;

     label4:
        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource nil>;

        $z1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label5;

        return "()";

     label5:
        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatURI(java.lang.String)>($r3);

        return $r4;
    }

    protected java.lang.String formatLiteral(com.hp.hpl.jena.rdf.model.Literal)
    {
        java.math.BigDecimal $r23;
        java.math.BigInteger $r22;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        com.hp.hpl.jena.rdf.model.Literal r0;
        java.lang.StringBuffer $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12, $i14, $i16, $i18;
        java.lang.String $r1, $r2, $r3, $r5, $r6, $r8, $r10, $r12, r19, r20, r21;
        java.lang.NumberFormatException $r15, $r16, $r17;
        com.hp.hpl.jena.rdf.model.Resource $r7, $r9, $r11;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r4;

        r4 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Literal;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getDatatypeURI()>();

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLanguage()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        if $r1 == null goto label12;

        $r7 = <com.hp.hpl.jena.vocabulary.XSD: com.hp.hpl.jena.rdf.model.Resource integer>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label04;

     label01:
        $r22 = new java.math.BigInteger;

        specialinvoke $r22.<java.math.BigInteger: void <init>(java.lang.String)>($r3);

     label02:
        return $r3;

     label03:
        $r17 := @caughtexception;

     label04:
        $r9 = <com.hp.hpl.jena.vocabulary.XSD: com.hp.hpl.jena.rdf.model.Resource decimal>;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label08;

        $i6 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(46);

        if $i6 < 0 goto label08;

        $i7 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(101);

        $i10 = (int) -1;

        if $i7 != $i10 goto label08;

        $i8 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(69);

        $i12 = (int) -1;

        if $i8 != $i12 goto label08;

     label05:
        $r23 = new java.math.BigDecimal;

        specialinvoke $r23.<java.math.BigDecimal: void <init>(java.lang.String)>($r3);

     label06:
        return $r3;

     label07:
        $r16 := @caughtexception;

     label08:
        $z3 = r4.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean allowDoubles>;

        if $z3 == 0 goto label12;

        $r11 = <com.hp.hpl.jena.vocabulary.XSD: com.hp.hpl.jena.rdf.model.Resource xdouble>;

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label12;

        $i4 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(101);

        if $i4 >= 0 goto label09;

        $i5 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(69);

        if $i5 < 0 goto label12;

     label09:
        staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

     label10:
        return $r3;

     label11:
        $r15 := @caughtexception;

     label12:
        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        z4 = 1;

        r19 = "\"";

        r21 = "\"";

        r20 = "\"";

        $z5 = r4.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean allowTripleQuotedStrings>;

        if $z5 == 0 goto label14;

        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("\n");

        $i14 = (int) -1;

        if $i1 != $i14 goto label13;

        $i2 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("\r");

        $i16 = (int) -1;

        if $i2 != $i16 goto label13;

        $i3 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("\f");

        $i18 = (int) -1;

        if $i3 == $i18 goto label14;

     label13:
        r19 = "\"\"\"";

        r21 = "\"\"\"";

        r20 = "\"\"\"";

        z4 = 0;

     label14:
        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r20);

        staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: void string(java.lang.StringBuffer,java.lang.String,boolean)>($r24, $r3, z4);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        if $r2 == null goto label15;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label15;

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label15:
        if $r1 == null goto label16;

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("^^");

        $r6 = virtualinvoke r4.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatURI(java.lang.String)>($r1);

        virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

     label16:
        $r5 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label05 to label06 with label07;
        catch java.lang.NumberFormatException from label09 to label10 with label11;
    }

    protected java.lang.String formatProperty(com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r2;
        com.hp.hpl.jena.rdf.model.Property r0;
        java.util.Map $r4, $r5;
        java.lang.Object $r6;
        java.lang.String $r1, $r3, $r7;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Property: java.lang.String getURI()>();

        $z0 = r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean useWellKnownPropertySymbols>;

        if $z0 == 0 goto label1;

        $r4 = r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map wellKnownPropsMap>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z1 == 0 goto label1;

        $r5 = r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map wellKnownPropsMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r7 = (java.lang.String) $r6;

        return $r7;

     label1:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String formatURI(java.lang.String)>($r1);

        return $r3;
    }

    protected java.lang.String formatURI(java.lang.String)
    {
        java.util.Map $r3;
        int $i0, $i1, $i2;
        java.lang.String r0, $r1, r5, $r6, $r11, $r16;
        boolean $z0;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r2;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15;

        r2 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: int splitIdx(java.lang.String)>(r0);

        if $i0 < 0 goto label1;

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r3 = r2.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map reversePrefixMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (java.lang.String) $r4;

        if r5 == null goto label1;

        $i2 = $i0 + 1;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $z0 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean checkNamePart(java.lang.String)>($r6);

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label1:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    protected static int splitIdx(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(35);

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        return $i1;
    }

    protected static boolean checkPrefixedName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean checkPrefixPart(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean checkNamePart(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    protected static boolean checkPrefixPart(java.lang.String)
    {
        java.text.StringCharacterIterator $r2;
        int $i0, $i2;
        char $c1;
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r2 = new java.text.StringCharacterIterator;

        specialinvoke $r2.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r0);

        $c1 = interfaceinvoke $r2.<java.text.CharacterIterator: char first()>();

        $z0 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean checkNameStartChar(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i2 = (int) $c1;

        if $i2 != 95 goto label3;

        return 0;

     label3:
        $z1 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean checkNameTail(java.text.CharacterIterator)>($r2);

        return $z1;
    }

    protected static boolean checkNamePart(java.lang.String)
    {
        java.text.StringCharacterIterator $r1;
        int $i0;
        char $c1;
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r1 = new java.text.StringCharacterIterator;

        specialinvoke $r1.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r0);

        $c1 = interfaceinvoke $r1.<java.text.CharacterIterator: char first()>();

        $z0 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean checkNameStartChar(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean checkNameTail(java.text.CharacterIterator)>($r1);

        return $z1;
    }

    private static boolean checkNameTail(java.text.CharacterIterator)
    {
        java.text.CharacterIterator r0;
        int $i1, $i3;
        char c0;
        boolean $z0;

        r0 := @parameter0: java.text.CharacterIterator;

        c0 = interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

     label1:
        $i1 = (int) c0;

        $i3 = (int) 65535;

        if $i1 == $i3 goto label3;

        $z0 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterCommon: boolean checkNameChar(char)>(c0);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        c0 = interfaceinvoke r0.<java.text.CharacterIterator: char next()>();

        goto label1;

     label3:
        return 1;
    }

    protected static boolean checkNameStartChar(char)
    {
        int $i1;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i1 = (int) c0;

        if $i1 != 95 goto label2;

        return 1;

     label2:
        return 0;
    }

    protected static boolean checkNameChar(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i1 = (int) c0;

        if $i1 != 95 goto label2;

        return 1;

     label2:
        $i2 = (int) c0;

        if $i2 != 45 goto label3;

        return 1;

     label3:
        return 0;
    }

    protected static void string(java.lang.StringBuffer, java.lang.String, boolean)
    {
        char $c1;
        java.lang.StringBuffer r1;
        int $i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String r0;
        boolean z0;

        r1 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i2 = 0;

     label01:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label10;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 == 92 goto label02;

        $i4 = (int) $c1;

        if $i4 != 34 goto label03;

     label02:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label09;

     label03:
        if z0 == 0 goto label08;

        $i5 = (int) $c1;

        if $i5 == 10 goto label04;

        $i6 = (int) $c1;

        if $i6 == 13 goto label04;

        $i7 = (int) $c1;

        if $i7 != 12 goto label08;

     label04:
        $i8 = (int) $c1;

        if $i8 != 10 goto label05;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

     label05:
        $i9 = (int) $c1;

        if $i9 != 9 goto label06;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");

     label06:
        $i10 = (int) $c1;

        if $i10 != 13 goto label07;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

     label07:
        $i11 = (int) $c1;

        if $i11 != 12 goto label09;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\f");

        goto label09;

     label08:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label09:
        i2 = i2 + 1;

        goto label01;

     label10:
        return;
    }

    protected int calcPropertyPadding(java.lang.String)
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        int $i0, $i1, $i2, i3;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int propertyCol>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i3 = $i0 - $i1;

        $i2 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int minGap>;

        if i3 >= $i2 goto label1;

        i3 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int minGap>;

     label1:
        return i3;
    }

    protected static java.lang.String pad(int)
    {
        java.lang.StringBuffer $r0;
        int i0, i1;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    protected int countProperties(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r1;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r2;
        int i0;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        i0 = 0;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label1:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return i0;
    }

    protected int countProperties(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r3;
        com.hp.hpl.jena.rdf.model.Property r1;
        int i0;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        i0 = 0;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>(r1);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return i0;
    }

    protected int countArcsTo(com.hp.hpl.jena.rdf.model.Resource)
    {
        int $i0;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        com.hp.hpl.jena.rdf.model.Resource r1;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: int countArcsTo(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Resource)>(null, r1);

        return $i0;
    }

    protected int countArcsTo(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r4;
        com.hp.hpl.jena.rdf.model.Property r2;
        com.hp.hpl.jena.rdf.model.Model $r1;
        int i0;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean $z0;

        r4 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r0 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        i0 = 0;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(null, r2, r0);

     label1:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return i0;
    }

    protected java.util.Iterator rdfListIterator(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.shared.JenaException $r13, $r14;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r5, $r10;
        com.hp.hpl.jena.rdf.model.Property $r4, $r9;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2;
        com.hp.hpl.jena.rdf.model.RDFNode $r7, $r12;
        com.hp.hpl.jena.rdf.model.Statement $r6, $r11;
        com.hp.hpl.jena.rdf.model.Resource $r1, r16;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r15;
        com.hp.hpl.jena.rdf.model.Model $r3, $r8;

        r15 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r16 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource nil>;

        $z0 = interfaceinvoke r16.<com.hp.hpl.jena.rdf.model.Resource: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label4;

        $r3 = interfaceinvoke r16.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property first>;

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r16, $r4, null);

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r14 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r14.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>("N3: Multi valued list item");

        throw $r14;

     label2:
        $r8 = interfaceinvoke r16.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r9 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property rest>;

        $r10 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r16, $r9, null);

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        r16 = (com.hp.hpl.jena.rdf.model.Resource) $r12;

        $z2 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r13 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r13.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>("N3: List has two tails");

        throw $r13;

     label3:
        goto label1;

     label4:
        $r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    protected java.lang.String getStringValue(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        java.lang.String r1, $r2, r3;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String getPropValue(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return r3;

     label1:
        return $r2;
    }

    protected boolean getBooleanValue(java.lang.String, boolean)
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: java.lang.String;

        z2 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String getPropValue(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return z2;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z1 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    protected int getIntValue(java.lang.String, int)
    {
        org.slf4j.Logger $r5;
        java.lang.NumberFormatException $r3;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        int $i0, i1;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String r1, $r2, $r8;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String getPropValue(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return i1;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        $r5 = <com.hp.hpl.jena.n3.N3JenaWriterCommon: org.slf4j.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format error for property: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String)>($r8);

        return i1;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    protected java.lang.String getPropValue(java.lang.String)
    {
        java.util.Map $r2, $r5, $r6;
        java.lang.String $r1, $r3, $r4, $r8, $r14, r15, r16;
        boolean $z0, $z1;
        org.slf4j.Logger $r10;
        com.hp.hpl.jena.n3.N3JenaWriterCommon r0;
        java.lang.Object $r7;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r15 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String absolutePropName(java.lang.String)>(r15);

        $r2 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map writerPropertyMap>;

        if $r2 == null goto label2;

        $r5 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map writerPropertyMap>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r6 = r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map writerPropertyMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z1 = $r7 instanceof java.lang.String;

        if $z1 != 0 goto label1;

        $r10 = <com.hp.hpl.jena.n3.N3JenaWriterCommon: org.slf4j.Logger logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getPropValue: N3 Property for \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a string");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>($r14);

     label1:
        $r8 = (java.lang.String) $r7;

        return $r8;

     label2:
        $r3 = staticinvoke <com.hp.hpl.jena.JenaRuntime: java.lang.String getSystemProperty(java.lang.String)>($r1);

        r16 = $r3;

        if $r3 != null goto label3;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String localPropName(java.lang.String)>($r1);

        r16 = staticinvoke <com.hp.hpl.jena.JenaRuntime: java.lang.String getSystemProperty(java.lang.String)>($r4);

     label3:
        return r16;
    }

    protected java.lang.String absolutePropName(java.lang.String)
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r5;
        int $i0, $i2;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.lang.String r0, $r4;

        r5 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://jena.hpl.hp.com/n3/properties/");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return r0;
    }

    protected java.lang.String localPropName(java.lang.String)
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r1;
        int $i0;
        java.lang.String $r0, r2;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r2 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("http://jena.hpl.hp.com/n3/properties/");

        if $z0 == 0 goto label1;

        $r0 = "http://jena.hpl.hp.com/n3/properties/";

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        return r2;
    }

    private boolean isOpaque(java.lang.String)
    {
        com.hp.hpl.jena.n3.N3JenaWriterCommon r3;
        java.net.URISyntaxException $r2;
        java.net.URI $r0;
        java.lang.String r1;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.n3.N3JenaWriterCommon;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.net.URI;

        specialinvoke $r0.<java.net.URI: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r0.<java.net.URI: boolean isOpaque()>();

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        return 1;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.util.HashMap $r1, $r9;
        java.util.Map $r2, $r4, $r7, $r11;
        com.hp.hpl.jena.rdf.model.Property $r3, $r6, $r10;
        java.lang.String $r5, $r8, $r12;

        <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String WS> = "\n\r\t";

        <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.lang.String NS_W3_log> = "http://www.w3.org/2000/10/swap/log#";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/n3/N3JenaWriterCommon;");

        <com.hp.hpl.jena.n3.N3JenaWriterCommon: org.slf4j.Logger logger> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map wellKnownPropsMapN3> = $r1;

        $r2 = <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map wellKnownPropsMapN3>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://www.w3.org/2000/10/swap/log#implies", "=>");

        $r4 = <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map wellKnownPropsMapN3>;

        $r3 = <com.hp.hpl.jena.vocabulary.OWL: com.hp.hpl.jena.rdf.model.Property sameAs>;

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Property: java.lang.String getURI()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "=");

        $r7 = <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map wellKnownPropsMapN3>;

        $r6 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r8 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Property: java.lang.String getURI()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, "a");

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map wellKnownPropsMapTurtle> = $r9;

        $r11 = <com.hp.hpl.jena.n3.N3JenaWriterCommon: java.util.Map wellKnownPropsMapTurtle>;

        $r10 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r12 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Property: java.lang.String getURI()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "a");

        return;
    }
}
