final class org.waveprotocol.box.server.frontend.WaveViewSubscription extends java.lang.Object
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final org.waveprotocol.wave.model.id.WaveId waveId;
    private final org.waveprotocol.wave.model.id.IdFilter waveletIdFilter;
    private final org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener openListener;
    private final java.lang.String channelId;
    private final java.util.concurrent.ConcurrentMap channels;

    public void <init>(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.IdFilter, java.lang.String, org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener)
    {
        org.waveprotocol.wave.model.id.WaveId r4;
        org.waveprotocol.box.server.frontend.WaveViewSubscription$1 $r2;
        org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener r6;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r0;
        java.util.concurrent.ConcurrentMap $r3;
        org.waveprotocol.wave.model.id.IdFilter r5;
        java.lang.String r7;
        com.google.common.collect.MapMaker $r1;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        r4 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r5 := @parameter1: org.waveprotocol.wave.model.id.IdFilter;

        r7 := @parameter2: java.lang.String;

        r6 := @parameter3: org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.google.common.collect.MapMaker;

        specialinvoke $r1.<com.google.common.collect.MapMaker: void <init>()>();

        $r2 = new org.waveprotocol.box.server.frontend.WaveViewSubscription$1;

        specialinvoke $r2.<org.waveprotocol.box.server.frontend.WaveViewSubscription$1: void <init>(org.waveprotocol.box.server.frontend.WaveViewSubscription)>(r0);

        $r3 = virtualinvoke $r1.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r2);

        r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.util.concurrent.ConcurrentMap channels> = $r3;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "null wave id");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "null filter");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "null listener");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r7, "null channel id");

        r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.wave.model.id.WaveId waveId> = r4;

        r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.wave.model.id.IdFilter waveletIdFilter> = r5;

        r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.lang.String channelId> = r7;

        r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener openListener> = r6;

        return;
    }

    public org.waveprotocol.wave.model.id.WaveId getWaveId()
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription r0;
        org.waveprotocol.wave.model.id.WaveId $r1;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        $r1 = r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.wave.model.id.WaveId waveId>;

        return $r1;
    }

    public org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener getOpenListener()
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription r0;
        org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener $r1;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        $r1 = r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener openListener>;

        return $r1;
    }

    public java.lang.String getChannelId()
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        $r1 = r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.lang.String channelId>;

        return $r1;
    }

    public boolean includes(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.id.IdFilter $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.wave.model.id.IdFilter waveletIdFilter>;

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdFilter: boolean accepts(org.waveprotocol.wave.model.id.IdFilter,org.waveprotocol.wave.model.id.WaveletId)>($r2, r1);

        return $z0;
    }

    public synchronized void submitRequest(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState r5;
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.lang.Object[] $r6;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r0;
        org.waveprotocol.wave.model.id.WaveletId $r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7, $r9, $r11;
        org.waveprotocol.wave.util.logging.Log $r8;
        java.lang.String $r10, $r12;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r3 = r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.util.concurrent.ConcurrentMap channels>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState) $r4;

        $z0 = r5.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: boolean hasOutstandingSubmit>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r0;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z1, "Received overlapping submit requests to subscription %s", $r6);

        $r8 = <org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.wave.util.logging.Log LOG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Submit oustandinding on channel ");

        $r10 = r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.lang.String channelId>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r12);

        r5.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: boolean hasOutstandingSubmit> = 1;

        return;
    }

    public synchronized void submitResponse(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState r6;
        org.waveprotocol.wave.model.id.WaveletId r2;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r3;
        long $l0;
        java.util.concurrent.ConcurrentMap $r4;
        java.lang.Long $r8;
        org.waveprotocol.wave.model.version.HashedVersion r0;
        org.waveprotocol.wave.util.logging.Log $r10;
        java.lang.String $r12, $r14;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.util.Collection $r7;
        java.util.List $r15, $r16, $r17;
        java.lang.Object $r5;
        java.lang.StringBuilder $r9, $r11, $r13;

        r3 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r0 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null delta application version");

        r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r4 = r3.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.util.concurrent.ConcurrentMap channels>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r2);

        r6 = (org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState) $r5;

        $z0 = r6.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: boolean hasOutstandingSubmit>;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        $r7 = r6.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: java.util.Collection submittedEndVersions>;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        r6.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: boolean hasOutstandingSubmit> = 0;

        $r10 = <org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.wave.util.logging.Log LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Submit resolved on channel ");

        $r12 = r3.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.lang.String channelId>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r14);

        $r15 = r6.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: java.util.List heldBackDeltas>;

        $r16 = specialinvoke r3.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.util.List filterOwnDeltas(java.util.List,org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState)>($r15, r6);

        $z1 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        specialinvoke r3.<org.waveprotocol.box.server.frontend.WaveViewSubscription: void sendUpdate(org.waveprotocol.wave.model.id.WaveletName,java.util.List,org.waveprotocol.wave.model.version.HashedVersion)>(r1, $r16, null);

     label1:
        $r17 = r6.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: java.util.List heldBackDeltas>;

        interfaceinvoke $r17.<java.util.List: void clear()>();

        return;
    }

    public synchronized void onUpdate(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.box.common.DeltaSequence)
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState $r9;
        org.waveprotocol.wave.model.id.WaveletName r2;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r1;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        org.waveprotocol.box.common.DeltaSequence r0;
        java.util.concurrent.ConcurrentMap $r4;
        java.util.List $r7, $r8;
        org.waveprotocol.wave.model.version.HashedVersion $r6;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r0 := @parameter1: org.waveprotocol.box.common.DeltaSequence;

        $z0 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z3);

        $r4 = r1.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.util.concurrent.ConcurrentMap channels>;

        $r3 = r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r3);

        $r9 = (org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState) $r5;

        specialinvoke r1.<org.waveprotocol.box.server.frontend.WaveViewSubscription: void checkUpdateVersion(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.common.DeltaSequence,org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState)>(r2, r0, $r9);

        $r6 = virtualinvoke r0.<org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.wave.model.version.HashedVersion getEndVersion()>();

        $r9.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: org.waveprotocol.wave.model.version.HashedVersion lastVersion> = $r6;

        $z1 = $r9.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: boolean hasOutstandingSubmit>;

        if $z1 == 0 goto label3;

        $r8 = $r9.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: java.util.List heldBackDeltas>;

        interfaceinvoke $r8.<java.util.List: boolean addAll(java.util.Collection)>(r0);

        goto label4;

     label3:
        $r7 = specialinvoke r1.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.util.List filterOwnDeltas(java.util.List,org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState)>(r0, $r9);

        $z2 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label4;

        specialinvoke r1.<org.waveprotocol.box.server.frontend.WaveViewSubscription: void sendUpdate(org.waveprotocol.wave.model.id.WaveletName,java.util.List,org.waveprotocol.wave.model.version.HashedVersion)>(r2, $r7, null);

     label4:
        return;
    }

    private java.util.List filterOwnDeltas(java.util.List, org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState)
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r6;
        long $l0;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r10;
        java.util.ArrayList $r3;
        java.lang.Long $r9;
        org.waveprotocol.wave.model.version.HashedVersion $r7;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4;
        java.util.Collection $r2, $r8;
        java.util.List r0, r11;
        java.lang.Object $r5;

        r10 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState;

        r11 = r0;

        $r2 = r1.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: java.util.Collection submittedEndVersions>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r11 = $r3;

        $r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r5;

        $r7 = virtualinvoke r6.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $l0 = virtualinvoke $r7.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r8 = r1.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: java.util.Collection submittedEndVersions>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z2 = interfaceinvoke $r8.<java.util.Collection: boolean remove(java.lang.Object)>($r9);

        if $z2 != 0 goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r6);

     label2:
        goto label1;

     label3:
        return r11;
    }

    public synchronized void onCommit(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        com.google.common.collect.ImmutableList $r2;
        org.waveprotocol.wave.model.version.HashedVersion r3;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r0;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        specialinvoke r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: void sendUpdate(org.waveprotocol.wave.model.id.WaveletName,java.util.List,org.waveprotocol.wave.model.version.HashedVersion)>(r1, $r2, r3);

        return;
    }

    private void sendUpdate(org.waveprotocol.wave.model.id.WaveletName, java.util.List, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.util.List r2;
        org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener $r5;
        org.waveprotocol.wave.model.version.HashedVersion r3;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r0;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        $r5 = r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener openListener>;

        $r4 = r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.lang.String channelId>;

        interfaceinvoke $r5.<org.waveprotocol.box.server.frontend.ClientFrontend$OpenListener: void onUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot,java.util.List,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Boolean,java.lang.String)>(r1, null, r2, r3, null, $r4);

        return;
    }

    private void checkUpdateVersion(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.box.common.DeltaSequence, org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState)
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState r0;
        org.waveprotocol.wave.model.id.WaveletName r5;
        java.lang.Object[] $r4;
        long $l0, $l1;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r8;
        org.waveprotocol.box.common.DeltaSequence r3;
        byte $b2;
        java.lang.Long $r6, $r7;
        org.waveprotocol.wave.model.version.HashedVersion $r1, $r2;
        boolean $z0;

        r8 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter1: org.waveprotocol.box.common.DeltaSequence;

        r0 := @parameter2: org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState;

        $r1 = r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: org.waveprotocol.wave.model.version.HashedVersion lastVersion>;

        if $r1 == null goto label3;

        $r2 = r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: org.waveprotocol.wave.model.version.HashedVersion lastVersion>;

        $l0 = virtualinvoke $r2.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l1 = virtualinvoke r3.<org.waveprotocol.box.common.DeltaSequence: long getStartVersion()>();

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = r5;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r4[2] = $r7;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "Subscription expected delta for %s targeting %s, was %s", $r4);

     label3:
        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.id.WaveId $r3;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r2 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[WaveViewSubscription wave: ");

        $r3 = r2.<org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", channel: ");

        $r6 = r2.<org.waveprotocol.box.server.frontend.WaveViewSubscription: java.lang.String channelId>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/frontend/WaveViewSubscription;");

        <org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
