public class org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter extends java.lang.Object implements org.apache.batik.ext.awt.image.spi.ImageWriter, javax.imageio.event.IIOWriteWarningListener
{
    private java.lang.String targetMIME;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: java.lang.String targetMIME> = r1;

        return;
    }

    public void writeImage(java.awt.image.RenderedImage, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter r0;
        java.awt.image.RenderedImage r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter;

        r1 := @parameter0: java.awt.image.RenderedImage;

        r2 := @parameter1: java.io.OutputStream;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: void writeImage(java.awt.image.RenderedImage,java.io.OutputStream,org.apache.batik.ext.awt.image.spi.ImageWriterParams)>(r1, r2, null);

        return;
    }

    public void writeImage(java.awt.image.RenderedImage, java.io.OutputStream, org.apache.batik.ext.awt.image.spi.ImageWriterParams) throws java.io.IOException
    {
        java.lang.Throwable $r20, $r22;
        javax.imageio.IIOImage $r28;
        org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter r0;
        javax.imageio.metadata.IIOMetadata $r17, r27;
        javax.imageio.ImageTypeSpecifier $r16, r26;
        javax.imageio.ImageWriteParam $r15;
        java.lang.StringBuffer $r5, $r6, $r8, $r9;
        java.lang.String $r1, $r7, $r10;
        java.io.OutputStream r11;
        java.io.PrintStream $r18, $r19, $r21, $r23;
        java.lang.UnsupportedOperationException $r4;
        java.util.Iterator $r2;
        java.awt.image.RenderedImage r13;
        javax.imageio.stream.ImageOutputStream $r12, r25;
        javax.imageio.ImageWriter r24;
        org.apache.batik.ext.awt.image.spi.ImageWriterParams r14;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter;

        r13 := @parameter0: java.awt.image.RenderedImage;

        r11 := @parameter1: java.io.OutputStream;

        r14 := @parameter2: org.apache.batik.ext.awt.image.spi.ImageWriterParams;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: java.lang.String getMIMEType()>();

        $r2 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersByMIMEType(java.lang.String)>($r1);

        r24 = null;

     label01:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r24 = (javax.imageio.ImageWriter) $r3;

        if r24 == null goto label10;

        virtualinvoke r24.<javax.imageio.ImageWriter: void addIIOWriteWarningListener(javax.imageio.event.IIOWriteWarningListener)>(r0);

        r25 = null;

     label02:
        $r12 = staticinvoke <javax.imageio.ImageIO: javax.imageio.stream.ImageOutputStream createImageOutputStream(java.lang.Object)>(r11);

        r25 = $r12;

        $r15 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: javax.imageio.ImageWriteParam getDefaultWriteParam(javax.imageio.ImageWriter,java.awt.image.RenderedImage,org.apache.batik.ext.awt.image.spi.ImageWriterParams)>(r24, r13, r14);

        $r16 = virtualinvoke $r15.<javax.imageio.ImageWriteParam: javax.imageio.ImageTypeSpecifier getDestinationType()>();

        if $r16 == null goto label03;

        r26 = virtualinvoke $r15.<javax.imageio.ImageWriteParam: javax.imageio.ImageTypeSpecifier getDestinationType()>();

        goto label04;

     label03:
        r26 = staticinvoke <javax.imageio.ImageTypeSpecifier: javax.imageio.ImageTypeSpecifier createFromRenderedImage(java.awt.image.RenderedImage)>(r13);

     label04:
        $r17 = virtualinvoke r24.<javax.imageio.ImageWriter: javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam)>(r26, $r15);

        r27 = $r17;

        if r14 == null goto label05;

        if $r17 == null goto label05;

        r27 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: javax.imageio.metadata.IIOMetadata updateMetadata(javax.imageio.metadata.IIOMetadata,org.apache.batik.ext.awt.image.spi.ImageWriterParams)>($r17, r14);

     label05:
        virtualinvoke r24.<javax.imageio.ImageWriter: void setOutput(java.lang.Object)>($r12);

        $r28 = new javax.imageio.IIOImage;

        specialinvoke $r28.<javax.imageio.IIOImage: void <init>(java.awt.image.RenderedImage,java.util.List,javax.imageio.metadata.IIOMetadata)>(r13, null, r27);

        virtualinvoke r24.<javax.imageio.ImageWriter: void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)>(null, $r28, $r15);

        goto label16;

     label06:
        goto label09;

     label07:
        $r22 := @caughtexception;

        goto label18;

     label08:
        throw $r22;

     label09:
        goto label11;

     label10:
        $r4 = new java.lang.UnsupportedOperationException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No ImageIO codec for writing ");

        $r7 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: java.lang.String getMIMEType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is available!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label11:
        goto label20;

     label12:
        goto label15;

     label13:
        $r20 := @caughtexception;

        goto label22;

     label14:
        throw $r20;

     label15:
        return;

     label16:
        if $r12 == null goto label17;

        $r19 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>("closing");

        interfaceinvoke $r12.<javax.imageio.stream.ImageOutputStream: void close()>();

     label17:
        goto label06;

     label18:
        if r25 == null goto label19;

        $r23 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>("closing");

        interfaceinvoke r25.<javax.imageio.stream.ImageOutputStream: void close()>();

     label19:
        goto label08;

     label20:
        if r24 == null goto label21;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("disposing");

        virtualinvoke r24.<javax.imageio.ImageWriter: void dispose()>();

     label21:
        goto label12;

     label22:
        if r24 == null goto label23;

        $r21 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>("disposing");

        virtualinvoke r24.<javax.imageio.ImageWriter: void dispose()>();

     label23:
        goto label14;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label16 to label18 with label13;
        catch java.lang.Throwable from label18 to label20 with label13;
    }

    protected javax.imageio.ImageWriteParam getDefaultWriteParam(javax.imageio.ImageWriter, java.awt.image.RenderedImage, org.apache.batik.ext.awt.image.spi.ImageWriterParams)
    {
        java.io.PrintStream $r3;
        org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter r10;
        java.awt.image.RenderedImage r11;
        javax.imageio.ImageWriteParam $r1;
        java.lang.StringBuffer $r2, $r4, $r6;
        javax.imageio.ImageWriter r0;
        org.apache.batik.ext.awt.image.spi.ImageWriterParams r5;
        java.lang.String $r7, $r8, $r9;

        r10 := @this: org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter;

        r0 := @parameter0: javax.imageio.ImageWriter;

        r11 := @parameter1: java.awt.image.RenderedImage;

        r5 := @parameter2: org.apache.batik.ext.awt.image.spi.ImageWriterParams;

        $r1 = virtualinvoke r0.<javax.imageio.ImageWriter: javax.imageio.ImageWriteParam getDefaultWriteParam()>();

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Param: ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

        if r5 == null goto label1;

        $r8 = virtualinvoke r5.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: java.lang.String getCompressionMethod()>();

        if $r8 == null goto label1;

        virtualinvoke $r1.<javax.imageio.ImageWriteParam: void setCompressionMode(int)>(2);

        $r9 = virtualinvoke r5.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: java.lang.String getCompressionMethod()>();

        virtualinvoke $r1.<javax.imageio.ImageWriteParam: void setCompressionType(java.lang.String)>($r9);

     label1:
        return $r1;
    }

    protected javax.imageio.metadata.IIOMetadata updateMetadata(javax.imageio.metadata.IIOMetadata, org.apache.batik.ext.awt.image.spi.ImageWriterParams)
    {
        javax.imageio.metadata.IIOInvalidTreeException $r14;
        org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter r21;
        javax.imageio.metadata.IIOMetadata r0;
        javax.imageio.metadata.IIOMetadataNode r2, $r3, $r6, $r9, $r12, $r13, r22, r23;
        java.lang.Integer $r5, $r7, $r10;
        java.lang.StringBuffer $r16, $r17, $r19;
        org.w3c.dom.Node $r1;
        java.lang.String $r8, $r11, $r18, $r20;
        boolean $z0;
        double $d0, $d1, $d2, $d3;
        java.lang.RuntimeException $r15;
        org.apache.batik.ext.awt.image.spi.ImageWriterParams r4;

        r21 := @this: org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter;

        r0 := @parameter0: javax.imageio.metadata.IIOMetadata;

        r4 := @parameter1: org.apache.batik.ext.awt.image.spi.ImageWriterParams;

        $z0 = virtualinvoke r0.<javax.imageio.metadata.IIOMetadata: boolean isStandardMetadataFormatSupported()>();

        if $z0 == 0 goto label6;

        $r1 = virtualinvoke r0.<javax.imageio.metadata.IIOMetadata: org.w3c.dom.Node getAsTree(java.lang.String)>("javax_imageio_1.0");

        r2 = (javax.imageio.metadata.IIOMetadataNode) $r1;

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: javax.imageio.metadata.IIOMetadataNode getChildNode(org.w3c.dom.Node,java.lang.String)>(r2, "Dimension");

        $r5 = virtualinvoke r4.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: java.lang.Integer getResolution()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: javax.imageio.metadata.IIOMetadataNode getChildNode(org.w3c.dom.Node,java.lang.String)>($r3, "HorizontalPixelSize");

        r22 = $r6;

        if $r6 != null goto label1;

        $r13 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r13.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("HorizontalPixelSize");

        r22 = $r13;

        virtualinvoke $r3.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

     label1:
        $r7 = virtualinvoke r4.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: java.lang.Integer getResolution()>();

        $d0 = virtualinvoke $r7.<java.lang.Integer: double doubleValue()>();

        $d1 = $d0 / 25.4;

        $r8 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d1);

        virtualinvoke r22.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("value", $r8);

        $r9 = staticinvoke <org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: javax.imageio.metadata.IIOMetadataNode getChildNode(org.w3c.dom.Node,java.lang.String)>($r3, "VerticalPixelSize");

        r23 = $r9;

        if $r9 != null goto label2;

        $r12 = new javax.imageio.metadata.IIOMetadataNode;

        specialinvoke $r12.<javax.imageio.metadata.IIOMetadataNode: void <init>(java.lang.String)>("VerticalPixelSize");

        r23 = $r12;

        virtualinvoke $r3.<javax.imageio.metadata.IIOMetadataNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r12);

     label2:
        $r10 = virtualinvoke r4.<org.apache.batik.ext.awt.image.spi.ImageWriterParams: java.lang.Integer getResolution()>();

        $d2 = virtualinvoke $r10.<java.lang.Integer: double doubleValue()>();

        $d3 = $d2 / 25.4;

        $r11 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d3);

        virtualinvoke r23.<javax.imageio.metadata.IIOMetadataNode: void setAttribute(java.lang.String,java.lang.String)>("value", $r11);

     label3:
        virtualinvoke r0.<javax.imageio.metadata.IIOMetadata: void mergeTree(java.lang.String,org.w3c.dom.Node)>("javax_imageio_1.0", r2);

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot update image metadata: ");

        $r18 = virtualinvoke $r14.<javax.imageio.metadata.IIOInvalidTreeException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label6:
        return r0;

        catch javax.imageio.metadata.IIOInvalidTreeException from label3 to label4 with label5;
    }

    protected static javax.imageio.metadata.IIOMetadataNode getChildNode(org.w3c.dom.Node, java.lang.String)
    {
        org.w3c.dom.NodeList $r1;
        javax.imageio.metadata.IIOMetadataNode $r5;
        org.w3c.dom.Node r0, $r2;
        int $i0, i1;
        java.lang.String r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Node;

        r3 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i0 goto label3;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $r4 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = (javax.imageio.metadata.IIOMetadataNode) $r2;

        return $r5;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public java.lang.String getMIMEType()
    {
        java.lang.String $r1;
        org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter: java.lang.String targetMIME>;

        return $r1;
    }

    public void warningOccurred(javax.imageio.ImageWriter, int, java.lang.String)
    {
        java.io.PrintStream $r1;
        org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter r6;
        java.lang.StringBuffer $r0, $r2, $r4;
        javax.imageio.ImageWriter r7;
        int i0;
        java.lang.String r3, $r5;

        r6 := @this: org.apache.batik.ext.awt.image.codec.imageio.ImageIOImageWriter;

        r7 := @parameter0: javax.imageio.ImageWriter;

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Problem while writing image using ImageI/O: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }
}
