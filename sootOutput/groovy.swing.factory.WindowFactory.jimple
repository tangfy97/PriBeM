public class groovy.swing.factory.WindowFactory extends groovy.swing.factory.RootPaneContainerFactory
{
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697227;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$javax$swing$JWindow;
    static java.lang.Class class$groovy$util$FactoryBuilderSupport;
    static java.lang.Class class$java$util$LinkedList;

    public void <init>()
    {
        groovy.swing.factory.WindowFactory r0;
        java.lang.Class $r1, $r2, $r3, $r4;

        r0 := @this: groovy.swing.factory.WindowFactory;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void <init>()>();

        $r1 = <groovy.swing.factory.WindowFactory: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.WindowFactory");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$0> = $r3;

        goto label2;

     label1:
        $r3 = <groovy.swing.factory.WindowFactory: java.lang.Class class$0>;

     label2:
        $r2 = <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r4 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$lang$MetaClass> = $r4;

        goto label4;

     label3:
        $r4 = <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.util.Map r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        groovy.util.FactoryBuilderSupport r9;
        java.lang.Object[] $r14, $r22, $r33, $r44;
        java.lang.Boolean $r41;
        java.util.LinkedList $r24;
        groovy.swing.factory.WindowFactory r17;
        javax.swing.JWindow $r28;
        java.lang.Class $r0, r1, $r2, $r3, $r5, $r8, $r11, $r16, $r21, $r25, $r27, $r29, $r30, $r31, $r32, $r34, $r35, $r37, $r39, $r42, $r43, $r45, $r46;
        java.lang.Object $r4, r6, r7, $r10, $r12, $r15, $r18, $r19, $r20, $r23, $r26, $r36, r38, r40;

        r17 := @this: groovy.swing.factory.WindowFactory;

        r9 := @parameter0: groovy.util.FactoryBuilderSupport;

        r7 := @parameter1: java.lang.Object;

        r6 := @parameter2: java.lang.Object;

        r13 := @parameter3: java.util.Map;

        $r0 = <groovy.swing.factory.WindowFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r29 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.WindowFactory");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$0> = $r29;

        goto label02;

     label01:
        $r29 = <groovy.swing.factory.WindowFactory: java.lang.Class class$0>;

     label02:
        r1 = $r29;

        $r2 = <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r30 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$lang$MetaClass> = $r30;

        goto label04;

     label03:
        $r30 = <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r3 = <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow>;

        if $r3 != null goto label05;

        $r31 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("javax.swing.JWindow");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow> = $r31;

        goto label06;

     label05:
        $r31 = <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow>;

     label06:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(null, $r31);

        $r28 = (javax.swing.JWindow) $r4;

        $r5 = <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport>;

        if $r5 != null goto label07;

        $r27 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("groovy.util.FactoryBuilderSupport");

        $r32 = $r27;

        <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport> = $r27;

        goto label08;

     label07:
        $r32 = <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport>;

     label08:
        $r33 = newarray (java.lang.Object)[3];

        $r33[0] = r6;

        $r33[1] = r7;

        $r8 = <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow>;

        if $r8 != null goto label09;

        $r34 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("javax.swing.JWindow");

        $r35 = $r34;

        <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow> = $r34;

        goto label10;

     label09:
        $r35 = <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow>;

     label10:
        $r33[2] = $r35;

        $r36 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r32, "checkValueIsType", $r33);

        $z3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r36);

        if $z3 == 0 goto label13;

        $r25 = <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow>;

        if $r25 != null goto label11;

        $r37 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("javax.swing.JWindow");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow> = $r37;

        goto label12;

     label11:
        $r37 = <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow>;

     label12:
        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r6, $r37);

        r38 = (javax.swing.JWindow) $r26;

        goto label26;

     label13:
        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r9, "containingWindows");

        $r11 = <groovy.swing.factory.WindowFactory: java.lang.Class class$java$util$LinkedList>;

        if $r11 != null goto label14;

        $r39 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("java.util.LinkedList");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$java$util$LinkedList> = $r39;

        goto label15;

     label14:
        $r39 = <groovy.swing.factory.WindowFactory: java.lang.Class class$java$util$LinkedList>;

     label15:
        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r10, $r39);

        $r24 = (java.util.LinkedList) $r12;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "owner";

        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r13, "remove", $r14);

        r40 = $r15;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r15, null);

        if $z0 == 0 goto label18;

        $r23 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r24, "empty");

        $z2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r23);

        if $z2 != 0 goto label16;

        $z4 = 1;

        goto label17;

     label16:
        $z4 = 0;

     label17:
        if $z4 == 0 goto label18;

        $r41 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label19;

     label18:
        $r41 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label19:
        $z5 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r41);

        if $z5 == 0 goto label20;

        r40 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r24, "last");

        goto label20;

     label20:
        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r40);

        if $z1 == 0 goto label23;

        $r21 = <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow>;

        if $r21 != null goto label21;

        $r42 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("javax.swing.JWindow");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow> = $r42;

        goto label22;

     label21:
        $r42 = <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow>;

     label22:
        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = r40;

        r38 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r42, $r22);

        goto label26;

     label23:
        $r16 = <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow>;

        if $r16 != null goto label24;

        $r43 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("javax.swing.JWindow");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow> = $r43;

        goto label25;

     label24:
        $r43 = <groovy.swing.factory.WindowFactory: java.lang.Class class$javax$swing$JWindow>;

     label25:
        r38 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNew0(java.lang.Class,java.lang.Class)>(r1, $r43);

     label26:
        $r44 = newarray (java.lang.Object)[3];

        $r44[0] = r9;

        $r44[1] = r38;

        $r44[2] = r13;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodOnCurrentN(java.lang.Class,groovy.lang.GroovyObject,java.lang.String,java.lang.Object[])>(r1, r17, "handleRootPaneTasks", $r44);

        $r20 = r38;

        $r45 = <groovy.swing.factory.WindowFactory: java.lang.Class class$java$lang$Object>;

        if $r45 != null goto label27;

        $r46 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$java$lang$Object> = $r46;

        goto label28;

     label27:
        $r46 = <groovy.swing.factory.WindowFactory: java.lang.Class class$java$lang$Object>;

     label28:
        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r20, $r46);

        $r19 = (java.lang.Object) $r18;

        return $r19;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.swing.factory.WindowFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.WindowFactory");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.WindowFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.WindowFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.WindowFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697227L);

        $r3 = (java.lang.Long) $r2;

        <groovy.swing.factory.WindowFactory: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.swing.factory.WindowFactory: java.lang.Long __timeStamp__239_neverHappen1239119697227> = $r5;

        return;
    }

    java.lang.Object super$3$getProperty(java.lang.String)
    {
        groovy.swing.factory.WindowFactory r0;
        java.lang.Object $r2;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.WindowFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r2;
    }

    java.lang.String super$1$toString()
    {
        groovy.swing.factory.WindowFactory r0;
        java.lang.String $r1;

        r0 := @this: groovy.swing.factory.WindowFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    boolean super$2$isLeaf()
    {
        groovy.swing.factory.WindowFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.WindowFactory;

        $z0 = specialinvoke r0.<groovy.util.AbstractFactory: boolean isLeaf()>();

        return $z0;
    }

    void super$3$setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.WindowFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.WindowFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void setChild(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$3$setProperty(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.WindowFactory r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.WindowFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    void super$1$notify()
    {
        groovy.swing.factory.WindowFactory r0;

        r0 := @this: groovy.swing.factory.WindowFactory;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.swing.factory.WindowFactory r0;

        r0 := @this: groovy.swing.factory.WindowFactory;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$2$setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.WindowFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.WindowFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setParent(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Object super$1$clone()
    {
        groovy.swing.factory.WindowFactory r0;
        java.lang.Object $r1;

        r0 := @this: groovy.swing.factory.WindowFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    void super$1$wait()
    {
        groovy.swing.factory.WindowFactory r0;

        r0 := @this: groovy.swing.factory.WindowFactory;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    groovy.lang.MetaClass super$3$getMetaClass()
    {
        groovy.swing.factory.WindowFactory r0;
        groovy.lang.MetaClass $r1;

        r0 := @this: groovy.swing.factory.WindowFactory;

        $r1 = specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: groovy.lang.MetaClass getMetaClass()>();

        return $r1;
    }

    void super$3$handleRootPaneTasks(groovy.util.FactoryBuilderSupport, java.awt.Window, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.WindowFactory r0;
        java.awt.Window r2;
        java.util.Map r3;

        r0 := @this: groovy.swing.factory.WindowFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.awt.Window;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void handleRootPaneTasks(groovy.util.FactoryBuilderSupport,java.awt.Window,java.util.Map)>(r1, r2, r3);

        return;
    }

    void super$1$wait(long, int)
    {
        int i1;
        groovy.swing.factory.WindowFactory r0;
        long l0;

        r0 := @this: groovy.swing.factory.WindowFactory;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$3$setMetaClass(groovy.lang.MetaClass)
    {
        groovy.swing.factory.WindowFactory r0;
        groovy.lang.MetaClass r1;

        r0 := @this: groovy.swing.factory.WindowFactory;

        r1 := @parameter0: groovy.lang.MetaClass;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void setMetaClass(groovy.lang.MetaClass)>(r1);

        return;
    }

    java.lang.Class super$1$getClass()
    {
        groovy.swing.factory.WindowFactory r0;
        java.lang.Class $r1;

        r0 := @this: groovy.swing.factory.WindowFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    void super$3$onNodeCompleted(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.WindowFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.WindowFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: void onNodeCompleted(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$1$finalize()
    {
        groovy.swing.factory.WindowFactory r0;

        r0 := @this: groovy.swing.factory.WindowFactory;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        groovy.swing.factory.WindowFactory r0;
        long l0;

        r0 := @this: groovy.swing.factory.WindowFactory;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    boolean super$2$onHandleNodeAttributes(groovy.util.FactoryBuilderSupport, java.lang.Object, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.WindowFactory r0;
        java.util.Map r3;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: groovy.swing.factory.WindowFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $z0 = specialinvoke r0.<groovy.util.AbstractFactory: boolean onHandleNodeAttributes(groovy.util.FactoryBuilderSupport,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $z0;
    }

    boolean super$1$equals(java.lang.Object)
    {
        groovy.swing.factory.WindowFactory r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: groovy.swing.factory.WindowFactory;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$3$invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.WindowFactory r0;
        java.lang.Object r2, $r3;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.WindowFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<groovy.swing.factory.RootPaneContainerFactory: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.swing.factory.WindowFactory r0;

        r0 := @this: groovy.swing.factory.WindowFactory;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
