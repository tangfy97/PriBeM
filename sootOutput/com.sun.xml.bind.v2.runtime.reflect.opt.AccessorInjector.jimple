class com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector extends java.lang.Object
{
    private static final java.util.logging.Logger logger;
    protected static final boolean noOptimize;
    private static final java.lang.ClassLoader CLASS_LOADER;

    void <init>()
    {
        com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.lang.Class prepare(java.lang.Class, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.Throwable $r10;
        byte[] $r6;
        java.lang.String[] r5;
        java.util.logging.Logger $r9;
        java.util.logging.Level $r8;
        java.lang.Class r0, $r3, r11;
        java.lang.SecurityException $r7;
        java.lang.ClassLoader $r1;
        java.lang.String r2, r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String[];

        $z0 = <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: boolean noOptimize>;

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r1 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.SecureLoader: java.lang.ClassLoader getClassClassLoader(java.lang.Class)>(r0);

        if $r1 != null goto label03;

     label02:
        return null;

     label03:
        entermonitor class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/AccessorInjector;";

     label04:
        $r3 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.Class find(java.lang.ClassLoader,java.lang.String)>($r1, r2);

        r11 = $r3;

        if $r3 != null goto label07;

        $r6 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: byte[] tailor(java.lang.String,java.lang.String,java.lang.String[])>(r4, r2, r5);

        if $r6 != null goto label06;

        exitmonitor class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/AccessorInjector;";

     label05:
        return null;

     label06:
        r11 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.Class inject(java.lang.ClassLoader,java.lang.String,byte[])>($r1, r2, $r6);

     label07:
        exitmonitor class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/AccessorInjector;";

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        exitmonitor class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/AccessorInjector;";

     label10:
        throw $r10;

     label11:
        return r11;

     label12:
        $r7 := @caughtexception;

        $r9 = <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r8, "Unable to create an optimized TransducedAccessor ", $r7);

        return null;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.SecurityException from label01 to label02 with label12;
        catch java.lang.SecurityException from label03 to label05 with label12;
        catch java.lang.SecurityException from label06 to label11 with label12;
    }

    private static transient byte[] tailor(java.lang.String, java.lang.String, java.lang.String[])
    {
        byte[] $r8;
        java.lang.String[] r7;
        java.lang.StringBuilder $r1, $r3, $r4, $r9, $r11, $r12;
        java.lang.ClassLoader $r0, $r10;
        java.lang.String r2, $r5, r6, $r13;
        java.io.InputStream r14;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String[];

        $r0 = <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: java.lang.ClassLoader CLASS_LOADER>;

        if $r0 == null goto label1;

        $r10 = <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: java.lang.ClassLoader CLASS_LOADER>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r14 = virtualinvoke $r10.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r13);

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r14 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>($r5);

     label2:
        if r14 != null goto label3;

        return null;

     label3:
        $r8 = staticinvoke <com.sun.xml.bind.v2.bytecode.ClassTailor: byte[] tailor(java.io.InputStream,java.lang.String,java.lang.String,java.lang.String[])>(r14, r2, r6, r7);

        return $r8;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0, $r9;
        java.lang.StringBuilder $r1, $r4, $r5;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r7;
        java.lang.ClassLoader $r8;
        boolean $z0, $z1;

        $r0 = staticinvoke <com.sun.xml.bind.Util: java.util.logging.Logger getClassLogger()>();

        <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: java.util.logging.Logger logger> = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = class "Lcom/sun/xml/bind/v2/bytecode/ClassTailor;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".noOptimize");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <com.sun.xml.bind.Util: java.lang.String getSystemProperty(java.lang.String)>($r6);

        if $r7 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: boolean noOptimize> = $z1;

        $z0 = <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: boolean noOptimize>;

        if $z0 == 0 goto label3;

        $r9 = <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: java.util.logging.Logger logger>;

        virtualinvoke $r9.<java.util.logging.Logger: void info(java.lang.String)>("The optimized code generation is disabled");

     label3:
        $r8 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.SecureLoader: java.lang.ClassLoader getClassClassLoader(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/AccessorInjector;");

        <com.sun.xml.bind.v2.runtime.reflect.opt.AccessorInjector: java.lang.ClassLoader CLASS_LOADER> = $r8;

        return;
    }
}
