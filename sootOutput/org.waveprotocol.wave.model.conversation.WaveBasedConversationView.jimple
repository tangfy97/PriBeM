public class org.waveprotocol.wave.model.conversation.WaveBasedConversationView extends java.lang.Object implements org.waveprotocol.wave.model.conversation.ObservableConversationView, org.waveprotocol.wave.model.wave.WaveViewListener
{
    private final java.lang.String id;
    private final org.waveprotocol.wave.model.wave.opbased.ObservableWaveView waveView;
    private final org.waveprotocol.wave.model.id.IdGenerator idGenerator;
    private final org.waveprotocol.wave.model.util.IdentityMap containers;
    private final java.util.Map conversations;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    static final boolean $assertionsDisabled;

    public static org.waveprotocol.wave.model.conversation.WaveBasedConversationView create(org.waveprotocol.wave.model.wave.opbased.ObservableWaveView, org.waveprotocol.wave.model.id.IdGenerator)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r3;
        org.waveprotocol.wave.model.id.WaveId $r1;
        org.waveprotocol.wave.model.wave.opbased.ObservableWaveView r0;
        java.lang.String $r2;
        org.waveprotocol.wave.model.id.IdGenerator r4;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.opbased.ObservableWaveView;

        r4 := @parameter1: org.waveprotocol.wave.model.id.IdGenerator;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.opbased.ObservableWaveView: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.lang.String idFor(org.waveprotocol.wave.model.id.WaveId)>($r1);

        $r3 = new org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        specialinvoke $r3.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: void <init>(java.lang.String,org.waveprotocol.wave.model.wave.opbased.ObservableWaveView,org.waveprotocol.wave.model.id.IdGenerator)>($r2, r0, r4);

        interfaceinvoke r0.<org.waveprotocol.wave.model.wave.opbased.ObservableWaveView: void addListener(java.lang.Object)>($r3);

        return $r3;
    }

    public static java.lang.String idFor(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.model.id.ModernIdSerialiser $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.id.WaveId r0;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r1 = <org.waveprotocol.wave.model.id.ModernIdSerialiser: org.waveprotocol.wave.model.id.ModernIdSerialiser INSTANCE>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.id.ModernIdSerialiser: java.lang.String serialiseWaveId(org.waveprotocol.wave.model.id.WaveId)>(r0);

        return $r2;
    }

    private void <init>(java.lang.String, org.waveprotocol.wave.model.wave.opbased.ObservableWaveView, org.waveprotocol.wave.model.id.IdGenerator)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.util.IdentityMap $r1;
        java.util.Iterator $r8;
        org.waveprotocol.wave.model.wave.opbased.ObservableWaveView r5;
        java.util.HashMap $r2;
        org.waveprotocol.wave.model.id.WaveletId $r11;
        java.lang.Iterable $r7;
        org.waveprotocol.wave.model.id.IdGenerator r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        org.waveprotocol.wave.model.wave.ObservableWavelet r10;
        java.lang.Object $r9;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: org.waveprotocol.wave.model.wave.opbased.ObservableWaveView;

        r6 := @parameter2: org.waveprotocol.wave.model.id.IdGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentityMap createIdentityMap()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.util.IdentityMap containers> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.util.Map conversations> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r3;

        r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.lang.String id> = r4;

        r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.wave.opbased.ObservableWaveView waveView> = r5;

        r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.id.IdGenerator idGenerator> = r6;

        $r7 = interfaceinvoke r5.<org.waveprotocol.wave.model.wave.opbased.ObservableWaveView: java.lang.Iterable getWavelets()>();

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.model.wave.ObservableWavelet) $r9;

        $r11 = interfaceinvoke r10.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationalId(org.waveprotocol.wave.model.id.WaveletId)>($r11);

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView$ConversationContainer createContainer(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r10);

     label2:
        goto label1;

     label3:
        return;
    }

    public java.lang.String getId()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.lang.String id>;

        return $r1;
    }

    public java.util.Collection getConversations()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        java.util.Map $r1;
        java.util.Collection $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.util.Map conversations>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.id.WaveletId $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId widFor(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(org.waveprotocol.wave.model.id.WaveletId)>($r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation getRoot()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        java.util.Map $r3;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.opbased.ObservableWaveView $r1;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r5;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.wave.opbased.ObservableWaveView waveView>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.ObservableWaveView: org.waveprotocol.wave.model.wave.ObservableWavelet getRoot()>();

        if $r2 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.util.Map conversations>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversation) $r4;

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation createRoot()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.opbased.ObservableWaveView $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.wave.opbased.ObservableWaveView waveView>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.ObservableWaveView: org.waveprotocol.wave.model.wave.ObservableWavelet createRoot()>();

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createNewConversation(org.waveprotocol.wave.model.wave.ObservableWavelet)>($r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation createConversation()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.opbased.ObservableWaveView $r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.wave.opbased.ObservableWaveView waveView>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.ObservableWaveView: org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet()>();

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createNewConversation(org.waveprotocol.wave.model.wave.ObservableWavelet)>($r2);

        return $r3;
    }

    public void onWaveletAdded(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r2;
        org.waveprotocol.wave.model.wave.ObservableWavelet r0;
        org.waveprotocol.wave.model.id.WaveletId $r1;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationalId(org.waveprotocol.wave.model.id.WaveletId)>($r1);

        if $z0 == 0 goto label1;

        specialinvoke r2.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView$ConversationContainer createContainer(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r0);

     label1:
        return;
    }

    public void onWaveletRemoved(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.util.IdentityMap $r2;
        java.util.Map $r3;
        org.waveprotocol.wave.model.wave.ObservableWavelet r1;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r5;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.util.IdentityMap containers>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentityMap: void remove(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.util.Map conversations>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r5 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversation) $r4;

        if r5 == null goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: void triggerOnConversationRemoved(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)>(r5);

     label1:
        return;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public org.waveprotocol.wave.model.wave.opbased.ObservableWaveView getWaveView()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.wave.opbased.ObservableWaveView $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.wave.opbased.ObservableWaveView waveView>;

        return $r1;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r1;
        org.waveprotocol.wave.model.wave.opbased.ObservableWaveView $r2;
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.util.Map $r4;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r3;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r6;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationalId(org.waveprotocol.wave.model.id.WaveletId)>(r0);

        if $z0 != 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wavelet id ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not conversational");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r11);

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.wave.opbased.ObservableWaveView waveView>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.ObservableWaveView: org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r0);

        if $r3 == null goto label2;

        $r4 = r1.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.util.Map conversations>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r6 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversation) $r5;

        return $r6;

     label2:
        return null;
    }

    private org.waveprotocol.wave.model.conversation.WaveBasedConversationView$ConversationContainer createContainer(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r8;
        org.waveprotocol.wave.model.util.IdentityMap $r9;
        org.waveprotocol.wave.model.document.util.DefaultDocEventRouter $r2;
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView$ConversationContainer $r7;
        org.waveprotocol.wave.model.adt.docbased.Factory $r4;
        java.util.Map $r11;
        org.waveprotocol.wave.model.wave.ObservableWavelet r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.ObservableDocument $r1;
        org.waveprotocol.wave.model.document.Doc$E $r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r10;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton $r6;

        r8 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>("conversation");

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocEventRouter: org.waveprotocol.wave.model.document.util.DefaultDocEventRouter create(org.waveprotocol.wave.model.document.ObservableDocument)>($r1);

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableDocument: java.lang.Object getDocumentElement()>();

        $r5 = (org.waveprotocol.wave.model.document.Doc$E) $r3;

        $r4 = <org.waveprotocol.wave.model.conversation.DocumentBasedManifest: org.waveprotocol.wave.model.adt.docbased.Factory FACTORY>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton create(org.waveprotocol.wave.model.document.util.DocEventRouter,org.waveprotocol.wave.model.document.Doc$E,java.lang.String,org.waveprotocol.wave.model.adt.docbased.Factory)>($r2, $r5, "conversation", $r4);

        $r7 = new org.waveprotocol.wave.model.conversation.WaveBasedConversationView$ConversationContainer;

        specialinvoke $r7.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView$ConversationContainer: void <init>(org.waveprotocol.wave.model.conversation.WaveBasedConversationView,org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.adt.ObservableSingleton)>(r8, r0, $r6);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.adt.ObservableSingleton: void addListener(java.lang.Object)>($r7);

        $r9 = r8.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.util.IdentityMap containers>;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.util.IdentityMap: void put(java.lang.Object,java.lang.Object)>(r0, $r7);

        $r10 = virtualinvoke $r7.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView$ConversationContainer: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation()>();

        if $r10 == null goto label1;

        $r11 = r8.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.util.Map conversations>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r10);

        specialinvoke r8.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: void triggerOnConversationAdded(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)>($r10);

     label1:
        return $r7;
    }

    private org.waveprotocol.wave.model.conversation.WaveletBasedConversation createNewConversation(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r1;
        org.waveprotocol.wave.model.id.WaveletId $r7;
        java.lang.AssertionError $r6, $r8;
        java.util.Map $r2, $r5;
        org.waveprotocol.wave.model.wave.ObservableWavelet r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r4;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $z0 = <org.waveprotocol.wave.model.conversation.WaveBasedConversationView: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        $z3 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationalId(org.waveprotocol.wave.model.id.WaveletId)>($r7);

        if $z3 != 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void makeWaveletConversational(org.waveprotocol.wave.model.wave.Wavelet)>(r0);

        $z1 = <org.waveprotocol.wave.model.conversation.WaveBasedConversationView: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r5 = r1.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.util.Map conversations>;

        $z2 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z2 != 0 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $r2 = r1.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.util.Map conversations>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversation) $r3;

        return $r4;
    }

    private void triggerOnConversationAdded(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener: void onConversationAdded(org.waveprotocol.wave.model.conversation.ObservableConversation)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnConversationRemoved(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener: void onConversationRemoved(org.waveprotocol.wave.model.conversation.ObservableConversation)>(r5);

        goto label1;

     label2:
        return;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversation createConversation()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createConversation()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversation getConversation(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversation createRoot()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversation getRoot()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.Conversation createConversation()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createConversation()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.Conversation createRoot()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.Conversation getRoot()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.Conversation getConversation(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(java.lang.String)>(r1);

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: void removeListener(org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: void addListener(org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener)>($r2);

        return;
    }

    static org.waveprotocol.wave.model.id.IdGenerator access$000(org.waveprotocol.wave.model.conversation.WaveBasedConversationView)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.id.IdGenerator $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        return $r1;
    }

    static java.util.Map access$100(org.waveprotocol.wave.model.conversation.WaveBasedConversationView)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        java.util.Map $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.util.Map conversations>;

        return $r1;
    }

    static void access$200(org.waveprotocol.wave.model.conversation.WaveBasedConversationView, org.waveprotocol.wave.model.conversation.WaveletBasedConversation)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: void triggerOnConversationRemoved(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)>(r1);

        return;
    }

    static void access$300(org.waveprotocol.wave.model.conversation.WaveBasedConversationView, org.waveprotocol.wave.model.conversation.WaveletBasedConversation)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: void triggerOnConversationAdded(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/conversation/WaveBasedConversationView;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.conversation.WaveBasedConversationView: boolean $assertionsDisabled> = $z1;

        return;
    }
}
