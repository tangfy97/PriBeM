final class com.google.inject.internal.ProviderMethodsModule$LogProvider extends java.lang.Object implements com.google.inject.Provider
{
    private final java.lang.String name;

    public void <init>(java.lang.reflect.Method)
    {
        com.google.inject.internal.ProviderMethodsModule$LogProvider r0;
        java.lang.StringBuilder $r1, $r5, $r6, $r8;
        java.lang.Class $r3;
        java.lang.String $r4, $r7, $r9;
        java.lang.reflect.Method r2;

        r0 := @this: com.google.inject.internal.ProviderMethodsModule$LogProvider;

        r2 := @parameter0: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.google.inject.internal.ProviderMethodsModule$LogProvider: java.lang.String name> = $r9;

        return;
    }

    public java.util.logging.Logger get()
    {
        com.google.inject.internal.ProviderMethodsModule$LogProvider r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        r0 := @this: com.google.inject.internal.ProviderMethodsModule$LogProvider;

        $r1 = r0.<com.google.inject.internal.ProviderMethodsModule$LogProvider: java.lang.String name>;

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        return $r2;
    }

    public volatile java.lang.Object get()
    {
        com.google.inject.internal.ProviderMethodsModule$LogProvider r0;
        java.util.logging.Logger $r1;

        r0 := @this: com.google.inject.internal.ProviderMethodsModule$LogProvider;

        $r1 = virtualinvoke r0.<com.google.inject.internal.ProviderMethodsModule$LogProvider: java.util.logging.Logger get()>();

        return $r1;
    }
}
