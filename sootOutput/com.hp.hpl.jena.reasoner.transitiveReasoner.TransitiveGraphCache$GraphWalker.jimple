class com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker extends com.hp.hpl.jena.util.iterator.NiceIterator implements com.hp.hpl.jena.util.iterator.ExtendedIterator
{
    boolean isDeep;
    com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode node;
    com.hp.hpl.jena.graph.Node root;
    com.hp.hpl.jena.graph.Node predicate;
    java.util.Iterator iterator;
    java.util.Iterator aliasIterator;
    java.util.ArrayList nodeStack;
    java.util.ArrayList iteratorStack;
    com.hp.hpl.jena.graph.Triple next;
    java.util.HashSet visited;

    void <init>(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode, com.hp.hpl.jena.graph.Node, boolean, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r4;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker r0;
        java.util.Iterator $r8, $r9;
        java.util.Set $r7;
        com.hp.hpl.jena.graph.Node r5, r6, $r11, $r12;
        java.util.ArrayList $r1, $r2;
        com.hp.hpl.jena.graph.Triple $r10;
        java.util.HashSet $r3;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker;

        r4 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        r5 := @parameter1: com.hp.hpl.jena.graph.Node;

        z0 := @parameter2: boolean;

        r6 := @parameter3: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.util.iterator.NiceIterator: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator iterator> = null;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator aliasIterator> = null;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.ArrayList nodeStack> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.ArrayList iteratorStack> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.HashSet visited> = $r3;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: boolean isDeep> = z0;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode node> = r4;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Node root> = r5;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Node predicate> = r6;

        $r7 = r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator iterator> = $r8;

        $r9 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Iterator siblingIterator()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator aliasIterator> = $r9;

        $r10 = new com.hp.hpl.jena.graph.Triple;

        $r12 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Node root>;

        $r11 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Node root>;

        specialinvoke $r10.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r12, r6, $r11);

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Triple next> = $r10;

        return;
    }

    public boolean hasNext()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker r0;
        com.hp.hpl.jena.graph.Triple $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Triple next>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.hp.hpl.jena.graph.Triple next()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker;

        r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Triple next>;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: void walkOne()>();

        return r1;
    }

    protected void walkOne()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker r0;
        com.hp.hpl.jena.graph.Node $r8, $r9, $r10, $r16, $r17, $r18;
        java.util.ArrayList $r3;
        java.util.HashSet $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r19, r20;
        java.util.Iterator $r1, $r2, $r4, $r11, $r12, $r13;
        com.hp.hpl.jena.graph.Triple $r7, $r15;
        java.lang.Object $r5, $r14;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator aliasIterator>;

        if $r1 == null goto label2;

        $r12 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator aliasIterator>;

        $z4 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label1;

        $r13 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator aliasIterator>;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r14;

        $r15 = new com.hp.hpl.jena.graph.Triple;

        $r18 = r19.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.graph.Node rdfNode>;

        $r17 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Node predicate>;

        $r16 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Node root>;

        specialinvoke $r15.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r18, $r17, $r16);

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Triple next> = $r15;

        return;

     label1:
        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator aliasIterator> = null;

     label2:
        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator iterator>;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r5;

        $r6 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.HashSet visited>;

        $z2 = virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>(r20);

        if $z2 == 0 goto label4;

        $z3 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: boolean isDeep>;

        if $z3 == 0 goto label3;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: void pushStack(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>(r20);

     label3:
        $r7 = new com.hp.hpl.jena.graph.Triple;

        $r10 = r20.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.graph.Node rdfNode>;

        $r9 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Node predicate>;

        $r8 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Node root>;

        specialinvoke $r7.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r10, $r9, $r8);

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Triple next> = $r7;

        $r11 = virtualinvoke r20.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Iterator siblingIterator()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator aliasIterator> = $r11;

        goto label5;

     label4:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: void walkOne()>();

        return;

     label5:
        goto label8;

     label6:
        $r3 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.ArrayList nodeStack>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label7;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Triple next> = null;

        return;

     label7:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: void popStack()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: void walkOne()>();

     label8:
        return;
    }

    protected void pushStack(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode $r1, r5;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker r0;
        java.util.Iterator $r3, $r7;
        java.util.Set $r6;
        java.util.ArrayList $r2, $r4;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker;

        r5 := @parameter0: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.ArrayList nodeStack>;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode node>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r4 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.ArrayList iteratorStack>;

        $r3 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator iterator>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r6 = r5.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator iterator> = $r7;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode node> = r5;

        return;
    }

    protected void popStack()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode $r7;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker r0;
        java.util.Iterator $r4;
        java.util.ArrayList $r1, $r2, $r5;
        int $i0, i1;
        java.lang.Object $r3, $r6;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.ArrayList nodeStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.ArrayList iteratorStack>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        $r4 = (java.util.Iterator) $r3;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.Iterator iterator> = $r4;

        $r5 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: java.util.ArrayList nodeStack>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        $r7 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r6;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode node> = $r7;

        return;
    }

    public volatile java.lang.Object next()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker r0;
        com.hp.hpl.jena.graph.Triple $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$GraphWalker: com.hp.hpl.jena.graph.Triple next()>();

        return $r1;
    }
}
