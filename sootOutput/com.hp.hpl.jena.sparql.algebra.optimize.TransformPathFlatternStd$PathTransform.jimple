class com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform extends com.hp.hpl.jena.sparql.path.PathVisitorBase
{
    private final com.hp.hpl.jena.graph.Node subject;
    private final com.hp.hpl.jena.graph.Node object;
    private com.hp.hpl.jena.sparql.algebra.Op result;

    com.hp.hpl.jena.sparql.algebra.Op getResult()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result>;

        return $r1;
    }

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform r0;
        com.hp.hpl.jena.graph.Node r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.path.PathVisitorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = null;

        r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object> = r2;

        r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = null;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.path.P_Link)
    {
        com.hp.hpl.jena.sparql.path.P_Link r3;
        com.hp.hpl.jena.sparql.algebra.op.OpTriple $r0;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform r2;
        com.hp.hpl.jena.graph.Node $r4, $r5, $r6;
        com.hp.hpl.jena.graph.Triple $r1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        r3 := @parameter0: com.hp.hpl.jena.sparql.path.P_Link;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r1 = new com.hp.hpl.jena.graph.Triple;

        $r4 = r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.path.P_Link: com.hp.hpl.jena.graph.Node getNode()>();

        $r6 = r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        specialinvoke $r1.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r5, $r6);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: void <init>(com.hp.hpl.jena.graph.Triple)>($r1);

        r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = $r0;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.path.P_ReverseLink)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTriple $r0;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform r2;
        com.hp.hpl.jena.graph.Node $r4, $r5, $r6;
        com.hp.hpl.jena.sparql.path.P_ReverseLink r3;
        com.hp.hpl.jena.graph.Triple $r1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        r3 := @parameter0: com.hp.hpl.jena.sparql.path.P_ReverseLink;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r1 = new com.hp.hpl.jena.graph.Triple;

        $r4 = r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.path.P_ReverseLink: com.hp.hpl.jena.graph.Node getNode()>();

        $r6 = r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        specialinvoke $r1.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r5, $r6);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: void <init>(com.hp.hpl.jena.graph.Triple)>($r1);

        r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = $r0;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.path.P_NegPropSet)
    {
        com.hp.hpl.jena.sparql.path.P_Path0 r23, r24, r25;
        com.hp.hpl.jena.graph.Node $r7, $r8, $r12, $r13, $r17, $r18;
        com.hp.hpl.jena.sparql.algebra.Op $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.sparql.algebra.op.OpPath $r9, r21, r22;
        java.util.List $r3;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform r5;
        com.hp.hpl.jena.sparql.path.P_NegPropSet r2, $r10, $r15;
        java.util.ArrayList $r0, $r1;
        java.util.Iterator $r4, $r11, $r16;
        java.lang.Object $r14, $r19, $r20;

        r5 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        r2 := @parameter0: com.hp.hpl.jena.sparql.path.P_NegPropSet;

        r21 = null;

        r22 = null;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.path.P_NegPropSet: java.util.List getNodes()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r20 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r23 = (com.hp.hpl.jena.sparql.path.P_Path0) $r20;

        $z5 = virtualinvoke r23.<com.hp.hpl.jena.sparql.path.P_Path0: boolean isForward()>();

        if $z5 == 0 goto label02;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r23);

        goto label03;

     label02:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r23);

     label03:
        goto label01;

     label04:
        $z1 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label07;

        $r15 = new com.hp.hpl.jena.sparql.path.P_NegPropSet;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.path.P_NegPropSet: void <init>()>();

        $r16 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z4 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label06;

        $r19 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.hp.hpl.jena.sparql.path.P_Path0) $r19;

        virtualinvoke $r15.<com.hp.hpl.jena.sparql.path.P_NegPropSet: void add(com.hp.hpl.jena.sparql.path.P_Path0)>(r24);

        goto label05;

     label06:
        $r18 = r5.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        $r17 = r5.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        r21 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.op.OpPath make(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r18, $r15, $r17);

     label07:
        $z2 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label10;

        $r10 = new com.hp.hpl.jena.sparql.path.P_NegPropSet;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.path.P_NegPropSet: void <init>()>();

        $r11 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r25 = (com.hp.hpl.jena.sparql.path.P_Path0) $r14;

        virtualinvoke $r10.<com.hp.hpl.jena.sparql.path.P_NegPropSet: void add(com.hp.hpl.jena.sparql.path.P_Path0)>(r25);

        goto label08;

     label09:
        $r13 = r5.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        $r12 = r5.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        r22 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.op.OpPath make(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r13, $r10, $r12);

     label10:
        if r21 != null goto label11;

        if r22 != null goto label11;

        $r8 = r5.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        $r7 = r5.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.op.OpPath make(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>($r8, r2, $r7);

        r5.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = $r9;

        return;

     label11:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op access$000(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r21, r22);

        r5.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = $r6;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.path.P_Inverse)
    {
        com.hp.hpl.jena.sparql.path.Path $r5;
        com.hp.hpl.jena.sparql.path.P_Inverse r4;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform $r0, r1;
        com.hp.hpl.jena.graph.Node $r2, $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r6;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        r4 := @parameter0: com.hp.hpl.jena.sparql.path.P_Inverse;

        $r0 = new com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r2);

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.path.P_Inverse: com.hp.hpl.jena.sparql.path.Path getSubPath()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.sparql.path.Path: void visit(com.hp.hpl.jena.sparql.path.PathVisitor)>($r0);

        $r6 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op getResult()>();

        r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = $r6;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.path.P_Mod)
    {
        com.hp.hpl.jena.sparql.path.P_Mod r0;
        long $l0, $l1, $l3, l5;
        com.hp.hpl.jena.graph.Node $r4, $r5;
        com.hp.hpl.jena.sparql.path.Path $r2, $r3;
        byte $b2, $b4;
        int $i6, $i7;
        java.lang.String $r11;
        com.hp.hpl.jena.sparql.ARQException $r14;
        com.hp.hpl.jena.sparql.algebra.Op $r6, r12;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform r1;
        java.lang.StringBuilder $r9, $r10, $r13;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        r0 := @parameter0: com.hp.hpl.jena.sparql.path.P_Mod;

        $l0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_Mod: long getMin()>();

        $l1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_Mod: long getMax()>();

        $b2 = $l0 cmp $l1;

        $i6 = (int) $b2;

        if $i6 <= 0 goto label1;

        $r14 = new com.hp.hpl.jena.sparql.ARQException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad path: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r11);

        throw $r14;

     label1:
        r12 = null;

        l5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_Mod: long getMin()>();

     label2:
        $l3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_Mod: long getMax()>();

        $b4 = l5 cmp $l3;

        $i7 = (int) $b4;

        if $i7 > 0 goto label3;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_Mod: com.hp.hpl.jena.sparql.path.Path getSubPath()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.path.PathFactory: com.hp.hpl.jena.sparql.path.Path pathFixedLength(com.hp.hpl.jena.sparql.path.Path,long)>($r2, l5);

        $r5 = r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        $r4 = r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op transformPath(com.hp.hpl.jena.sparql.algebra.op.OpPath,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(null, $r5, $r3, $r4);

        r12 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op access$000(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r12, $r6);

        l5 = l5 + 1L;

        goto label2;

     label3:
        r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = r12;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.path.P_FixedLength)
    {
        long $l0, $l1, $l3, $l4, $l5;
        com.hp.hpl.jena.graph.Node r4, $r9, $r10;
        com.hp.hpl.jena.sparql.path.P_FixedLength r0;
        com.hp.hpl.jena.sparql.core.VarAlloc $r2;
        com.hp.hpl.jena.sparql.path.Path $r5;
        byte $b2, $b6;
        int i7, $i8;
        com.hp.hpl.jena.sparql.algebra.Op $r6, r7;
        com.hp.hpl.jena.sparql.core.Var $r3, r8;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform r1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        r0 := @parameter0: com.hp.hpl.jena.sparql.path.P_FixedLength;

        r7 = null;

        r8 = null;

        i7 = 0;

     label1:
        $l0 = (long) i7;

        $l1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_FixedLength: long getCount()>();

        $b2 = $l0 cmp $l1;

        $i8 = (int) $b2;

        if $i8 >= 0 goto label6;

        $r2 = <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.VarAlloc: com.hp.hpl.jena.sparql.core.Var allocVar()>();

        if r8 != null goto label2;

        $r9 = r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        goto label3;

     label2:
        $r9 = r8;

     label3:
        r4 = $r9;

        $l3 = (long) i7;

        $l4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_FixedLength: long getCount()>();

        $l5 = $l4 - 1L;

        $b6 = $l3 cmp $l5;

        if $b6 != 0 goto label4;

        $r10 = r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        goto label5;

     label4:
        $r10 = $r3;

     label5:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_FixedLength: com.hp.hpl.jena.sparql.path.Path getSubPath()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op transformPath(com.hp.hpl.jena.sparql.algebra.op.OpPath,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(null, r4, $r5, $r10);

        r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op access$100(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r7, $r6);

        r8 = $r3;

        i7 = i7 + 1;

        goto label1;

     label6:
        r1.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = r7;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.path.P_Alt)
    {
        com.hp.hpl.jena.graph.Node $r2, $r4, $r6, $r8;
        com.hp.hpl.jena.sparql.path.P_Alt r1;
        com.hp.hpl.jena.sparql.path.Path $r3, $r7;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform r0;
        com.hp.hpl.jena.sparql.algebra.Op $r5, $r9, $r10;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        r1 := @parameter0: com.hp.hpl.jena.sparql.path.P_Alt;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.path.P_Alt: com.hp.hpl.jena.sparql.path.Path getLeft()>();

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op transformPath(com.hp.hpl.jena.sparql.algebra.op.OpPath,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(null, $r2, $r3, $r4);

        $r6 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.path.P_Alt: com.hp.hpl.jena.sparql.path.Path getRight()>();

        $r8 = r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op transformPath(com.hp.hpl.jena.sparql.algebra.op.OpPath,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(null, $r6, $r7, $r8);

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op access$000(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>($r5, $r9);

        r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = $r10;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.path.P_Seq)
    {
        com.hp.hpl.jena.graph.Node $r4, $r8;
        com.hp.hpl.jena.sparql.core.Var $r1;
        com.hp.hpl.jena.sparql.core.VarAlloc $r0;
        com.hp.hpl.jena.sparql.path.Path $r5, $r7;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform r2;
        com.hp.hpl.jena.sparql.path.P_Seq r3;
        com.hp.hpl.jena.sparql.algebra.Op $r6, $r9, $r10;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform;

        r3 := @parameter0: com.hp.hpl.jena.sparql.path.P_Seq;

        $r0 = <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc>;

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.core.VarAlloc: com.hp.hpl.jena.sparql.core.Var allocVar()>();

        $r4 = r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node subject>;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.path.P_Seq: com.hp.hpl.jena.sparql.path.Path getLeft()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op transformPath(com.hp.hpl.jena.sparql.algebra.op.OpPath,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(null, $r4, $r5, $r1);

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.sparql.path.P_Seq: com.hp.hpl.jena.sparql.path.Path getRight()>();

        $r8 = r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.graph.Node object>;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op transformPath(com.hp.hpl.jena.sparql.algebra.op.OpPath,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.graph.Node)>(null, $r1, $r7, $r8);

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd: com.hp.hpl.jena.sparql.algebra.Op access$100(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>($r6, $r9);

        r2.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPathFlatternStd$PathTransform: com.hp.hpl.jena.sparql.algebra.Op result> = $r10;

        return;
    }
}
