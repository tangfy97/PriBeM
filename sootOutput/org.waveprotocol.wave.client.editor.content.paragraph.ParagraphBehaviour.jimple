final enum class org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour extends java.lang.Enum
{
    public static final enum org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour DEFAULT;
    public static final enum org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour HEADING;
    public static final enum org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour LIST;
    private static final org.waveprotocol.wave.model.util.StringMap subtypeMappings;
    private static final org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour[] $VALUES;

    public static org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour[] values()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour[] $r0, $r2;

        $r0 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour[]) $r1;

        return $r2;
    }

    public static org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/waveprotocol/wave/client/editor/content/paragraph/ParagraphBehaviour;", r0);

        $r2 = (org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour of(java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r1;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour r5, $r6, $r8;
        java.lang.Object $r2, $r4, $r7;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.model.util.StringMap subtypeMappings>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: java.lang.Object valueOrDefault(java.lang.Object,java.lang.Object)>(r0, "");

        $r3 = (java.lang.String) $r2;

        $r4 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>($r3);

        r5 = (org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour) $r4;

        $r6 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour DEFAULT>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: java.lang.Object valueOrDefault(java.lang.Object,java.lang.Object)>(r5, $r6);

        $r8 = (org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour) $r7;

        return $r8;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.util.StringMap $r7, $r9, $r11, $r13;
        int i0;
        java.lang.String $r16;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour[] $r3;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour $r0, $r1, $r2, $r4, $r5, $r6, $r8, $r10, $r17;
        java.lang.StringBuilder $r12, $r14, $r15;

        $r0 = new org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: void <init>(java.lang.String,int)>("DEFAULT", 0);

        <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour DEFAULT> = $r0;

        $r1 = new org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: void <init>(java.lang.String,int)>("HEADING", 1);

        <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour HEADING> = $r1;

        $r2 = new org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: void <init>(java.lang.String,int)>("LIST", 2);

        <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour LIST> = $r2;

        $r3 = newarray (org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour)[3];

        $r4 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour DEFAULT>;

        $r3[0] = $r4;

        $r5 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour HEADING>;

        $r3[1] = $r5;

        $r6 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour LIST>;

        $r3[2] = $r6;

        <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour[] $VALUES> = $r3;

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.model.util.StringMap subtypeMappings> = $r7;

        $r9 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.model.util.StringMap subtypeMappings>;

        $r8 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour DEFAULT>;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("p", $r8);

        i0 = 1;

     label1:
        if i0 > 4 goto label2;

        $r13 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.model.util.StringMap subtypeMappings>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("h");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour HEADING>;

        interfaceinvoke $r13.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r16, $r17);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r11 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.model.util.StringMap subtypeMappings>;

        $r10 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphBehaviour LIST>;

        interfaceinvoke $r11.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("li", $r10);

        return;
    }
}
