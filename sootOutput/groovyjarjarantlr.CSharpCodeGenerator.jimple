public class groovyjarjarantlr.CSharpCodeGenerator extends groovyjarjarantlr.CodeGenerator
{
    protected int syntacticPredLevel;
    protected boolean genAST;
    protected boolean saveText;
    boolean usingCustomAST;
    java.lang.String labeledElementType;
    java.lang.String labeledElementASTType;
    java.lang.String labeledElementInit;
    java.lang.String commonExtraArgs;
    java.lang.String commonExtraParams;
    java.lang.String commonLocalVars;
    java.lang.String lt1Value;
    java.lang.String exceptionThrown;
    java.lang.String throwNoViable;
    groovyjarjarantlr.RuleBlock currentRule;
    java.lang.String currentASTResult;
    java.util.Hashtable treeVariableMap;
    java.util.Hashtable declaredASTVariables;
    int astVarNumber;
    protected static final java.lang.String NONUNIQUE;
    public static final int caseSizeThreshold;
    private groovyjarjarantlr.collections.impl.Vector semPreds;
    private java.util.Vector astTypes;
    private static groovyjarjarantlr.CSharpNameSpace nameSpace;
    int saveIndexCreateLevel;
    int blockNestingLevel;

    public void <init>()
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.CSharpCharFormatter $r3;
        java.util.Hashtable $r1, $r2;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        specialinvoke r0.<groovyjarjarantlr.CodeGenerator: void <init>()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel> = 0;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST> = 0;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = 0;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST> = 0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable treeVariableMap> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable declaredASTVariables> = $r2;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int astVarNumber> = 1;

        $r3 = new groovyjarjarantlr.CSharpCharFormatter;

        specialinvoke $r3.<groovyjarjarantlr.CSharpCharFormatter: void <init>()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter> = $r3;

        return;
    }

    protected int addSemPred(java.lang.String)
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1;
        java.lang.String r1;
        groovyjarjarantlr.collections.impl.Vector $r2, $r3;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds>;

        virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: void appendElement(java.lang.Object)>(r1);

        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds>;

        $i0 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $i1 = $i0 - 1;

        return $i1;
    }

    public void exitIfError()
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.Tool $r1, $r2;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $z0 = virtualinvoke $r1.<groovyjarjarantlr.Tool: boolean hasError()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r2.<groovyjarjarantlr.Tool: void fatalError(java.lang.String)>("Exiting due to errors.");

     label1:
        return;
    }

    public void gen()
    {
        java.util.Enumeration $r3, $r6;
        groovyjarjarantlr.LLkGrammarAnalyzer $r10, $r11;
        groovyjarjarantlr.Grammar r14;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.Tool $r13;
        groovyjarjarantlr.TokenManager r8;
        java.util.Hashtable $r2, $r5;
        boolean $z0, $z1, $z2;
        java.io.IOException $r12;
        java.lang.Object $r7, $r9;
        groovyjarjarantlr.DefineGrammarSymbols $r1, $r4;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

     label1:
        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r2 = $r1.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r14 = (groovyjarjarantlr.Grammar) $r9;

        $r10 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        virtualinvoke r14.<groovyjarjarantlr.Grammar: void setGrammarAnalyzer(groovyjarjarantlr.LLkGrammarAnalyzer)>($r10);

        virtualinvoke r14.<groovyjarjarantlr.Grammar: void setCodeGenerator(groovyjarjarantlr.CodeGenerator)>(r0);

        $r11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        interfaceinvoke $r11.<groovyjarjarantlr.LLkGrammarAnalyzer: void setGrammar(groovyjarjarantlr.Grammar)>(r14);

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void setupGrammarParameters(groovyjarjarantlr.Grammar)>(r14);

        virtualinvoke r14.<groovyjarjarantlr.Grammar: void generate()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void exitIfError()>();

        goto label2;

     label3:
        $r4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r5 = $r4.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.util.Enumeration elements()>();

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

        r8 = (groovyjarjarantlr.TokenManager) $r7;

        $z2 = interfaceinvoke r8.<groovyjarjarantlr.TokenManager: boolean isReadOnly()>();

        if $z2 != 0 goto label5;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genTokenTypes(groovyjarjarantlr.TokenManager)>(r8);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genTokenInterchange(groovyjarjarantlr.TokenManager)>(r8);

     label5:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void exitIfError()>();

        goto label4;

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

        $r13 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r13.<groovyjarjarantlr.Tool: void reportException(java.lang.Exception,java.lang.String)>($r12, null);

     label8:
        return;

        catch java.io.IOException from label1 to label6 with label7;
    }

    public void gen(groovyjarjarantlr.ActionElement)
    {
        groovyjarjarantlr.RuleBlock $r5;
        java.lang.StringBuffer $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r25, $r27, $r28, $r30, $r31, $r33, $r34, $r36, $r38, $r39, $r41, $r42, $r45, $r47, $r48, $r49;
        groovyjarjarantlr.ActionElement r1;
        groovyjarjarantlr.ActionTransInfo $r3;
        java.lang.String $r4, $r6, $r7, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r37, $r40, $r43, $r44, $r50;
        groovyjarjarantlr.Grammar $r2, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.io.PrintStream $r46;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ActionElement;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r46 = <java.lang.System: java.io.PrintStream out>;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genAction(");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r46.<java.io.PrintStream: void println(java.lang.String)>($r50);

     label1:
        $z1 = r1.<groovyjarjarantlr.ActionElement: boolean isSemPred>;

        if $z1 == 0 goto label2;

        $r44 = r1.<groovyjarjarantlr.ActionElement: java.lang.String actionText>;

        $i13 = r1.<groovyjarjarantlr.ActionElement: int line>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genSemPred(java.lang.String,int)>($r44, $i13);

        goto label6;

     label2:
        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r2.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z2 == 0 goto label3;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (0==inputState.guessing)");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i12 = $i11 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i12;

     label3:
        $r3 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r3.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r4 = r1.<groovyjarjarantlr.ActionElement: java.lang.String actionText>;

        $i0 = virtualinvoke r1.<groovyjarjarantlr.ActionElement: int getLine()>();

        $r5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r6 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r4, $i0, $r5, $r3);

        $r7 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        if $r7 == null goto label4;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r37 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = (");

        $r40 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r41 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")currentAST.root;");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r43);

     label4:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void printAction(java.lang.String)>($r6);

        $z3 = $r3.<groovyjarjarantlr.ActionTransInfo: boolean assignToRoot>;

        if $z3 == 0 goto label5;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST.root = ");

        $r11 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ( (null != ");

        $r17 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") && (null != ");

        $r20 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".getFirstChild()) )");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r23);

        $i3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i4 = $i3 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i4;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST.child = ");

        $r26 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".getFirstChild();");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r29);

        $i5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i6 = $i5 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i6;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("else");

        $i7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i8 = $i7 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i8;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST.child = ");

        $r32 = $r3.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r35);

        $i9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i10 = $i9 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i10;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("currentAST.advanceChildToEnd();");

     label5:
        $r8 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r8.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z4 == 0 goto label6;

        $i1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i2 = $i1 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i2;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label6:
        return;
    }

    public void gen(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r1;
        groovyjarjarantlr.LLkGrammarAnalyzer $r4;
        groovyjarjarantlr.Grammar $r3;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r8, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r6, $r7, $r13, $r14;
        boolean $z0;
        java.io.PrintStream $r9;
        groovyjarjarantlr.CSharpBlockFinishingInfo $r5;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen(");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r14 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String currentASTResult>;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        if $r2 == null goto label2;

        $r7 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String currentASTResult> = $r7;

     label2:
        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r4.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r5 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, 1);

        $r6 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String throwNoViable>;

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockFinish(groovyjarjarantlr.CSharpBlockFinishingInfo,java.lang.String)>($r5, $r6);

        $i2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String currentASTResult> = $r14;

        return;
    }

    public void gen(groovyjarjarantlr.BlockEndElement)
    {
        java.io.PrintStream $r2;
        groovyjarjarantlr.BlockEndElement r4;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r1, $r3, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r4 := @parameter0: groovyjarjarantlr.BlockEndElement;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genRuleEnd(");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        return;
    }

    public void gen(groovyjarjarantlr.CharLiteralElement)
    {
        groovyjarjarantlr.CharLiteralElement r1;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r15;
        int $i0;
        java.lang.String $r2, $r4, $r7, $r10, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r12;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.CharLiteralElement;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genChar(");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label1:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.CharLiteralElement: java.lang.String getLabel()>();

        if $r2 == null goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<groovyjarjarantlr.CharLiteralElement: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r10);

     label2:
        $z2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        $z1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z1 == 0 goto label3;

        $i0 = virtualinvoke r1.<groovyjarjarantlr.CharLiteralElement: int getAutoGenType()>();

        if $i0 != 1 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = $z3;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>(r1);

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = $z2;

        return;
    }

    public void gen(groovyjarjarantlr.CharRangeElement)
    {
        groovyjarjarantlr.CharRangeElement r0;
        groovyjarjarantlr.Grammar $r22;
        groovyjarjarantlr.CSharpCodeGenerator r2;
        java.lang.StringBuffer $r3, $r4, $r7, $r8, $r11, $r12, $r14, $r16, $r17, $r19, $r20;
        int $i0, $i1;
        java.lang.String $r1, $r5, $r6, $r9, $r10, $r13, $r15, $r18, $r21;
        boolean z0, $z1, $z2, $z4, $z5;

        r2 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.CharRangeElement;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.CharRangeElement: java.lang.String getLabel()>();

        if $r1 == null goto label1;

        $i1 = r2.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        if $i1 != 0 goto label1;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke r0.<groovyjarjarantlr.CharRangeElement: java.lang.String getLabel()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r18 = r2.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r21);

     label1:
        $r22 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r22 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label3;

        $z1 = r2.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.CharRangeElement: int getAutoGenType()>();

        if $i0 != 3 goto label3;

     label2:
        $z5 = 1;

        $z4 = 1;

        goto label4;

     label3:
        $z5 = 0;

        $z4 = 0;

     label4:
        z0 = $z4;

        if $z5 == 0 goto label5;

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_saveIndex = text.Length;");

     label5:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("matchRange(");

        $r5 = r0.<groovyjarjarantlr.CharRangeElement: java.lang.String beginText>;

        $r6 = staticinvoke <groovyjarjarantlr.CSharpCodeGenerator: java.lang.String OctalToUnicode(java.lang.String)>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r9 = r0.<groovyjarjarantlr.CharRangeElement: java.lang.String endText>;

        $r10 = staticinvoke <groovyjarjarantlr.CSharpCodeGenerator: java.lang.String OctalToUnicode(java.lang.String)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r13);

        if z0 == 0 goto label6;

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("text.Length = _saveIndex;");

     label6:
        return;
    }

    public void gen(groovyjarjarantlr.LexerGrammar) throws java.io.IOException
    {
        groovyjarjarantlr.CSharpCodeGenerator r1;
        groovyjarjarantlr.LexerGrammar r0;
        groovyjarjarantlr.Tool $r3;
        groovyjarjarantlr.Grammar $r2;
        groovyjarjarantlr.collections.impl.Vector $r4;
        boolean $z0, $z1;

        r1 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.LexerGrammar;

        $z0 = r0.<groovyjarjarantlr.LexerGrammar: boolean debuggingOutput>;

        if $z0 == 0 goto label1;

        $r4 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r4.<groovyjarjarantlr.collections.impl.Vector: void <init>()>();

        r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds> = $r4;

     label1:
        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r0);

        $r2 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 != 0 goto label2;

        $r3 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Internal error generating lexer");

     label2:
        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genBody(groovyjarjarantlr.LexerGrammar)>(r0);

        return;
    }

    public void gen(groovyjarjarantlr.OneOrMoreBlock)
    {
        groovyjarjarantlr.Lookahead[] $r23, $r40;
        groovyjarjarantlr.LLkGrammarAnalyzer $r17;
        groovyjarjarantlr.CSharpBlockFinishingInfo $r56;
        groovyjarjarantlr.OneOrMoreBlock r1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r19, $r20, $r21, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r34, $r36, $r37, $r44, $r45, $r47, $r48, $r50, $r51, $r52, $r57, $r58, $r59, $r60, $r61, $r62, $r64, $r65, $r67, $r68, $r69;
        java.lang.String $r2, $r10, $r11, $r15, $r22, $r24, $r33, $r38, $r42, $r43, $r46, $r53, r54, r55, $r63, $r66, $r70;
        groovyjarjarantlr.Grammar $r16, $r18, $r39;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, $i25;
        java.io.PrintStream $r35, $r49;
        groovyjarjarantlr.Lookahead $r41;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.OneOrMoreBlock;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label01;

        $r49 = <java.lang.System: java.io.PrintStream out>;

        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen+(");

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>($r53);

     label01:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{ // ( ... )+");

        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        $i2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r2 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        if $r2 == null goto label02;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_cnt_");

        $r46 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        r54 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label03;

     label02:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_cnt");

        $i4 = r1.<groovyjarjarantlr.OneOrMoreBlock: int ID>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        r54 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label03:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("int ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r54);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=0;");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r10);

        $r11 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        if $r11 == null goto label04;

        r55 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        goto label05;

     label04:
        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_loop");

        $i5 = r1.<groovyjarjarantlr.OneOrMoreBlock: int ID>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        r55 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

     label05:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("for (;;)");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i6 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i7 = $i6 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i7;

        $i8 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i9 = $i8 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i9;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r43 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String currentASTResult>;

        $r15 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        if $r15 == null goto label06;

        $r42 = virtualinvoke r1.<groovyjarjarantlr.OneOrMoreBlock: java.lang.String getLabel()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String currentASTResult> = $r42;

     label06:
        $r16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r17 = $r16.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r17.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.OneOrMoreBlock)>(r1);

        z4 = 0;

        $r18 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i20 = $r18.<groovyjarjarantlr.Grammar: int maxk>;

        $z1 = r1.<groovyjarjarantlr.OneOrMoreBlock: boolean greedy>;

        if $z1 != 0 goto label07;

        $i18 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        $r39 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i17 = $r39.<groovyjarjarantlr.Grammar: int maxk>;

        if $i18 > $i17 goto label07;

        $r40 = r1.<groovyjarjarantlr.OneOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $i19 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        $r41 = $r40[$i19];

        $z3 = virtualinvoke $r41.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z3 == 0 goto label07;

        z4 = 1;

        i20 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        goto label08;

     label07:
        $z5 = r1.<groovyjarjarantlr.OneOrMoreBlock: boolean greedy>;

        if $z5 != 0 goto label08;

        $i16 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        if $i16 != 2147483647 goto label08;

        z4 = 1;

     label08:
        if z4 == 0 goto label10;

        $z2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z2 == 0 goto label09;

        $r35 = <java.lang.System: java.io.PrintStream out>;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("nongreedy (...)+ loop; exit depth is ");

        $i15 = r1.<groovyjarjarantlr.OneOrMoreBlock: int exitLookaheadDepth>;

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i15);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>($r38);

     label09:
        $r23 = r1.<groovyjarjarantlr.OneOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $r24 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[],int)>($r23, i20);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("// nongreedy exit test");

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ((");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r54);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" >= 1) && ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") goto ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r55);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_breakloop;");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r33);

     label10:
        $r56 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, 0);

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r54);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" >= 1) { goto ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r55);

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_breakloop; } else { ");

        $r63 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String throwNoViable>;

        $r64 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; }");

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockFinish(groovyjarjarantlr.CSharpBlockFinishingInfo,java.lang.String)>($r56, $r66);

        $r67 = new java.lang.StringBuffer;

        specialinvoke $r67.<java.lang.StringBuffer: void <init>()>();

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r54);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("++;");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r70);

        $i21 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i22 = $i21 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i22;

        $i23 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i24 = $i23 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i24;

        $i25 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel>;

        if $i23 != $i25 goto label11;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = 0;

     label11:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r55);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_breakloop:");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r22);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>(";");

        $i10 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i11 = $i10 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i11;

        $i12 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i13 = $i12 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i13;

        $i14 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel>;

        if $i12 != $i14 goto label12;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = 0;

     label12:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}    // ( ... )+");

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String currentASTResult> = $r43;

        return;
    }

    public void gen(groovyjarjarantlr.ParserGrammar) throws java.io.IOException
    {
        groovyjarjarantlr.CSharpCodeGenerator r1;
        groovyjarjarantlr.Tool $r3;
        groovyjarjarantlr.Grammar $r2;
        groovyjarjarantlr.collections.impl.Vector $r4;
        groovyjarjarantlr.ParserGrammar r0;
        boolean $z0, $z1;

        r1 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.ParserGrammar;

        $z0 = r0.<groovyjarjarantlr.ParserGrammar: boolean debuggingOutput>;

        if $z0 == 0 goto label1;

        $r4 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r4.<groovyjarjarantlr.collections.impl.Vector: void <init>()>();

        r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds> = $r4;

     label1:
        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r0);

        $r2 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2 instanceof groovyjarjarantlr.ParserGrammar;

        if $z1 != 0 goto label2;

        $r3 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Internal error generating parser");

     label2:
        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genBody(groovyjarjarantlr.ParserGrammar)>(r0);

        return;
    }

    public void gen(groovyjarjarantlr.RuleRefElement)
    {
        java.lang.StringBuffer $r5, $r7, $r9, $r10, $r19, $r21, $r22, $r26, $r28, $r29, $r31, $r32, $r38, $r40, $r42, $r43, $r49, $r51, $r52, $r54, $r56, $r58, $r59, $r64, $r66, $r67, $r69, $r70, $r72, $r74, $r76, $r77, $r81, $r83, $r84, $r85;
        groovyjarjarantlr.Grammar $r3, $r12, $r14, $r15, $r16, $r17, $r34, $r45, $r61, $r79, $r88, $r90, $r91;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.io.PrintStream $r82;
        groovyjarjarantlr.RuleBlock $r36, $r47;
        groovyjarjarantlr.GrammarSymbol $r4;
        groovyjarjarantlr.Tool $r6, $r24, $r39, $r55, $r73;
        java.lang.String $r2, $r8, $r11, $r13, $r18, $r20, $r23, $r25, $r27, $r30, $r33, $r35, $r37, $r41, $r44, $r46, $r48, $r50, $r53, $r57, $r60, $r62, $r63, $r65, $r68, $r71, $r75, $r78, $r80, $r86, $r89;
        groovyjarjarantlr.RuleSymbol $r87;
        groovyjarjarantlr.RuleRefElement r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z16, $z17, $z18, $z19;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.RuleRefElement;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label01;

        $r82 = <java.lang.System: java.io.PrintStream out>;

        $r81 = new java.lang.StringBuffer;

        specialinvoke $r81.<java.lang.StringBuffer: void <init>()>();

        $r83 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genRR(");

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r82.<java.io.PrintStream: void println(java.lang.String)>($r86);

     label01:
        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r2);

        $r87 = (groovyjarjarantlr.RuleSymbol) $r4;

        if $r87 == null goto label02;

        $z1 = virtualinvoke $r87.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z1 != 0 goto label03;

     label02:
        $r6 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r8 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not defined");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i1 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r11, $r13, $i0, $i1);

        return;

     label03:
        $z2 = $r87 instanceof groovyjarjarantlr.RuleSymbol;

        if $z2 != 0 goto label04;

        $r73 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r72 = new java.lang.StringBuffer;

        specialinvoke $r72.<java.lang.StringBuffer: void <init>()>();

        $r74 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r75 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r76 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r75);

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not name a grammar rule");

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        $r79 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r80 = virtualinvoke $r79.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i16 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i17 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r73.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r78, $r80, $i16, $i17);

        return;

     label04:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        $r14 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r14 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z3 == 0 goto label05;

        $r63 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r63 == null goto label05;

        $i15 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        if $i15 != 0 goto label05;

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        $r66 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = _t==ASTNULL ? null : ");

        $r68 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $r69 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r68);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r71);

     label05:
        $r88 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z13 = $r88 instanceof groovyjarjarantlr.LexerGrammar;

        if $z13 == 0 goto label07;

        $z12 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z12 == 0 goto label06;

        $i14 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        if $i14 != 3 goto label07;

     label06:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void declareSaveIndexVariableIfNeeded()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_saveIndex = text.Length;");

     label07:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void printTabs()>();

        $r89 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String idAssign>;

        if $r89 == null goto label09;

        $r47 = $r87.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r48 = $r47.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r48 != null goto label08;

        $r55 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r57 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r58 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has no return type");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        $r61 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r62 = virtualinvoke $r61.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i12 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i13 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r55.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r60, $r62, $i12, $i13);

     label08:
        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r50 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String idAssign>;

        $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r53);

        goto label10;

     label09:
        $r15 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r15 instanceof groovyjarjarantlr.LexerGrammar;

        if $z4 != 0 goto label10;

        $i9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        if $i9 != 0 goto label10;

        $r36 = $r87.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r37 = $r36.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r37 == null goto label10;

        $r39 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r41 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r42 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' returns a value");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        $r45 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r46 = virtualinvoke $r45.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i10 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i11 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r39.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r44, $r46, $i10, $i11);

     label10:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void GenRuleInvocation(groovyjarjarantlr.RuleRefElement)>(r1);

        $r90 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z14 = $r90 instanceof groovyjarjarantlr.LexerGrammar;

        if $z14 == 0 goto label12;

        $z11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z11 == 0 goto label11;

        $i8 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        if $i8 != 3 goto label12;

     label11:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void declareSaveIndexVariableIfNeeded()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("text.Length = _saveIndex;");

     label12:
        $i18 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        if $i18 != 0 goto label24;

        $r16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r16.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z5 == 0 goto label15;

        $r34 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r34.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z9 == 0 goto label13;

        $r35 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r35 != null goto label14;

     label13:
        $z10 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        if $z10 == 0 goto label15;

        $i7 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        if $i7 != 1 goto label15;

     label14:
        $z19 = 1;

        $z18 = 1;

        goto label16;

     label15:
        $z19 = 0;

        $z18 = 0;

     label16:
        z6 = $z18;

        if $z19 == 0 goto label17;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (0 == inputState.guessing)");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i6 = $i5 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i6;

     label17:
        $r17 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r17.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z7 == 0 goto label18;

        $r25 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r25 == null goto label18;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = (");

        $r30 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")returnAST;");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r33);

     label18:
        $z16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        if $z16 == 0 goto label22;

        $i4 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getAutoGenType()>();

        lookupswitch($i4)
        {
            case 1: goto label19;
            case 2: goto label21;
            default: goto label22;
        };

     label19:
        $z8 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z8 == 0 goto label20;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("astFactory.addASTChild(ref currentAST, (AST)returnAST);");

        goto label22;

     label20:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("astFactory.addASTChild(ref currentAST, returnAST);");

        goto label22;

     label21:
        $r24 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r24.<groovyjarjarantlr.Tool: void error(java.lang.String)>("Internal: encountered ^ after rule reference");

        goto label22;

     label22:
        $r91 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z17 = $r91 instanceof groovyjarjarantlr.LexerGrammar;

        if $z17 == 0 goto label23;

        $r18 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r18 == null goto label23;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = returnToken_;");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r23);

     label23:
        if z6 == 0 goto label24;

        $i2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label24:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        return;
    }

    public void gen(groovyjarjarantlr.StringLiteralElement)
    {
        groovyjarjarantlr.Grammar $r17;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r15;
        int $i0, $i1;
        java.lang.String $r2, $r4, $r7, $r10, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r12;
        groovyjarjarantlr.StringLiteralElement r1;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.StringLiteralElement;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genString(");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label1:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String getLabel()>();

        if $r2 == null goto label2;

        $i1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        if $i1 != 0 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r10);

     label2:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r1);

        $z1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        $z2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: int getAutoGenType()>();

        if $i0 != 1 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = $z3;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>(r1);

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = $z1;

        $r17 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r17 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label5;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling();");

     label5:
        return;
    }

    public void gen(groovyjarjarantlr.TokenRangeElement)
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.TokenRangeElement r1;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r15, $r16, $r19, $r20;
        int $i0;
        java.lang.String $r2, $r4, $r7, $r10, $r13, $r14, $r17, $r18, $r21;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TokenRangeElement;

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        $r2 = virtualinvoke r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String getLabel()>();

        if $r2 == null goto label1;

        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String getLabel()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r10);

     label1:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r1);

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("matchRange(");

        $r13 = r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String beginText>;

        $r14 = staticinvoke <groovyjarjarantlr.CSharpCodeGenerator: java.lang.String OctalToUnicode(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r17 = r1.<groovyjarjarantlr.TokenRangeElement: java.lang.String endText>;

        $r18 = staticinvoke <groovyjarjarantlr.CSharpCodeGenerator: java.lang.String OctalToUnicode(java.lang.String)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r21);

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)>(r1);

        return;
    }

    public void gen(groovyjarjarantlr.TokenRefElement)
    {
        groovyjarjarantlr.Grammar $r1, $r19;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.Tool $r12;
        java.lang.StringBuffer $r4, $r6, $r7, $r9, $r10, $r13, $r15, $r16, $r17;
        int $i0;
        java.lang.String $r3, $r5, $r8, $r11, $r18;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r14;
        groovyjarjarantlr.TokenRefElement r2;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.TokenRefElement;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label1;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genTokenRef(");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label1:
        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label2;

        $r12 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r12.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Token reference found in lexer");

     label2:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)>(r2);

        $r3 = virtualinvoke r2.<groovyjarjarantlr.TokenRefElement: java.lang.String getLabel()>();

        if $r3 == null goto label3;

        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        if $i0 != 0 goto label3;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke r2.<groovyjarjarantlr.TokenRefElement: java.lang.String getLabel()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r8 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r11);

     label3:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r2);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>(r2);

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)>(r2);

        $r19 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r19 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z2 == 0 goto label4;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling();");

     label4:
        return;
    }

    public void gen(groovyjarjarantlr.TreeElement)
    {
        groovyjarjarantlr.collections.impl.Vector $r49;
        groovyjarjarantlr.Tool $r33, $r37;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r27, $r28, $r29, $r30, $r40, $r43, $r44, $r46, $r47;
        java.lang.String $r6, $r8, $r20, $r25, $r31, $r34, $r38, $r42, $r45, $r48;
        groovyjarjarantlr.GrammarAtom $r7, $r9, $r10, $r11, $r13, $r14, $r35, $r39, $r41;
        groovyjarjarantlr.Grammar $r12, $r15, $r32, $r36;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.Alternative $r26;
        groovyjarjarantlr.AlternativeElement r50;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11;
        groovyjarjarantlr.TreeElement r3;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.TreeElement;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AST __t");

        $i0 = r3.<groovyjarjarantlr.TreeElement: int ID>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = _t;");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r6);

        $r7 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.GrammarAtom: java.lang.String getLabel()>();

        if $r8 == null goto label01;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $r42 = virtualinvoke $r41.<groovyjarjarantlr.GrammarAtom: java.lang.String getLabel()>();

        $r43 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = (ASTNULL == _t) ? null : (");

        $r45 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r46 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")_t;");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r48);

     label01:
        $r9 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $i1 = virtualinvoke $r9.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i1 != 3 goto label02;

        $r37 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r36 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r38 = virtualinvoke $r36.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i8 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: int getLine()>();

        $i9 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: int getColumn()>();

        virtualinvoke $r37.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Suffixing a root node with \'!\' is not implemented", $r38, $i8, $i9);

        $r39 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        virtualinvoke $r39.<groovyjarjarantlr.GrammarAtom: void setAutoGenType(int)>(1);

     label02:
        $r10 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $i2 = virtualinvoke $r10.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i2 != 2 goto label03;

        $r33 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r32 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r34 = virtualinvoke $r32.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i6 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: int getLine()>();

        $i7 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: int getColumn()>();

        virtualinvoke $r33.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Suffixing a root node with \'^\' is redundant; already a root", $r34, $i6, $i7);

        $r35 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        virtualinvoke $r35.<groovyjarjarantlr.GrammarAtom: void setAutoGenType(int)>(1);

     label03:
        $r11 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>($r11);

        $r12 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r12.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z0 == 0 goto label04;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ASTPair __currentAST");

        $i5 = r3.<groovyjarjarantlr.TreeElement: int ID>;

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = currentAST.copy();");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r31);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("currentAST.root = currentAST.child;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("currentAST.child = null;");

     label04:
        $r13 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $z1 = $r13 instanceof groovyjarjarantlr.WildcardElement;

        if $z1 == 0 goto label05;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (null == _t) throw new MismatchedTokenException();");

        goto label06;

     label05:
        $r14 = r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genMatch(groovyjarjarantlr.GrammarAtom)>($r14);

     label06:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_t = _t.getFirstChild();");

        i10 = 0;

     label07:
        $r49 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i11 = virtualinvoke $r49.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i10 >= $i11 goto label10;

        $r26 = virtualinvoke r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i10);

        r50 = $r26.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

     label08:
        if r50 == null goto label09;

        virtualinvoke r50.<groovyjarjarantlr.AlternativeElement: void generate()>();

        r50 = r50.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        goto label08;

     label09:
        i10 = i10 + 1;

        goto label07;

     label10:
        $r15 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r15.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z2 == 0 goto label11;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("currentAST = __currentAST");

        $i4 = r3.<groovyjarjarantlr.TreeElement: int ID>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r25);

     label11:
        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_t = __t");

        $i3 = r3.<groovyjarjarantlr.TreeElement: int ID>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r20);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling();");

        return;
    }

    public void gen(groovyjarjarantlr.TreeWalkerGrammar) throws java.io.IOException
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.Tool $r3;
        groovyjarjarantlr.TreeWalkerGrammar r1;
        groovyjarjarantlr.Grammar $r2;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.TreeWalkerGrammar;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void setGrammar(groovyjarjarantlr.Grammar)>(r1);

        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r2 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 != 0 goto label1;

        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Internal error generating tree-walker");

     label1:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBody(groovyjarjarantlr.TreeWalkerGrammar)>(r1);

        return;
    }

    public void gen(groovyjarjarantlr.WildcardElement)
    {
        groovyjarjarantlr.Grammar $r3, $r10, $r19, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        groovyjarjarantlr.WildcardElement r0;
        groovyjarjarantlr.CSharpCodeGenerator r2;
        java.lang.StringBuffer $r4, $r5, $r7, $r8, $r11, $r13, $r14, $r16, $r17;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r6, $r9, $r12, $r15, $r18;

        r2 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.WildcardElement;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.WildcardElement: java.lang.String getLabel()>();

        if $r1 == null goto label1;

        $i2 = r2.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        if $i2 != 0 goto label1;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke r0.<groovyjarjarantlr.WildcardElement: java.lang.String getLabel()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r15 = r2.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r18);

     label1:
        specialinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r0);

        $r19 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r19 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label2;

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (null == _t) throw new MismatchedTokenException();");

        goto label7;

     label2:
        $r3 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label6;

        $r10 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r10 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label4;

        $z3 = r2.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z3 == 0 goto label3;

        $i1 = virtualinvoke r0.<groovyjarjarantlr.WildcardElement: int getAutoGenType()>();

        if $i1 != 3 goto label4;

     label3:
        specialinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void declareSaveIndexVariableIfNeeded()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_saveIndex = text.Length;");

     label4:
        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("matchNot(EOF/*_CHAR*/);");

        $r20 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r20 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label7;

        $z2 = r2.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z2 == 0 goto label5;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.WildcardElement: int getAutoGenType()>();

        if $i0 != 3 goto label7;

     label5:
        specialinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void declareSaveIndexVariableIfNeeded()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("text.Length = _saveIndex;");

        goto label7;

     label6:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("matchNot(");

        $r6 = specialinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getValueString(int)>(1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r9);

     label7:
        $r21 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r21 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z6 == 0 goto label8;

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling();");

     label8:
        return;
    }

    public void gen(groovyjarjarantlr.ZeroOrMoreBlock)
    {
        groovyjarjarantlr.Lookahead[] $r14, $r29;
        groovyjarjarantlr.LLkGrammarAnalyzer $r8;
        groovyjarjarantlr.ZeroOrMoreBlock r1;
        groovyjarjarantlr.CSharpBlockFinishingInfo $r40;
        java.lang.StringBuffer $r3, $r4, $r5, $r10, $r11, $r12, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r25, $r26, $r33, $r35, $r36, $r37, $r41, $r42, $r43, $r44;
        java.lang.String $r2, $r6, $r13, $r15, $r22, $r27, $r31, $r32, $r38, r39, $r45;
        groovyjarjarantlr.Grammar $r7, $r9, $r28;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, $i23, $i24;
        java.io.PrintStream $r24, $r34;
        groovyjarjarantlr.Lookahead $r30;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.ZeroOrMoreBlock;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label01;

        $r34 = <java.lang.System: java.io.PrintStream out>;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen*(");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r38);

     label01:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{    // ( ... )*");

        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        $i2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r2 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: java.lang.String getLabel()>();

        if $r2 == null goto label02;

        r39 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: java.lang.String getLabel()>();

        goto label03;

     label02:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_loop");

        $i4 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int ID>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        r39 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label03:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("for (;;)");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i6 = $i5 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i6;

        $i7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i8 = $i7 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i8;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>(r1);

        $r32 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String currentASTResult>;

        $r6 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: java.lang.String getLabel()>();

        if $r6 == null goto label04;

        $r31 = virtualinvoke r1.<groovyjarjarantlr.ZeroOrMoreBlock: java.lang.String getLabel()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String currentASTResult> = $r31;

     label04:
        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r8 = $r7.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r8.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.ZeroOrMoreBlock)>(r1);

        z4 = 0;

        $r9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i19 = $r9.<groovyjarjarantlr.Grammar: int maxk>;

        $z1 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: boolean greedy>;

        if $z1 != 0 goto label05;

        $i17 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        $r28 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i16 = $r28.<groovyjarjarantlr.Grammar: int maxk>;

        if $i17 > $i16 goto label05;

        $r29 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $i18 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        $r30 = $r29[$i18];

        $z3 = virtualinvoke $r30.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z3 == 0 goto label05;

        z4 = 1;

        i19 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        goto label06;

     label05:
        $z5 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: boolean greedy>;

        if $z5 != 0 goto label06;

        $i15 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        if $i15 != 2147483647 goto label06;

        z4 = 1;

     label06:
        if z4 == 0 goto label08;

        $z2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z2 == 0 goto label07;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("nongreedy (...)* loop; exit depth is ");

        $i14 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: int exitLookaheadDepth>;

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i14);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r27);

     label07:
        $r14 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: groovyjarjarantlr.Lookahead[] exitCache>;

        $r15 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[],int)>($r14, i19);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("// nongreedy exit test");

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") goto ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_breakloop;");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r22);

     label08:
        $r40 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, 0);

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("goto ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_breakloop;");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockFinish(groovyjarjarantlr.CSharpBlockFinishingInfo,java.lang.String)>($r40, $r45);

        $i20 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i21 = $i20 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i21;

        $i22 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i23 = $i22 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i23;

        $i24 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel>;

        if $i22 != $i24 goto label09;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = 0;

     label09:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_breakloop:");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r13);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>(";");

        $i9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i10 = $i9 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i10;

        $i11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i12 = $i11 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i12;

        $i13 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel>;

        if $i11 != $i13 goto label10;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = 0;

     label10:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}    // ( ... )*");

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String currentASTResult> = $r32;

        return;
    }

    protected void genAlt(groovyjarjarantlr.Alternative, groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.Grammar $r5;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        groovyjarjarantlr.RuleBlock r8;
        groovyjarjarantlr.Alternative r1;
        groovyjarjarantlr.AlternativeElement r25;
        groovyjarjarantlr.AlternativeBlock r3;
        groovyjarjarantlr.ExceptionSpec $r2, $r24, $r26;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.Tool $r6;
        java.lang.StringBuffer $r9, $r11, $r12, $r14, $r16, $r17, $r19, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r4, $r7, $r10, $r13, $r15, $r18, $r21;
        java.util.Hashtable $r22, $r23;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.Alternative;

        r3 := @parameter1: groovyjarjarantlr.AlternativeBlock;

        z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        $z1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        if $z1 == 0 goto label01;

        $z6 = virtualinvoke r1.<groovyjarjarantlr.Alternative: boolean getAutoGen()>();

        if $z6 == 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST> = $z7;

        $z8 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        $z9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z9 == 0 goto label03;

        $z5 = virtualinvoke r1.<groovyjarjarantlr.Alternative: boolean getAutoGen()>();

        if $z5 == 0 goto label03;

        $z10 = 1;

        goto label04;

     label03:
        $z10 = 0;

     label04:
        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = $z10;

        $r22 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r23 = new java.util.Hashtable;

        specialinvoke $r23.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable treeVariableMap> = $r23;

        $r24 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        if $r24 == null goto label05;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("try        // for error handling");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i5;

     label05:
        r25 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

     label06:
        $z11 = r25 instanceof groovyjarjarantlr.BlockEndElement;

        if $z11 != 0 goto label07;

        virtualinvoke r25.<groovyjarjarantlr.AlternativeElement: void generate()>();

        r25 = r25.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        goto label06;

     label07:
        $z2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        if $z2 == 0 goto label10;

        $z3 = r3 instanceof groovyjarjarantlr.RuleBlock;

        if $z3 == 0 goto label09;

        r8 = (groovyjarjarantlr.RuleBlock) r3;

        $z4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z4 == 0 goto label08;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke r8.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = (");

        $r18 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")currentAST.root;");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r21);

        goto label10;

     label08:
        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke r8.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = currentAST.root;");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r13);

        goto label10;

     label09:
        $r4 = virtualinvoke r3.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        if $r4 == null goto label10;

        $r6 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r7 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r3.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $i3 = virtualinvoke r3.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Labeled subrules not yet supported", $r7, $i2, $i3);

     label10:
        $r26 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        if $r26 == null goto label11;

        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $r2 = r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genErrorHandler(groovyjarjarantlr.ExceptionSpec)>($r2);

     label11:
        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST> = z0;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = $z8;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable treeVariableMap> = $r22;

        return;
    }

    protected void genBitsets(groovyjarjarantlr.collections.impl.Vector, int)
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, i1, i2;
        java.lang.Object $r2;
        groovyjarjarantlr.collections.impl.BitSet r3;
        groovyjarjarantlr.collections.impl.Vector r1;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.Vector;

        i1 := @parameter1: int;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i2 >= $i0 goto label2;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i2);

        r3 = (groovyjarjarantlr.collections.impl.BitSet) $r2;

        virtualinvoke r3.<groovyjarjarantlr.collections.impl.BitSet: void growToInclude(int)>(i1);

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBitSet(groovyjarjarantlr.collections.impl.BitSet,int)>(r3, i2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void genBitSet(groovyjarjarantlr.collections.impl.BitSet, int)
    {
        byte $b12, $b18;
        long $l8, $l10, $l11, $l15, $l16, $l17;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r8, $r9, $r10, $r11, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r41, $r42, $r44, $r45;
        java.lang.String $r3, $r6, $r12, $r16, $r20, $r24, $r31, $r40, $r43, $r46;
        groovyjarjarantlr.collections.impl.BitSet r7;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        long[] $r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i13, $i14, i19, $i20, i21;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r7 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        i0 := @parameter1: int;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("private static long[] mk_");

        $r3 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getBitsetName(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("()");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r6);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i2;

        $i3 = virtualinvoke r7.<groovyjarjarantlr.collections.impl.BitSet: int lengthInLongWords()>();

        if $i3 >= 8 goto label1;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("long[] data = { ");

        $r43 = virtualinvoke r7.<groovyjarjarantlr.collections.impl.BitSet: java.lang.String toStringOfWords()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("};");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r46);

        goto label7;

     label1:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("long[] data = new long[");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("];");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r12);

        $r13 = virtualinvoke r7.<groovyjarjarantlr.collections.impl.BitSet: long[] toPackedArray()>();

        i19 = 0;

     label2:
        $i20 = lengthof $r13;

        if i19 >= $i20 goto label7;

        $i7 = i19 + 1;

        $i6 = lengthof $r13;

        if $i7 == $i6 goto label3;

        $l11 = $r13[i19];

        $i9 = i19 + 1;

        $l10 = $r13[$i9];

        $b12 = $l11 cmp $l10;

        if $b12 == 0 goto label4;

     label3:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("data[");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i19);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]=");

        $l8 = $r13[i19];

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l8);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L;");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r31);

        i19 = i19 + 1;

        goto label2;

     label4:
        i21 = i19 + 1;

     label5:
        $i13 = lengthof $r13;

        if i21 >= $i13 goto label6;

        $l17 = $r13[i21];

        $l16 = $r13[i19];

        $b18 = $l17 cmp $l16;

        if $b18 != 0 goto label6;

        i21 = i21 + 1;

        goto label5;

     label6:
        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("for (int i = ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i19);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; i<=");

        $i14 = i21 - 1;

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i14);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; i++) { data[i]=");

        $l15 = $r13[i19];

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l15);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L; }");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r40);

        i19 = i21;

        goto label2;

     label7:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("return data;");

        $i4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public static readonly BitSet ");

        $r16 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getBitsetName(int)>(i0);

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = new BitSet(");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mk_");

        $r20 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getBitsetName(int)>(i0);

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("()");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r24);

        return;
    }

    protected java.lang.String getBitsetName(int)
    {
        groovyjarjarantlr.CSharpCodeGenerator r5;
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        r5 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tokenSet_");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private void genBlockFinish(groovyjarjarantlr.CSharpBlockFinishingInfo, java.lang.String)
    {
        groovyjarjarantlr.CSharpCodeGenerator r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        groovyjarjarantlr.CSharpBlockFinishingInfo r0;

        r1 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.CSharpBlockFinishingInfo;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean needAnErrorClause>;

        if $z0 == 0 goto label4;

        $z4 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean generatedAnIf>;

        if $z4 != 0 goto label1;

        $z6 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean generatedSwitch>;

        if $z6 == 0 goto label4;

     label1:
        $z5 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean generatedAnIf>;

        if $z5 == 0 goto label2;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("else");

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        goto label3;

     label2:
        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

     label3:
        $i4 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i5 = $i4 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i5;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>(r2);

        $i6 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i7;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label4:
        $r7 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: java.lang.String postscript>;

        if $r7 == null goto label8;

        $z1 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean needAnErrorClause>;

        if $z1 == 0 goto label7;

        $z2 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean generatedSwitch>;

        if $z2 == 0 goto label7;

        $z3 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean generatedAnIf>;

        if $z3 != 0 goto label7;

        if r2 == null goto label7;

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("throw");

        if $i0 == 0 goto label5;

        $i2 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("goto");

        if $i2 != 0 goto label6;

     label5:
        $r3 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: java.lang.String postscript>;

        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("break;");

        $i3 = $i1 + 6;

        $r4 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: java.lang.String postscript>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i3);

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r5);

        goto label8;

     label6:
        $r6 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: java.lang.String postscript>;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r6);

        goto label8;

     label7:
        $r8 = r0.<groovyjarjarantlr.CSharpBlockFinishingInfo: java.lang.String postscript>;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r8);

     label8:
        return;
    }

    protected void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.CSharpCodeGenerator r2;
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.RuleBlock $r4;
        int $i0;
        java.lang.String $r1, $r3, $r5;

        r2 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        if $r1 == null goto label1;

        $r3 = r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $r4 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r5 = virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r3, $i0, $r4, null);

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void printAction(java.lang.String)>($r5);

     label1:
        return;
    }

    protected void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r30;
        groovyjarjarantlr.collections.impl.Vector $r2, $r3, $r4;
        groovyjarjarantlr.RuleBlock r1;
        java.lang.StringBuffer $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r25, $r31, $r33, $r34, $r36, $r37, $r39, $r40, $r48, $r50, $r51, $r53, $r54, $r56, $r57;
        java.lang.String $r11, $r14, $r17, $r20, $r23, $r26, $r32, $r35, $r38, $r41, $r44, $r46, $r49, $r52, $r55, $r58;
        groovyjarjarantlr.GrammarAtom $r43, r45;
        groovyjarjarantlr.Grammar $r8, $r9, $r28, $r42, $r47, $r59;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        groovyjarjarantlr.AlternativeElement r6;
        groovyjarjarantlr.AlternativeBlock r0, $r27, $r29;
        groovyjarjarantlr.CSharpCodeGenerator r7;
        int $i0, i1;
        java.lang.Object $r5;

        r7 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $z0 = r0 instanceof groovyjarjarantlr.RuleBlock;

        if $z0 == 0 goto label9;

        r1 = (groovyjarjarantlr.RuleBlock) r0;

        $r2 = r1.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        if $r2 == null goto label9;

        i1 = 0;

     label1:
        $r3 = r1.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $i0 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i1 >= $i0 goto label9;

        $r4 = r1.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i1);

        r6 = (groovyjarjarantlr.AlternativeElement) $r5;

        $z1 = r6 instanceof groovyjarjarantlr.RuleRefElement;

        if $z1 != 0 goto label2;

        $z9 = r6 instanceof groovyjarjarantlr.AlternativeBlock;

        if $z9 == 0 goto label6;

        $z11 = r6 instanceof groovyjarjarantlr.RuleBlock;

        if $z11 != 0 goto label6;

        $z12 = r6 instanceof groovyjarjarantlr.SynPredBlock;

        if $z12 != 0 goto label6;

     label2:
        $z2 = r6 instanceof groovyjarjarantlr.RuleRefElement;

        if $z2 != 0 goto label3;

        $r27 = (groovyjarjarantlr.AlternativeBlock) r6;

        $z5 = $r27.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z5 == 0 goto label3;

        $r30 = r7.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        $r29 = (groovyjarjarantlr.AlternativeBlock) r6;

        $r28 = r7.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r28 instanceof groovyjarjarantlr.LexerGrammar;

        $z7 = interfaceinvoke $r30.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean subruleCanBeInverted(groovyjarjarantlr.AlternativeBlock,boolean)>($r29, $z6);

        if $z7 == 0 goto label3;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = r7.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementType>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r35 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r38 = r7.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementInit>;

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r41);

        $r42 = r7.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r42.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z8 == 0 goto label8;

        virtualinvoke r7.<groovyjarjarantlr.CSharpCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement)>(r6);

        goto label8;

     label3:
        $r47 = r7.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z13 = $r47.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z13 == 0 goto label4;

        virtualinvoke r7.<groovyjarjarantlr.CSharpCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement)>(r6);

     label4:
        $r8 = r7.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r8 instanceof groovyjarjarantlr.LexerGrammar;

        if $z3 == 0 goto label5;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("IToken ");

        $r23 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = null;");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r26);

     label5:
        $r9 = r7.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r9 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label8;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = r7.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementType>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r14 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r17 = r7.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementInit>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r20);

        goto label8;

     label6:
        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r49 = r7.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementType>;

        $r50 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r52 = virtualinvoke r6.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r55 = r7.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementInit>;

        $r56 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r7.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r58);

        $r59 = r7.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z14 = $r59.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z14 == 0 goto label8;

        $z10 = r6 instanceof groovyjarjarantlr.GrammarAtom;

        if $z10 == 0 goto label7;

        $r43 = (groovyjarjarantlr.GrammarAtom) r6;

        $r44 = virtualinvoke $r43.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r44 == null goto label7;

        r45 = (groovyjarjarantlr.GrammarAtom) r6;

        $r46 = virtualinvoke r45.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        virtualinvoke r7.<groovyjarjarantlr.CSharpCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r6, $r46);

        goto label8;

     label7:
        virtualinvoke r7.<groovyjarjarantlr.CSharpCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement)>(r6);

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        return;
    }

    public void genBody(groovyjarjarantlr.LexerGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r48, $r52, $r68;
        java.lang.StringBuffer $r13, $r16, $r25, $r26, $r29, $r32, $r33, $r37, $r38, $r39, $r42, $r43, $r44, $r71, $r74, $r75, $r82, $r84, $r85, $r86, $r87, $r92, $r93, $r103, $r106, $r107, $r108, $r124, $r127, $r128, $r131, $r134, $r135, $r138, $r141, $r142, $r149, $r150, $r151, $r152, $r153, $r154, $r155, $r156, $r157, $r158, $r159, $r160;
        groovyjarjarantlr.DefineGrammarSymbols $r3;
        groovyjarjarantlr.StringLiteralSymbol r146;
        groovyjarjarantlr.Grammar $r1, $r7, $r10, $r14, $r17, $r19, $r30, $r35, $r46, $r49, $r50, $r53, $r54, $r64, $r66, $r78, $r95, $r98, $r104, $r110, $r114, $r116, $r119, $r125, $r132, $r139, $r144;
        groovyjarjarantlr.Token $r8, $r97, $r113, $r117, $r120;
        groovyjarjarantlr.TokenSymbol $r80;
        groovyjarjarantlr.LexerGrammar r6, $r55;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, i21, $i22;
        java.lang.Object $r21, $r62, $r69, $r77, $r112;
        groovyjarjarantlr.CSharpNameSpace $r5, $r58, $r61, $r100;
        groovyjarjarantlr.TokenManager $r47, $r65, $r79, $r115;
        groovyjarjarantlr.collections.impl.Vector $r51, $r57, $r67;
        java.io.PrintWriter $r59, $r60, $r99;
        groovyjarjarantlr.RuleBlock $r121;
        groovyjarjarantlr.GrammarSymbol r147;
        java.lang.String $r2, $r4, $r9, $r11, $r15, $r18, $r22, $r23, $r27, $r31, $r34, $r40, $r45, $r63, $r73, $r76, $r83, $r88, $r89, $r90, $r94, $r96, r101, $r105, $r109, $r118, $r122, $r126, $r129, $r133, $r136, $r140, $r143, r145;
        groovyjarjarantlr.RuleSymbol $r72, r148;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        groovyjarjarantlr.collections.impl.BitSet $r56;
        java.util.Hashtable $r20, $r111;
        char $c16;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r6 := @parameter0: groovyjarjarantlr.LexerGrammar;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void setupOutput(java.lang.String)>($r2);

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST> = 0;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genHeader()>();

        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r4);

        $r5 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        if $r5 == null goto label01;

        $r100 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        $r99 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r100.<groovyjarjarantlr.CSharpNameSpace: void emitDeclarations(java.io.PrintWriter)>($r99);

     label01:
        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("// Generate header specific to lexer CSharp file");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using System;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using Stream                          = System.IO.Stream;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using TextReader                      = System.IO.TextReader;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using Hashtable                       = System.Collections.Hashtable;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using Comparer                        = System.Collections.Comparer;");

        $z0 = r6.<groovyjarjarantlr.LexerGrammar: boolean caseSensitiveLiterals>;

        if $z0 != 0 goto label02;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using CaseInsensitiveHashCodeProvider = System.Collections.CaseInsensitiveHashCodeProvider;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using CaseInsensitiveComparer         = System.Collections.CaseInsensitiveComparer;");

     label02:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using TokenStreamException            = antlr.TokenStreamException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using TokenStreamIOException          = antlr.TokenStreamIOException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using TokenStreamRecognitionException = antlr.TokenStreamRecognitionException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using CharStreamException             = antlr.CharStreamException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using CharStreamIOException           = antlr.CharStreamIOException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ANTLRException                  = antlr.ANTLRException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using CharScanner                     = antlr.CharScanner;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using InputBuffer                     = antlr.InputBuffer;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ByteBuffer                      = antlr.ByteBuffer;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using CharBuffer                      = antlr.CharBuffer;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using Token                           = antlr.Token;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using IToken                          = antlr.IToken;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using CommonToken                     = antlr.CommonToken;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using SemanticException               = antlr.SemanticException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using RecognitionException            = antlr.RecognitionException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using NoViableAltForCharException     = antlr.NoViableAltForCharException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using MismatchedCharException         = antlr.MismatchedCharException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using TokenStream                     = antlr.TokenStream;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using LexerSharedInputState           = antlr.LexerSharedInputState;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using BitSet                          = antlr.collections.impl.BitSet;");

        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r8 = $r7.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r9);

        $r10 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r11 = $r10.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        if $r11 == null goto label03;

        $r98 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        r101 = $r98.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        goto label04;

     label03:
        $r149 = new java.lang.StringBuffer;

        specialinvoke $r149.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r149.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.");

        $r14 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r15 = virtualinvoke $r14.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        r101 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        $r17 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r18 = $r17.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        if $r18 == null goto label05;

        $r95 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r96 = $r95.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>($r96);

     label05:
        $r19 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r20 = $r19.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r21 = virtualinvoke $r20.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderPrefix");

        $r97 = (groovyjarjarantlr.Token) $r21;

        if $r97 != null goto label06;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>("public ");

        goto label08;

     label06:
        $r22 = virtualinvoke $r97.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r23 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r22, "\"", "\"");

        if $r23 != null goto label07;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>("public ");

        goto label08;

     label07:
        $r150 = new java.lang.StringBuffer;

        specialinvoke $r150.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r150.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r27);

     label08:
        $r151 = new java.lang.StringBuffer;

        specialinvoke $r151.<java.lang.StringBuffer: void <init>()>();

        $r103 = virtualinvoke $r151.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class ");

        $r104 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r105 = virtualinvoke $r104.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r106 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r105);

        $r107 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r108 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r101);

        $r109 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r109);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>(", TokenStream");

        $r110 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r111 = $r110.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r112 = virtualinvoke $r111.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderSuffix");

        $r113 = (groovyjarjarantlr.Token) $r112;

        if $r113 == null goto label09;

        $r89 = virtualinvoke $r113.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r90 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r89, "\"", "\"");

        if $r90 == null goto label09;

        $r152 = new java.lang.StringBuffer;

        specialinvoke $r152.<java.lang.StringBuffer: void <init>()>();

        $r92 = virtualinvoke $r152.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r90);

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r94);

     label09:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>(" {");

        $i18 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i19 = $i18 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i19;

        $r114 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r115 = $r114.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genTokenDefinitions(groovyjarjarantlr.TokenManager)>($r115);

        $r116 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r117 = $r116.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $r118 = virtualinvoke $r117.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r119 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r120 = $r119.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $i20 = virtualinvoke $r120.<groovyjarjarantlr.Token: int getLine()>();

        $r121 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r122 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r118, $i20, $r121, null);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r122);

        $r153 = new java.lang.StringBuffer;

        specialinvoke $r153.<java.lang.StringBuffer: void <init>()>();

        $r124 = virtualinvoke $r153.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r125 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r126 = virtualinvoke $r125.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r127 = virtualinvoke $r124.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r126);

        $r128 = virtualinvoke $r127.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(Stream ins) : this(new ByteBuffer(ins))");

        $r129 = virtualinvoke $r128.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r129);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r154 = new java.lang.StringBuffer;

        specialinvoke $r154.<java.lang.StringBuffer: void <init>()>();

        $r131 = virtualinvoke $r154.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r132 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r133 = virtualinvoke $r132.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r134 = virtualinvoke $r131.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r133);

        $r135 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(TextReader r) : this(new CharBuffer(r))");

        $r136 = virtualinvoke $r135.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r136);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r155 = new java.lang.StringBuffer;

        specialinvoke $r155.<java.lang.StringBuffer: void <init>()>();

        $r138 = virtualinvoke $r155.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r139 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r140 = virtualinvoke $r139.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r141 = virtualinvoke $r138.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r140);

        $r142 = virtualinvoke $r141.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(InputBuffer ib)");

        $r143 = virtualinvoke $r142.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r143);

        $r144 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z10 = $r144.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z10 == 0 goto label10;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>(" : this(new LexerSharedInputState(new antlr.debug.DebuggingInputBuffer(ib)))");

        goto label11;

     label10:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>(" : this(new LexerSharedInputState(ib))");

     label11:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r156 = new java.lang.StringBuffer;

        specialinvoke $r156.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r156.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r30 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r31 = virtualinvoke $r30.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(LexerSharedInputState state) : base(state)");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r34);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("initialize();");

        $i4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("private void initialize()");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i6 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i7 = $i6 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i7;

        $r35 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r35.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z1 == 0 goto label12;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("ruleNames  = _ruleNames;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("semPredNames = _semPredNames;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("setupDebugging();");

     label12:
        $r157 = new java.lang.StringBuffer;

        specialinvoke $r157.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r157.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("caseSensitiveLiterals = ");

        $z2 = r6.<groovyjarjarantlr.LexerGrammar: boolean caseSensitiveLiterals>;

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z2);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r40);

        $r158 = new java.lang.StringBuffer;

        specialinvoke $r158.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r158.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("setCaseSensitive(");

        $z3 = r6.<groovyjarjarantlr.LexerGrammar: boolean caseSensitive>;

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z3);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r45);

        $z4 = r6.<groovyjarjarantlr.LexerGrammar: boolean caseSensitiveLiterals>;

        if $z4 == 0 goto label13;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("literals = new Hashtable(100, (float) 0.4, null, Comparer.Default);");

        goto label14;

     label13:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("literals = new Hashtable(100, (float) 0.4, CaseInsensitiveHashCodeProvider.Default, CaseInsensitiveComparer.Default);");

     label14:
        $r46 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r47 = $r46.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r48 = interfaceinvoke $r47.<groovyjarjarantlr.TokenManager: java.util.Enumeration getTokenSymbolKeys()>();

     label15:
        $z11 = interfaceinvoke $r48.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z11 == 0 goto label17;

        $r77 = interfaceinvoke $r48.<java.util.Enumeration: java.lang.Object nextElement()>();

        r145 = (java.lang.String) $r77;

        $c16 = virtualinvoke r145.<java.lang.String: char charAt(int)>(0);

        $i22 = (int) $c16;

        if $i22 == 34 goto label16;

        goto label15;

     label16:
        $r78 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r79 = $r78.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r80 = interfaceinvoke $r79.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r145);

        $z9 = $r80 instanceof groovyjarjarantlr.StringLiteralSymbol;

        if $z9 == 0 goto label15;

        r146 = (groovyjarjarantlr.StringLiteralSymbol) $r80;

        $r159 = new java.lang.StringBuffer;

        specialinvoke $r159.<java.lang.StringBuffer: void <init>()>();

        $r82 = virtualinvoke $r159.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("literals.Add(");

        $r83 = virtualinvoke r146.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String getId()>();

        $r84 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r83);

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $i17 = virtualinvoke r146.<groovyjarjarantlr.StringLiteralSymbol: int getTokenType()>();

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i17);

        $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r88);

        goto label15;

     label17:
        $i8 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i9 = $i8 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i9;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $r49 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r49.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z5 == 0 goto label20;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("private static readonly string[] _ruleNames = new string[] {");

        $r66 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r67 = $r66.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r68 = virtualinvoke $r67.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label18:
        $z12 = interfaceinvoke $r68.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z12 == 0 goto label19;

        $r69 = interfaceinvoke $r68.<java.util.Enumeration: java.lang.Object nextElement()>();

        r147 = (groovyjarjarantlr.GrammarSymbol) $r69;

        $z8 = r147 instanceof groovyjarjarantlr.RuleSymbol;

        if $z8 == 0 goto label18;

        $r160 = new java.lang.StringBuffer;

        specialinvoke $r160.<java.lang.StringBuffer: void <init>()>();

        $r71 = virtualinvoke $r160.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  \"");

        $r72 = (groovyjarjarantlr.RuleSymbol) r147;

        $r73 = virtualinvoke $r72.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r74 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",");

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r76);

        goto label18;

     label19:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("};");

     label20:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genNextToken()>();

        $r50 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r51 = $r50.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r52 = virtualinvoke $r51.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        i21 = 0;

     label21:
        $z13 = interfaceinvoke $r52.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z13 == 0 goto label23;

        $r62 = interfaceinvoke $r52.<java.util.Enumeration: java.lang.Object nextElement()>();

        r148 = (groovyjarjarantlr.RuleSymbol) $r62;

        $r63 = virtualinvoke r148.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $z7 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>("mnextToken");

        if $z7 != 0 goto label22;

        $i15 = i21;

        i21 = i21 + 1;

        $r64 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r65 = $r64.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol,boolean,int,groovyjarjarantlr.TokenManager)>(r148, 0, $i15, $r65);

     label22:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void exitIfError()>();

        goto label21;

     label23:
        $r53 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r53.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z6 == 0 goto label24;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genSemPredMap()>();

     label24:
        $r57 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r54 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r55 = (groovyjarjarantlr.LexerGrammar) $r54;

        $r56 = $r55.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.collections.impl.BitSet charVocabulary>;

        $i10 = virtualinvoke $r56.<groovyjarjarantlr.collections.impl.BitSet: int size()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBitsets(groovyjarjarantlr.collections.impl.Vector,int)>($r57, $i10);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $i11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i12 = $i11 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i12;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $i13 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i14 = $i13 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i14;

        $r58 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        if $r58 == null goto label25;

        $r61 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        $r60 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r61.<groovyjarjarantlr.CSharpNameSpace: void emitClosures(java.io.PrintWriter)>($r60);

     label25:
        $r59 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r59.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public void genInitFactory(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.Grammar r0;
        groovyjarjarantlr.CSharpCodeGenerator r1;
        java.lang.StringBuffer $r2, $r3, $r5, $r6, $r15, $r16, $r17, $r18, $r20, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r7, r11, $r14, $r19, $r22;
        groovyjarjarantlr.TokenManager $r4, $r8, $r12;
        groovyjarjarantlr.collections.impl.Vector $r9;
        boolean $z0;
        groovyjarjarantlr.TokenSymbol $r13;
        java.lang.Object $r10;

        r1 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Grammar;

        $z0 = r0.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z0 == 0 goto label4;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("static public void initializeASTFactory( ASTFactory factory )");

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i0 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("factory.setMaxNodeType(");

        $r4 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i2 = interfaceinvoke $r4.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r7);

        $r8 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r9 = interfaceinvoke $r8.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        i6 = 0;

     label1:
        $i3 = virtualinvoke $r9.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i6 >= $i3 goto label3;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i6);

        r11 = (java.lang.String) $r10;

        if r11 == null goto label2;

        $r12 = r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r13 = interfaceinvoke $r12.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r11);

        if $r13 == null goto label2;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        if $r14 == null goto label2;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("factory.setTokenTypeASTNodeType(");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", \"");

        $r19 = virtualinvoke $r13.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\");");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r22);

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $i4 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i5;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label4:
        return;
    }

    public void genBody(groovyjarjarantlr.ParserGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r95, $r127;
        java.util.Vector $r92;
        java.lang.StringBuffer $r10, $r11, $r13, $r14, $r15, $r16, $r23, $r24, $r27, $r35, $r36, $r37, $r48, $r49, $r52, $r53, $r55, $r56, $r59, $r60, $r62, $r63, $r65, $r66, $r69, $r70, $r72, $r73, $r76, $r77, $r79, $r80, $r82, $r83, $r86, $r87, $r89, $r90, $r102, $r103, $r105, $r106, $r108, $r109, $r111, $r112, $r114, $r115, $r117, $r118, $r129, $r130, $r133, $r134, $r138, $r139, $r140, $r149, $r150, $r153, $r154, $r155;
        groovyjarjarantlr.DefineGrammarSymbols $r4;
        groovyjarjarantlr.Grammar $r1, $r3, $r7, $r18, $r21, $r25, $r28, $r30, $r39, $r42, $r46, $r47, $r50, $r57, $r61, $r67, $r74, $r78, $r84, $r88, $r93, $r96, $r123, $r125, $r142, $r145, $r151, $r157, $r161, $r163, $r167, $r169;
        groovyjarjarantlr.Token $r19, $r40, $r43, $r144, $r160;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, i46, $i47, $i48, $i49;
        groovyjarjarantlr.ParserGrammar r97;
        java.lang.Object $r32, $r120, $r128, $r159;
        groovyjarjarantlr.CSharpNameSpace $r6, $r98, $r101, $r147;
        groovyjarjarantlr.TokenManager $r124, $r162, $r168;
        groovyjarjarantlr.collections.impl.Vector $r94, $r122, $r126, $r166;
        java.io.PrintWriter $r99, $r100, $r146;
        groovyjarjarantlr.RuleBlock $r44;
        groovyjarjarantlr.GrammarSymbol r164, r165;
        java.lang.String $r2, $r5, $r8, $r12, $r17, $r20, $r22, $r26, $r29, $r33, $r34, $r38, $r41, $r45, $r51, $r54, $r58, $r64, $r68, $r71, $r75, $r81, $r85, $r91, $r104, $r107, $r110, $r113, $r116, $r119, $r132, $r135, $r136, $r137, $r141, $r143, r148, $r152, $r156;
        groovyjarjarantlr.RuleSymbol r121, $r131;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.String[] $r9;
        java.util.Hashtable $r31, $r158;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r97 := @parameter0: groovyjarjarantlr.ParserGrammar;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void setupOutput(java.lang.String)>($r2);

        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3.<groovyjarjarantlr.Grammar: boolean buildAST>;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST> = $z0;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genHeader()>();

        $r4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r5);

        $r6 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        if $r6 == null goto label01;

        $r147 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        $r146 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r147.<groovyjarjarantlr.CSharpNameSpace: void emitDeclarations(java.io.PrintWriter)>($r146);

     label01:
        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("// Generate the header common to all output files.");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using System;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using TokenBuffer              = antlr.TokenBuffer;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using TokenStreamException     = antlr.TokenStreamException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using TokenStreamIOException   = antlr.TokenStreamIOException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ANTLRException           = antlr.ANTLRException;");

        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r9 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String[] split(java.lang.String,java.lang.String)>($r8, ".");

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("using ");

        $i2 = lengthof $r9;

        $i3 = $i2 - 1;

        $r12 = $r9[$i3];

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = antlr.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r17);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using Token                    = antlr.Token;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using IToken                   = antlr.IToken;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using TokenStream              = antlr.TokenStream;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using RecognitionException     = antlr.RecognitionException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using NoViableAltException     = antlr.NoViableAltException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using MismatchedTokenException = antlr.MismatchedTokenException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using SemanticException        = antlr.SemanticException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ParserSharedInputState   = antlr.ParserSharedInputState;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using BitSet                   = antlr.collections.impl.BitSet;");

        $z1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        if $z1 == 0 goto label02;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using AST                      = antlr.collections.AST;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ASTPair                  = antlr.ASTPair;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ASTFactory               = antlr.ASTFactory;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ASTArray                 = antlr.collections.impl.ASTArray;");

     label02:
        $r18 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r19 = $r18.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r20 = virtualinvoke $r19.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r20);

        $r21 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r22 = $r21.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        if $r22 == null goto label03;

        $r145 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        r148 = $r145.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        goto label04;

     label03:
        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.");

        $r25 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r26 = virtualinvoke $r25.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        r148 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        $r28 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r29 = $r28.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        if $r29 == null goto label05;

        $r142 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r143 = $r142.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>($r143);

     label05:
        $r30 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r31 = $r30.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r32 = virtualinvoke $r31.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderPrefix");

        $r144 = (groovyjarjarantlr.Token) $r32;

        if $r144 != null goto label06;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>("public ");

        goto label08;

     label06:
        $r33 = virtualinvoke $r144.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r34 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r33, "\"", "\"");

        if $r34 != null goto label07;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>("public ");

        goto label08;

     label07:
        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r38);

     label08:
        $r149 = new java.lang.StringBuffer;

        specialinvoke $r149.<java.lang.StringBuffer: void <init>()>();

        $r150 = virtualinvoke $r149.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class ");

        $r151 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r152 = virtualinvoke $r151.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r153 = virtualinvoke $r150.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r152);

        $r154 = virtualinvoke $r153.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r155 = virtualinvoke $r154.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r148);

        $r156 = virtualinvoke $r155.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r156);

        $r157 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r158 = $r157.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r159 = virtualinvoke $r158.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderSuffix");

        $r160 = (groovyjarjarantlr.Token) $r159;

        if $r160 == null goto label09;

        $r136 = virtualinvoke $r160.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r137 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r136, "\"", "\"");

        if $r137 == null goto label09;

        $r138 = new java.lang.StringBuffer;

        specialinvoke $r138.<java.lang.StringBuffer: void <init>()>();

        $r139 = virtualinvoke $r138.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("              , ");

        $r140 = virtualinvoke $r139.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r137);

        $r141 = virtualinvoke $r140.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r141);

     label09:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i44 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i45 = $i44 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i45;

        $r161 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r162 = $r161.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genTokenDefinitions(groovyjarjarantlr.TokenManager)>($r162);

        $r163 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r163.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z9 == 0 goto label12;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("private static readonly string[] _ruleNames = new string[] {");

        $i40 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i41 = $i40 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i41;

        $r125 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r126 = $r125.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r127 = virtualinvoke $r126.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

     label10:
        $z10 = interfaceinvoke $r127.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z10 == 0 goto label11;

        $r128 = interfaceinvoke $r127.<java.util.Enumeration: java.lang.Object nextElement()>();

        r164 = (groovyjarjarantlr.GrammarSymbol) $r128;

        $z8 = r164 instanceof groovyjarjarantlr.RuleSymbol;

        if $z8 == 0 goto label10;

        $r129 = new java.lang.StringBuffer;

        specialinvoke $r129.<java.lang.StringBuffer: void <init>()>();

        $r130 = virtualinvoke $r129.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  \"");

        $r131 = (groovyjarjarantlr.RuleSymbol) r164;

        $r132 = virtualinvoke $r131.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r133 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r132);

        $r134 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",");

        $r135 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r135);

        goto label10;

     label11:
        $i42 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i43 = $i42 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i43;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("};");

     label12:
        $r39 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r40 = $r39.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $r41 = virtualinvoke $r40.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r42 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r43 = $r42.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $i4 = virtualinvoke $r43.<groovyjarjarantlr.Token: int getLine()>();

        $r44 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r45 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r41, $i4, $r44, null);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r45);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("protected void initialize()");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i6 = $i5 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i6;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("tokenNames = tokenNames_;");

        $r46 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r46.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z2 == 0 goto label13;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("initializeFactory();");

     label13:
        $r47 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r47.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z3 == 0 goto label14;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("ruleNames  = _ruleNames;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("semPredNames = _semPredNames;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("setupDebugging(tokenBuf);");

     label14:
        $i7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i8 = $i7 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i8;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("protected ");

        $r50 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r51 = virtualinvoke $r50.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r52 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(TokenBuffer tokenBuf, int k) : base(tokenBuf, k)");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r54);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i10 = $i9 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i10;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("initialize();");

        $i11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i12 = $i11 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i12;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r57 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r58 = virtualinvoke $r57.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r59 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(TokenBuffer tokenBuf) : this(tokenBuf,");

        $r61 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i13 = $r61.<groovyjarjarantlr.Grammar: int maxk>;

        $r62 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i13);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r64);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r65 = new java.lang.StringBuffer;

        specialinvoke $r65.<java.lang.StringBuffer: void <init>()>();

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("protected ");

        $r67 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r68 = virtualinvoke $r67.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r69 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r68);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(TokenStream lexer, int k) : base(lexer,k)");

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r71);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i14 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i15 = $i14 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i15;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("initialize();");

        $i16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i17 = $i16 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i17;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r72 = new java.lang.StringBuffer;

        specialinvoke $r72.<java.lang.StringBuffer: void <init>()>();

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r74 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r75 = virtualinvoke $r74.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r76 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r75);

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(TokenStream lexer) : this(lexer,");

        $r78 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i18 = $r78.<groovyjarjarantlr.Grammar: int maxk>;

        $r79 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i18);

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r81);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r82 = new java.lang.StringBuffer;

        specialinvoke $r82.<java.lang.StringBuffer: void <init>()>();

        $r83 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r84 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r85 = virtualinvoke $r84.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r86 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

        $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(ParserSharedInputState state) : base(state,");

        $r88 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i19 = $r88.<groovyjarjarantlr.Grammar: int maxk>;

        $r89 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i19);

        $r90 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r91);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i20 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i21 = $i20 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i21;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("initialize();");

        $i22 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i23 = $i22 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i23;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r92 = new java.util.Vector;

        specialinvoke $r92.<java.util.Vector: void <init>(int)>(100);

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Vector astTypes> = $r92;

        $r93 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r94 = $r93.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r95 = virtualinvoke $r94.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        i46 = 0;

     label15:
        $z11 = interfaceinvoke $r95.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z11 == 0 goto label19;

        $r120 = interfaceinvoke $r95.<java.util.Enumeration: java.lang.Object nextElement()>();

        r165 = (groovyjarjarantlr.GrammarSymbol) $r120;

        $z7 = r165 instanceof groovyjarjarantlr.RuleSymbol;

        if $z7 == 0 goto label18;

        r121 = (groovyjarjarantlr.RuleSymbol) r165;

        $r122 = r121.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.collections.impl.Vector references>;

        $i38 = virtualinvoke $r122.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i38 != 0 goto label16;

        $z12 = 1;

        goto label17;

     label16:
        $z12 = 0;

     label17:
        $i39 = i46;

        i46 = i46 + 1;

        $r123 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r124 = $r123.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol,boolean,int,groovyjarjarantlr.TokenManager)>(r121, $z12, $i39, $r124);

     label18:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void exitIfError()>();

        goto label15;

     label19:
        $z4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z4 == 0 goto label20;

        $r108 = new java.lang.StringBuffer;

        specialinvoke $r108.<java.lang.StringBuffer: void <init>()>();

        $r109 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public new ");

        $r110 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r111 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r110);

        $r112 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" getAST()");

        $r113 = virtualinvoke $r112.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r113);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i34 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i35 = $i34 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i35;

        $r114 = new java.lang.StringBuffer;

        specialinvoke $r114.<java.lang.StringBuffer: void <init>()>();

        $r115 = virtualinvoke $r114.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("return (");

        $r116 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r117 = virtualinvoke $r115.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r116);

        $r118 = virtualinvoke $r117.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") returnAST;");

        $r119 = virtualinvoke $r118.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r119);

        $i36 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i37 = $i36 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i37;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

     label20:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("private void initializeFactory()");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i24 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i25 = $i24 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i25;

        $r96 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r96.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z5 == 0 goto label23;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (astFactory == null)");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i30 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i31 = $i30 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i31;

        $z6 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z6 == 0 goto label21;

        $r102 = new java.lang.StringBuffer;

        specialinvoke $r102.<java.lang.StringBuffer: void <init>()>();

        $r103 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory = new ASTFactory(\"");

        $r104 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r105 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r104);

        $r106 = virtualinvoke $r105.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\");");

        $r107 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r107);

        goto label22;

     label21:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("astFactory = new ASTFactory();");

     label22:
        $i32 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i33 = $i32 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i33;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("initializeASTFactory( astFactory );");

     label23:
        $i47 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i48 = $i47 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i48;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genInitFactory(groovyjarjarantlr.Grammar)>(r97);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genTokenStrings()>();

        $r166 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r167 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r168 = $r167.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i49 = interfaceinvoke $r168.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBitsets(groovyjarjarantlr.collections.impl.Vector,int)>($r166, $i49);

        $r169 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z13 = $r169.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z13 == 0 goto label24;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genSemPredMap()>();

     label24:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $i26 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i27 = $i26 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i27;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $i28 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i29 = $i28 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i29;

        $r98 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        if $r98 == null goto label25;

        $r101 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        $r100 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r101.<groovyjarjarantlr.CSharpNameSpace: void emitClosures(java.io.PrintWriter)>($r100);

     label25:
        $r99 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r99.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    public void genBody(groovyjarjarantlr.TreeWalkerGrammar) throws java.io.IOException
    {
        java.util.Enumeration $r110;
        java.util.Vector $r107;
        java.lang.StringBuffer $r7, $r8, $r11, $r12, $r15, $r16, $r23, $r24, $r27, $r35, $r36, $r37, $r47, $r48, $r50, $r51, $r53, $r54, $r56, $r57, $r67, $r68, $r69, $r79, $r80, $r83, $r84, $r85, $r100, $r101, $r104, $r105;
        groovyjarjarantlr.DefineGrammarSymbols $r4;
        groovyjarjarantlr.Grammar $r1, $r3, $r9, $r13, $r18, $r21, $r25, $r28, $r30, $r39, $r40, $r63, $r71, $r74, $r81, $r87, $r91, $r93, $r96, $r102, $r108;
        groovyjarjarantlr.Token $r19, $r73, $r90, $r94, $r97;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        java.lang.Object $r32, $r59, $r89;
        groovyjarjarantlr.TreeWalkerGrammar r77;
        groovyjarjarantlr.CSharpNameSpace $r6, $r43, $r46, $r76;
        groovyjarjarantlr.TokenManager $r41, $r64, $r92;
        groovyjarjarantlr.collections.impl.Vector $r42, $r62, $r109;
        java.io.PrintWriter $r44, $r45, $r75;
        groovyjarjarantlr.RuleBlock $r98;
        groovyjarjarantlr.GrammarSymbol r60;
        java.lang.String $r2, $r5, $r10, $r14, $r17, $r20, $r22, $r26, $r29, $r33, $r34, $r38, $r49, $r52, $r55, $r58, $r65, $r66, $r70, $r72, r78, $r82, $r86, $r95, $r99, $r103, $r106;
        groovyjarjarantlr.RuleSymbol r61;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Hashtable $r31, $r88;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r77 := @parameter0: groovyjarjarantlr.TreeWalkerGrammar;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void setupOutput(java.lang.String)>($r2);

        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3.<groovyjarjarantlr.Grammar: boolean buildAST>;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST> = $z0;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genHeader()>();

        $r4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r5);

        $r6 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        if $r6 == null goto label01;

        $r76 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        $r75 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r76.<groovyjarjarantlr.CSharpNameSpace: void emitDeclarations(java.io.PrintWriter)>($r75);

     label01:
        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("// Generate header specific to the tree-parser CSharp file");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using System;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("using ");

        $r9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = antlr.");

        $r13 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r17);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using Token                    = antlr.Token;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using IToken                   = antlr.IToken;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using AST                      = antlr.collections.AST;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using RecognitionException     = antlr.RecognitionException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ANTLRException           = antlr.ANTLRException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using NoViableAltException     = antlr.NoViableAltException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using MismatchedTokenException = antlr.MismatchedTokenException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using SemanticException        = antlr.SemanticException;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using BitSet                   = antlr.collections.impl.BitSet;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ASTPair                  = antlr.ASTPair;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ASTFactory               = antlr.ASTFactory;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("using ASTArray                 = antlr.collections.impl.ASTArray;");

        $r18 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r19 = $r18.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction>;

        $r20 = virtualinvoke $r19.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r20);

        $r21 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r22 = $r21.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        if $r22 == null goto label02;

        $r74 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        r78 = $r74.<groovyjarjarantlr.Grammar: java.lang.String superClass>;

        goto label03;

     label02:
        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("antlr.");

        $r25 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r26 = virtualinvoke $r25.<groovyjarjarantlr.Grammar: java.lang.String getSuperClass()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        r78 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

     label03:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r28 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r29 = $r28.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        if $r29 == null goto label04;

        $r71 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r72 = $r71.<groovyjarjarantlr.Grammar: java.lang.String comment>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>($r72);

     label04:
        $r30 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r31 = $r30.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r32 = virtualinvoke $r31.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderPrefix");

        $r73 = (groovyjarjarantlr.Token) $r32;

        if $r73 != null goto label05;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>("public ");

        goto label07;

     label05:
        $r33 = virtualinvoke $r73.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r34 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r33, "\"", "\"");

        if $r34 != null goto label06;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>("public ");

        goto label07;

     label06:
        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r38);

     label07:
        $r79 = new java.lang.StringBuffer;

        specialinvoke $r79.<java.lang.StringBuffer: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("class ");

        $r81 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r82 = virtualinvoke $r81.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r83 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r82);

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r78);

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r86);

        $r87 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r88 = $r87.<groovyjarjarantlr.Grammar: java.util.Hashtable options>;

        $r89 = virtualinvoke $r88.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("classHeaderSuffix");

        $r90 = (groovyjarjarantlr.Token) $r89;

        if $r90 == null goto label08;

        $r65 = virtualinvoke $r90.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r66 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r65, "\"", "\"");

        if $r66 == null goto label08;

        $r67 = new java.lang.StringBuffer;

        specialinvoke $r67.<java.lang.StringBuffer: void <init>()>();

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("              , ");

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r70);

     label08:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i13 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i14 = $i13 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i14;

        $r91 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r92 = $r91.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genTokenDefinitions(groovyjarjarantlr.TokenManager)>($r92);

        $r93 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r94 = $r93.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $r95 = virtualinvoke $r94.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r96 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r97 = $r96.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction>;

        $i15 = virtualinvoke $r97.<groovyjarjarantlr.Token: int getLine()>();

        $r98 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r99 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r95, $i15, $r98, null);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r99);

        $r100 = new java.lang.StringBuffer;

        specialinvoke $r100.<java.lang.StringBuffer: void <init>()>();

        $r101 = virtualinvoke $r100.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public ");

        $r102 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r103 = virtualinvoke $r102.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r104 = virtualinvoke $r101.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r103);

        $r105 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("()");

        $r106 = virtualinvoke $r105.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r106);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i17 = $i16 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i17;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("tokenNames = tokenNames_;");

        $i18 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i19 = $i18 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i19;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r107 = new java.util.Vector;

        specialinvoke $r107.<java.util.Vector: void <init>()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Vector astTypes> = $r107;

        $r108 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r109 = $r108.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r110 = virtualinvoke $r109.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        i20 = 0;

     label09:
        $z3 = interfaceinvoke $r110.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label13;

        $r59 = interfaceinvoke $r110.<java.util.Enumeration: java.lang.Object nextElement()>();

        r60 = (groovyjarjarantlr.GrammarSymbol) $r59;

        $z2 = r60 instanceof groovyjarjarantlr.RuleSymbol;

        if $z2 == 0 goto label12;

        r61 = (groovyjarjarantlr.RuleSymbol) r60;

        $r62 = r61.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.collections.impl.Vector references>;

        $i11 = virtualinvoke $r62.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i11 != 0 goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        $i12 = i20;

        i20 = i20 + 1;

        $r63 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r64 = $r63.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genRule(groovyjarjarantlr.RuleSymbol,boolean,int,groovyjarjarantlr.TokenManager)>(r61, $z4, $i12, $r64);

     label12:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void exitIfError()>();

        goto label09;

     label13:
        $z1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z1 == 0 goto label14;

        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public new ");

        $r49 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r50 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" getAST()");

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r52);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i8 = $i7 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i8;

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("return (");

        $r55 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r56 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") returnAST;");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r58);

        $i9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i10 = $i9 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i10;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

     label14:
        $r39 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genInitFactory(groovyjarjarantlr.Grammar)>($r39);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genTokenStrings()>();

        $r42 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.collections.impl.Vector bitsetsUsed>;

        $r40 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r41 = $r40.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i2 = interfaceinvoke $r41.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBitsets(groovyjarjarantlr.collections.impl.Vector,int)>($r42, $i2);

        $i3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i4;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $i5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i6 = $i5 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i6;

        $r43 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        if $r43 == null goto label15;

        $r46 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        $r45 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r46.<groovyjarjarantlr.CSharpNameSpace: void emitClosures(java.io.PrintWriter)>($r45);

     label15:
        $r44 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r44.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput> = null;

        return;
    }

    protected void genCases(groovyjarjarantlr.collections.impl.BitSet)
    {
        groovyjarjarantlr.Grammar $r3;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        byte b0, $b2;
        int[] $r2;
        java.lang.StringBuffer $r4, $r5, $r7, $r8, $r10, $r12, $r13, $r14;
        int $i1, i3, i4, $i5;
        java.lang.String $r6, $r9, $r15;
        boolean $z0, $z1, z2;
        java.io.PrintStream $r11;
        groovyjarjarantlr.collections.impl.BitSet r1;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label01;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genCases(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label01:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.BitSet: int[] toArray()>();

        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label02;

        $b2 = 4;

        goto label03;

     label02:
        $b2 = 1;

     label03:
        b0 = $b2;

        i3 = 1;

        z2 = 1;

        i4 = 0;

     label04:
        $i5 = lengthof $r2;

        if i4 >= $i5 goto label09;

        if i3 != 1 goto label05;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>("");

        goto label06;

     label05:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>("  ");

     label06:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("case ");

        $i1 = $r2[i4];

        $r6 = specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getValueString(int)>($i1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r9);

        if i3 != b0 goto label07;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>("");

        z2 = 1;

        i3 = 1;

        goto label08;

     label07:
        i3 = i3 + 1;

        z2 = 0;

     label08:
        i4 = i4 + 1;

        goto label04;

     label09:
        if z2 != 0 goto label10;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>("");

     label10:
        return;
    }

    public groovyjarjarantlr.CSharpBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock, boolean)
    {
        java.lang.StringBuffer $r6, $r7, $r10, $r11, $r22, $r23, $r28, $r29, $r30, $r40, $r41, $r42, $r43, $r44, $r46, $r47, $r48, $r51, $r52, $r53, $r54, $r59, $r60, $r63, $r64, $r68, $r69, $r70, $r71, $r79, $r80, $r84, $r85, $r91, $r92, $r93, $r123, $r124, $r126, $r127, $r132, $r133, $r134, $r139, $r140, $r143, $r144, $r155, $r156, $r157, $r158, $r159, $r160, $r161, $r162, $r163, $r165, $r166, $r167, $r168, $r169, $r170;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, i47, i48, $i49, i50, i51, $i52, i53, $i54, $i55, i56, i57, $i58, i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, i69, $i71, $i73;
        java.io.PrintStream $r67, $r76, $r78, $r83, $r129, $r131;
        groovyjarjarantlr.collections.impl.Vector $r3, $r147, $r148, $r150;
        groovyjarjarantlr.CSharpBlockFinishingInfo $r154;
        groovyjarjarantlr.Tool $r100, $r110;
        java.lang.String $r8, $r24, $r31, $r35, $r36, $r50, $r56, $r61, $r65, $r72, $r81, $r86, $r88, $r94, $r101, $r107, $r108, $r111, $r120, $r122, $r125, $r128, $r135, r136, $r142, $r145, r151, $r152, r153;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, z35, $z36, $z37, z38, z39;
        groovyjarjarantlr.AlternativeBlock r2;
        groovyjarjarantlr.LLkGrammarAnalyzer $r117, $r118;
        groovyjarjarantlr.SynPredBlock $r19, $r25, $r26, $r32, $r57, $r106, $r113, $r115;
        groovyjarjarantlr.Grammar $r4, $r13, $r14, $r15, $r20, $r37, $r38, $r55, $r75, $r87, $r89, $r99, $r109, $r116, $r137, $r146;
        groovyjarjarantlr.CharFormatter $r49;
        groovyjarjarantlr.AlternativeElement $r102, $r103;
        groovyjarjarantlr.CSharpCodeGenerator r1;
        groovyjarjarantlr.Lookahead $r17, $r74, $r119, r149;
        groovyjarjarantlr.Lookahead[] $r16, $r73, $r96;
        groovyjarjarantlr.RuleBlock $r34;
        groovyjarjarantlr.ActionTransInfo $r164;
        groovyjarjarantlr.collections.impl.BitSet $r18, $r97, $r98, $r141;
        groovyjarjarantlr.Alternative $r12, $r95, $r104, $r105, $r112, $r114;

        r1 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        z19 := @parameter1: boolean;

        i47 = 0;

        z27 = 0;

        z39 = 0;

        z38 = 0;

        i48 = 0;

        $r154 = new groovyjarjarantlr.CSharpBlockFinishingInfo;

        specialinvoke $r154.<groovyjarjarantlr.CSharpBlockFinishingInfo: void <init>()>();

        $z0 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label01;

        $r131 = <java.lang.System: java.io.PrintStream out>;

        $r155 = new java.lang.StringBuffer;

        specialinvoke $r155.<java.lang.StringBuffer: void <init>()>();

        $r132 = virtualinvoke $r155.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genCommonBlock(");

        $r133 = virtualinvoke $r132.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r134 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r135 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r131.<java.io.PrintStream: void println(java.lang.String)>($r135);

     label01:
        $z26 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        $z1 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        if $z1 == 0 goto label02;

        $z25 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: boolean getAutoGen()>();

        if $z25 == 0 goto label02;

        $z28 = 1;

        goto label03;

     label02:
        $z28 = 0;

     label03:
        r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST> = $z28;

        $z29 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        $z30 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z30 == 0 goto label04;

        $z24 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: boolean getAutoGen()>();

        if $z24 == 0 goto label04;

        $z31 = 1;

        goto label05;

     label04:
        $z31 = 0;

     label05:
        r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = $z31;

        $z32 = r2.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z32 == 0 goto label11;

        $r117 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        $r116 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z20 = $r116 instanceof groovyjarjarantlr.LexerGrammar;

        $z21 = interfaceinvoke $r117.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean subruleCanBeInverted(groovyjarjarantlr.AlternativeBlock,boolean)>(r2, $z20);

        if $z21 == 0 goto label11;

        $z22 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z22 == 0 goto label06;

        $r129 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r129.<java.io.PrintStream: void println(java.lang.String)>("special case: ~(subrule)");

     label06:
        $r118 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.LLkGrammarAnalyzer analyzer>;

        $r119 = interfaceinvoke $r118.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.AlternativeBlock)>(1, r2);

        $r120 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        if $r120 == null goto label07;

        $i46 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        if $i46 != 0 goto label07;

        $r156 = new java.lang.StringBuffer;

        specialinvoke $r156.<java.lang.StringBuffer: void <init>()>();

        $r122 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: java.lang.String getLabel()>();

        $r123 = virtualinvoke $r156.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r122);

        $r124 = virtualinvoke $r123.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r125 = r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $r126 = virtualinvoke $r124.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r125);

        $r127 = virtualinvoke $r126.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r128 = virtualinvoke $r127.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r128);

     label07:
        specialinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genElementAST(groovyjarjarantlr.AlternativeElement)>(r2);

        r136 = "";

        $r137 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z33 = $r137 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z33 == 0 goto label09;

        $z23 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z23 == 0 goto label08;

        r136 = "(AST)_t,";

        goto label09;

     label08:
        r136 = "_t,";

     label09:
        $r157 = new java.lang.StringBuffer;

        specialinvoke $r157.<java.lang.StringBuffer: void <init>()>();

        $r139 = virtualinvoke $r157.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("match(");

        $r140 = virtualinvoke $r139.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r136);

        $r141 = $r119.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i49 = virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>($r141);

        $r142 = virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getBitsetName(int)>($i49);

        $r143 = virtualinvoke $r140.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r142);

        $r144 = virtualinvoke $r143.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r145 = virtualinvoke $r144.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r145);

        $r146 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z34 = $r146 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z34 == 0 goto label10;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling();");

     label10:
        return $r154;

     label11:
        $r3 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i0 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i0 != 1 goto label14;

        $r105 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r106 = $r105.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r106 == null goto label12;

        $r110 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r109 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r111 = virtualinvoke $r109.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r112 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r113 = $r112.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i44 = virtualinvoke $r113.<groovyjarjarantlr.SynPredBlock: int getLine()>();

        $r114 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r115 = $r114.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i45 = virtualinvoke $r115.<groovyjarjarantlr.SynPredBlock: int getColumn()>();

        virtualinvoke $r110.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Syntactic predicate superfluous for single alternative", $r111, $i44, $i45);

     label12:
        if z19 == 0 goto label14;

        $r107 = $r105.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r107 == null goto label13;

        $r108 = $r105.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        $i43 = r2.<groovyjarjarantlr.AlternativeBlock: int line>;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genSemPred(java.lang.String,int)>($r108, $i43);

     label13:
        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r105, r2);

        return $r154;

     label14:
        i50 = 0;

        i51 = 0;

     label15:
        $r147 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i52 = virtualinvoke $r147.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i51 >= $i52 goto label17;

        $r104 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i51);

        $z18 = staticinvoke <groovyjarjarantlr.CSharpCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r104);

        if $z18 == 0 goto label16;

        i50 = i50 + 1;

     label16:
        i51 = i51 + 1;

        goto label15;

     label17:
        $i1 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int makeSwitchThreshold>;

        if i50 < $i1 goto label25;

        $r88 = specialinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lookaheadString(int)>(1);

        z27 = 1;

        z39 = 1;

        z38 = 1;

        $r89 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z15 = $r89 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z15 == 0 goto label18;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (null == _t)");

        $i39 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i40 = $i39 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i40;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_t = ASTNULL;");

        $i41 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i42 = $i41 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i42;

     label18:
        $r158 = new java.lang.StringBuffer;

        specialinvoke $r158.<java.lang.StringBuffer: void <init>()>();

        $r91 = virtualinvoke $r158.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("switch ( ");

        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r88);

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" )");

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r94);

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i23 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i24 = $i23 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i24;

        i53 = 0;

     label19:
        $r148 = r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i54 = virtualinvoke $r148.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i53 >= $i54 goto label24;

        $r95 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i53);

        $z16 = staticinvoke <groovyjarjarantlr.CSharpCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r95);

        if $z16 != 0 goto label20;

        goto label23;

     label20:
        $r96 = $r95.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        r149 = $r96[1];

        $r97 = r149.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i27 = virtualinvoke $r97.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i27 != 0 goto label21;

        $z17 = virtualinvoke r149.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z17 != 0 goto label21;

        $r100 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r99 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r101 = virtualinvoke $r99.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r102 = $r95.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $i37 = virtualinvoke $r102.<groovyjarjarantlr.AlternativeElement: int getLine()>();

        $r103 = $r95.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $i38 = virtualinvoke $r103.<groovyjarjarantlr.AlternativeElement: int getColumn()>();

        virtualinvoke $r100.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Alternate omitted due to empty prediction set", $r101, $i37, $i38);

        goto label23;

     label21:
        $r98 = r149.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genCases(groovyjarjarantlr.collections.impl.BitSet)>($r98);

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i28 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i29 = $i28 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i29;

        $i30 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i31 = $i30 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i31;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r95, r2);

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("break;");

        $i32 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i33 = $i32 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i33;

        $i34 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel>;

        if $i32 != $i34 goto label22;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = 0;

     label22:
        $i35 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i36 = $i35 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i36;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label23:
        i53 = i53 + 1;

        goto label19;

     label24:
        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("default:");

        $i25 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i26 = $i25 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i26;

     label25:
        $r4 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r4 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label26;

        $r87 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i55 = $r87.<groovyjarjarantlr.Grammar: int maxk>;

        goto label27;

     label26:
        $i55 = 0;

     label27:
        i56 = $i55;

     label28:
        if i56 < 0 goto label54;

        $z3 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z3 == 0 goto label29;

        $r83 = <java.lang.System: java.io.PrintStream out>;

        $r159 = new java.lang.StringBuffer;

        specialinvoke $r159.<java.lang.StringBuffer: void <init>()>();

        $r84 = virtualinvoke $r159.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("checking depth ");

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i56);

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r83.<java.io.PrintStream: void println(java.lang.String)>($r86);

     label29:
        i57 = 0;

     label30:
        $r150 = r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i58 = virtualinvoke $r150.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i57 >= $i58 goto label53;

        $r12 = virtualinvoke r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i57);

        $z4 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z4 == 0 goto label31;

        $r78 = <java.lang.System: java.io.PrintStream out>;

        $r160 = new java.lang.StringBuffer;

        specialinvoke $r160.<java.lang.StringBuffer: void <init>()>();

        $r79 = virtualinvoke $r160.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genAlt: ");

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i57);

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r78.<java.io.PrintStream: void println(java.lang.String)>($r81);

     label31:
        if z38 == 0 goto label32;

        $z13 = staticinvoke <groovyjarjarantlr.CSharpCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r12);

        if $z13 == 0 goto label32;

        $z14 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z14 == 0 goto label52;

        $r76 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r76.<java.io.PrintStream: void println(java.lang.String)>("ignoring alt because it was in the switch");

        goto label52;

     label32:
        $r13 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r13 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label36;

        i59 = $r12.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i59 != 2147483647 goto label33;

        $r75 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i59 = $r75.<groovyjarjarantlr.Grammar: int maxk>;

     label33:
        if i59 < 1 goto label34;

        $r73 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r74 = $r73[i59];

        $z12 = virtualinvoke $r74.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z12 == 0 goto label34;

        $i71 = (int) -1;

        i59 = i59 + $i71;

        goto label33;

     label34:
        if i59 == i56 goto label35;

        $z11 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z11 == 0 goto label52;

        $r67 = <java.lang.System: java.io.PrintStream out>;

        $r161 = new java.lang.StringBuffer;

        specialinvoke $r161.<java.lang.StringBuffer: void <init>()>();

        $r68 = virtualinvoke $r161.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ignoring alt because effectiveDepth!=altDepth;");

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i59);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("!=");

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i56);

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r67.<java.io.PrintStream: void println(java.lang.String)>($r72);

        goto label52;

     label35:
        z35 = virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean lookaheadIsEmpty(groovyjarjarantlr.Alternative,int)>($r12, i59);

        r151 = virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Alternative,int)>($r12, i59);

        goto label37;

     label36:
        $r14 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i10 = $r14.<groovyjarjarantlr.Grammar: int maxk>;

        z35 = virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean lookaheadIsEmpty(groovyjarjarantlr.Alternative,int)>($r12, $i10);

        $r15 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $i11 = $r15.<groovyjarjarantlr.Grammar: int maxk>;

        r151 = virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Alternative,int)>($r12, $i11);

     label37:
        $r16 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r17 = $r16[1];

        $r18 = $r17.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i12 = virtualinvoke $r18.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i12 <= 127 goto label39;

        $z10 = staticinvoke <groovyjarjarantlr.CSharpCodeGenerator: boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)>($r12);

        if $z10 == 0 goto label39;

        if i47 != 0 goto label38;

        $r162 = new java.lang.StringBuffer;

        specialinvoke $r162.<java.lang.StringBuffer: void <init>()>();

        $r63 = virtualinvoke $r162.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r151);

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r65);

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        goto label50;

     label38:
        $r163 = new java.lang.StringBuffer;

        specialinvoke $r163.<java.lang.StringBuffer: void <init>()>();

        $r59 = virtualinvoke $r163.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("else if ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r151);

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r61);

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        goto label50;

     label39:
        if z35 == 0 goto label42;

        $r56 = $r12.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r56 != null goto label42;

        $r57 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r57 != null goto label42;

        if i47 != 0 goto label40;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        goto label41;

     label40:
        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("else {");

     label41:
        $r154.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean needAnErrorClause> = 0;

        goto label50;

     label42:
        $r152 = $r12.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r152 == null goto label45;

        $r164 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r164.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r35 = $r12.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        $i21 = r2.<groovyjarjarantlr.AlternativeBlock: int line>;

        $r34 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r36 = virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r35, $i21, $r34, $r164);

        $r37 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r37 instanceof groovyjarjarantlr.ParserGrammar;

        if $z7 != 0 goto label43;

        $r55 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r55 instanceof groovyjarjarantlr.LexerGrammar;

        if $z9 == 0 goto label44;

     label43:
        $r38 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r38.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z8 == 0 goto label44;

        $r165 = new java.lang.StringBuffer;

        specialinvoke $r165.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r165.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r151);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&& fireSemanticPredicateEvaluated(antlr.debug.SemanticPredicateEventArgs.PREDICTING,");

        $r49 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $r50 = interfaceinvoke $r49.<groovyjarjarantlr.CharFormatter: java.lang.String escapeString(java.lang.String)>($r36);

        $i22 = virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: int addSemPred(java.lang.String)>($r50);

        $r51 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i22);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("))");

        r151 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label45;

     label44:
        $r166 = new java.lang.StringBuffer;

        specialinvoke $r166.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r166.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r151);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&&(");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("))");

        r151 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

     label45:
        if i47 <= 0 goto label47;

        $r26 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r26 == null goto label46;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("else {");

        $i17 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i18 = $i17 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i18;

        $i19 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i20 = $i19 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i20;

        $r32 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genSynPred(groovyjarjarantlr.SynPredBlock,java.lang.String)>($r32, r151);

        i48 = i48 + 1;

        goto label50;

     label46:
        $r167 = new java.lang.StringBuffer;

        specialinvoke $r167.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r167.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("else if ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r151);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" {");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r31);

        goto label50;

     label47:
        $r19 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r19 == null goto label48;

        $r25 = $r12.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genSynPred(groovyjarjarantlr.SynPredBlock,java.lang.String)>($r25, r151);

        goto label50;

     label48:
        $r20 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r20 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z6 == 0 goto label49;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (_t == null)");

        $i13 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i14 = $i13 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i14;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_t = ASTNULL;");

        $i15 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i16 = $i15 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i16;

     label49:
        $r168 = new java.lang.StringBuffer;

        specialinvoke $r168.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r168.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r151);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r24);

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

     label50:
        $i60 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i61 = $i60 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i61;

        i47 = i47 + 1;

        $i62 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i63 = $i62 + 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i63;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r12, r2);

        $i64 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i65 = $i64 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i65;

        $i66 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i67 = $i66 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i67;

        $i68 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel>;

        if $i66 != $i68 goto label51;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = 0;

     label51:
        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label52:
        i57 = i57 + 1;

        goto label30;

     label53:
        $i73 = (int) -1;

        i56 = i56 + $i73;

        goto label28;

     label54:
        r153 = "";

        i69 = 1;

     label55:
        if i69 > i48 goto label57;

        $r169 = new java.lang.StringBuffer;

        specialinvoke $r169.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r169.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r153);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        r153 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $i7 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i8 = $i7 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i8;

        $i9 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel>;

        if $i7 != $i9 goto label56;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = 0;

     label56:
        i69 = i69 + 1;

        goto label55;

     label57:
        r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST> = $z26;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = $z29;

        if z39 == 0 goto label61;

        $i2 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i3;

        $r170 = new java.lang.StringBuffer;

        specialinvoke $r170.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r170.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r153);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("break; }");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r154.<groovyjarjarantlr.CSharpBlockFinishingInfo: java.lang.String postscript> = $r8;

        $i4 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        $i5 = $i4 - 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = $i5;

        $i6 = r1.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel>;

        if $i4 != $i6 goto label58;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = 0;

     label58:
        $r154.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean generatedSwitch> = 1;

        if i47 <= 0 goto label59;

        $z36 = 1;

        goto label60;

     label59:
        $z36 = 0;

     label60:
        $r154.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean generatedAnIf> = $z36;

        goto label64;

     label61:
        $r154.<groovyjarjarantlr.CSharpBlockFinishingInfo: java.lang.String postscript> = r153;

        $r154.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean generatedSwitch> = 0;

        if i47 <= 0 goto label62;

        $z37 = 1;

        goto label63;

     label62:
        $z37 = 0;

     label63:
        $r154.<groovyjarjarantlr.CSharpBlockFinishingInfo: boolean generatedAnIf> = $z37;

     label64:
        return $r154;
    }

    private static boolean suitableForCaseExpression(groovyjarjarantlr.Alternative)
    {
        groovyjarjarantlr.Lookahead[] $r2, $r4;
        groovyjarjarantlr.collections.impl.BitSet $r6;
        groovyjarjarantlr.Alternative r0;
        groovyjarjarantlr.Lookahead $r3, $r5;
        int $i0, $i1;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        $i0 = r0.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if $i0 != 1 goto label1;

        $r1 = r0.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r1 != null goto label1;

        $r2 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r3 = $r2[1];

        $z0 = virtualinvoke $r3.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r5 = $r4[1];

        $r6 = $r5.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i1 = virtualinvoke $r6.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i1 > 127 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void genElementAST(groovyjarjarantlr.AlternativeElement)
    {
        java.lang.StringBuffer $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r32, $r33, $r34, $r36, $r37, $r40, $r41, $r42, $r43, $r44, $r46, $r47, $r48, $r51, $r52, $r54, $r55, $r56, $r58, $r59, $r61, $r62, $r63, $r66, $r67, $r69, $r71, $r72, $r73, $r74, $r83, $r84, $r85, $r86, $r88, $r90, $r91, $r92, $r93, $r94, $r95, $r103, $r104, $r105;
        groovyjarjarantlr.GrammarAtom $r18, $r30, $r49, $r64, r102;
        groovyjarjarantlr.Grammar $r1, $r2, $r39, $r81, $r98, $r107;
        groovyjarjarantlr.AlternativeElement r3;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r7, $r12, $r17, $r19, $r24, $r29, $r31, $r35, $r38, $r45, $r50, $r53, $r57, $r60, $r65, $r68, $r70, $r75, $r76, $r77, $r78, $r79, $r80, $r82, $r87, $r89, $r96, r97, $r99, r100, r101, $r106, $r108, r109;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, $z15, $z16, z17, $z18, $z19;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label02;

        $r81 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z12 = $r81.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z12 != 0 goto label02;

        $r82 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r82 != null goto label01;

        r97 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $r83 = new java.lang.StringBuffer;

        specialinvoke $r83.<java.lang.StringBuffer: void <init>()>();

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tmp");

        $i6 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int astVarNumber>;

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r87 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.String toString()>();

        $i7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int astVarNumber>;

        $i8 = $i7 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int astVarNumber> = $i8;

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void mapTreeVariable(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r3, $r87);

        $r88 = new java.lang.StringBuffer;

        specialinvoke $r88.<java.lang.StringBuffer: void <init>()>();

        $r89 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r90 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r89);

        $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r87);

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in = ");

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r97);

        $r95 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r96 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r96);

     label01:
        return;

     label02:
        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z1 == 0 goto label28;

        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        if $i0 != 0 goto label28;

        $z2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        if $z2 == 0 goto label04;

        $r80 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r80 != null goto label03;

        $i5 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: int getAutoGenType()>();

        if $i5 == 3 goto label04;

     label03:
        $z13 = 1;

        goto label05;

     label04:
        $z13 = 0;

     label05:
        z14 = $z13;

        $i9 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: int getAutoGenType()>();

        if $i9 == 3 goto label06;

        $z11 = r3 instanceof groovyjarjarantlr.TokenRefElement;

        if $z11 == 0 goto label06;

        z14 = 1;

     label06:
        $r98 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z15 = $r98.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z15 == 0 goto label07;

        if z14 == 0 goto label07;

        $z16 = 1;

        goto label08;

     label07:
        $z16 = 0;

     label08:
        z17 = $z16;

        $r99 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r99 == null goto label09;

        r100 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        r101 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        goto label10;

     label09:
        r100 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tmp");

        $i1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int astVarNumber>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        r101 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $i2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int astVarNumber>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int astVarNumber> = $i3;

     label10:
        if z14 == 0 goto label13;

        $z10 = r3 instanceof groovyjarjarantlr.GrammarAtom;

        if $z10 == 0 goto label12;

        r102 = (groovyjarjarantlr.GrammarAtom) r3;

        $r77 = virtualinvoke r102.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r77 == null goto label11;

        $r79 = virtualinvoke r102.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r3, r101, $r79);

        goto label13;

     label11:
        $r78 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r3, r101, $r78);

        goto label13;

     label12:
        $r76 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r3, r101, $r76);

     label13:
        $r103 = new java.lang.StringBuffer;

        specialinvoke $r103.<java.lang.StringBuffer: void <init>()>();

        $r104 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r101);

        $r105 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r106 = virtualinvoke $r105.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void mapTreeVariable(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r3, $r106);

        $r107 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z18 = $r107 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z18 == 0 goto label14;

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r70 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r71 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in = null;");

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r75);

     label14:
        if z17 == 0 goto label15;

     label15:
        $r7 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r7 == null goto label17;

        $z9 = r3 instanceof groovyjarjarantlr.GrammarAtom;

        if $z9 == 0 goto label16;

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r64 = (groovyjarjarantlr.GrammarAtom) r3;

        $r65 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom,java.lang.String)>($r64, r100);

        $r66 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r68);

        goto label17;

     label16:
        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r57 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getASTCreateString(java.lang.String)>(r100);

        $r58 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r60);

     label17:
        $r108 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r108 != null goto label20;

        if z14 == 0 goto label20;

        r109 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value>;

        $z7 = r3 instanceof groovyjarjarantlr.GrammarAtom;

        if $z7 == 0 goto label18;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r49 = (groovyjarjarantlr.GrammarAtom) r3;

        $r50 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom,java.lang.String)>($r49, r109);

        $r51 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r53);

        goto label19;

     label18:
        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r35 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getASTCreateString(java.lang.String)>(r109);

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r38);

     label19:
        $r39 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r39 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z8 == 0 goto label20;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in = ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r109);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r45);

     label20:
        $z19 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        if $z19 == 0 goto label27;

        $i4 = virtualinvoke r3.<groovyjarjarantlr.AlternativeElement: int getAutoGenType()>();

        lookupswitch($i4)
        {
            case 1: goto label21;
            case 2: goto label24;
            default: goto label27;
        };

     label21:
        $z5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z5 != 0 goto label22;

        $z6 = r3 instanceof groovyjarjarantlr.GrammarAtom;

        if $z6 == 0 goto label23;

        $r30 = (groovyjarjarantlr.GrammarAtom) r3;

        $r31 = virtualinvoke $r30.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r31 == null goto label23;

     label22:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.addASTChild(ref currentAST, (AST)");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r24);

        goto label27;

     label23:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.addASTChild(ref currentAST, ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r29);

        goto label27;

     label24:
        $z3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z3 != 0 goto label25;

        $z4 = r3 instanceof groovyjarjarantlr.GrammarAtom;

        if $z4 == 0 goto label26;

        $r18 = (groovyjarjarantlr.GrammarAtom) r3;

        $r19 = virtualinvoke $r18.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r19 == null goto label26;

     label25:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.makeASTRoot(ref currentAST, (AST)");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r12);

        goto label27;

     label26:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.makeASTRoot(ref currentAST, ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r17);

        goto label27;

     label27:
        if z17 == 0 goto label28;

     label28:
        return;
    }

    private void genErrorCatchForElement(groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.ExceptionSpec $r8;
        groovyjarjarantlr.Grammar $r3, $r4;
        groovyjarjarantlr.CSharpCodeGenerator r2;
        groovyjarjarantlr.Tool $r9;
        int $i0, $i1;
        java.lang.String $r1, $r7, $r10, r12;
        boolean $z0;
        groovyjarjarantlr.RuleBlock $r6;
        groovyjarjarantlr.RuleSymbol $r11;
        groovyjarjarantlr.GrammarSymbol $r5;
        groovyjarjarantlr.AlternativeElement r0;

        r2 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r1 != null goto label1;

        return;

     label1:
        r12 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        $r3 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label2;

        $r10 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        r12 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r10);

     label2:
        $r4 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r12);

        $r11 = (groovyjarjarantlr.RuleSymbol) $r5;

        if $r11 != null goto label3;

        $r9 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Enclosing rule not found!");

     label3:
        $r6 = $r11.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r7 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r8 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)>($r7);

        if $r8 == null goto label4;

        $i0 = r2.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 - 1;

        r2.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        specialinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void genErrorHandler(groovyjarjarantlr.ExceptionSpec)>($r8);

     label4:
        return;
    }

    private void genErrorHandler(groovyjarjarantlr.ExceptionSpec)
    {
        groovyjarjarantlr.ExceptionHandler r4;
        groovyjarjarantlr.Grammar $r13, $r20;
        groovyjarjarantlr.collections.impl.Vector $r1, $r2;
        groovyjarjarantlr.Token $r8, $r15, $r17;
        boolean $z0, $z1;
        groovyjarjarantlr.RuleBlock $r18;
        groovyjarjarantlr.ExceptionSpec r0;
        groovyjarjarantlr.CSharpCodeGenerator r5;
        java.lang.StringBuffer $r6, $r7, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        java.lang.String $r9, $r12, $r16, $r19;
        groovyjarjarantlr.ActionTransInfo $r14;
        java.lang.Object $r3;

        r5 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.ExceptionSpec;

        i14 = 0;

     label1:
        $r1 = r0.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.collections.impl.Vector handlers>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i14 >= $i0 goto label4;

        $r2 = r0.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.collections.impl.Vector handlers>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i14);

        r4 = (groovyjarjarantlr.ExceptionHandler) $r3;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("catch (");

        $r8 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token exceptionTypeAndName>;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r12);

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i1 = r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i2;

        $r13 = r5.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r13.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z0 == 0 goto label2;

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (0 == inputState.guessing)");

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i12 = r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i13 = $i12 + 1;

        r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i13;

     label2:
        $r14 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r14.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r15 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token action>;

        $r16 = virtualinvoke $r15.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r17 = r4.<groovyjarjarantlr.ExceptionHandler: groovyjarjarantlr.Token action>;

        $i3 = virtualinvoke $r17.<groovyjarjarantlr.Token: int getLine()>();

        $r18 = r5.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r19 = virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r16, $i3, $r18, $r14);

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void printAction(java.lang.String)>($r19);

        $r20 = r5.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r20.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z1 == 0 goto label3;

        $i6 = r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i7;

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("else");

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i8 = r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i9 = $i8 + 1;

        r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i9;

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("throw;");

        $i10 = r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i11 = $i10 - 1;

        r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i11;

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label3:
        $i4 = r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r5.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i5;

        virtualinvoke r5.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        i14 = i14 + 1;

        goto label1;

     label4:
        return;
    }

    private void genErrorTryForElement(groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.ExceptionSpec $r8;
        groovyjarjarantlr.Grammar $r3, $r4;
        groovyjarjarantlr.CSharpCodeGenerator r2;
        groovyjarjarantlr.Tool $r9;
        int $i0, $i1;
        java.lang.String $r1, $r7, $r10, r12;
        boolean $z0;
        groovyjarjarantlr.RuleBlock $r6;
        groovyjarjarantlr.RuleSymbol $r11;
        groovyjarjarantlr.GrammarSymbol $r5;
        groovyjarjarantlr.AlternativeElement r0;

        r2 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r1 != null goto label1;

        return;

     label1:
        r12 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        $r3 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label2;

        $r10 = r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName>;

        r12 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r10);

     label2:
        $r4 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r12);

        $r11 = (groovyjarjarantlr.RuleSymbol) $r5;

        if $r11 != null goto label3;

        $r9 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Enclosing rule not found!");

     label3:
        $r6 = $r11.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r7 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $r8 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)>($r7);

        if $r8 == null goto label4;

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("try   // for error handling");

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i0 = r2.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r2.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

     label4:
        return;
    }

    protected void genASTDeclaration(groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.String $r2;
        groovyjarjarantlr.AlternativeElement r1;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String)>(r1, $r2);

        return;
    }

    protected void genASTDeclaration(groovyjarjarantlr.AlternativeElement, java.lang.String)
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.String $r2, r3;
        groovyjarjarantlr.AlternativeElement r1;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeElement;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genASTDeclaration(groovyjarjarantlr.AlternativeElement,java.lang.String,java.lang.String)>(r1, $r2, r3);

        return;
    }

    protected void genASTDeclaration(groovyjarjarantlr.AlternativeElement, java.lang.String, java.lang.String)
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r8, $r9;
        java.lang.String r4, r7, $r10;
        java.util.Hashtable $r2, $r11;
        groovyjarjarantlr.AlternativeElement r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.AlternativeElement;

        r7 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable declaredASTVariables>;

        $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = null;");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r10);

        $r11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable declaredASTVariables>;

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);

        return;
    }

    protected void genHeader()
    {
        groovyjarjarantlr.Grammar $r15;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.Tool $r7, $r9;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r6, $r11, $r12, $r13, $r14, $r17, $r18;
        java.lang.String $r3, $r8, $r10, $r16, $r19;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// $ANTLR ");

        $r3 = <groovyjarjarantlr.Tool: java.lang.String version>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r8 = $r7.<groovyjarjarantlr.Tool: java.lang.String grammarFile>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.Tool: java.lang.String fileMinusPath(java.lang.String)>($r8);

        $r11 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" -> ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r15 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r16 = virtualinvoke $r15.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".cs\"$");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r19);

        return;
    }

    private void genLiteralsTest()
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_ttype = testLiteralsTable(_ttype);");

        return;
    }

    private void genLiteralsTestForPartialToken()
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_ttype = testLiteralsTable(text.ToString(_begin, text.Length-_begin), _ttype);");

        return;
    }

    protected void genMatch(groovyjarjarantlr.collections.impl.BitSet)
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.collections.impl.BitSet r1;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        return;
    }

    protected void genMatch(groovyjarjarantlr.GrammarAtom)
    {
        groovyjarjarantlr.Grammar $r3, $r9;
        groovyjarjarantlr.WildcardElement $r2;
        groovyjarjarantlr.CSharpCodeGenerator r1;
        groovyjarjarantlr.Tool $r5;
        java.lang.StringBuffer $r4, $r6, $r7;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        groovyjarjarantlr.GrammarAtom r0;

        r1 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.GrammarAtom;

        $z0 = r0 instanceof groovyjarjarantlr.StringLiteralElement;

        if $z0 == 0 goto label2;

        $r9 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r9 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label1;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label1:
        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genMatchUsingAtomTokenType(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label2:
        $z1 = r0 instanceof groovyjarjarantlr.CharLiteralElement;

        if $z1 == 0 goto label4;

        $r3 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        if $z4 == 0 goto label3;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label3:
        $r5 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cannot ref character literals in grammar: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r8);

        goto label6;

     label4:
        $z2 = r0 instanceof groovyjarjarantlr.TokenRefElement;

        if $z2 == 0 goto label5;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)>(r0);

        goto label6;

     label5:
        $z3 = r0 instanceof groovyjarjarantlr.WildcardElement;

        if $z3 == 0 goto label6;

        $r2 = (groovyjarjarantlr.WildcardElement) r0;

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void gen(groovyjarjarantlr.WildcardElement)>($r2);

     label6:
        return;
    }

    protected void genMatchUsingAtomText(groovyjarjarantlr.GrammarAtom)
    {
        groovyjarjarantlr.Grammar $r1, $r5, $r7;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1;
        java.lang.String $r3, $r4, r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        groovyjarjarantlr.GrammarAtom r2;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.GrammarAtom;

        r6 = "";

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label02;

        $z5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z5 == 0 goto label01;

        r6 = "(AST)_t,";

        goto label02;

     label01:
        r6 = "_t,";

     label02:
        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r7 instanceof groovyjarjarantlr.LexerGrammar;

        if $z6 == 0 goto label04;

        $z4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z4 == 0 goto label03;

        $i1 = virtualinvoke r2.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i1 != 3 goto label04;

     label03:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void declareSaveIndexVariableIfNeeded()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_saveIndex = text.Length;");

     label04:
        $z7 = r2.<groovyjarjarantlr.GrammarAtom: boolean not>;

        if $z7 == 0 goto label05;

        $r8 = "matchNot(";

        goto label06;

     label05:
        $r8 = "match(";

     label06:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r8);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>(r6);

        $r3 = r2.<groovyjarjarantlr.GrammarAtom: java.lang.String atomText>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("EOF");

        if $z1 == 0 goto label07;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>("Token.EOF_TYPE");

        goto label08;

     label07:
        $r4 = r2.<groovyjarjarantlr.GrammarAtom: java.lang.String atomText>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r4);

     label08:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>(");");

        $r5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r5 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label10;

        $z3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText>;

        if $z3 == 0 goto label09;

        $i0 = virtualinvoke r2.<groovyjarjarantlr.GrammarAtom: int getAutoGenType()>();

        if $i0 != 3 goto label10;

     label09:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void declareSaveIndexVariableIfNeeded()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("text.Length = _saveIndex;");

     label10:
        return;
    }

    protected void genMatchUsingAtomTokenType(groovyjarjarantlr.GrammarAtom)
    {
        groovyjarjarantlr.Grammar $r1;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r3, $r4, $r5, $r8, $r9, $r11, $r13;
        int $i0;
        java.lang.String $r6, r7, $r10, $r12, $r14;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.GrammarAtom r2;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.GrammarAtom;

        r7 = "";

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label2;

        $z1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z1 == 0 goto label1;

        r7 = "(AST)_t,";

        goto label2;

     label1:
        r7 = "_t,";

     label2:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $i0 = virtualinvoke r2.<groovyjarjarantlr.GrammarAtom: int getType()>();

        $r10 = specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getValueString(int)>($i0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $z2 = r2.<groovyjarjarantlr.GrammarAtom: boolean not>;

        if $z2 == 0 goto label3;

        $r14 = "matchNot(";

        goto label4;

     label3:
        $r14 = "match(";

     label4:
        $r3 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r6);

        return;
    }

    public void genNextToken()
    {
        groovyjarjarantlr.LLkGrammarAnalyzer $r10;
        java.lang.StringBuffer $r17, $r18, $r19, $r20, $r24, $r25, $r26, $r28, $r29, $r32, $r33, $r34, $r35, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r68, $r69, $r70, $r72, $r73, $r74, $r76, $r77, $r78, $r80, $r81, $r82, $r89, $r91, $r92, $r93, $r102, $r104, $r105, $r106, $r109, $r111, $r112, $r113, $r116, $r118, $r119, $r120;
        groovyjarjarantlr.Grammar $r1, $r3, $r5, $r8, $r9, $r11, $r13, $r22, $r30, $r95, $r97, $r101, $r108, $r115, $r122, $r124, $r134, $r136;
        groovyjarjarantlr.AlternativeElement $r86;
        groovyjarjarantlr.LexerGrammar $r12, $r14, $r23, $r31, $r123, $r135, $r137;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, i49, $i50, $i51, $i52, $i53, i54, $i55;
        groovyjarjarantlr.Lookahead $r85;
        java.lang.Object $r126;
        groovyjarjarantlr.Lookahead[] $r84;
        groovyjarjarantlr.collections.impl.Vector $r2, $r4, $r125, $r131;
        groovyjarjarantlr.CSharpBlockFinishingInfo $r16;
        groovyjarjarantlr.RuleBlock $r6;
        groovyjarjarantlr.GrammarSymbol $r99;
        groovyjarjarantlr.Tool $r90, $r103, $r110, $r117;
        java.lang.String $r15, $r21, $r27, $r36, $r67, $r71, $r75, $r79, $r87, $r88, $r94, $r96, $r98, $r100, $r107, $r114, $r121, $r127, r129, r133;
        groovyjarjarantlr.RuleSymbol $r7, r128, r130;
        groovyjarjarantlr.RuleRefElement r132;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, $z12, $z13;
        groovyjarjarantlr.Alternative $r83;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        z10 = 0;

        i49 = 0;

     label01:
        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $i0 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i49 >= $i0 goto label03;

        $r124 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r125 = $r124.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r126 = virtualinvoke $r125.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i49);

        r128 = (groovyjarjarantlr.RuleSymbol) $r126;

        $z8 = virtualinvoke r128.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z8 == 0 goto label02;

        $r127 = r128.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z9 = virtualinvoke $r127.<java.lang.String: boolean equals(java.lang.Object)>("public");

        if $z9 == 0 goto label02;

        z10 = 1;

        goto label03;

     label02:
        i49 = i49 + 1;

        goto label01;

     label03:
        if z10 != 0 goto label04;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("override public IToken nextToken()\t\t\t//throws TokenStreamException");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i33 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i34 = $i33 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i34;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("try");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i35 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i36 = $i35 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i36;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("uponEOF();");

        $i37 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i38 = $i37 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i38;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("catch(CharStreamIOException csioe)");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i39 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i40 = $i39 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i40;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("throw new TokenStreamIOException(csioe.io);");

        $i41 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i42 = $i41 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i42;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("catch(CharStreamException cse)");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i43 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i44 = $i43 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i44;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("throw new TokenStreamException(cse.Message);");

        $i45 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i46 = $i45 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i46;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("return new CommonToken(Token.EOF_TYPE, \"\");");

        $i47 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i48 = $i47 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i48;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        return;

     label04:
        $r5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.collections.impl.Vector rules>;

        $r6 = staticinvoke <groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock createNextTokenRule(groovyjarjarantlr.Grammar,groovyjarjarantlr.collections.impl.Vector,java.lang.String)>($r5, $r4, "nextToken");

        $r7 = new groovyjarjarantlr.RuleSymbol;

        specialinvoke $r7.<groovyjarjarantlr.RuleSymbol: void <init>(java.lang.String)>("mnextToken");

        virtualinvoke $r7.<groovyjarjarantlr.RuleSymbol: void setDefined()>();

        virtualinvoke $r7.<groovyjarjarantlr.RuleSymbol: void setBlock(groovyjarjarantlr.RuleBlock)>($r6);

        $r7.<groovyjarjarantlr.RuleSymbol: java.lang.String access> = "private";

        $r8 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r8.<groovyjarjarantlr.Grammar: void define(groovyjarjarantlr.RuleSymbol)>($r7);

        $r9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r10 = $r9.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r10.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>($r6);

        r129 = null;

        $r11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r12 = (groovyjarjarantlr.LexerGrammar) $r11;

        $z0 = $r12.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z0 == 0 goto label05;

        $r122 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r123 = (groovyjarjarantlr.LexerGrammar) $r122;

        r129 = $r123.<groovyjarjarantlr.LexerGrammar: java.lang.String filterRule>;

     label05:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("override public IToken nextToken()\t\t\t//throws TokenStreamException");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i2;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = 0;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("IToken theRetToken = null;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>("tryAgain:");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("for (;;)");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i4 = $i3 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i4;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("IToken _token = null;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("int _ttype = Token.INVALID_TYPE;");

        $r13 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r14 = (groovyjarjarantlr.LexerGrammar) $r13;

        $z1 = $r14.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z1 == 0 goto label09;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("setCommitToPath(false);");

        if r129 == null goto label09;

        $r95 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r96 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>(r129);

        $z5 = virtualinvoke $r95.<groovyjarjarantlr.Grammar: boolean isDefined(java.lang.String)>($r96);

        if $z5 != 0 goto label06;

        $r115 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r117 = $r115.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r116 = new java.lang.StringBuffer;

        specialinvoke $r116.<java.lang.StringBuffer: void <init>()>();

        $r118 = virtualinvoke $r116.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filter rule ");

        $r119 = virtualinvoke $r118.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r129);

        $r120 = virtualinvoke $r119.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist in this lexer");

        $r121 = virtualinvoke $r120.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r117.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r121);

        goto label08;

     label06:
        $r97 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r98 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>(r129);

        $r99 = virtualinvoke $r97.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r98);

        r130 = (groovyjarjarantlr.RuleSymbol) $r99;

        $z6 = virtualinvoke r130.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z6 != 0 goto label07;

        $r108 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r110 = $r108.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r109 = new java.lang.StringBuffer;

        specialinvoke $r109.<java.lang.StringBuffer: void <init>()>();

        $r111 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filter rule ");

        $r112 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r129);

        $r113 = virtualinvoke $r112.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not exist in this lexer");

        $r114 = virtualinvoke $r113.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r110.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r114);

        goto label08;

     label07:
        $r100 = r130.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z7 = virtualinvoke $r100.<java.lang.String: boolean equals(java.lang.Object)>("public");

        if $z7 == 0 goto label08;

        $r101 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r103 = $r101.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r102 = new java.lang.StringBuffer;

        specialinvoke $r102.<java.lang.StringBuffer: void <init>()>();

        $r104 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filter rule ");

        $r105 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r129);

        $r106 = virtualinvoke $r105.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must be protected");

        $r107 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r103.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r107);

     label08:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("int _m;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_m = mark();");

     label09:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("resetText();");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("try     // for char stream error handling");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i50 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i51 = $i50 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i51;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("try     // for lexical error handling");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i52 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i53 = $i52 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i53;

        i54 = 0;

     label10:
        $r131 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i55 = virtualinvoke $r131.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i54 >= $i55 goto label12;

        $r83 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i54);

        $r84 = $r83.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r85 = $r84[1];

        $z4 = virtualinvoke $r85.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z4 == 0 goto label11;

        $r86 = $r83.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        r132 = (groovyjarjarantlr.RuleRefElement) $r86;

        $r87 = r132.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r88 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String decodeLexerRuleName(java.lang.String)>($r87);

        $r90 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r89 = new java.lang.StringBuffer;

        specialinvoke $r89.<java.lang.StringBuffer: void <init>()>();

        $r91 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public lexical rule ");

        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r88);

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is optional (can match \"nothing\")");

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r90.<groovyjarjarantlr.Tool: void warning(java.lang.String)>($r94);

     label11:
        i54 = i54 + 1;

        goto label10;

     label12:
        $r15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r16 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>($r6, 0);

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (cached_LA1==EOF_CHAR) { uponEOF(); returnToken_ = makeToken(Token.EOF_TYPE); }");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $r22 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r23 = (groovyjarjarantlr.LexerGrammar) $r22;

        $z2 = $r23.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z2 == 0 goto label14;

        if r129 != null goto label13;

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\telse");

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.String toString()>();

        $r68 = new java.lang.StringBuffer;

        specialinvoke $r68.<java.lang.StringBuffer: void <init>()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r67);

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t{");

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>();

        $r72 = new java.lang.StringBuffer;

        specialinvoke $r72.<java.lang.StringBuffer: void <init>()>();

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r71);

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\tconsume();");

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

        $r76 = new java.lang.StringBuffer;

        specialinvoke $r76.<java.lang.StringBuffer: void <init>()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r75);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\tgoto tryAgain;");

        $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.String toString()>();

        $r80 = new java.lang.StringBuffer;

        specialinvoke $r80.<java.lang.StringBuffer: void <init>()>();

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r79);

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t}");

        r133 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label15;

     label13:
        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\telse");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\t{");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\tcommit();");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\ttry {m");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r129);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(false);}");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\tcatch(RecognitionException e)");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\t{");

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\t\t// catastrophic failure");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\t\treportError(e);");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\t\tconsume();");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\t}");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t\tgoto tryAgain;");

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t\t\t}");

        r133 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label15;

     label14:
        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("else {");

        $r27 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String throwNoViable>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        r133 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

     label15:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockFinish(groovyjarjarantlr.CSharpBlockFinishingInfo,java.lang.String)>($r16, r133);

        $r134 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r135 = (groovyjarjarantlr.LexerGrammar) $r134;

        $z11 = $r135.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z11 == 0 goto label16;

        if r129 == null goto label16;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("commit();");

     label16:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if ( null==returnToken_ ) goto tryAgain; // found SKIP token");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_ttype = returnToken_.Type;");

        $r136 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r137 = (groovyjarjarantlr.LexerGrammar) $r136;

        $z12 = virtualinvoke $r137.<groovyjarjarantlr.LexerGrammar: boolean getTestLiterals()>();

        if $z12 == 0 goto label17;

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genLiteralsTest()>();

     label17:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("returnToken_.Type = _ttype;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("return returnToken_;");

        $i5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i6 = $i5 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i6;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("catch (RecognitionException e) {");

        $i7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i8 = $i7 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i8;

        $r30 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r31 = (groovyjarjarantlr.LexerGrammar) $r30;

        $z3 = $r31.<groovyjarjarantlr.LexerGrammar: boolean filterMode>;

        if $z3 == 0 goto label19;

        if r129 != null goto label18;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (!getCommitToPath())");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i29 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i30 = $i29 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i30;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("consume();");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("goto tryAgain;");

        $i31 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i32 = $i31 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i32;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        goto label19;

     label18:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (!getCommitToPath())");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i25 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i26 = $i25 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i26;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("rewind(_m);");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("resetText();");

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("try {m");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r129);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(false);}");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r36);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("catch(RecognitionException ee) {");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("\t// horrendous failure: error in filter rule");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("\treportError(ee);");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("\tconsume();");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $i27 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i28 = $i27 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i28;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("else");

     label19:
        $z13 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z13 == 0 goto label20;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i21 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i22 = $i21 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i22;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("reportError(e);");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("consume();");

        $i23 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i24 = $i23 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i24;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        goto label21;

     label20:
        $i9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i10 = $i9 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i10;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("throw new TokenStreamRecognitionException(e);");

        $i11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i12 = $i11 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i12;

     label21:
        $i13 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i14 = $i13 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i14;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $i15 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i16 = $i15 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i16;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("catch (CharStreamException cse) {");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("\tif ( cse is CharStreamIOException ) {");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("\t\tthrow new TokenStreamIOException(((CharStreamIOException)cse).io);");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("\telse {");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("\t\tthrow new TokenStreamException(cse.Message);");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $i17 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i18 = $i17 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i18;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $i19 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i20 = $i19 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i20;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        return;
    }

    public void genRule(groovyjarjarantlr.RuleSymbol, boolean, int, groovyjarjarantlr.TokenManager)
    {
        java.lang.StringBuffer $r5, $r7, $r8, $r11, $r13, $r14, $r18, $r19, $r21, $r38, $r39, $r41, $r42, $r44, $r45, $r47, $r48, $r52, $r53, $r54, $r55, $r57, $r58, $r59, $r60, $r63, $r64, $r67, $r68, $r71, $r72, $r74, $r75, $r77, $r78, $r80, $r81, $r92, $r93, $r94, $r95, $r105, $r107, $r108, $r110, $r111, $r113, $r115, $r116, $r118, $r119, $r121, $r122, $r127, $r128, $r129, $r130, $r132, $r133, $r134, $r135, $r138, $r139, $r142, $r143, $r146, $r147, $r149, $r150, $r152, $r153, $r155, $r156, $r158, $r159, $r161, $r162, $r164, $r166, $r167, $r170, $r171, $r173, $r175, $r177, $r179, $r183, $r186, $r187, $r190, $r192, $r194, $r196, $r198, $r200, $r201;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;
        java.io.PrintStream $r197;
        groovyjarjarantlr.collections.impl.Vector $r212;
        groovyjarjarantlr.CSharpBlockFinishingInfo $r31;
        groovyjarjarantlr.Tool $r100, $r176, $r191;
        java.lang.String $r3, $r6, $r9, $r10, $r12, $r15, $r16, $r17, $r20, $r22, $r25, $r32, $r34, $r40, $r43, $r46, $r49, $r56, $r61, $r65, $r66, $r69, $r70, $r73, $r76, $r79, $r82, $r91, $r96, $r101, $r106, $r109, $r112, $r114, $r117, $r120, $r123, $r131, $r136, $r137, $r140, $r141, $r144, $r148, $r151, $r154, $r157, $r160, $r163, $r165, $r168, $r172, $r174, $r178, $r180, $r181, $r182, $r184, $r185, $r188, $r189, $r193, $r195, $r199, $r202, $r204, $r205, $r206, $r207, r213;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40;
        groovyjarjarantlr.LLkGrammarAnalyzer $r30, $r88;
        groovyjarjarantlr.SynPredBlock $r98, $r102, $r103;
        groovyjarjarantlr.RuleEndElement $r87;
        groovyjarjarantlr.Grammar $r23, $r24, $r26, $r27, $r29, $r33, $r35, $r36, $r37, $r50, $r51, $r62, $r83, $r84, $r85, $r86, $r99, $r124, $r125, $r126, $r145, $r169, $r208, $r209, $r210, $r211, $r214, $r215, $r216;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.Lookahead $r89;
        groovyjarjarantlr.TokenManager r203;
        groovyjarjarantlr.RuleBlock $r2, $r104;
        groovyjarjarantlr.RuleSymbol r1;
        groovyjarjarantlr.collections.impl.BitSet $r90;
        groovyjarjarantlr.Alternative $r97;
        groovyjarjarantlr.ExceptionSpec $r28;
        java.util.Hashtable $r4;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: groovyjarjarantlr.RuleSymbol;

        z31 := @parameter1: boolean;

        i11 := @parameter2: int;

        r203 := @parameter3: groovyjarjarantlr.TokenManager;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = 1;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label01;

        $r197 = <java.lang.System: java.io.PrintStream out>;

        $r196 = new java.lang.StringBuffer;

        specialinvoke $r196.<java.lang.StringBuffer: void <init>()>();

        $r198 = virtualinvoke $r196.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("genRule(");

        $r199 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r200 = virtualinvoke $r198.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r199);

        $r201 = virtualinvoke $r200.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r202 = virtualinvoke $r201.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r197.<java.io.PrintStream: void println(java.lang.String)>($r202);

     label01:
        $z1 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z1 != 0 goto label02;

        $r191 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r190 = new java.lang.StringBuffer;

        specialinvoke $r190.<java.lang.StringBuffer: void <init>()>();

        $r192 = virtualinvoke $r190.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("undefined rule: ");

        $r193 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r194 = virtualinvoke $r192.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r193);

        $r195 = virtualinvoke $r194.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r191.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r195);

        return;

     label02:
        $r2 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule> = $r2;

        $r3 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String currentASTResult> = $r3;

        $r4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable declaredASTVariables>;

        virtualinvoke $r4.<java.util.Hashtable: void clear()>();

        z2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        $z3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST>;

        if $z3 == 0 goto label03;

        $z30 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getAutoGen()>();

        if $z30 == 0 goto label03;

        $z32 = 1;

        goto label04;

     label03:
        $z32 = 0;

     label04:
        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST> = $z32;

        $z33 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getAutoGen()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean saveText> = $z33;

        $r204 = r1.<groovyjarjarantlr.RuleSymbol: java.lang.String comment>;

        if $r204 == null goto label05;

        $r189 = r1.<groovyjarjarantlr.RuleSymbol: java.lang.String comment>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>($r189);

     label05:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = r1.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r9);

        $r10 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r10 == null goto label06;

        $r183 = new java.lang.StringBuffer;

        specialinvoke $r183.<java.lang.StringBuffer: void <init>()>();

        $r184 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        $i42 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getLine()>();

        $i43 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getColumn()>();

        $r185 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String extractTypeOfAction(java.lang.String,int,int)>($r184, $i42, $i43);

        $r186 = virtualinvoke $r183.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r185);

        $r187 = virtualinvoke $r186.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r188 = virtualinvoke $r187.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r188);

        goto label07;

     label06:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>("void ");

     label07:
        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r15);

        $r16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraParams>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r16);

        $r17 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraParams>;

        $i0 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i0 == 0 goto label08;

        $r182 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r182 == null goto label08;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>(",");

     label08:
        $r205 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r205 == null goto label09;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>("");

        $i38 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i39 = $i38 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i39;

        $r181 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r181);

        $i40 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i41 = $i40 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i41;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>(")");

        goto label10;

     label09:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>(")");

     label10:
        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" //throws ");

        $r20 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String exceptionThrown>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r22);

        $r23 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r23 instanceof groovyjarjarantlr.ParserGrammar;

        if $z4 == 0 goto label11;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>(", TokenStreamException");

        goto label12;

     label11:
        $r24 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r24 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label12;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>(", CharStreamException, TokenStreamException");

     label12:
        $r206 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String throwsSpec>;

        if $r206 == null goto label14;

        $r169 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z29 = $r169 instanceof groovyjarjarantlr.LexerGrammar;

        if $z29 == 0 goto label13;

        $r176 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r175 = new java.lang.StringBuffer;

        specialinvoke $r175.<java.lang.StringBuffer: void <init>()>();

        $r177 = virtualinvoke $r175.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("user-defined throws spec not allowed (yet) for lexer rule ");

        $r178 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        $r179 = virtualinvoke $r177.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r178);

        $r180 = virtualinvoke $r179.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r176.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r180);

        goto label14;

     label13:
        $r170 = new java.lang.StringBuffer;

        specialinvoke $r170.<java.lang.StringBuffer: void <init>()>();

        $r171 = virtualinvoke $r170.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r172 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String throwsSpec>;

        $r173 = virtualinvoke $r171.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r172);

        $r174 = virtualinvoke $r173.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r174);

     label14:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>("{");

        $i44 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i45 = $i44 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i45;

        $r207 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r207 == null goto label15;

        $r164 = new java.lang.StringBuffer;

        specialinvoke $r164.<java.lang.StringBuffer: void <init>()>();

        $r165 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        $r166 = virtualinvoke $r164.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r165);

        $r167 = virtualinvoke $r166.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r168 = virtualinvoke $r167.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r168);

     label15:
        $r25 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonLocalVars>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r25);

        $r26 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r26.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z6 == 0 goto label18;

        $r145 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z27 = $r145 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z27 == 0 goto label17;

        $z28 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z28 == 0 goto label16;

        $r158 = new java.lang.StringBuffer;

        specialinvoke $r158.<java.lang.StringBuffer: void <init>()>();

        $r159 = virtualinvoke $r158.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("traceIn(\"");

        $r160 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r161 = virtualinvoke $r159.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r160);

        $r162 = virtualinvoke $r161.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",(AST)_t);");

        $r163 = virtualinvoke $r162.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r163);

        goto label18;

     label16:
        $r152 = new java.lang.StringBuffer;

        specialinvoke $r152.<java.lang.StringBuffer: void <init>()>();

        $r153 = virtualinvoke $r152.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("traceIn(\"");

        $r154 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r155 = virtualinvoke $r153.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r154);

        $r156 = virtualinvoke $r155.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",_t);");

        $r157 = virtualinvoke $r156.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r157);

        goto label18;

     label17:
        $r146 = new java.lang.StringBuffer;

        specialinvoke $r146.<java.lang.StringBuffer: void <init>()>();

        $r147 = virtualinvoke $r146.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("traceIn(\"");

        $r148 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r149 = virtualinvoke $r147.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r148);

        $r150 = virtualinvoke $r149.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\");");

        $r151 = virtualinvoke $r150.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r151);

     label18:
        $r208 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z34 = $r208 instanceof groovyjarjarantlr.LexerGrammar;

        if $z34 == 0 goto label21;

        $r137 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $z26 = virtualinvoke $r137.<java.lang.String: boolean equals(java.lang.Object)>("mEOF");

        if $z26 == 0 goto label19;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_ttype = Token.EOF_TYPE;");

        goto label20;

     label19:
        $r138 = new java.lang.StringBuffer;

        specialinvoke $r138.<java.lang.StringBuffer: void <init>()>();

        $r139 = virtualinvoke $r138.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_ttype = ");

        $r140 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r141 = virtualinvoke $r140.<java.lang.String: java.lang.String substring(int)>(1);

        $r142 = virtualinvoke $r139.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r141);

        $r143 = virtualinvoke $r142.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r144 = virtualinvoke $r143.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r144);

     label20:
        r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel> = 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = 0;

     label21:
        $r209 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z35 = $r209.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z35 == 0 goto label23;

        $r125 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z24 = $r125 instanceof groovyjarjarantlr.ParserGrammar;

        if $z24 == 0 goto label22;

        $r132 = new java.lang.StringBuffer;

        specialinvoke $r132.<java.lang.StringBuffer: void <init>()>();

        $r133 = virtualinvoke $r132.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireEnterRule(");

        $r134 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i11);

        $r135 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",0);");

        $r136 = virtualinvoke $r135.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r136);

        goto label23;

     label22:
        $r126 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z25 = $r126 instanceof groovyjarjarantlr.LexerGrammar;

        if $z25 == 0 goto label23;

        $r127 = new java.lang.StringBuffer;

        specialinvoke $r127.<java.lang.StringBuffer: void <init>()>();

        $r128 = virtualinvoke $r127.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireEnterRule(");

        $r129 = virtualinvoke $r128.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i11);

        $r130 = virtualinvoke $r129.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",_ttype);");

        $r131 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r131);

     label23:
        $r210 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z36 = $r210.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z36 != 0 goto label24;

        $r124 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z23 = $r124.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z23 == 0 goto label25;

     label24:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("try { // debugging");

        $i1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i2;

     label25:
        $r211 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z37 = $r211 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z37 == 0 goto label26;

        $r113 = new java.lang.StringBuffer;

        specialinvoke $r113.<java.lang.StringBuffer: void <init>()>();

        $r114 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r115 = virtualinvoke $r113.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r114);

        $r116 = virtualinvoke $r115.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r117 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r118 = virtualinvoke $r116.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r117);

        $r119 = virtualinvoke $r118.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST_in = (");

        $r120 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r121 = virtualinvoke $r119.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r120);

        $r122 = virtualinvoke $r121.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")_t;");

        $r123 = virtualinvoke $r122.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r123);

     label26:
        $r27 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r27.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z7 == 0 goto label27;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("returnAST = null;");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("ASTPair currentAST = new ASTPair();");

        $r105 = new java.lang.StringBuffer;

        specialinvoke $r105.<java.lang.StringBuffer: void <init>()>();

        $r106 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r107 = virtualinvoke $r105.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r108 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r109 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r110 = virtualinvoke $r108.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r109);

        $r111 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST = null;");

        $r112 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r112);

     label27:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockPreamble(groovyjarjarantlr.AlternativeBlock)>($r2);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockInitAction(groovyjarjarantlr.AlternativeBlock)>($r2);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        $r28 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)>("");

        if $r28 != null goto label28;

        $z22 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z22 == 0 goto label29;

     label28:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("try {      // for error handling");

        $i3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i4 = $i3 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i4;

     label29:
        $r212 = $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i46 = virtualinvoke $r212.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i46 != 1 goto label32;

        $r97 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        r213 = $r97.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if r213 == null goto label30;

        $r104 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $i37 = $r104.<groovyjarjarantlr.RuleBlock: int line>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genSemPred(java.lang.String,int)>(r213, $i37);

     label30:
        $r98 = $r97.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r98 == null goto label31;

        $r100 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r99 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r101 = virtualinvoke $r99.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r102 = $r97.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i35 = virtualinvoke $r102.<groovyjarjarantlr.SynPredBlock: int getLine()>();

        $r103 = $r97.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        $i36 = virtualinvoke $r103.<groovyjarjarantlr.SynPredBlock: int getColumn()>();

        virtualinvoke $r100.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Syntactic predicate ignored for single alternative", $r101, $i35, $i36);

     label31:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genAlt(groovyjarjarantlr.Alternative,groovyjarjarantlr.AlternativeBlock)>($r97, $r2);

        goto label33;

     label32:
        $r29 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r30 = $r29.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        interfaceinvoke $r30.<groovyjarjarantlr.LLkGrammarAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>($r2);

        $r31 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpBlockFinishingInfo genCommonBlock(groovyjarjarantlr.AlternativeBlock,boolean)>($r2, 0);

        $r32 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String throwNoViable>;

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genBlockFinish(groovyjarjarantlr.CSharpBlockFinishingInfo,java.lang.String)>($r31, $r32);

     label33:
        if $r28 != null goto label34;

        $z21 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z21 == 0 goto label35;

     label34:
        $i5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i6 = $i5 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i6;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label35:
        if $r28 == null goto label36;

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genErrorHandler(groovyjarjarantlr.ExceptionSpec)>($r28);

        goto label41;

     label36:
        $z8 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getDefaultErrorHandler()>();

        if $z8 == 0 goto label41;

        $r77 = new java.lang.StringBuffer;

        specialinvoke $r77.<java.lang.StringBuffer: void <init>()>();

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("catch (");

        $r79 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String exceptionThrown>;

        $r80 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r79);

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ex)");

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r82);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i18 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i19 = $i18 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i19;

        $r83 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z18 = $r83.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z18 == 0 goto label37;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (0 == inputState.guessing)");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i33 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i34 = $i33 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i34;

     label37:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("reportError(ex);");

        $r84 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z19 = $r84 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z19 != 0 goto label38;

        $r86 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r88 = $r86.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r87 = $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode>;

        $r89 = interfaceinvoke $r88.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead FOLLOW(int,groovyjarjarantlr.RuleEndElement)>(1, $r87);

        $r90 = $r89.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i32 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>($r90);

        $r91 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getBitsetName(int)>($i32);

        $r92 = new java.lang.StringBuffer;

        specialinvoke $r92.<java.lang.StringBuffer: void <init>()>();

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("recover(ex,");

        $r94 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r91);

        $r95 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r96 = virtualinvoke $r95.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r96);

        goto label39;

     label38:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (null != _t)");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i20 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i21 = $i20 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i21;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_t = _t.getNextSibling();");

        $i22 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i23 = $i22 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i23;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label39:
        $r85 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z20 = $r85.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate>;

        if $z20 == 0 goto label40;

        $i26 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i27 = $i26 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i27;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("else");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i28 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i29 = $i28 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i29;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("throw ex;");

        $i30 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i31 = $i30 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i31;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label40:
        $i24 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i25 = $i24 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i25;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label41:
        $r214 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z38 = $r214.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z38 == 0 goto label42;

        $r71 = new java.lang.StringBuffer;

        specialinvoke $r71.<java.lang.StringBuffer: void <init>()>();

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("returnAST = ");

        $r73 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r74 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST;");

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r76);

     label42:
        $r33 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r33 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z9 == 0 goto label43;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("retTree_ = _t;");

     label43:
        $z10 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: boolean getTestLiterals()>();

        if $z10 == 0 goto label45;

        $r70 = r1.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z17 = virtualinvoke $r70.<java.lang.String: boolean equals(java.lang.Object)>("protected");

        if $z17 == 0 goto label44;

        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genLiteralsTestForPartialToken()>();

        goto label45;

     label44:
        specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genLiteralsTest()>();

     label45:
        $r215 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z39 = $r215 instanceof groovyjarjarantlr.LexerGrammar;

        if $z39 == 0 goto label46;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (_createToken && (null == _token) && (_ttype != Token.SKIP))");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i14 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i15 = $i14 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i15;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_token = makeToken(_ttype);");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_token.setText(text.ToString(_begin, text.Length-_begin));");

        $i16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i17 = $i16 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i17;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("returnToken_ = _token;");

     label46:
        $r34 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        if $r34 == null goto label47;

        $r63 = new java.lang.StringBuffer;

        specialinvoke $r63.<java.lang.StringBuffer: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("return ");

        $r65 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction>;

        $i12 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getLine()>();

        $i13 = virtualinvoke $r2.<groovyjarjarantlr.RuleBlock: int getColumn()>();

        $r66 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String extractIdOfAction(java.lang.String,int,int)>($r65, $i12, $i13);

        $r67 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r69);

     label47:
        $r35 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z11 = $r35.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z11 != 0 goto label48;

        $r62 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z16 = $r62.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z16 == 0 goto label53;

     label48:
        $i7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i8 = $i7 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i8;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("finally");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{ // debugging");

        $i9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i10 = $i9 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i10;

        $r36 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z12 = $r36.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z12 == 0 goto label50;

        $r50 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z14 = $r50 instanceof groovyjarjarantlr.ParserGrammar;

        if $z14 == 0 goto label49;

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireExitRule(");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i11);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",0);");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r61);

        goto label50;

     label49:
        $r51 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z15 = $r51 instanceof groovyjarjarantlr.LexerGrammar;

        if $z15 == 0 goto label50;

        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireExitRule(");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i11);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",_ttype);");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r56);

     label50:
        $r216 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z40 = $r216.<groovyjarjarantlr.Grammar: boolean traceRules>;

        if $z40 == 0 goto label52;

        $r37 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z13 = $r37 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z13 == 0 goto label51;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("traceOut(\"");

        $r46 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",_t);");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r49);

        goto label52;

     label51:
        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("traceOut(\"");

        $r40 = virtualinvoke r1.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\");");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r43);

     label52:
        $i47 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i48 = $i47 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i48;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

     label53:
        $i49 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i50 = $i49 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i50;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean genAST> = z2;

        return;
    }

    private void GenRuleInvocation(groovyjarjarantlr.RuleRefElement)
    {
        groovyjarjarantlr.RuleBlock $r8, $r19, $r28, $r55;
        groovyjarjarantlr.GrammarSymbol $r52;
        groovyjarjarantlr.Tool $r11, $r23, $r35;
        java.lang.StringBuffer $r1, $r4, $r5, $r10, $r12, $r14, $r22, $r24, $r26, $r27, $r30, $r34, $r36, $r38, $r39;
        java.lang.String $r3, $r6, $r9, $r13, $r15, $r17, $r20, $r21, $r25, $r29, $r31, $r33, $r37, $r40, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r51, $r54, $r56;
        groovyjarjarantlr.ActionTransInfo $r18;
        groovyjarjarantlr.RuleSymbol $r53;
        groovyjarjarantlr.Grammar $r7, $r16, $r32, $r41, $r50, $r57;
        groovyjarjarantlr.RuleRefElement r2;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.RuleRefElement;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = r2.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r6);

        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r7 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label04;

        $r45 = virtualinvoke r2.<groovyjarjarantlr.RuleRefElement: java.lang.String getLabel()>();

        if $r45 == null goto label01;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>("true");

        goto label02;

     label01:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>("false");

     label02:
        $r46 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraArgs>;

        $i6 = virtualinvoke $r46.<java.lang.String: int length()>();

        if $i6 != 0 goto label03;

        $r47 = r2.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r47 == null goto label04;

     label03:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>(",");

     label04:
        $r48 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraArgs>;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r48);

        $r49 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraArgs>;

        $i7 = virtualinvoke $r49.<java.lang.String: int length()>();

        if $i7 == 0 goto label05;

        $r44 = r2.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r44 == null goto label05;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>(",");

     label05:
        $r50 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r51 = r2.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r52 = virtualinvoke $r50.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r51);

        $r53 = (groovyjarjarantlr.RuleSymbol) $r52;

        $r54 = r2.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        if $r54 == null goto label08;

        $r18 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r18.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r20 = r2.<groovyjarjarantlr.RuleRefElement: java.lang.String args>;

        $r19 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r21 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>($r20, 0, $r19, $r18);

        $z1 = $r18.<groovyjarjarantlr.ActionTransInfo: boolean assignToRoot>;

        if $z1 != 0 goto label06;

        $r43 = $r18.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot>;

        if $r43 == null goto label07;

     label06:
        $r23 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Arguments of rule reference \'");

        $r25 = r2.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot set or ref #");

        $r28 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r29 = virtualinvoke $r28.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        $r32 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r33 = virtualinvoke $r32.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r2.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i3 = virtualinvoke r2.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r23.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r31, $r33, $i2, $i3);

     label07:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>($r21);

        $r55 = $r53.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r56 = $r55.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r56 != null goto label09;

        $r35 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r37 = r2.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' accepts no arguments");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        $r41 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r42 = virtualinvoke $r41.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i4 = virtualinvoke r2.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i5 = virtualinvoke r2.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r35.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r40, $r42, $i4, $i5);

        goto label09;

     label08:
        $r8 = $r53.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock block>;

        $r9 = $r8.<groovyjarjarantlr.RuleBlock: java.lang.String argAction>;

        if $r9 == null goto label09;

        $r11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Missing parameters on reference to rule ");

        $r13 = r2.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r17 = virtualinvoke $r16.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r2.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i1 = virtualinvoke r2.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r11.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r15, $r17, $i0, $i1);

     label09:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>(");");

        $r57 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r57 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z2 == 0 goto label10;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("_t = retTree_;");

     label10:
        return;
    }

    protected void genSemPred(java.lang.String, int)
    {
        groovyjarjarantlr.CharFormatter $r4;
        groovyjarjarantlr.Grammar $r6, $r7, $r14;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.RuleBlock $r2;
        groovyjarjarantlr.CSharpCodeGenerator r1;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12, $r13, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25;
        int i0, $i1;
        groovyjarjarantlr.ActionTransInfo $r0;
        java.lang.String $r3, $r5, r15, r16, $r21, $r26;

        r1 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r15 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new groovyjarjarantlr.ActionTransInfo;

        specialinvoke $r0.<groovyjarjarantlr.ActionTransInfo: void <init>()>();

        $r2 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r3 = virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String processActionForSpecialSymbols(java.lang.String,int,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.ActionTransInfo)>(r15, i0, $r2, $r0);

        r16 = $r3;

        $r4 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $r5 = interfaceinvoke $r4.<groovyjarjarantlr.CharFormatter: java.lang.String escapeString(java.lang.String)>($r3);

        $r6 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r6.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z0 == 0 goto label2;

        $r7 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r7 instanceof groovyjarjarantlr.ParserGrammar;

        if $z1 != 0 goto label1;

        $r14 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r14 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label2;

     label1:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fireSemanticPredicateEvaluated(antlr.debug.SemanticPredicateEvent.VALIDATING,");

        $i1 = virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: int addSemPred(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (!(");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r16);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("))");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  throw new SemanticException(\"");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\");");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r26);

        return;
    }

    protected void genSemPredMap()
    {
        java.util.Enumeration $r2;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r5;
        java.lang.String $r8;
        groovyjarjarantlr.collections.impl.Vector $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.collections.impl.Vector semPreds>;

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: java.util.Enumeration elements()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("private string[] _semPredNames = {");

        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r5 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r8);

        goto label1;

     label2:
        $i2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i3 = $i2 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("};");

        return;
    }

    protected void genSynPred(groovyjarjarantlr.SynPredBlock, java.lang.String)
    {
        groovyjarjarantlr.SynPredBlock r3;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r8, $r9, $r11, $r12, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r26, $r27, $r28, $r29, $r33, $r34, $r35, $r36, $r39, $r40, $r41, $r42, $r46, $r47, $r48, $r49, $r51, $r53, $r54, $r55, $r57, $r58, $r60, $r61, $r63, $r64, $r65, $r66, $r69, $r70, $r71, $r72;
        java.lang.String $r6, r10, $r13, $r19, $r24, $r30, $r37, $r43, $r50, $r56, $r59, $r62, $r67, $r73;
        groovyjarjarantlr.Grammar $r7, $r14, $r25, $r31, $r32, $r38, $r44, $r45, $r68;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.io.PrintStream $r52;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r3 := @parameter0: groovyjarjarantlr.SynPredBlock;

        r10 := @parameter1: java.lang.String;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean DEBUG_CODE_GENERATOR>;

        if $z0 == 0 goto label01;

        $r52 = <java.lang.System: java.io.PrintStream out>;

        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("gen=>(");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r52.<java.io.PrintStream: void println(java.lang.String)>($r56);

     label01:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("bool synPredMatched");

        $i0 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = false;");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r6);

        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r7 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z1 == 0 goto label02;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("if (_t==null) _t=ASTNULL;");

     label02:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (");

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r13);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i2;

        $r14 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r14 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z2 == 0 goto label03;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AST __t");

        $i8 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i8);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = _t;");

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r50);

        goto label04;

     label03:
        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("int _m");

        $i3 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = mark();");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r19);

     label04:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("synPredMatched");

        $i4 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = true;");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r24);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("inputState.guessing++;");

        $r25 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r25.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z3 == 0 goto label06;

        $r44 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r44 instanceof groovyjarjarantlr.ParserGrammar;

        if $z7 != 0 goto label05;

        $r45 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r45 instanceof groovyjarjarantlr.LexerGrammar;

        if $z8 == 0 goto label06;

     label05:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("fireSyntacticPredicateStarted();");

     label06:
        $i9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        $i10 = $i9 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel> = $i10;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("try {");

        $i11 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i12 = $i11 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i12;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void gen(groovyjarjarantlr.AlternativeBlock)>(r3);

        $i13 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i14 = $i13 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i14;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("catch (");

        $r59 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String exceptionThrown>;

        $r60 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r62);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i15 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i16 = $i15 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i16;

        $r63 = new java.lang.StringBuffer;

        specialinvoke $r63.<java.lang.StringBuffer: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("synPredMatched");

        $i17 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i17);

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = false;");

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r67);

        $i18 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i19 = $i18 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i19;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $r68 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r68 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z9 == 0 goto label07;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_t = __t");

        $i7 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i7);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r43);

        goto label08;

     label07:
        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("rewind(_m");

        $i5 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(");");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r30);

     label08:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("inputState.guessing--;");

        $r31 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r31.<groovyjarjarantlr.Grammar: boolean debuggingOutput>;

        if $z4 == 0 goto label10;

        $r32 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r32 instanceof groovyjarjarantlr.ParserGrammar;

        if $z5 != 0 goto label09;

        $r38 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r38 instanceof groovyjarjarantlr.LexerGrammar;

        if $z6 == 0 goto label10;

     label09:
        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if (synPredMatched");

        $i6 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r37);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("  fireSyntacticPredicateSucceeded();");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("else");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("  fireSyntacticPredicateFailed();");

     label10:
        $i20 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel>;

        $i21 = $i20 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int syntacticPredLevel> = $i21;

        $i22 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i23 = $i22 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i23;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("if ( synPredMatched");

        $i24 = r3.<groovyjarjarantlr.SynPredBlock: int ID>;

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i24);

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" )");

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r73);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        return;
    }

    public void genTokenStrings()
    {
        groovyjarjarantlr.Grammar $r1, $r5;
        groovyjarjarantlr.CharFormatter $r16;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r10, $r11, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7;
        java.lang.String $r8, $r9, $r12, r15, $r17;
        groovyjarjarantlr.TokenManager $r2, $r6;
        groovyjarjarantlr.collections.impl.Vector $r3;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.TokenSymbol $r7;
        java.lang.Object $r4;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("public static readonly string[] tokenNames_ = new string[] {");

        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        i5 = 0;

     label1:
        $i2 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i5 >= $i2 goto label6;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i5);

        r15 = (java.lang.String) $r4;

        if r15 != null goto label2;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i5);

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $z0 = virtualinvoke r15.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 != 0 goto label3;

        $z2 = virtualinvoke r15.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z2 != 0 goto label3;

        $r5 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r6 = $r5.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r7 = interfaceinvoke $r6.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r15);

        if $r7 == null goto label4;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.TokenSymbol: java.lang.String getParaphrase()>();

        if $r8 == null goto label4;

        $r9 = virtualinvoke $r7.<groovyjarjarantlr.TokenSymbol: java.lang.String getParaphrase()>();

        r15 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r9, "\"", "\"");

        goto label4;

     label3:
        $z1 = virtualinvoke r15.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z1 == 0 goto label4;

        r15 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>(r15, "\"", "\"");

     label4:
        $r16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        $r17 = interfaceinvoke $r16.<groovyjarjarantlr.CharFormatter: java.lang.String literalString(java.lang.String)>(r15);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void print(java.lang.String)>($r17);

        $i6 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $i7 = $i6 - 1;

        if i5 == $i7 goto label5;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _print(java.lang.String)>(",");

     label5:
        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void _println(java.lang.String)>("");

        i5 = i5 + 1;

        goto label1;

     label6:
        $i3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i4 = $i3 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i4;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("};");

        return;
    }

    protected void genTokenTypes(groovyjarjarantlr.TokenManager) throws java.io.IOException
    {
        groovyjarjarantlr.CSharpNameSpace $r10, $r18, $r21, $r23;
        groovyjarjarantlr.TokenManager r2;
        java.io.PrintWriter $r19, $r20, $r22;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r1, $r4, $r6, $r11, $r12, $r14, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r3, $r5, $r7, $r9, $r13, $r15, $r17;
        groovyjarjarantlr.DefineGrammarSymbols $r8;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.TokenManager;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = interfaceinvoke r2.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = <groovyjarjarantlr.CSharpCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void setupOutput(java.lang.String)>($r7);

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = 0;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genHeader()>();

        $r8 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.DefineGrammarSymbols behavior>;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String getHeaderAction(java.lang.String)>("");

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r9);

        $r10 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        if $r10 == null goto label1;

        $r23 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        $r22 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r23.<groovyjarjarantlr.CSharpNameSpace: void emitDeclarations(java.io.PrintWriter)>($r22);

     label1:
        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i1;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public class ");

        $r13 = interfaceinvoke r2.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = <groovyjarjarantlr.CSharpCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r17);

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("{");

        $i2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i3 = $i2 + 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i3;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void genTokenDefinitions(groovyjarjarantlr.TokenManager)>(r2);

        $i4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i5 = $i4 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i5;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("}");

        $i6 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs>;

        $i7 = $i6 - 1;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int tabs> = $i7;

        $r18 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        if $r18 == null goto label2;

        $r21 = <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace>;

        $r20 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r21.<groovyjarjarantlr.CSharpNameSpace: void emitClosures(java.io.PrintWriter)>($r20);

     label2:
        $r19 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput>;

        virtualinvoke $r19.<java.io.PrintWriter: void close()>();

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput> = null;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void exitIfError()>();

        return;
    }

    protected void genTokenDefinitions(groovyjarjarantlr.TokenManager) throws java.io.IOException
    {
        groovyjarjarantlr.StringLiteralSymbol r13;
        groovyjarjarantlr.TokenManager r0;
        groovyjarjarantlr.collections.impl.Vector $r1;
        boolean $z0, $z1;
        groovyjarjarantlr.TokenSymbol $r12;
        groovyjarjarantlr.CSharpCodeGenerator r2;
        groovyjarjarantlr.Tool $r38;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9, $r10, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r32, $r33, $r34, $r35, $r37, $r39, $r40, $r41;
        int $i0, i1;
        java.lang.String r4, $r11, $r14, $r15, $r21, $r28, $r31, $r36, $r42;
        java.lang.Object $r3;

        r2 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.TokenManager;

        $r1 = interfaceinvoke r0.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("public const int EOF = 1;");

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("public const int NULL_TREE_LOOKAHEAD = 3;");

        i1 = 4;

     label1:
        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i1 >= $i0 goto label7;

        $r3 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i1);

        r4 = (java.lang.String) $r3;

        if r4 == null goto label6;

        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke r0.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r4);

        r13 = (groovyjarjarantlr.StringLiteralSymbol) $r12;

        if r13 != null goto label2;

        $r38 = r2.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("String literal ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not in symbol table");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r38.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r42);

        goto label6;

     label2:
        $r14 = r13.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label>;

        if $r14 == null goto label3;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public const int ");

        $r31 = r13.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r36);

        goto label6;

     label3:
        $r15 = specialinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String mangleLiteral(java.lang.String)>(r4);

        if $r15 == null goto label4;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public const int ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r28);

        r13.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String label> = $r15;

        goto label6;

     label4:
        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r21);

        goto label6;

     label5:
        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z1 != 0 goto label6;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public const int ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>($r11);

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        virtualinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("");

        return;
    }

    public java.lang.String processStringForASTConstructor(java.lang.String)
    {
        groovyjarjarantlr.Grammar $r2, $r3, $r9;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r5, $r6, $r7;
        java.lang.String r1, $r8;
        groovyjarjarantlr.TokenManager $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z0 == 0 goto label2;

        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z1 != 0 goto label1;

        $r9 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r9 instanceof groovyjarjarantlr.ParserGrammar;

        if $z3 == 0 goto label2;

     label1:
        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $z2 = interfaceinvoke $r4.<groovyjarjarantlr.TokenManager: boolean tokenDefined(java.lang.String)>(r1);

        if $z2 != 0 goto label2;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(AST)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;

     label2:
        return r1;
    }

    public java.lang.String getASTCreateString(groovyjarjarantlr.collections.impl.Vector)
    {
        groovyjarjarantlr.CSharpCodeGenerator r4;
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r7, $r11, $r12, $r14;
        int $i0, $i1, i2;
        java.lang.String $r5, $r8, $r10, $r15;
        groovyjarjarantlr.collections.impl.Vector r0;
        java.lang.Object $r9, $r13;

        r4 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.collections.impl.Vector;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r5 = r4.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") astFactory.make(");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r9 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        i2 = 1;

     label2:
        $i1 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i2 >= $i1 goto label3;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r13 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i2);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        i2 = i2 + 1;

        goto label2;

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r10 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    public java.lang.String getASTCreateString(groovyjarjarantlr.GrammarAtom, java.lang.String)
    {
        groovyjarjarantlr.Grammar $r15;
        groovyjarjarantlr.TokenManager $r16;
        boolean $z0;
        groovyjarjarantlr.TokenSymbol $r18;
        groovyjarjarantlr.CSharpCodeGenerator r8;
        java.lang.StringBuffer $r0, $r1, $r3, $r4, $r9, $r10, $r12, $r13, $r14, $r19, $r20, $r22, $r23, $r24, $r25, $r27, $r28, $r32, $r33, $r35, $r36, $r37;
        java.lang.String r2, $r5, $r7, $r11, $r17, $r21, $r26, $r29, $r30, $r31, $r34, $r38, r39;
        groovyjarjarantlr.GrammarAtom r6;

        r8 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r6 := @parameter0: groovyjarjarantlr.GrammarAtom;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.create(");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        r39 = $r5;

        if r6 != null goto label1;

        $r38 = virtualinvoke r8.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getASTCreateString(java.lang.String)>(r2);

        return $r38;

     label1:
        $r7 = virtualinvoke r6.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r7 == null goto label4;

        $r15 = r8.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r16 = $r15.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r17 = virtualinvoke r6.<groovyjarjarantlr.GrammarAtom: java.lang.String getText()>();

        $r18 = interfaceinvoke $r16.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>($r17);

        if $r18 == null goto label2;

        $r29 = virtualinvoke $r18.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        $r30 = virtualinvoke r6.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        if $r29 == $r30 goto label3;

     label2:
        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r21 = virtualinvoke r6.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") astFactory.create(");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", \"");

        $r26 = virtualinvoke r6.<groovyjarjarantlr.GrammarAtom: java.lang.String getASTNodeType()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\")");

        r39 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label5;

     label3:
        if $r18 == null goto label5;

        $r31 = virtualinvoke $r18.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        if $r31 == null goto label5;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r34 = virtualinvoke $r18.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label5;

     label4:
        $z0 = r8.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z0 == 0 goto label5;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r11 = r8.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        r39 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        return r39;
    }

    public java.lang.String getASTCreateString(java.lang.String)
    {
        groovyjarjarantlr.Grammar $r23;
        groovyjarjarantlr.TokenManager $r24;
        boolean $z0;
        groovyjarjarantlr.TokenSymbol $r25;
        groovyjarjarantlr.CSharpCodeGenerator r5;
        java.lang.StringBuffer $r1, $r2, $r3, $r7, $r9, $r10, $r11, $r14, $r16, $r17, $r18, $r26, $r27, $r28;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        java.lang.String $r4, $r8, $r12, $r15, $r19, r20, r21, r22;

        r5 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r20 := @parameter0: java.lang.String;

        if r20 != null goto label1;

        r20 = "";

     label1:
        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("astFactory.create(");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r20);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        r21 = $r4;

        r22 = r20;

        $i0 = virtualinvoke r20.<java.lang.String: int indexOf(int)>(44);

        $i5 = (int) -1;

        if $i0 == $i5 goto label2;

        r22 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r20.<java.lang.String: int length()>();

        $r19 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        $i3 = virtualinvoke $r19.<java.lang.String: int indexOf(int)>(44);

        $i7 = (int) -1;

        if $i3 == $i7 goto label2;

     label2:
        $r23 = r5.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r24 = $r23.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r25 = interfaceinvoke $r24.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r22);

        if null == $r25 goto label3;

        $r12 = virtualinvoke $r25.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        if null == $r12 goto label3;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r15 = virtualinvoke $r25.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        r21 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label4;

     label3:
        $z0 = r5.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z0 == 0 goto label4;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r8 = r5.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        r21 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        return r21;
    }

    protected java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[], int)
    {
        groovyjarjarantlr.Lookahead[] r2;
        groovyjarjarantlr.collections.impl.BitSet r4;
        groovyjarjarantlr.CSharpCodeGenerator r6;
        java.lang.StringBuffer $r0;
        groovyjarjarantlr.Lookahead $r3, $r5;
        int i0, i1;
        java.lang.String $r1, $r7;
        boolean $z0, z1;

        r6 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r2 := @parameter0: groovyjarjarantlr.Lookahead[];

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(100);

        z1 = 1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        i1 = 1;

     label1:
        if i1 > i0 goto label5;

        $r3 = r2[i1];

        r4 = $r3.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        if z1 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") && (");

     label2:
        z1 = 0;

        $r5 = r2[i1];

        $z0 = virtualinvoke $r5.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("true");

        goto label4;

     label3:
        $r7 = virtualinvoke r6.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getLookaheadTestTerm(int,groovyjarjarantlr.collections.impl.BitSet)>(i1, r4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    protected java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Alternative, int)
    {
        groovyjarjarantlr.Lookahead[] $r4;
        groovyjarjarantlr.Grammar $r9;
        groovyjarjarantlr.Alternative r0;
        groovyjarjarantlr.CSharpCodeGenerator r3;
        java.lang.StringBuffer $r1, $r2, $r6, $r7;
        int i0, i1;
        java.lang.String $r5, $r8;

        r3 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        i0 := @parameter1: int;

        i1 = r0.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i1 != 2147483647 goto label1;

        $r9 = r3.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i1 = $r9.<groovyjarjarantlr.Grammar: int maxk>;

     label1:
        if i0 != 0 goto label2;

        return "( true )";

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r4 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r5 = virtualinvoke r3.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getLookaheadTestExpression(groovyjarjarantlr.Lookahead[],int)>($r4, i1);

        $r6 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    protected java.lang.String getLookaheadTestTerm(int, groovyjarjarantlr.collections.impl.BitSet)
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int[] $r3;
        java.lang.StringBuffer $r4, $r7, $r9, $r10, $r11, $r12;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r1, $r5, $r6, $r8, $r13, $r14;
        boolean $z0;
        groovyjarjarantlr.collections.impl.BitSet r2;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        i0 := @parameter0: int;

        r2 := @parameter1: groovyjarjarantlr.collections.impl.BitSet;

        $r1 = specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lookaheadString(int)>(i0);

        $r3 = virtualinvoke r2.<groovyjarjarantlr.collections.impl.BitSet: int[] toArray()>();

        $z0 = staticinvoke <groovyjarjarantlr.CSharpCodeGenerator: boolean elementsAreRange(int[])>($r3);

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getRangeExpression(int,int[])>(i0, $r3);

        return $r14;

     label1:
        $i1 = virtualinvoke r2.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i1 != 0 goto label2;

        return "true";

     label2:
        $i2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int bitsetTestThreshold>;

        if $i1 < $i2 goto label3;

        $i5 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: int markBitsetForGen(groovyjarjarantlr.collections.impl.BitSet)>(r2);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getBitsetName(int)>($i5);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".member(");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;

     label3:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i6 = 0;

     label4:
        $i3 = lengthof $r3;

        if i6 >= $i3 goto label6;

        $i4 = $r3[i6];

        $r6 = specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getValueString(int)>($i4);

        if i6 <= 0 goto label5;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("||");

     label5:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("==");

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        i6 = i6 + 1;

        goto label4;

     label6:
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String getRangeExpression(int, int[])
    {
        groovyjarjarantlr.CSharpCodeGenerator r3;
        int[] r0;
        groovyjarjarantlr.Tool $r17;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        int $i0, $i1, i2, $i3, $i4;
        java.lang.String $r4, $r7, $r10, $r13, $r16;
        boolean $z0;

        r3 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        i2 := @parameter0: int;

        r0 := @parameter1: int[];

        $z0 = staticinvoke <groovyjarjarantlr.CSharpCodeGenerator: boolean elementsAreRange(int[])>(r0);

        if $z0 != 0 goto label1;

        $r17 = r3.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r17.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("getRangeExpression called with non-range");

     label1:
        $i3 = r0[0];

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        $i4 = r0[$i1];

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r4 = specialinvoke r3.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lookaheadString(int)>(i2);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" >= ");

        $r7 = specialinvoke r3.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getValueString(int)>($i3);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" && ");

        $r10 = specialinvoke r3.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lookaheadString(int)>(i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <= ");

        $r13 = specialinvoke r3.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String getValueString(int)>($i4);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;
    }

    private java.lang.String getValueString(int)
    {
        groovyjarjarantlr.StringLiteralSymbol r6;
        groovyjarjarantlr.Grammar $r1, $r2;
        groovyjarjarantlr.CharFormatter $r13;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r9, $r10, $r11;
        int i0;
        java.lang.String $r5, $r7, $r8, $r12, r14;
        groovyjarjarantlr.TokenManager $r3;
        boolean $z0, $z1;
        groovyjarjarantlr.TokenSymbol $r4;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label1;

        $r13 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CharFormatter charFormatter>;

        r14 = interfaceinvoke $r13.<groovyjarjarantlr.CharFormatter: java.lang.String literalChar(int)>(i0);

        goto label5;

     label1:
        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r3 = $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r4 = interfaceinvoke $r3.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbolAt(int)>(i0);

        if $r4 != null goto label2;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

     label2:
        $r5 = virtualinvoke $r4.<groovyjarjarantlr.TokenSymbol: java.lang.String getId()>();

        $z1 = $r4 instanceof groovyjarjarantlr.StringLiteralSymbol;

        if $z1 == 0 goto label4;

        r6 = (groovyjarjarantlr.StringLiteralSymbol) $r4;

        $r7 = virtualinvoke r6.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String getLabel()>();

        if $r7 == null goto label3;

        r14 = $r7;

        goto label5;

     label3:
        $r8 = specialinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String mangleLiteral(java.lang.String)>($r5);

        r14 = $r8;

        if $r8 != null goto label5;

        r14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        goto label5;

     label4:
        r14 = $r5;

     label5:
        return r14;
    }

    protected boolean lookaheadIsEmpty(groovyjarjarantlr.Alternative, int)
    {
        groovyjarjarantlr.Lookahead[] $r1;
        groovyjarjarantlr.collections.impl.BitSet r3;
        groovyjarjarantlr.Grammar $r5;
        groovyjarjarantlr.Alternative r0;
        groovyjarjarantlr.CSharpCodeGenerator r4;
        groovyjarjarantlr.Lookahead $r2;
        int i0, $i1, i2, i3;

        r4 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        i0 := @parameter1: int;

        i2 = r0.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        if i2 != 2147483647 goto label1;

        $r5 = r4.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        i2 = $r5.<groovyjarjarantlr.Grammar: int maxk>;

     label1:
        i3 = 1;

     label2:
        if i3 > i2 goto label4;

        if i3 > i0 goto label4;

        $r1 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r2 = $r1[i3];

        r3 = $r2.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i1 = virtualinvoke r3.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i1 == 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private java.lang.String lookaheadString(int)
    {
        groovyjarjarantlr.Grammar $r1, $r2;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r3, $r4, $r5, $r6;
        int i0;
        java.lang.String $r7;
        boolean $z0, $z1;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label1;

        return "_t.Type";

     label1:
        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r2 instanceof groovyjarjarantlr.LexerGrammar;

        if $z1 == 0 goto label3;

        if i0 != 1 goto label2;

        return "cached_LA1";

     label2:
        if i0 != 2 goto label3;

        return "cached_LA2";

     label3:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LA(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    private java.lang.String mangleLiteral(java.lang.String)
    {
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.Tool $r1, $r3;
        java.lang.StringBuffer $r5, $r6, $r8;
        int $i0, $i1, i5, $i6;
        java.lang.String r2, r7;
        boolean $z0, $z1;
        char $c2, $c3, $c4;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        r7 = $r1.<groovyjarjarantlr.Tool: java.lang.String literalsPrefix>;

        i5 = 1;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        if i5 >= $i1 goto label3;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c2);

        if $z1 != 0 goto label2;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c4;

        if $i6 == 95 goto label2;

        return null;

     label2:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        i5 = i5 + 1;

        goto label1;

     label3:
        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $z0 = $r3.<groovyjarjarantlr.Tool: boolean upperCaseMangledLiterals>;

        if $z0 == 0 goto label4;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String toUpperCase()>();

     label4:
        return r7;
    }

    public java.lang.String mapTreeId(java.lang.String, groovyjarjarantlr.ActionTransInfo)
    {
        groovyjarjarantlr.collections.impl.Vector $r40, $r49;
        groovyjarjarantlr.RuleBlock $r1, $r6, $r16, $r26, $r35, $r39, $r48;
        groovyjarjarantlr.Tool $r22, $r31;
        java.lang.StringBuffer $r8, $r9, $r10, $r12, $r13, $r14, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r28, $r30, $r32, $r33, $r34, $r37, $r43, $r44, $r45;
        java.lang.String r2, $r7, $r15, $r17, $r27, $r29, $r36, $r38, $r42, r47, $r51, r52, $r53, $r54, r55;
        groovyjarjarantlr.ActionTransInfo r11;
        groovyjarjarantlr.Grammar $r3, $r46;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7, z8, z9;
        groovyjarjarantlr.AlternativeElement r50;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.util.Hashtable $r4;
        java.lang.Object $r5, $r41;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r2 := @parameter0: java.lang.String;

        r11 := @parameter1: groovyjarjarantlr.ActionTransInfo;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        if $r1 != null goto label01;

        return r2;

     label01:
        z5 = 0;

        z9 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

        r47 = r2;

        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 == 0 goto label03;

        $r46 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r46.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z4 != 0 goto label02;

        z5 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

        goto label03;

     label02:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 3 goto label03;

        $i1 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>("_in");

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = $i2 - 3;

        if $i1 != $i3 goto label03;

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        $i5 = $i4 - 3;

        r47 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        z5 = 1;

        z9 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

     label03:
        i6 = 0;

     label04:
        $r48 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r49 = $r48.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $i7 = virtualinvoke $r49.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i6 >= $i7 goto label08;

        $r39 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r40 = $r39.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $r41 = virtualinvoke $r40.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i6);

        r50 = (groovyjarjarantlr.AlternativeElement) $r41;

        $r42 = virtualinvoke r50.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        $z3 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r47);

        if $z3 == 0 goto label07;

        if z6 == 0 goto label05;

        $r51 = r47;

        goto label06;

     label05:
        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r51 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

     label06:
        return $r51;

     label07:
        i6 = i6 + 1;

        goto label04;

     label08:
        $r4 = r0.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r47);

        r52 = (java.lang.String) $r5;

        if r52 == null goto label13;

        $r15 = <groovyjarjarantlr.CSharpCodeGenerator: java.lang.String NONUNIQUE>;

        if r52 != $r15 goto label09;

        $r31 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ambiguous reference to AST element ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in rule ");

        $r35 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r36 = virtualinvoke $r35.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r31.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r38);

        return null;

     label09:
        $r16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r17 = virtualinvoke $r16.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $z2 = virtualinvoke r52.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z2 == 0 goto label10;

        $r22 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ambiguous reference to AST element ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in rule ");

        $r26 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r27 = virtualinvoke $r26.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r22.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r29);

        return null;

     label10:
        if z8 == 0 goto label11;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r52);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_in");

        $r53 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label12;

     label11:
        $r53 = r52;

     label12:
        return $r53;

     label13:
        $r6 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.RuleBlock currentRule>;

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $z1 = virtualinvoke r47.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label17;

        if z7 == 0 goto label14;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST_in");

        $r54 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label15;

     label14:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r47);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_AST");

        $r54 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label15:
        r55 = $r54;

        if r11 == null goto label16;

        if z9 != 0 goto label16;

        r11.<groovyjarjarantlr.ActionTransInfo: java.lang.String refRuleRoot> = $r54;

     label16:
        return r55;

     label17:
        return r47;
    }

    private void mapTreeVariable(groovyjarjarantlr.AlternativeElement, java.lang.String)
    {
        groovyjarjarantlr.CSharpCodeGenerator r2;
        groovyjarjarantlr.RuleRefElement $r10;
        java.lang.String $r1, r5, $r8, r14;
        groovyjarjarantlr.TreeElement $r12;
        java.util.Hashtable $r3, $r6, $r7, $r9;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.TokenRefElement $r11;
        groovyjarjarantlr.GrammarAtom $r13;
        java.lang.Object $r4;
        groovyjarjarantlr.AlternativeElement r0;

        r2 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.AlternativeElement;

        r5 := @parameter1: java.lang.String;

        $z0 = r0 instanceof groovyjarjarantlr.TreeElement;

        if $z0 == 0 goto label1;

        $r12 = (groovyjarjarantlr.TreeElement) r0;

        $r13 = $r12.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        specialinvoke r2.<groovyjarjarantlr.CSharpCodeGenerator: void mapTreeVariable(groovyjarjarantlr.AlternativeElement,java.lang.String)>($r13, r5);

        return;

     label1:
        r14 = null;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r1 != null goto label3;

        $z1 = r0 instanceof groovyjarjarantlr.TokenRefElement;

        if $z1 == 0 goto label2;

        $r11 = (groovyjarjarantlr.TokenRefElement) r0;

        r14 = $r11.<groovyjarjarantlr.TokenRefElement: java.lang.String atomText>;

        goto label3;

     label2:
        $z2 = r0 instanceof groovyjarjarantlr.RuleRefElement;

        if $z2 == 0 goto label3;

        $r10 = (groovyjarjarantlr.RuleRefElement) r0;

        r14 = $r10.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

     label3:
        if r14 == null goto label5;

        $r3 = r2.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r14);

        if $r4 == null goto label4;

        $r7 = r2.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable treeVariableMap>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r14);

        $r9 = r2.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable treeVariableMap>;

        $r8 = <groovyjarjarantlr.CSharpCodeGenerator: java.lang.String NONUNIQUE>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, $r8);

        goto label5;

     label4:
        $r6 = r2.<groovyjarjarantlr.CSharpCodeGenerator: java.util.Hashtable treeVariableMap>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r5);

     label5:
        return;
    }

    protected java.lang.String processActionForSpecialSymbols(java.lang.String, int, groovyjarjarantlr.RuleBlock, groovyjarjarantlr.ActionTransInfo)
    {
        groovyjarjarantlr.Grammar $r1, $r2, $r3, $r6, $r7, $r23;
        groovyjarjarantlr.Token $r26;
        boolean $z0, $z1, $z2, $z3;
        groovyjarjarantlr.RuleBlock r4;
        groovyjarjarantlr.CharStreamException $r8;
        groovyjarjarantlr.RecognitionException $r20;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.Tool $r10, $r16, $r25;
        java.lang.StringBuffer $r11, $r12, $r17, $r18, $r28, $r29;
        int $i0, i1, $i2, $i3, $i5, $i7;
        groovyjarjarantlr.ActionTransInfo r5;
        java.lang.String $r13, $r19, r21, $r24;
        groovyjarjarantlr.actions.csharp.ActionLexer $r27;
        groovyjarjarantlr.TokenStreamException $r14;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r21 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r4 := @parameter2: groovyjarjarantlr.RuleBlock;

        r5 := @parameter3: groovyjarjarantlr.ActionTransInfo;

        if r21 == null goto label01;

        $i0 = virtualinvoke r21.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return null;

     label02:
        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        if $r1 != null goto label03;

        return r21;

     label03:
        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r2.<groovyjarjarantlr.Grammar: boolean buildAST>;

        if $z0 == 0 goto label04;

        $i3 = virtualinvoke r21.<java.lang.String: int indexOf(int)>(35);

        $i5 = (int) -1;

        if $i3 != $i5 goto label06;

     label04:
        $r3 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r3 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z1 != 0 goto label06;

        $r6 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z2 = $r6 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 != 0 goto label05;

        $r7 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r7 instanceof groovyjarjarantlr.ParserGrammar;

        if $z3 == 0 goto label12;

     label05:
        $i2 = virtualinvoke r21.<java.lang.String: int indexOf(int)>(36);

        $i7 = (int) -1;

        if $i2 == $i7 goto label12;

     label06:
        $r27 = new groovyjarjarantlr.actions.csharp.ActionLexer;

        specialinvoke $r27.<groovyjarjarantlr.actions.csharp.ActionLexer: void <init>(java.lang.String,groovyjarjarantlr.RuleBlock,groovyjarjarantlr.CodeGenerator,groovyjarjarantlr.ActionTransInfo)>(r21, r4, r0, r5);

        virtualinvoke $r27.<groovyjarjarantlr.actions.csharp.ActionLexer: void setLineOffset(int)>(i1);

        $r23 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        $r24 = virtualinvoke $r23.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        virtualinvoke $r27.<groovyjarjarantlr.actions.csharp.ActionLexer: void setFilename(java.lang.String)>($r24);

        $r25 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r27.<groovyjarjarantlr.actions.csharp.ActionLexer: void setTool(groovyjarjarantlr.Tool)>($r25);

     label07:
        virtualinvoke $r27.<groovyjarjarantlr.actions.csharp.ActionLexer: void mACTION(boolean)>(1);

        $r26 = virtualinvoke $r27.<groovyjarjarantlr.actions.csharp.ActionLexer: groovyjarjarantlr.Token getTokenObject()>();

        r21 = virtualinvoke $r26.<groovyjarjarantlr.Token: java.lang.String getText()>();

     label08:
        goto label12;

     label09:
        $r20 := @caughtexception;

        virtualinvoke $r27.<groovyjarjarantlr.actions.csharp.ActionLexer: void reportError(groovyjarjarantlr.RecognitionException)>($r20);

        return r21;

     label10:
        $r14 := @caughtexception;

        $r16 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error reading action:");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r16.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r19);

        return r21;

     label11:
        $r8 := @caughtexception;

        $r10 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error reading action:");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r13);

        return r21;

     label12:
        return r21;

        catch groovyjarjarantlr.RecognitionException from label07 to label08 with label09;
        catch groovyjarjarantlr.TokenStreamException from label07 to label08 with label10;
        catch groovyjarjarantlr.CharStreamException from label07 to label08 with label11;
    }

    private void setupGrammarParameters(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.CSharpNameSpace $r17, $r19;
        groovyjarjarantlr.Grammar r0;
        groovyjarjarantlr.Token $r9, $r10, $r13, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        groovyjarjarantlr.CSharpCodeGenerator r1;
        groovyjarjarantlr.Tool $r2, $r20, $r23;
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        java.lang.String $r5, $r8, $r11, $r12, $r14, $r15, $r18, $r22;
        groovyjarjarantlr.NameSpace $r21, $r24;

        r1 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r0 := @parameter0: groovyjarjarantlr.Grammar;

        $z0 = r0 instanceof groovyjarjarantlr.ParserGrammar;

        if $z0 != 0 goto label01;

        $z7 = r0 instanceof groovyjarjarantlr.LexerGrammar;

        if $z7 != 0 goto label01;

        $z8 = r0 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z8 == 0 goto label03;

     label01:
        $r23 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r24 = $r23.<groovyjarjarantlr.Tool: groovyjarjarantlr.NameSpace nameSpace>;

        if $r24 == null goto label02;

        $r19 = new groovyjarjarantlr.CSharpNameSpace;

        $r20 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r21 = $r20.<groovyjarjarantlr.Tool: groovyjarjarantlr.NameSpace nameSpace>;

        $r22 = virtualinvoke $r21.<groovyjarjarantlr.NameSpace: java.lang.String getName()>();

        specialinvoke $r19.<groovyjarjarantlr.CSharpNameSpace: void <init>(java.lang.String)>($r22);

        <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace> = $r19;

     label02:
        $z1 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("namespace");

        if $z1 == 0 goto label03;

        $r16 = virtualinvoke r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("namespace");

        if $r16 == null goto label03;

        $r17 = new groovyjarjarantlr.CSharpNameSpace;

        $r18 = virtualinvoke $r16.<groovyjarjarantlr.Token: java.lang.String getText()>();

        specialinvoke $r17.<groovyjarjarantlr.CSharpNameSpace: void <init>(java.lang.String)>($r18);

        <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace> = $r17;

     label03:
        $z9 = r0 instanceof groovyjarjarantlr.ParserGrammar;

        if $z9 == 0 goto label05;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType> = "AST";

        $z6 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("ASTLabelType");

        if $z6 == 0 goto label04;

        $r13 = virtualinvoke r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("ASTLabelType");

        if $r13 == null goto label04;

        $r14 = virtualinvoke $r13.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r15 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r14, "\"", "\"");

        if $r15 == null goto label04;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST> = 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType> = $r15;

     label04:
        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementType> = "IToken ";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementInit> = "null";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraArgs> = "";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraParams> = "";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonLocalVars> = "";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value> = "LT(1)";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String exceptionThrown> = "RecognitionException";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String throwNoViable> = "throw new NoViableAltException(LT(1), getFilename());";

        goto label12;

     label05:
        $z2 = r0 instanceof groovyjarjarantlr.LexerGrammar;

        if $z2 == 0 goto label06;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementType> = "char ";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementInit> = "\'\\0\'";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraArgs> = "";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraParams> = "bool _createToken";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonLocalVars> = "int _ttype; IToken _token=null; int _begin=text.Length;";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value> = "cached_LA1";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String exceptionThrown> = "RecognitionException";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String throwNoViable> = "throw new NoViableAltForCharException(cached_LA1, getFilename(), getLine(), getColumn());";

        goto label12;

     label06:
        $z3 = r0 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z3 == 0 goto label11;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType> = "AST";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementType> = "AST";

        $z4 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("ASTLabelType");

        if $z4 == 0 goto label07;

        $r10 = virtualinvoke r0.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token getOption(java.lang.String)>("ASTLabelType");

        if $r10 == null goto label07;

        $r11 = virtualinvoke $r10.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r12 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r11, "\"", "\"");

        if $r12 == null goto label07;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST> = 1;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType> = $r12;

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementType> = $r12;

     label07:
        $z10 = virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean hasOption(java.lang.String)>("ASTLabelType");

        if $z10 != 0 goto label08;

        $r9 = new groovyjarjarantlr.Token;

        specialinvoke $r9.<groovyjarjarantlr.Token: void <init>(int,java.lang.String)>(6, "AST");

        virtualinvoke r0.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>("ASTLabelType", $r9);

     label08:
        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementInit> = "null";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraArgs> = "_t";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonExtraParams> = "AST _t";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String commonLocalVars> = "";

        $z5 = r1.<groovyjarjarantlr.CSharpCodeGenerator: boolean usingCustomAST>;

        if $z5 == 0 goto label09;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(_t==ASTNULL) ? null : (");

        $r5 = r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String labeledElementASTType>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")_t");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value> = $r8;

        goto label10;

     label09:
        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String lt1Value> = "_t";

     label10:
        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String exceptionThrown> = "RecognitionException";

        r1.<groovyjarjarantlr.CSharpCodeGenerator: java.lang.String throwNoViable> = "throw new NoViableAltException(_t);";

        goto label12;

     label11:
        $r2 = r1.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r2.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Unknown grammar type");

     label12:
        return;
    }

    public void setupOutput(java.lang.String) throws java.io.IOException
    {
        java.io.PrintWriter $r7;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        groovyjarjarantlr.Tool $r2;
        java.lang.StringBuffer $r1, $r4, $r5;
        java.lang.String r3, $r6;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r3 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Tool antlrTool>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".cs");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = virtualinvoke $r2.<groovyjarjarantlr.Tool: java.io.PrintWriter openOutputFile(java.lang.String)>($r6);

        r0.<groovyjarjarantlr.CSharpCodeGenerator: java.io.PrintWriter currentOutput> = $r7;

        return;
    }

    private static java.lang.String OctalToUnicode(java.lang.String)
    {
        java.lang.Integer $r2;
        java.lang.StringBuffer $r4, $r6, $r7, $r9;
        int $i0, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String r0, $r1, $r5, $r8;
        char $c1, $c2, $c3, $c4, $c7;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if 4 > $i0 goto label1;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i11 = (int) $c1;

        if 39 != $i11 goto label1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $i12 = (int) $c2;

        if 92 != $i12 goto label1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(2);

        $i13 = (int) $c3;

        if 48 > $i13 goto label1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(2);

        $i14 = (int) $c4;

        if 55 < $i14 goto label1;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        $i6 = $i5 - 1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);

        $i15 = (int) $c7;

        if 39 != $i15 goto label1;

        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        $i9 = $i8 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, $i9);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r1, 8);

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\\x");

        $i10 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i10);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;

     label1:
        return r0;
    }

    public java.lang.String getTokenTypesClassName()
    {
        groovyjarjarantlr.Grammar $r1;
        groovyjarjarantlr.CSharpCodeGenerator r0;
        java.lang.StringBuffer $r4, $r6, $r8;
        java.lang.String $r3, $r5, $r7, $r9;
        groovyjarjarantlr.TokenManager r2;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        $r1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.Grammar grammar>;

        r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r3 = new java.lang.String;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = interfaceinvoke r2.<groovyjarjarantlr.TokenManager: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = <groovyjarjarantlr.CSharpCodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.String: void <init>(java.lang.String)>($r9);

        return $r3;
    }

    private void declareSaveIndexVariableIfNeeded()
    {
        int $i0, $i1;
        groovyjarjarantlr.CSharpCodeGenerator r0;

        r0 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        $i0 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel>;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.CSharpCodeGenerator: void println(java.lang.String)>("int _saveIndex = 0;");

        $i1 = r0.<groovyjarjarantlr.CSharpCodeGenerator: int blockNestingLevel>;

        r0.<groovyjarjarantlr.CSharpCodeGenerator: int saveIndexCreateLevel> = $i1;

     label1:
        return;
    }

    public java.lang.String[] split(java.lang.String, java.lang.String)
    {
        java.lang.String[] r3;
        groovyjarjarantlr.CSharpCodeGenerator r5;
        java.util.StringTokenizer $r0;
        int $i0, i1;
        java.lang.String r1, r2, $r4;
        boolean $z0;

        r5 := @this: groovyjarjarantlr.CSharpCodeGenerator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $i0 = virtualinvoke $r0.<java.util.StringTokenizer: int countTokens()>();

        r3 = newarray (java.lang.String)[$i0];

        i1 = 0;

     label1:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r3[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        <groovyjarjarantlr.CSharpCodeGenerator: int caseSizeThreshold> = 127;

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>()>();

        <groovyjarjarantlr.CSharpCodeGenerator: java.lang.String NONUNIQUE> = $r0;

        <groovyjarjarantlr.CSharpCodeGenerator: groovyjarjarantlr.CSharpNameSpace nameSpace> = null;

        return;
    }
}
