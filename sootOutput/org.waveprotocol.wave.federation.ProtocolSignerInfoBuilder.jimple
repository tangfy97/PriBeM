public final class org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder extends java.lang.Object
{
    private org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm hashAlgorithm;
    private java.lang.String domain;
    private final java.util.List certificate;

    public void <init>()
    {
        org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder: java.util.List certificate> = $r1;

        return;
    }

    public org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder setHashAlgorithm(org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm)
    {
        org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm r1;
        org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder r0;

        r0 := @this: org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm;

        r0.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder: org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm hashAlgorithm> = r1;

        return r0;
    }

    public org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder setDomain(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder r0;

        r0 := @this: org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder: java.lang.String domain> = r1;

        return r0;
    }

    public org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder addAllCertificate(java.util.List)
    {
        java.util.List r1, $r2;
        org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder r0;

        r0 := @this: org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder: java.util.List certificate>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }

    public org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder setCertificate(int, org.waveprotocol.wave.communication.Blob)
    {
        java.util.List $r2;
        org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder r0;
        int i0;
        org.waveprotocol.wave.communication.Blob r1;

        r0 := @this: org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.communication.Blob;

        $r2 = r0.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder: java.util.List certificate>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return r0;
    }

    public org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder addCertificate(org.waveprotocol.wave.communication.Blob)
    {
        org.waveprotocol.wave.communication.Blob r1;
        java.util.List $r2;
        org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder r0;

        r0 := @this: org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder;

        r1 := @parameter0: org.waveprotocol.wave.communication.Blob;

        $r2 = r0.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder: java.util.List certificate>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder clearCertificate()
    {
        java.util.List $r1;
        org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder r0;

        r0 := @this: org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder;

        $r1 = r0.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder: java.util.List certificate>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return r0;
    }

    public org.waveprotocol.wave.federation.ProtocolSignerInfo build(org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder$Factory)
    {
        java.util.List $r5;
        org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm $r3;
        org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder$Factory r0;
        org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder r2;
        org.waveprotocol.wave.federation.ProtocolSignerInfo $r1;
        java.lang.String $r4;

        r2 := @this: org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder;

        r0 := @parameter0: org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder$Factory;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder$Factory: org.waveprotocol.wave.federation.ProtocolSignerInfo create()>();

        $r3 = r2.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder: org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm hashAlgorithm>;

        interfaceinvoke $r1.<org.waveprotocol.wave.federation.ProtocolSignerInfo: void setHashAlgorithm(org.waveprotocol.wave.federation.ProtocolSignerInfo$HashAlgorithm)>($r3);

        $r4 = r2.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder: java.lang.String domain>;

        interfaceinvoke $r1.<org.waveprotocol.wave.federation.ProtocolSignerInfo: void setDomain(java.lang.String)>($r4);

        interfaceinvoke $r1.<org.waveprotocol.wave.federation.ProtocolSignerInfo: void clearCertificate()>();

        $r5 = r2.<org.waveprotocol.wave.federation.ProtocolSignerInfoBuilder: java.util.List certificate>;

        interfaceinvoke $r1.<org.waveprotocol.wave.federation.ProtocolSignerInfo: void addAllCertificate(java.util.List)>($r5);

        return $r1;
    }
}
