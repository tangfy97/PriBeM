public abstract class org.codehaus.jackson.impl.JsonParserMinimalBase extends org.codehaus.jackson.JsonParser
{
    protected static final int INT_TAB;
    protected static final int INT_LF;
    protected static final int INT_CR;
    protected static final int INT_SPACE;
    protected static final int INT_LBRACKET;
    protected static final int INT_RBRACKET;
    protected static final int INT_LCURLY;
    protected static final int INT_RCURLY;
    protected static final int INT_QUOTE;
    protected static final int INT_BACKSLASH;
    protected static final int INT_SLASH;
    protected static final int INT_COLON;
    protected static final int INT_COMMA;
    protected static final int INT_ASTERISK;
    protected static final int INT_APOSTROPHE;
    protected static final int INT_b;
    protected static final int INT_f;
    protected static final int INT_n;
    protected static final int INT_r;
    protected static final int INT_t;
    protected static final int INT_u;

    protected void <init>()
    {
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        specialinvoke r0.<org.codehaus.jackson.JsonParser: void <init>()>();

        return;
    }

    protected void <init>(int)
    {
        int i0;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        i0 := @parameter0: int;

        specialinvoke r0.<org.codehaus.jackson.JsonParser: void <init>(int)>(i0);

        return;
    }

    public abstract org.codehaus.jackson.JsonToken nextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public org.codehaus.jackson.JsonParser skipChildren() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r6;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;
        int[] $r3;
        int $i0, $i1, i2, $i4;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r2 == $r1 goto label1;

        $r5 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r5 == $r4 goto label1;

        return r0;

     label1:
        i2 = 1;

     label2:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken nextToken()>();

        if $r6 != null goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _handleEOF()>();

        return r0;

     label3:
        $r3 = <org.codehaus.jackson.impl.JsonParserMinimalBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $i0 = virtualinvoke $r6.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label5;
            default: goto label6;
        };

     label4:
        i2 = i2 + 1;

        goto label6;

     label5:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 != 0 goto label6;

        return r0;

     label6:
        goto label2;
    }

    protected abstract void _handleEOF() throws org.codehaus.jackson.JsonParseException;

    public abstract java.lang.String getCurrentName() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract void close() throws java.io.IOException;

    public abstract boolean isClosed();

    public abstract org.codehaus.jackson.JsonStreamContext getParsingContext();

    public abstract java.lang.String getText() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract char[] getTextCharacters() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract boolean hasTextCharacters();

    public abstract int getTextLength() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract int getTextOffset() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract byte[] getBinaryValue(org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public boolean getValueAsBoolean(boolean) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2;
        int[] $r3;
        int $i0, $i1, $i2;
        java.lang.Boolean $r8;
        java.lang.String $r4, $r5, $r6;
        boolean z0, $z1, $z2, $z3, $z4;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;
        java.lang.Object $r7;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label8;

        $r3 = <org.codehaus.jackson.impl.JsonParserMinimalBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 5: goto label1;
            case 6: goto label4;
            case 7: goto label5;
            case 8: goto label5;
            case 9: goto label6;
            case 10: goto label7;
            default: goto label8;
        };

     label1:
        $i2 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: int getIntValue()>();

        if $i2 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;

     label4:
        return 1;

     label5:
        return 0;

     label6:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.Object getEmbeddedObject()>();

        $z2 = $r7 instanceof java.lang.Boolean;

        if $z2 == 0 goto label7;

        $r8 = (java.lang.Boolean) $r7;

        $z3 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        return $z3;

     label7:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.String getText()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r6 = "true";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label8;

        return 1;

     label8:
        return z0;
    }

    public int getValueAsInt(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;
        int[] $r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r5;
        java.lang.String $r4;
        java.lang.Number $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label6;

        $r3 = <org.codehaus.jackson.impl.JsonParserMinimalBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        $i1 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i2 = $r3[$i1];

        tableswitch($i2)
        {
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label5;
            case 10: goto label4;
            case 11: goto label1;
            default: goto label6;
        };

     label1:
        $i5 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: int getIntValue()>();

        return $i5;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.String getText()>();

        $i3 = staticinvoke <org.codehaus.jackson.io.NumberInput: int parseAsInt(java.lang.String,int)>($r4, i0);

        return $i3;

     label5:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.Object getEmbeddedObject()>();

        $z0 = $r5 instanceof java.lang.Number;

        if $z0 == 0 goto label6;

        $r6 = (java.lang.Number) $r5;

        $i4 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        return $i4;

     label6:
        return i0;
    }

    public long getValueAsLong(long) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2;
        long l0, $l3, $l4, $l5;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;
        int[] $r3;
        int $i1, $i2;
        java.lang.Object $r5;
        java.lang.String $r4;
        java.lang.Number $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        l0 := @parameter0: long;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label6;

        $r3 = <org.codehaus.jackson.impl.JsonParserMinimalBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        $i1 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i2 = $r3[$i1];

        tableswitch($i2)
        {
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label5;
            case 10: goto label4;
            case 11: goto label1;
            default: goto label6;
        };

     label1:
        $l5 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: long getLongValue()>();

        return $l5;

     label2:
        return 1L;

     label3:
        return 0L;

     label4:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.String getText()>();

        $l3 = staticinvoke <org.codehaus.jackson.io.NumberInput: long parseAsLong(java.lang.String,long)>($r4, l0);

        return $l3;

     label5:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.Object getEmbeddedObject()>();

        $z0 = $r5 instanceof java.lang.Number;

        if $z0 == 0 goto label6;

        $r6 = (java.lang.Number) $r5;

        $l4 = virtualinvoke $r6.<java.lang.Number: long longValue()>();

        return $l4;

     label6:
        return l0;
    }

    public double getValueAsDouble(double) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;
        int[] $r3;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r4;
        java.lang.Number $r6;
        double d0, $d1, $d2, $d3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        d0 := @parameter0: double;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label6;

        $r3 = <org.codehaus.jackson.impl.JsonParserMinimalBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label5;
            case 10: goto label4;
            case 11: goto label1;
            default: goto label6;
        };

     label1:
        $d3 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: double getDoubleValue()>();

        return $d3;

     label2:
        return 1.0;

     label3:
        return 0.0;

     label4:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.String getText()>();

        $d1 = staticinvoke <org.codehaus.jackson.io.NumberInput: double parseAsDouble(java.lang.String,double)>($r4, d0);

        return $d1;

     label5:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.Object getEmbeddedObject()>();

        $z0 = $r5 instanceof java.lang.Number;

        if $z0 == 0 goto label6;

        $r6 = (java.lang.Number) $r5;

        $d2 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>();

        return $d2;

     label6:
        return d0;
    }

    protected void _decodeBase64(java.lang.String, org.codehaus.jackson.util.ByteArrayBuilder, org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.Base64Variant r1;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;
        int $i0, $i1, $i3, $i5, $i6, $i8, $i9, $i11, $i12, $i13, $i16, $i17, i18, i19, i20, i21, i22, i23, i24, $i25, $i27, $i29;
        java.lang.String r0, $r8;
        char $c2, $c4, $c7, $c10, $c14, $c15;
        org.codehaus.jackson.impl.JsonParserMinimalBase r3;
        org.codehaus.jackson.util.ByteArrayBuilder r2;

        r3 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.jackson.util.ByteArrayBuilder;

        r1 := @parameter2: org.codehaus.jackson.Base64Variant;

        i18 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

     label01:
        if i18 >= $i0 goto label18;

     label02:
        $i1 = i18;

        i18 = i18 + 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        if i18 < $i0 goto label03;

        goto label18;

     label03:
        $i25 = (int) $c2;

        if $i25 <= 32 goto label02;

        $i3 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c2);

        if $i3 >= 0 goto label04;

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, $c2, 0, null);

     label04:
        if i18 < $i0 goto label05;

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportBase64EOF()>();

     label05:
        i19 = i18 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i18);

        $i5 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c4);

        if $i5 >= 0 goto label06;

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, $c4, 1, null);

     label06:
        $i6 = $i3 << 6;

        $i17 = $i6 | $i5;

        if i19 < $i0 goto label08;

        $z2 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: boolean usesPadding()>();

        if $z2 != 0 goto label07;

        i20 = $i17 >> 4;

        virtualinvoke r2.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>(i20);

        goto label18;

     label07:
        virtualinvoke r3.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportBase64EOF()>();

     label08:
        i21 = i19 + 1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i19);

        $i8 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c7);

        if $i8 >= 0 goto label12;

        $i27 = (int) -2;

        if $i8 == $i27 goto label09;

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, $c7, 2, null);

     label09:
        if i21 < $i0 goto label10;

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportBase64EOF()>();

     label10:
        i18 = i21 + 1;

        $c14 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i21);

        $z1 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(char)>($c14);

        if $z1 != 0 goto label11;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected padding character \'");

        $c15 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c15);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, $c14, 3, $r8);

     label11:
        $i16 = $i17 >> 4;

        virtualinvoke r2.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>($i16);

        goto label01;

     label12:
        $i9 = $i17 << 6;

        i22 = $i9 | $i8;

        if i21 < $i0 goto label14;

        $z0 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: boolean usesPadding()>();

        if $z0 != 0 goto label13;

        i23 = i22 >> 2;

        virtualinvoke r2.<org.codehaus.jackson.util.ByteArrayBuilder: void appendTwoBytes(int)>(i23);

        goto label18;

     label13:
        virtualinvoke r3.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportBase64EOF()>();

     label14:
        i18 = i21 + 1;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i21);

        $i11 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c10);

        if $i11 >= 0 goto label16;

        $i29 = (int) -2;

        if $i11 == $i29 goto label15;

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, $c10, 3, null);

     label15:
        $i13 = i22 >> 2;

        virtualinvoke r2.<org.codehaus.jackson.util.ByteArrayBuilder: void appendTwoBytes(int)>($i13);

        goto label17;

     label16:
        $i12 = i22 << 6;

        i24 = $i12 | $i11;

        virtualinvoke r2.<org.codehaus.jackson.util.ByteArrayBuilder: void appendThreeBytes(int)>(i24);

     label17:
        goto label01;

     label18:
        return;
    }

    protected void _reportInvalidBase64(org.codehaus.jackson.Base64Variant, char, int, java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.Base64Variant r0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r4, $r5, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r27, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r3, r6, $r17, $r28, r33;
        char c0, $c1;
        org.codehaus.jackson.impl.JsonParserMinimalBase r7;
        org.codehaus.jackson.JsonParseException $r8;

        r7 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        r0 := @parameter0: org.codehaus.jackson.Base64Variant;

        c0 := @parameter1: char;

        i2 := @parameter2: int;

        r6 := @parameter3: java.lang.String;

        $i5 = (int) c0;

        if $i5 > 32 goto label1;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal white space character (code 0x");

        $i6 = (int) c0;

        $r28 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") as character #");

        $i4 = i2 + 1;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: can only used between units");

        r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(char)>(c0);

        if $z0 == 0 goto label2;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected padding character (\'");

        $c1 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') as character #");

        $i3 = i2 + 1;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        r33 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label2:
        $z1 = staticinvoke <java.lang.Character: boolean isDefined(char)>(c0);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c0);

        if $z2 == 0 goto label4;

     label3:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (code 0x");

        $i7 = (int) c0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r33 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code 0x");

        $i8 = (int) c0;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r33 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        if r6 == null goto label6;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r33 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r8 = virtualinvoke r7.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>(r33);

        throw $r8;
    }

    protected void _reportBase64EOF() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonParseException $r1;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>("Unexpected end-of-String in base64 content");

        throw $r1;
    }

    protected void _reportUnexpectedChar(int, java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonParserMinimalBase r7;
        int i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r8, $r9, $r10, $r11;
        java.lang.String $r2, $r5, r6, r12;

        r7 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected character (");

        $r2 = staticinvoke <org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.String _getCharDesc(int)>(i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = $r5;

        if r6 == null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        virtualinvoke r7.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportError(java.lang.String)>(r12);

        return;
    }

    protected void _reportInvalidEOF() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r3;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r3 = r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonToken _currToken>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportInvalidEOF(java.lang.String)>($r5);

        return;
    }

    protected void _reportInvalidEOF(java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected end-of-input");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportError(java.lang.String)>($r5);

        return;
    }

    protected void _reportInvalidEOFInValue() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportInvalidEOF(java.lang.String)>(" in a value");

        return;
    }

    protected void _throwInvalidSpace(int) throws org.codehaus.jackson.JsonParseException
    {
        char c1;
        org.codehaus.jackson.impl.JsonParserMinimalBase r6;
        int i0, $i2;
        java.lang.StringBuilder $r1, $r3, $r4, $r7;
        java.lang.String $r2, $r5;

        r6 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        i0 := @parameter0: int;

        c1 = (char) i0;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (");

        $i2 = (int) c1;

        $r2 = staticinvoke <org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.String _getCharDesc(int)>($i2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): only regular white space (\\r, \\n, \\t) is allowed between tokens");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r6.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportError(java.lang.String)>($r5);

        return;
    }

    protected void _throwUnquotedSpace(int, java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        char $c1;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;
        int i0, $i2;
        java.lang.StringBuilder $r3, $r5, $r6, $r8, $r10;
        java.lang.String $r4, r7, $r9;
        org.codehaus.jackson.JsonParser$Feature $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        $r1 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_UNQUOTED_CONTROL_CHARS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r1);

        if $z0 == 0 goto label1;

        if i0 < 32 goto label2;

     label1:
        $c1 = (char) i0;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal unquoted character (");

        $i2 = (int) $c1;

        $r4 = staticinvoke <org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.String _getCharDesc(int)>($i2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): has to be escaped using backslash to be included in ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportError(java.lang.String)>($r9);

     label2:
        return;
    }

    protected char _handleUnrecognizedCharacterEscape(char) throws org.codehaus.jackson.JsonProcessingException
    {
        char c0;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;
        int $i1, $i2;
        java.lang.StringBuilder $r3, $r5, $r8;
        java.lang.String $r4, $r6;
        org.codehaus.jackson.JsonParser$Feature $r1, $r7;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        c0 := @parameter0: char;

        $r1 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r1);

        if $z0 == 0 goto label1;

        return c0;

     label1:
        $i1 = (int) c0;

        if $i1 != 39 goto label2;

        $r7 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_SINGLE_QUOTES>;

        $z1 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r7);

        if $z1 == 0 goto label2;

        return c0;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character escape ");

        $i2 = (int) c0;

        $r4 = staticinvoke <org.codehaus.jackson.impl.JsonParserMinimalBase: java.lang.String _getCharDesc(int)>($i2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void _reportError(java.lang.String)>($r6);

        return c0;
    }

    protected static final java.lang.String _getCharDesc(int)
    {
        int i0;
        java.lang.String $r6, $r13, $r16, $r21;
        boolean $z0;
        char c1;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20;

        i0 := @parameter0: int;

        c1 = (char) i0;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c1);

        if $z0 == 0 goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(CTRL-CHAR, code ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;

     label1:
        if i0 <= 255 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / 0x");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    protected final void _reportError(java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        java.lang.String r1;
        org.codehaus.jackson.JsonParseException $r2;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>(r1);

        throw $r2;
    }

    protected final void _wrapError(java.lang.String, java.lang.Throwable) throws org.codehaus.jackson.JsonParseException
    {
        java.lang.Throwable r2;
        org.codehaus.jackson.JsonParseException $r3;
        java.lang.String r1;
        org.codehaus.jackson.impl.JsonParserMinimalBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonParseException _constructError(java.lang.String,java.lang.Throwable)>(r1, r2);

        throw $r3;
    }

    protected final void _throwInternal()
    {
        java.lang.RuntimeException $r0;
        org.codehaus.jackson.impl.JsonParserMinimalBase r1;

        r1 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error: this code path should never get executed");

        throw $r0;
    }

    protected final org.codehaus.jackson.JsonParseException _constructError(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r4;
        org.codehaus.jackson.JsonParseException $r0;
        java.lang.String r1;
        org.codehaus.jackson.JsonLocation $r3;
        org.codehaus.jackson.impl.JsonParserMinimalBase r2;

        r2 := @this: org.codehaus.jackson.impl.JsonParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Throwable;

        $r0 = new org.codehaus.jackson.JsonParseException;

        $r3 = virtualinvoke r2.<org.codehaus.jackson.impl.JsonParserMinimalBase: org.codehaus.jackson.JsonLocation getCurrentLocation()>();

        specialinvoke $r0.<org.codehaus.jackson.JsonParseException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation,java.lang.Throwable)>(r1, $r3, r4);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_u> = 117;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_t> = 116;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_r> = 114;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_n> = 110;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_f> = 102;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_b> = 98;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_APOSTROPHE> = 39;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_ASTERISK> = 42;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_COMMA> = 44;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_COLON> = 58;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_SLASH> = 47;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_BACKSLASH> = 92;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_QUOTE> = 34;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_RCURLY> = 125;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_LCURLY> = 123;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_RBRACKET> = 93;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_LBRACKET> = 91;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_SPACE> = 32;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_CR> = 13;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_LF> = 10;

        <org.codehaus.jackson.impl.JsonParserMinimalBase: int INT_TAB> = 9;

        return;
    }
}
