public class com.jhlabs.image.WarpFilter extends com.jhlabs.image.WholeImageFilter
{
    static final long serialVersionUID;
    private com.jhlabs.image.WarpGrid sourceGrid;
    private com.jhlabs.image.WarpGrid destGrid;
    private int frames;
    private java.awt.image.BufferedImage morphImage;
    private float time;

    public void <init>()
    {
        com.jhlabs.image.WarpFilter r0;

        r0 := @this: com.jhlabs.image.WarpFilter;

        specialinvoke r0.<com.jhlabs.image.WholeImageFilter: void <init>()>();

        r0.<com.jhlabs.image.WarpFilter: int frames> = 1;

        return;
    }

    public void <init>(com.jhlabs.image.WarpGrid, com.jhlabs.image.WarpGrid)
    {
        com.jhlabs.image.WarpFilter r0;
        com.jhlabs.image.WarpGrid r1, r2;

        r0 := @this: com.jhlabs.image.WarpFilter;

        r1 := @parameter0: com.jhlabs.image.WarpGrid;

        r2 := @parameter1: com.jhlabs.image.WarpGrid;

        specialinvoke r0.<com.jhlabs.image.WholeImageFilter: void <init>()>();

        r0.<com.jhlabs.image.WarpFilter: int frames> = 1;

        r0.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid> = r1;

        r0.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid destGrid> = r2;

        return;
    }

    public void setSourceGrid(com.jhlabs.image.WarpGrid)
    {
        com.jhlabs.image.WarpFilter r0;
        com.jhlabs.image.WarpGrid r1;

        r0 := @this: com.jhlabs.image.WarpFilter;

        r1 := @parameter0: com.jhlabs.image.WarpGrid;

        r0.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid> = r1;

        return;
    }

    public com.jhlabs.image.WarpGrid getSourceGrid()
    {
        com.jhlabs.image.WarpFilter r0;
        com.jhlabs.image.WarpGrid $r1;

        r0 := @this: com.jhlabs.image.WarpFilter;

        $r1 = r0.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid>;

        return $r1;
    }

    public void setDestGrid(com.jhlabs.image.WarpGrid)
    {
        com.jhlabs.image.WarpFilter r0;
        com.jhlabs.image.WarpGrid r1;

        r0 := @this: com.jhlabs.image.WarpFilter;

        r1 := @parameter0: com.jhlabs.image.WarpGrid;

        r0.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid destGrid> = r1;

        return;
    }

    public com.jhlabs.image.WarpGrid getDestGrid()
    {
        com.jhlabs.image.WarpFilter r0;
        com.jhlabs.image.WarpGrid $r1;

        r0 := @this: com.jhlabs.image.WarpFilter;

        $r1 = r0.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid destGrid>;

        return $r1;
    }

    public void setFrames(int)
    {
        int i0;
        com.jhlabs.image.WarpFilter r0;

        r0 := @this: com.jhlabs.image.WarpFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.WarpFilter: int frames> = i0;

        return;
    }

    public int getFrames()
    {
        int $i0;
        com.jhlabs.image.WarpFilter r0;

        r0 := @this: com.jhlabs.image.WarpFilter;

        $i0 = r0.<com.jhlabs.image.WarpFilter: int frames>;

        return $i0;
    }

    public void setMorphImage(java.awt.image.BufferedImage)
    {
        com.jhlabs.image.WarpFilter r0;
        java.awt.image.BufferedImage r1;

        r0 := @this: com.jhlabs.image.WarpFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0.<com.jhlabs.image.WarpFilter: java.awt.image.BufferedImage morphImage> = r1;

        return;
    }

    public java.awt.image.BufferedImage getMorphImage()
    {
        com.jhlabs.image.WarpFilter r0;
        java.awt.image.BufferedImage $r1;

        r0 := @this: com.jhlabs.image.WarpFilter;

        $r1 = r0.<com.jhlabs.image.WarpFilter: java.awt.image.BufferedImage morphImage>;

        return $r1;
    }

    public void setTime(float)
    {
        float f0;
        com.jhlabs.image.WarpFilter r0;

        r0 := @this: com.jhlabs.image.WarpFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.WarpFilter: float time> = f0;

        return;
    }

    public float getTime()
    {
        float $f0;
        com.jhlabs.image.WarpFilter r0;

        r0 := @this: com.jhlabs.image.WarpFilter;

        $f0 = r0.<com.jhlabs.image.WarpFilter: float time>;

        return $f0;
    }

    protected void transformSpace(java.awt.Rectangle)
    {
        java.awt.Rectangle r0;
        int $i0, $i1, $i2;
        com.jhlabs.image.WarpFilter r1;

        r1 := @this: com.jhlabs.image.WarpFilter;

        r0 := @parameter0: java.awt.Rectangle;

        $i1 = r0.<java.awt.Rectangle: int width>;

        $i0 = r1.<com.jhlabs.image.WarpFilter: int frames>;

        $i2 = $i1 * $i0;

        r0.<java.awt.Rectangle: int width> = $i2;

        return;
    }

    protected int[] filterPixels(int, int, int[], java.awt.Rectangle)
    {
        int[] r0, r8, $r15;
        java.awt.image.BufferedImage $r2, $r14;
        float $f0, $f1, f2, $f3;
        java.awt.Rectangle r18;
        com.jhlabs.image.WarpGrid $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r16, $r17;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        com.jhlabs.image.WarpFilter r1;

        r1 := @this: com.jhlabs.image.WarpFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r8 := @parameter2: int[];

        r18 := @parameter3: java.awt.Rectangle;

        $i2 = i0 * i1;

        r0 = newarray (int)[$i2];

        $r2 = r1.<com.jhlabs.image.WarpFilter: java.awt.image.BufferedImage morphImage>;

        if $r2 == null goto label1;

        $r14 = r1.<com.jhlabs.image.WarpFilter: java.awt.image.BufferedImage morphImage>;

        $r15 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>($r14, 0, 0, i0, i1, null);

        $r17 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid>;

        $r16 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid destGrid>;

        $f3 = r1.<com.jhlabs.image.WarpFilter: float time>;

        virtualinvoke r1.<com.jhlabs.image.WarpFilter: void morph(int[],int[],int[],com.jhlabs.image.WarpGrid,com.jhlabs.image.WarpGrid,int,int,float)>(r8, $r15, r0, $r17, $r16, i0, i1, $f3);

        goto label4;

     label1:
        $i3 = r1.<com.jhlabs.image.WarpFilter: int frames>;

        if $i3 > 1 goto label2;

        $r13 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid>;

        $r12 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid>;

        $r11 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid destGrid>;

        virtualinvoke $r13.<com.jhlabs.image.WarpGrid: void warp(int[],int,int,com.jhlabs.image.WarpGrid,com.jhlabs.image.WarpGrid,int[])>(r8, i0, i1, $r12, $r11, r0);

        goto label4;

     label2:
        $r3 = new com.jhlabs.image.WarpGrid;

        $r4 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid>;

        $i5 = $r4.<com.jhlabs.image.WarpGrid: int rows>;

        $r5 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid>;

        $i4 = $r5.<com.jhlabs.image.WarpGrid: int cols>;

        specialinvoke $r3.<com.jhlabs.image.WarpGrid: void <init>(int,int,int,int)>($i5, $i4, i0, i1);

        i9 = 0;

     label3:
        $i6 = r1.<com.jhlabs.image.WarpFilter: int frames>;

        if i9 >= $i6 goto label4;

        $f1 = (float) i9;

        $i7 = r1.<com.jhlabs.image.WarpFilter: int frames>;

        $i8 = $i7 - 1;

        $f0 = (float) $i8;

        f2 = $f1 / $f0;

        $r7 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid>;

        $r6 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid destGrid>;

        virtualinvoke $r7.<com.jhlabs.image.WarpGrid: void lerp(float,com.jhlabs.image.WarpGrid,com.jhlabs.image.WarpGrid)>(f2, $r6, $r3);

        $r10 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid>;

        $r9 = r1.<com.jhlabs.image.WarpFilter: com.jhlabs.image.WarpGrid sourceGrid>;

        virtualinvoke $r10.<com.jhlabs.image.WarpGrid: void warp(int[],int,int,com.jhlabs.image.WarpGrid,com.jhlabs.image.WarpGrid,int[])>(r8, i0, i1, $r9, $r3, r0);

        i9 = i9 + 1;

        goto label3;

     label4:
        return r0;
    }

    public void morph(int[], int[], int[], com.jhlabs.image.WarpGrid, com.jhlabs.image.WarpGrid, int, int, float)
    {
        int[] r3, r4, r5, r6;
        com.jhlabs.image.WarpGrid $r0, r1, r2;
        int i0, i1, $i2, $i3, $i4;
        float f0;
        com.jhlabs.image.WarpFilter r7;

        r7 := @this: com.jhlabs.image.WarpFilter;

        r3 := @parameter0: int[];

        r6 := @parameter1: int[];

        r4 := @parameter2: int[];

        r1 := @parameter3: com.jhlabs.image.WarpGrid;

        r2 := @parameter4: com.jhlabs.image.WarpGrid;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        f0 := @parameter7: float;

        $r0 = new com.jhlabs.image.WarpGrid;

        $i3 = r1.<com.jhlabs.image.WarpGrid: int rows>;

        $i2 = r1.<com.jhlabs.image.WarpGrid: int cols>;

        specialinvoke $r0.<com.jhlabs.image.WarpGrid: void <init>(int,int,int,int)>($i3, $i2, i0, i1);

        virtualinvoke r1.<com.jhlabs.image.WarpGrid: void lerp(float,com.jhlabs.image.WarpGrid,com.jhlabs.image.WarpGrid)>(f0, r2, $r0);

        virtualinvoke r1.<com.jhlabs.image.WarpGrid: void warp(int[],int,int,com.jhlabs.image.WarpGrid,com.jhlabs.image.WarpGrid,int[])>(r3, i0, i1, r1, $r0, r4);

        $i4 = i0 * i1;

        r5 = newarray (int)[$i4];

        virtualinvoke r2.<com.jhlabs.image.WarpGrid: void warp(int[],int,int,com.jhlabs.image.WarpGrid,com.jhlabs.image.WarpGrid,int[])>(r6, i0, i1, r2, $r0, r5);

        virtualinvoke r7.<com.jhlabs.image.WarpFilter: void crossDissolve(int[],int[],int,int,float)>(r4, r5, i0, i1, f0);

        return;
    }

    public void crossDissolve(int[], int[], int, int, float)
    {
        int[] r0, r1;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7;
        float f0;
        com.jhlabs.image.WarpFilter r2;

        r2 := @this: com.jhlabs.image.WarpFilter;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        f0 := @parameter4: float;

        i5 = 0;

        i6 = 0;

     label1:
        if i6 >= i0 goto label4;

        i7 = 0;

     label2:
        if i7 >= i1 goto label3;

        $i3 = r0[i5];

        $i2 = r1[i5];

        $i4 = staticinvoke <com.jhlabs.image.ImageMath: int mixColors(float,int,int)>(f0, $i3, $i2);

        r0[i5] = $i4;

        i5 = i5 + 1;

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        return;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.WarpFilter r0;

        r0 := @this: com.jhlabs.image.WarpFilter;

        return "Distort/Mesh Warp...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.WarpFilter: long serialVersionUID> = 1299148944426051330L;

        return;
    }
}
