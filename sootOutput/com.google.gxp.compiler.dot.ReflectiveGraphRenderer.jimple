public class com.google.gxp.compiler.dot.ReflectiveGraphRenderer extends java.lang.Object implements com.google.gxp.compiler.dot.GraphRenderer
{
    private final java.lang.String graphName;
    private static final java.util.regex.Pattern GETTER_PATTERN;

    public void <init>(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r1, $r3;
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer r0;

        r0 := @this: com.google.gxp.compiler.dot.ReflectiveGraphRenderer;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.String) $r2;

        r0.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer: java.lang.String graphName> = $r3;

        return;
    }

    public void renderGraph(com.google.gxp.compiler.dot.GraphSink, java.lang.Iterable)
    {
        java.util.Iterator $r5;
        java.lang.Iterable r4;
        com.google.gxp.compiler.dot.GraphSink r0;
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker $r3;
        java.lang.Object $r6;
        java.lang.String $r2;
        com.google.gxp.compiler.dot.ReflectiveGraphRenderer r1;
        boolean $z0;

        r1 := @this: com.google.gxp.compiler.dot.ReflectiveGraphRenderer;

        r0 := @parameter0: com.google.gxp.compiler.dot.GraphSink;

        r4 := @parameter1: java.lang.Iterable;

        $r2 = r1.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer: java.lang.String graphName>;

        interfaceinvoke r0.<com.google.gxp.compiler.dot.GraphSink: void digraphStart(java.lang.String)>($r2);

        $r3 = new com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker;

        specialinvoke $r3.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker: void <init>(com.google.gxp.compiler.dot.GraphSink)>(r0);

        $r5 = interfaceinvoke r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r3.<com.google.gxp.compiler.dot.ReflectiveGraphRenderer$Worker: java.lang.String renderSubgraph(java.lang.Object)>($r6);

        goto label1;

     label2:
        interfaceinvoke r0.<com.google.gxp.compiler.dot.GraphSink: void digraphEnd()>();

        return;
    }

    private static java.lang.String javaEscape(java.lang.Object)
    {
        com.google.gxp.com.google.common.base.CharEscaper $r1, $r5;
        java.lang.Object r0;
        java.lang.StringBuilder $r3, $r4, $r8, $r9;
        java.lang.String $r2, $r6, $r7, $r10;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r5 = staticinvoke <com.google.gxp.com.google.common.base.CharEscapers: com.google.gxp.com.google.common.base.CharEscaper javaStringEscaper()>();

        $r6 = (java.lang.String) r0;

        $r7 = virtualinvoke $r5.<com.google.gxp.com.google.common.base.CharEscaper: java.lang.String escape(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r1 = staticinvoke <com.google.gxp.com.google.common.base.CharEscapers: com.google.gxp.com.google.common.base.CharEscaper javaStringEscaper()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r1.<com.google.gxp.com.google.common.base.CharEscaper: java.lang.String escape(java.lang.String)>($r2);

     label2:
        return $r10;
    }

    static java.lang.String access$100(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <com.google.gxp.compiler.dot.ReflectiveGraphRenderer: java.lang.String javaEscape(java.lang.Object)>(r0);

        return $r1;
    }

    static java.util.regex.Pattern access$600()
    {
        java.util.regex.Pattern $r0;

        $r0 = <com.google.gxp.compiler.dot.ReflectiveGraphRenderer: java.util.regex.Pattern GETTER_PATTERN>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(?:get|is)([A-Z])([A-Za-z0-9_]*)$");

        <com.google.gxp.compiler.dot.ReflectiveGraphRenderer: java.util.regex.Pattern GETTER_PATTERN> = $r0;

        return;
    }
}
