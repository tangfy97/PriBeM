class org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1 extends java.lang.Object implements org.waveprotocol.wave.federation.xmpp.SuccessFailCallback
{
    final org.waveprotocol.wave.model.id.WaveletName val$waveletName;
    final java.util.List val$deltaList;
    final org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion val$committedVersion;
    final org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback val$callback;
    final org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain, org.waveprotocol.wave.model.id.WaveletName, java.util.List, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)
    {
        org.waveprotocol.wave.model.id.WaveletName r2;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback r5;
        java.util.List r3;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1 r0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r4;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r5 := @parameter4: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: org.waveprotocol.wave.model.id.WaveletName val$waveletName> = r2;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: java.util.List val$deltaList> = r3;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion val$committedVersion> = r4;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback val$callback> = r5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.String)
    {
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback $r2;
        org.waveprotocol.wave.model.id.WaveletName $r5;
        java.util.List $r4;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain $r6;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1 r0;
        java.lang.String r1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r3;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain this$0>;

        $r5 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: org.waveprotocol.wave.model.id.WaveletName val$waveletName>;

        $r4 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: java.util.List val$deltaList>;

        $r3 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion val$committedVersion>;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback val$callback>;

        staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: void access$000(org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain,org.waveprotocol.wave.model.id.WaveletName,java.util.List,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback,java.lang.String)>($r6, $r5, $r4, $r3, $r2, r1);

        return;
    }

    public void onFailure(java.lang.String)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain $r10;
        java.util.logging.Level $r1;
        java.lang.String r3, $r11, $r14;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code $r4;
        boolean $z0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r6;
        java.util.logging.Logger $r0, $r7;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback $r5;
        java.lang.StringBuilder $r8, $r9, $r12, $r13;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1 r2;

        r2 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: java.util.logging.Logger access$100()>();

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: java.util.logging.Logger access$100()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Disco failed for remote domain ");

        $r10 = r2.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain this$0>;

        $r11 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain: java.lang.String access$200(org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", update not sent");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void fine(java.lang.String)>($r14);

     label1:
        $r5 = r2.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback val$callback>;

        $r4 = <org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code: org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code RESOURCE_CONSTRAINT>;

        $r6 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError newFederationError(org.waveprotocol.wave.federation.FederationErrorProto$FederationError$Code,java.lang.String)>($r4, r3);

        interfaceinvoke $r5.<org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r6);

        return;
    }

    public volatile void onFailure(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1 r0;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        virtualinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: void onFailure(java.lang.String)>($r2);

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1 r0;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        virtualinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHostForDomain$1: void onSuccess(java.lang.String)>($r2);

        return;
    }
}
