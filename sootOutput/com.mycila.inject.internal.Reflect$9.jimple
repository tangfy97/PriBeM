final class com.mycila.inject.internal.Reflect$9 extends java.lang.Object implements com.mycila.inject.internal.WeakCache$Provider
{

    void <init>()
    {
        com.mycila.inject.internal.Reflect$9 r0;

        r0 := @this: com.mycila.inject.internal.Reflect$9;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Iterable get(java.lang.Class)
    {
        com.mycila.inject.internal.guava.base.Predicate $r2;
        com.mycila.inject.internal.WeakCache $r7;
        java.lang.Iterable $r3, $r5, $r12, $r13, $r14;
        java.lang.reflect.Method[] $r17;
        java.util.ArrayList $r6;
        com.mycila.inject.internal.guava.base.Function $r4;
        boolean $z0;
        com.mycila.inject.internal.Reflect$9 r11;
        java.util.List $r1, $r15, $r16;
        java.lang.Class r0, $r8;
        java.lang.Object $r9;
        com.mycila.inject.internal.Reflect$9$1 $r10;

        r11 := @this: com.mycila.inject.internal.Reflect$9;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r16 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r16;

     label1:
        if r0 != class "Ljava/lang/Object;" goto label2;

        $r15 = staticinvoke <com.mycila.inject.internal.Reflect: java.util.List access$000()>();

        return $r15;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label3;

        $r17 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        goto label4;

     label3:
        $r17 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label4:
        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        $r2 = staticinvoke <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Predicate access$100()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,com.mycila.inject.internal.guava.base.Predicate)>($r1, $r2);

        $r4 = staticinvoke <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.guava.base.Function access$200()>();

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.mycila.inject.internal.guava.base.Function)>($r3, $r4);

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r5);

        $r7 = staticinvoke <com.mycila.inject.internal.Reflect: com.mycila.inject.internal.WeakCache access$300()>();

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r9 = virtualinvoke $r7.<com.mycila.inject.internal.WeakCache: java.lang.Object get(java.lang.Object)>($r8);

        $r12 = (java.lang.Iterable) $r9;

        $r10 = new com.mycila.inject.internal.Reflect$9$1;

        specialinvoke $r10.<com.mycila.inject.internal.Reflect$9$1: void <init>(com.mycila.inject.internal.Reflect$9,java.util.List)>(r11, $r6);

        $r13 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,com.mycila.inject.internal.guava.base.Predicate)>($r12, $r10);

        $r14 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r6, $r13);

        return $r14;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.Iterable $r3;
        com.mycila.inject.internal.Reflect$9 r0;

        r0 := @this: com.mycila.inject.internal.Reflect$9;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.Reflect$9: java.lang.Iterable get(java.lang.Class)>($r2);

        return $r3;
    }
}
