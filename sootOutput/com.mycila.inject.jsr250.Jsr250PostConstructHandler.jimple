final class com.mycila.inject.jsr250.Jsr250PostConstructHandler extends com.mycila.inject.injector.MethodHandlerSkeleton
{
    javax.inject.Provider injector;

    void <init>()
    {
        com.mycila.inject.jsr250.Jsr250PostConstructHandler r0;

        r0 := @this: com.mycila.inject.jsr250.Jsr250PostConstructHandler;

        specialinvoke r0.<com.mycila.inject.injector.MethodHandlerSkeleton: void <init>()>();

        return;
    }

    public void handle(com.google.inject.TypeLiteral, java.lang.Object, java.lang.reflect.Method, javax.'annotation'.PostConstruct)
    {
        java.lang.Object[] r3;
        com.mycila.inject.internal.MethodInvoker $r4;
        javax.inject.Provider $r7;
        com.google.inject.Key $r11;
        int $i0, $i1, $i2, i3;
        com.mycila.inject.jsr250.Jsr250PostConstructHandler r6;
        java.lang.reflect.Method r0;
        boolean $z0;
        java.lang.RuntimeException $r15;
        java.lang.Exception $r14;
        com.google.inject.Injector $r9;
        java.util.List $r2;
        com.google.inject.Provider $r12;
        javax.'annotation'.PostConstruct r16;
        java.lang.Object r5, $r8, $r10, $r13;
        com.google.inject.TypeLiteral r1;

        r6 := @this: com.mycila.inject.jsr250.Jsr250PostConstructHandler;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        r5 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.reflect.Method;

        r16 := @parameter3: javax.'annotation'.PostConstruct;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label5;

        $r2 = staticinvoke <com.mycila.inject.internal.Reflect: java.util.List getParameterKeys(com.google.inject.TypeLiteral,java.lang.reflect.Method)>(r1, r0);

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        r3 = newarray (java.lang.Object)[$i1];

        i3 = 0;

     label1:
        $i2 = lengthof r3;

        if i3 >= $i2 goto label2;

        $r7 = r6.<com.mycila.inject.jsr250.Jsr250PostConstructHandler: javax.inject.Provider injector>;

        $r8 = interfaceinvoke $r7.<javax.inject.Provider: java.lang.Object get()>();

        $r9 = (com.google.inject.Injector) $r8;

        $r10 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i3);

        $r11 = (com.google.inject.Key) $r10;

        $r12 = interfaceinvoke $r9.<com.google.inject.Injector: com.google.inject.Provider getProvider(com.google.inject.Key)>($r11);

        $r13 = interfaceinvoke $r12.<com.google.inject.Provider: java.lang.Object get()>();

        r3[i3] = $r13;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <com.mycila.inject.internal.Proxy: com.mycila.inject.internal.MethodInvoker invoker(java.lang.reflect.Method)>(r0);

        interfaceinvoke $r4.<com.mycila.inject.internal.MethodInvoker: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r5, r3);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        $r15 = staticinvoke <com.mycila.inject.MycilaGuiceException: java.lang.RuntimeException runtime(java.lang.Throwable)>($r14);

        throw $r15;

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public volatile void handle(com.google.inject.TypeLiteral, java.lang.Object, java.lang.reflect.Method, java.lang.'annotation'.Annotation)
    {
        java.lang.'annotation'.Annotation r4;
        javax.'annotation'.PostConstruct $r5;
        java.lang.Object r2;
        com.mycila.inject.jsr250.Jsr250PostConstructHandler r0;
        com.google.inject.TypeLiteral r1;
        java.lang.reflect.Method r3;

        r0 := @this: com.mycila.inject.jsr250.Jsr250PostConstructHandler;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.reflect.Method;

        r4 := @parameter3: java.lang.'annotation'.Annotation;

        $r5 = (javax.'annotation'.PostConstruct) r4;

        virtualinvoke r0.<com.mycila.inject.jsr250.Jsr250PostConstructHandler: void handle(com.google.inject.TypeLiteral,java.lang.Object,java.lang.reflect.Method,javax.'annotation'.PostConstruct)>(r1, r2, r3, $r5);

        return;
    }

    public volatile void handle(com.google.inject.TypeLiteral, java.lang.Object, java.lang.reflect.Member, java.lang.'annotation'.Annotation)
    {
        java.lang.reflect.Member r3;
        java.lang.'annotation'.Annotation r4;
        javax.'annotation'.PostConstruct $r5;
        java.lang.Object r2;
        com.mycila.inject.jsr250.Jsr250PostConstructHandler r0;
        com.google.inject.TypeLiteral r1;
        java.lang.reflect.Method $r6;

        r0 := @this: com.mycila.inject.jsr250.Jsr250PostConstructHandler;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.reflect.Member;

        r4 := @parameter3: java.lang.'annotation'.Annotation;

        $r6 = (java.lang.reflect.Method) r3;

        $r5 = (javax.'annotation'.PostConstruct) r4;

        virtualinvoke r0.<com.mycila.inject.jsr250.Jsr250PostConstructHandler: void handle(com.google.inject.TypeLiteral,java.lang.Object,java.lang.reflect.Method,javax.'annotation'.PostConstruct)>(r1, r2, $r6, $r5);

        return;
    }
}
