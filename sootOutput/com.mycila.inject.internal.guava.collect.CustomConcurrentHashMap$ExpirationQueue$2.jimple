class com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue$2 extends com.mycila.inject.internal.guava.collect.AbstractLinkedIterator
{
    final com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue this$0;

    void <init>(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r2;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue$2 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue$2;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue$2: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue this$0> = r1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractLinkedIterator: void <init>(java.lang.Object)>(r2);

        return;
    }

    protected com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry computeNext(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue $r3;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r0, $r1, $r4, $r5;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue$2 r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue$2;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getNextExpirable()>();

        $r3 = r2.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue$2: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue this$0>;

        $r4 = $r3.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry head>;

        if $r1 != $r4 goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = $r1;

     label2:
        return $r5;
    }

    protected volatile java.lang.Object computeNext(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry $r2, $r3;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue$2 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ExpirationQueue$2: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry computeNext(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>($r2);

        return $r3;
    }
}
