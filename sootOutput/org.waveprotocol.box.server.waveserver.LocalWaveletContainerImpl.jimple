class org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl extends org.waveprotocol.box.server.waveserver.WaveletContainerImpl implements org.waveprotocol.box.server.waveserver.LocalWaveletContainer
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final com.google.common.base.Function PARTICIPANT_REMOVED_BY;
    private static final com.google.common.base.Function DOMAIN_OF;

    private static java.lang.Iterable participantsRemovedBy(java.lang.Iterable)
    {
        com.google.common.base.Function $r2;
        java.lang.Iterable r0, $r1, $r3;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,java.lang.Class)>(r0, class "Lorg/waveprotocol/wave/model/operation/wave/RemoveParticipant;");

        $r2 = <org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: com.google.common.base.Function PARTICIPANT_REMOVED_BY>;

        $r3 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>($r1, $r2);

        return $r3;
    }

    private static com.google.common.collect.ImmutableSet domainsOf(java.lang.Iterable)
    {
        com.google.common.base.Function $r1;
        com.google.common.collect.ImmutableSet $r3;
        java.lang.Iterable r0, $r2;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = <org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: com.google.common.base.Function DOMAIN_OF>;

        $r2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>(r0, $r1);

        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)>($r2);

        return $r3;
    }

    public void <init>(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber, com.google.common.util.concurrent.ListenableFuture, java.lang.String, java.util.concurrent.Executor)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber r2;
        com.google.common.util.concurrent.ListenableFuture r3;
        java.util.concurrent.Executor r5;
        java.lang.String r4;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber;

        r3 := @parameter2: com.google.common.util.concurrent.ListenableFuture;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.util.concurrent.Executor;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletContainerImpl: void <init>(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber,com.google.common.util.concurrent.ListenableFuture,java.lang.String,java.util.concurrent.Executor)>(r1, r2, r3, r4, r5);

        return;
    }

    public org.waveprotocol.box.server.waveserver.WaveletDeltaRecord submitRequest(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta) throws org.waveprotocol.wave.model.operation.OperationException, com.google.protobuf.InvalidProtocolBufferException, org.waveprotocol.box.server.waveserver.InvalidHashException, org.waveprotocol.box.server.persistence.PersistenceException, org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        java.lang.Throwable $r14;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r8;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl r0;
        java.lang.Iterable $r9, $r10;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r6;
        com.google.common.collect.ImmutableList $r12;
        org.waveprotocol.wave.model.version.HashedVersion $r1, $r4, $r5, $r13;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r3;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.id.WaveletName r15;
        com.google.common.collect.ImmutableSet $r11;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta r2;
        java.util.Set $r7;

        r0 := @this: org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl;

        r15 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: void awaitLoad()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: void acquireWriteLock()>();

     label1:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: void checkStateOk()>();

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord transformAndApplyLocalDelta(org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta)>(r2);

        $r4 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z3);

        $r5 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.version.HashedVersion getAppliedAtVersion()>();

        $z2 = virtualinvoke $r5.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z2);

        $r6 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.wave.model.wave.data.ReadableWaveletData accessSnapshot()>();

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getParticipants()>();

        $r8 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta()>();

        $r9 = staticinvoke <org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: java.lang.Iterable participantsRemovedBy(java.lang.Iterable)>($r8);

        $r10 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r7, $r9);

        $r11 = staticinvoke <org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: com.google.common.collect.ImmutableSet domainsOf(java.lang.Iterable)>($r10);

        $r12 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r3);

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: void notifyOfDeltas(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet)>($r12, $r11);

        $r13 = virtualinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: void persist(org.waveprotocol.wave.model.version.HashedVersion,com.google.common.collect.ImmutableSet)>($r13, $r11);

     label4:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: void releaseWriteLock()>();

        return $r3;

     label5:
        $r14 := @caughtexception;

     label6:
        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: void releaseWriteLock()>();

        throw $r14;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private org.waveprotocol.box.server.waveserver.WaveletDeltaRecord transformAndApplyLocalDelta(org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta) throws org.waveprotocol.wave.model.operation.OperationException, com.google.protobuf.InvalidProtocolBufferException, org.waveprotocol.box.server.waveserver.InvalidHashException, org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r17, $r40;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r2, $r11, $r15;
        org.waveprotocol.wave.model.wave.ParticipantId $r26, $r27, $r29, $r30, $r36;
        byte $b6, $b8, $b11;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord $r12, $r41, $r43;
        org.waveprotocol.wave.util.logging.Log $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.model.id.WaveletName $r23;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta r0;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r4;
        com.google.protobuf.ByteString $r1;
        java.lang.StringBuilder $r20, $r21, $r22, $r24, $r42;
        java.lang.Object[] $r28, $r31;
        long $l1, $l4, $l5, $l7, $l9, $l10;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl r5;
        int $i0, $i2, $i3, $i12, $i13;
        org.waveprotocol.wave.model.version.HashedVersion $r8, $r9, $r10, $r13, $r14, $r16, $r33, $r34, $r37, $r39;
        java.lang.String $r25;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r6, $r7;
        com.google.protobuf.Message $r3;

        r5 := @this: org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl;

        r0 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: com.google.protobuf.ByteString getDelta()>();

        $r2 = staticinvoke <org.waveprotocol.box.server.waveserver.ByteStringMessage: org.waveprotocol.box.server.waveserver.ByteStringMessage parseProtocolWaveletDelta(com.google.protobuf.ByteString)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        r4 = (org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta) $r3;

        $i0 = virtualinvoke r4.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: int getOperationCount()>();

        if $i0 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "empty delta");

        $r6 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.operation.wave.WaveletDelta deserialize(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)>(r4);

        $r7 = virtualinvoke r5.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta maybeTransformSubmittedDelta(org.waveprotocol.wave.model.operation.wave.WaveletDelta)>($r6);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r8 = virtualinvoke r5.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        $i2 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        if $i2 != 0 goto label07;

        $l7 = virtualinvoke $r8.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z4, "currentVersion can not be 0 if delta was transformed");

        $r34 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $l9 = virtualinvoke $r34.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l10 = virtualinvoke $r8.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b11 = $l9 cmp $l10;

        $i12 = (int) $b11;

        if $i12 > 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z5);

        $r40 = new org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r36 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r37 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        specialinvoke $r40.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long,java.lang.Iterable)>($r36, $r37, $l1, $r7);

        $r41 = new org.waveprotocol.box.server.waveserver.WaveletDeltaRecord;

        $r39 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        specialinvoke $r41.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: void <init>(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.box.server.waveserver.ByteStringMessage,org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>($r39, null, $r40);

        return $r41;

     label07:
        $r9 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $z0 = virtualinvoke $r9.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label10;

        $r13 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $l4 = virtualinvoke $r13.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l5 = virtualinvoke $r8.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b6 = $l4 cmp $l5;

        $i13 = (int) $b6;

        if $i13 >= 0 goto label08;

        $z6 = 1;

        goto label09;

     label08:
        $z6 = 0;

     label09:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z6);

        $r14 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $r15 = virtualinvoke r5.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.box.server.waveserver.ByteStringMessage lookupAppliedDelta(org.waveprotocol.wave.model.version.HashedVersion)>($r14);

        $r16 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $r17 = virtualinvoke r5.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta lookupTransformedDelta(org.waveprotocol.wave.model.version.HashedVersion)>($r16);

        $r19 = <org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate delta ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for wavelet ");

        $r23 = virtualinvoke r5.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>($r25);

        $r26 = virtualinvoke $r17.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r27 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $z1 = virtualinvoke $r26.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r27);

        $r28 = newarray (java.lang.Object)[2];

        $r29 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r28[0] = $r29;

        $r30 = virtualinvoke $r17.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r28[1] = $r30;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z1, "Duplicate delta detected but mismatched author, expected %s found %s", $r28);

        $z2 = staticinvoke <com.google.common.collect.Iterables: boolean elementsEqual(java.lang.Iterable,java.lang.Iterable)>($r17, $r7);

        $r31 = newarray (java.lang.Object)[2];

        $r31[0] = $r7;

        $r31[1] = $r17;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z2, "Duplicate delta detected but mismatched ops, expected %s found %s", $r31);

        $r43 = new org.waveprotocol.box.server.waveserver.WaveletDeltaRecord;

        $r33 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        specialinvoke $r43.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: void <init>(org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.box.server.waveserver.ByteStringMessage,org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>($r33, $r15, $r17);

        return $r43;

     label10:
        $r10 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $i3 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        $r11 = staticinvoke <org.waveprotocol.box.server.waveserver.AppliedDeltaUtil: org.waveprotocol.box.server.waveserver.ByteStringMessage buildAppliedDelta(org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta,org.waveprotocol.wave.model.version.HashedVersion,int,long)>(r0, $r10, $i3, $l1);

        $r12 = virtualinvoke r5.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.box.server.waveserver.WaveletDeltaRecord applyDelta(org.waveprotocol.box.server.waveserver.ByteStringMessage,org.waveprotocol.wave.model.operation.wave.WaveletDelta)>($r11, $r7);

        return $r12;
    }

    public boolean isDeltaSigner(org.waveprotocol.wave.model.version.HashedVersion, com.google.protobuf.ByteString)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta $r4;
        java.util.Iterator $r7;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta $r5;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature r9;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl r0;
        com.google.protobuf.ByteString $r10, r11;
        java.util.List $r6;
        org.waveprotocol.wave.model.version.HashedVersion r1;
        com.google.protobuf.Message $r3;
        java.lang.Object $r8;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        r11 := @parameter1: com.google.protobuf.ByteString;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.box.server.waveserver.ByteStringMessage lookupAppliedDeltaByEndVersion(org.waveprotocol.wave.model.version.HashedVersion)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke $r2.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.Message getMessage()>();

        $r4 = (org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta) $r3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.federation.Proto$ProtocolAppliedWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta getSignedOriginalDelta()>();

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: java.util.List getSignatureList()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.waveprotocol.wave.federation.Proto$ProtocolSignature) $r8;

        $r10 = virtualinvoke r9.<org.waveprotocol.wave.federation.Proto$ProtocolSignature: com.google.protobuf.ByteString getSignerId()>();

        $z1 = virtualinvoke $r10.<com.google.protobuf.ByteString: boolean equals(java.lang.Object)>(r11);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    static void <clinit>()
    {
        org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl$1 $r1;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl$2 $r2;
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/LocalWaveletContainerImpl;");

        <org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        $r1 = new org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl$1;

        specialinvoke $r1.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl$1: void <init>()>();

        <org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: com.google.common.base.Function PARTICIPANT_REMOVED_BY> = $r1;

        $r2 = new org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl$2;

        specialinvoke $r2.<org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl$2: void <init>()>();

        <org.waveprotocol.box.server.waveserver.LocalWaveletContainerImpl: com.google.common.base.Function DOMAIN_OF> = $r2;

        return;
    }
}
