public class org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        return;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode $r41;
        int[] $r17;
        org.apache.lucene.queryparser.flexible.core.QueryNodeParseException $r20, $r28;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        java.text.ParseException $r19, $r27;
        boolean $z0, $z1, $z2;
        org.apache.lucene.queryparser.flexible.core.config.FieldConfig $r6;
        org.apache.lucene.document.FieldType$NumericType $r18;
        java.lang.CharSequence $r4, $r38, $r40;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r10, $r12;
        org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode r3;
        org.apache.lucene.queryparser.flexible.messages.MessageImpl $r21, $r29;
        float $f0, $f1;
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r7;
        java.lang.Object[] $r22, $r30;
        long $l6, $l7;
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode $r37, $r39;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode r11, r13;
        java.text.NumberFormat $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r5, $r14, $r15, $r23, $r24, $r26, $r31, $r32, $r34;
        java.lang.Number r35, r36;
        org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor r1;
        double $d0, $d1;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r2;
        org.apache.lucene.queryparser.flexible.standard.config.NumericConfig r9;
        java.lang.Object $r8;
        java.lang.Class $r25, $r33;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode;

        if $z0 == 0 goto label18;

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        if $r2 == null goto label18;

        r3 = (org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode) r0;

        $r4 = virtualinvoke r3.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: java.lang.CharSequence getField()>();

        $r5 = staticinvoke <org.apache.lucene.queryparser.flexible.core.util.StringUtils: java.lang.String toString(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r2.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: org.apache.lucene.queryparser.flexible.core.config.FieldConfig getFieldConfig(java.lang.String)>($r5);

        if $r6 == null goto label18;

        $r7 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey NUMERIC_CONFIG>;

        $r8 = virtualinvoke $r6.<org.apache.lucene.queryparser.flexible.core.config.FieldConfig: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r7);

        r9 = (org.apache.lucene.queryparser.flexible.standard.config.NumericConfig) $r8;

        if r9 == null goto label18;

        $r10 = virtualinvoke r3.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getLowerBound()>();

        r11 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) $r10;

        $r12 = virtualinvoke r3.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getUpperBound()>();

        r13 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) $r12;

        $r14 = virtualinvoke r11.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

        $r15 = virtualinvoke r13.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

        $r16 = virtualinvoke r9.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: java.text.NumberFormat getNumberFormat()>();

        r35 = null;

        r36 = null;

        $i0 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i0 <= 0 goto label04;

     label01:
        r35 = virtualinvoke $r16.<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>($r14);

     label02:
        goto label04;

     label03:
        $r27 := @caughtexception;

        $r28 = new org.apache.lucene.queryparser.flexible.core.QueryNodeParseException;

        $r29 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r31 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String COULD_NOT_PARSE_NUMBER>;

        $r30 = newarray (java.lang.Object)[2];

        $r32 = virtualinvoke r11.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

        $r30[0] = $r32;

        $r33 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $r34 = virtualinvoke $r33.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r30[1] = $r34;

        specialinvoke $r29.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String,java.lang.Object[])>($r31, $r30);

        specialinvoke $r28.<org.apache.lucene.queryparser.flexible.core.QueryNodeParseException: void <init>(org.apache.lucene.queryparser.flexible.messages.Message,java.lang.Throwable)>($r29, $r27);

        throw $r28;

     label04:
        $i1 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i1 <= 0 goto label08;

     label05:
        r36 = virtualinvoke $r16.<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>($r15);

     label06:
        goto label08;

     label07:
        $r19 := @caughtexception;

        $r20 = new org.apache.lucene.queryparser.flexible.core.QueryNodeParseException;

        $r21 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r23 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String COULD_NOT_PARSE_NUMBER>;

        $r22 = newarray (java.lang.Object)[2];

        $r24 = virtualinvoke r13.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

        $r22[0] = $r24;

        $r25 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r22[1] = $r26;

        specialinvoke $r21.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String,java.lang.Object[])>($r23, $r22);

        specialinvoke $r20.<org.apache.lucene.queryparser.flexible.core.QueryNodeParseException: void <init>(org.apache.lucene.queryparser.flexible.messages.Message,java.lang.Throwable)>($r21, $r19);

        throw $r20;

     label08:
        $r17 = <org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor$1: int[] $SwitchMap$org$apache$lucene$document$FieldType$NumericType>;

        $r18 = virtualinvoke r9.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: org.apache.lucene.document.FieldType$NumericType getType()>();

        $i2 = virtualinvoke $r18.<org.apache.lucene.document.FieldType$NumericType: int ordinal()>();

        $i3 = $r17[$i2];

        tableswitch($i3)
        {
            case 1: goto label09;
            case 2: goto label11;
            case 3: goto label13;
            case 4: goto label15;
            default: goto label17;
        };

     label09:
        if r36 == null goto label10;

        $l7 = virtualinvoke r36.<java.lang.Number: long longValue()>();

        r36 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

     label10:
        if r35 == null goto label17;

        $l6 = virtualinvoke r35.<java.lang.Number: long longValue()>();

        r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        goto label17;

     label11:
        if r36 == null goto label12;

        $i5 = virtualinvoke r36.<java.lang.Number: int intValue()>();

        r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

     label12:
        if r35 == null goto label17;

        $i4 = virtualinvoke r35.<java.lang.Number: int intValue()>();

        r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        goto label17;

     label13:
        if r36 == null goto label14;

        $d1 = virtualinvoke r36.<java.lang.Number: double doubleValue()>();

        r36 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

     label14:
        if r35 == null goto label17;

        $d0 = virtualinvoke r35.<java.lang.Number: double doubleValue()>();

        r35 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        goto label17;

     label15:
        if r36 == null goto label16;

        $f1 = virtualinvoke r36.<java.lang.Number: float floatValue()>();

        r36 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

     label16:
        if r35 == null goto label17;

        $f0 = virtualinvoke r35.<java.lang.Number: float floatValue()>();

        r35 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

     label17:
        $r37 = new org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode;

        $r38 = virtualinvoke r3.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: java.lang.CharSequence getField()>();

        specialinvoke $r37.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode: void <init>(java.lang.CharSequence,java.lang.Number,java.text.NumberFormat)>($r38, r35, $r16);

        $r39 = new org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode;

        $r40 = virtualinvoke r3.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: java.lang.CharSequence getField()>();

        specialinvoke $r39.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode: void <init>(java.lang.CharSequence,java.lang.Number,java.text.NumberFormat)>($r40, r36, $r16);

        $z1 = virtualinvoke r3.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: boolean isLowerInclusive()>();

        $z2 = virtualinvoke r3.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: boolean isUpperInclusive()>();

        $r41 = new org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode;

        specialinvoke $r41.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: void <init>(org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode,org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode,boolean,boolean,org.apache.lucene.queryparser.flexible.standard.config.NumericConfig)>($r37, $r39, $z1, $z2, r9);

        return $r41;

     label18:
        return r0;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label05 to label06 with label07;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.util.List r0;
        org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.NumericRangeQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }
}
