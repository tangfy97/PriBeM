public class org.apache.lucene.util.automaton.State extends java.lang.Object implements java.lang.Comparable
{
    boolean accept;
    public org.apache.lucene.util.automaton.Transition[] transitionsArray;
    public int numTransitions;
    int number;
    int id;
    static int next_id;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        int $i0, $i1;
        org.apache.lucene.util.automaton.State r0;

        r0 := @this: org.apache.lucene.util.automaton.State;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.util.automaton.State: void resetTransitions()>();

        $i0 = <org.apache.lucene.util.automaton.State: int next_id>;

        $i1 = $i0 + 1;

        <org.apache.lucene.util.automaton.State: int next_id> = $i1;

        r0.<org.apache.lucene.util.automaton.State: int id> = $i0;

        return;
    }

    final void resetTransitions()
    {
        org.apache.lucene.util.automaton.State r0;
        org.apache.lucene.util.automaton.Transition[] $r1;

        r0 := @this: org.apache.lucene.util.automaton.State;

        $r1 = newarray (org.apache.lucene.util.automaton.Transition)[0];

        r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray> = $r1;

        r0.<org.apache.lucene.util.automaton.State: int numTransitions> = 0;

        return;
    }

    public java.lang.Iterable getTransitions()
    {
        org.apache.lucene.util.automaton.State r1;
        org.apache.lucene.util.automaton.State$TransitionsIterable $r0;

        r1 := @this: org.apache.lucene.util.automaton.State;

        $r0 = new org.apache.lucene.util.automaton.State$TransitionsIterable;

        specialinvoke $r0.<org.apache.lucene.util.automaton.State$TransitionsIterable: void <init>(org.apache.lucene.util.automaton.State,org.apache.lucene.util.automaton.State$1)>(r1, null);

        return $r0;
    }

    public int numTransitions()
    {
        int $i0;
        org.apache.lucene.util.automaton.State r0;

        r0 := @this: org.apache.lucene.util.automaton.State;

        $i0 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        return $i0;
    }

    public void setTransitions(org.apache.lucene.util.automaton.Transition[])
    {
        int $i0;
        org.apache.lucene.util.automaton.State r0;
        org.apache.lucene.util.automaton.Transition[] r1;

        r0 := @this: org.apache.lucene.util.automaton.State;

        r1 := @parameter0: org.apache.lucene.util.automaton.Transition[];

        $i0 = lengthof r1;

        r0.<org.apache.lucene.util.automaton.State: int numTransitions> = $i0;

        r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray> = r1;

        return;
    }

    public void addTransition(org.apache.lucene.util.automaton.Transition)
    {
        org.apache.lucene.util.automaton.Transition r3;
        org.apache.lucene.util.automaton.State r0;
        org.apache.lucene.util.automaton.Transition[] $r1, $r2, r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.apache.lucene.util.automaton.State;

        r3 := @parameter0: org.apache.lucene.util.automaton.Transition;

        $i1 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        $r1 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $i4 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        $i6 = 1 + $i4;

        $i5 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i7 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i6, $i5);

        r4 = newarray (org.apache.lucene.util.automaton.Transition)[$i7];

        $r5 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $i8 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, 0, $i8);

        r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray> = r4;

     label1:
        $r2 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $i2 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.util.automaton.State: int numTransitions> = $i3;

        $r2[$i2] = r3;

        return;
    }

    public void setAccept(boolean)
    {
        org.apache.lucene.util.automaton.State r0;
        boolean z0;

        r0 := @this: org.apache.lucene.util.automaton.State;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.util.automaton.State: boolean accept> = z0;

        return;
    }

    public boolean isAccept()
    {
        org.apache.lucene.util.automaton.State r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.State;

        $z0 = r0.<org.apache.lucene.util.automaton.State: boolean accept>;

        return $z0;
    }

    public org.apache.lucene.util.automaton.State step(int)
    {
        org.apache.lucene.util.automaton.Transition r2;
        org.apache.lucene.util.automaton.State r0, $r3;
        java.lang.AssertionError $r4;
        org.apache.lucene.util.automaton.Transition[] $r1;
        int i0, $i1, $i2, i3, $i4;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.State;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.automaton.State: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        i3 = 0;

     label2:
        $i4 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        if i3 >= $i4 goto label4;

        $r1 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        r2 = $r1[i3];

        $i1 = r2.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i1 > i0 goto label3;

        $i2 = r2.<org.apache.lucene.util.automaton.Transition: int max>;

        if i0 > $i2 goto label3;

        $r3 = r2.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        return $r3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return null;
    }

    public void step(int, java.util.Collection)
    {
        org.apache.lucene.util.automaton.Transition r2;
        java.util.Collection r3;
        org.apache.lucene.util.automaton.State r0, $r4;
        org.apache.lucene.util.automaton.Transition[] $r1;
        int $i0, i1, $i2, $i3, i4;

        r0 := @this: org.apache.lucene.util.automaton.State;

        i1 := @parameter0: int;

        r3 := @parameter1: java.util.Collection;

        i4 = 0;

     label1:
        $i0 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        if i4 >= $i0 goto label3;

        $r1 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        r2 = $r1[i4];

        $i2 = r2.<org.apache.lucene.util.automaton.Transition: int min>;

        if $i2 > i1 goto label2;

        $i3 = r2.<org.apache.lucene.util.automaton.Transition: int max>;

        if i1 > $i3 goto label2;

        $r4 = r2.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>($r4);

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return;
    }

    void addEpsilon(org.apache.lucene.util.automaton.State)
    {
        java.util.Iterator $r2;
        org.apache.lucene.util.automaton.Transition r4;
        org.apache.lucene.util.automaton.State r0, r5;
        java.lang.Iterable $r1;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r5 := @this: org.apache.lucene.util.automaton.State;

        r0 := @parameter0: org.apache.lucene.util.automaton.State;

        $z0 = r0.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z0 == 0 goto label1;

        r5.<org.apache.lucene.util.automaton.State: boolean accept> = 1;

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.util.automaton.Transition) $r3;

        virtualinvoke r5.<org.apache.lucene.util.automaton.State: void addTransition(org.apache.lucene.util.automaton.Transition)>(r4);

        goto label2;

     label3:
        return;
    }

    public void trimTransitionsArray()
    {
        org.apache.lucene.util.automaton.State r0;
        org.apache.lucene.util.automaton.Transition[] $r1, r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.automaton.State;

        $i1 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        $r1 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label1;

        $i2 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        r2 = newarray (org.apache.lucene.util.automaton.Transition)[$i2];

        $r3 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $i3 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i3);

        r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray> = r2;

     label1:
        return;
    }

    public void reduce()
    {
        org.apache.lucene.util.automaton.Transition[] $r3, $r4, $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, $i13, $i15;
        org.apache.lucene.util.automaton.Transition r5, $r12, $r13, $r14;
        org.apache.lucene.util.automaton.State r0, $r6, r11;
        java.util.Comparator $r1;

        r0 := @this: org.apache.lucene.util.automaton.State;

        $i0 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        if $i0 > 1 goto label1;

        return;

     label1:
        $r1 = <org.apache.lucene.util.automaton.Transition: java.util.Comparator CompareByDestThenMinMax>;

        virtualinvoke r0.<org.apache.lucene.util.automaton.State: void sortTransitions(java.util.Comparator)>($r1);

        r11 = null;

        $i13 = (int) -1;

        i8 = $i13;

        $i15 = (int) -1;

        i9 = $i15;

        i10 = 0;

        i11 = 0;

     label2:
        $i1 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        if i11 >= $i1 goto label8;

        $r4 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        r5 = $r4[i11];

        $r6 = r5.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        if r11 != $r6 goto label5;

        $i5 = r5.<org.apache.lucene.util.automaton.Transition: int min>;

        $i4 = i9 + 1;

        if $i5 > $i4 goto label3;

        $i7 = r5.<org.apache.lucene.util.automaton.Transition: int max>;

        if $i7 <= i9 goto label7;

        i9 = r5.<org.apache.lucene.util.automaton.Transition: int max>;

        goto label7;

     label3:
        if r11 == null goto label4;

        $r10 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $i6 = i10;

        i10 = i10 + 1;

        $r12 = new org.apache.lucene.util.automaton.Transition;

        specialinvoke $r12.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(i8, i9, r11);

        $r10[$i6] = $r12;

     label4:
        i8 = r5.<org.apache.lucene.util.automaton.Transition: int min>;

        i9 = r5.<org.apache.lucene.util.automaton.Transition: int max>;

        goto label7;

     label5:
        if r11 == null goto label6;

        $r8 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $i3 = i10;

        i10 = i10 + 1;

        $r13 = new org.apache.lucene.util.automaton.Transition;

        specialinvoke $r13.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(i8, i9, r11);

        $r8[$i3] = $r13;

     label6:
        r11 = r5.<org.apache.lucene.util.automaton.Transition: org.apache.lucene.util.automaton.State 'to'>;

        i8 = r5.<org.apache.lucene.util.automaton.Transition: int min>;

        i9 = r5.<org.apache.lucene.util.automaton.Transition: int max>;

     label7:
        i11 = i11 + 1;

        goto label2;

     label8:
        if r11 == null goto label9;

        $r3 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $i2 = i10;

        i10 = i10 + 1;

        $r14 = new org.apache.lucene.util.automaton.Transition;

        specialinvoke $r14.<org.apache.lucene.util.automaton.Transition: void <init>(int,int,org.apache.lucene.util.automaton.State)>(i8, i9, r11);

        $r3[$i2] = $r14;

     label9:
        r0.<org.apache.lucene.util.automaton.State: int numTransitions> = i10;

        return;
    }

    public void sortTransitions(java.util.Comparator)
    {
        org.apache.lucene.util.automaton.Transition[] $r2;
        int $i0, $i1;
        org.apache.lucene.util.automaton.State r0;
        java.util.Comparator r1;

        r0 := @this: org.apache.lucene.util.automaton.State;

        r1 := @parameter0: java.util.Comparator;

        $i0 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        if $i0 <= 1 goto label1;

        $r2 = r0.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.Transition[] transitionsArray>;

        $i1 = r0.<org.apache.lucene.util.automaton.State: int numTransitions>;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void mergeSort(java.lang.Object[],int,int,java.util.Comparator)>($r2, 0, $i1, r1);

     label1:
        return;
    }

    public int getNumber()
    {
        int $i0;
        org.apache.lucene.util.automaton.State r0;

        r0 := @this: org.apache.lucene.util.automaton.State;

        $i0 = r0.<org.apache.lucene.util.automaton.State: int number>;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r4;
        org.apache.lucene.util.automaton.Transition r7;
        org.apache.lucene.util.automaton.State r2;
        java.lang.Iterable $r3;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r8, $r10;
        java.lang.Object $r6;
        java.lang.String $r5, $r9;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.util.automaton.State;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state ");

        $i0 = r2.<org.apache.lucene.util.automaton.State: int number>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $z0 = r2.<org.apache.lucene.util.automaton.State: boolean accept>;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [accept]");

        goto label2;

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [reject]");

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n");

        $r3 = virtualinvoke r2.<org.apache.lucene.util.automaton.State: java.lang.Iterable getTransitions()>();

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.util.automaton.Transition) $r6;

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r9 = virtualinvoke r7.<org.apache.lucene.util.automaton.Transition: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label3;

     label4:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public int compareTo(org.apache.lucene.util.automaton.State)
    {
        int $i0, $i1, $i2;
        org.apache.lucene.util.automaton.State r0, r1;

        r1 := @this: org.apache.lucene.util.automaton.State;

        r0 := @parameter0: org.apache.lucene.util.automaton.State;

        $i1 = r0.<org.apache.lucene.util.automaton.State: int id>;

        $i0 = r1.<org.apache.lucene.util.automaton.State: int id>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public int hashCode()
    {
        int $i0;
        org.apache.lucene.util.automaton.State r0;

        r0 := @this: org.apache.lucene.util.automaton.State;

        $i0 = r0.<org.apache.lucene.util.automaton.State: int id>;

        return $i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        org.apache.lucene.util.automaton.State r0, $r2;

        r0 := @this: org.apache.lucene.util.automaton.State;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.lucene.util.automaton.State) r1;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.automaton.State: int compareTo(org.apache.lucene.util.automaton.State)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/automaton/State;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.automaton.State: boolean $assertionsDisabled> = $z1;

        return;
    }
}
