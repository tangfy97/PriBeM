public abstract class org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper extends org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper
{
    private final org.waveprotocol.wave.client.editor.content.CMutableDocument mutableDocument;

    public void <init>(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper, org.waveprotocol.wave.client.editor.impl.NodeManager, org.waveprotocol.wave.client.editor.content.ContentView, org.waveprotocol.wave.model.document.indexed.LocationMapper, org.waveprotocol.wave.client.editor.content.CMutableDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentView r3;
        org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper r1;
        org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper r0;
        org.waveprotocol.wave.client.editor.impl.NodeManager r2;
        org.waveprotocol.wave.client.editor.content.CMutableDocument r5;
        org.waveprotocol.wave.model.document.indexed.LocationMapper r4;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.impl.NodeManager;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.content.ContentView;

        r4 := @parameter3: org.waveprotocol.wave.model.document.indexed.LocationMapper;

        r5 := @parameter4: org.waveprotocol.wave.client.editor.content.CMutableDocument;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: void <init>(org.waveprotocol.wave.client.editor.selection.html.HtmlSelectionHelper,org.waveprotocol.wave.client.editor.impl.NodeManager,org.waveprotocol.wave.client.editor.content.ContentView,org.waveprotocol.wave.model.document.indexed.LocationMapper)>(r1, r2, r3, r4);

        r0.<org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: org.waveprotocol.wave.client.editor.content.CMutableDocument mutableDocument> = r5;

        return;
    }

    protected org.waveprotocol.wave.client.editor.content.ContentElement maybePlaceMissingCursorContainer(org.waveprotocol.wave.model.document.util.Point$El)
    {
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper r5;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r6, $r13;
        org.waveprotocol.wave.client.editor.content.ContentElement $r8, $r11, r15;
        org.waveprotocol.wave.client.editor.content.paragraph.Line $r10;
        boolean $z0;
        org.waveprotocol.wave.client.editor.content.ContentView $r3;
        org.waveprotocol.wave.model.document.util.Point$El r2;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r12;
        java.lang.Object $r4, $r7, $r9, $r14;

        r5 := @this: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point$El;

        $r0 = <org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("PROBLEM: Had to create a line container to accommodate the cursor!");

        $r3 = <org.waveprotocol.wave.client.editor.content.FullContentView: org.waveprotocol.wave.client.editor.content.ContentView INSTANCE>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineContainer(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r3, $r4);

        if $z0 != 0 goto label1;

        $r13 = r5.<org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: org.waveprotocol.wave.client.editor.content.CMutableDocument mutableDocument>;

        $r12 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.XmlStringBuilder,org.waveprotocol.wave.model.document.operation.Attributes)>($r13, null, $r12);

        r15 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r14;

        goto label2;

     label1:
        $r6 = r5.<org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: org.waveprotocol.wave.client.editor.content.CMutableDocument mutableDocument>;

        $r7 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r8 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r7;

        $r9 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,java.lang.Object,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r6, $r8, null);

        r15 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r9;

     label2:
        $r10 = staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.paragraph.Line fromLineElement(org.waveprotocol.wave.client.editor.content.ContentElement)>(r15);

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.paragraph.Line: org.waveprotocol.wave.client.editor.content.ContentElement getParagraph()>();

        r5.<org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: boolean needsCorrection> = 1;

        return $r11;
    }

    protected org.waveprotocol.wave.model.document.util.Point nodeletPointToWrapperPointAttempt2(org.waveprotocol.wave.model.document.util.Point) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing
    {
        org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper r0;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r2;
        org.waveprotocol.wave.model.document.util.Point r1, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: void flushForUnextractedText()>();

        r0.<org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: boolean needsCorrection> = 1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: org.waveprotocol.wave.client.editor.impl.NodeManager nodeManager>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point nodeletPointToWrapperPoint(org.waveprotocol.wave.model.document.util.Point)>(r1);

        return $r3;
    }

    protected abstract void flushForUnextractedText();
}
