final class com.hp.hpl.jena.rdf.model.impl.ReifierStd$1 extends com.hp.hpl.jena.util.iterator.Filter
{

    void <init>()
    {
        com.hp.hpl.jena.rdf.model.impl.ReifierStd$1 r0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ReifierStd$1;

        specialinvoke r0.<com.hp.hpl.jena.util.iterator.Filter: void <init>()>();

        return;
    }

    public boolean accept(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        com.hp.hpl.jena.rdf.model.impl.ReifierStd$1 r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.graph.Triple r0;

        r11 := @this: com.hp.hpl.jena.rdf.model.impl.ReifierStd$1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r2 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node access$000()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node access$100()>();

        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label1;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r6 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node access$200()>();

        $z2 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r6);

        if $z2 != 0 goto label1;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r8 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node access$300()>();

        $z3 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label2;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r10 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.ReifierStd: com.hp.hpl.jena.graph.Node access$400()>();

        $z4 = virtualinvoke $r9.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r10);

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;
    }

    public volatile boolean accept(java.lang.Object)
    {
        java.lang.Object r1;
        com.hp.hpl.jena.rdf.model.impl.ReifierStd$1 r0;
        com.hp.hpl.jena.graph.Triple $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.ReifierStd$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.graph.Triple) r1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.rdf.model.impl.ReifierStd$1: boolean accept(com.hp.hpl.jena.graph.Triple)>($r2);

        return $z0;
    }
}
