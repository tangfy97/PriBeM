public class org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy extends org.apache.lucene.search.FilteredQuery$FilterStrategy
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy r0;

        r0 := @this: org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy;

        specialinvoke r0.<org.apache.lucene.search.FilteredQuery$FilterStrategy: void <init>()>();

        return;
    }

    public org.apache.lucene.search.Scorer filteredScorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.search.Weight, org.apache.lucene.search.DocIdSet) throws java.io.IOException
    {
        org.apache.lucene.search.Weight r3;
        java.lang.AssertionError $r10;
        org.apache.lucene.search.DocIdSet r0;
        org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy r8;
        int $i0, $i2;
        org.apache.lucene.util.Bits $r2;
        org.apache.lucene.search.DocIdSetIterator $r1;
        boolean $z0, z1, z2, $z3, $z4;
        org.apache.lucene.search.Scorer $r5, $r7;
        org.apache.lucene.index.AtomicReaderContext r4;
        org.apache.lucene.search.FilteredQuery$PrimaryAdvancedLeapFrogScorer $r9, $r11;

        r8 := @this: org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy;

        r4 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        r3 := @parameter3: org.apache.lucene.search.Weight;

        r0 := @parameter4: org.apache.lucene.search.DocIdSet;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.DocIdSet: org.apache.lucene.search.DocIdSetIterator iterator()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r1.<org.apache.lucene.search.DocIdSetIterator: int nextDoc()>();

        if $i0 != 2147483647 goto label2;

        return null;

     label2:
        $r2 = virtualinvoke r0.<org.apache.lucene.search.DocIdSet: org.apache.lucene.util.Bits bits()>();

        if $r2 == null goto label3;

        $z3 = virtualinvoke r8.<org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy: boolean useRandomAccess(org.apache.lucene.util.Bits,int)>($r2, $i0);

        if $z3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        if $z4 == 0 goto label5;

        $r7 = virtualinvoke r3.<org.apache.lucene.search.Weight: org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext,boolean,boolean,org.apache.lucene.util.Bits)>(r4, z1, z2, $r2);

        return $r7;

     label5:
        $z0 = <org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $i2 = (int) -1;

        if $i0 > $i2 goto label6;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label6:
        $r5 = virtualinvoke r3.<org.apache.lucene.search.Weight: org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext,boolean,boolean,org.apache.lucene.util.Bits)>(r4, 1, 0, null);

        if $r5 != null goto label7;

        $r9 = null;

        goto label8;

     label7:
        $r11 = new org.apache.lucene.search.FilteredQuery$PrimaryAdvancedLeapFrogScorer;

        $r9 = $r11;

        specialinvoke $r11.<org.apache.lucene.search.FilteredQuery$PrimaryAdvancedLeapFrogScorer: void <init>(org.apache.lucene.search.Weight,int,org.apache.lucene.search.DocIdSetIterator,org.apache.lucene.search.Scorer)>(r3, $i0, $r1, $r5);

     label8:
        return $r9;
    }

    protected boolean useRandomAccess(org.apache.lucene.util.Bits, int)
    {
        org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy r0;
        int i0;
        org.apache.lucene.util.Bits r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy;

        r1 := @parameter0: org.apache.lucene.util.Bits;

        i0 := @parameter1: int;

        if i0 >= 100 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/FilteredQuery;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy: boolean $assertionsDisabled> = $z1;

        return;
    }
}
