final class org.apache.lucene.index.NormsWriter extends org.apache.lucene.index.InvertedDocEndConsumer
{
    private final byte defaultNorm;
    private org.apache.lucene.index.FieldInfos fieldInfos;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.search.Similarity $r1;
        org.apache.lucene.index.NormsWriter r0;
        byte $b0;

        r0 := @this: org.apache.lucene.index.NormsWriter;

        specialinvoke r0.<org.apache.lucene.index.InvertedDocEndConsumer: void <init>()>();

        $r1 = staticinvoke <org.apache.lucene.search.Similarity: org.apache.lucene.search.Similarity getDefault()>();

        $b0 = virtualinvoke $r1.<org.apache.lucene.search.Similarity: byte encodeNormValue(float)>(1.0F);

        r0.<org.apache.lucene.index.NormsWriter: byte defaultNorm> = $b0;

        return;
    }

    public org.apache.lucene.index.InvertedDocEndConsumerPerThread addThread(org.apache.lucene.index.DocInverterPerThread)
    {
        org.apache.lucene.index.NormsWriter r2;
        org.apache.lucene.index.NormsWriterPerThread $r0;
        org.apache.lucene.index.DocInverterPerThread r1;

        r2 := @this: org.apache.lucene.index.NormsWriter;

        r1 := @parameter0: org.apache.lucene.index.DocInverterPerThread;

        $r0 = new org.apache.lucene.index.NormsWriterPerThread;

        specialinvoke $r0.<org.apache.lucene.index.NormsWriterPerThread: void <init>(org.apache.lucene.index.DocInverterPerThread,org.apache.lucene.index.NormsWriter)>(r1, r2);

        return $r0;
    }

    public void abort()
    {
        org.apache.lucene.index.NormsWriter r0;

        r0 := @this: org.apache.lucene.index.NormsWriter;

        return;
    }

    void files(java.util.Collection)
    {
        org.apache.lucene.index.NormsWriter r0;
        java.util.Collection r1;

        r0 := @this: org.apache.lucene.index.NormsWriter;

        r1 := @parameter0: java.util.Collection;

        return;
    }

    void setFieldInfos(org.apache.lucene.index.FieldInfos)
    {
        org.apache.lucene.index.NormsWriter r0;
        org.apache.lucene.index.FieldInfos r1;

        r0 := @this: org.apache.lucene.index.NormsWriter;

        r1 := @parameter0: org.apache.lucene.index.FieldInfos;

        r0.<org.apache.lucene.index.NormsWriter: org.apache.lucene.index.FieldInfos fieldInfos> = r1;

        return;
    }

    public void flush(java.util.Map, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException
    {
        byte[] $r9, $r10, $r31;
        byte $b7, $b13, $b16, $b19, $b28;
        java.util.Map r1;
        org.apache.lucene.index.FieldInfos $r12, $r15;
        java.util.Set $r2;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r42, $r43, $r44, $r47, $r68, $r71;
        java.lang.Throwable $r59;
        long $l5, $l6, $l11;
        java.lang.AssertionError $r69, $r70, $r72;
        java.util.ArrayList $r67;
        org.apache.lucene.index.NormsWriterPerField[] r26;
        java.lang.String $r5, $r6, $r25, $r48;
        java.util.Map$Entry r62;
        org.apache.lucene.index.FieldInfo $r16, $r55, $r58;
        int[] r27, $r29, $r37, $r39, $r46;
        org.apache.lucene.store.Directory $r7;
        java.io.Closeable[] $r13, $r14, $r60, $r61;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7;
        java.util.Collection r63;
        java.util.List r18, r65;
        java.util.HashMap $r66;
        org.apache.lucene.index.NormsWriterPerField $r28, $r30, $r32, $r33, $r34, $r36, $r38, $r45, $r50, r64;
        org.apache.lucene.index.NormsWriter r11;
        org.apache.lucene.index.SegmentWriteState r4;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9, $i10, $i12, $i14, $i15, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, i31, $i32, $i33, $i34, $i35, $i36, i37, i38, i39, i40, i41, i42, i43, i44, $i46;
        org.apache.lucene.store.IndexOutput $r8;
        java.util.Iterator $r3, $r53;
        java.lang.Object $r17, $r49, $r51, $r52, $r54, $r56;

        r11 := @this: org.apache.lucene.index.NormsWriter;

        r1 := @parameter0: java.util.Map;

        r4 := @parameter1: org.apache.lucene.index.SegmentWriteState;

        $r66 = new java.util.HashMap;

        specialinvoke $r66.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r51 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r62 = (java.util.Map$Entry) $r51;

        $r52 = interfaceinvoke r62.<java.util.Map$Entry: java.lang.Object getValue()>();

        r63 = (java.util.Collection) $r52;

        $r53 = interfaceinvoke r63.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z5 = interfaceinvoke $r53.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r54 = interfaceinvoke $r53.<java.util.Iterator: java.lang.Object next()>();

        r64 = (org.apache.lucene.index.NormsWriterPerField) $r54;

        $i36 = r64.<org.apache.lucene.index.NormsWriterPerField: int upto>;

        if $i36 <= 0 goto label04;

        $r55 = r64.<org.apache.lucene.index.NormsWriterPerField: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r56 = interfaceinvoke $r66.<java.util.Map: java.lang.Object get(java.lang.Object)>($r55);

        r65 = (java.util.List) $r56;

        if r65 != null goto label03;

        $r67 = new java.util.ArrayList;

        specialinvoke $r67.<java.util.ArrayList: void <init>()>();

        r65 = $r67;

        $r58 = r64.<org.apache.lucene.index.NormsWriterPerField: org.apache.lucene.index.FieldInfo fieldInfo>;

        interfaceinvoke $r66.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r58, $r67);

     label03:
        interfaceinvoke r65.<java.util.List: boolean add(java.lang.Object)>(r64);

        goto label05;

     label04:
        interfaceinvoke $r53.<java.util.Iterator: void remove()>();

     label05:
        goto label02;

     label06:
        goto label01;

     label07:
        $r5 = r4.<org.apache.lucene.index.SegmentWriteState: java.lang.String segmentName>;

        $r6 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>($r5, "nrm");

        $r7 = r4.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.store.Directory directory>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String)>($r6);

        z6 = 0;

     label08:
        $r10 = <org.apache.lucene.index.SegmentNorms: byte[] NORMS_HEADER>;

        $r9 = <org.apache.lucene.index.SegmentNorms: byte[] NORMS_HEADER>;

        $i0 = lengthof $r9;

        virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: void writeBytes(byte[],int,int)>($r10, 0, $i0);

        $r12 = r11.<org.apache.lucene.index.NormsWriter: org.apache.lucene.index.FieldInfos fieldInfos>;

        $i1 = virtualinvoke $r12.<org.apache.lucene.index.FieldInfos: int size()>();

        i37 = 0;

        i38 = 0;

     label09:
        if i38 >= $i1 goto label27;

        $r15 = r11.<org.apache.lucene.index.NormsWriter: org.apache.lucene.index.FieldInfos fieldInfos>;

        $r16 = virtualinvoke $r15.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(int)>(i38);

        $r17 = interfaceinvoke $r66.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        r18 = (java.util.List) $r17;

        i39 = 0;

        if r18 == null goto label23;

        $i14 = interfaceinvoke r18.<java.util.List: int size()>();

        i37 = i37 + 1;

        r26 = newarray (org.apache.lucene.index.NormsWriterPerField)[$i14];

        r27 = newarray (int)[$i14];

        i40 = 0;

     label10:
        if i40 >= $i14 goto label11;

        $r49 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(i40);

        $r50 = (org.apache.lucene.index.NormsWriterPerField) $r49;

        r26[i40] = $r50;

        i40 = i40 + 1;

        goto label10;

     label11:
        i41 = $i14;

     label12:
        if i41 <= 0 goto label21;

        $z3 = <org.apache.lucene.index.NormsWriter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label13;

        $i33 = r27[0];

        $r38 = r26[0];

        $r39 = $r38.<org.apache.lucene.index.NormsWriterPerField: int[] docIDs>;

        $i32 = lengthof $r39;

        if $i33 < $i32 goto label13;

        $r69 = new java.lang.AssertionError;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uptos[0]=");

        $i34 = r27[0];

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i34);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" len=");

        $r45 = r26[0];

        $r46 = $r45.<org.apache.lucene.index.NormsWriterPerField: int[] docIDs>;

        $i35 = lengthof $r46;

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i35);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r69.<java.lang.AssertionError: void <init>(java.lang.Object)>($r48);

        throw $r69;

     label13:
        i42 = 0;

        $r28 = r26[0];

        $r29 = $r28.<org.apache.lucene.index.NormsWriterPerField: int[] docIDs>;

        $i17 = r27[0];

        i43 = $r29[$i17];

        i44 = 1;

     label14:
        if i44 >= i41 goto label16;

        $r36 = r26[i44];

        $r37 = $r36.<org.apache.lucene.index.NormsWriterPerField: int[] docIDs>;

        $i30 = r27[i44];

        i31 = $r37[$i30];

        if i31 >= i43 goto label15;

        i43 = i31;

        i42 = i44;

     label15:
        i44 = i44 + 1;

        goto label14;

     label16:
        $z4 = <org.apache.lucene.index.NormsWriter: boolean $assertionsDisabled>;

        if $z4 != 0 goto label17;

        $i29 = r4.<org.apache.lucene.index.SegmentWriteState: int numDocs>;

        if i43 < $i29 goto label17;

        $r70 = new java.lang.AssertionError;

        specialinvoke $r70.<java.lang.AssertionError: void <init>()>();

        throw $r70;

     label17:
        if i39 >= i43 goto label18;

        $b28 = r11.<org.apache.lucene.index.NormsWriter: byte defaultNorm>;

        virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>($b28);

        i39 = i39 + 1;

        goto label17;

     label18:
        $r30 = r26[i42];

        $r31 = $r30.<org.apache.lucene.index.NormsWriterPerField: byte[] norms>;

        $i18 = r27[i42];

        $b19 = $r31[$i18];

        virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>($b19);

        $i20 = r27[i42];

        $i21 = $i20 + 1;

        r27[i42] = $i21;

        i39 = i39 + 1;

        $i23 = r27[i42];

        $r32 = r26[i42];

        $i22 = $r32.<org.apache.lucene.index.NormsWriterPerField: int upto>;

        if $i23 != $i22 goto label20;

        $r33 = r26[i42];

        virtualinvoke $r33.<org.apache.lucene.index.NormsWriterPerField: void reset()>();

        $i24 = i41 - 1;

        if i42 == $i24 goto label19;

        $i25 = i41 - 1;

        $r34 = r26[$i25];

        r26[i42] = $r34;

        $i26 = i41 - 1;

        $i27 = r27[$i26];

        r27[i42] = $i27;

     label19:
        $i46 = (int) -1;

        i41 = i41 + $i46;

     label20:
        goto label12;

     label21:
        $i15 = r4.<org.apache.lucene.index.SegmentWriteState: int numDocs>;

        if i39 >= $i15 goto label22;

        $b16 = r11.<org.apache.lucene.index.NormsWriter: byte defaultNorm>;

        virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>($b16);

        i39 = i39 + 1;

        goto label21;

     label22:
        goto label25;

     label23:
        $z1 = $r16.<org.apache.lucene.index.FieldInfo: boolean isIndexed>;

        if $z1 == 0 goto label25;

        $z2 = $r16.<org.apache.lucene.index.FieldInfo: boolean omitNorms>;

        if $z2 != 0 goto label25;

        i37 = i37 + 1;

     label24:
        $i12 = r4.<org.apache.lucene.index.SegmentWriteState: int numDocs>;

        if i39 >= $i12 goto label25;

        $b13 = r11.<org.apache.lucene.index.NormsWriter: byte defaultNorm>;

        virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>($b13);

        i39 = i39 + 1;

        goto label24;

     label25:
        $z7 = <org.apache.lucene.index.NormsWriter: boolean $assertionsDisabled>;

        if $z7 != 0 goto label26;

        $i2 = r4.<org.apache.lucene.index.SegmentWriteState: int numDocs>;

        $i3 = i37 * $i2;

        $i4 = 4 + $i3;

        $l5 = (long) $i4;

        $l6 = virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label26;

        $r72 = new java.lang.AssertionError;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".nrm file size mismatch: expected=");

        $i8 = r4.<org.apache.lucene.index.SegmentWriteState: int numDocs>;

        $i9 = i37 * $i8;

        $i10 = 4 + $i9;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" actual=");

        $l11 = virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r72.<java.lang.AssertionError: void <init>(java.lang.Object)>($r25);

        throw $r72;

     label26:
        i38 = i38 + 1;

        goto label09;

     label27:
        z6 = 1;

        goto label32;

     label28:
        goto label31;

     label29:
        $r59 := @caughtexception;

        goto label35;

     label30:
        throw $r59;

     label31:
        return;

     label32:
        if 1 == 0 goto label33;

        $r14 = newarray (java.io.Closeable)[1];

        $r14[0] = $r8;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r14);

        goto label34;

     label33:
        $r13 = newarray (java.io.Closeable)[1];

        $r13[0] = $r8;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r13);

     label34:
        goto label28;

     label35:
        if z6 == 0 goto label36;

        $r61 = newarray (java.io.Closeable)[1];

        $r61[0] = $r8;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r61);

        goto label37;

     label36:
        $r60 = newarray (java.io.Closeable)[1];

        $r60[0] = $r8;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r60);

     label37:
        goto label30;

        catch java.lang.Throwable from label08 to label28 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/NormsWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.NormsWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
