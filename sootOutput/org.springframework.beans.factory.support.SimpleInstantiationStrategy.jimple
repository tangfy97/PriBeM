public class org.springframework.beans.factory.support.SimpleInstantiationStrategy extends java.lang.Object implements org.springframework.beans.factory.support.InstantiationStrategy
{

    public void <init>()
    {
        org.springframework.beans.factory.support.SimpleInstantiationStrategy r0;

        r0 := @this: org.springframework.beans.factory.support.SimpleInstantiationStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        java.lang.Throwable $r15;
        org.springframework.beans.BeanInstantiationException $r14, $r17;
        java.lang.Object[] $r8;
        org.springframework.beans.factory.support.MethodOverrides $r1;
        java.lang.reflect.Constructor r18;
        org.springframework.beans.factory.support.SimpleInstantiationStrategy r2;
        java.lang.String r3;
        boolean $z0, $z1;
        java.lang.SecurityManager $r11;
        java.lang.Exception $r16;
        org.springframework.beans.factory.support.SimpleInstantiationStrategy$1 $r12;
        org.springframework.beans.factory.BeanFactory r4;
        java.lang.Object $r5, $r6, $r7, $r9, $r13;
        java.lang.Class $r10;

        r2 := @this: org.springframework.beans.factory.support.SimpleInstantiationStrategy;

        r0 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.springframework.beans.factory.BeanFactory;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: org.springframework.beans.factory.support.MethodOverrides getMethodOverrides()>();

        $z0 = virtualinvoke $r1.<org.springframework.beans.factory.support.MethodOverrides: boolean isEmpty()>();

        if $z0 == 0 goto label12;

        $r6 = r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object constructorArgumentLock>;

        entermonitor $r6;

     label01:
        $r7 = r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object resolvedConstructorOrFactoryMethod>;

        r18 = (java.lang.reflect.Constructor) $r7;

        if r18 != null goto label07;

        $r10 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Class getBeanClass()>();

        $z1 = virtualinvoke $r10.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label02;

        $r14 = new org.springframework.beans.BeanInstantiationException;

        specialinvoke $r14.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String)>($r10, "Specified class is an interface");

        throw $r14;

     label02:
        $r11 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r11 == null goto label03;

        $r12 = new org.springframework.beans.factory.support.SimpleInstantiationStrategy$1;

        specialinvoke $r12.<org.springframework.beans.factory.support.SimpleInstantiationStrategy$1: void <init>(org.springframework.beans.factory.support.SimpleInstantiationStrategy,java.lang.Class)>(r2, $r10);

        $r13 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r12);

        r18 = (java.lang.reflect.Constructor) $r13;

        goto label04;

     label03:
        r18 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(null);

     label04:
        r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object resolvedConstructorOrFactoryMethod> = r18;

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

        $r17 = new org.springframework.beans.BeanInstantiationException;

        specialinvoke $r17.<org.springframework.beans.BeanInstantiationException: void <init>(java.lang.Class,java.lang.String,java.lang.Throwable)>($r10, "No default constructor found", $r16);

        throw $r17;

     label07:
        exitmonitor $r6;

     label08:
        goto label11;

     label09:
        $r15 := @caughtexception;

        exitmonitor $r6;

     label10:
        throw $r15;

     label11:
        $r8 = newarray (java.lang.Object)[0];

        $r9 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>(r18, $r8);

        return $r9;

     label12:
        $r5 = virtualinvoke r2.<org.springframework.beans.factory.support.SimpleInstantiationStrategy: java.lang.Object instantiateWithMethodInjection(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory)>(r0, r3, r4);

        return $r5;

        catch java.lang.Exception from label02 to label05 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected java.lang.Object instantiateWithMethodInjection(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r2;
        java.lang.UnsupportedOperationException $r0;
        org.springframework.beans.factory.support.SimpleInstantiationStrategy r1;
        org.springframework.beans.factory.BeanFactory r4;
        java.lang.String r3;

        r1 := @this: org.springframework.beans.factory.support.SimpleInstantiationStrategy;

        r2 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.springframework.beans.factory.BeanFactory;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Method Injection not supported in SimpleInstantiationStrategy");

        throw $r0;
    }

    public java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Constructor, java.lang.Object[])
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        java.lang.Object[] r6;
        org.springframework.beans.factory.support.MethodOverrides $r1;
        java.lang.reflect.Constructor r5;
        java.lang.SecurityManager $r8;
        org.springframework.beans.factory.support.SimpleInstantiationStrategy$2 $r10;
        org.springframework.beans.factory.support.SimpleInstantiationStrategy r2;
        org.springframework.beans.factory.BeanFactory r4;
        java.lang.Object $r7, $r9;
        java.lang.String r3;
        boolean $z0;

        r2 := @this: org.springframework.beans.factory.support.SimpleInstantiationStrategy;

        r0 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.springframework.beans.factory.BeanFactory;

        r5 := @parameter3: java.lang.reflect.Constructor;

        r6 := @parameter4: java.lang.Object[];

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: org.springframework.beans.factory.support.MethodOverrides getMethodOverrides()>();

        $z0 = virtualinvoke $r1.<org.springframework.beans.factory.support.MethodOverrides: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r8 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r8 == null goto label1;

        $r10 = new org.springframework.beans.factory.support.SimpleInstantiationStrategy$2;

        specialinvoke $r10.<org.springframework.beans.factory.support.SimpleInstantiationStrategy$2: void <init>(org.springframework.beans.factory.support.SimpleInstantiationStrategy,java.lang.reflect.Constructor)>(r2, r5);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r10);

     label1:
        $r9 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.reflect.Constructor,java.lang.Object[])>(r5, r6);

        return $r9;

     label2:
        $r7 = virtualinvoke r2.<org.springframework.beans.factory.support.SimpleInstantiationStrategy: java.lang.Object instantiateWithMethodInjection(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory,java.lang.reflect.Constructor,java.lang.Object[])>(r0, r3, r4, r5, r6);

        return $r7;
    }

    protected java.lang.Object instantiateWithMethodInjection(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Constructor, java.lang.Object[])
    {
        org.springframework.beans.factory.support.RootBeanDefinition r2;
        java.lang.UnsupportedOperationException $r0;
        org.springframework.beans.factory.support.SimpleInstantiationStrategy r1;
        java.lang.Object[] r6;
        org.springframework.beans.factory.BeanFactory r4;
        java.lang.String r3;
        java.lang.reflect.Constructor r5;

        r1 := @this: org.springframework.beans.factory.support.SimpleInstantiationStrategy;

        r2 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.springframework.beans.factory.BeanFactory;

        r5 := @parameter3: java.lang.reflect.Constructor;

        r6 := @parameter4: java.lang.Object[];

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Method Injection not supported in SimpleInstantiationStrategy");

        throw $r0;
    }

    public java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.Object, java.lang.reflect.Method, java.lang.Object[])
    {
        java.lang.reflect.Method r1;
        java.lang.IllegalAccessException $r14;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r16, $r17, $r18, $r22, $r23, $r24, $r25, $r27;
        org.springframework.beans.factory.support.SimpleInstantiationStrategy$3 $r5;
        java.lang.Throwable $r13;
        org.springframework.beans.factory.support.RootBeanDefinition r29;
        java.lang.Object[] r3;
        org.springframework.beans.factory.support.SimpleInstantiationStrategy r6;
        java.lang.String $r12, $r19, $r26, $r28, r30;
        org.springframework.beans.factory.BeanDefinitionStoreException $r8, $r15, $r21;
        java.lang.IllegalArgumentException $r20;
        java.lang.SecurityManager $r0;
        org.springframework.beans.factory.BeanFactory r31;
        java.lang.Object r2, $r4;

        r6 := @this: org.springframework.beans.factory.support.SimpleInstantiationStrategy;

        r29 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r30 := @parameter1: java.lang.String;

        r31 := @parameter2: org.springframework.beans.factory.BeanFactory;

        r2 := @parameter3: java.lang.Object;

        r1 := @parameter4: java.lang.reflect.Method;

        r3 := @parameter5: java.lang.Object[];

     label1:
        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 == null goto label2;

        $r5 = new org.springframework.beans.factory.support.SimpleInstantiationStrategy$3;

        specialinvoke $r5.<org.springframework.beans.factory.support.SimpleInstantiationStrategy$3: void <init>(org.springframework.beans.factory.support.SimpleInstantiationStrategy,java.lang.reflect.Method)>(r6, r1);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);

        goto label3;

     label2:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>(r1);

     label3:
        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, r3);

     label4:
        return $r4;

     label5:
        $r20 := @caughtexception;

        $r21 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal arguments to factory method [");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("args: ");

        $r26 = staticinvoke <org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>(r3);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label6:
        $r14 := @caughtexception;

        $r15 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot access factory method [");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; is it public?");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label7:
        $r7 := @caughtexception;

        $r8 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Factory method [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] threw exception");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r8.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r13);

        throw $r8;

        catch java.lang.IllegalArgumentException from label1 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label4 with label7;
    }
}
