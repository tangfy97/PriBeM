public class org.waveprotocol.wave.federation.xmpp.XmppDisco extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;
    static final java.lang.String DISCO_INFO_CATEGORY;
    static final java.lang.String DISCO_INFO_TYPE;
    public static final java.util.Map statDiscoStarted;
    private final java.util.concurrent.ConcurrentMap discoRequests;
    private final java.lang.String serverDescription;
    private org.waveprotocol.wave.federation.xmpp.XmppManager manager;
    private static int DISCO_EXPIRATION_HOURS;
    final int failExpirySecs;
    final int successExpirySecs;

    public void <init>(java.lang.String, int, int)
    {
        org.waveprotocol.wave.federation.xmpp.XmppDisco$2 $r5;
        long $l3;
        java.util.concurrent.ConcurrentMap $r6;
        java.util.concurrent.TimeUnit $r3;
        int i0, i1, $i2;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r0;
        java.lang.String r1;
        com.google.common.collect.MapMaker $r2, $r4;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: org.waveprotocol.wave.federation.xmpp.XmppManager manager> = null;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.lang.String serverDescription> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: int failExpirySecs> = i0;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: int successExpirySecs> = i1;

        $r2 = new com.google.common.collect.MapMaker;

        specialinvoke $r2.<com.google.common.collect.MapMaker: void <init>()>();

        $i2 = <org.waveprotocol.wave.federation.xmpp.XmppDisco: int DISCO_EXPIRATION_HOURS>;

        $l3 = (long) $i2;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $r4 = virtualinvoke $r2.<com.google.common.collect.MapMaker: com.google.common.collect.MapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l3, $r3);

        $r5 = new org.waveprotocol.wave.federation.xmpp.XmppDisco$2;

        specialinvoke $r5.<org.waveprotocol.wave.federation.xmpp.XmppDisco$2: void <init>(org.waveprotocol.wave.federation.xmpp.XmppDisco,int,int)>(r0, i0, i1);

        $r6 = virtualinvoke $r4.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r5);

        r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.concurrent.ConcurrentMap discoRequests> = $r6;

        return;
    }

    public void setManager(org.waveprotocol.wave.federation.xmpp.XmppManager)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager r1;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: org.waveprotocol.wave.federation.xmpp.XmppManager manager> = r1;

        return;
    }

    void processDiscoInfoGet(org.xmpp.packet.IQ, org.waveprotocol.wave.federation.xmpp.PacketCallback)
    {
        org.waveprotocol.wave.federation.xmpp.PacketCallback r9;
        org.dom4j.Element $r2, $r3, $r4, $r5, $r8;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r6;
        java.lang.String $r7;
        org.xmpp.packet.IQ r0, $r1;

        r6 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r0 := @parameter0: org.xmpp.packet.IQ;

        r9 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        $r1 = staticinvoke <org.xmpp.packet.IQ: org.xmpp.packet.IQ createResultIQ(org.xmpp.packet.IQ)>(r0);

        $r2 = virtualinvoke $r1.<org.xmpp.packet.IQ: org.dom4j.Element setChildElement(java.lang.String,java.lang.String)>("query", "http://jabber.org/protocol/disco#info");

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("identity");

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("category", "collaboration");

        $r5 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("type", "google-wave");

        $r7 = r6.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.lang.String serverDescription>;

        interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("name", $r7);

        $r8 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("feature");

        interfaceinvoke $r8.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("var", "http://waveprotocol.org/protocol/0.2/waveserver");

        interfaceinvoke r9.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void run(org.xmpp.packet.Packet)>($r1);

        return;
    }

    void processDiscoItemsGet(org.xmpp.packet.IQ, org.waveprotocol.wave.federation.xmpp.PacketCallback)
    {
        org.waveprotocol.wave.federation.xmpp.PacketCallback r2;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r3;
        org.xmpp.packet.IQ r0, $r1;

        r3 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r0 := @parameter0: org.xmpp.packet.IQ;

        r2 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        $r1 = staticinvoke <org.xmpp.packet.IQ: org.xmpp.packet.IQ createResultIQ(org.xmpp.packet.IQ)>(r0);

        virtualinvoke $r1.<org.xmpp.packet.IQ: org.dom4j.Element setChildElement(java.lang.String,java.lang.String)>("query", "http://jabber.org/protocol/disco#items");

        interfaceinvoke r2.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void run(org.xmpp.packet.Packet)>($r1);

        return;
    }

    public void discoverRemoteJid(java.lang.String, org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)
    {
        org.waveprotocol.wave.federation.xmpp.SuccessFailCallback r4;
        java.util.concurrent.ConcurrentMap $r3, $r5, $r10, $r17;
        java.util.logging.Level $r8;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco $r7, $r19;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r0;
        java.lang.String r2, $r16;
        boolean $z0, $z1, $z2;
        java.util.logging.Logger $r9, $r12;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r1;
        java.lang.Object $r6, $r18;
        java.lang.StringBuilder $r11, $r13, $r14, $r15;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.federation.xmpp.SuccessFailCallback;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: org.waveprotocol.wave.federation.xmpp.XmppManager manager>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>("Must call setManager first", $r1);

        $r3 = r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.concurrent.ConcurrentMap discoRequests>;

        $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.concurrent.ConcurrentMap discoRequests>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r2);

        $r7 = (org.waveprotocol.wave.federation.xmpp.RemoteDisco) $r6;

        $z1 = virtualinvoke $r7.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: boolean ttlExceeded()>();

        if $z1 == 0 goto label2;

        $r9 = <org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.logging.Logger LOG>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z2 = virtualinvoke $r9.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

        if $z2 == 0 goto label1;

        $r12 = <org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.logging.Logger LOG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("discoverRemoteJid for ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": result ttl exceeded.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void info(java.lang.String)>($r16);

     label1:
        $r10 = r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.concurrent.ConcurrentMap discoRequests>;

        interfaceinvoke $r10.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r2);

     label2:
        $r17 = r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.concurrent.ConcurrentMap discoRequests>;

        $r18 = interfaceinvoke $r17.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r2);

        $r19 = (org.waveprotocol.wave.federation.xmpp.RemoteDisco) $r18;

        virtualinvoke $r19.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: void discoverRemoteJID(org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)>(r4);

        return;
    }

    void testInjectInDomainToJidMap(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r6;
        java.util.concurrent.ConcurrentMap $r4;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco $r3;
        java.lang.Object $r5;
        java.lang.String r0, r2;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r6 = null;

        if r0 != null goto label1;

        r6 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Fake injected error");

     label1:
        $r4 = r1.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.concurrent.ConcurrentMap discoRequests>;

        $r3 = new org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        specialinvoke $r3.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: void <init>(java.lang.String,java.lang.String,org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r2, r0, r6);

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r2, $r3);

        if $r5 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        return;
    }

    boolean isDiscoRequestPending(java.lang.String)
    {
        java.util.concurrent.ConcurrentMap $r2, $r3;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco $r5;
        java.lang.Object $r4;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.concurrent.ConcurrentMap discoRequests>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.concurrent.ConcurrentMap discoRequests>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.waveprotocol.wave.federation.xmpp.RemoteDisco) $r4;

        $z1 = virtualinvoke $r5.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: boolean isRequestPending()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    boolean isDiscoRequestAvailable(java.lang.String)
    {
        org.waveprotocol.wave.federation.xmpp.XmppDisco r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentMap $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.concurrent.ConcurrentMap discoRequests>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    static org.waveprotocol.wave.federation.xmpp.XmppManager access$000(org.waveprotocol.wave.federation.xmpp.XmppDisco)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager $r1;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r0;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco: org.waveprotocol.wave.federation.xmpp.XmppManager manager>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.federation.xmpp.XmppDisco$1 $r4;
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        com.google.common.collect.MapMaker $r3;
        java.util.concurrent.ConcurrentMap $r5;

        <org.waveprotocol.wave.federation.xmpp.XmppDisco: java.lang.String DISCO_INFO_TYPE> = "google-wave";

        <org.waveprotocol.wave.federation.xmpp.XmppDisco: java.lang.String DISCO_INFO_CATEGORY> = "collaboration";

        $r0 = class "Lorg/waveprotocol/wave/federation/xmpp/XmppDisco;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.logging.Logger LOG> = $r2;

        $r3 = new com.google.common.collect.MapMaker;

        specialinvoke $r3.<com.google.common.collect.MapMaker: void <init>()>();

        $r4 = new org.waveprotocol.wave.federation.xmpp.XmppDisco$1;

        specialinvoke $r4.<org.waveprotocol.wave.federation.xmpp.XmppDisco$1: void <init>()>();

        $r5 = virtualinvoke $r3.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r4);

        <org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.Map statDiscoStarted> = $r5;

        <org.waveprotocol.wave.federation.xmpp.XmppDisco: int DISCO_EXPIRATION_HOURS> = 6;

        return;
    }
}
