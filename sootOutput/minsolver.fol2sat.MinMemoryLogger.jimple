final class minsolver.fol2sat.MinMemoryLogger extends minsolver.fol2sat.MinTranslationLogger
{
    private final kodkod.util.collections.FixedMap logMap;
    private final kodkod.util.nodes.AnnotatedNode annotated;
    private final kodkod.instance.Bounds bounds;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lminsolver/fol2sat/MinMemoryLogger;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <minsolver.fol2sat.MinMemoryLogger: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(kodkod.util.nodes.AnnotatedNode, kodkod.instance.Bounds)
    {
        kodkod.instance.Bounds r2;
        kodkod.util.collections.FixedMap $r3;
        kodkod.ast.Formula $r5;
        java.util.Set $r6;
        minsolver.fol2sat.MinMemoryLogger r0;
        kodkod.util.nodes.AnnotatedNode r1;
        kodkod.ast.Node $r4;

        r0 := @this: minsolver.fol2sat.MinMemoryLogger;

        r1 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r2 := @parameter1: kodkod.instance.Bounds;

        specialinvoke r0.<minsolver.fol2sat.MinTranslationLogger: void <init>()>();

        r0.<minsolver.fol2sat.MinMemoryLogger: kodkod.util.nodes.AnnotatedNode annotated> = r1;

        r0.<minsolver.fol2sat.MinMemoryLogger: kodkod.instance.Bounds bounds> = r2;

        $r3 = new kodkod.util.collections.FixedMap;

        $r4 = virtualinvoke r1.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r5 = (kodkod.ast.Formula) $r4;

        $r6 = staticinvoke <kodkod.util.nodes.Nodes: java.util.Set conjuncts(kodkod.ast.Formula)>($r5);

        specialinvoke $r3.<kodkod.util.collections.FixedMap: void <init>(java.util.Set)>($r6);

        r0.<minsolver.fol2sat.MinMemoryLogger: kodkod.util.collections.FixedMap logMap> = $r3;

        return;
    }

    void close()
    {
        minsolver.fol2sat.MinMemoryLogger r0;

        r0 := @this: minsolver.fol2sat.MinMemoryLogger;

        return;
    }

    void log(kodkod.ast.Formula, kodkod.engine.bool.BooleanValue, minsolver.fol2sat.MinEnvironment)
    {
        kodkod.engine.bool.BooleanValue r3, $r11;
        minsolver.fol2sat.MinMemoryLogger r0;
        java.lang.AssertionError $r12;
        java.lang.String $r9;
        boolean $z0, $z1, $z2;
        kodkod.util.collections.FixedMap $r2, $r4;
        kodkod.ast.Formula r1;
        java.lang.IllegalArgumentException $r6;
        minsolver.fol2sat.MinEnvironment r10;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7, $r8;

        r0 := @this: minsolver.fol2sat.MinMemoryLogger;

        r1 := @parameter0: kodkod.ast.Formula;

        r3 := @parameter1: kodkod.engine.bool.BooleanValue;

        r10 := @parameter2: minsolver.fol2sat.MinEnvironment;

        $r2 = r0.<minsolver.fol2sat.MinMemoryLogger: kodkod.util.collections.FixedMap logMap>;

        $z0 = virtualinvoke $r2.<kodkod.util.collections.FixedMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $z1 = <minsolver.fol2sat.MinMemoryLogger: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r10.<minsolver.fol2sat.MinEnvironment: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $r4 = r0.<minsolver.fol2sat.MinMemoryLogger: kodkod.util.collections.FixedMap logMap>;

        $r5 = virtualinvoke $r4.<kodkod.util.collections.FixedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        $r11 = (kodkod.engine.bool.BooleanValue) $r5;

        if $r11 == null goto label2;

        if $r11 == r3 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("translation of root corresponding to the formula has already been logged: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label2:
        return;
    }

    minsolver.fol2sat.MinTranslationLog log()
    {
        kodkod.instance.Bounds $r2;
        kodkod.util.collections.FixedMap $r3;
        minsolver.fol2sat.MinMemoryLogger$MemoryLog $r0;
        minsolver.fol2sat.MinMemoryLogger r1;
        kodkod.util.nodes.AnnotatedNode $r4;

        r1 := @this: minsolver.fol2sat.MinMemoryLogger;

        $r0 = new minsolver.fol2sat.MinMemoryLogger$MemoryLog;

        $r4 = r1.<minsolver.fol2sat.MinMemoryLogger: kodkod.util.nodes.AnnotatedNode annotated>;

        $r3 = r1.<minsolver.fol2sat.MinMemoryLogger: kodkod.util.collections.FixedMap logMap>;

        $r2 = r1.<minsolver.fol2sat.MinMemoryLogger: kodkod.instance.Bounds bounds>;

        specialinvoke $r0.<minsolver.fol2sat.MinMemoryLogger$MemoryLog: void <init>(kodkod.util.nodes.AnnotatedNode,kodkod.util.collections.FixedMap,kodkod.instance.Bounds)>($r4, $r3, $r2);

        return $r0;
    }
}
