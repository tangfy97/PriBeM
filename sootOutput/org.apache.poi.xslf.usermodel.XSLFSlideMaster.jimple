public class org.apache.poi.xslf.usermodel.XSLFSlideMaster extends org.apache.poi.xslf.usermodel.XSLFSheet
{
    private org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster _slide;
    private java.util.Map _layouts;
    private org.apache.poi.xslf.usermodel.XSLFTheme _theme;

    void <init>()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster $r1;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: void <init>()>();

        $r1 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster$Factory: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster newInstance()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster _slide> = $r1;

        return;
    }

    protected void <init>(org.apache.poi.openxml4j.opc.PackagePart, org.apache.poi.openxml4j.opc.PackageRelationship) throws java.io.IOException, org.apache.xmlbeans.XmlException
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster $r6, $r7;
        org.apache.poi.openxml4j.opc.PackageRelationship r2;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData $r8;
        org.apache.poi.openxml4j.opc.PackagePart r1, $r3;
        org.openxmlformats.schemas.presentationml.x2006.main.SldMasterDocument $r5;
        java.io.InputStream $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        r1 := @parameter0: org.apache.poi.openxml4j.opc.PackagePart;

        r2 := @parameter1: org.apache.poi.openxml4j.opc.PackageRelationship;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSheet: void <init>(org.apache.poi.openxml4j.opc.PackagePart,org.apache.poi.openxml4j.opc.PackageRelationship)>(r1, r2);

        $r3 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r4 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePart: java.io.InputStream getInputStream()>();

        $r5 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.SldMasterDocument$Factory: org.openxmlformats.schemas.presentationml.x2006.main.SldMasterDocument parse(java.io.InputStream)>($r4);

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.presentationml.x2006.main.SldMasterDocument: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster getSldMaster()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster _slide> = $r6;

        $r7 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster _slide>;

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData getCSld()>();

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: void setCommonSlideData(org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData)>($r8);

        return;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster getXmlObject()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster $r1;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster _slide>;

        return $r1;
    }

    protected java.lang.String getRootElementName()
    {
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        return "sldMaster";
    }

    public org.apache.poi.xslf.usermodel.XSLFSheet getMasterSheet()
    {
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        return null;
    }

    private java.util.Map getLayouts()
    {
        java.util.Iterator $r5;
        java.util.HashMap $r3;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;
        java.util.List $r4;
        org.apache.poi.POIXMLDocumentPart r7;
        java.util.Map $r1, $r2, $r9;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r8;
        java.lang.Object $r6;
        java.lang.String $r10, $r11;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: java.util.Map _layouts>;

        if $r1 != null goto label3;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: java.util.Map _layouts> = $r3;

        $r4 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: java.util.List getRelations()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.poi.POIXMLDocumentPart) $r6;

        $z1 = r7 instanceof org.apache.poi.xslf.usermodel.XSLFSlideLayout;

        if $z1 == 0 goto label2;

        r8 = (org.apache.poi.xslf.usermodel.XSLFSlideLayout) r7;

        $r9 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: java.util.Map _layouts>;

        $r10 = virtualinvoke r8.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: java.lang.String getName()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r8);

     label2:
        goto label1;

     label3:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: java.util.Map _layouts>;

        return $r2;
    }

    public org.apache.poi.xslf.usermodel.XSLFSlideLayout[] getSlideLayouts()
    {
        java.lang.Object[] $r5;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout[] $r4, $r6;
        java.util.Collection $r2;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;
        java.util.Map $r1, $r3;
        int $i0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: java.util.Map getLayouts()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: java.util.Map _layouts>;

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $r4 = newarray (org.apache.poi.xslf.usermodel.XSLFSlideLayout)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.apache.poi.xslf.usermodel.XSLFSlideLayout[]) $r5;

        return $r6;
    }

    public org.apache.poi.xslf.usermodel.XSLFSlideLayout getLayout(org.apache.poi.xslf.usermodel.SlideLayout)
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;
        java.util.Map $r1;
        org.apache.poi.xslf.usermodel.XSLFSlideLayout r5;
        java.lang.Object $r4;
        boolean $z0;
        org.apache.poi.xslf.usermodel.SlideLayout $r6, r7;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        r7 := @parameter0: org.apache.poi.xslf.usermodel.SlideLayout;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: java.util.Map getLayouts()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.poi.xslf.usermodel.XSLFSlideLayout) $r4;

        $r6 = virtualinvoke r5.<org.apache.poi.xslf.usermodel.XSLFSlideLayout: org.apache.poi.xslf.usermodel.SlideLayout getType()>();

        if $r6 != r7 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public org.apache.poi.xslf.usermodel.XSLFTheme getTheme()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster $r7;
        java.util.Iterator $r3;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;
        java.util.List $r2;
        org.apache.poi.POIXMLDocumentPart r5;
        org.openxmlformats.schemas.drawingml.x2006.main.CTColorMapping $r8;
        org.apache.poi.xslf.usermodel.XSLFTheme $r1, $r6, $r9, $r10;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.apache.poi.xslf.usermodel.XSLFTheme _theme>;

        if $r1 != null goto label3;

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: java.util.List getRelations()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.poi.POIXMLDocumentPart) $r4;

        $z1 = r5 instanceof org.apache.poi.xslf.usermodel.XSLFTheme;

        if $z1 == 0 goto label2;

        $r6 = (org.apache.poi.xslf.usermodel.XSLFTheme) r5;

        r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.apache.poi.xslf.usermodel.XSLFTheme _theme> = $r6;

        $r7 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster _slide>;

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster: org.openxmlformats.schemas.drawingml.x2006.main.CTColorMapping getClrMap()>();

        if $r8 == null goto label3;

        $r9 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.apache.poi.xslf.usermodel.XSLFTheme _theme>;

        virtualinvoke $r9.<org.apache.poi.xslf.usermodel.XSLFTheme: void initColorMap(org.openxmlformats.schemas.drawingml.x2006.main.CTColorMapping)>($r8);

        goto label3;

     label2:
        goto label1;

     label3:
        $r10 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.apache.poi.xslf.usermodel.XSLFTheme _theme>;

        return $r10;
    }

    protected org.openxmlformats.schemas.drawingml.x2006.main.CTTextListStyle getTextProperties(org.apache.poi.xslf.usermodel.Placeholder)
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster $r1;
        org.apache.poi.xslf.usermodel.Placeholder r3;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTextListStyle r5;
        int[] $r4;
        int $i0, $i1;
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterTextStyles $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        r3 := @parameter0: org.apache.poi.xslf.usermodel.Placeholder;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster getXmlObject()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterTextStyles getTxStyles()>();

        $r4 = <org.apache.poi.xslf.usermodel.XSLFSlideMaster$1: int[] $SwitchMap$org$apache$poi$xslf$usermodel$Placeholder>;

        $i0 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.Placeholder: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterTextStyles: org.openxmlformats.schemas.drawingml.x2006.main.CTTextListStyle getTitleStyle()>();

        goto label4;

     label2:
        r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterTextStyles: org.openxmlformats.schemas.drawingml.x2006.main.CTTextListStyle getBodyStyle()>();

        goto label4;

     label3:
        r5 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMasterTextStyles: org.openxmlformats.schemas.drawingml.x2006.main.CTTextListStyle getOtherStyle()>();

     label4:
        return r5;
    }

    protected boolean canDraw(org.apache.poi.xslf.usermodel.XSLFShape)
    {
        org.apache.poi.xslf.usermodel.XSLFShape r0;
        org.apache.poi.xslf.usermodel.XSLFSimpleShape r1;
        org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder $r2;
        boolean $z0;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r3;

        r3 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        r0 := @parameter0: org.apache.poi.xslf.usermodel.XSLFShape;

        $z0 = r0 instanceof org.apache.poi.xslf.usermodel.XSLFSimpleShape;

        if $z0 == 0 goto label1;

        r1 = (org.apache.poi.xslf.usermodel.XSLFSimpleShape) r0;

        $r2 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFSimpleShape: org.openxmlformats.schemas.presentationml.x2006.main.CTPlaceholder getCTPlaceholder()>();

        if $r2 == null goto label1;

        return 0;

     label1:
        return 1;
    }

    public org.apache.poi.xslf.usermodel.XSLFBackground getBackground()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster $r1;
        org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData $r2;
        org.openxmlformats.schemas.presentationml.x2006.main.CTBackground $r3;
        org.apache.poi.xslf.usermodel.XSLFBackground $r4;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster _slide>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData getCSld()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTCommonSlideData: org.openxmlformats.schemas.presentationml.x2006.main.CTBackground getBg()>();

        if $r3 == null goto label1;

        $r4 = new org.apache.poi.xslf.usermodel.XSLFBackground;

        specialinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFBackground: void <init>(org.openxmlformats.schemas.presentationml.x2006.main.CTBackground,org.apache.poi.xslf.usermodel.XSLFSheet)>($r3, r0);

        return $r4;

     label1:
        return null;
    }

    public volatile org.apache.xmlbeans.XmlObject getXmlObject()
    {
        org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster $r1;
        org.apache.poi.xslf.usermodel.XSLFSlideMaster r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFSlideMaster;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFSlideMaster: org.openxmlformats.schemas.presentationml.x2006.main.CTSlideMaster getXmlObject()>();

        return $r1;
    }
}
