final class org.apache.lucene.index.TermsHashPerThread extends org.apache.lucene.index.InvertedDocConsumerPerThread
{
    final org.apache.lucene.index.TermsHash termsHash;
    final org.apache.lucene.index.TermsHashConsumerPerThread consumer;
    final org.apache.lucene.index.TermsHashPerThread nextPerThread;
    final org.apache.lucene.index.CharBlockPool charPool;
    final org.apache.lucene.index.IntBlockPool intPool;
    final org.apache.lucene.index.ByteBlockPool bytePool;
    final boolean primary;
    final org.apache.lucene.index.DocumentsWriter$DocState docState;

    public void <init>(org.apache.lucene.index.DocInverterPerThread, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHashPerThread)
    {
        org.apache.lucene.index.TermsHashPerThread r0, r7, $r14;
        org.apache.lucene.index.CharBlockPool $r8, $r15;
        org.apache.lucene.index.DocumentsWriter $r10, $r12, $r16;
        org.apache.lucene.index.IntBlockPool $r9;
        org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator $r13;
        org.apache.lucene.index.TermsHashConsumer $r4;
        org.apache.lucene.index.ByteBlockPool $r11;
        org.apache.lucene.index.TermsHash r3, r6;
        org.apache.lucene.index.DocumentsWriter$DocState $r2;
        org.apache.lucene.index.TermsHashConsumerPerThread $r5;
        org.apache.lucene.index.DocInverterPerThread r1;

        r0 := @this: org.apache.lucene.index.TermsHashPerThread;

        r1 := @parameter0: org.apache.lucene.index.DocInverterPerThread;

        r3 := @parameter1: org.apache.lucene.index.TermsHash;

        r6 := @parameter2: org.apache.lucene.index.TermsHash;

        r7 := @parameter3: org.apache.lucene.index.TermsHashPerThread;

        specialinvoke r0.<org.apache.lucene.index.InvertedDocConsumerPerThread: void <init>()>();

        $r2 = r1.<org.apache.lucene.index.DocInverterPerThread: org.apache.lucene.index.DocumentsWriter$DocState docState>;

        r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.DocumentsWriter$DocState docState> = $r2;

        r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHash termsHash> = r3;

        $r4 = r3.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHashConsumer consumer>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.TermsHashConsumer: org.apache.lucene.index.TermsHashConsumerPerThread addThread(org.apache.lucene.index.TermsHashPerThread)>(r0);

        r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashConsumerPerThread consumer> = $r5;

        if r6 == null goto label1;

        $r15 = new org.apache.lucene.index.CharBlockPool;

        $r16 = r3.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.DocumentsWriter docWriter>;

        specialinvoke $r15.<org.apache.lucene.index.CharBlockPool: void <init>(org.apache.lucene.index.DocumentsWriter)>($r16);

        r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.CharBlockPool charPool> = $r15;

        r0.<org.apache.lucene.index.TermsHashPerThread: boolean primary> = 1;

        goto label2;

     label1:
        $r8 = r7.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.CharBlockPool charPool>;

        r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.CharBlockPool charPool> = $r8;

        r0.<org.apache.lucene.index.TermsHashPerThread: boolean primary> = 0;

     label2:
        $r9 = new org.apache.lucene.index.IntBlockPool;

        $r10 = r3.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.DocumentsWriter docWriter>;

        specialinvoke $r9.<org.apache.lucene.index.IntBlockPool: void <init>(org.apache.lucene.index.DocumentsWriter)>($r10);

        r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.IntBlockPool intPool> = $r9;

        $r11 = new org.apache.lucene.index.ByteBlockPool;

        $r12 = r3.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.DocumentsWriter docWriter>;

        $r13 = $r12.<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator byteBlockAllocator>;

        specialinvoke $r11.<org.apache.lucene.index.ByteBlockPool: void <init>(org.apache.lucene.index.ByteBlockPool$Allocator)>($r13);

        r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.ByteBlockPool bytePool> = $r11;

        if r6 == null goto label3;

        $r14 = virtualinvoke r6.<org.apache.lucene.index.TermsHash: org.apache.lucene.index.TermsHashPerThread addThread(org.apache.lucene.index.DocInverterPerThread,org.apache.lucene.index.TermsHashPerThread)>(r1, r0);

        r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread> = $r14;

        goto label4;

     label3:
        r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread> = null;

     label4:
        return;
    }

    org.apache.lucene.index.InvertedDocConsumerPerField addField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.FieldInfo)
    {
        org.apache.lucene.index.TermsHashPerThread r2, $r4;
        org.apache.lucene.index.TermsHashPerField $r0;
        org.apache.lucene.index.FieldInfo r3;
        org.apache.lucene.index.DocInverterPerField r1;

        r2 := @this: org.apache.lucene.index.TermsHashPerThread;

        r1 := @parameter0: org.apache.lucene.index.DocInverterPerField;

        r3 := @parameter1: org.apache.lucene.index.FieldInfo;

        $r0 = new org.apache.lucene.index.TermsHashPerField;

        $r4 = r2.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread>;

        specialinvoke $r0.<org.apache.lucene.index.TermsHashPerField: void <init>(org.apache.lucene.index.DocInverterPerField,org.apache.lucene.index.TermsHashPerThread,org.apache.lucene.index.TermsHashPerThread,org.apache.lucene.index.FieldInfo)>(r1, r2, $r4, r3);

        return $r0;
    }

    public synchronized void abort()
    {
        java.lang.Throwable $r4;
        org.apache.lucene.index.TermsHashPerThread r0, $r2, $r3, $r5, $r6;
        org.apache.lucene.index.TermsHashConsumerPerThread $r1;

        r0 := @this: org.apache.lucene.index.TermsHashPerThread;

        virtualinvoke r0.<org.apache.lucene.index.TermsHashPerThread: void reset(boolean)>(1);

     label1:
        $r1 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashConsumerPerThread consumer>;

        virtualinvoke $r1.<org.apache.lucene.index.TermsHashConsumerPerThread: void abort()>();

        goto label6;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        goto label8;

     label4:
        throw $r4;

     label5:
        return;

     label6:
        $r2 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread>;

        if $r2 == null goto label7;

        $r3 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread>;

        virtualinvoke $r3.<org.apache.lucene.index.TermsHashPerThread: void abort()>();

     label7:
        goto label2;

     label8:
        $r5 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread>;

        if $r5 == null goto label9;

        $r6 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread>;

        virtualinvoke $r6.<org.apache.lucene.index.TermsHashPerThread: void abort()>();

     label9:
        goto label4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void startDocument() throws java.io.IOException
    {
        org.apache.lucene.index.TermsHashPerThread r0, $r2, $r3;
        org.apache.lucene.index.TermsHashConsumerPerThread $r1, $r4;

        r0 := @this: org.apache.lucene.index.TermsHashPerThread;

        $r1 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashConsumerPerThread consumer>;

        virtualinvoke $r1.<org.apache.lucene.index.TermsHashConsumerPerThread: void startDocument()>();

        $r2 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread>;

        $r4 = $r3.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashConsumerPerThread consumer>;

        virtualinvoke $r4.<org.apache.lucene.index.TermsHashConsumerPerThread: void startDocument()>();

     label1:
        return;
    }

    public org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() throws java.io.IOException
    {
        org.apache.lucene.index.TermsHashPerThread r0, $r3, $r4;
        org.apache.lucene.index.DocumentsWriter$DocWriter $r2, r6;
        org.apache.lucene.index.TermsHashConsumerPerThread $r1, $r5;

        r0 := @this: org.apache.lucene.index.TermsHashPerThread;

        $r1 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashConsumerPerThread consumer>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.TermsHashConsumerPerThread: org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument()>();

        $r3 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashPerThread nextPerThread>;

        $r5 = $r4.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.TermsHashConsumerPerThread consumer>;

        r6 = virtualinvoke $r5.<org.apache.lucene.index.TermsHashConsumerPerThread: org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument()>();

        goto label2;

     label1:
        r6 = null;

     label2:
        if $r2 != null goto label3;

        return r6;

     label3:
        virtualinvoke $r2.<org.apache.lucene.index.DocumentsWriter$DocWriter: void setNext(org.apache.lucene.index.DocumentsWriter$DocWriter)>(r6);

        return $r2;
    }

    void reset(boolean)
    {
        org.apache.lucene.index.TermsHashPerThread r0;
        org.apache.lucene.index.IntBlockPool $r1;
        org.apache.lucene.index.CharBlockPool $r3;
        org.apache.lucene.index.ByteBlockPool $r2;
        boolean $z0, z1;

        r0 := @this: org.apache.lucene.index.TermsHashPerThread;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.IntBlockPool intPool>;

        virtualinvoke $r1.<org.apache.lucene.index.IntBlockPool: void reset()>();

        $r2 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.ByteBlockPool bytePool>;

        virtualinvoke $r2.<org.apache.lucene.index.ByteBlockPool: void reset()>();

        $z0 = r0.<org.apache.lucene.index.TermsHashPerThread: boolean primary>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.lucene.index.TermsHashPerThread: org.apache.lucene.index.CharBlockPool charPool>;

        virtualinvoke $r3.<org.apache.lucene.index.CharBlockPool: void reset()>();

     label1:
        return;
    }
}
