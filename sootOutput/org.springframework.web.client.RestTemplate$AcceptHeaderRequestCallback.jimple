class org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback extends java.lang.Object implements org.springframework.web.client.RequestCallback
{
    private final java.lang.Class responseType;
    final org.springframework.web.client.RestTemplate this$0;

    private void <init>(org.springframework.web.client.RestTemplate, java.lang.Class)
    {
        java.lang.Class r2;
        org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback r0;
        org.springframework.web.client.RestTemplate r1;

        r0 := @this: org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        r1 := @parameter0: org.springframework.web.client.RestTemplate;

        r2 := @parameter1: java.lang.Class;

        r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: org.springframework.web.client.RestTemplate this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: java.lang.Class responseType> = r2;

        return;
    }

    public void doWithRequest(org.springframework.http.client.ClientHttpRequest) throws java.io.IOException
    {
        java.util.ArrayList $r2;
        org.springframework.http.client.ClientHttpRequest r18;
        org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback r0;
        java.nio.charset.Charset $r12;
        java.lang.String $r14, $r15, $r24;
        org.springframework.web.client.RestTemplate $r3, $r16, $r20;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r5, $r10;
        org.springframework.http.HttpHeaders $r19;
        org.springframework.http.MediaType $r13, r25;
        java.util.List $r4, $r9;
        org.springframework.http.converter.HttpMessageConverter r7;
        java.lang.Class $r1, $r8;
        java.lang.Object $r6, $r11;
        org.apache.commons.logging.Log $r17, $r21;
        java.lang.StringBuilder $r22, $r23;

        r0 := @this: org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        r18 := @parameter0: org.springframework.http.client.ClientHttpRequest;

        $r1 = r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: java.lang.Class responseType>;

        if $r1 == null goto label7;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: org.springframework.web.client.RestTemplate this$0>;

        $r4 = virtualinvoke $r3.<org.springframework.web.client.RestTemplate: java.util.List getMessageConverters()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.springframework.http.converter.HttpMessageConverter) $r6;

        $r8 = r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: java.lang.Class responseType>;

        $z0 = interfaceinvoke r7.<org.springframework.http.converter.HttpMessageConverter: boolean canRead(java.lang.Class,org.springframework.http.MediaType)>($r8, null);

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r7.<org.springframework.http.converter.HttpMessageConverter: java.util.List getSupportedMediaTypes()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.springframework.http.MediaType) $r11;

        $r12 = virtualinvoke r25.<org.springframework.http.MediaType: java.nio.charset.Charset getCharSet()>();

        if $r12 == null goto label3;

        $r13 = new org.springframework.http.MediaType;

        $r14 = virtualinvoke r25.<org.springframework.http.MediaType: java.lang.String getType()>();

        $r15 = virtualinvoke r25.<org.springframework.http.MediaType: java.lang.String getSubtype()>();

        specialinvoke $r13.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>($r14, $r15);

        r25 = $r13;

     label3:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r25);

     label4:
        $z3 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label2;

     label5:
        $z4 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label1;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label7;

        staticinvoke <org.springframework.http.MediaType: void sortBySpecificity(java.util.List)>($r2);

        $r16 = r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: org.springframework.web.client.RestTemplate this$0>;

        $r17 = staticinvoke <org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log access$0(org.springframework.web.client.RestTemplate)>($r16);

        $z2 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label6;

        $r20 = r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: org.springframework.web.client.RestTemplate this$0>;

        $r21 = staticinvoke <org.springframework.web.client.RestTemplate: org.apache.commons.logging.Log access$0(org.springframework.web.client.RestTemplate)>($r20);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Setting request Accept header to ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r24);

     label6:
        $r19 = interfaceinvoke r18.<org.springframework.http.client.ClientHttpRequest: org.springframework.http.HttpHeaders getHeaders()>();

        virtualinvoke $r19.<org.springframework.http.HttpHeaders: void setAccept(java.util.List)>($r2);

     label7:
        return;
    }

    void <init>(org.springframework.web.client.RestTemplate, java.lang.Class, org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback)
    {
        org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback r0, r3;
        java.lang.Class r2;
        org.springframework.web.client.RestTemplate r1;

        r0 := @this: org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        r1 := @parameter0: org.springframework.web.client.RestTemplate;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        specialinvoke r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r2);

        return;
    }

    void <init>(org.springframework.web.client.RestTemplate, java.lang.Class, org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback, org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback)
    {
        org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback r0, r3, r4;
        java.lang.Class r2;
        org.springframework.web.client.RestTemplate r1;

        r0 := @this: org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        r1 := @parameter0: org.springframework.web.client.RestTemplate;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        r4 := @parameter3: org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback;

        specialinvoke r0.<org.springframework.web.client.RestTemplate$AcceptHeaderRequestCallback: void <init>(org.springframework.web.client.RestTemplate,java.lang.Class)>(r1, r2);

        return;
    }
}
