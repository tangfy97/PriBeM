public abstract class org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData extends java.lang.Object implements org.waveprotocol.wave.model.wave.data.ObservableWaveletData
{
    private final org.waveprotocol.wave.model.id.WaveId waveId;
    private final org.waveprotocol.wave.model.id.WaveletId id;
    private final org.waveprotocol.wave.model.wave.ParticipantId creator;
    private long version;
    private org.waveprotocol.wave.model.version.HashedVersion hashedVersion;
    private final long creationTime;
    private long lastModifiedTime;
    private final org.waveprotocol.wave.model.wave.data.DocumentFactory contentFactory;
    private final org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager listenerManager;

    protected void <init>(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.ParticipantId, long, long, org.waveprotocol.wave.model.version.HashedVersion, long, org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.wave.data.DocumentFactory)
    {
        org.waveprotocol.wave.model.id.WaveId r3;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r1;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.id.WaveletId r2;
        long l0, l1, l2;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        org.waveprotocol.wave.model.wave.data.DocumentFactory r6;
        org.waveprotocol.wave.model.version.HashedVersion r5;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r4 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        r5 := @parameter4: org.waveprotocol.wave.model.version.HashedVersion;

        l2 := @parameter5: long;

        r3 := @parameter6: org.waveprotocol.wave.model.id.WaveId;

        r6 := @parameter7: org.waveprotocol.wave.model.wave.data.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager listenerManager> = $r1;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "id cannot be null");

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "wave id cannot be null");

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.id.WaveletId id> = r2;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.ParticipantId creator> = r4;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long creationTime> = l0;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long version> = l1;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.version.HashedVersion hashedVersion> = r5;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long lastModifiedTime> = l2;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.id.WaveId waveId> = r3;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.DocumentFactory contentFactory> = r6;

        return;
    }

    protected void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.wave.model.wave.data.DocumentFactory)
    {
        org.waveprotocol.wave.model.id.WaveId $r6;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r1;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        long $l0, $l1, $l2;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r2;
        org.waveprotocol.wave.model.wave.data.DocumentFactory r7;
        org.waveprotocol.wave.model.version.HashedVersion $r5;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r7 := @parameter1: org.waveprotocol.wave.model.wave.data.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager listenerManager> = $r1;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.id.WaveletId id> = $r3;

        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.ParticipantId creator> = $r4;

        $l0 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: long getCreationTime()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long creationTime> = $l0;

        $l1 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: long getVersion()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long version> = $l1;

        $r5 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.version.HashedVersion hashedVersion> = $r5;

        $l2 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: long getLastModifiedTime()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long lastModifiedTime> = $l2;

        $r6 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.id.WaveId waveId> = $r6;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.DocumentFactory contentFactory> = r7;

        return;
    }

    protected abstract java.util.Set getMutableParticipants();

    protected abstract org.waveprotocol.wave.model.wave.data.BlipData internalCreateDocument(java.lang.String, org.waveprotocol.wave.model.wave.ParticipantId, java.util.Collection, org.waveprotocol.wave.model.wave.data.DocumentOperationSink, long, long);

    public abstract org.waveprotocol.wave.model.wave.data.BlipData getDocument(java.lang.String);

    public java.util.Set getParticipants()
    {
        java.util.Set $r1, $r2;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: java.util.Set getMutableParticipants()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    public boolean addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r3;
        java.util.Set $r1;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: java.util.Set getMutableParticipants()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager getListenerManager()>();

        virtualinvoke $r3.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void onParticipantAdded(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.ParticipantId)>(r0, r2);

        return 1;
    }

    public boolean addParticipant(org.waveprotocol.wave.model.wave.ParticipantId, int)
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r3;
        int i0;
        java.util.Set $r1;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: java.util.Set getMutableParticipants()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        staticinvoke <org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: void insert(java.util.Collection,int,java.lang.Object)>($r1, i0, r2);

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager getListenerManager()>();

        virtualinvoke $r3.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void onParticipantAdded(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.ParticipantId)>(r0, r2);

        return 1;
    }

    public boolean removeParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r3;
        java.util.Set $r1;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: java.util.Set getMutableParticipants()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager getListenerManager()>();

        virtualinvoke $r3.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void onParticipantRemoved(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.ParticipantId)>(r0, r2);

        return 1;
    }

    public final org.waveprotocol.wave.model.wave.ParticipantId getCreator()
    {
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.ParticipantId creator>;

        return $r1;
    }

    public final long getVersion()
    {
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        long $l0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        $l0 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long version>;

        return $l0;
    }

    public final org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r1;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.version.HashedVersion hashedVersion>;

        return $r1;
    }

    public final long getCreationTime()
    {
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        long $l0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        $l0 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long creationTime>;

        return $l0;
    }

    public final long getLastModifiedTime()
    {
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        long $l0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        $l0 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long lastModifiedTime>;

        return $l0;
    }

    public final org.waveprotocol.wave.model.id.WaveId getWaveId()
    {
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.id.WaveId $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.id.WaveId waveId>;

        return $r1;
    }

    public final org.waveprotocol.wave.model.id.WaveletId getWaveletId()
    {
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.id.WaveletId $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.id.WaveletId id>;

        return $r1;
    }

    public final long setVersion(long)
    {
        byte $b2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r1;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        long l0, $l1, $l3, l4;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        l0 := @parameter0: long;

        $l1 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long version>;

        $b2 = $l1 cmp l0;

        if $b2 == 0 goto label1;

        l4 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long version>;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long version> = l0;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager listenerManager>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void onVersionChanged(org.waveprotocol.wave.model.wave.data.WaveletData,long,long)>(r0, l4, l0);

        return l4;

     label1:
        $l3 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long version>;

        return $l3;
    }

    public final org.waveprotocol.wave.model.version.HashedVersion setHashedVersion(org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r5;
        org.waveprotocol.wave.model.version.HashedVersion r1, $r2, $r3, r4;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.version.HashedVersion hashedVersion>;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        r4 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.version.HashedVersion hashedVersion>;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.version.HashedVersion hashedVersion> = r1;

        $r5 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager listenerManager>;

        virtualinvoke $r5.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void onHashedVersionChanged(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>(r0, r4, r1);

        return r4;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.version.HashedVersion hashedVersion>;

        return $r3;
    }

    public final long setLastModifiedTime(long)
    {
        byte $b2;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r1;
        long l0, $l1, l3;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        l0 := @parameter0: long;

        $l1 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long lastModifiedTime>;

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label1;

        return l0;

     label1:
        l3 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long lastModifiedTime>;

        r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long lastModifiedTime> = l0;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager listenerManager>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void onLastModifiedTimeChanged(org.waveprotocol.wave.model.wave.data.WaveletData,long,long)>(r0, l3, l0);

        return l3;
    }

    public org.waveprotocol.wave.model.wave.data.BlipData createDocument(java.lang.String, org.waveprotocol.wave.model.wave.ParticipantId, java.util.Collection, org.waveprotocol.wave.model.document.operation.DocInitialization, long, long)
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r8;
        java.util.Collection r3;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r9;
        org.waveprotocol.wave.model.document.operation.DocInitialization r4;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        long l0, l1;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r6;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink $r7;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter2: java.util.Collection;

        r4 := @parameter3: org.waveprotocol.wave.model.document.operation.DocInitialization;

        l0 := @parameter4: long;

        l1 := @parameter5: long;

        $r6 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.DocumentFactory contentFactory>;

        $r5 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.id.WaveletId id>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.wave.data.DocumentFactory: org.waveprotocol.wave.model.wave.data.DocumentOperationSink create(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,org.waveprotocol.wave.model.document.operation.DocInitialization)>($r5, r1, r4);

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.BlipData internalCreateDocument(java.lang.String,org.waveprotocol.wave.model.wave.ParticipantId,java.util.Collection,org.waveprotocol.wave.model.wave.data.DocumentOperationSink,long,long)>(r1, r2, r3, $r7, l0, l1);

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager getListenerManager()>();

        virtualinvoke $r9.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void onBlipDataAdded(org.waveprotocol.wave.model.wave.data.WaveletData,org.waveprotocol.wave.model.wave.data.BlipData)>(r0, $r8);

        return $r8;
    }

    public final void addListener(org.waveprotocol.wave.model.wave.data.WaveletDataListener)
    {
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r1;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletDataListener;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager listenerManager>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void addListener(org.waveprotocol.wave.model.wave.data.WaveletDataListener)>(r1);

        return;
    }

    public final void removeListener(org.waveprotocol.wave.model.wave.data.WaveletDataListener)
    {
        org.waveprotocol.wave.model.wave.data.WaveletDataListener r1;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletDataListener;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager listenerManager>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager: void removeListener(org.waveprotocol.wave.model.wave.data.WaveletDataListener)>(r1);

        return;
    }

    protected org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager getListenerManager()
    {
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.impl.WaveletDataListenerManager listenerManager>;

        return $r1;
    }

    public final java.lang.String toString()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r13;
        boolean $z0;
        org.waveprotocol.wave.model.id.WaveId $r4;
        java.util.Set $r17, $r27;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r3;
        java.lang.StringBuilder $r0, $r1, $r2, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r32, $r33, $r34, $r35, $r37, $r38;
        org.waveprotocol.wave.model.wave.data.BlipData $r36;
        org.waveprotocol.wave.model.id.WaveletId $r7;
        long $l0, $l1, $l2;
        java.lang.String $r26, $r29, r31, $r39;
        java.util.Iterator $r28;
        java.lang.Object $r30;

        r3 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        $r0 = new java.lang.StringBuilder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WaveletDataImpl: ");

        $r4 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r7 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n[version:");

        $l0 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long getVersion()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n[creator: ");

        $r13 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n[participants: ");

        $r17 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: java.util.Set getParticipants()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n[creation time: ");

        $l1 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long getCreationTime()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n[lastModifiedTime:");

        $l2 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: long getLastModifiedTime()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r26);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n[documents:");

        $r27 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: java.util.Set getDocumentIds()>();

        $r28 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r30 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.lang.String) $r30;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n  [");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r36 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.BlipData getDocument(java.lang.String)>(r31);

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n]");

        $r29 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r29;
    }

    private static void insert(java.util.Collection, int, java.lang.Object)
    {
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        java.util.ArrayList $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object r6, $r7;

        r0 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        r6 := @parameter2: java.lang.Object;

        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndex(int,int)>(i0, $i1);

        $i2 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if i0 != $i2 goto label1;

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r6);

        return;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        i7 = 0;

     label2:
        if i7 >= i0 goto label3;

        interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        i7 = i7 + 1;

        goto label2;

     label3:
        $r2 = new java.util.ArrayList;

        $i3 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $i4 = $i3 - i0;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i4);

     label4:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        goto label4;

     label5:
        $i5 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i5 != i0 goto label6;

        $z1 = 1;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        $r3 = newarray (java.lang.Object)[2];

        $i6 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r5;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z1, "size %s != position %s", $r3);

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r6);

        interfaceinvoke r0.<java.util.Collection: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    protected void copyDocuments(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)
    {
        java.util.Iterator $r2;
        java.util.Set $r1, $r9;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r11;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r6;
        long $l0, $l1;
        org.waveprotocol.wave.model.wave.ParticipantId $r8;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r0;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink $r10;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.ReadableBlipData $r5;
        java.lang.String r4, $r7;
        boolean $z0;

        r6 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getDocumentIds()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.wave.data.ReadableBlipData getDocument(java.lang.String)>(r4);

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: java.lang.String getId()>();

        $r8 = interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r9 = interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: java.util.Set getContributors()>();

        $r10 = interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: org.waveprotocol.wave.model.wave.data.DocumentOperationSink getContent()>();

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.wave.data.DocumentOperationSink: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $l0 = interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: long getLastModifiedTime()>();

        $l1 = interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.data.ReadableBlipData: long getLastModifiedVersion()>();

        virtualinvoke r6.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.BlipData createDocument(java.lang.String,org.waveprotocol.wave.model.wave.ParticipantId,java.util.Collection,org.waveprotocol.wave.model.document.operation.DocInitialization,long,long)>($r7, $r8, $r9, $r11, $l0, $l1);

        goto label1;

     label2:
        return;
    }

    protected void copyParticipants(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r2;
        java.util.Set $r1, $r3;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: java.util.Set getMutableParticipants()>();

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getParticipants()>();

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    public volatile org.waveprotocol.wave.model.wave.data.ReadableBlipData getDocument(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.data.BlipData $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: org.waveprotocol.wave.model.wave.data.BlipData getDocument(java.lang.String)>(r1);

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.data.WaveletDataListener $r2;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: void removeListener(org.waveprotocol.wave.model.wave.data.WaveletDataListener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.data.WaveletDataListener $r2;
        org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.data.WaveletDataListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: void addListener(org.waveprotocol.wave.model.wave.data.WaveletDataListener)>($r2);

        return;
    }
}
