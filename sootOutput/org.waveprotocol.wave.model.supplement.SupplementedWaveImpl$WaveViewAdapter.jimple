class org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter extends java.lang.Object implements org.waveprotocol.wave.model.supplement.SupplementWaveView
{
    private final org.waveprotocol.wave.model.conversation.ConversationView view;
    private final org.waveprotocol.wave.model.wave.ParticipantId viewer;

    public void <init>(org.waveprotocol.wave.model.conversation.ConversationView, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter r0;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.conversation.ConversationView r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationView;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter: org.waveprotocol.wave.model.conversation.ConversationView view> = r1;

        r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter: org.waveprotocol.wave.model.wave.ParticipantId viewer> = r2;

        return;
    }

    public java.lang.Iterable getWavelets()
    {
        java.util.Iterator $r4;
        java.util.Collection $r3;
        org.waveprotocol.wave.model.id.WaveletId $r8;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter r1;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.conversation.Conversation r6;
        java.lang.Object $r5;
        java.lang.String $r7;
        org.waveprotocol.wave.model.conversation.ConversationView $r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter: org.waveprotocol.wave.model.conversation.ConversationView view>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.ConversationView: java.util.Collection getConversations()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.conversation.Conversation) $r5;

        $r7 = interfaceinvoke r6.<org.waveprotocol.wave.model.conversation.Conversation: java.lang.String getId()>();

        $r8 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId widFor(java.lang.String)>($r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return $r0;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getSignature(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter r0;
        org.waveprotocol.wave.model.conversation.Conversation $r4;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r6;
        org.waveprotocol.wave.model.version.HashedVersion $r7;
        java.lang.String $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r5;
        org.waveprotocol.wave.model.conversation.ConversationView $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter: org.waveprotocol.wave.model.conversation.ConversationView view>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: java.lang.String idFor(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.ConversationView: org.waveprotocol.wave.model.conversation.Conversation getConversation(java.lang.String)>($r3);

        if null == $r4 goto label1;

        $r5 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversation) $r4;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet()>();

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.wave.ObservableWavelet: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        goto label2;

     label1:
        $r7 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>(0L);

     label2:
        return $r7;
    }

    public long getVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r1;
        long $l0;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter r0;
        org.waveprotocol.wave.model.conversation.Conversation $r4;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r6;
        java.lang.String $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r5;
        org.waveprotocol.wave.model.conversation.ConversationView $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter: org.waveprotocol.wave.model.conversation.ConversationView view>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: java.lang.String idFor(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.ConversationView: org.waveprotocol.wave.model.conversation.Conversation getConversation(java.lang.String)>($r3);

        if $r4 == null goto label1;

        $r5 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversation) $r4;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet()>();

        $l0 = interfaceinvoke $r6.<org.waveprotocol.wave.model.wave.ObservableWavelet: long getVersion()>();

        goto label2;

     label1:
        $l0 = -1L;

     label2:
        return $l0;
    }

    public java.util.Map getBlipVersions(org.waveprotocol.wave.model.id.WaveletId)
    {
        java.util.Iterator $r7;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.util.HashMap $r5;
        long $l0;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter r0;
        java.lang.Iterable $r6;
        org.waveprotocol.wave.model.conversation.ConversationBlip r9;
        org.waveprotocol.wave.model.conversation.Conversation $r4;
        java.lang.Long $r11;
        java.lang.Object $r8;
        java.lang.String $r3, $r10;
        org.waveprotocol.wave.model.conversation.ConversationView $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter: org.waveprotocol.wave.model.conversation.ConversationView view>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: java.lang.String idFor(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.conversation.ConversationView: org.waveprotocol.wave.model.conversation.Conversation getConversation(java.lang.String)>($r3);

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.conversation.BlipIterators: java.lang.Iterable breadthFirst(org.waveprotocol.wave.model.conversation.Conversation)>($r4);

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.waveprotocol.wave.model.conversation.ConversationBlip) $r8;

        $r10 = interfaceinvoke r9.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.String getId()>();

        $l0 = interfaceinvoke r9.<org.waveprotocol.wave.model.conversation.ConversationBlip: long getLastModifiedVersion()>();

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        goto label1;

     label2:
        return $r5;
    }

    public boolean isExplicitParticipant()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.util.Set $r6;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r7;
        org.waveprotocol.wave.model.conversation.Conversation r5;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.conversation.ConversationView $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter: org.waveprotocol.wave.model.conversation.ConversationView view>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.conversation.ConversationView: java.util.Collection getConversations()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.conversation.Conversation) $r4;

        $r6 = interfaceinvoke r5.<org.waveprotocol.wave.model.conversation.Conversation: java.util.Set getParticipantIds()>();

        $r7 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$WaveViewAdapter: org.waveprotocol.wave.model.wave.ParticipantId viewer>;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }
}
