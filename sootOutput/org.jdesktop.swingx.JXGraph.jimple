public class org.jdesktop.swingx.JXGraph extends org.jdesktop.swingx.JXPanel
{
    private static final float STROKE_AXIS;
    private static final float STROKE_GRID;
    private static final float ZOOM_MULTIPLIER;
    private java.beans.PropertyChangeListener plotChangeListener;
    private java.awt.Color majorGridColor;
    private java.awt.Color minorGridColor;
    private java.awt.Color axisColor;
    private java.util.List plots;
    private double minX;
    private double maxX;
    private double minY;
    private double maxY;
    private java.awt.geom.Rectangle2D defaultView;
    private double originX;
    private double originY;
    private double majorX;
    private double defaultMajorX;
    private int minorCountX;
    private double majorY;
    private double defaultMajorY;
    private int minorCountY;
    private boolean textPainted;
    private boolean gridPainted;
    private boolean axisPainted;
    private boolean backPainted;
    private java.awt.Point dragStart;
    private java.text.NumberFormat mainFormatter;
    private java.text.NumberFormat secondFormatter;
    private boolean inputEnabled;
    private org.jdesktop.swingx.JXGraph$ZoomHandler zoomHandler;
    private org.jdesktop.swingx.JXGraph$PanMotionHandler panMotionHandler;
    private org.jdesktop.swingx.JXGraph$PanHandler panHandler;
    private org.jdesktop.swingx.JXGraph$ResetHandler resetHandler;

    public void <init>()
    {
        org.jdesktop.swingx.JXGraph r0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void <init>(double,double,double,double,double,double,double,int,double,int)>(0.0, 0.0, -1.0, 1.0, -1.0, 1.0, 0.2, 4, 0.2, 4);

        return;
    }

    public void <init>(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Point2D$Double $r1;
        java.awt.geom.Rectangle2D r2;
        org.jdesktop.swingx.JXGraph r0;
        double $d0, $d1;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r2 := @parameter0: java.awt.geom.Rectangle2D;

        $r1 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r2.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $d1 = virtualinvoke r2.<java.awt.geom.Rectangle2D: double getCenterY()>();

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void <init>(java.awt.geom.Point2D,java.awt.geom.Rectangle2D,double,int,double,int)>($r1, r2, 0.2, 4, 0.2, 4);

        return;
    }

    public void <init>(java.awt.geom.Rectangle2D, double, int, double, int)
    {
        java.awt.geom.Rectangle2D r2;
        java.awt.geom.Point2D$Double $r1;
        int i0, i1;
        org.jdesktop.swingx.JXGraph r0;
        double $d0, $d1, d2, d3;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r2 := @parameter0: java.awt.geom.Rectangle2D;

        d2 := @parameter1: double;

        i0 := @parameter2: int;

        d3 := @parameter3: double;

        i1 := @parameter4: int;

        $r1 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r2.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $d1 = virtualinvoke r2.<java.awt.geom.Rectangle2D: double getCenterY()>();

        specialinvoke $r1.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void <init>(java.awt.geom.Point2D,java.awt.geom.Rectangle2D,double,int,double,int)>($r1, r2, d2, i0, d3, i1);

        return;
    }

    public void <init>(java.awt.geom.Point2D, java.awt.geom.Rectangle2D)
    {
        org.jdesktop.swingx.JXGraph r0;
        java.awt.geom.Point2D r1;
        java.awt.geom.Rectangle2D r2;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r1 := @parameter0: java.awt.geom.Point2D;

        r2 := @parameter1: java.awt.geom.Rectangle2D;

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void <init>(java.awt.geom.Point2D,java.awt.geom.Rectangle2D,double,int,double,int)>(r1, r2, 0.2, 4, 0.2, 4);

        return;
    }

    public void <init>(java.awt.geom.Point2D, java.awt.geom.Rectangle2D, double, int, double, int)
    {
        java.awt.geom.Point2D r1;
        java.awt.geom.Rectangle2D r2;
        int i0, i1;
        org.jdesktop.swingx.JXGraph r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r1 := @parameter0: java.awt.geom.Point2D;

        r2 := @parameter1: java.awt.geom.Rectangle2D;

        d6 := @parameter2: double;

        i0 := @parameter3: int;

        d7 := @parameter4: double;

        i1 := @parameter5: int;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $d2 = virtualinvoke r2.<java.awt.geom.Rectangle2D: double getMinX()>();

        $d3 = virtualinvoke r2.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $d4 = virtualinvoke r2.<java.awt.geom.Rectangle2D: double getMinY()>();

        $d5 = virtualinvoke r2.<java.awt.geom.Rectangle2D: double getMaxY()>();

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void <init>(double,double,double,double,double,double,double,int,double,int)>($d0, $d1, $d2, $d3, $d4, $d5, d6, i0, d7, i1);

        return;
    }

    public void <init>(double, double, double, double, double, double, double, int, double, int)
    {
        java.awt.Color $r1, $r2, $r4, $r18, $r19, $r27;
        org.jdesktop.swingx.JXGraph$1 $r41;
        byte $b0, $b1, $b4, $b5;
        org.jdesktop.swingx.JXGraph r0;
        java.awt.geom.Rectangle2D$Double $r34;
        org.jdesktop.swingx.JXGraph$ResetHandler $r11, $r37;
        java.text.NumberFormat $r7, $r8;
        int i2, i3, $i6, $i7, $i8, $i9;
        java.util.LinkedList $r35;
        org.jdesktop.swingx.JXGraph$PanHandler $r13, $r38;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9;
        java.text.DecimalFormat $r36;
        java.lang.IllegalArgumentException $r28, $r29, $r30, $r31, $r32, $r33;
        org.jdesktop.swingx.JXGraph$PanMotionHandler $r15, $r39;
        org.jdesktop.swingx.JXGraph$ZoomHandler $r17, $r40;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        d6 := @parameter0: double;

        d7 := @parameter1: double;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        d3 := @parameter5: double;

        d4 := @parameter6: double;

        i2 := @parameter7: int;

        d5 := @parameter8: double;

        i3 := @parameter9: int;

        specialinvoke r0.<org.jdesktop.swingx.JXPanel: void <init>()>();

        $r1 = <java.awt.Color: java.awt.Color GRAY>;

        $r2 = virtualinvoke $r1.<java.awt.Color: java.awt.Color brighter()>();

        r0.<org.jdesktop.swingx.JXGraph: java.awt.Color majorGridColor> = $r2;

        $r27 = new java.awt.Color;

        specialinvoke $r27.<java.awt.Color: void <init>(int,int,int)>(220, 220, 220);

        r0.<org.jdesktop.swingx.JXGraph: java.awt.Color minorGridColor> = $r27;

        $r4 = <java.awt.Color: java.awt.Color BLACK>;

        r0.<org.jdesktop.swingx.JXGraph: java.awt.Color axisColor> = $r4;

        r0.<org.jdesktop.swingx.JXGraph: boolean textPainted> = 1;

        r0.<org.jdesktop.swingx.JXGraph: boolean gridPainted> = 1;

        r0.<org.jdesktop.swingx.JXGraph: boolean axisPainted> = 1;

        r0.<org.jdesktop.swingx.JXGraph: boolean backPainted> = 1;

        r0.<org.jdesktop.swingx.JXGraph: boolean inputEnabled> = 1;

        $b0 = d0 cmpl d1;

        $i6 = (int) $b0;

        if $i6 < 0 goto label1;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minX must be < to maxX");

        throw $r28;

     label1:
        $b1 = d2 cmpl d3;

        $i7 = (int) $b1;

        if $i7 < 0 goto label2;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minY must be < to maxY");

        throw $r29;

     label2:
        if i2 >= 0 goto label3;

        $r30 = new java.lang.IllegalArgumentException;

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minorCountX must be >= 0");

        throw $r30;

     label3:
        if i3 >= 0 goto label4;

        $r31 = new java.lang.IllegalArgumentException;

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minorCountY must be >= 0");

        throw $r31;

     label4:
        $b4 = d4 cmpg 0.0;

        $i8 = (int) $b4;

        if $i8 > 0 goto label5;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("majorX must be > 0.0");

        throw $r32;

     label5:
        $b5 = d5 cmpg 0.0;

        $i9 = (int) $b5;

        if $i9 > 0 goto label6;

        $r33 = new java.lang.IllegalArgumentException;

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("majorY must be > 0.0");

        throw $r33;

     label6:
        r0.<org.jdesktop.swingx.JXGraph: double originX> = d6;

        r0.<org.jdesktop.swingx.JXGraph: double originY> = d7;

        r0.<org.jdesktop.swingx.JXGraph: double minX> = d0;

        r0.<org.jdesktop.swingx.JXGraph: double maxX> = d1;

        r0.<org.jdesktop.swingx.JXGraph: double minY> = d2;

        r0.<org.jdesktop.swingx.JXGraph: double maxY> = d3;

        $r34 = new java.awt.geom.Rectangle2D$Double;

        $d9 = d1 - d0;

        $d8 = d3 - d2;

        specialinvoke $r34.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(d0, d2, $d9, $d8);

        r0.<org.jdesktop.swingx.JXGraph: java.awt.geom.Rectangle2D defaultView> = $r34;

        r0.<org.jdesktop.swingx.JXGraph: double defaultMajorX> = d4;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setMajorX(double)>(d4);

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setMinorCountX(int)>(i2);

        r0.<org.jdesktop.swingx.JXGraph: double defaultMajorY> = d5;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setMajorY(double)>(d5);

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setMinorCountY(int)>(i3);

        $r35 = new java.util.LinkedList;

        specialinvoke $r35.<java.util.LinkedList: void <init>()>();

        r0.<org.jdesktop.swingx.JXGraph: java.util.List plots> = $r35;

        $r7 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance()>();

        r0.<org.jdesktop.swingx.JXGraph: java.text.NumberFormat mainFormatter> = $r7;

        $r8 = r0.<org.jdesktop.swingx.JXGraph: java.text.NumberFormat mainFormatter>;

        virtualinvoke $r8.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(2);

        $r36 = new java.text.DecimalFormat;

        specialinvoke $r36.<java.text.DecimalFormat: void <init>(java.lang.String)>("0.##E0");

        r0.<org.jdesktop.swingx.JXGraph: java.text.NumberFormat secondFormatter> = $r36;

        $r37 = new org.jdesktop.swingx.JXGraph$ResetHandler;

        specialinvoke $r37.<org.jdesktop.swingx.JXGraph$ResetHandler: void <init>(org.jdesktop.swingx.JXGraph,org.jdesktop.swingx.JXGraph$1)>(r0, null);

        r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$ResetHandler resetHandler> = $r37;

        $r11 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$ResetHandler resetHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void addMouseListener(java.awt.event.MouseListener)>($r11);

        $r38 = new org.jdesktop.swingx.JXGraph$PanHandler;

        specialinvoke $r38.<org.jdesktop.swingx.JXGraph$PanHandler: void <init>(org.jdesktop.swingx.JXGraph,org.jdesktop.swingx.JXGraph$1)>(r0, null);

        r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$PanHandler panHandler> = $r38;

        $r13 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$PanHandler panHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void addMouseListener(java.awt.event.MouseListener)>($r13);

        $r39 = new org.jdesktop.swingx.JXGraph$PanMotionHandler;

        specialinvoke $r39.<org.jdesktop.swingx.JXGraph$PanMotionHandler: void <init>(org.jdesktop.swingx.JXGraph,org.jdesktop.swingx.JXGraph$1)>(r0, null);

        r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$PanMotionHandler panMotionHandler> = $r39;

        $r15 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$PanMotionHandler panMotionHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void addMouseMotionListener(java.awt.event.MouseMotionListener)>($r15);

        $r40 = new org.jdesktop.swingx.JXGraph$ZoomHandler;

        specialinvoke $r40.<org.jdesktop.swingx.JXGraph$ZoomHandler: void <init>(org.jdesktop.swingx.JXGraph,org.jdesktop.swingx.JXGraph$1)>(r0, null);

        r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$ZoomHandler zoomHandler> = $r40;

        $r17 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$ZoomHandler zoomHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void addMouseWheelListener(java.awt.event.MouseWheelListener)>($r17);

        $r18 = <java.awt.Color: java.awt.Color WHITE>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setBackground(java.awt.Color)>($r18);

        $r19 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setForeground(java.awt.Color)>($r19);

        $r41 = new org.jdesktop.swingx.JXGraph$1;

        specialinvoke $r41.<org.jdesktop.swingx.JXGraph$1: void <init>(org.jdesktop.swingx.JXGraph)>(r0);

        r0.<org.jdesktop.swingx.JXGraph: java.beans.PropertyChangeListener plotChangeListener> = $r41;

        return;
    }

    public boolean isOpaque()
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isBackgroundPainted()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = specialinvoke r0.<org.jdesktop.swingx.JXPanel: boolean isOpaque()>();

        return $z1;
    }

    public void setEnabled(boolean)
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.jdesktop.swingx.JXPanel: void setEnabled(boolean)>(z0);

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setInputEnabled(boolean)>(z0);

        return;
    }

    public void setInputEnabled(boolean)
    {
        org.jdesktop.swingx.JXGraph$PanMotionHandler $r3, $r7;
        org.jdesktop.swingx.JXGraph$ZoomHandler $r4, $r8;
        org.jdesktop.swingx.JXGraph$ResetHandler $r1, $r5;
        org.jdesktop.swingx.JXGraph r0;
        org.jdesktop.swingx.JXGraph$PanHandler $r2, $r6;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.jdesktop.swingx.JXGraph: boolean inputEnabled>;

        if $z1 == z0 goto label3;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isInputEnabled()>();

        r0.<org.jdesktop.swingx.JXGraph: boolean inputEnabled> = z0;

        if z0 == 0 goto label1;

        $r5 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$ResetHandler resetHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void addMouseListener(java.awt.event.MouseListener)>($r5);

        $r6 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$PanHandler panHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void addMouseListener(java.awt.event.MouseListener)>($r6);

        $r7 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$PanMotionHandler panMotionHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void addMouseMotionListener(java.awt.event.MouseMotionListener)>($r7);

        $r8 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$ZoomHandler zoomHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void addMouseWheelListener(java.awt.event.MouseWheelListener)>($r8);

        goto label2;

     label1:
        $r1 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$ResetHandler resetHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void removeMouseListener(java.awt.event.MouseListener)>($r1);

        $r2 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$PanHandler panHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void removeMouseListener(java.awt.event.MouseListener)>($r2);

        $r3 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$PanMotionHandler panMotionHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void removeMouseMotionListener(java.awt.event.MouseMotionListener)>($r3);

        $r4 = r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.JXGraph$ZoomHandler zoomHandler>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void removeMouseWheelListener(java.awt.event.MouseWheelListener)>($r4);

     label2:
        $z3 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isInputEnabled()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,boolean,boolean)>("inputEnabled", $z2, $z3);

     label3:
        return;
    }

    public boolean isInputEnabled()
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $z0 = r0.<org.jdesktop.swingx.JXGraph: boolean inputEnabled>;

        return $z0;
    }

    public boolean isTextPainted()
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $z0 = r0.<org.jdesktop.swingx.JXGraph: boolean textPainted>;

        return $z0;
    }

    public void setTextPainted(boolean)
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isTextPainted()>();

        r0.<org.jdesktop.swingx.JXGraph: boolean textPainted> = z1;

        $z2 = r0.<org.jdesktop.swingx.JXGraph: boolean textPainted>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,boolean,boolean)>("textPainted", $z0, $z2);

        return;
    }

    public boolean isGridPainted()
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $z0 = r0.<org.jdesktop.swingx.JXGraph: boolean gridPainted>;

        return $z0;
    }

    public void setGridPainted(boolean)
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isGridPainted()>();

        r0.<org.jdesktop.swingx.JXGraph: boolean gridPainted> = z1;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isGridPainted()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,boolean,boolean)>("gridPainted", $z0, $z2);

        return;
    }

    public boolean isAxisPainted()
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $z0 = r0.<org.jdesktop.swingx.JXGraph: boolean axisPainted>;

        return $z0;
    }

    public void setAxisPainted(boolean)
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isAxisPainted()>();

        r0.<org.jdesktop.swingx.JXGraph: boolean axisPainted> = z1;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isAxisPainted()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,boolean,boolean)>("axisPainted", $z0, $z2);

        return;
    }

    public boolean isBackgroundPainted()
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $z0 = r0.<org.jdesktop.swingx.JXGraph: boolean backPainted>;

        return $z0;
    }

    public void setBackgroundPainted(boolean)
    {
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isBackgroundPainted()>();

        r0.<org.jdesktop.swingx.JXGraph: boolean backPainted> = z1;

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isBackgroundPainted()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,boolean,boolean)>("backgroundPainted", $z0, $z2);

        return;
    }

    public java.awt.Color getMajorGridColor()
    {
        java.awt.Color $r1;
        org.jdesktop.swingx.JXGraph r0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $r1 = r0.<org.jdesktop.swingx.JXGraph: java.awt.Color majorGridColor>;

        return $r1;
    }

    public void setMajorGridColor(java.awt.Color)
    {
        java.awt.Color r0, $r2, $r3;
        org.jdesktop.swingx.JXGraph r1;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.jdesktop.swingx.JXGraph;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Color cannot be null.");

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph: java.awt.Color getMajorGridColor()>();

        r1.<org.jdesktop.swingx.JXGraph: java.awt.Color majorGridColor> = r0;

        $r3 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph: java.awt.Color getMajorGridColor()>();

        virtualinvoke r1.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("majorGridColor", $r2, $r3);

        return;
    }

    public java.awt.Color getMinorGridColor()
    {
        java.awt.Color $r1;
        org.jdesktop.swingx.JXGraph r0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $r1 = r0.<org.jdesktop.swingx.JXGraph: java.awt.Color minorGridColor>;

        return $r1;
    }

    public void setMinorGridColor(java.awt.Color)
    {
        java.awt.Color r0, $r2, $r3;
        org.jdesktop.swingx.JXGraph r1;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.jdesktop.swingx.JXGraph;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Color cannot be null.");

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph: java.awt.Color getMinorGridColor()>();

        r1.<org.jdesktop.swingx.JXGraph: java.awt.Color minorGridColor> = r0;

        $r3 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph: java.awt.Color getMinorGridColor()>();

        virtualinvoke r1.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("minorGridColor", $r2, $r3);

        return;
    }

    public java.awt.Color getAxisColor()
    {
        java.awt.Color $r1;
        org.jdesktop.swingx.JXGraph r0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $r1 = r0.<org.jdesktop.swingx.JXGraph: java.awt.Color axisColor>;

        return $r1;
    }

    public void setAxisColor(java.awt.Color)
    {
        java.awt.Color r0, $r2, $r3;
        org.jdesktop.swingx.JXGraph r1;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.jdesktop.swingx.JXGraph;

        r0 := @parameter0: java.awt.Color;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Color cannot be null.");

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph: java.awt.Color getAxisColor()>();

        r1.<org.jdesktop.swingx.JXGraph: java.awt.Color axisColor> = r0;

        $r3 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph: java.awt.Color getAxisColor()>();

        virtualinvoke r1.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("axisColor", $r2, $r3);

        return;
    }

    public double getMajorX()
    {
        org.jdesktop.swingx.JXGraph r0;
        double $d0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        return $d0;
    }

    public void setMajorX(double)
    {
        byte $b0;
        int $i1;
        org.jdesktop.swingx.JXGraph r0;
        java.lang.IllegalArgumentException $r2;
        double d0, $d1, $d2;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("majorX must be > 0.0");

        throw $r2;

     label1:
        $d1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double getMajorX()>();

        r0.<org.jdesktop.swingx.JXGraph: double majorX> = d0;

        r0.<org.jdesktop.swingx.JXGraph: double defaultMajorX> = d0;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void repaint()>();

        $d2 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double getMajorX()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,double,double)>("majorX", $d1, $d2);

        return;
    }

    public int getMinorCountX()
    {
        int $i0;
        org.jdesktop.swingx.JXGraph r0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $i0 = r0.<org.jdesktop.swingx.JXGraph: int minorCountX>;

        return $i0;
    }

    public void setMinorCountX(int)
    {
        int i0, $i1, $i2;
        org.jdesktop.swingx.JXGraph r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minorCountX must be >= 0");

        throw $r1;

     label1:
        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getMinorCountX()>();

        r0.<org.jdesktop.swingx.JXGraph: int minorCountX> = i0;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void repaint()>();

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getMinorCountX()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,int,int)>("minorCountX", $i1, $i2);

        return;
    }

    public double getMajorY()
    {
        org.jdesktop.swingx.JXGraph r0;
        double $d0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        return $d0;
    }

    public void setMajorY(double)
    {
        byte $b0;
        int $i1;
        org.jdesktop.swingx.JXGraph r0;
        java.lang.IllegalArgumentException $r2;
        double d0, $d1, $d2;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("majorY must be > 0.0");

        throw $r2;

     label1:
        $d1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double getMajorY()>();

        r0.<org.jdesktop.swingx.JXGraph: double majorY> = d0;

        r0.<org.jdesktop.swingx.JXGraph: double defaultMajorY> = d0;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void repaint()>();

        $d2 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double getMajorY()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,double,double)>("majorY", $d1, $d2);

        return;
    }

    public int getMinorCountY()
    {
        int $i0;
        org.jdesktop.swingx.JXGraph r0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $i0 = r0.<org.jdesktop.swingx.JXGraph: int minorCountY>;

        return $i0;
    }

    public void setMinorCountY(int)
    {
        int i0, $i1, $i2;
        org.jdesktop.swingx.JXGraph r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("minorCountY must be >= 0");

        throw $r1;

     label1:
        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getMinorCountY()>();

        r0.<org.jdesktop.swingx.JXGraph: int minorCountY> = i0;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void repaint()>();

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getMinorCountY()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,int,int)>("minorCountY", $i1, $i2);

        return;
    }

    public void setViewAndOrigin(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Point2D$Double $r2;
        java.awt.geom.Rectangle2D r1;
        org.jdesktop.swingx.JXGraph r0;
        double $d0, $d1;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setView(java.awt.geom.Rectangle2D)>(r1);

        $r2 = new java.awt.geom.Point2D$Double;

        $d0 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Rectangle2D: double getCenterY()>();

        specialinvoke $r2.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d0, $d1);

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setOrigin(java.awt.geom.Point2D)>($r2);

        return;
    }

    public void setView(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D r0, $r2, $r4, $r5, $r6, $r7, $r8;
        org.jdesktop.swingx.JXGraph r1;
        java.awt.geom.Rectangle2D$Double $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r1 := @this: org.jdesktop.swingx.JXGraph;

        r0 := @parameter0: java.awt.geom.Rectangle2D;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph: java.awt.geom.Rectangle2D getView()>();

        $r3 = new java.awt.geom.Rectangle2D$Double;

        $d0 = virtualinvoke r0.<java.awt.geom.Rectangle2D: double getX()>();

        $d1 = virtualinvoke r0.<java.awt.geom.Rectangle2D: double getY()>();

        $d2 = virtualinvoke r0.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d3 = virtualinvoke r0.<java.awt.geom.Rectangle2D: double getHeight()>();

        specialinvoke $r3.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        r1.<org.jdesktop.swingx.JXGraph: java.awt.geom.Rectangle2D defaultView> = $r3;

        $r4 = r1.<org.jdesktop.swingx.JXGraph: java.awt.geom.Rectangle2D defaultView>;

        $d4 = virtualinvoke $r4.<java.awt.geom.Rectangle2D: double getMinX()>();

        r1.<org.jdesktop.swingx.JXGraph: double minX> = $d4;

        $r5 = r1.<org.jdesktop.swingx.JXGraph: java.awt.geom.Rectangle2D defaultView>;

        $d5 = virtualinvoke $r5.<java.awt.geom.Rectangle2D: double getMaxX()>();

        r1.<org.jdesktop.swingx.JXGraph: double maxX> = $d5;

        $r6 = r1.<org.jdesktop.swingx.JXGraph: java.awt.geom.Rectangle2D defaultView>;

        $d6 = virtualinvoke $r6.<java.awt.geom.Rectangle2D: double getMinY()>();

        r1.<org.jdesktop.swingx.JXGraph: double minY> = $d6;

        $r7 = r1.<org.jdesktop.swingx.JXGraph: java.awt.geom.Rectangle2D defaultView>;

        $d7 = virtualinvoke $r7.<java.awt.geom.Rectangle2D: double getMaxY()>();

        r1.<org.jdesktop.swingx.JXGraph: double maxY> = $d7;

        $d8 = r1.<org.jdesktop.swingx.JXGraph: double defaultMajorX>;

        r1.<org.jdesktop.swingx.JXGraph: double majorX> = $d8;

        $d9 = r1.<org.jdesktop.swingx.JXGraph: double defaultMajorY>;

        r1.<org.jdesktop.swingx.JXGraph: double majorY> = $d9;

        $r8 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph: java.awt.geom.Rectangle2D getView()>();

        virtualinvoke r1.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("view", $r2, $r8);

        virtualinvoke r1.<org.jdesktop.swingx.JXGraph: void repaint()>();

        return;
    }

    public java.awt.geom.Rectangle2D getView()
    {
        org.jdesktop.swingx.JXGraph r1;
        java.awt.geom.Rectangle2D$Double $r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r1 := @this: org.jdesktop.swingx.JXGraph;

        $r0 = new java.awt.geom.Rectangle2D$Double;

        $d7 = r1.<org.jdesktop.swingx.JXGraph: double minX>;

        $d6 = r1.<org.jdesktop.swingx.JXGraph: double minY>;

        $d1 = r1.<org.jdesktop.swingx.JXGraph: double maxX>;

        $d0 = r1.<org.jdesktop.swingx.JXGraph: double minX>;

        $d5 = $d1 - $d0;

        $d3 = r1.<org.jdesktop.swingx.JXGraph: double maxY>;

        $d2 = r1.<org.jdesktop.swingx.JXGraph: double minY>;

        $d4 = $d3 - $d2;

        specialinvoke $r0.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d7, $d6, $d5, $d4);

        return $r0;
    }

    public void resetView()
    {
        org.jdesktop.swingx.JXGraph r0;
        java.awt.geom.Rectangle2D $r1;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $r1 = r0.<org.jdesktop.swingx.JXGraph: java.awt.geom.Rectangle2D defaultView>;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setView(java.awt.geom.Rectangle2D)>($r1);

        return;
    }

    public void setOrigin(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r0, $r2, $r3;
        org.jdesktop.swingx.JXGraph r1;
        double $d0, $d1;

        r1 := @this: org.jdesktop.swingx.JXGraph;

        r0 := @parameter0: java.awt.geom.Point2D;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph: java.awt.geom.Point2D getOrigin()>();

        $d0 = virtualinvoke r0.<java.awt.geom.Point2D: double getX()>();

        r1.<org.jdesktop.swingx.JXGraph: double originX> = $d0;

        $d1 = virtualinvoke r0.<java.awt.geom.Point2D: double getY()>();

        r1.<org.jdesktop.swingx.JXGraph: double originY> = $d1;

        $r3 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph: java.awt.geom.Point2D getOrigin()>();

        virtualinvoke r1.<org.jdesktop.swingx.JXGraph: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("origin", $r2, $r3);

        virtualinvoke r1.<org.jdesktop.swingx.JXGraph: void repaint()>();

        return;
    }

    public java.awt.geom.Point2D getOrigin()
    {
        java.awt.geom.Point2D$Double $r0;
        org.jdesktop.swingx.JXGraph r1;
        double $d0, $d1;

        r1 := @this: org.jdesktop.swingx.JXGraph;

        $r0 = new java.awt.geom.Point2D$Double;

        $d1 = r1.<org.jdesktop.swingx.JXGraph: double originX>;

        $d0 = r1.<org.jdesktop.swingx.JXGraph: double originY>;

        specialinvoke $r0.<java.awt.geom.Point2D$Double: void <init>(double,double)>($d1, $d0);

        return $r0;
    }

    public transient void addPlots(java.awt.Color, org.jdesktop.swingx.JXGraph$Plot[])
    {
        java.awt.Color r0;
        org.jdesktop.swingx.JXGraph$Plot[] r1;
        java.lang.IllegalArgumentException $r8;
        org.jdesktop.swingx.JXGraph$DrawablePlot $r4;
        java.util.List $r5, $r7;
        java.beans.PropertyChangeListener $r6;
        int i0, i1;
        org.jdesktop.swingx.JXGraph$Plot r3;
        org.jdesktop.swingx.JXGraph r2;
        boolean $z0;

        r2 := @this: org.jdesktop.swingx.JXGraph;

        r0 := @parameter0: java.awt.Color;

        r1 := @parameter1: org.jdesktop.swingx.JXGraph$Plot[];

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Plots color cannot be null.");

        throw $r8;

     label1:
        if r1 != null goto label2;

        return;

     label2:
        i0 = lengthof r1;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = r1[i1];

        $r4 = new org.jdesktop.swingx.JXGraph$DrawablePlot;

        specialinvoke $r4.<org.jdesktop.swingx.JXGraph$DrawablePlot: void <init>(org.jdesktop.swingx.JXGraph$Plot,java.awt.Color,org.jdesktop.swingx.JXGraph$1)>(r3, r0, null);

        if r3 == null goto label4;

        $r5 = r2.<org.jdesktop.swingx.JXGraph: java.util.List plots>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

        $r6 = r2.<org.jdesktop.swingx.JXGraph: java.beans.PropertyChangeListener plotChangeListener>;

        virtualinvoke r3.<org.jdesktop.swingx.JXGraph$Plot: void addPropertyChangeListener(java.beans.PropertyChangeListener)>($r6);

        $r7 = r2.<org.jdesktop.swingx.JXGraph: java.util.List plots>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r4);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        virtualinvoke r2.<org.jdesktop.swingx.JXGraph: void repaint()>();

        return;
    }

    public transient void removePlots(org.jdesktop.swingx.JXGraph$Plot[])
    {
        org.jdesktop.swingx.JXGraph$Plot[] r0;
        java.util.Iterator $r4;
        org.jdesktop.swingx.JXGraph$DrawablePlot r8, r10;
        java.util.List $r3, $r6;
        java.beans.PropertyChangeListener $r5;
        int i0, i1;
        org.jdesktop.swingx.JXGraph$Plot r2, $r9;
        org.jdesktop.swingx.JXGraph r1;
        java.lang.Object $r7;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXGraph;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph$Plot[];

        if r0 != null goto label1;

        return;

     label1:
        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label7;

        r2 = r0[i1];

        if r2 == null goto label6;

        r10 = null;

        $r3 = r1.<org.jdesktop.swingx.JXGraph: java.util.List plots>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.jdesktop.swingx.JXGraph$DrawablePlot) $r7;

        $r9 = staticinvoke <org.jdesktop.swingx.JXGraph$DrawablePlot: org.jdesktop.swingx.JXGraph$Plot access$500(org.jdesktop.swingx.JXGraph$DrawablePlot)>(r8);

        if $r9 != r2 goto label4;

        r10 = r8;

        goto label5;

     label4:
        goto label3;

     label5:
        if r10 == null goto label6;

        $r5 = r1.<org.jdesktop.swingx.JXGraph: java.beans.PropertyChangeListener plotChangeListener>;

        virtualinvoke r2.<org.jdesktop.swingx.JXGraph$Plot: void removePropertyChangeListener(java.beans.PropertyChangeListener)>($r5);

        $r6 = r1.<org.jdesktop.swingx.JXGraph: java.util.List plots>;

        interfaceinvoke $r6.<java.util.List: boolean remove(java.lang.Object)>(r10);

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        virtualinvoke r1.<org.jdesktop.swingx.JXGraph: void repaint()>();

        return;
    }

    public void removeAllPlots()
    {
        org.jdesktop.swingx.JXGraph r0;
        java.util.List $r1;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        $r1 = r0.<org.jdesktop.swingx.JXGraph: java.util.List plots>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void repaint()>();

        return;
    }

    public java.awt.Dimension getPreferredSize()
    {
        java.awt.Dimension $r0;
        org.jdesktop.swingx.JXGraph r1;

        r1 := @this: org.jdesktop.swingx.JXGraph;

        $r0 = new java.awt.Dimension;

        specialinvoke $r0.<java.awt.Dimension: void <init>(int,int)>(400, 400);

        return $r0;
    }

    protected double yPositionToPixel(double)
    {
        int $i0;
        org.jdesktop.swingx.JXGraph r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        d1 := @parameter0: double;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getHeight()>();

        d0 = (double) $i0;

        $d2 = r0.<org.jdesktop.swingx.JXGraph: double minY>;

        $d3 = d1 - $d2;

        $d7 = $d3 * d0;

        $d5 = r0.<org.jdesktop.swingx.JXGraph: double maxY>;

        $d4 = r0.<org.jdesktop.swingx.JXGraph: double minY>;

        $d6 = $d5 - $d4;

        $d8 = $d7 / $d6;

        $d9 = d0 - $d8;

        return $d9;
    }

    protected double xPositionToPixel(double)
    {
        int $i0;
        org.jdesktop.swingx.JXGraph r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        d0 := @parameter0: double;

        $d1 = r0.<org.jdesktop.swingx.JXGraph: double minX>;

        $d2 = d0 - $d1;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getWidth()>();

        $d3 = (double) $i0;

        $d7 = $d2 * $d3;

        $d5 = r0.<org.jdesktop.swingx.JXGraph: double maxX>;

        $d4 = r0.<org.jdesktop.swingx.JXGraph: double minX>;

        $d6 = $d5 - $d4;

        $d8 = $d7 / $d6;

        return $d8;
    }

    protected double xPixelToPosition(double)
    {
        int $i0;
        org.jdesktop.swingx.JXGraph r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        d0 := @parameter0: double;

        $d4 = r0.<org.jdesktop.swingx.JXGraph: double minX>;

        $d2 = r0.<org.jdesktop.swingx.JXGraph: double maxX>;

        $d1 = r0.<org.jdesktop.swingx.JXGraph: double minX>;

        $d3 = $d2 - $d1;

        $d5 = d0 * $d3;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getWidth()>();

        $d6 = (double) $i0;

        $d7 = $d5 / $d6;

        $d8 = $d4 + $d7;

        return $d8;
    }

    protected double yPixelToPosition(double)
    {
        int $i0, $i1;
        org.jdesktop.swingx.JXGraph r0;
        double $d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        d1 := @parameter0: double;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double minY>;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getHeight()>();

        $d2 = (double) $i0;

        $d6 = $d2 - d1;

        $d4 = r0.<org.jdesktop.swingx.JXGraph: double maxY>;

        $d3 = r0.<org.jdesktop.swingx.JXGraph: double minY>;

        $d5 = $d4 - $d3;

        $d7 = $d6 * $d5;

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getHeight()>();

        $d8 = (double) $i1;

        $d9 = $d7 / $d8;

        $d10 = $d0 + $d9;

        return $d10;
    }

    protected void paintComponent(java.awt.Graphics)
    {
        java.awt.Graphics2D r2;
        java.awt.Graphics r1;
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r1 := @parameter0: java.awt.Graphics;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isVisible()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = (java.awt.Graphics2D) r1;

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void setupGraphics(java.awt.Graphics2D)>(r2);

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void paintBackground(java.awt.Graphics2D)>(r2);

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void drawGrid(java.awt.Graphics2D)>(r2);

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void drawAxis(java.awt.Graphics2D)>(r2);

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void drawPlots(java.awt.Graphics2D)>(r2);

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void drawLabels(java.awt.Graphics2D)>(r2);

        virtualinvoke r0.<org.jdesktop.swingx.JXGraph: void paintExtra(java.awt.Graphics2D)>(r2);

        return;
    }

    protected void paintExtra(java.awt.Graphics2D)
    {
        org.jdesktop.swingx.JXGraph r0;
        java.awt.Graphics2D r1;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r1 := @parameter0: java.awt.Graphics2D;

        return;
    }

    private void drawPlots(java.awt.Graphics2D)
    {
        java.awt.Color $r6;
        java.util.Iterator $r2;
        org.jdesktop.swingx.JXGraph$DrawablePlot r4;
        java.util.List $r1;
        java.awt.Graphics2D r5;
        org.jdesktop.swingx.JXGraph$Plot $r7;
        org.jdesktop.swingx.JXGraph r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r5 := @parameter0: java.awt.Graphics2D;

        $r1 = r0.<org.jdesktop.swingx.JXGraph: java.util.List plots>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jdesktop.swingx.JXGraph$DrawablePlot) $r3;

        $r6 = staticinvoke <org.jdesktop.swingx.JXGraph$DrawablePlot: java.awt.Color access$600(org.jdesktop.swingx.JXGraph$DrawablePlot)>(r4);

        virtualinvoke r5.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r6);

        $r7 = staticinvoke <org.jdesktop.swingx.JXGraph$DrawablePlot: org.jdesktop.swingx.JXGraph$Plot access$500(org.jdesktop.swingx.JXGraph$DrawablePlot)>(r4);

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void drawPlot(java.awt.Graphics2D,org.jdesktop.swingx.JXGraph$Plot)>(r5, $r7);

        goto label1;

     label2:
        return;
    }

    private void drawPlot(java.awt.Graphics2D, org.jdesktop.swingx.JXGraph$Plot)
    {
        byte $b1;
        java.awt.Graphics2D r3;
        int $i0, $i2;
        org.jdesktop.swingx.JXGraph$Plot r1;
        org.jdesktop.swingx.JXGraph r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        float f0, f1, f2, f3;
        java.awt.geom.GeneralPath $r4;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r3 := @parameter0: java.awt.Graphics2D;

        r1 := @parameter1: org.jdesktop.swingx.JXGraph$Plot;

        $d0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double xPixelToPosition(double)>(0.0);

        $d1 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph$Plot: double compute(double)>($d0);

        $d2 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double yPositionToPixel(double)>($d1);

        f1 = (float) $d2;

        $r4 = new java.awt.geom.GeneralPath;

        specialinvoke $r4.<java.awt.geom.GeneralPath: void <init>()>();

        virtualinvoke $r4.<java.awt.geom.GeneralPath: void moveTo(float,float)>(0.0F, f1);

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getWidth()>();

        f0 = (float) $i0;

        f2 = 0.0F;

     label1:
        $b1 = f2 cmpg f0;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label2;

        $d3 = (double) f2;

        $d4 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double xPixelToPosition(double)>($d3);

        $d5 = virtualinvoke r1.<org.jdesktop.swingx.JXGraph$Plot: double compute(double)>($d4);

        $d6 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double yPositionToPixel(double)>($d5);

        f3 = (float) $d6;

        virtualinvoke $r4.<java.awt.geom.GeneralPath: void lineTo(float,float)>(f2, f3);

        f2 = f2 + 1.0F;

        goto label1;

     label2:
        virtualinvoke r3.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r4);

        return;
    }

    private void drawGrid(java.awt.Graphics2D)
    {
        java.awt.Stroke $r1;
        java.awt.Graphics2D r0;
        org.jdesktop.swingx.JXGraph r2;
        boolean $z0;

        r2 := @this: org.jdesktop.swingx.JXGraph;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.Stroke getStroke()>();

        $z0 = virtualinvoke r2.<org.jdesktop.swingx.JXGraph: boolean isGridPainted()>();

        if $z0 == 0 goto label1;

        specialinvoke r2.<org.jdesktop.swingx.JXGraph: void drawVerticalGrid(java.awt.Graphics2D)>(r0);

        specialinvoke r2.<org.jdesktop.swingx.JXGraph: void drawHorizontalGrid(java.awt.Graphics2D)>(r0);

     label1:
        virtualinvoke r0.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r1);

        return;
    }

    private void drawLabels(java.awt.Graphics2D)
    {
        java.awt.Color $r2, $r13;
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r6, $r7, $r9;
        java.awt.BasicStroke $r12;
        java.awt.Graphics2D r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.String $r5, $r8, $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.awt.Stroke $r11;
        java.awt.FontMetrics $r3;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r1 := @parameter0: java.awt.Graphics2D;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isTextPainted()>();

        if $z0 == 0 goto label2;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double originY>;

        $d1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double yPositionToPixel(double)>($d0);

        $d2 = r0.<org.jdesktop.swingx.JXGraph: double originX>;

        $d3 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double xPositionToPixel(double)>($d2);

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isAxisPainted()>();

        if $z1 == 0 goto label1;

        $r11 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.Stroke getStroke()>();

        $r12 = new java.awt.BasicStroke;

        specialinvoke $r12.<java.awt.BasicStroke: void <init>(float)>(1.2F);

        virtualinvoke r1.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r12);

        $r13 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getAxisColor()>();

        virtualinvoke r1.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r13);

        $i5 = (int) $d3;

        $i10 = $i5 - 3;

        $i9 = (int) $d1;

        $i6 = (int) $d3;

        $i8 = $i6 + 3;

        $i7 = (int) $d1;

        virtualinvoke r1.<java.awt.Graphics2D: void drawLine(int,int,int,int)>($i10, $i9, $i8, $i7);

        $i16 = (int) $d3;

        $i11 = (int) $d1;

        $i15 = $i11 - 3;

        $i14 = (int) $d3;

        $i12 = (int) $d1;

        $i13 = $i12 + 3;

        virtualinvoke r1.<java.awt.Graphics2D: void drawLine(int,int,int,int)>($i16, $i15, $i14, $i13);

        virtualinvoke r1.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r11);

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getForeground()>();

        virtualinvoke r1.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r2);

        $r3 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $d4 = r0.<org.jdesktop.swingx.JXGraph: double originX>;

        $r5 = specialinvoke r0.<org.jdesktop.swingx.JXGraph: java.lang.String format(double)>($d4);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $d5 = r0.<org.jdesktop.swingx.JXGraph: double originY>;

        $r8 = specialinvoke r0.<org.jdesktop.swingx.JXGraph: java.lang.String format(double)>($d5);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = (int) $d3;

        $i1 = $i0 + 5;

        $i2 = (int) $d1;

        $i3 = virtualinvoke $r3.<java.awt.FontMetrics: int getHeight()>();

        $i4 = $i2 + $i3;

        virtualinvoke r1.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>($r10, $i1, $i4);

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void drawHorizontalAxisLabels(java.awt.Graphics2D)>(r1);

        specialinvoke r0.<org.jdesktop.swingx.JXGraph: void drawVerticalAxisLabels(java.awt.Graphics2D)>(r1);

     label2:
        return;
    }

    private void drawVerticalAxisLabels(java.awt.Graphics2D)
    {
        byte $b0, $b1, $b4;
        org.jdesktop.swingx.JXGraph r0;
        java.awt.Graphics2D r1;
        int $i2, $i3, $i5, $i6, $i7, $i8;
        java.lang.String $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, $d21;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r1 := @parameter0: java.awt.Graphics2D;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double originX>;

        $d1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double xPositionToPixel(double)>($d0);

        $d3 = r0.<org.jdesktop.swingx.JXGraph: double minY>;

        $d2 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        $d4 = $d3 / $d2;

        $d5 = staticinvoke <java.lang.Math: double floor(double)>($d4);

        $d6 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        d7 = $d5 * $d6;

        d20 = d7;

     label1:
        $d9 = r0.<org.jdesktop.swingx.JXGraph: double maxY>;

        $d8 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        $d10 = $d9 + $d8;

        $b0 = d20 cmpg $d10;

        $i6 = (int) $b0;

        if $i6 >= 0 goto label4;

        $d11 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        $d12 = $d11 / 2.0;

        $d14 = d20 - $d12;

        $d13 = r0.<org.jdesktop.swingx.JXGraph: double originY>;

        $b1 = $d14 cmpg $d13;

        $i7 = (int) $b1;

        if $i7 >= 0 goto label2;

        $d16 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        $d17 = $d16 / 2.0;

        $d19 = d20 + $d17;

        $d18 = r0.<org.jdesktop.swingx.JXGraph: double originY>;

        $b4 = $d19 cmpl $d18;

        $i8 = (int) $b4;

        if $i8 <= 0 goto label2;

        goto label3;

     label2:
        $d15 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double yPositionToPixel(double)>(d20);

        $i5 = (int) $d15;

        $r2 = specialinvoke r0.<org.jdesktop.swingx.JXGraph: java.lang.String format(double)>(d20);

        $i2 = (int) $d1;

        $i3 = $i2 + 5;

        virtualinvoke r1.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>($r2, $i3, $i5);

     label3:
        $d21 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        d20 = d20 + $d21;

        goto label1;

     label4:
        return;
    }

    private void drawHorizontalGrid(java.awt.Graphics2D)
    {
        java.awt.Color $r5, $r6, $r7, $r8;
        byte $b31;
        java.awt.BasicStroke $r9, $r10;
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0, $z1;
        java.awt.Rectangle $r4;
        java.awt.Graphics2D r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i32, i33, i34, $i35;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, $d18, $d19, $d20, $d21;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r3 := @parameter0: java.awt.Graphics2D;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getMinorCountY()>();

        $d1 = (double) $i0;

        d2 = $d0 / $d1;

        $d3 = r0.<org.jdesktop.swingx.JXGraph: double originX>;

        $d4 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double xPositionToPixel(double)>($d3);

        $r9 = new java.awt.BasicStroke;

        specialinvoke $r9.<java.awt.BasicStroke: void <init>(float)>(1.0F);

        $r10 = new java.awt.BasicStroke;

        specialinvoke $r10.<java.awt.BasicStroke: void <init>(float)>(1.2F);

        $r4 = virtualinvoke r3.<java.awt.Graphics2D: java.awt.Rectangle getClipBounds()>();

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isAxisPainted()>();

        if $z0 != 0 goto label1;

        $d10 = r0.<org.jdesktop.swingx.JXGraph: double originX>;

        $d11 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double xPositionToPixel(double)>($d10);

        i30 = (int) $d11;

        $i22 = $r4.<java.awt.Rectangle: int x>;

        if i30 < $i22 goto label1;

        $i24 = $r4.<java.awt.Rectangle: int x>;

        $i23 = $r4.<java.awt.Rectangle: int width>;

        $i25 = $i24 + $i23;

        if i30 > $i25 goto label1;

        $r8 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getMajorGridColor()>();

        virtualinvoke r3.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r8);

        $i29 = $r4.<java.awt.Rectangle: int y>;

        $i27 = $r4.<java.awt.Rectangle: int y>;

        $i26 = $r4.<java.awt.Rectangle: int height>;

        $i28 = $i27 + $i26;

        virtualinvoke r3.<java.awt.Graphics2D: void drawLine(int,int,int,int)>(i30, $i29, i30, $i28);

     label1:
        $d12 = r0.<org.jdesktop.swingx.JXGraph: double minY>;

        $d13 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        $d14 = $d12 / $d13;

        $d15 = staticinvoke <java.lang.Math: double floor(double)>($d14);

        $d16 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        d17 = $d15 * $d16;

     label2:
        $d18 = r0.<org.jdesktop.swingx.JXGraph: double maxY>;

        $d19 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        $d20 = $d18 + $d19;

        $b31 = d17 cmpg $d20;

        $i35 = (int) $b31;

        if $i35 >= 0 goto label7;

        virtualinvoke r3.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r9);

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getMinorGridColor()>();

        virtualinvoke r3.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r5);

        i32 = 0;

     label3:
        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getMinorCountY()>();

        if i32 >= $i1 goto label5;

        $d6 = (double) i32;

        $d7 = $d6 * d2;

        $d8 = d17 - $d7;

        $d9 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double yPositionToPixel(double)>($d8);

        i33 = (int) $d9;

        $i14 = $r4.<java.awt.Rectangle: int y>;

        if i33 < $i14 goto label4;

        $i16 = $r4.<java.awt.Rectangle: int y>;

        $i15 = $r4.<java.awt.Rectangle: int height>;

        $i17 = $i16 + $i15;

        if i33 > $i17 goto label4;

        $i21 = $r4.<java.awt.Rectangle: int x>;

        $i19 = $r4.<java.awt.Rectangle: int x>;

        $i18 = $r4.<java.awt.Rectangle: int width>;

        $i20 = $i19 + $i18;

        virtualinvoke r3.<java.awt.Graphics2D: void drawLine(int,int,int,int)>($i21, i33, $i20, i33);

     label4:
        i32 = i32 + 1;

        goto label3;

     label5:
        $d5 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double yPositionToPixel(double)>(d17);

        i34 = (int) $d5;

        $i2 = $r4.<java.awt.Rectangle: int y>;

        if i34 < $i2 goto label6;

        $i4 = $r4.<java.awt.Rectangle: int y>;

        $i3 = $r4.<java.awt.Rectangle: int height>;

        $i5 = $i4 + $i3;

        if i34 > $i5 goto label6;

        $r6 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getMajorGridColor()>();

        virtualinvoke r3.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r6);

        $i9 = $r4.<java.awt.Rectangle: int x>;

        $i7 = $r4.<java.awt.Rectangle: int x>;

        $i6 = $r4.<java.awt.Rectangle: int width>;

        $i8 = $i7 + $i6;

        virtualinvoke r3.<java.awt.Graphics2D: void drawLine(int,int,int,int)>($i9, i34, $i8, i34);

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isAxisPainted()>();

        if $z1 == 0 goto label6;

        virtualinvoke r3.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r10);

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getAxisColor()>();

        virtualinvoke r3.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r7);

        $i10 = (int) $d4;

        $i13 = $i10 - 3;

        $i11 = (int) $d4;

        $i12 = $i11 + 3;

        virtualinvoke r3.<java.awt.Graphics2D: void drawLine(int,int,int,int)>($i13, i34, $i12, i34);

     label6:
        $d21 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        d17 = d17 + $d21;

        goto label2;

     label7:
        return;
    }

    private void drawHorizontalAxisLabels(java.awt.Graphics2D)
    {
        byte $b0, $b1, $b5;
        org.jdesktop.swingx.JXGraph r0;
        java.awt.Graphics2D r1;
        int $i2, $i3, $i4, $i6, $i7, $i8, $i9;
        java.lang.String $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, $d21;
        java.awt.FontMetrics $r2;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r1 := @parameter0: java.awt.Graphics2D;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double originY>;

        $d1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double yPositionToPixel(double)>($d0);

        $r2 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics()>();

        $d3 = r0.<org.jdesktop.swingx.JXGraph: double minX>;

        $d2 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        $d4 = $d3 / $d2;

        $d5 = staticinvoke <java.lang.Math: double floor(double)>($d4);

        $d6 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        d7 = $d5 * $d6;

        d20 = d7;

     label1:
        $d9 = r0.<org.jdesktop.swingx.JXGraph: double maxX>;

        $d8 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        $d10 = $d9 + $d8;

        $b0 = d20 cmpg $d10;

        $i7 = (int) $b0;

        if $i7 >= 0 goto label4;

        $d11 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        $d12 = $d11 / 2.0;

        $d14 = d20 - $d12;

        $d13 = r0.<org.jdesktop.swingx.JXGraph: double originX>;

        $b1 = $d14 cmpg $d13;

        $i8 = (int) $b1;

        if $i8 >= 0 goto label2;

        $d16 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        $d17 = $d16 / 2.0;

        $d19 = d20 + $d17;

        $d18 = r0.<org.jdesktop.swingx.JXGraph: double originX>;

        $b5 = $d19 cmpl $d18;

        $i9 = (int) $b5;

        if $i9 <= 0 goto label2;

        goto label3;

     label2:
        $d15 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double xPositionToPixel(double)>(d20);

        $i6 = (int) $d15;

        $r3 = specialinvoke r0.<org.jdesktop.swingx.JXGraph: java.lang.String format(double)>(d20);

        $i2 = (int) $d1;

        $i3 = virtualinvoke $r2.<java.awt.FontMetrics: int getHeight()>();

        $i4 = $i2 + $i3;

        virtualinvoke r1.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>($r3, $i6, $i4);

     label3:
        $d21 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        d20 = d20 + $d21;

        goto label1;

     label4:
        return;
    }

    private void drawVerticalGrid(java.awt.Graphics2D)
    {
        java.awt.Color $r5, $r6, $r7, $r8;
        byte $b31;
        java.awt.BasicStroke $r9, $r10;
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0, $z1;
        java.awt.Rectangle $r4;
        java.awt.Graphics2D r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i32, i33, i34, $i35;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, $d18, $d19, $d20, $d21;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r3 := @parameter0: java.awt.Graphics2D;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getMinorCountX()>();

        $d1 = (double) $i0;

        d2 = $d0 / $d1;

        $d3 = r0.<org.jdesktop.swingx.JXGraph: double originY>;

        $d4 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double yPositionToPixel(double)>($d3);

        $r9 = new java.awt.BasicStroke;

        specialinvoke $r9.<java.awt.BasicStroke: void <init>(float)>(1.0F);

        $r10 = new java.awt.BasicStroke;

        specialinvoke $r10.<java.awt.BasicStroke: void <init>(float)>(1.2F);

        $r4 = virtualinvoke r3.<java.awt.Graphics2D: java.awt.Rectangle getClipBounds()>();

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isAxisPainted()>();

        if $z0 != 0 goto label1;

        $d10 = r0.<org.jdesktop.swingx.JXGraph: double originY>;

        $d11 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double yPositionToPixel(double)>($d10);

        i30 = (int) $d11;

        $i22 = $r4.<java.awt.Rectangle: int y>;

        if i30 < $i22 goto label1;

        $i24 = $r4.<java.awt.Rectangle: int y>;

        $i23 = $r4.<java.awt.Rectangle: int height>;

        $i25 = $i24 + $i23;

        if i30 > $i25 goto label1;

        $r8 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getMajorGridColor()>();

        virtualinvoke r3.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r8);

        $i29 = $r4.<java.awt.Rectangle: int x>;

        $i27 = $r4.<java.awt.Rectangle: int x>;

        $i26 = $r4.<java.awt.Rectangle: int width>;

        $i28 = $i27 + $i26;

        virtualinvoke r3.<java.awt.Graphics2D: void drawLine(int,int,int,int)>($i29, i30, $i28, i30);

     label1:
        $d12 = r0.<org.jdesktop.swingx.JXGraph: double minX>;

        $d13 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        $d14 = $d12 / $d13;

        $d15 = staticinvoke <java.lang.Math: double floor(double)>($d14);

        $d16 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        d17 = $d15 * $d16;

     label2:
        $d18 = r0.<org.jdesktop.swingx.JXGraph: double maxX>;

        $d19 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        $d20 = $d18 + $d19;

        $b31 = d17 cmpg $d20;

        $i35 = (int) $b31;

        if $i35 >= 0 goto label7;

        virtualinvoke r3.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r9);

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getMinorGridColor()>();

        virtualinvoke r3.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r5);

        i32 = 0;

     label3:
        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getMinorCountX()>();

        if i32 >= $i1 goto label5;

        $d6 = (double) i32;

        $d7 = $d6 * d2;

        $d8 = d17 - $d7;

        $d9 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double xPositionToPixel(double)>($d8);

        i33 = (int) $d9;

        $i14 = $r4.<java.awt.Rectangle: int x>;

        if i33 < $i14 goto label4;

        $i16 = $r4.<java.awt.Rectangle: int x>;

        $i15 = $r4.<java.awt.Rectangle: int width>;

        $i17 = $i16 + $i15;

        if i33 > $i17 goto label4;

        $i21 = $r4.<java.awt.Rectangle: int y>;

        $i19 = $r4.<java.awt.Rectangle: int y>;

        $i18 = $r4.<java.awt.Rectangle: int height>;

        $i20 = $i19 + $i18;

        virtualinvoke r3.<java.awt.Graphics2D: void drawLine(int,int,int,int)>(i33, $i21, i33, $i20);

     label4:
        i32 = i32 + 1;

        goto label3;

     label5:
        $d5 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double xPositionToPixel(double)>(d17);

        i34 = (int) $d5;

        $i2 = $r4.<java.awt.Rectangle: int x>;

        if i34 < $i2 goto label6;

        $i4 = $r4.<java.awt.Rectangle: int x>;

        $i3 = $r4.<java.awt.Rectangle: int width>;

        $i5 = $i4 + $i3;

        if i34 > $i5 goto label6;

        $r6 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getMajorGridColor()>();

        virtualinvoke r3.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r6);

        $i9 = $r4.<java.awt.Rectangle: int y>;

        $i7 = $r4.<java.awt.Rectangle: int y>;

        $i6 = $r4.<java.awt.Rectangle: int height>;

        $i8 = $i7 + $i6;

        virtualinvoke r3.<java.awt.Graphics2D: void drawLine(int,int,int,int)>(i34, $i9, i34, $i8);

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isAxisPainted()>();

        if $z1 == 0 goto label6;

        virtualinvoke r3.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r10);

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getAxisColor()>();

        virtualinvoke r3.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r7);

        $i10 = (int) $d4;

        $i13 = $i10 - 3;

        $i11 = (int) $d4;

        $i12 = $i11 + 3;

        virtualinvoke r3.<java.awt.Graphics2D: void drawLine(int,int,int,int)>(i34, $i13, i34, $i12);

     label6:
        $d21 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        d17 = d17 + $d21;

        goto label2;

     label7:
        return;
    }

    private void drawAxis(java.awt.Graphics2D)
    {
        java.awt.Color $r3;
        byte $b1, $b5, $b15, $b23;
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0;
        java.awt.BasicStroke $r6;
        java.awt.Rectangle $r2;
        java.awt.Graphics2D r1;
        int $i0, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.awt.Stroke $r4;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r1 := @parameter0: java.awt.Graphics2D;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isAxisPainted()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $d0 = r0.<org.jdesktop.swingx.JXGraph: double originY>;

        $d1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double yPositionToPixel(double)>($d0);

        $d2 = r0.<org.jdesktop.swingx.JXGraph: double originX>;

        $d3 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: double xPositionToPixel(double)>($d2);

        $r2 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.Rectangle getClipBounds()>();

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getAxisColor()>();

        virtualinvoke r1.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r3);

        $r4 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.Stroke getStroke()>();

        $r6 = new java.awt.BasicStroke;

        specialinvoke $r6.<java.awt.BasicStroke: void <init>(float)>(1.2F);

        virtualinvoke r1.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r6);

        $i0 = $r2.<java.awt.Rectangle: int y>;

        $d4 = (double) $i0;

        $b1 = $d1 cmpl $d4;

        $i24 = (int) $b1;

        if $i24 < 0 goto label2;

        $i13 = $r2.<java.awt.Rectangle: int y>;

        $i12 = $r2.<java.awt.Rectangle: int height>;

        $i14 = $i13 + $i12;

        $d6 = (double) $i14;

        $b15 = $d1 cmpg $d6;

        $i25 = (int) $b15;

        if $i25 > 0 goto label2;

        $i21 = $r2.<java.awt.Rectangle: int x>;

        $i20 = (int) $d1;

        $i17 = $r2.<java.awt.Rectangle: int x>;

        $i16 = $r2.<java.awt.Rectangle: int width>;

        $i19 = $i17 + $i16;

        $i18 = (int) $d1;

        virtualinvoke r1.<java.awt.Graphics2D: void drawLine(int,int,int,int)>($i21, $i20, $i19, $i18);

     label2:
        $i22 = $r2.<java.awt.Rectangle: int x>;

        $d7 = (double) $i22;

        $b23 = $d3 cmpl $d7;

        $i26 = (int) $b23;

        if $i26 < 0 goto label3;

        $i3 = $r2.<java.awt.Rectangle: int x>;

        $i2 = $r2.<java.awt.Rectangle: int width>;

        $i4 = $i3 + $i2;

        $d5 = (double) $i4;

        $b5 = $d3 cmpg $d5;

        $i27 = (int) $b5;

        if $i27 > 0 goto label3;

        $i11 = (int) $d3;

        $i10 = $r2.<java.awt.Rectangle: int y>;

        $i9 = (int) $d3;

        $i7 = $r2.<java.awt.Rectangle: int y>;

        $i6 = $r2.<java.awt.Rectangle: int height>;

        $i8 = $i7 + $i6;

        virtualinvoke r1.<java.awt.Graphics2D: void drawLine(int,int,int,int)>($i11, $i10, $i9, $i8);

     label3:
        virtualinvoke r1.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r4);

        return;
    }

    protected void setupGraphics(java.awt.Graphics2D)
    {
        java.awt.Graphics2D r0;
        java.awt.RenderingHints$Key $r2;
        java.lang.Object $r1;
        org.jdesktop.swingx.JXGraph r3;

        r3 := @this: org.jdesktop.swingx.JXGraph;

        r0 := @parameter0: java.awt.Graphics2D;

        $r2 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r1 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke r0.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r2, $r1);

        return;
    }

    protected void paintBackground(java.awt.Graphics2D)
    {
        java.awt.Color $r3;
        java.awt.Rectangle $r4;
        org.jdesktop.swingx.painter.Painter $r1;
        java.awt.Graphics2D r2;
        int $i0, $i1;
        org.jdesktop.swingx.JXGraph r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        r2 := @parameter0: java.awt.Graphics2D;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: boolean isBackgroundPainted()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: org.jdesktop.swingx.painter.Painter getBackgroundPainter()>();

        if $r1 == null goto label1;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getWidth()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: int getHeight()>();

        interfaceinvoke $r1.<org.jdesktop.swingx.painter.Painter: void paint(java.awt.Graphics2D,java.lang.Object,int,int)>(r2, r0, $i0, $i1);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXGraph: java.awt.Color getBackground()>();

        virtualinvoke r2.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r3);

        $r4 = virtualinvoke r2.<java.awt.Graphics2D: java.awt.Rectangle getClipBounds()>();

        virtualinvoke r2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r4);

     label2:
        return;
    }

    private java.lang.String format(double)
    {
        java.text.NumberFormat $r2;
        byte $b0, $b1, $b2;
        int $i3, $i4;
        org.jdesktop.swingx.JXGraph r0;
        java.lang.String $r1;
        double d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXGraph;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b2 = $d2 cmpg 0.01;

        $i3 = (int) $b2;

        if $i3 < 0 goto label2;

     label1:
        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b1 = $d1 cmpl 99.0;

        $i4 = (int) $b1;

        if $i4 <= 0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        $r2 = r0.<org.jdesktop.swingx.JXGraph: java.text.NumberFormat secondFormatter>;

        goto label6;

     label5:
        $r2 = r0.<org.jdesktop.swingx.JXGraph: java.text.NumberFormat mainFormatter>;

     label6:
        $r1 = virtualinvoke $r2.<java.text.NumberFormat: java.lang.String format(double)>(d0);

        return $r1;
    }

    static double access$700(org.jdesktop.swingx.JXGraph)
    {
        org.jdesktop.swingx.JXGraph r0;
        double $d0;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double maxX>;

        return $d0;
    }

    static double access$800(org.jdesktop.swingx.JXGraph)
    {
        org.jdesktop.swingx.JXGraph r0;
        double $d0;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double minX>;

        return $d0;
    }

    static double access$900(org.jdesktop.swingx.JXGraph)
    {
        org.jdesktop.swingx.JXGraph r0;
        double $d0;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double maxY>;

        return $d0;
    }

    static double access$1000(org.jdesktop.swingx.JXGraph)
    {
        org.jdesktop.swingx.JXGraph r0;
        double $d0;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        $d0 = r0.<org.jdesktop.swingx.JXGraph: double minY>;

        return $d0;
    }

    static double access$1142(org.jdesktop.swingx.JXGraph, double)
    {
        org.jdesktop.swingx.JXGraph r0;
        double d0, $d1, $d2;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        d0 := @parameter1: double;

        $d1 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        $d2 = $d1 / d0;

        r0.<org.jdesktop.swingx.JXGraph: double majorX> = $d2;

        return $d2;
    }

    static double access$1242(org.jdesktop.swingx.JXGraph, double)
    {
        org.jdesktop.swingx.JXGraph r0;
        double d0, $d1, $d2;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        d0 := @parameter1: double;

        $d1 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        $d2 = $d1 / d0;

        r0.<org.jdesktop.swingx.JXGraph: double majorY> = $d2;

        return $d2;
    }

    static double access$1134(org.jdesktop.swingx.JXGraph, double)
    {
        org.jdesktop.swingx.JXGraph r0;
        double d0, $d1, $d2;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        d0 := @parameter1: double;

        $d1 = r0.<org.jdesktop.swingx.JXGraph: double majorX>;

        $d2 = $d1 * d0;

        r0.<org.jdesktop.swingx.JXGraph: double majorX> = $d2;

        return $d2;
    }

    static double access$1234(org.jdesktop.swingx.JXGraph, double)
    {
        org.jdesktop.swingx.JXGraph r0;
        double d0, $d1, $d2;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        d0 := @parameter1: double;

        $d1 = r0.<org.jdesktop.swingx.JXGraph: double majorY>;

        $d2 = $d1 * d0;

        r0.<org.jdesktop.swingx.JXGraph: double majorY> = $d2;

        return $d2;
    }

    static double access$802(org.jdesktop.swingx.JXGraph, double)
    {
        org.jdesktop.swingx.JXGraph r0;
        double d0;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        d0 := @parameter1: double;

        r0.<org.jdesktop.swingx.JXGraph: double minX> = d0;

        return d0;
    }

    static double access$702(org.jdesktop.swingx.JXGraph, double)
    {
        org.jdesktop.swingx.JXGraph r0;
        double d0;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        d0 := @parameter1: double;

        r0.<org.jdesktop.swingx.JXGraph: double maxX> = d0;

        return d0;
    }

    static double access$1002(org.jdesktop.swingx.JXGraph, double)
    {
        org.jdesktop.swingx.JXGraph r0;
        double d0;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        d0 := @parameter1: double;

        r0.<org.jdesktop.swingx.JXGraph: double minY> = d0;

        return d0;
    }

    static double access$902(org.jdesktop.swingx.JXGraph, double)
    {
        org.jdesktop.swingx.JXGraph r0;
        double d0;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        d0 := @parameter1: double;

        r0.<org.jdesktop.swingx.JXGraph: double maxY> = d0;

        return d0;
    }

    static java.awt.Point access$1302(org.jdesktop.swingx.JXGraph, java.awt.Point)
    {
        org.jdesktop.swingx.JXGraph r0;
        java.awt.Point r1;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        r1 := @parameter1: java.awt.Point;

        r0.<org.jdesktop.swingx.JXGraph: java.awt.Point dragStart> = r1;

        return r1;
    }

    static java.awt.Point access$1300(org.jdesktop.swingx.JXGraph)
    {
        org.jdesktop.swingx.JXGraph r0;
        java.awt.Point $r1;

        r0 := @parameter0: org.jdesktop.swingx.JXGraph;

        $r1 = r0.<org.jdesktop.swingx.JXGraph: java.awt.Point dragStart>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.jdesktop.swingx.JXGraph: float ZOOM_MULTIPLIER> = 1.1F;

        <org.jdesktop.swingx.JXGraph: float STROKE_GRID> = 1.0F;

        <org.jdesktop.swingx.JXGraph: float STROKE_AXIS> = 1.2F;

        return;
    }
}
