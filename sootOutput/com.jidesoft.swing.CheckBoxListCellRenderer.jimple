public class com.jidesoft.swing.CheckBoxListCellRenderer extends javax.swing.JPanel implements javax.swing.ListCellRenderer, java.io.Serializable
{
    private static final long serialVersionUID;
    protected javax.swing.AbstractButton _checkBox;
    protected javax.swing.JLabel _label;
    protected javax.swing.ListCellRenderer _actualListRenderer;

    public void <init>(javax.swing.ListCellRenderer)
    {
        com.jidesoft.swing.NullLabel $r2;
        com.jidesoft.swing.CheckBoxListCellRenderer r0;
        javax.swing.border.Border $r4;
        javax.swing.ListCellRenderer r8;
        com.jidesoft.swing.NullCheckBox $r1;
        javax.swing.AbstractButton $r3, $r5, $r7;
        java.awt.BorderLayout $r6;

        r0 := @this: com.jidesoft.swing.CheckBoxListCellRenderer;

        r8 := @parameter0: javax.swing.ListCellRenderer;

        specialinvoke r0.<javax.swing.JPanel: void <init>()>();

        $r1 = new com.jidesoft.swing.NullCheckBox;

        specialinvoke $r1.<com.jidesoft.swing.NullCheckBox: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox> = $r1;

        $r2 = new com.jidesoft.swing.NullLabel;

        specialinvoke $r2.<com.jidesoft.swing.NullLabel: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.JLabel _label> = $r2;

        $r3 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox>;

        $r4 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>(0, 2, 0, 2);

        virtualinvoke $r3.<javax.swing.AbstractButton: void setBorder(javax.swing.border.Border)>($r4);

        $r5 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox>;

        virtualinvoke $r5.<javax.swing.AbstractButton: void setOpaque(boolean)>(0);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setOpaque(boolean)>(1);

        $r6 = new java.awt.BorderLayout;

        specialinvoke $r6.<java.awt.BorderLayout: void <init>(int,int)>(0, 0);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setLayout(java.awt.LayoutManager)>($r6);

        $r7 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void add(java.awt.Component,java.lang.Object)>($r7, "Before");

        r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.ListCellRenderer _actualListRenderer> = r8;

        return;
    }

    public void <init>()
    {
        com.jidesoft.swing.CheckBoxListCellRenderer r0;

        r0 := @this: com.jidesoft.swing.CheckBoxListCellRenderer;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void <init>(javax.swing.ListCellRenderer)>(null);

        return;
    }

    public javax.swing.ListCellRenderer getActualListRenderer()
    {
        javax.swing.ListCellRenderer $r1;
        com.jidesoft.swing.CheckBoxListCellRenderer r0;

        r0 := @this: com.jidesoft.swing.CheckBoxListCellRenderer;

        $r1 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.ListCellRenderer _actualListRenderer>;

        return $r1;
    }

    public void setActualListRenderer(javax.swing.ListCellRenderer)
    {
        javax.swing.ListCellRenderer r1;
        com.jidesoft.swing.CheckBoxListCellRenderer r0;

        r0 := @this: com.jidesoft.swing.CheckBoxListCellRenderer;

        r1 := @parameter0: javax.swing.ListCellRenderer;

        r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.ListCellRenderer _actualListRenderer> = r1;

        return;
    }

    public java.lang.String getToolTipText(java.awt.event.MouseEvent)
    {
        java.awt.Point $r4;
        long $l3;
        com.jidesoft.swing.CheckBoxListCellRenderer r0;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7;
        java.lang.String $r3, $r11;
        javax.swing.AbstractButton $r5;
        boolean $z0, $z1;
        javax.swing.JComponent $r8, $r10;
        java.awt.event.MouseEvent r2, $r6;
        javax.swing.ListCellRenderer $r1, $r7, $r9;

        r0 := @this: com.jidesoft.swing.CheckBoxListCellRenderer;

        r2 := @parameter0: java.awt.event.MouseEvent;

        $r1 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.ListCellRenderer _actualListRenderer>;

        $z0 = $r1 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r2.<java.awt.event.MouseEvent: java.awt.Point getPoint()>();

        $r5 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox>;

        $i0 = virtualinvoke $r5.<javax.swing.AbstractButton: int getWidth()>();

        $i1 = neg $i0;

        virtualinvoke $r4.<java.awt.Point: void translate(int,int)>($i1, 0);

        $r6 = new java.awt.event.MouseEvent;

        $r7 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.ListCellRenderer _actualListRenderer>;

        $r8 = (javax.swing.JComponent) $r7;

        $i2 = virtualinvoke r2.<java.awt.event.MouseEvent: int getID()>();

        $l3 = virtualinvoke r2.<java.awt.event.MouseEvent: long getWhen()>();

        $i4 = virtualinvoke r2.<java.awt.event.MouseEvent: int getModifiers()>();

        $i5 = $r4.<java.awt.Point: int x>;

        $i6 = $r4.<java.awt.Point: int y>;

        $i7 = virtualinvoke r2.<java.awt.event.MouseEvent: int getClickCount()>();

        $z1 = virtualinvoke r2.<java.awt.event.MouseEvent: boolean isPopupTrigger()>();

        specialinvoke $r6.<java.awt.event.MouseEvent: void <init>(java.awt.Component,int,long,int,int,int,int,boolean)>($r8, $i2, $l3, $i4, $i5, $i6, $i7, $z1);

        $r9 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.ListCellRenderer _actualListRenderer>;

        $r10 = (javax.swing.JComponent) $r9;

        $r11 = virtualinvoke $r10.<javax.swing.JComponent: java.lang.String getToolTipText(java.awt.event.MouseEvent)>($r6);

        if $r11 == null goto label1;

        return $r11;

     label1:
        $r3 = specialinvoke r0.<javax.swing.JPanel: java.lang.String getToolTipText(java.awt.event.MouseEvent)>(r2);

        return $r3;
    }

    public java.awt.Component getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean)
    {
        java.awt.Color $r6, $r7, $r10, $r11, $r16, $r17, $r27, $r28, $r31, $r32, $r37, $r38, $r39;
        com.jidesoft.swing.CheckBoxListSelectionModel $r36;
        javax.swing.border.Border $r14, $r15;
        java.awt.Component $r13;
        com.jidesoft.swing.CheckBoxListCellRenderer r0;
        com.jidesoft.swing.DefaultSelectable $r26;
        javax.swing.AbstractButton $r18, $r30, $r42, $r43, $r45, $r46;
        java.lang.String $r23, $r24;
        java.awt.ComponentOrientation $r2;
        java.util.Locale $r3, $r21;
        boolean $z0, $z1, $z2, $z3, z4, z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z20, $z21, z23, $z24, $z25, $z26, $z27, $z28;
        java.awt.Font $r9;
        com.jidesoft.swing.CheckBoxListWithSelectable $r20, $r34;
        com.jidesoft.swing.Selectable $r29, $r33;
        int $i0, i1, $i2;
        javax.swing.JComponent r48;
        com.jidesoft.swing.CheckBoxList $r19, $r35, $r40, $r41;
        javax.swing.JList r1;
        java.lang.IllegalArgumentException $r4;
        javax.swing.ListCellRenderer $r12, $r47;
        javax.swing.JLabel $r8, $r22, $r25;
        java.lang.Object r5, r44;

        r0 := @this: com.jidesoft.swing.CheckBoxListCellRenderer;

        r1 := @parameter0: javax.swing.JList;

        r5 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        z4 := @parameter3: boolean;

        z5 := @parameter4: boolean;

        $r2 = virtualinvoke r1.<javax.swing.JList: java.awt.ComponentOrientation getComponentOrientation()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void applyComponentOrientation(java.awt.ComponentOrientation)>($r2);

        $r3 = virtualinvoke r1.<javax.swing.JList: java.util.Locale getLocale()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setLocale(java.util.Locale)>($r3);

        $z0 = r1 instanceof com.jidesoft.swing.CheckBoxList;

        if $z0 == 0 goto label05;

        $r35 = (com.jidesoft.swing.CheckBoxList) r1;

        $r36 = virtualinvoke $r35.<com.jidesoft.swing.CheckBoxList: com.jidesoft.swing.CheckBoxListSelectionModel getCheckBoxListSelectionModel()>();

        if $r36 == null goto label04;

        $z16 = virtualinvoke r1.<javax.swing.JList: boolean isEnabled()>();

        if $z16 == 0 goto label01;

        $r40 = (com.jidesoft.swing.CheckBoxList) r1;

        $z17 = virtualinvoke $r40.<com.jidesoft.swing.CheckBoxList: boolean isCheckBoxEnabled()>();

        if $z17 == 0 goto label01;

        $r41 = (com.jidesoft.swing.CheckBoxList) r1;

        $z18 = virtualinvoke $r41.<com.jidesoft.swing.CheckBoxList: boolean isCheckBoxEnabled(int)>(i1);

        if $z18 == 0 goto label01;

        $z26 = 1;

        $z25 = 1;

        goto label02;

     label01:
        $z26 = 0;

        $z25 = 0;

     label02:
        z20 = $z25;

        if $z26 != 0 goto label03;

        if z4 != 0 goto label03;

        $r37 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: java.awt.Color getBackground()>();

        if $r37 == null goto label03;

        $r38 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: java.awt.Color getBackground()>();

        $r39 = virtualinvoke $r38.<java.awt.Color: java.awt.Color darker()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setForeground(java.awt.Color)>($r39);

     label03:
        $r42 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox>;

        virtualinvoke $r42.<javax.swing.AbstractButton: void setEnabled(boolean)>(z20);

        $r43 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox>;

        $z21 = virtualinvoke $r36.<com.jidesoft.swing.CheckBoxListSelectionModel: boolean isSelectedIndex(int)>(i1);

        virtualinvoke $r43.<javax.swing.AbstractButton: void setSelected(boolean)>($z21);

     label04:
        r44 = r5;

        goto label14;

     label05:
        $z1 = r1 instanceof com.jidesoft.swing.CheckBoxListWithSelectable;

        if $z1 == 0 goto label13;

        $z2 = r5 instanceof com.jidesoft.swing.Selectable;

        if $z2 == 0 goto label09;

        $r30 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox>;

        $r29 = (com.jidesoft.swing.Selectable) r5;

        $z12 = interfaceinvoke $r29.<com.jidesoft.swing.Selectable: boolean isSelected()>();

        virtualinvoke $r30.<javax.swing.AbstractButton: void setSelected(boolean)>($z12);

        $z13 = virtualinvoke r1.<javax.swing.JList: boolean isEnabled()>();

        if $z13 == 0 goto label06;

        $r33 = (com.jidesoft.swing.Selectable) r5;

        $z14 = interfaceinvoke $r33.<com.jidesoft.swing.Selectable: boolean isEnabled()>();

        if $z14 == 0 goto label06;

        $r34 = (com.jidesoft.swing.CheckBoxListWithSelectable) r1;

        $z15 = virtualinvoke $r34.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean isCheckBoxEnabled()>();

        if $z15 == 0 goto label06;

        $z28 = 1;

        $z27 = 1;

        goto label07;

     label06:
        $z28 = 0;

        $z27 = 0;

     label07:
        z23 = $z27;

        if $z28 != 0 goto label08;

        if z4 != 0 goto label08;

        $r31 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: java.awt.Color getBackground()>();

        $r32 = virtualinvoke $r31.<java.awt.Color: java.awt.Color darker()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setForeground(java.awt.Color)>($r32);

     label08:
        $r45 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox>;

        virtualinvoke $r45.<javax.swing.AbstractButton: void setEnabled(boolean)>(z23);

        goto label11;

     label09:
        $z3 = virtualinvoke r1.<javax.swing.JList: boolean isEnabled()>();

        if $z3 != 0 goto label10;

        if z4 != 0 goto label10;

        $r27 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: java.awt.Color getBackground()>();

        $r28 = virtualinvoke $r27.<java.awt.Color: java.awt.Color darker()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setForeground(java.awt.Color)>($r28);

     label10:
        $r46 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox>;

        virtualinvoke $r46.<javax.swing.AbstractButton: void setEnabled(boolean)>($z3);

     label11:
        $z24 = r5 instanceof com.jidesoft.swing.DefaultSelectable;

        if $z24 == 0 goto label12;

        $r26 = (com.jidesoft.swing.DefaultSelectable) r5;

        r44 = virtualinvoke $r26.<com.jidesoft.swing.DefaultSelectable: java.lang.Object getObject()>();

        goto label14;

     label12:
        r44 = r5;

        goto label14;

     label13:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CheckBoxListCellRenderer should only be used for CheckBoxList.");

        throw $r4;

     label14:
        $r47 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.ListCellRenderer _actualListRenderer>;

        if $r47 == null goto label19;

        $r12 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.ListCellRenderer _actualListRenderer>;

        $r13 = interfaceinvoke $r12.<javax.swing.ListCellRenderer: java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)>(r1, r44, i1, z4, z5);

        r48 = (javax.swing.JComponent) $r13;

        $z6 = r48 instanceof javax.swing.JLabel;

        if $z6 == 0 goto label15;

        $r21 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: java.util.Locale getLocale()>();

        $r22 = (javax.swing.JLabel) r48;

        $r23 = virtualinvoke $r22.<javax.swing.JLabel: java.lang.String getText()>();

        $r24 = specialinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: java.lang.String convertElementToString(java.util.Locale,java.lang.Object)>($r21, $r23);

        $r25 = (javax.swing.JLabel) r48;

        virtualinvoke $r25.<javax.swing.JLabel: void setText(java.lang.String)>($r24);

     label15:
        $z7 = r1 instanceof com.jidesoft.swing.CheckBoxListWithSelectable;

        if $z7 == 0 goto label16;

        $r20 = (com.jidesoft.swing.CheckBoxListWithSelectable) r1;

        $z11 = virtualinvoke $r20.<com.jidesoft.swing.CheckBoxListWithSelectable: boolean isCheckBoxVisible(int)>(i1);

        if $z11 != 0 goto label16;

        return r48;

     label16:
        $z8 = r1 instanceof com.jidesoft.swing.CheckBoxList;

        if $z8 == 0 goto label17;

        $r19 = (com.jidesoft.swing.CheckBoxList) r1;

        $z10 = virtualinvoke $r19.<com.jidesoft.swing.CheckBoxList: boolean isCheckBoxVisible(int)>(i1);

        if $z10 != 0 goto label17;

        return r48;

     label17:
        $r14 = virtualinvoke r48.<javax.swing.JComponent: javax.swing.border.Border getBorder()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setBorder(javax.swing.border.Border)>($r14);

        $r15 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder()>();

        virtualinvoke r48.<javax.swing.JComponent: void setBorder(javax.swing.border.Border)>($r15);

        $i2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: int getComponentCount()>();

        if $i2 != 2 goto label18;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void remove(int)>(1);

     label18:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: java.awt.Component add(java.awt.Component)>(r48);

        $r16 = virtualinvoke r48.<javax.swing.JComponent: java.awt.Color getBackground()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setBackground(java.awt.Color)>($r16);

        virtualinvoke r48.<javax.swing.JComponent: void setBackground(java.awt.Color)>(null);

        $r17 = virtualinvoke r48.<javax.swing.JComponent: java.awt.Color getForeground()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setForeground(java.awt.Color)>($r17);

        virtualinvoke r48.<javax.swing.JComponent: void setForeground(java.awt.Color)>(null);

        $r18 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.AbstractButton _checkBox>;

        $z9 = virtualinvoke $r18.<javax.swing.AbstractButton: boolean isEnabled()>();

        virtualinvoke r48.<javax.swing.JComponent: void setEnabled(boolean)>($z9);

        goto label23;

     label19:
        if z4 == 0 goto label20;

        $r10 = virtualinvoke r1.<javax.swing.JList: java.awt.Color getSelectionBackground()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setBackground(java.awt.Color)>($r10);

        $r11 = virtualinvoke r1.<javax.swing.JList: java.awt.Color getSelectionForeground()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setForeground(java.awt.Color)>($r11);

        goto label21;

     label20:
        $r6 = virtualinvoke r1.<javax.swing.JList: java.awt.Color getBackground()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setBackground(java.awt.Color)>($r6);

        $r7 = virtualinvoke r1.<javax.swing.JList: java.awt.Color getForeground()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setForeground(java.awt.Color)>($r7);

     label21:
        $i0 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: int getComponentCount()>();

        if $i0 != 2 goto label22;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void remove(int)>(1);

     label22:
        $r8 = r0.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.JLabel _label>;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: java.awt.Component add(java.awt.Component)>($r8);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void customizeDefaultCellRenderer(java.lang.Object)>(r44);

        $r9 = virtualinvoke r1.<javax.swing.JList: java.awt.Font getFont()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxListCellRenderer: void setFont(java.awt.Font)>($r9);

     label23:
        return r0;
    }

    private java.lang.String convertElementToString(java.util.Locale, java.lang.Object)
    {
        com.jidesoft.swing.CheckBoxListCellRenderer r5;
        java.util.ResourceBundle $r3;
        java.util.Locale r2;
        java.lang.Object r0, $r1;
        java.lang.String $r4, $r6;
        boolean $z0;

        r5 := @this: com.jidesoft.swing.CheckBoxListCellRenderer;

        r2 := @parameter0: java.util.Locale;

        r0 := @parameter1: java.lang.Object;

        $r1 = <com.jidesoft.swing.CheckBoxList: java.lang.Object ALL_ENTRY>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.jidesoft.swing.Resource: java.util.ResourceBundle getResourceBundle(java.util.Locale)>(r2);

        $r4 = virtualinvoke $r3.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("CheckBoxList.all");

        return $r4;

     label1:
        if r0 != null goto label2;

        $r6 = "";

        goto label3;

     label2:
        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label3:
        return $r6;
    }

    protected void customizeDefaultCellRenderer(java.lang.Object)
    {
        javax.swing.Icon $r6;
        com.jidesoft.swing.CheckBoxListCellRenderer r1;
        javax.swing.JLabel $r2, $r3, $r7, $r8;
        java.util.Locale $r4;
        java.lang.Object r0;
        java.lang.String $r5;
        boolean $z0;

        r1 := @this: com.jidesoft.swing.CheckBoxListCellRenderer;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof javax.swing.Icon;

        if $z0 == 0 goto label1;

        $r7 = r1.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.JLabel _label>;

        $r6 = (javax.swing.Icon) r0;

        virtualinvoke $r7.<javax.swing.JLabel: void setIcon(javax.swing.Icon)>($r6);

        $r8 = r1.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.JLabel _label>;

        virtualinvoke $r8.<javax.swing.JLabel: void setText(java.lang.String)>("");

        goto label2;

     label1:
        $r2 = r1.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.JLabel _label>;

        virtualinvoke $r2.<javax.swing.JLabel: void setIcon(javax.swing.Icon)>(null);

        $r3 = r1.<com.jidesoft.swing.CheckBoxListCellRenderer: javax.swing.JLabel _label>;

        $r4 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxListCellRenderer: java.util.Locale getLocale()>();

        $r5 = specialinvoke r1.<com.jidesoft.swing.CheckBoxListCellRenderer: java.lang.String convertElementToString(java.util.Locale,java.lang.Object)>($r4, r0);

        virtualinvoke $r3.<javax.swing.JLabel: void setText(java.lang.String)>($r5);

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.jidesoft.swing.CheckBoxListCellRenderer: long serialVersionUID> = 2003073492549917883L;

        return;
    }
}
