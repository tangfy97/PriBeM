public class nu.xom.xinclude.XIncluder extends java.lang.Object
{
    private static java.lang.String version;
    public static final java.lang.String XINCLUDE_NS;

    private void <init>()
    {
        nu.xom.xinclude.XIncluder r0;

        r0 := @this: nu.xom.xinclude.XIncluder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static nu.xom.Document resolve(nu.xom.Document) throws nu.xom.xinclude.BadParseAttributeException, nu.xom.xinclude.InclusionLoopException, java.io.IOException, nu.xom.xinclude.NoIncludeLocationException, nu.xom.ParsingException, java.io.UnsupportedEncodingException, nu.xom.xinclude.XIncludeException
    {
        nu.xom.Builder $r0;
        nu.xom.Document r1, $r2;

        r1 := @parameter0: nu.xom.Document;

        $r0 = new nu.xom.Builder;

        specialinvoke $r0.<nu.xom.Builder: void <init>()>();

        $r2 = staticinvoke <nu.xom.xinclude.XIncluder: nu.xom.Document resolve(nu.xom.Document,nu.xom.Builder)>(r1, $r0);

        return $r2;
    }

    public static nu.xom.Document resolve(nu.xom.Document, nu.xom.Builder) throws nu.xom.xinclude.BadParseAttributeException, nu.xom.xinclude.InclusionLoopException, java.io.IOException, nu.xom.xinclude.NoIncludeLocationException, nu.xom.ParsingException, java.io.UnsupportedEncodingException, nu.xom.xinclude.XIncludeException
    {
        nu.xom.Builder r2;
        nu.xom.Document $r0, r1;

        r1 := @parameter0: nu.xom.Document;

        r2 := @parameter1: nu.xom.Builder;

        $r0 = new nu.xom.Document;

        specialinvoke $r0.<nu.xom.Document: void <init>(nu.xom.Document)>(r1);

        staticinvoke <nu.xom.xinclude.XIncluder: void resolveInPlace(nu.xom.Document,nu.xom.Builder)>($r0, r2);

        return $r0;
    }

    public static void resolveInPlace(nu.xom.Document) throws nu.xom.xinclude.BadParseAttributeException, nu.xom.xinclude.InclusionLoopException, java.io.IOException, nu.xom.xinclude.NoIncludeLocationException, nu.xom.ParsingException, java.io.UnsupportedEncodingException, nu.xom.xinclude.XIncludeException
    {
        nu.xom.Builder $r1;
        nu.xom.Document r0;

        r0 := @parameter0: nu.xom.Document;

        $r1 = new nu.xom.Builder;

        specialinvoke $r1.<nu.xom.Builder: void <init>()>();

        staticinvoke <nu.xom.xinclude.XIncluder: void resolveInPlace(nu.xom.Document,nu.xom.Builder)>(r0, $r1);

        return;
    }

    public static void resolveInPlace(nu.xom.Document, nu.xom.Builder) throws nu.xom.xinclude.BadParseAttributeException, nu.xom.xinclude.InclusionLoopException, java.io.IOException, nu.xom.xinclude.NoIncludeLocationException, nu.xom.ParsingException, java.io.UnsupportedEncodingException, nu.xom.xinclude.XIncludeException
    {
        nu.xom.Builder r2;
        nu.xom.Document r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: nu.xom.Document;

        r2 := @parameter1: nu.xom.Builder;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <nu.xom.xinclude.XIncluder: void resolveInPlace(nu.xom.Document,nu.xom.Builder,java.util.ArrayList)>(r1, r2, $r0);

        return;
    }

    private static void resolveInPlace(nu.xom.Document, nu.xom.Builder, java.util.ArrayList) throws java.io.IOException, nu.xom.ParsingException, nu.xom.xinclude.XIncludeException
    {
        nu.xom.Builder r3;
        nu.xom.Element $r9;
        java.util.ArrayList r2;
        java.lang.StringBuffer $r4, $r5, $r7;
        int $i0, $i1;
        java.lang.String $r1, $r6, r8;
        nu.xom.Document r0;
        boolean $z0;

        r0 := @parameter0: nu.xom.Document;

        r3 := @parameter1: nu.xom.Builder;

        r2 := @parameter2: java.util.ArrayList;

        $r1 = virtualinvoke r0.<nu.xom.Document: java.lang.String getBaseURI()>();

        r8 = $r1;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("file:///");

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("file:/");

        $r6 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(8);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

        $r9 = virtualinvoke r0.<nu.xom.Document: nu.xom.Element getRootElement()>();

        staticinvoke <nu.xom.xinclude.XIncluder: void resolve(nu.xom.Element,nu.xom.Builder,java.util.ArrayList)>($r9, r3, r2);

        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        return;
    }

    private static void resolve(nu.xom.Element, nu.xom.Builder, java.util.ArrayList) throws java.io.IOException, nu.xom.ParsingException, nu.xom.xinclude.XIncludeException
    {
        nu.xom.Builder r1;
        nu.xom.Element r0;
        java.util.ArrayList r2;

        r0 := @parameter0: nu.xom.Element;

        r1 := @parameter1: nu.xom.Builder;

        r2 := @parameter2: java.util.ArrayList;

        staticinvoke <nu.xom.xinclude.XIncluder: void resolve(nu.xom.Element,nu.xom.Builder,java.util.ArrayList,nu.xom.Document)>(r0, r1, r2, null);

        return;
    }

    private static void resolve(nu.xom.Element, nu.xom.Builder, java.util.ArrayList, nu.xom.Document) throws java.io.IOException, nu.xom.ParsingException, nu.xom.xinclude.XIncludeException
    {
        nu.xom.xinclude.MisplacedFallbackException $r5;
        nu.xom.MalformedURIException $r52;
        nu.xom.Node $r24, $r30, $r33, $r34, $r35, $r37, $r41;
        nu.xom.xinclude.XPointerResourceException $r49;
        nu.xom.Element r0, $r2, $r26, $r31, $r32, $r36, $r46, $r47;
        java.util.ArrayList r4;
        java.lang.StringBuffer $r17, $r18, $r19, $r55, $r56, $r57, $r58, $r59;
        nu.xom.Nodes $r23, $r28, $r29, $r40, r69;
        java.lang.String $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r20, $r22, $r42, $r43, $r45, $r60, r62, r63, $r66, $r67, r68, r70, r71;
        nu.xom.ParentNode $r13;
        nu.xom.xinclude.BadParseAttributeException $r16;
        java.io.IOException $r51;
        nu.xom.Builder r3;
        java.net.URL $r15, $r48, r64, r65;
        nu.xom.xinclude.XPointerSyntaxException $r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        nu.xom.xinclude.InclusionLoopException $r38;
        nu.xom.xinclude.BadHrefAttributeException $r53, $r54;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, $i18, i19, i20, i21, i22, i23;
        java.net.MalformedURLException $r61;
        nu.xom.Attribute $r25, $r44;
        nu.xom.Elements $r1;
        nu.xom.Document $r6, $r21, $r27, r39, r72, r73;

        r0 := @parameter0: nu.xom.Element;

        r3 := @parameter1: nu.xom.Builder;

        r4 := @parameter2: java.util.ArrayList;

        r39 := @parameter3: nu.xom.Document;

        $z0 = staticinvoke <nu.xom.xinclude.XIncluder: boolean isIncludeElement(nu.xom.Element)>(r0);

        if $z0 == 0 goto label46;

        staticinvoke <nu.xom.xinclude.XIncluder: void verifyIncludeElement(nu.xom.Element)>(r0);

        $r8 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("parse");

        r62 = $r8;

        if $r8 != null goto label01;

        r62 = "xml";

     label01:
        $r9 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("xpointer");

        $r10 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("encoding");

        $r11 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("href");

        r63 = $r11;

        $r12 = "";

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label02;

        r63 = null;

     label02:
        $r13 = virtualinvoke r0.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        $r14 = virtualinvoke r0.<nu.xom.Element: java.lang.String getBaseURI()>();

        r64 = null;

     label03:
        $r15 = new java.net.URL;

        specialinvoke $r15.<java.net.URL: void <init>(java.lang.String)>($r14);

        r64 = $r15;

     label04:
        goto label06;

     label05:
        $r61 := @caughtexception;

     label06:
        r65 = null;

     label07:
        if r64 == null goto label08;

        if r63 == null goto label08;

        r65 = staticinvoke <nu.xom.xinclude.XIncluder: java.net.URL absolutize(java.net.URL,java.lang.String)>(r64, r63);

        goto label13;

     label08:
        if r63 == null goto label13;

     label09:
        staticinvoke <nu.xom.xinclude.XIncluder: void testURISyntax(java.lang.String)>(r63);

        $r48 = new java.net.URL;

        specialinvoke $r48.<java.net.URL: void <init>(java.lang.String)>(r63);

        r65 = $r48;

     label10:
        goto label13;

     label11:
        $r52 := @caughtexception;

        if r64 != null goto label12;

        $r54 = new nu.xom.xinclude.BadHrefAttributeException;

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not resolve relative URI ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r63);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" because the xi:include element does");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not have a base URI.");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r54.<nu.xom.xinclude.BadHrefAttributeException: void <init>(java.lang.String,java.lang.String)>($r60, r63);

        throw $r54;

     label12:
        $r53 = new nu.xom.xinclude.BadHrefAttributeException;

        specialinvoke $r53.<nu.xom.xinclude.BadHrefAttributeException: void <init>(java.lang.String,java.lang.String)>("Illegal IRI in href attribute", r63);

        throw $r53;

     label13:
        $r66 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("accept");

        staticinvoke <nu.xom.xinclude.XIncluder: void checkHeader(java.lang.String)>($r66);

        $r67 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("accept-language");

        staticinvoke <nu.xom.xinclude.XIncluder: void checkHeader(java.lang.String)>($r67);

        $z11 = virtualinvoke r62.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z11 == 0 goto label35;

        r68 = "";

        $z5 = $r13 instanceof nu.xom.Element;

        if $z5 == 0 goto label14;

        $r47 = (nu.xom.Element) $r13;

        r68 = staticinvoke <nu.xom.xinclude.XIncluder: java.lang.String getXMLLangValue(nu.xom.Element)>($r47);

     label14:
        if r65 == null goto label21;

        $r40 = staticinvoke <nu.xom.xinclude.XIncluder: nu.xom.Nodes downloadXMLDocument(java.net.URL,java.lang.String,nu.xom.Builder,java.util.ArrayList,java.lang.String,java.lang.String,java.lang.String)>(r65, $r9, r3, r4, $r66, $r67, r68);

        r69 = $r40;

        i16 = 0;

     label15:
        $i12 = virtualinvoke $r40.<nu.xom.Nodes: int size()>();

        if i16 >= $i12 goto label20;

        $r41 = virtualinvoke $r40.<nu.xom.Nodes: nu.xom.Node get(int)>(i16);

        $z9 = $r41 instanceof nu.xom.Element;

        if $z9 == 0 goto label19;

        $r42 = virtualinvoke $r41.<nu.xom.Node: java.lang.String getBaseURI()>();

        r70 = $r42;

        $i13 = virtualinvoke $r42.<java.lang.String: int indexOf(int)>(35);

        if $i13 < 0 goto label16;

        $i15 = virtualinvoke $r42.<java.lang.String: int indexOf(int)>(35);

        r70 = virtualinvoke $r42.<java.lang.String: java.lang.String substring(int,int)>(0, $i15);

     label16:
        $r46 = (nu.xom.Element) $r41;

        $r43 = virtualinvoke $r13.<nu.xom.ParentNode: java.lang.String getBaseURI()>();

        r71 = $r43;

        if $r43 == null goto label17;

        $r45 = "";

        $z10 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z10 != 0 goto label17;

        r71 = staticinvoke <nu.xom.xinclude.XIncluder: java.lang.String getDirectoryBase(java.lang.String)>($r43);

     label17:
        $z12 = virtualinvoke r70.<java.lang.String: boolean startsWith(java.lang.String)>(r71);

        if $z12 == 0 goto label18;

        $i14 = virtualinvoke r71.<java.lang.String: int length()>();

        r70 = virtualinvoke r70.<java.lang.String: java.lang.String substring(int)>($i14);

     label18:
        $r44 = new nu.xom.Attribute;

        specialinvoke $r44.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String)>("xml:base", "http://www.w3.org/XML/1998/namespace", r70);

        virtualinvoke $r46.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r44);

     label19:
        i16 = i16 + 1;

        goto label15;

     label20:
        goto label26;

     label21:
        $r27 = virtualinvoke r0.<nu.xom.Element: nu.xom.Document getDocument()>();

        r72 = $r27;

        if $r27 != null goto label22;

        r72 = r39;

     label22:
        $r28 = staticinvoke <nu.xom.xinclude.XPointer: nu.xom.Nodes query(nu.xom.Document,java.lang.String)>(r72, $r9);

        $r29 = new nu.xom.Nodes;

        specialinvoke $r29.<nu.xom.Nodes: void <init>()>();

        i17 = 0;

     label23:
        $i18 = virtualinvoke $r28.<nu.xom.Nodes: int size()>();

        if i17 >= $i18 goto label25;

        $r35 = virtualinvoke $r28.<nu.xom.Nodes: nu.xom.Node get(int)>(i17);

        $r36 = (nu.xom.Element) $r35;

        $z8 = staticinvoke <nu.xom.xinclude.XIncluder: boolean contains(nu.xom.ParentNode,nu.xom.Node)>($r36, r0);

        if $z8 == 0 goto label24;

        $r38 = new nu.xom.xinclude.InclusionLoopException;

        specialinvoke $r38.<nu.xom.xinclude.InclusionLoopException: void <init>(java.lang.String)>("Element tried to include itself");

        throw $r38;

     label24:
        $r37 = virtualinvoke $r35.<nu.xom.Node: nu.xom.Node copy()>();

        virtualinvoke $r29.<nu.xom.Nodes: void append(nu.xom.Node)>($r37);

        i17 = i17 + 1;

        goto label23;

     label25:
        r69 = staticinvoke <nu.xom.xinclude.XIncluder: nu.xom.Nodes resolveXPointerSelection(nu.xom.Nodes,nu.xom.Builder,java.util.ArrayList,nu.xom.Document)>($r29, r3, r4, r72);

     label26:
        $z6 = $r13 instanceof nu.xom.Element;

        if $z6 == 0 goto label29;

        $i9 = virtualinvoke $r13.<nu.xom.ParentNode: int indexOf(nu.xom.Node)>(r0);

        i19 = 0;

     label27:
        $i10 = virtualinvoke r69.<nu.xom.Nodes: int size()>();

        if i19 >= $i10 goto label28;

        $r34 = virtualinvoke r69.<nu.xom.Nodes: nu.xom.Node get(int)>(i19);

        $i11 = $i9 + i19;

        virtualinvoke $r13.<nu.xom.ParentNode: void insertChild(nu.xom.Node,int)>($r34, $i11);

        i19 = i19 + 1;

        goto label27;

     label28:
        virtualinvoke r0.<nu.xom.Element: void detach()>();

        goto label34;

     label29:
        r73 = (nu.xom.Document) $r13;

        i20 = 0;

     label30:
        $r30 = virtualinvoke r69.<nu.xom.Nodes: nu.xom.Node get(int)>(i20);

        i20 = i20 + 1;

        $z7 = $r30 instanceof nu.xom.Element;

        if $z7 == 0 goto label31;

        $r31 = (nu.xom.Element) $r30;

        virtualinvoke r73.<nu.xom.Document: void setRootElement(nu.xom.Element)>($r31);

        goto label32;

     label31:
        $i3 = virtualinvoke r73.<nu.xom.Document: int indexOf(nu.xom.Node)>(r0);

        virtualinvoke r73.<nu.xom.Document: void insertChild(nu.xom.Node,int)>($r30, $i3);

        goto label30;

     label32:
        $r32 = virtualinvoke r73.<nu.xom.Document: nu.xom.Element getRootElement()>();

        $i4 = virtualinvoke r73.<nu.xom.Document: int indexOf(nu.xom.Node)>($r32);

        i21 = i20;

     label33:
        $i5 = virtualinvoke r69.<nu.xom.Nodes: int size()>();

        if i21 >= $i5 goto label34;

        $r33 = virtualinvoke r69.<nu.xom.Nodes: nu.xom.Node get(int)>(i21);

        $i6 = $i4 + 1;

        $i7 = $i6 + i21;

        $i8 = $i7 - i20;

        virtualinvoke r73.<nu.xom.Document: void insertChild(nu.xom.Node,int)>($r33, $i8);

        i21 = i21 + 1;

        goto label33;

     label34:
        goto label41;

     label35:
        $z3 = virtualinvoke r62.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z3 == 0 goto label40;

        $r23 = staticinvoke <nu.xom.xinclude.XIncluder: nu.xom.Nodes downloadTextDocument(java.net.URL,java.lang.String,nu.xom.Builder,java.lang.String,java.lang.String)>(r65, $r10, r3, $r66, $r67);

        i22 = 0;

     label36:
        $i1 = virtualinvoke $r23.<nu.xom.Nodes: int size()>();

        if i22 >= $i1 goto label39;

        $r24 = virtualinvoke $r23.<nu.xom.Nodes: nu.xom.Node get(int)>(i22);

        $z4 = $r24 instanceof nu.xom.Attribute;

        if $z4 == 0 goto label37;

        $r26 = (nu.xom.Element) $r13;

        $r25 = (nu.xom.Attribute) $r24;

        virtualinvoke $r26.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r25);

        goto label38;

     label37:
        $i2 = virtualinvoke $r13.<nu.xom.ParentNode: int indexOf(nu.xom.Node)>(r0);

        virtualinvoke $r13.<nu.xom.ParentNode: void insertChild(nu.xom.Node,int)>($r24, $i2);

     label38:
        i22 = i22 + 1;

        goto label36;

     label39:
        virtualinvoke $r13.<nu.xom.ParentNode: nu.xom.Node removeChild(nu.xom.Node)>(r0);

        goto label41;

     label40:
        $r16 = new nu.xom.xinclude.BadParseAttributeException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad value for parse attribute: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r62);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21 = virtualinvoke r0.<nu.xom.Element: nu.xom.Document getDocument()>();

        $r22 = virtualinvoke $r21.<nu.xom.Document: java.lang.String getBaseURI()>();

        specialinvoke $r16.<nu.xom.xinclude.BadParseAttributeException: void <init>(java.lang.String,java.lang.String)>($r20, $r22);

        throw $r16;

     label41:
        goto label45;

     label42:
        $r51 := @caughtexception;

        staticinvoke <nu.xom.xinclude.XIncluder: void processFallback(nu.xom.Element,nu.xom.Builder,java.util.ArrayList,nu.xom.ParentNode,java.lang.Exception)>(r0, r3, r4, $r13, $r51);

        goto label45;

     label43:
        $r50 := @caughtexception;

        staticinvoke <nu.xom.xinclude.XIncluder: void processFallback(nu.xom.Element,nu.xom.Builder,java.util.ArrayList,nu.xom.ParentNode,java.lang.Exception)>(r0, r3, r4, $r13, $r50);

        goto label45;

     label44:
        $r49 := @caughtexception;

        staticinvoke <nu.xom.xinclude.XIncluder: void processFallback(nu.xom.Element,nu.xom.Builder,java.util.ArrayList,nu.xom.ParentNode,java.lang.Exception)>(r0, r3, r4, $r13, $r49);

     label45:
        goto label49;

     label46:
        $z1 = staticinvoke <nu.xom.xinclude.XIncluder: boolean isFallbackElement(nu.xom.Element)>(r0);

        if $z1 == 0 goto label47;

        $r5 = new nu.xom.xinclude.MisplacedFallbackException;

        $r6 = virtualinvoke r0.<nu.xom.Element: nu.xom.Document getDocument()>();

        $r7 = virtualinvoke $r6.<nu.xom.Document: java.lang.String getBaseURI()>();

        specialinvoke $r5.<nu.xom.xinclude.MisplacedFallbackException: void <init>(java.lang.String,java.lang.String)>("Fallback element outside include element", $r7);

        throw $r5;

     label47:
        $r1 = virtualinvoke r0.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        i23 = 0;

     label48:
        $i0 = virtualinvoke $r1.<nu.xom.Elements: int size()>();

        if i23 >= $i0 goto label49;

        $r2 = virtualinvoke $r1.<nu.xom.Elements: nu.xom.Element get(int)>(i23);

        staticinvoke <nu.xom.xinclude.XIncluder: void resolve(nu.xom.Element,nu.xom.Builder,java.util.ArrayList)>($r2, r3, r4);

        i23 = i23 + 1;

        goto label48;

     label49:
        return;

        catch java.net.MalformedURLException from label03 to label04 with label05;
        catch nu.xom.MalformedURIException from label09 to label10 with label11;
        catch java.io.IOException from label07 to label41 with label42;
        catch nu.xom.xinclude.XPointerSyntaxException from label07 to label41 with label43;
        catch nu.xom.xinclude.XPointerResourceException from label07 to label41 with label44;
    }

    private static java.lang.String getDirectoryBase(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r1;
    }

    private static void verifyIncludeElement(nu.xom.Element) throws nu.xom.xinclude.XIncludeException
    {
        nu.xom.Element r0;

        r0 := @parameter0: nu.xom.Element;

        staticinvoke <nu.xom.xinclude.XIncluder: void testHref(nu.xom.Element)>(r0);

        staticinvoke <nu.xom.xinclude.XIncluder: void testForFragmentIdentifier(nu.xom.Element)>(r0);

        staticinvoke <nu.xom.xinclude.XIncluder: void verifyEncoding(nu.xom.Element)>(r0);

        staticinvoke <nu.xom.xinclude.XIncluder: void testForForbiddenChildElements(nu.xom.Element)>(r0);

        return;
    }

    private static void testHref(nu.xom.Element) throws nu.xom.xinclude.NoIncludeLocationException
    {
        nu.xom.Element r0;
        nu.xom.xinclude.NoIncludeLocationException $r3;
        java.lang.String $r1, $r2, $r5;
        nu.xom.Document $r4;

        r0 := @parameter0: nu.xom.Element;

        $r1 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("href");

        $r2 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("xpointer");

        if $r1 != null goto label1;

        if $r2 != null goto label1;

        $r3 = new nu.xom.xinclude.NoIncludeLocationException;

        $r4 = virtualinvoke r0.<nu.xom.Element: nu.xom.Document getDocument()>();

        $r5 = virtualinvoke $r4.<nu.xom.Document: java.lang.String getBaseURI()>();

        specialinvoke $r3.<nu.xom.xinclude.NoIncludeLocationException: void <init>(java.lang.String,java.lang.String)>("Missing href attribute", $r5);

        throw $r3;

     label1:
        return;
    }

    private static void testForFragmentIdentifier(nu.xom.Element) throws nu.xom.xinclude.BadHrefAttributeException
    {
        nu.xom.Element r0;
        nu.xom.xinclude.BadHrefAttributeException $r9;
        java.lang.StringBuffer $r4, $r5, $r8;
        int $i0, $i2;
        java.lang.String $r1, $r6, $r7;

        r0 := @parameter0: nu.xom.Element;

        $r1 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("href");

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(35);

        $i2 = (int) -1;

        if $i0 <= $i2 goto label1;

        $r9 = new nu.xom.xinclude.BadHrefAttributeException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fragment identifier in URI ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<nu.xom.Element: java.lang.String getBaseURI()>();

        specialinvoke $r9.<nu.xom.xinclude.BadHrefAttributeException: void <init>(java.lang.String,java.lang.String)>($r6, $r7);

        throw $r9;

     label1:
        return;
    }

    private static void verifyEncoding(nu.xom.Element) throws nu.xom.xinclude.BadEncodingAttributeException
    {
        nu.xom.xinclude.BadEncodingAttributeException $r17, $r19, $r21;
        nu.xom.Element r0;
        java.lang.StringBuffer $r5, $r6, $r11, $r12, $r18, $r20;
        int $i0, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.String $r1, $r7, $r8, $r13, $r14, $r16;
        char c1, c4;
        char[] $r2;

        r0 := @parameter0: nu.xom.Element;

        $r1 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String)>("encoding");

        if $r1 != null goto label01;

        return;

     label01:
        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label02;

        $r17 = new nu.xom.xinclude.BadEncodingAttributeException;

        $r16 = virtualinvoke r0.<nu.xom.Element: java.lang.String getBaseURI()>();

        specialinvoke $r17.<nu.xom.xinclude.BadEncodingAttributeException: void <init>(java.lang.String,java.lang.String)>("Empty encoding attribute", $r16);

        throw $r17;

     label02:
        c1 = $r2[0];

        $i5 = (int) c1;

        if $i5 < 65 goto label03;

        $i6 = (int) c1;

        if $i6 <= 90 goto label05;

     label03:
        $i7 = (int) c1;

        if $i7 < 97 goto label04;

        $i8 = (int) c1;

        if $i8 <= 122 goto label05;

     label04:
        $r19 = new nu.xom.xinclude.BadEncodingAttributeException;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal value for encoding attribute: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<nu.xom.Element: java.lang.String getBaseURI()>();

        specialinvoke $r19.<nu.xom.xinclude.BadEncodingAttributeException: void <init>(java.lang.String,java.lang.String)>($r7, $r8);

        throw $r19;

     label05:
        i2 = 1;

     label06:
        $i3 = lengthof $r2;

        if i2 >= $i3 goto label12;

        c4 = $r2[i2];

        $i9 = (int) c4;

        if $i9 < 65 goto label07;

        $i10 = (int) c4;

        if $i10 <= 90 goto label11;

     label07:
        $i11 = (int) c4;

        if $i11 < 97 goto label08;

        $i12 = (int) c4;

        if $i12 <= 122 goto label11;

     label08:
        $i13 = (int) c4;

        if $i13 < 48 goto label09;

        $i14 = (int) c4;

        if $i14 <= 57 goto label11;

     label09:
        $i15 = (int) c4;

        if $i15 == 45 goto label11;

        $i16 = (int) c4;

        if $i16 == 95 goto label11;

        $i17 = (int) c4;

        if $i17 != 46 goto label10;

        goto label11;

     label10:
        $r21 = new nu.xom.xinclude.BadEncodingAttributeException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal value for encoding attribute: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = virtualinvoke r0.<nu.xom.Element: java.lang.String getBaseURI()>();

        specialinvoke $r21.<nu.xom.xinclude.BadEncodingAttributeException: void <init>(java.lang.String,java.lang.String)>($r13, $r14);

        throw $r21;

     label11:
        i2 = i2 + 1;

        goto label06;

     label12:
        return;
    }

    private static java.net.URL absolutize(java.net.URL, java.lang.String) throws java.net.MalformedURLException, nu.xom.xinclude.BadHrefAttributeException
    {
        nu.xom.Element $r0, $r3;
        java.net.URL r1, $r6;
        nu.xom.xinclude.BadHrefAttributeException $r11;
        java.lang.StringBuffer $r12, $r13, $r14;
        java.lang.String $r2, r5, $r7, $r8, $r9, $r10, $r15;
        boolean $z0, $z1, $z2;
        nu.xom.Attribute $r4;

        r1 := @parameter0: java.net.URL;

        r5 := @parameter1: java.lang.String;

        $r0 = new nu.xom.Element;

        specialinvoke $r0.<nu.xom.Element: void <init>(java.lang.String)>("c");

        $r2 = virtualinvoke r1.<java.net.URL: java.lang.String toExternalForm()>();

        virtualinvoke $r0.<nu.xom.Element: void setBaseURI(java.lang.String)>($r2);

        $r3 = new nu.xom.Element;

        specialinvoke $r3.<nu.xom.Element: void <init>(java.lang.String)>("c");

        virtualinvoke $r0.<nu.xom.Element: void appendChild(nu.xom.Node)>($r3);

        $r4 = new nu.xom.Attribute;

        specialinvoke $r4.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String)>("xml:base", "http://www.w3.org/XML/1998/namespace", r5);

        virtualinvoke $r3.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r4);

        $r6 = new java.net.URL;

        $r7 = virtualinvoke $r3.<nu.xom.Element: java.lang.String getBaseURI()>();

        specialinvoke $r6.<java.net.URL: void <init>(java.lang.String)>($r7);

        $r8 = "";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 != 0 goto label1;

        $r9 = virtualinvoke $r6.<java.net.URL: java.lang.String toExternalForm()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        $r10 = virtualinvoke r1.<java.net.URL: java.lang.String toExternalForm()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean endsWith(java.lang.String)>(r5);

        if $z2 != 0 goto label1;

        $r11 = new nu.xom.xinclude.BadHrefAttributeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a syntactically correct IRI");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<nu.xom.xinclude.BadHrefAttributeException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label1:
        return $r6;
    }

    private static void testURISyntax(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Element $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new nu.xom.Element;

        specialinvoke $r0.<nu.xom.Element: void <init>(java.lang.String)>("e");

        virtualinvoke $r0.<nu.xom.Element: void setNamespaceURI(java.lang.String)>(r1);

        return;
    }

    private static java.lang.String getXMLLangValue(nu.xom.Element)
    {
        nu.xom.Attribute $r0;
        nu.xom.Element r3;
        nu.xom.ParentNode $r1;
        java.lang.String $r2;
        boolean $z0;

        r3 := @parameter0: nu.xom.Element;

     label1:
        $r0 = virtualinvoke r3.<nu.xom.Element: nu.xom.Attribute getAttribute(java.lang.String,java.lang.String)>("lang", "http://www.w3.org/XML/1998/namespace");

        if $r0 == null goto label2;

        $r2 = virtualinvoke $r0.<nu.xom.Attribute: java.lang.String getValue()>();

        return $r2;

     label2:
        $r1 = virtualinvoke r3.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        if $r1 != null goto label3;

        return "";

     label3:
        $z0 = $r1 instanceof nu.xom.Document;

        if $z0 == 0 goto label4;

        return "";

     label4:
        r3 = (nu.xom.Element) $r1;

        goto label1;
    }

    private static nu.xom.Nodes resolveXPointerSelection(nu.xom.Nodes, nu.xom.Builder, java.util.ArrayList, nu.xom.Document) throws java.io.IOException, nu.xom.ParsingException, nu.xom.xinclude.XIncludeException
    {
        nu.xom.Builder r3;
        nu.xom.Element r2;
        nu.xom.Nodes r0, $r6;
        nu.xom.Document r5;
        nu.xom.Node $r1;
        java.util.ArrayList r4;

        r0 := @parameter0: nu.xom.Nodes;

        r3 := @parameter1: nu.xom.Builder;

        r4 := @parameter2: java.util.ArrayList;

        r5 := @parameter3: nu.xom.Document;

        $r1 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(0);

        r2 = (nu.xom.Element) $r1;

        $r6 = staticinvoke <nu.xom.xinclude.XIncluder: nu.xom.Nodes resolveSilently(nu.xom.Element,nu.xom.Builder,java.util.ArrayList,nu.xom.Document)>(r2, r3, r4, r5);

        return $r6;
    }

    private static boolean contains(nu.xom.ParentNode, nu.xom.Node)
    {
        nu.xom.ParentNode r1;
        nu.xom.Node r0, r2;

        r1 := @parameter0: nu.xom.ParentNode;

        r0 := @parameter1: nu.xom.Node;

        r2 = r0;

     label1:
        if r2 == null goto label3;

        if r2 != r1 goto label2;

        return 1;

     label2:
        r2 = virtualinvoke r2.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        goto label1;

     label3:
        return 0;
    }

    private static nu.xom.Nodes resolveSilently(nu.xom.Element, nu.xom.Builder, java.util.ArrayList, nu.xom.Document) throws java.io.IOException, nu.xom.ParsingException, nu.xom.xinclude.XIncludeException
    {
        nu.xom.Builder r5;
        nu.xom.Element r0, $r4;
        java.lang.RuntimeException $r1;
        java.util.ArrayList r6;
        int $i0, i1;
        nu.xom.Nodes $r3;
        nu.xom.Elements $r2;
        nu.xom.Document r7;
        boolean $z0, $z1;

        r0 := @parameter0: nu.xom.Element;

        r5 := @parameter1: nu.xom.Builder;

        r6 := @parameter2: java.util.ArrayList;

        r7 := @parameter3: nu.xom.Document;

        $z0 = staticinvoke <nu.xom.xinclude.XIncluder: boolean isIncludeElement(nu.xom.Element)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <nu.xom.xinclude.XIncluder: boolean isFallbackElement(nu.xom.Element)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("XOM BUG: include or fallback element passed to resolveSilently; please report with a test case");

        throw $r1;

     label2:
        $r2 = virtualinvoke r0.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        i1 = 0;

     label3:
        $i0 = virtualinvoke $r2.<nu.xom.Elements: int size()>();

        if i1 >= $i0 goto label4;

        $r4 = virtualinvoke $r2.<nu.xom.Elements: nu.xom.Element get(int)>(i1);

        staticinvoke <nu.xom.xinclude.XIncluder: void resolve(nu.xom.Element,nu.xom.Builder,java.util.ArrayList,nu.xom.Document)>($r4, r5, r6, r7);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r3 = new nu.xom.Nodes;

        specialinvoke $r3.<nu.xom.Nodes: void <init>(nu.xom.Node)>(r0);

        return $r3;
    }

    private static void testForForbiddenChildElements(nu.xom.Element) throws nu.xom.xinclude.XIncludeException
    {
        nu.xom.Element r0, $r2;
        int $i0, i1, i2;
        java.lang.String $r3, $r4, $r5, $r6, $r9, $r12;
        boolean $z0, $z1;
        nu.xom.xinclude.XIncludeException $r7, $r10;
        nu.xom.Elements $r1;
        nu.xom.Document $r8, $r11;

        r0 := @parameter0: nu.xom.Element;

        i1 = 0;

        $r1 = virtualinvoke r0.<nu.xom.Element: nu.xom.Elements getChildElements()>();

        $i0 = virtualinvoke $r1.<nu.xom.Elements: int size()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $r2 = virtualinvoke $r1.<nu.xom.Elements: nu.xom.Element get(int)>(i2);

        $r3 = "http://www.w3.org/2001/XInclude";

        $r4 = virtualinvoke $r2.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r5 = "fallback";

        $r6 = virtualinvoke $r2.<nu.xom.Element: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        i1 = i1 + 1;

        if i1 <= 1 goto label3;

        $r10 = new nu.xom.xinclude.XIncludeException;

        $r11 = virtualinvoke r0.<nu.xom.Element: nu.xom.Document getDocument()>();

        $r12 = virtualinvoke $r11.<nu.xom.Document: java.lang.String getBaseURI()>();

        specialinvoke $r10.<nu.xom.xinclude.XIncludeException: void <init>(java.lang.String,java.lang.String)>("Multiple fallback elements", $r12);

        throw $r10;

     label2:
        $r7 = new nu.xom.xinclude.XIncludeException;

        $r8 = virtualinvoke r0.<nu.xom.Element: nu.xom.Document getDocument()>();

        $r9 = virtualinvoke $r8.<nu.xom.Document: java.lang.String getBaseURI()>();

        specialinvoke $r7.<nu.xom.xinclude.XIncludeException: void <init>(java.lang.String,java.lang.String)>("Include element contains an include child", $r9);

        throw $r7;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private static void processFallback(nu.xom.Element, nu.xom.Builder, java.util.ArrayList, nu.xom.ParentNode, java.lang.Exception) throws nu.xom.xinclude.XIncludeException, java.io.IOException, nu.xom.ParsingException
    {
        nu.xom.Builder r5;
        nu.xom.Element r0, $r1, $r7;
        java.util.ArrayList r6;
        int $i0, $i1;
        nu.xom.ParentNode r4;
        java.lang.String $r10, $r12;
        boolean $z0, $z1;
        java.io.IOException $r13;
        nu.xom.xinclude.XIncludeException $r9;
        nu.xom.Node $r2, $r3;
        java.lang.Exception r8;
        nu.xom.Document $r11;

        r0 := @parameter0: nu.xom.Element;

        r5 := @parameter1: nu.xom.Builder;

        r6 := @parameter2: java.util.ArrayList;

        r4 := @parameter3: nu.xom.ParentNode;

        r8 := @parameter4: java.lang.Exception;

        $r1 = virtualinvoke r0.<nu.xom.Element: nu.xom.Element getFirstChildElement(java.lang.String,java.lang.String)>("fallback", "http://www.w3.org/2001/XInclude");

        if $r1 != null goto label2;

        $z1 = r8 instanceof java.io.IOException;

        if $z1 == 0 goto label1;

        $r13 = (java.io.IOException) r8;

        throw $r13;

     label1:
        $r9 = new nu.xom.xinclude.XIncludeException;

        $r10 = virtualinvoke r8.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke r0.<nu.xom.Element: nu.xom.Document getDocument()>();

        $r12 = virtualinvoke $r11.<nu.xom.Document: java.lang.String getBaseURI()>();

        specialinvoke $r9.<nu.xom.xinclude.XIncludeException: void <init>(java.lang.String,java.lang.String)>($r10, $r12);

        virtualinvoke $r9.<nu.xom.xinclude.XIncludeException: java.lang.Throwable initCause(java.lang.Throwable)>(r8);

        throw $r9;

     label2:
        $i0 = virtualinvoke $r1.<nu.xom.Element: int getChildCount()>();

        if $i0 <= 0 goto label4;

        $r2 = virtualinvoke $r1.<nu.xom.Element: nu.xom.Node getChild(int)>(0);

        $z0 = $r2 instanceof nu.xom.Element;

        if $z0 == 0 goto label3;

        $r7 = (nu.xom.Element) $r2;

        staticinvoke <nu.xom.xinclude.XIncluder: void resolve(nu.xom.Element,nu.xom.Builder,java.util.ArrayList)>($r7, r5, r6);

     label3:
        $r3 = virtualinvoke $r1.<nu.xom.Element: nu.xom.Node getChild(int)>(0);

        virtualinvoke $r3.<nu.xom.Node: void detach()>();

        $i1 = virtualinvoke r4.<nu.xom.ParentNode: int indexOf(nu.xom.Node)>(r0);

        virtualinvoke r4.<nu.xom.ParentNode: void insertChild(nu.xom.Node,int)>($r3, $i1);

        goto label2;

     label4:
        virtualinvoke r0.<nu.xom.Element: void detach()>();

        return;
    }

    private static nu.xom.Nodes downloadXMLDocument(java.net.URL, java.lang.String, nu.xom.Builder, java.util.ArrayList, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException, nu.xom.ParsingException, nu.xom.xinclude.XIncludeException, nu.xom.xinclude.XPointerSyntaxException, nu.xom.xinclude.XPointerResourceException
    {
        nu.xom.Builder r8;
        java.io.BufferedInputStream $r40;
        java.net.URL r0;
        boolean $z0, $z1, $z2;
        nu.xom.xinclude.InclusionLoopException $r39;
        nu.xom.Node $r14, $r17, $r19;
        java.lang.Throwable $r34;
        nu.xom.Element $r16, r36, $r43;
        java.util.ArrayList r11;
        java.net.URLConnection $r3;
        java.lang.StringBuffer $r26, $r27, $r28, $r30, $r38;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i11, i12, $i13, $i15;
        nu.xom.Nodes $r18, r35, $r42;
        java.lang.String $r1, r2, r4, r5, $r9, $r15, $r21, r22, $r31, $r33, r37;
        nu.xom.Attribute $r20, $r41;
        java.lang.Object $r29, $r32;
        nu.xom.Document $r10;
        java.io.InputStream $r7;

        r0 := @parameter0: java.net.URL;

        r2 := @parameter1: java.lang.String;

        r8 := @parameter2: nu.xom.Builder;

        r11 := @parameter3: java.util.ArrayList;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r22 := @parameter6: java.lang.String;

        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String toExternalForm()>();

        if r2 != null goto label01;

        $i4 = virtualinvoke r11.<java.util.ArrayList: int indexOf(java.lang.Object)>($r1);

        $i15 = (int) -1;

        if $i4 == $i15 goto label01;

        $r39 = new nu.xom.xinclude.InclusionLoopException;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Tried to include the already included document ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from ");

        $i5 = virtualinvoke r11.<java.util.ArrayList: int size()>();

        $i6 = $i5 - 1;

        $r29 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object get(int)>($i6);

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        $i7 = virtualinvoke r11.<java.util.ArrayList: int size()>();

        $i8 = $i7 - 1;

        $r32 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object get(int)>($i8);

        $r33 = (java.lang.String) $r32;

        specialinvoke $r39.<nu.xom.xinclude.InclusionLoopException: void <init>(java.lang.String,java.lang.String)>($r31, $r33);

        throw $r39;

     label01:
        $r3 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        staticinvoke <nu.xom.xinclude.XIncluder: void setHeaders(java.net.URLConnection,java.lang.String,java.lang.String)>($r3, r4, r5);

        $r40 = new java.io.BufferedInputStream;

        $r7 = virtualinvoke $r3.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $r40.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r7);

     label02:
        $r9 = virtualinvoke r0.<java.net.URL: java.lang.String toExternalForm()>();

        $r10 = virtualinvoke r8.<nu.xom.Builder: nu.xom.Document build(java.io.InputStream,java.lang.String)>($r40, $r9);

     label03:
        virtualinvoke $r40.<java.io.InputStream: void close()>();

        goto label06;

     label04:
        $r34 := @caughtexception;

     label05:
        virtualinvoke $r40.<java.io.InputStream: void close()>();

        throw $r34;

     label06:
        staticinvoke <nu.xom.xinclude.XIncluder: void resolveInPlace(nu.xom.Document,nu.xom.Builder,java.util.ArrayList)>($r10, r8, r11);

        if r2 == null goto label10;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i2 == 0 goto label10;

        $r18 = staticinvoke <nu.xom.xinclude.XPointer: nu.xom.Nodes query(nu.xom.Document,java.lang.String)>($r10, r2);

        r35 = $r18;

        i9 = 0;

     label07:
        $i3 = virtualinvoke $r18.<nu.xom.Nodes: int size()>();

        if i9 >= $i3 goto label09;

        $r19 = virtualinvoke $r18.<nu.xom.Nodes: nu.xom.Node get(int)>(i9);

        r36 = (nu.xom.Element) $r19;

        $r20 = virtualinvoke r36.<nu.xom.Element: nu.xom.Attribute getAttribute(java.lang.String,java.lang.String)>("lang", "http://www.w3.org/XML/1998/namespace");

        if $r20 != null goto label08;

        $r21 = staticinvoke <nu.xom.xinclude.XIncluder: java.lang.String getXMLLangValue(nu.xom.Element)>(r36);

        $z2 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z2 != 0 goto label08;

        $r41 = new nu.xom.Attribute;

        specialinvoke $r41.<nu.xom.Attribute: void <init>(java.lang.String,java.lang.String,java.lang.String)>("xml:lang", "http://www.w3.org/XML/1998/namespace", $r21);

        virtualinvoke r36.<nu.xom.Element: void addAttribute(nu.xom.Attribute)>($r41);

     label08:
        i9 = i9 + 1;

        goto label07;

     label09:
        goto label13;

     label10:
        $r42 = new nu.xom.Nodes;

        specialinvoke $r42.<nu.xom.Nodes: void <init>()>();

        r35 = $r42;

        i10 = 0;

     label11:
        $i11 = virtualinvoke $r10.<nu.xom.Document: int getChildCount()>();

        if i10 >= $i11 goto label13;

        $r17 = virtualinvoke $r10.<nu.xom.Document: nu.xom.Node getChild(int)>(i10);

        $z1 = $r17 instanceof nu.xom.DocType;

        if $z1 != 0 goto label12;

        virtualinvoke $r42.<nu.xom.Nodes: void append(nu.xom.Node)>($r17);

     label12:
        i10 = i10 + 1;

        goto label11;

     label13:
        $r43 = new nu.xom.Element;

        specialinvoke $r43.<nu.xom.Element: void <init>(java.lang.String)>("f");

        virtualinvoke $r10.<nu.xom.Document: void setRootElement(nu.xom.Element)>($r43);

        i12 = 0;

     label14:
        $i13 = virtualinvoke r35.<nu.xom.Nodes: int size()>();

        if i12 >= $i13 goto label17;

        $r14 = virtualinvoke r35.<nu.xom.Nodes: nu.xom.Node get(int)>(i12);

        $r15 = virtualinvoke $r14.<nu.xom.Node: java.lang.String getBaseURI()>();

        r37 = $r15;

        $i0 = virtualinvoke $r15.<java.lang.String: int indexOf(int)>(35);

        if $i0 < 0 goto label15;

        $i1 = virtualinvoke $r15.<java.lang.String: int indexOf(int)>(35);

        r37 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label15:
        virtualinvoke $r14.<nu.xom.Node: void detach()>();

        $z0 = $r14 instanceof nu.xom.Element;

        if $z0 == 0 goto label16;

        $r16 = (nu.xom.Element) $r14;

        virtualinvoke $r16.<nu.xom.Element: void setBaseURI(java.lang.String)>(r37);

     label16:
        i12 = i12 + 1;

        goto label14;

     label17:
        return r35;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    private static nu.xom.Nodes downloadTextDocument(java.net.URL, java.lang.String, nu.xom.Builder, java.lang.String, java.lang.String) throws java.io.IOException, nu.xom.xinclude.XIncludeException
    {
        nu.xom.Builder r5;
        java.io.BufferedInputStream $r24;
        java.net.URL r0;
        java.util.Locale $r13;
        nu.xom.Text $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        nu.xom.NodeFactory $r6;
        java.lang.Throwable $r15;
        java.net.URLConnection $r17;
        java.lang.StringBuffer $r27;
        int $i1, $i2, $i3, i4, i5, $i7;
        nu.xom.Nodes $r11, $r29;
        java.lang.String r1, r2, $r9, $r10, $r12, $r14, r16, $r18, $r19, $r20;
        char $c0;
        java.io.InputStreamReader $r25;
        java.io.BufferedReader $r26;
        java.io.InputStream $r4;

        r0 := @parameter0: java.net.URL;

        r16 := @parameter1: java.lang.String;

        r5 := @parameter2: nu.xom.Builder;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        if r16 == null goto label01;

        $i2 = virtualinvoke r16.<java.lang.String: int length()>();

        if $i2 != 0 goto label02;

     label01:
        r16 = "UTF-8";

     label02:
        $r17 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        staticinvoke <nu.xom.xinclude.XIncluder: void setHeaders(java.net.URLConnection,java.lang.String,java.lang.String)>($r17, r1, r2);

        $r18 = virtualinvoke $r17.<java.net.URLConnection: java.lang.String getContentEncoding()>();

        $r19 = virtualinvoke $r17.<java.net.URLConnection: java.lang.String getContentType()>();

        $i3 = virtualinvoke $r17.<java.net.URLConnection: int getContentLength()>();

        i4 = $i3;

        if $i3 >= 0 goto label03;

        i4 = 1024;

     label03:
        $r24 = new java.io.BufferedInputStream;

        $r4 = virtualinvoke $r17.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        specialinvoke $r24.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r4);

     label04:
        if $r18 == null goto label05;

        r16 = $r18;

        goto label08;

     label05:
        if $r19 == null goto label08;

        $r13 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r14 = virtualinvoke $r19.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r13);

        $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("text/xml");

        if $z4 != 0 goto label07;

        $z5 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("application/xml");

        if $z5 != 0 goto label07;

        $z6 = virtualinvoke $r14.<java.lang.String: boolean startsWith(java.lang.String)>("text/");

        if $z6 == 0 goto label06;

        $z9 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>("+xml");

        if $z9 != 0 goto label07;

     label06:
        $z7 = virtualinvoke $r14.<java.lang.String: boolean startsWith(java.lang.String)>("application/");

        if $z7 == 0 goto label08;

        $z8 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>("+xml");

        if $z8 == 0 goto label08;

     label07:
        r16 = staticinvoke <nu.xom.xinclude.EncodingHeuristics: java.lang.String readEncodingFromStream(java.io.InputStream)>($r24);

     label08:
        $r20 = <nu.xom.xinclude.XIncluder: java.lang.String version>;

        $z10 = virtualinvoke $r20.<java.lang.String: boolean startsWith(java.lang.String)>("1.2");

        if $z10 != 0 goto label09;

        $r12 = <nu.xom.xinclude.XIncluder: java.lang.String version>;

        $z3 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("1.1");

        if $z3 == 0 goto label14;

     label09:
        $z0 = virtualinvoke r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("UTF-16");

        if $z0 == 0 goto label12;

        virtualinvoke $r24.<java.io.InputStream: void mark(int)>(2);

        $i1 = virtualinvoke $r24.<java.io.InputStream: int read()>();

        if $i1 != 255 goto label10;

        r16 = "UnicodeLittle";

        goto label11;

     label10:
        r16 = "UnicodeBig";

     label11:
        virtualinvoke $r24.<java.io.InputStream: void reset()>();

        goto label14;

     label12:
        $z1 = virtualinvoke r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("UnicodeBigUnmarked");

        if $z1 == 0 goto label13;

        r16 = "UnicodeBig";

        goto label14;

     label13:
        $z2 = virtualinvoke r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("UnicodeLittleUnmarked");

        if $z2 == 0 goto label14;

        r16 = "UnicodeLittle";

     label14:
        $r26 = new java.io.BufferedReader;

        $r25 = new java.io.InputStreamReader;

        specialinvoke $r25.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r24, r16);

        specialinvoke $r26.<java.io.BufferedReader: void <init>(java.io.Reader)>($r25);

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>(int)>(i4);

        i5 = virtualinvoke $r26.<java.io.Reader: int read()>();

     label15:
        $i7 = (int) -1;

        if i5 == $i7 goto label16;

        $c0 = (char) i5;

        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        i5 = virtualinvoke $r26.<java.io.Reader: int read()>();

        goto label15;

     label16:
        $r6 = virtualinvoke r5.<nu.xom.Builder: nu.xom.NodeFactory getNodeFactory()>();

        if $r6 == null goto label18;

        $r10 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = virtualinvoke $r6.<nu.xom.NodeFactory: nu.xom.Nodes makeText(java.lang.String)>($r10);

     label17:
        virtualinvoke $r24.<java.io.InputStream: void close()>();

        return $r11;

     label18:
        $r29 = new nu.xom.Nodes;

        $r28 = new nu.xom.Text;

        $r9 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r28.<nu.xom.Text: void <init>(java.lang.String)>($r9);

        specialinvoke $r29.<nu.xom.Nodes: void <init>(nu.xom.Node)>($r28);

     label19:
        virtualinvoke $r24.<java.io.InputStream: void close()>();

        return $r29;

     label20:
        $r15 := @caughtexception;

     label21:
        virtualinvoke $r24.<java.io.InputStream: void close()>();

        throw $r15;

        catch java.lang.Throwable from label04 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private static void setHeaders(java.net.URLConnection, java.lang.String, java.lang.String) throws nu.xom.xinclude.BadHTTPHeaderException
    {
        java.lang.String r0, r1;
        java.net.URLConnection r2;

        r2 := @parameter0: java.net.URLConnection;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        staticinvoke <nu.xom.xinclude.XIncluder: void checkHeader(java.lang.String)>(r0);

        virtualinvoke r2.<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("accept", r0);

     label1:
        if r1 == null goto label2;

        staticinvoke <nu.xom.xinclude.XIncluder: void checkHeader(java.lang.String)>(r1);

        virtualinvoke r2.<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("accept-language", r1);

     label2:
        return;
    }

    private static void checkHeader(java.lang.String) throws nu.xom.xinclude.BadHTTPHeaderException
    {
        char $c1;
        java.lang.StringBuffer $r3, $r6, $r8;
        int $i0, i2, $i3, $i4, $i5;
        nu.xom.xinclude.BadHTTPHeaderException $r9;
        java.lang.String r0, $r4, $r5, $r7;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label2:
        if i2 >= $i0 goto label5;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 < 32 goto label3;

        $i4 = (int) $c1;

        if $i4 <= 126 goto label4;

     label3:
        $r9 = new nu.xom.xinclude.BadHTTPHeaderException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Header contains illegal character 0x");

        $i5 = (int) $c1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<nu.xom.xinclude.BadHTTPHeaderException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        return;
    }

    private static boolean isIncludeElement(nu.xom.Element)
    {
        nu.xom.Element r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: nu.xom.Element;

        $r1 = virtualinvoke r0.<nu.xom.Element: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("include");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2001/XInclude");

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static boolean isFallbackElement(nu.xom.Element)
    {
        nu.xom.Element r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: nu.xom.Element;

        $r1 = virtualinvoke r0.<nu.xom.Element: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("fallback");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2001/XInclude");

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        <nu.xom.xinclude.XIncluder: java.lang.String XINCLUDE_NS> = "http://www.w3.org/2001/XInclude";

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        <nu.xom.xinclude.XIncluder: java.lang.String version> = $r0;

        return;
    }
}
