public class org.eclipse.jetty.servlets.CrossOriginFilter extends java.lang.Object implements javax.servlet.Filter
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private static final java.lang.String ORIGIN_HEADER;
    public static final java.lang.String ACCESS_CONTROL_REQUEST_METHOD_HEADER;
    public static final java.lang.String ACCESS_CONTROL_REQUEST_HEADERS_HEADER;
    public static final java.lang.String ACCESS_CONTROL_ALLOW_ORIGIN_HEADER;
    public static final java.lang.String ACCESS_CONTROL_ALLOW_METHODS_HEADER;
    public static final java.lang.String ACCESS_CONTROL_ALLOW_HEADERS_HEADER;
    public static final java.lang.String ACCESS_CONTROL_MAX_AGE_HEADER;
    public static final java.lang.String ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER;
    public static final java.lang.String ACCESS_CONTROL_EXPOSE_HEADERS_HEADER;
    public static final java.lang.String ALLOWED_ORIGINS_PARAM;
    public static final java.lang.String ALLOWED_METHODS_PARAM;
    public static final java.lang.String ALLOWED_HEADERS_PARAM;
    public static final java.lang.String PREFLIGHT_MAX_AGE_PARAM;
    public static final java.lang.String ALLOW_CREDENTIALS_PARAM;
    public static final java.lang.String EXPOSED_HEADERS_PARAM;
    public static final java.lang.String OLD_CHAIN_PREFLIGHT_PARAM;
    public static final java.lang.String CHAIN_PREFLIGHT_PARAM;
    private static final java.lang.String ANY_ORIGIN;
    private static final java.util.List SIMPLE_HTTP_METHODS;
    private boolean anyOriginAllowed;
    private java.util.List allowedOrigins;
    private java.util.List allowedMethods;
    private java.util.List allowedHeaders;
    private java.util.List exposedHeaders;
    private int preflightMaxAge;
    private boolean allowCredentials;
    private boolean chainPreflight;

    public void <init>()
    {
        org.eclipse.jetty.servlets.CrossOriginFilter r0;
        java.util.ArrayList $r1, $r2, $r3, $r4;

        r0 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedOrigins> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedMethods> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedHeaders> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List exposedHeaders> = $r4;

        return;
    }

    public void init(javax.servlet.FilterConfig) throws javax.servlet.ServletException
    {
        java.lang.StringBuilder $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47;
        java.lang.Object[] $r49, $r50, $r57;
        java.lang.String $r1, $r3, $r8, $r12, $r13, $r14, $r18, $r48, $r52, $r53, r59, r60, r61, r62, r63, r64, r65, r66;
        java.lang.NumberFormatException $r56;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r5, $r7, $r9, $r11, $r15, $r17, $r54, $r55;
        java.lang.String[] $r2, $r6, $r10, $r16;
        int $i0, $i1, $i2, i3;
        org.eclipse.jetty.servlets.CrossOriginFilter r4;
        javax.servlet.FilterConfig r0;
        org.eclipse.jetty.util.log.Logger $r19, $r21, $r51, $r58;

        r4 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r0 := @parameter0: javax.servlet.FilterConfig;

        $r1 = interfaceinvoke r0.<javax.servlet.FilterConfig: java.lang.String getInitParameter(java.lang.String)>("allowedOrigins");

        r59 = $r1;

        if $r1 != null goto label01;

        r59 = "*";

     label01:
        $r2 = virtualinvoke r59.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i2 = lengthof $r2;

        i3 = 0;

     label02:
        if i3 >= $i2 goto label05;

        r60 = $r2[i3];

        $r52 = virtualinvoke r60.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r52.<java.lang.String: int length()>();

        if $i1 <= 0 goto label04;

        $r53 = "*";

        $z3 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>($r52);

        if $z3 == 0 goto label03;

        r4.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean anyOriginAllowed> = 1;

        $r55 = r4.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedOrigins>;

        interfaceinvoke $r55.<java.util.List: void clear()>();

        goto label05;

     label03:
        $r54 = r4.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedOrigins>;

        interfaceinvoke $r54.<java.util.List: boolean add(java.lang.Object)>($r52);

     label04:
        i3 = i3 + 1;

        goto label02;

     label05:
        $r3 = interfaceinvoke r0.<javax.servlet.FilterConfig: java.lang.String getInitParameter(java.lang.String)>("allowedMethods");

        r61 = $r3;

        if $r3 != null goto label06;

        r61 = "GET,POST,HEAD";

     label06:
        $r5 = r4.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedMethods>;

        $r6 = virtualinvoke r61.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $r8 = interfaceinvoke r0.<javax.servlet.FilterConfig: java.lang.String getInitParameter(java.lang.String)>("allowedHeaders");

        r62 = $r8;

        if $r8 != null goto label07;

        r62 = "X-Requested-With,Content-Type,Accept,Origin";

     label07:
        $r9 = r4.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedHeaders>;

        $r10 = virtualinvoke r62.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        $r12 = interfaceinvoke r0.<javax.servlet.FilterConfig: java.lang.String getInitParameter(java.lang.String)>("preflightMaxAge");

        r63 = $r12;

        if $r12 != null goto label08;

        r63 = "1800";

     label08:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r63);

        r4.<org.eclipse.jetty.servlets.CrossOriginFilter: int preflightMaxAge> = $i0;

     label09:
        goto label11;

     label10:
        $r56 := @caughtexception;

        $r58 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r57 = newarray (java.lang.Object)[2];

        $r57[0] = "preflightMaxAge";

        $r57[1] = r63;

        interfaceinvoke $r58.<org.eclipse.jetty.util.log.Logger: void info(java.lang.String,java.lang.Object[])>("Cross-origin filter, could not parse \'{}\' parameter as integer: {}", $r57);

     label11:
        $r13 = interfaceinvoke r0.<javax.servlet.FilterConfig: java.lang.String getInitParameter(java.lang.String)>("allowCredentials");

        r64 = $r13;

        if $r13 != null goto label12;

        r64 = "true";

     label12:
        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r64);

        r4.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean allowCredentials> = $z0;

        $r14 = interfaceinvoke r0.<javax.servlet.FilterConfig: java.lang.String getInitParameter(java.lang.String)>("exposedHeaders");

        r65 = $r14;

        if $r14 != null goto label13;

        r65 = "";

     label13:
        $r15 = r4.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List exposedHeaders>;

        $r16 = virtualinvoke r65.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        interfaceinvoke $r15.<java.util.List: boolean addAll(java.util.Collection)>($r17);

        $r18 = interfaceinvoke r0.<javax.servlet.FilterConfig: java.lang.String getInitParameter(java.lang.String)>("forwardPreflight");

        r66 = $r18;

        if $r18 == null goto label14;

        $r51 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r50 = newarray (java.lang.Object)[0];

        interfaceinvoke $r51.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Object[])>("DEPRECATED CONFIGURATION: Use chainPreflight instead of forwardPreflight", $r50);

        goto label15;

     label14:
        r66 = interfaceinvoke r0.<javax.servlet.FilterConfig: java.lang.String getInitParameter(java.lang.String)>("chainPreflight");

     label15:
        if r66 != null goto label16;

        r66 = "true";

     label16:
        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r66);

        r4.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean chainPreflight> = $z1;

        $r19 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $z2 = interfaceinvoke $r19.<org.eclipse.jetty.util.log.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label17;

        $r21 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cross-origin filter configuration: allowedOrigins = ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("allowedMethods");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("allowedHeaders");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("preflightMaxAge");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r63);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("allowCredentials");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exposedHeaders");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r65);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("chainPreflight");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r66);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        $r49 = newarray (java.lang.Object)[0];

        interfaceinvoke $r21.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>($r48, $r49);

     label17:
        return;

        catch java.lang.NumberFormatException from label08 to label09 with label10;
    }

    public void doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException
    {
        javax.servlet.ServletRequest r1;
        javax.servlet.FilterChain r3;
        javax.servlet.http.HttpServletRequest $r5;
        javax.servlet.ServletResponse r2;
        javax.servlet.http.HttpServletResponse $r4;
        org.eclipse.jetty.servlets.CrossOriginFilter r0;

        r0 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r1 := @parameter0: javax.servlet.ServletRequest;

        r2 := @parameter1: javax.servlet.ServletResponse;

        r3 := @parameter2: javax.servlet.FilterChain;

        $r5 = (javax.servlet.http.HttpServletRequest) r1;

        $r4 = (javax.servlet.http.HttpServletResponse) r2;

        specialinvoke r0.<org.eclipse.jetty.servlets.CrossOriginFilter: void handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)>($r5, $r4, r3);

        return;
    }

    private void handle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain) throws java.io.IOException, javax.servlet.ServletException
    {
        javax.servlet.FilterChain r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r13;
        java.lang.StringBuilder $r5, $r7, $r9, $r10, $r11, $r12, $r14;
        java.lang.Object[] $r16, $r17, $r20, $r23, $r26;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1, $r8, $r15, $r19, $r22, $r25, $r28;
        org.eclipse.jetty.servlets.CrossOriginFilter r4;
        javax.servlet.http.HttpServletResponse r3;
        org.eclipse.jetty.util.log.Logger $r6, $r18, $r21, $r24, $r27;

        r4 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: javax.servlet.http.HttpServletResponse;

        r2 := @parameter2: javax.servlet.FilterChain;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Origin");

        if $r1 == null goto label5;

        $z0 = virtualinvoke r4.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean isEnabled(javax.servlet.http.HttpServletRequest)>(r0);

        if $z0 == 0 goto label5;

        $z1 = specialinvoke r4.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean originMatches(java.lang.String)>($r1);

        if $z1 == 0 goto label4;

        $z2 = specialinvoke r4.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean isSimpleRequest(javax.servlet.http.HttpServletRequest)>(r0);

        if $z2 == 0 goto label1;

        $r27 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r26 = newarray (java.lang.Object)[1];

        $r28 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        $r26[0] = $r28;

        interfaceinvoke $r27.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("Cross-origin request to {} is a simple cross-origin request", $r26);

        specialinvoke r4.<org.eclipse.jetty.servlets.CrossOriginFilter: void handleSimpleResponse(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r0, r3, $r1);

        goto label5;

     label1:
        $z3 = specialinvoke r4.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean isPreflightRequest(javax.servlet.http.HttpServletRequest)>(r0);

        if $z3 == 0 goto label3;

        $r21 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r20 = newarray (java.lang.Object)[1];

        $r22 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        $r20[0] = $r22;

        interfaceinvoke $r21.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("Cross-origin request to {} is a preflight cross-origin request", $r20);

        specialinvoke r4.<org.eclipse.jetty.servlets.CrossOriginFilter: void handlePreflightResponse(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r0, r3, $r1);

        $z4 = r4.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean chainPreflight>;

        if $z4 == 0 goto label2;

        $r24 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r23 = newarray (java.lang.Object)[1];

        $r25 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        $r23[0] = $r25;

        interfaceinvoke $r24.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("Preflight cross-origin request to {} forwarded to application", $r23);

        goto label5;

     label2:
        return;

     label3:
        $r18 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r17 = newarray (java.lang.Object)[1];

        $r19 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        $r17[0] = $r19;

        interfaceinvoke $r18.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("Cross-origin request to {} is a non-simple cross-origin request", $r17);

        specialinvoke r4.<org.eclipse.jetty.servlets.CrossOriginFilter: void handleSimpleResponse(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r0, r3, $r1);

        goto label5;

     label4:
        $r6 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cross-origin request to ");

        $r8 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with origin ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match allowed origins ");

        $r13 = r4.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedOrigins>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = newarray (java.lang.Object)[0];

        interfaceinvoke $r6.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>($r15, $r16);

     label5:
        interfaceinvoke r2.<javax.servlet.FilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>(r0, r3);

        return;
    }

    protected boolean isEnabled(javax.servlet.http.HttpServletRequest)
    {
        java.util.Enumeration $r1, $r5;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.Object $r2, $r6;
        java.lang.String r3, $r4, r7, $r8;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jetty.servlets.CrossOriginFilter r9;

        r9 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getHeaders(java.lang.String)>("Connection");

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) $r2;

        $r4 = "Upgrade";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getHeaders(java.lang.String)>("Upgrade");

     label2:
        $z2 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        r7 = (java.lang.String) $r6;

        $r8 = "WebSocket";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r7);

        if $z3 == 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return 1;
    }

    private boolean originMatches(java.lang.String)
    {
        java.lang.String[] $r3;
        java.util.regex.Matcher $r10;
        int $i0, i1, $i2, i3;
        java.lang.String r1, $r2, r4, $r5, r9;
        org.eclipse.jetty.servlets.CrossOriginFilter r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r7;
        java.util.List $r6;
        java.lang.Object $r8;

        r0 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean anyOriginAllowed>;

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

        return 0;

     label02:
        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        i1 = lengthof $r3;

        i3 = 0;

     label03:
        if i3 >= i1 goto label10;

        r4 = $r3[i3];

        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i2 != 0 goto label04;

        goto label09;

     label04:
        $r6 = r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedOrigins>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r8;

        $z2 = virtualinvoke r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("*");

        if $z2 == 0 goto label07;

        $r10 = specialinvoke r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.regex.Matcher createMatcher(java.lang.String,java.lang.String)>(r4, r9);

        $z4 = virtualinvoke $r10.<java.util.regex.Matcher: boolean matches()>();

        if $z4 == 0 goto label06;

        return 1;

     label06:
        goto label08;

     label07:
        $z3 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z3 == 0 goto label08;

        return 1;

     label08:
        goto label05;

     label09:
        i3 = i3 + 1;

        goto label03;

     label10:
        return 0;
    }

    private java.util.regex.Matcher createMatcher(java.lang.String, java.lang.String)
    {
        java.util.regex.Matcher $r5;
        java.lang.String r1, $r2, r4;
        java.util.regex.Pattern $r3;
        org.eclipse.jetty.servlets.CrossOriginFilter r0;

        r0 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String parseAllowedWildcardOriginToRegex(java.lang.String)>(r1);

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r2);

        $r5 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r4);

        return $r5;
    }

    private java.lang.String parseAllowedWildcardOriginToRegex(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        org.eclipse.jetty.servlets.CrossOriginFilter r3;

        r3 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".", "\\.");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", ".*");

        return $r2;
    }

    private boolean isSimpleRequest(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        java.util.List $r2;
        java.lang.String $r1, $r3;
        boolean $z0, $z1;
        org.eclipse.jetty.servlets.CrossOriginFilter r4;

        r4 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $r2 = <org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List SIMPLE_HTTP_METHODS>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Access-Control-Request-Method");

        if $r3 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    private boolean isPreflightRequest(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        org.eclipse.jetty.servlets.CrossOriginFilter r4;

        r4 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $r2 = "OPTIONS";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Access-Control-Request-Method");

        if $r3 != null goto label2;

        return 0;

     label2:
        return 1;
    }

    private void handleSimpleResponse(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String)
    {
        javax.servlet.http.HttpServletResponse r0;
        java.util.List $r3, $r4;
        javax.servlet.http.HttpServletRequest r6;
        java.lang.String r1, $r5;
        org.eclipse.jetty.servlets.CrossOriginFilter r2;
        boolean $z0, $z1;

        r2 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r6 := @parameter0: javax.servlet.http.HttpServletRequest;

        r0 := @parameter1: javax.servlet.http.HttpServletResponse;

        r1 := @parameter2: java.lang.String;

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Access-Control-Allow-Origin", r1);

        $z0 = r2.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean allowCredentials>;

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Access-Control-Allow-Credentials", "true");

     label1:
        $r3 = r2.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List exposedHeaders>;

        $z1 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r4 = r2.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List exposedHeaders>;

        $r5 = specialinvoke r2.<org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String commify(java.util.List)>($r4);

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Access-Control-Expose-Headers", $r5);

     label2:
        return;
    }

    private void handlePreflightResponse(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String)
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        java.util.List $r4, $r6;
        int $i0, $i1;
        java.lang.String r3, $r5, $r7, $r8;
        org.eclipse.jetty.servlets.CrossOriginFilter r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        r3 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean isMethodAllowed(javax.servlet.http.HttpServletRequest)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = specialinvoke r0.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean areHeadersAllowed(javax.servlet.http.HttpServletRequest)>(r1);

        if $z1 != 0 goto label2;

        return;

     label2:
        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Access-Control-Allow-Origin", r3);

        $z2 = r0.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean allowCredentials>;

        if $z2 == 0 goto label3;

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Access-Control-Allow-Credentials", "true");

     label3:
        $i0 = r0.<org.eclipse.jetty.servlets.CrossOriginFilter: int preflightMaxAge>;

        if $i0 <= 0 goto label4;

        $i1 = r0.<org.eclipse.jetty.servlets.CrossOriginFilter: int preflightMaxAge>;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Access-Control-Max-Age", $r8);

     label4:
        $r4 = r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedMethods>;

        $r5 = specialinvoke r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String commify(java.util.List)>($r4);

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Access-Control-Allow-Methods", $r5);

        $r6 = r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedHeaders>;

        $r7 = specialinvoke r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String commify(java.util.List)>($r6);

        interfaceinvoke r2.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Access-Control-Allow-Headers", $r7);

        return;
    }

    private boolean isMethodAllowed(javax.servlet.http.HttpServletRequest)
    {
        java.lang.Object[] $r2, $r10;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1, $r9, $r14;
        org.eclipse.jetty.servlets.CrossOriginFilter r11;
        boolean z0;
        java.util.List $r12, $r13;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        org.eclipse.jetty.util.log.Logger $r3, $r5;

        r11 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Access-Control-Request-Method");

        $r3 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "Access-Control-Request-Method";

        $r2[1] = $r1;

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("{} is {}", $r2);

        z0 = 0;

        if $r1 == null goto label1;

        $r13 = r11.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedMethods>;

        z0 = interfaceinvoke $r13.<java.util.List: boolean contains(java.lang.Object)>($r1);

     label1:
        $r5 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method {} is");

        if z0 == 0 goto label2;

        $r14 = "";

        goto label3;

     label2:
        $r14 = " not";

     label3:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" among allowed methods {}");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = $r1;

        $r12 = r11.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedMethods>;

        $r10[1] = $r12;

        interfaceinvoke $r5.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>($r9, $r10);

        return z0;
    }

    private boolean areHeadersAllowed(javax.servlet.http.HttpServletRequest)
    {
        java.lang.Object[] $r2, $r9;
        java.lang.String[] $r12;
        javax.servlet.http.HttpServletRequest r0;
        int i0, i1;
        java.lang.String $r1, $r8, r13, r17, $r18, $r19, $r21;
        org.eclipse.jetty.servlets.CrossOriginFilter r10;
        boolean $z0, $z1, z2, z3, z4, z5;
        java.util.Iterator $r15;
        java.util.List $r11, $r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r20;
        java.lang.Object $r16;
        org.eclipse.jetty.util.log.Logger $r3, $r4;

        r10 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Access-Control-Request-Headers");

        $r3 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "Access-Control-Request-Headers";

        $r2[1] = $r1;

        interfaceinvoke $r3.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("{} is {}", $r2);

        z2 = 1;

        z5 = 1;

        z4 = 1;

        if $r1 == null goto label6;

        $r12 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof $r12;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r13 = $r12[i1];

        z3 = 0;

        $r14 = r10.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedHeaders>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r16;

        $r18 = virtualinvoke r13.<java.lang.String: java.lang.String trim()>();

        $r19 = virtualinvoke r17.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r19);

        if $z1 == 0 goto label3;

        z3 = 1;

        goto label4;

     label3:
        goto label2;

     label4:
        if z3 != 0 goto label5;

        z2 = 0;

        z5 = 0;

        z4 = 0;

        goto label6;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        $r4 = <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Headers [{}] are");

        if z5 == 0 goto label7;

        $r21 = "";

        goto label8;

     label7:
        $r21 = " not";

     label8:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" among allowed headers {}");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = $r1;

        $r11 = r10.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedHeaders>;

        $r9[1] = $r11;

        interfaceinvoke $r4.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>($r8, $r9);

        return z4;
    }

    private java.lang.String commify(java.util.List)
    {
        java.util.List r1;
        int $i0, i1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r3;
        java.lang.String $r2, $r4;
        org.eclipse.jetty.servlets.CrossOriginFilter r5;

        r5 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r1 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (java.lang.String) $r3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void destroy()
    {
        java.util.List $r1, $r2, $r3;
        org.eclipse.jetty.servlets.CrossOriginFilter r0;

        r0 := @this: org.eclipse.jetty.servlets.CrossOriginFilter;

        r0.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean anyOriginAllowed> = 0;

        $r1 = r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedOrigins>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedMethods>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r3 = r0.<org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List allowedHeaders>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        r0.<org.eclipse.jetty.servlets.CrossOriginFilter: int preflightMaxAge> = 0;

        r0.<org.eclipse.jetty.servlets.CrossOriginFilter: boolean allowCredentials> = 0;

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r1;
        java.util.List $r2;
        org.eclipse.jetty.util.log.Logger $r0;

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ANY_ORIGIN> = "*";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String CHAIN_PREFLIGHT_PARAM> = "chainPreflight";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String OLD_CHAIN_PREFLIGHT_PARAM> = "forwardPreflight";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String EXPOSED_HEADERS_PARAM> = "exposedHeaders";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ALLOW_CREDENTIALS_PARAM> = "allowCredentials";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String PREFLIGHT_MAX_AGE_PARAM> = "preflightMaxAge";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ALLOWED_HEADERS_PARAM> = "allowedHeaders";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ALLOWED_METHODS_PARAM> = "allowedMethods";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ALLOWED_ORIGINS_PARAM> = "allowedOrigins";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ACCESS_CONTROL_EXPOSE_HEADERS_HEADER> = "Access-Control-Expose-Headers";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER> = "Access-Control-Allow-Credentials";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ACCESS_CONTROL_MAX_AGE_HEADER> = "Access-Control-Max-Age";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ACCESS_CONTROL_ALLOW_HEADERS_HEADER> = "Access-Control-Allow-Headers";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ACCESS_CONTROL_ALLOW_METHODS_HEADER> = "Access-Control-Allow-Methods";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ACCESS_CONTROL_ALLOW_ORIGIN_HEADER> = "Access-Control-Allow-Origin";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ACCESS_CONTROL_REQUEST_HEADERS_HEADER> = "Access-Control-Request-Headers";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ACCESS_CONTROL_REQUEST_METHOD_HEADER> = "Access-Control-Request-Method";

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.lang.String ORIGIN_HEADER> = "Origin";

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/servlets/CrossOriginFilter;");

        <org.eclipse.jetty.servlets.CrossOriginFilter: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "GET";

        $r1[1] = "POST";

        $r1[2] = "HEAD";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        <org.eclipse.jetty.servlets.CrossOriginFilter: java.util.List SIMPLE_HTTP_METHODS> = $r2;

        return;
    }
}
