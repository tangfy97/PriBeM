public abstract class org.sat4j.minisat.constraints.cnf.BinaryClause extends java.lang.Object implements org.sat4j.minisat.core.Propagatable, org.sat4j.minisat.core.Constr, java.io.Serializable
{
    private static final long serialVersionUID;
    protected double activity;
    private final org.sat4j.minisat.core.ILits voc;
    protected int head;
    protected int tail;
    static final boolean $assertionsDisabled;

    public void <init>(org.sat4j.specs.IVecInt, org.sat4j.minisat.core.ILits)
    {
        org.sat4j.specs.IVecInt r1;
        java.lang.AssertionError $r3;
        int $i0, $i1, $i2;
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        org.sat4j.minisat.core.ILits r2;
        boolean $z0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        r1 := @parameter0: org.sat4j.specs.IVecInt;

        r2 := @parameter1: org.sat4j.minisat.core.ILits;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.sat4j.minisat.constraints.cnf.BinaryClause: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int size()>();

        if $i2 == 2 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $i0 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(0);

        r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head> = $i0;

        $i1 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(1);

        r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail> = $i1;

        r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc> = r2;

        r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: double activity> = 0.0;

        return;
    }

    public void calcReason(int, org.sat4j.specs.IVecInt)
    {
        org.sat4j.specs.IVecInt r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        org.sat4j.minisat.core.ILits $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        i6 := @parameter0: int;

        r3 := @parameter1: org.sat4j.specs.IVecInt;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i0 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $z0 = interfaceinvoke $r1.<org.sat4j.minisat.core.ILits: boolean isFalsified(int)>($i0);

        if $z0 == 0 goto label1;

        $i4 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $i5 = staticinvoke <org.sat4j.core.LiteralsUtils: int 'neg'(int)>($i4);

        interfaceinvoke r3.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i5);

     label1:
        $r2 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $z1 = interfaceinvoke $r2.<org.sat4j.minisat.core.ILits: boolean isFalsified(int)>($i1);

        if $z1 == 0 goto label2;

        $i2 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $i3 = staticinvoke <org.sat4j.core.LiteralsUtils: int 'neg'(int)>($i2);

        interfaceinvoke r3.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i3);

     label2:
        return;
    }

    public void remove(org.sat4j.minisat.core.UnitPropagationListener)
    {
        int $i0, $i1, $i2, $i3;
        org.sat4j.minisat.core.UnitPropagationListener r5;
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        org.sat4j.specs.IVec $r2, $r4;
        org.sat4j.minisat.core.ILits $r1, $r3;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        r5 := @parameter0: org.sat4j.minisat.core.UnitPropagationListener;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i0 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $i1 = staticinvoke <org.sat4j.core.LiteralsUtils: int 'neg'(int)>($i0);

        $r2 = interfaceinvoke $r1.<org.sat4j.minisat.core.ILits: org.sat4j.specs.IVec watches(int)>($i1);

        interfaceinvoke $r2.<org.sat4j.specs.IVec: void remove(java.lang.Object)>(r0);

        $r3 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i2 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $i3 = staticinvoke <org.sat4j.core.LiteralsUtils: int 'neg'(int)>($i2);

        $r4 = interfaceinvoke $r3.<org.sat4j.minisat.core.ILits: org.sat4j.specs.IVec watches(int)>($i3);

        interfaceinvoke $r4.<org.sat4j.specs.IVec: void remove(java.lang.Object)>(r0);

        return;
    }

    public boolean simplify()
    {
        int $i0, $i1;
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        org.sat4j.minisat.core.ILits $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i0 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $z0 = interfaceinvoke $r1.<org.sat4j.minisat.core.ILits: boolean isSatisfied(int)>($i0);

        if $z0 != 0 goto label1;

        $r2 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $z1 = interfaceinvoke $r2.<org.sat4j.minisat.core.ILits: boolean isSatisfied(int)>($i1);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean propagate(org.sat4j.minisat.core.UnitPropagationListener, int)
    {
        java.lang.AssertionError $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.sat4j.minisat.core.UnitPropagationListener r2;
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        org.sat4j.minisat.core.ILits $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        r2 := @parameter0: org.sat4j.minisat.core.UnitPropagationListener;

        i0 := @parameter1: int;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        interfaceinvoke $r1.<org.sat4j.minisat.core.ILits: void watch(int,org.sat4j.minisat.core.Propagatable)>(i0, r0);

        $i1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $i2 = staticinvoke <org.sat4j.core.LiteralsUtils: int 'neg'(int)>(i0);

        if $i1 != $i2 goto label1;

        $i6 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $z2 = interfaceinvoke r2.<org.sat4j.minisat.core.UnitPropagationListener: boolean enqueue(int,org.sat4j.minisat.core.Constr)>($i6, r0);

        return $z2;

     label1:
        $z0 = <org.sat4j.minisat.constraints.cnf.BinaryClause: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i4 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $i5 = staticinvoke <org.sat4j.core.LiteralsUtils: int 'neg'(int)>(i0);

        if $i4 == $i5 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $i3 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $z1 = interfaceinvoke r2.<org.sat4j.minisat.core.UnitPropagationListener: boolean enqueue(int,org.sat4j.minisat.core.Constr)>($i3, r0);

        return $z1;
    }

    public boolean locked()
    {
        org.sat4j.minisat.core.Constr $r2, $r4;
        int $i0, $i1;
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        org.sat4j.minisat.core.ILits $r1, $r3;
        boolean $z0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i0 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $r2 = interfaceinvoke $r1.<org.sat4j.minisat.core.ILits: org.sat4j.minisat.core.Constr getReason(int)>($i0);

        if $r2 == r0 goto label1;

        $r3 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $r4 = interfaceinvoke $r3.<org.sat4j.minisat.core.ILits: org.sat4j.minisat.core.Constr getReason(int)>($i1);

        if $r4 != r0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public double getActivity()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        double $d0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        $d0 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: double activity>;

        return $d0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3;
        org.sat4j.minisat.constraints.cnf.BinaryClause r1;
        java.lang.String $r2, $r4, $r5, $r7, $r8;
        org.sat4j.minisat.core.ILits $r3, $r6;

        r1 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $i0 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $r2 = staticinvoke <org.sat4j.minisat.constraints.cnf.Lits: java.lang.String toString(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r3 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i1 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $r4 = interfaceinvoke $r3.<org.sat4j.minisat.core.ILits: java.lang.String valueToString(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $i2 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $r5 = staticinvoke <org.sat4j.minisat.constraints.cnf.Lits: java.lang.String toString(int)>($i2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r6 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i3 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $r7 = interfaceinvoke $r6.<org.sat4j.minisat.core.ILits: java.lang.String valueToString(int)>($i3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public int get(int)
    {
        int i0, $i1, $i2;
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $i2 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        return $i2;

     label1:
        $z0 = <org.sat4j.minisat.constraints.cnf.BinaryClause: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 == 1 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $i1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        return $i1;
    }

    public void rescaleBy(double)
    {
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        double d0, $d1, $d2;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        d0 := @parameter0: double;

        $d1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: double activity>;

        $d2 = $d1 * d0;

        r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: double activity> = $d2;

        return;
    }

    public int size()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        return 2;
    }

    public void assertConstraint(org.sat4j.minisat.core.UnitPropagationListener)
    {
        java.lang.AssertionError $r2, $r4;
        org.sat4j.minisat.core.UnitPropagationListener r0;
        int $i0, $i1;
        org.sat4j.minisat.constraints.cnf.BinaryClause r1;
        org.sat4j.minisat.core.ILits $r3;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        r0 := @parameter0: org.sat4j.minisat.core.UnitPropagationListener;

        $z0 = <org.sat4j.minisat.constraints.cnf.BinaryClause: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i1 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $z3 = interfaceinvoke $r3.<org.sat4j.minisat.core.ILits: boolean isUnassigned(int)>($i1);

        if $z3 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $i0 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $z1 = interfaceinvoke r0.<org.sat4j.minisat.core.UnitPropagationListener: boolean enqueue(int,org.sat4j.minisat.core.Constr)>($i0, r1);

        $z2 = <org.sat4j.minisat.constraints.cnf.BinaryClause: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        if $z1 != 0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        return;
    }

    public org.sat4j.minisat.core.ILits getVocabulary()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        org.sat4j.minisat.core.ILits $r1;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        return $r1;
    }

    public int[] getLits()
    {
        int[] r0;
        int $i0, $i1;
        org.sat4j.minisat.constraints.cnf.BinaryClause r1;

        r1 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        r0 = newarray (int)[2];

        $i0 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        r0[0] = $i0;

        $i1 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        r0[1] = $i1;

        return r0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.ClassCastException $r2;
        int $i0, $i1, $i2, $i3;
        org.sat4j.minisat.constraints.cnf.BinaryClause r1, r3;
        java.lang.Object r0;

        r1 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        r3 = (org.sat4j.minisat.constraints.cnf.BinaryClause) r0;

        $i1 = r3.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $i0 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        if $i1 != $i0 goto label2;

        $i3 = r3.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $i2 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        if $i3 == $i2 goto label3;

     label2:
        return 0;

     label3:
        return 1;

     label4:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2, $i4, $i5;
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        long l3;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        $i1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $i0 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $i2 = $i1 + $i0;

        l3 = (long) $i2;

        $i4 = (int) l3;

        $i5 = $i4 / 2;

        return $i5;
    }

    public void register()
    {
        int $i0, $i1, $i2, $i3;
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;
        org.sat4j.minisat.core.ILits $r1, $r2;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i0 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int head>;

        $i1 = staticinvoke <org.sat4j.core.LiteralsUtils: int 'neg'(int)>($i0);

        interfaceinvoke $r1.<org.sat4j.minisat.core.ILits: void watch(int,org.sat4j.minisat.core.Propagatable)>($i1, r0);

        $r2 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: org.sat4j.minisat.core.ILits voc>;

        $i2 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClause: int tail>;

        $i3 = staticinvoke <org.sat4j.core.LiteralsUtils: int 'neg'(int)>($i2);

        interfaceinvoke $r2.<org.sat4j.minisat.core.ILits: void watch(int,org.sat4j.minisat.core.Propagatable)>($i3, r0);

        return;
    }

    public boolean canBePropagatedMultipleTimes()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        return 0;
    }

    public org.sat4j.minisat.core.Constr toConstraint()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClause r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClause;

        return r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.minisat.constraints.cnf.BinaryClause: long serialVersionUID> = 1L;

        $r0 = class "Lorg/sat4j/minisat/constraints/cnf/BinaryClause;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.minisat.constraints.cnf.BinaryClause: boolean $assertionsDisabled> = $z1;

        return;
    }
}
