public class org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode extends org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode
{
    private java.lang.CharSequence field;
    private int minimumMatchingmElements;

    public void <init>(java.util.List, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r2;
        java.util.Iterator $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode $r6;
        java.util.List r1;
        int i0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl $r7;
        java.lang.Object $r4;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r5;
        org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode: void <init>(java.util.List)>(r1);

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field> = null;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: int minimumMatchingmElements> = 0;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field> = r2;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: int minimumMatchingmElements> = i0;

        if r1 == null goto label4;

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r4;

        $z1 = r5 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode;

        if $z1 == 0 goto label3;

        $z2 = r5 instanceof org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        if $z2 == 0 goto label2;

        $r7 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl) r5;

        $r7.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean toQueryStringIgnoreFields> = 1;

     label2:
        $z3 = r5 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode;

        if $z3 == 0 goto label3;

        $r6 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode) r5;

        interfaceinvoke $r6.<org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode: void setField(java.lang.CharSequence)>(r2);

     label3:
        goto label1;

     label4:
        return;
    }

    public int getMinimumMatchingElements()
    {
        int $i0;
        org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode;

        $i0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: int minimumMatchingmElements>;

        return $i0;
    }

    public java.lang.CharSequence getField()
    {
        java.lang.CharSequence $r1;
        org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field>;

        return $r1;
    }

    public java.lang.String getFieldAsString()
    {
        java.lang.CharSequence $r1, $r2;
        java.lang.String $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public void setField(java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field> = r1;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        java.lang.CharSequence $r3;
        int $i0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;
        org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode r0, r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode;

        $r1 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        r2 = (org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode) $r1;

        $r3 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field>;

        r2.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field> = $r3;

        $i0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: int minimumMatchingmElements>;

        r2.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: int minimumMatchingmElements> = $i0;

        return r2;
    }

    public java.lang.String toString()
    {
        int $i0, $i1, $i2;
        java.lang.String $r9, $r19, $r22, $r25;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r24;
        boolean $z0;
        java.lang.CharSequence $r4, $r14;
        java.util.Iterator $r21;
        java.util.List $r1, $r10, $r20;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r15, $r16, $r17, $r18;
        java.lang.Object $r23;
        org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.util.List getChildren()>();

        if $r1 == null goto label1;

        $r10 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.util.List getChildren()>();

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i1 != 0 goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<any field=\'");

        $r4 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'  matchelements=");

        $i0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: int minimumMatchingmElements>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/>");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label2:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<any field=\'");

        $r14 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'  matchelements=");

        $i2 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: int minimumMatchingmElements>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.util.List getChildren()>();

        $r21 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r23 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r23;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r25 = virtualinvoke r24.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        goto label3;

     label4:
        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n</any>");

        $r22 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;
    }

    public java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r28;
        boolean $z0, $z1;
        java.lang.CharSequence $r8, $r31, $r33;
        java.util.List $r6, $r24, $r25;
        java.lang.StringBuilder $r0, $r1, $r3, $r5, $r7, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r18, $r20, $r21, $r22, $r29;
        org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode r2;
        int $i0, $i1;
        java.lang.String $r4, $r11, $r16, $r19, $r23, r32;
        java.util.Iterator $r26;
        org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax r30;
        java.lang.Object $r27;

        r2 := @this: org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode;

        r30 := @parameter0: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ANY ");

        $i0 = r2.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: int minimumMatchingmElements>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.util.List getChildren()>();

        if $r6 == null goto label3;

        $r24 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.util.List getChildren()>();

        $i1 = interfaceinvoke $r24.<java.util.List: int size()>();

        if $i1 != 0 goto label1;

        goto label3;

     label1:
        r32 = "";

        $r25 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.util.List getChildren()>();

        $r26 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r27;

        $r29 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r31 = interfaceinvoke r28.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)>(r30);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r31);

        r32 = " ";

        goto label2;

     label3:
        $r33 = r2.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field>;

        $z1 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: boolean isDefaultField(java.lang.CharSequence)>($r33);

        if $z1 == 0 goto label4;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("( ");

        $r19 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ) ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r23;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r2.<org.apache.lucene.queryparser.flexible.core.nodes.AnyQueryNode: java.lang.CharSequence field>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":(( ");

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ) ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }
}
