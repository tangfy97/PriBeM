public abstract class org.waveprotocol.wave.client.editor.RenderingMutationHandler extends org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl implements org.waveprotocol.wave.client.editor.content.Renderer
{

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.RenderingMutationHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.RenderingMutationHandler;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.NodeMutationHandlerImpl: void <init>()>();

        return;
    }

    public static void fanoutAttrs(org.waveprotocol.wave.client.editor.NodeMutationHandler, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler r3;
        org.waveprotocol.wave.client.editor.RenderingMutationHandler$1 $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.model.util.StringMap $r1;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.NodeMutationHandler;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.model.util.StringMap getAttributes()>();

        $r2 = new org.waveprotocol.wave.client.editor.RenderingMutationHandler$1;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.RenderingMutationHandler$1: void <init>(org.waveprotocol.wave.client.editor.NodeMutationHandler,org.waveprotocol.wave.client.editor.content.ContentElement)>(r3, r0);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r2);

        return;
    }

    public static void fanoutChildren(org.waveprotocol.wave.client.editor.NodeMutationHandler, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r4, r6;
        org.waveprotocol.wave.client.editor.NodeMutationHandler r5;
        java.util.Iterator $r2;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r5 := @parameter0: org.waveprotocol.wave.client.editor.NodeMutationHandler;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r6 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

     label1:
        if r6 == null goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

        r6 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        goto label1;

     label2:
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        interfaceinvoke r5.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onEmptied(java.lang.Object)>(r1);

     label3:
        $r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r3;

        interfaceinvoke r5.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onChildAdded(java.lang.Object,java.lang.Object)>(r1, r4);

        virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.ContentNode: void onAddedToParent(org.waveprotocol.wave.client.editor.content.ContentElement)>(null);

        goto label4;

     label5:
        return;
    }

    protected final void fanoutAttrs(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.RenderingMutationHandler r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;

        r0 := @this: org.waveprotocol.wave.client.editor.RenderingMutationHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        staticinvoke <org.waveprotocol.wave.client.editor.RenderingMutationHandler: void fanoutAttrs(org.waveprotocol.wave.client.editor.NodeMutationHandler,org.waveprotocol.wave.client.editor.content.ContentElement)>(r0, r1);

        return;
    }

    protected final void fanoutChildren(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.RenderingMutationHandler r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;

        r0 := @this: org.waveprotocol.wave.client.editor.RenderingMutationHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        staticinvoke <org.waveprotocol.wave.client.editor.RenderingMutationHandler: void fanoutChildren(org.waveprotocol.wave.client.editor.NodeMutationHandler,org.waveprotocol.wave.client.editor.content.ContentElement)>(r0, r1);

        return;
    }
}
