final class org.springframework.core.convert.support.ObjectToArrayConverter extends java.lang.Object implements org.springframework.core.convert.converter.ConditionalGenericConverter
{
    private final org.springframework.core.convert.ConversionService conversionService;

    public void <init>(org.springframework.core.convert.ConversionService)
    {
        org.springframework.core.convert.support.ObjectToArrayConverter r0;
        org.springframework.core.convert.ConversionService r1;

        r0 := @this: org.springframework.core.convert.support.ObjectToArrayConverter;

        r1 := @parameter0: org.springframework.core.convert.ConversionService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.convert.support.ObjectToArrayConverter: org.springframework.core.convert.ConversionService conversionService> = r1;

        return;
    }

    public java.util.Set getConvertibleTypes()
    {
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r0;
        java.util.Set $r1;
        org.springframework.core.convert.support.ObjectToArrayConverter r2;

        r2 := @this: org.springframework.core.convert.support.ObjectToArrayConverter;

        $r0 = new org.springframework.core.convert.converter.GenericConverter$ConvertiblePair;

        specialinvoke $r0.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: void <init>(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Object;", class "[Ljava/lang/Object;");

        $r1 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r0);

        return $r1;
    }

    public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.support.ObjectToArrayConverter r3;
        org.springframework.core.convert.TypeDescriptor r0, r1, $r2;
        org.springframework.core.convert.ConversionService $r4;
        boolean $z0;

        r3 := @this: org.springframework.core.convert.support.ObjectToArrayConverter;

        r0 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r2 = virtualinvoke r1.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        $r4 = r3.<org.springframework.core.convert.support.ObjectToArrayConverter: org.springframework.core.convert.ConversionService conversionService>;

        $z0 = staticinvoke <org.springframework.core.convert.support.ConversionUtils: boolean canConvertElements(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.ConversionService)>(r0, $r2, $r4);

        return $z0;
    }

    public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.support.ObjectToArrayConverter r4;
        org.springframework.core.convert.TypeDescriptor r1, r5, $r7;
        java.lang.Object r0, $r3, $r8;
        java.lang.Class $r2;
        org.springframework.core.convert.ConversionService $r6;

        r4 := @this: org.springframework.core.convert.support.ObjectToArrayConverter;

        r0 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter2: org.springframework.core.convert.TypeDescriptor;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getElementType()>();

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, 1);

        $r6 = r4.<org.springframework.core.convert.support.ObjectToArrayConverter: org.springframework.core.convert.ConversionService conversionService>;

        $r7 = virtualinvoke r1.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        $r8 = interfaceinvoke $r6.<org.springframework.core.convert.ConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r0, r5, $r7);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r3, 0, $r8);

        return $r3;
    }
}
