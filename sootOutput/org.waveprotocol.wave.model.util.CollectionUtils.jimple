public class org.waveprotocol.wave.model.util.CollectionUtils extends java.lang.Object
{
    public static final org.waveprotocol.wave.model.util.DataDomain STRING_SET_DOMAIN;
    public static final org.waveprotocol.wave.model.util.DataDomain STRING_MAP_DOMAIN;
    public static final org.waveprotocol.wave.model.util.DataDomain HASH_SET_DOMAIN;
    private static final org.waveprotocol.wave.model.util.CollectionUtils$HashCollectionFactory HASH_COLLECTION_FACTORY;
    private static org.waveprotocol.wave.model.util.CollectionFactory defaultCollectionFactory;
    private static final org.waveprotocol.wave.model.util.CollectionUtils$EmptyStringMap EMPTY_MAP;
    private static final org.waveprotocol.wave.model.util.IdentityMap EMPTY;

    private void <init>()
    {
        org.waveprotocol.wave.model.util.CollectionUtils r0;

        r0 := @this: org.waveprotocol.wave.model.util.CollectionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.model.util.DataDomain stringMapDomain()
    {
        org.waveprotocol.wave.model.util.DataDomain $r0;

        $r0 = <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.DataDomain STRING_MAP_DOMAIN>;

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.DataDomain hashSetDomain()
    {
        org.waveprotocol.wave.model.util.DataDomain $r0;

        $r0 = <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.DataDomain HASH_SET_DOMAIN>;

        return $r0;
    }

    public static java.util.HashSet newHashSet()
    {
        java.util.HashSet $r0;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        return $r0;
    }

    public static transient java.util.HashSet newHashSet(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.HashSet $r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        $f0 = (float) $i0;

        $f1 = $f0 / 0.75F;

        $i1 = (int) $f1;

        $i2 = $i1 + 1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 16);

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>($i3);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, r0);

        return $r1;
    }

    public static java.util.HashSet newHashSet(java.util.Collection)
    {
        java.util.HashSet $r0;
        java.util.Collection r1;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        return $r0;
    }

    public static java.util.Set immutableSet()
    {
        java.util.HashSet $r0;
        java.util.Set $r1;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashSet newHashSet()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        return $r1;
    }

    public static java.util.Set immutableSet(java.util.Collection)
    {
        java.util.HashSet $r1;
        java.util.Set $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashSet newHashSet(java.util.Collection)>(r0);

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    public static transient java.util.Set immutableSet(java.lang.Object[])
    {
        java.util.HashSet $r1;
        java.util.Set $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashSet newHashSet(java.lang.Object[])>(r0);

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    public static java.util.HashMap newHashMap()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        return $r0;
    }

    public static java.util.HashMap newHashMap(java.util.Map)
    {
        java.util.HashMap $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>(r1);

        return $r0;
    }

    public static java.util.Map immutableMap(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.util.Map $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public static java.util.Map immutableMap(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.Map $r5;
        java.util.HashMap $r0;
        java.lang.Object r1, r2, r3, r4;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        return $r5;
    }

    public static java.util.LinkedList newLinkedList()
    {
        java.util.LinkedList $r0;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        return $r0;
    }

    public static java.util.LinkedList newLinkedList(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.LinkedList $r0;
        java.lang.Iterable r1;
        boolean $z0;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.LinkedList newLinkedList()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r0;
    }

    public static transient java.util.LinkedList newLinkedList(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        java.util.LinkedList $r2;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.LinkedList newLinkedList(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static java.util.ArrayList newArrayList()
    {
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        return $r0;
    }

    public static java.util.ArrayList newArrayList(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.Iterable r1;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r0;
    }

    public static transient java.util.ArrayList newArrayList(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        java.util.ArrayList $r2;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static void setDefaultCollectionFactory(org.waveprotocol.wave.model.util.CollectionFactory)
    {
        org.waveprotocol.wave.model.util.CollectionFactory r0;

        r0 := @parameter0: org.waveprotocol.wave.model.util.CollectionFactory;

        <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory defaultCollectionFactory> = r0;

        return;
    }

    public static org.waveprotocol.wave.model.util.CollectionFactory getHashCollectionFactory()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$HashCollectionFactory $r0;

        $r0 = <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionUtils$HashCollectionFactory HASH_COLLECTION_FACTORY>;

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()
    {
        org.waveprotocol.wave.model.util.CollectionFactory $r0;

        $r0 = <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory defaultCollectionFactory>;

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.StringMap createStringMap()
    {
        org.waveprotocol.wave.model.util.StringMap $r1;
        org.waveprotocol.wave.model.util.CollectionFactory $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()>();

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        return $r1;
    }

    public static org.waveprotocol.wave.model.util.StringMap emptyMap()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$EmptyStringMap $r0;

        $r0 = <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionUtils$EmptyStringMap EMPTY_MAP>;

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.IdentityMap emptyIdentityMap()
    {
        org.waveprotocol.wave.model.util.IdentityMap $r0;

        $r0 = <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentityMap EMPTY>;

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.NumberMap createNumberMap()
    {
        org.waveprotocol.wave.model.util.NumberMap $r1;
        org.waveprotocol.wave.model.util.CollectionFactory $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()>();

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.NumberMap createNumberMap()>();

        return $r1;
    }

    public static org.waveprotocol.wave.model.util.IntMap createIntMap()
    {
        org.waveprotocol.wave.model.util.IntMap $r1;
        org.waveprotocol.wave.model.util.CollectionFactory $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()>();

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.IntMap createIntMap()>();

        return $r1;
    }

    public static java.util.Queue createQueue()
    {
        java.util.Queue $r1;
        org.waveprotocol.wave.model.util.CollectionFactory $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()>();

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.model.util.CollectionFactory: java.util.Queue createQueue()>();

        return $r1;
    }

    public static org.waveprotocol.wave.model.util.NumberPriorityQueue createPriorityQueue()
    {
        org.waveprotocol.wave.model.util.NumberPriorityQueue $r1;
        org.waveprotocol.wave.model.util.CollectionFactory $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()>();

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.NumberPriorityQueue createPriorityQueue()>();

        return $r1;
    }

    public static org.waveprotocol.wave.model.util.IdentityMap createIdentityMap()
    {
        org.waveprotocol.wave.model.util.IdentityMap $r1;
        org.waveprotocol.wave.model.util.CollectionFactory $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()>();

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.IdentityMap createIdentityMap()>();

        return $r1;
    }

    public static org.waveprotocol.wave.model.util.IdentitySet createIdentitySet()
    {
        org.waveprotocol.wave.model.util.IdentitySet $r1;
        org.waveprotocol.wave.model.util.CollectionFactory $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()>();

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.IdentitySet createIdentitySet()>();

        return $r1;
    }

    public static org.waveprotocol.wave.model.util.ReadableIdentitySet singleton(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.model.util.CollectionUtils$5 $r1;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Can not create singleton of null");

        $r1 = new org.waveprotocol.wave.model.util.CollectionUtils$5;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.CollectionUtils$5: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.util.StringSet createStringSet()
    {
        org.waveprotocol.wave.model.util.StringSet $r1;
        org.waveprotocol.wave.model.util.CollectionFactory $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory getCollectionFactory()>();

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.model.util.CollectionFactory: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        return $r1;
    }

    public static org.waveprotocol.wave.model.util.StringMap copyStringMap(org.waveprotocol.wave.model.util.ReadableStringMap)
    {
        org.waveprotocol.wave.model.util.StringMap $r0;
        org.waveprotocol.wave.model.util.ReadableStringMap r1;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        interfaceinvoke $r0.<org.waveprotocol.wave.model.util.StringMap: void putAll(org.waveprotocol.wave.model.util.ReadableStringMap)>(r1);

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.StringSet copyStringSet(org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r1;
        org.waveprotocol.wave.model.util.StringSet $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        interfaceinvoke $r0.<org.waveprotocol.wave.model.util.StringSet: void addAll(org.waveprotocol.wave.model.util.ReadableStringSet)>(r1);

        return $r0;
    }

    public static java.util.Map copyToJavaMap(org.waveprotocol.wave.model.util.ReadableStringMap, java.util.Map)
    {
        org.waveprotocol.wave.model.util.ReadableStringMap r0;
        org.waveprotocol.wave.model.util.CollectionUtils$6 $r1;
        java.util.Map r2;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap;

        r2 := @parameter1: java.util.Map;

        $r1 = new org.waveprotocol.wave.model.util.CollectionUtils$6;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.CollectionUtils$6: void <init>(java.util.Map)>(r2);

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r1);

        return r2;
    }

    public static java.util.Map copyToJavaIdentityMapForTesting(org.waveprotocol.wave.model.util.IdentityMap)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$7 $r2;
        java.util.IdentityHashMap $r0;
        org.waveprotocol.wave.model.util.IdentityMap r1;

        r1 := @parameter0: org.waveprotocol.wave.model.util.IdentityMap;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        $r2 = new org.waveprotocol.wave.model.util.CollectionUtils$7;

        specialinvoke $r2.<org.waveprotocol.wave.model.util.CollectionUtils$7: void <init>(java.util.Map)>($r0);

        interfaceinvoke r1.<org.waveprotocol.wave.model.util.IdentityMap: void each(org.waveprotocol.wave.model.util.IdentityMap$ProcV)>($r2);

        return $r0;
    }

    public static java.util.Map newJavaMap(org.waveprotocol.wave.model.util.ReadableStringMap)
    {
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.util.ReadableStringMap r0;
        java.util.Map $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Map copyToJavaMap(org.waveprotocol.wave.model.util.ReadableStringMap,java.util.Map)>(r0, $r1);

        return $r2;
    }

    public static java.util.Collection copyToJavaCollection(org.waveprotocol.wave.model.util.ReadableStringSet, java.util.Collection)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r0;
        org.waveprotocol.wave.model.util.CollectionUtils$8 $r1;
        java.util.Collection r2;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        r2 := @parameter1: java.util.Collection;

        $r1 = new org.waveprotocol.wave.model.util.CollectionUtils$8;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.CollectionUtils$8: void <init>(java.util.Collection)>(r2);

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r1);

        return r2;
    }

    public static java.util.Collection copyValuesToJavaCollection(org.waveprotocol.wave.model.util.ReadableStringMap, java.util.Collection)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$9 $r1;
        org.waveprotocol.wave.model.util.ReadableStringMap r0;
        java.util.Collection r2;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap;

        r2 := @parameter1: java.util.Collection;

        $r1 = new org.waveprotocol.wave.model.util.CollectionUtils$9;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.CollectionUtils$9: void <init>(java.util.Collection)>(r2);

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r1);

        return r2;
    }

    public static java.util.Set newJavaSet(org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        java.util.HashSet $r1;
        org.waveprotocol.wave.model.util.ReadableStringSet r0;
        java.util.Collection $r2;
        java.util.Set $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Collection copyToJavaCollection(org.waveprotocol.wave.model.util.ReadableStringSet,java.util.Collection)>(r0, $r1);

        $r3 = (java.util.Set) $r2;

        return $r3;
    }

    public static java.util.List newJavaList(org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r0;
        java.util.List $r3;
        java.util.Collection $r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Collection copyToJavaCollection(org.waveprotocol.wave.model.util.ReadableStringSet,java.util.Collection)>(r0, $r1);

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    public static java.util.List newJavaList(org.waveprotocol.wave.model.util.ReadableStringMap)
    {
        java.util.List $r3;
        java.util.Collection $r2;
        org.waveprotocol.wave.model.util.ReadableStringMap r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Collection copyValuesToJavaCollection(org.waveprotocol.wave.model.util.ReadableStringMap,java.util.Collection)>(r0, $r1);

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    public static org.waveprotocol.wave.model.util.StringMap adaptStringMap(java.util.Map)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringMapAdapter: void <init>(java.util.Map,org.waveprotocol.wave.model.util.CollectionUtils$1)>(r1, null);

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.NumberMap adaptNumberMap(java.util.Map)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberMapAdapter: void <init>(java.util.Map,org.waveprotocol.wave.model.util.CollectionUtils$1)>(r1, null);

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.IntMap adaptIntMap(java.util.Map)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$IntMapAdapter $r0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        $r0 = new org.waveprotocol.wave.model.util.CollectionUtils$IntMapAdapter;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.CollectionUtils$IntMapAdapter: void <init>(java.util.Map,org.waveprotocol.wave.model.util.CollectionUtils$1)>(r1, null);

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.StringSet adaptStringSet(java.util.Set)
    {
        java.util.Set r1;
        org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter $r0;

        r1 := @parameter0: java.util.Set;

        $r0 = new org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.CollectionUtils$StringSetAdapter: void <init>(java.util.Set,org.waveprotocol.wave.model.util.CollectionUtils$1)>(r1, null);

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.NumberPriorityQueue adaptNumberPriorityQueue(java.util.PriorityQueue)
    {
        org.waveprotocol.wave.model.util.CollectionUtils$NumberPriorityQueueAdapter $r0;
        java.util.PriorityQueue r1;

        r1 := @parameter0: java.util.PriorityQueue;

        $r0 = new org.waveprotocol.wave.model.util.CollectionUtils$NumberPriorityQueueAdapter;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.CollectionUtils$NumberPriorityQueueAdapter: void <init>(java.util.Queue,org.waveprotocol.wave.model.util.CollectionUtils$1)>(r1, null);

        return $r0;
    }

    public static org.waveprotocol.wave.model.util.StringSet newStringSet(java.util.Set)
    {
        org.waveprotocol.wave.model.util.StringSet $r0;
        java.util.Iterator $r2;
        java.util.Set r1;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0;

        r1 := @parameter0: java.util.Set;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        interfaceinvoke $r0.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r4);

        goto label1;

     label2:
        return $r0;
    }

    public static transient org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])
    {
        org.waveprotocol.wave.model.util.StringSet $r0;
        int i0, i1;
        java.lang.String[] r1;
        java.lang.String r2;

        r1 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        interfaceinvoke $r0.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static transient org.waveprotocol.wave.model.util.StringMap newStringMap(java.lang.String[])
    {
        java.lang.String[] r0;
        org.waveprotocol.wave.model.util.StringMap $r1;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        $i1 = $i0 % 2;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "newStringMap: pairs must have even length");

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        i3 = 0;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label4;

        $r3 = r0[i3];

        $i2 = i3 + 1;

        $r2 = r0[$i2];

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>($r3, $r2);

        i3 = i3 + 2;

        goto label3;

     label4:
        return $r1;
    }

    public static java.util.List valueList(org.waveprotocol.wave.model.util.ReadableStringMap)
    {
        org.waveprotocol.wave.model.util.ReadableStringMap r1;
        org.waveprotocol.wave.model.util.CollectionUtils$10 $r2;
        java.util.ArrayList $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r2 = new org.waveprotocol.wave.model.util.CollectionUtils$10;

        specialinvoke $r2.<org.waveprotocol.wave.model.util.CollectionUtils$10: void <init>(java.util.List)>($r0);

        interfaceinvoke r1.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r2);

        return $r0;
    }

    public static transient java.lang.String join(char, java.lang.String, java.lang.String[])
    {
        java.lang.String[] r2;
        char c1;
        int $i0, i2;
        java.lang.StringBuilder $r0;
        java.lang.String r1, $r3, $r4;

        c1 := @parameter0: char;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        i2 = 0;

     label1:
        $i0 = lengthof r2;

        if i2 >= $i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r4 = r2[i2];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static transient java.lang.String join(char, java.lang.String[])
    {
        java.lang.String[] r1;
        char c1;
        int $i0, i2, $i3;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r3, $r4;

        c1 := @parameter0: char;

        r1 := @parameter1: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        $r4 = r1[0];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label1:
        i2 = 1;

     label2:
        $i3 = lengthof r1;

        if i2 >= $i3 goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r3 = r1[i2];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static transient java.lang.String join(java.lang.String[])
    {
        java.lang.String[] r1;
        int $i0, i1, $i2;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r3, $r4;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        $r4 = r1[0];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label1:
        i1 = 1;

     label2:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        $r3 = r1[i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String repeat(char, int)
    {
        int i0;
        char[] $r1;
        char c1;
        java.lang.String $r0;
        boolean $z0;

        c1 := @parameter0: char;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Cannot have negative repeat");

        $r1 = newarray (char)[i0];

        staticinvoke <java.util.Arrays: void fill(char[],char)>($r1, c1);

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r1);

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.util.CollectionUtils$HashCollectionFactory $r3, $r4;
        org.waveprotocol.wave.model.util.CollectionUtils$EmptyStringMap $r5;
        org.waveprotocol.wave.model.util.CollectionUtils$1 $r0;
        org.waveprotocol.wave.model.util.CollectionUtils$4 $r6;
        org.waveprotocol.wave.model.util.CollectionUtils$3 $r2;
        org.waveprotocol.wave.model.util.CollectionUtils$2 $r1;

        $r0 = new org.waveprotocol.wave.model.util.CollectionUtils$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.util.CollectionUtils$1: void <init>()>();

        <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.DataDomain STRING_SET_DOMAIN> = $r0;

        $r1 = new org.waveprotocol.wave.model.util.CollectionUtils$2;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.CollectionUtils$2: void <init>()>();

        <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.DataDomain STRING_MAP_DOMAIN> = $r1;

        $r2 = new org.waveprotocol.wave.model.util.CollectionUtils$3;

        specialinvoke $r2.<org.waveprotocol.wave.model.util.CollectionUtils$3: void <init>()>();

        <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.DataDomain HASH_SET_DOMAIN> = $r2;

        $r3 = new org.waveprotocol.wave.model.util.CollectionUtils$HashCollectionFactory;

        specialinvoke $r3.<org.waveprotocol.wave.model.util.CollectionUtils$HashCollectionFactory: void <init>(org.waveprotocol.wave.model.util.CollectionUtils$1)>(null);

        <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionUtils$HashCollectionFactory HASH_COLLECTION_FACTORY> = $r3;

        $r4 = <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionUtils$HashCollectionFactory HASH_COLLECTION_FACTORY>;

        <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionFactory defaultCollectionFactory> = $r4;

        $r5 = new org.waveprotocol.wave.model.util.CollectionUtils$EmptyStringMap;

        specialinvoke $r5.<org.waveprotocol.wave.model.util.CollectionUtils$EmptyStringMap: void <init>(org.waveprotocol.wave.model.util.CollectionUtils$1)>(null);

        <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.CollectionUtils$EmptyStringMap EMPTY_MAP> = $r5;

        $r6 = new org.waveprotocol.wave.model.util.CollectionUtils$4;

        specialinvoke $r6.<org.waveprotocol.wave.model.util.CollectionUtils$4: void <init>()>();

        <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentityMap EMPTY> = $r6;

        return;
    }
}
