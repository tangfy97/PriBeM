public class ucar.nc2.dt.TypedDatasetFactory extends java.lang.Object
{
    private static java.util.List transformList;
    private static boolean userMode;

    public void <init>()
    {
        ucar.nc2.dt.TypedDatasetFactory r0;

        r0 := @this: ucar.nc2.dt.TypedDatasetFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void registerFactory(ucar.nc2.constants.FeatureType, java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Class $r1;
        java.lang.String r0;
        ucar.nc2.constants.FeatureType r2;

        r2 := @parameter0: ucar.nc2.constants.FeatureType;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>(r2, $r1);

        return;
    }

    public static void registerFactory(ucar.nc2.constants.FeatureType, java.lang.Class)
    {
        ucar.nc2.dt.TypedDatasetFactory$Factory $r3, $r7;
        java.lang.InstantiationException $r25;
        ucar.nc2.constants.FeatureType r4;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r17;
        java.util.List $r6, $r9;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r19, $r20, $r22, $r23, $r27, $r28, $r30, $r31;
        java.lang.String $r13, $r16, $r21, $r24, $r29, $r32;
        java.lang.IllegalArgumentException $r10, $r18, $r26;
        ucar.nc2.dt.TypedDatasetFactoryIF $r5, $r8;
        java.lang.Class r0, $r1;
        java.lang.Object $r2;

        r4 := @parameter0: ucar.nc2.constants.FeatureType;

        r0 := @parameter1: java.lang.Class;

        $r1 = class "Lucar/nc2/dt/TypedDatasetFactoryIF;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must implement TypedDatasetFactoryIF");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        goto label5;

     label3:
        $r25 := @caughtexception;

        $r26 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CoordTransBuilderIF Class ");

        $r29 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot instantiate, probably need default Constructor");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r26;

     label4:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CoordTransBuilderIF Class ");

        $r21 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessible");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r18;

     label5:
        $z1 = <ucar.nc2.dt.TypedDatasetFactory: boolean userMode>;

        if $z1 == 0 goto label6;

        $r9 = <ucar.nc2.dt.TypedDatasetFactory: java.util.List transformList>;

        $r7 = new ucar.nc2.dt.TypedDatasetFactory$Factory;

        $r8 = (ucar.nc2.dt.TypedDatasetFactoryIF) $r2;

        specialinvoke $r7.<ucar.nc2.dt.TypedDatasetFactory$Factory: void <init>(ucar.nc2.constants.FeatureType,java.lang.Class,ucar.nc2.dt.TypedDatasetFactoryIF)>(r4, r0, $r8);

        interfaceinvoke $r9.<java.util.List: void add(int,java.lang.Object)>(0, $r7);

        goto label7;

     label6:
        $r6 = <ucar.nc2.dt.TypedDatasetFactory: java.util.List transformList>;

        $r3 = new ucar.nc2.dt.TypedDatasetFactory$Factory;

        $r5 = (ucar.nc2.dt.TypedDatasetFactoryIF) $r2;

        specialinvoke $r3.<ucar.nc2.dt.TypedDatasetFactory$Factory: void <init>(ucar.nc2.constants.FeatureType,java.lang.Class,ucar.nc2.dt.TypedDatasetFactoryIF)>(r4, r0, $r5);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r3);

     label7:
        return;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public static ucar.nc2.dt.TypedDataset open(ucar.nc2.constants.FeatureType, java.lang.String, ucar.nc2.util.CancelTask, java.lang.StringBuilder) throws java.io.IOException
    {
        ucar.nc2.dt.TypedDataset $r5;
        ucar.nc2.util.CancelTask r1;
        java.lang.StringBuilder r4;
        java.lang.String r0;
        ucar.nc2.dataset.NetcdfDataset $r2;
        ucar.nc2.constants.FeatureType r3;

        r3 := @parameter0: ucar.nc2.constants.FeatureType;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: ucar.nc2.util.CancelTask;

        r4 := @parameter3: java.lang.StringBuilder;

        $r2 = staticinvoke <ucar.nc2.dataset.NetcdfDataset: ucar.nc2.dataset.NetcdfDataset acquireDataset(java.lang.String,ucar.nc2.util.CancelTask)>(r0, r1);

        $r5 = staticinvoke <ucar.nc2.dt.TypedDatasetFactory: ucar.nc2.dt.TypedDataset open(ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.util.CancelTask,java.lang.StringBuilder)>(r3, $r2, r1, r4);

        return $r5;
    }

    public static ucar.nc2.dt.TypedDataset open(ucar.nc2.constants.FeatureType, ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask, java.lang.StringBuilder) throws java.io.IOException
    {
        ucar.nc2.dt.TypedDatasetFactory$Factory r33;
        ucar.nc2.util.CancelTask r4;
        java.lang.InstantiationException $r29;
        ucar.nc2.constants.FeatureType r10, $r11, $r12, $r21, $r25;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r26;
        ucar.nc2.dt.grid.GridDataset $r18, $r20;
        java.util.List $r0, $r19;
        java.lang.StringBuilder r5, $r7, $r9, $r13, $r15, $r16, $r17, $r28, $r31;
        ucar.nc2.dt.TypedDataset $r6, $r22;
        int $i0;
        java.lang.String $r8, $r14, $r27, $r30;
        java.util.Iterator $r1;
        ucar.nc2.dt.TypedDatasetFactoryIF $r24, r34;
        java.lang.Object $r2, $r23;
        java.lang.Class r32;
        ucar.nc2.dataset.NetcdfDataset r3;

        r10 := @parameter0: ucar.nc2.constants.FeatureType;

        r3 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        r4 := @parameter2: ucar.nc2.util.CancelTask;

        r5 := @parameter3: java.lang.StringBuilder;

        r32 = null;

        $r0 = <ucar.nc2.dt.TypedDatasetFactory: java.util.List transformList>;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r23 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r33 = (ucar.nc2.dt.TypedDatasetFactory$Factory) $r23;

        if r10 == null goto label02;

        $r25 = r33.<ucar.nc2.dt.TypedDatasetFactory$Factory: ucar.nc2.constants.FeatureType datatype>;

        if r10 == $r25 goto label02;

        goto label01;

     label02:
        $r24 = r33.<ucar.nc2.dt.TypedDatasetFactory$Factory: ucar.nc2.dt.TypedDatasetFactoryIF instance>;

        $z0 = interfaceinvoke $r24.<ucar.nc2.dt.TypedDatasetFactoryIF: boolean isMine(ucar.nc2.dataset.NetcdfDataset)>(r3);

        if $z0 == 0 goto label03;

        r32 = r33.<ucar.nc2.dt.TypedDatasetFactory$Factory: java.lang.Class c>;

        goto label04;

     label03:
        goto label01;

     label04:
        if null != r32 goto label08;

        $r11 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType POINT>;

        if r10 != $r11 goto label05;

        $r21 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        $r22 = staticinvoke <ucar.nc2.dt.TypedDatasetFactory: ucar.nc2.dt.TypedDataset open(ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.util.CancelTask,java.lang.StringBuilder)>($r21, r3, r4, r5);

        return $r22;

     label05:
        $r12 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType GRID>;

        if r10 != $r12 goto label06;

        $r20 = new ucar.nc2.dt.grid.GridDataset;

        specialinvoke $r20.<ucar.nc2.dt.grid.GridDataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r3);

        return $r20;

     label06:
        if null != r10 goto label07;

        $r18 = new ucar.nc2.dt.grid.GridDataset;

        specialinvoke $r18.<ucar.nc2.dt.grid.GridDataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r3);

        $r19 = virtualinvoke $r18.<ucar.nc2.dt.grid.GridDataset: java.util.List getGrids()>();

        $i0 = interfaceinvoke $r19.<java.util.List: int size()>();

        if $i0 <= 0 goto label07;

        return $r18;

     label07:
        $r13 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**Failed to find Datatype Factory for= ");

        $r14 = virtualinvoke r3.<ucar.nc2.dataset.NetcdfDataset: java.lang.String getLocation()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" datatype= ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        return null;

     label08:
        r34 = null;

     label09:
        $r2 = virtualinvoke r32.<java.lang.Class: java.lang.Object newInstance()>();

        r34 = (ucar.nc2.dt.TypedDatasetFactoryIF) $r2;

     label10:
        goto label13;

     label11:
        $r29 := @caughtexception;

        $r30 = virtualinvoke $r29.<java.lang.InstantiationException: java.lang.String getMessage()>();

        $r31 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label13;

     label12:
        $r26 := @caughtexception;

        $r27 = virtualinvoke $r26.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r28 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label13:
        if null != r34 goto label14;

        $r7 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**Error on TypedDatasetFactory object from class= ");

        $r8 = virtualinvoke r32.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        return null;

     label14:
        $r6 = interfaceinvoke r34.<ucar.nc2.dt.TypedDatasetFactoryIF: ucar.nc2.dt.TypedDataset open(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.util.CancelTask,java.lang.StringBuilder)>(r3, r4, r5);

        return $r6;

        catch java.lang.InstantiationException from label09 to label10 with label11;
        catch java.lang.IllegalAccessException from label09 to label10 with label12;
    }

    static void <clinit>()
    {
        java.util.ArrayList $r0;
        ucar.nc2.constants.FeatureType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <ucar.nc2.dt.TypedDatasetFactory: java.util.List transformList> = $r0;

        <ucar.nc2.dt.TypedDatasetFactory: boolean userMode> = 0;

        $r1 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType POINT>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r1, class "Lucar/nc2/dt/point/UnidataPointObsDataset;");

        $r2 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r2, class "Lucar/nc2/dt/point/UnidataStationObsDataset;");

        $r3 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r3, class "Lucar/nc2/dt/point/UnidataStationObsMultidimDataset;");

        $r4 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType POINT>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r4, class "Lucar/nc2/dt/point/DapperDataset;");

        $r5 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r5, class "Lucar/nc2/dt/point/SequenceObsDataset;");

        $r6 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r6, class "Lucar/nc2/dt/point/UnidataStationObsDataset2;");

        $r7 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r7, class "Lucar/nc2/dt/point/NdbcDataset;");

        $r8 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r8, class "Lucar/nc2/dt/point/MadisStationObsDataset;");

        $r9 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType STATION>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r9, class "Lucar/nc2/dt/point/OldUnidataStationObsDataset;");

        $r10 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType POINT>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r10, class "Lucar/nc2/dt/point/OldUnidataPointObsDataset;");

        $r11 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r11, class "Lucar/nc2/dt/radial/Netcdf2Dataset;");

        $r12 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r12, class "Lucar/nc2/dt/radial/Dorade2Dataset;");

        $r13 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r13, class "Lucar/nc2/dt/radial/LevelII2Dataset;");

        $r14 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r14, class "Lucar/nc2/dt/radial/Nids2Dataset;");

        $r15 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r15, class "Lucar/nc2/dt/radial/UF2Dataset;");

        $r16 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r16, class "Lucar/nc2/dt/trajectory/RafTrajectoryObsDataset;");

        $r17 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r17, class "Lucar/nc2/dt/trajectory/UnidataTrajectoryObsDataset;");

        $r18 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r18, class "Lucar/nc2/dt/trajectory/SimpleTrajectoryObsDataset;");

        $r19 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r19, class "Lucar/nc2/dt/trajectory/Float10TrajectoryObsDataset;");

        $r20 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r20, class "Lucar/nc2/dt/trajectory/ZebraClassTrajectoryObsDataset;");

        $r21 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        staticinvoke <ucar.nc2.dt.TypedDatasetFactory: void registerFactory(ucar.nc2.constants.FeatureType,java.lang.Class)>($r21, class "Lucar/nc2/dt/trajectory/ARMTrajectoryObsDataset;");

        <ucar.nc2.dt.TypedDatasetFactory: boolean userMode> = 1;

        return;
    }
}
