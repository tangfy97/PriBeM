public class ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider extends ucar.nc2.iosp.AbstractIOServiceProvider
{
    private static org.slf4j.Logger logger;
    private static final int MISSING_INT;
    private static final float MISSING_FLOAT;
    private ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan;
    private ucar.nc2.Dimension radialDim;
    private double radarRadius;
    private ucar.nc2.units.DateFormatter formatter;

    public void <init>()
    {
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r0;
        ucar.nc2.units.DateFormatter $r1;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        specialinvoke r0.<ucar.nc2.iosp.AbstractIOServiceProvider: void <init>()>();

        $r1 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r1.<ucar.nc2.units.DateFormatter: void <init>()>();

        r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.units.DateFormatter formatter> = $r1;

        return;
    }

    public boolean isValidFileOld(ucar.unidata.io.RandomAccessFile)
    {
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r9;
        ucar.unidata.io.RandomAccessFile r0;
        java.io.IOException $r8;
        int $i0, $i1, i2;
        ucar.nc2.iosp.nexrad2.NexradStationDB$Station $r7;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r1, $r2, $r6;

        r9 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

     label1:
        $r1 = virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: java.lang.String getLocation()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(47);

        i2 = $i0 + 1;

        if i2 >= 0 goto label2;

        i2 = 0;

     label2:
        $i1 = i2 + 4;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i2, $i1);

        staticinvoke <ucar.nc2.iosp.nexrad2.NexradStationDB: void init()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("K");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <ucar.nc2.iosp.nexrad2.NexradStationDB: ucar.nc2.iosp.nexrad2.NexradStationDB$Station get(java.lang.String)>($r6);

        if $r7 == null goto label4;

     label3:
        return 1;

     label4:
        return 0;

     label5:
        $r8 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label3 with label5;
    }

    public boolean isValidFile(ucar.unidata.io.RandomAccessFile)
    {
        byte[] $r1, $r2;
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r8;
        ucar.unidata.io.RandomAccessFile r0;
        java.util.Date $r3, $r11;
        short $s0, s5;
        int $i1, $i2, $i3, $i4, $i6;
        java.util.GregorianCalendar $r10;
        java.io.IOException $r7;
        java.util.SimpleTimeZone $r9;

        r8 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

     label1:
        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: void order(int)>(1);

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: void seek(long)>(0L);

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(14);

        $s0 = virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        if $s0 == 1 goto label3;

     label2:
        return 0;

     label3:
        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(12);

        $r1 = virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: byte[] readBytes(int)>(4);

        $i1 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: int bytesToInt(byte[],boolean)>($r1, 1);

        $r2 = virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: byte[] readBytes(int)>(2);

        $i2 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: int bytesToShort(byte[],boolean)>($r2, 1);

        s5 = (short) $i2;

        $i6 = (int) s5;

        $r3 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: java.util.Date getDate(int,int)>($i6, $i1);

        $r10 = new java.util.GregorianCalendar;

        $r9 = new java.util.SimpleTimeZone;

        specialinvoke $r9.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>(0, "GMT");

        specialinvoke $r10.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r9);

        virtualinvoke $r10.<java.util.Calendar: void clear()>();

        virtualinvoke $r10.<java.util.Calendar: void setTime(java.util.Date)>($r3);

        $i3 = virtualinvoke $r10.<java.util.Calendar: int get(int)>(1);

        $r11 = new java.util.Date;

        specialinvoke $r11.<java.util.Date: void <init>()>();

        virtualinvoke $r10.<java.util.Calendar: void setTime(java.util.Date)>($r11);

        $i4 = virtualinvoke $r10.<java.util.Calendar: int get(int)>(1);

        if $i3 < 1990 goto label4;

        if $i3 <= $i4 goto label5;

     label4:
        return 0;

     label5:
        return 1;

     label6:
        $r7 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
    }

    public static int bytesToInt(byte[], boolean)
    {
        byte[] r0;
        byte b0, b1, b2, b3;
        boolean z0;
        short $s4, $s5, $s8, $s11, $s14, $s16, $s17, $s20, $s24, $s25, $s28, $s30, $s32, $s34, $s36, $s38;
        int $i6, $i7, $i9, $i10, $i12, $i13, $i15, $i18, $i19, $i21, $i22, $i23, $i26, $i27, $i29, $i31, $i33, $i35, $i37, $i39;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        b0 = r0[0];

        b1 = r0[1];

        b2 = r0[2];

        b3 = r0[3];

        if z0 == 0 goto label1;

        $s24 = (short) b0;

        $s16 = $s24 & 255;

        $s25 = (short) b1;

        $s14 = $s25 & 255;

        $i26 = (int) $s14;

        $i15 = $i26 << 8;

        $i27 = (int) $s16;

        $i19 = $i27 + $i15;

        $s28 = (short) b2;

        $s17 = $s28 & 255;

        $i29 = (int) $s17;

        $i18 = $i29 << 16;

        $i22 = $i19 + $i18;

        $s30 = (short) b3;

        $s20 = $s30 & 255;

        $i31 = (int) $s20;

        $i21 = $i31 << 24;

        $i23 = $i22 + $i21;

        return $i23;

     label1:
        $s32 = (short) b0;

        $s4 = $s32 & 255;

        $i33 = (int) $s4;

        $i7 = $i33 << 24;

        $s34 = (short) b1;

        $s5 = $s34 & 255;

        $i35 = (int) $s5;

        $i6 = $i35 << 16;

        $i10 = $i7 + $i6;

        $s36 = (short) b2;

        $s8 = $s36 & 255;

        $i37 = (int) $s8;

        $i9 = $i37 << 8;

        $i12 = $i10 + $i9;

        $s38 = (short) b3;

        $s11 = $s38 & 255;

        $i39 = (int) $s11;

        $i13 = $i12 + $i39;

        return $i13;
    }

    public static int bytesToShort(byte[], boolean)
    {
        byte[] r0;
        short $s2, $s3, $s7, $s9, $s11, $s12, $s15, $s17;
        byte b0, b1;
        int $i4, $i5, $i6, $i8, $i10, $i13, $i14, $i16, $i18;
        boolean z0;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        b0 = r0[0];

        b1 = r0[1];

        if z0 == 0 goto label1;

        $s11 = (short) b0;

        $s9 = $s11 & 255;

        $s12 = (short) b1;

        $s7 = $s12 & 255;

        $i13 = (int) $s7;

        $i8 = $i13 << 8;

        $i14 = (int) $s9;

        $i10 = $i14 + $i8;

        return $i10;

     label1:
        $s15 = (short) b0;

        $s2 = $s15 & 255;

        $i16 = (int) $s2;

        $i5 = $i16 << 24;

        $s17 = (short) b1;

        $s3 = $s17 & 255;

        $i18 = (int) $s3;

        $i4 = $i18 << 16;

        $i6 = $i5 + $i4;

        return $i6;
    }

    public java.lang.String getFileTypeId()
    {
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r0;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        return "CINRAD";
    }

    public java.lang.String getFileTypeDescription()
    {
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r0;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        return "Chinese Level-II Base Data";
    }

    public void open(ucar.unidata.io.RandomAccessFile, ucar.nc2.NetcdfFile, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        java.lang.Integer $r55;
        byte $b4;
        ucar.nc2.iosp.cinrad.Cinrad2VolumeScan $r1, $r4, $r6, $r9, $r11, $r12, $r15, $r20, $r23, $r27, $r35, $r39, $r44, $r52, $r56, $r60, $r63, $r67, $r70, $r73, $r76, $r79, $r80, $r83, $r86, $r92, $r95, $r98;
        ucar.nc2.Attribute $r18, $r19, $r22, $r26, $r30, $r31, $r32, $r49, $r50, $r51, $r54, $r57, $r59, $r62, $r65, $r68, $r71, $r74, $r77, $r81, $r84, $r89, $r90, $r93, $r96, $r99, $r100;
        java.lang.StringBuilder $r33, $r34, $r37, $r38, $r42, $r43, $r47;
        ucar.ma2.Array $r105;
        java.util.Date $r24, $r28, $r40, $r45;
        int[] $r104;
        ucar.ma2.DataType $r88, $r101;
        ucar.nc2.units.DateFormatter $r17;
        int $i0, $i1, $i2, $i3;
        ucar.nc2.Variable $r14, $r87;
        java.lang.Class $r102;
        ucar.nc2.util.CancelTask r3;
        java.lang.Double $r58, $r66, $r69, $r72, $r75, $r78, $r82, $r85, $r91, $r94, $r97;
        java.lang.String $r16, $r21, $r25, $r29, $r36, $r41, $r46, $r48, $r53, $r61, $r64;
        char[] $r103;
        ucar.nc2.Dimension $r5, $r8;
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r0;
        java.lang.IllegalStateException $r106;
        ucar.unidata.io.RandomAccessFile r2;
        boolean $z0;
        java.util.List $r10, $r13;
        ucar.nc2.NetcdfFile r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        r2 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r7 := @parameter1: ucar.nc2.NetcdfFile;

        r3 := @parameter2: ucar.nc2.util.CancelTask;

        staticinvoke <ucar.nc2.iosp.nexrad2.NexradStationDB: void init()>();

        $r1 = new ucar.nc2.iosp.cinrad.Cinrad2VolumeScan;

        specialinvoke $r1.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: void <init>(ucar.unidata.io.RandomAccessFile,ucar.nc2.util.CancelTask)>(r2, r3);

        r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan> = $r1;

        $r4 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $z0 = virtualinvoke $r4.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: boolean hasDifferentDopplarResolutions()>();

        if $z0 == 0 goto label1;

        $r106 = new java.lang.IllegalStateException;

        specialinvoke $r106.<java.lang.IllegalStateException: void <init>(java.lang.String)>("volScan.hasDifferentDopplarResolutions");

        throw $r106;

     label1:
        $r5 = new ucar.nc2.Dimension;

        $r6 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $i0 = virtualinvoke $r6.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: int getMaxRadials()>();

        specialinvoke $r5.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>("radial", $i0);

        r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.Dimension radialDim> = $r5;

        $r8 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.Dimension radialDim>;

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension addDimension(ucar.nc2.Group,ucar.nc2.Dimension)>(null, $r8);

        $r9 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r10 = virtualinvoke $r9.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.util.List getReflectivityGroups()>();

        virtualinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.Variable makeVariable(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,java.util.List)>(r7, 1, "Reflectivity", "Reflectivity", "R", $r10);

        $r11 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $i1 = virtualinvoke $r11.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: int getDopplarResolution()>();

        if $i1 != 2 goto label2;

        $b4 = 2;

        goto label3;

     label2:
        $b4 = 4;

     label3:
        $r12 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r13 = virtualinvoke $r12.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.util.List getVelocityGroups()>();

        $r14 = virtualinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.Variable makeVariable(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,java.util.List)>(r7, $b4, "RadialVelocity", "Radial Velocity", "V", $r13);

        specialinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: void makeVariableNoCoords(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,ucar.nc2.Variable)>(r7, 3, "SpectrumWidth", "Spectrum Width", $r14);

        $r15 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r16 = virtualinvoke $r15.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.lang.String getStationId()>();

        if $r16 == null goto label4;

        $r59 = new ucar.nc2.Attribute;

        $r60 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r61 = virtualinvoke $r60.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.lang.String getStationId()>();

        specialinvoke $r59.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("Station", $r61);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r59);

        $r62 = new ucar.nc2.Attribute;

        $r63 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r64 = virtualinvoke $r63.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.lang.String getStationName()>();

        specialinvoke $r62.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("StationName", $r64);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r62);

        $r65 = new ucar.nc2.Attribute;

        $r66 = new java.lang.Double;

        $r67 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d0 = virtualinvoke $r67.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationLatitude()>();

        specialinvoke $r66.<java.lang.Double: void <init>(double)>($d0);

        specialinvoke $r65.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("StationLatitude", $r66);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r65);

        $r68 = new ucar.nc2.Attribute;

        $r69 = new java.lang.Double;

        $r70 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d1 = virtualinvoke $r70.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationLongitude()>();

        specialinvoke $r69.<java.lang.Double: void <init>(double)>($d1);

        specialinvoke $r68.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("StationLongitude", $r69);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r68);

        $r71 = new ucar.nc2.Attribute;

        $r72 = new java.lang.Double;

        $r73 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d2 = virtualinvoke $r73.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationElevation()>();

        specialinvoke $r72.<java.lang.Double: void <init>(double)>($d2);

        specialinvoke $r71.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("StationElevationInMeters", $r72);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r71);

        $d3 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: double radarRadius>;

        $d4 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d5 = $d3 / $d4;

        $d6 = staticinvoke <java.lang.Math: double toDegrees(double)>($d5);

        $r74 = new ucar.nc2.Attribute;

        $r75 = new java.lang.Double;

        $r76 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d7 = virtualinvoke $r76.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationLatitude()>();

        $d8 = $d7 - $d6;

        specialinvoke $r75.<java.lang.Double: void <init>(double)>($d8);

        specialinvoke $r74.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lat_min", $r75);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r74);

        $r77 = new ucar.nc2.Attribute;

        $r78 = new java.lang.Double;

        $r79 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d9 = virtualinvoke $r79.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationLatitude()>();

        $d10 = $d9 + $d6;

        specialinvoke $r78.<java.lang.Double: void <init>(double)>($d10);

        specialinvoke $r77.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lat_max", $r78);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r77);

        $r80 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d11 = virtualinvoke $r80.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationLatitude()>();

        $d12 = staticinvoke <java.lang.Math: double toRadians(double)>($d11);

        $d13 = staticinvoke <java.lang.Math: double cos(double)>($d12);

        $d14 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: double radarRadius>;

        $d15 = $d14 / $d13;

        $d16 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d17 = $d15 / $d16;

        $d18 = staticinvoke <java.lang.Math: double toDegrees(double)>($d17);

        $r81 = new ucar.nc2.Attribute;

        $r82 = new java.lang.Double;

        $r83 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d19 = virtualinvoke $r83.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationLongitude()>();

        $d20 = $d19 - $d18;

        specialinvoke $r82.<java.lang.Double: void <init>(double)>($d20);

        specialinvoke $r81.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lon_min", $r82);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r81);

        $r84 = new ucar.nc2.Attribute;

        $r85 = new java.lang.Double;

        $r86 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d21 = virtualinvoke $r86.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationLongitude()>();

        $d22 = $d21 + $d18;

        specialinvoke $r85.<java.lang.Double: void <init>(double)>($d22);

        specialinvoke $r84.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lon_max", $r85);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r84);

        $r87 = new ucar.nc2.Variable;

        specialinvoke $r87.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r7, null, null, "radialCoordinateTransform");

        $r88 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        virtualinvoke $r87.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r88);

        virtualinvoke $r87.<ucar.nc2.Variable: void setDimensions(java.lang.String)>("");

        $r89 = new ucar.nc2.Attribute;

        specialinvoke $r89.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("transform_name", "Radial");

        virtualinvoke $r87.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r89);

        $r90 = new ucar.nc2.Attribute;

        $r91 = new java.lang.Double;

        $r92 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d23 = virtualinvoke $r92.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationLatitude()>();

        specialinvoke $r91.<java.lang.Double: void <init>(double)>($d23);

        specialinvoke $r90.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("center_latitude", $r91);

        virtualinvoke $r87.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r90);

        $r93 = new ucar.nc2.Attribute;

        $r94 = new java.lang.Double;

        $r95 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d24 = virtualinvoke $r95.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationLongitude()>();

        specialinvoke $r94.<java.lang.Double: void <init>(double)>($d24);

        specialinvoke $r93.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("center_longitude", $r94);

        virtualinvoke $r87.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r93);

        $r96 = new ucar.nc2.Attribute;

        $r97 = new java.lang.Double;

        $r98 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $d25 = virtualinvoke $r98.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: double getStationElevation()>();

        specialinvoke $r97.<java.lang.Double: void <init>(double)>($d25);

        specialinvoke $r96.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("center_elevation", $r97);

        virtualinvoke $r87.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r96);

        $r99 = new ucar.nc2.Attribute;

        specialinvoke $r99.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateTransformType", "Radial");

        virtualinvoke $r87.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r99);

        $r100 = new ucar.nc2.Attribute;

        specialinvoke $r100.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisTypes", "RadialElevation RadialAzimuth RadialDistance");

        virtualinvoke $r87.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r100);

        $r101 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        $r102 = virtualinvoke $r101.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r104 = newarray (int)[0];

        $r103 = newarray (char)[1];

        $r103[0] = 32;

        $r105 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r102, $r104, $r103);

        virtualinvoke $r87.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r105, 1);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r87);

     label4:
        $r17 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r17.<ucar.nc2.units.DateFormatter: void <init>()>();

        $r18 = new ucar.nc2.Attribute;

        specialinvoke $r18.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("Conventions", "_Coordinates");

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r18);

        $r19 = new ucar.nc2.Attribute;

        $r20 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r21 = virtualinvoke $r20.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.lang.String getDataFormat()>();

        specialinvoke $r19.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("format", $r21);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r19);

        $r22 = new ucar.nc2.Attribute;

        $r23 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r24 = virtualinvoke $r23.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.util.Date getStartDate()>();

        $r25 = virtualinvoke $r17.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r24);

        specialinvoke $r22.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("time_coverage_start", $r25);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r22);

        $r26 = new ucar.nc2.Attribute;

        $r27 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r28 = virtualinvoke $r27.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.util.Date getEndDate()>();

        $r29 = virtualinvoke $r17.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r28);

        specialinvoke $r26.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("time_coverage_end", $r29);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r26);

        $r30 = new ucar.nc2.Attribute;

        specialinvoke $r30.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("history", "Direct read of Nexrad Level 2 file into NetCDF-Java 2.2 API");

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r30);

        $r31 = new ucar.nc2.Attribute;

        specialinvoke $r31.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("DataType", "Radial");

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r31);

        $r32 = new ucar.nc2.Attribute;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nexrad Level 2 Station ");

        $r35 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r36 = virtualinvoke $r35.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.lang.String getStationId()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r39 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r40 = virtualinvoke $r39.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.util.Date getStartDate()>();

        $r41 = virtualinvoke $r17.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r40);

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r44 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r45 = virtualinvoke $r44.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.util.Date getEndDate()>();

        $r46 = virtualinvoke $r17.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r45);

        $r47 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("Title", $r48);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r32);

        $r49 = new ucar.nc2.Attribute;

        specialinvoke $r49.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("Summary", "Weather Surveillance Radar-1988 Doppler (WSR-88D) Level II data are the three meteorological base data quantities: reflectivity, mean radial velocity, and spectrum width.");

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r49);

        $r50 = new ucar.nc2.Attribute;

        specialinvoke $r50.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("keywords", "WSR-88D; NEXRAD; Radar Level II; reflectivity; mean radial velocity; spectrum width");

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r50);

        $r51 = new ucar.nc2.Attribute;

        $r52 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $i2 = virtualinvoke $r52.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: int getVCP()>();

        $r53 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String getVolumeCoveragePatternName(int)>($i2);

        specialinvoke $r51.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("VolumeCoveragePatternName", $r53);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r51);

        $r54 = new ucar.nc2.Attribute;

        $r55 = new java.lang.Integer;

        $r56 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $i3 = virtualinvoke $r56.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: int getVCP()>();

        specialinvoke $r55.<java.lang.Integer: void <init>(int)>($i3);

        specialinvoke $r54.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("VolumeCoveragePattern", $r55);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r54);

        $r57 = new ucar.nc2.Attribute;

        $r58 = new java.lang.Double;

        specialinvoke $r58.<java.lang.Double: void <init>(double)>(1.5);

        specialinvoke $r57.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("HorizonatalBeamWidthInDegrees", $r58);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r57);

        virtualinvoke r7.<ucar.nc2.NetcdfFile: void finish()>();

        return;
    }

    public ucar.nc2.Variable makeVariable(ucar.nc2.NetcdfFile, int, java.lang.String, java.lang.String, java.lang.String, java.util.List) throws java.io.IOException
    {
        byte[] r27;
        java.lang.Integer $r165;
        ucar.nc2.iosp.cinrad.Cinrad2VolumeScan $r48;
        ucar.nc2.Attribute $r149, $r150, $r151, $r153, $r155, $r157, $r158, $r163, $r164, $r166, $r167, $r170, $r171, $r173, $r174, $r177, $r178, $r180, $r181, $r184, $r185, $r186, $r189, $r192, $r194;
        java.lang.StringBuilder $r6, $r8, $r11, $r12, $r43, $r44, $r51, $r54, $r64, $r65, $r77, $r78, $r90, $r91, $r103, $r104, $r111, $r112, $r119, $r120, $r121, $r122, $r123, $r124, $r125, $r138, $r139, $r141, $r143, $r144, $r160, $r162, $r168, $r175, $r182, $r187, $r190, $r193;
        short $s12;
        ucar.ma2.Array $r31, $r96;
        java.util.Date $r49;
        int[] $r30;
        ucar.ma2.DataType $r22, $r28, $r47, $r68, $r81, $r94, $r95, $r107, $r115;
        ucar.nc2.units.DateFormatter $r52;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, $i17, $i18;
        ucar.nc2.Variable $r148, $r161, $r169, $r176, $r183, $r188, $r191;
        java.lang.Object $r1, $r3, $r132, $r134;
        java.lang.Class $r29;
        java.lang.Float $r154, $r156, $r172, $r179;
        ucar.nc2.constants.AxisType $r61, $r74, $r87, $r100;
        ucar.nc2.iosp.cinrad.Cinrad2Record r4, r135;
        java.util.ArrayList $r147, $r159;
        java.lang.String r7, $r9, $r13, r21, $r24, r26, $r45, $r53, $r55, $r62, $r66, $r75, $r79, $r88, $r92, $r101, $r105, $r108, $r113, $r116, $r126, $r140;
        ucar.nc2.Dimension $r19, $r41, $r128, $r145, $r146;
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r18;
        java.lang.IllegalStateException $r142;
        java.lang.Byte $r152;
        ucar.nc2.iosp.cinrad.Cinrad2Record[][] r129;
        ucar.nc2.iosp.cinrad.Cinrad2Record[] r131;
        java.util.List r0, r2, r133;
        float $f0, $f1;
        ucar.nc2.NetcdfFile r16;
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup $r195;
        double $d0, $d1, $d2;

        r18 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        r16 := @parameter0: ucar.nc2.NetcdfFile;

        i1 := @parameter1: int;

        r21 := @parameter2: java.lang.String;

        r26 := @parameter3: java.lang.String;

        r7 := @parameter4: java.lang.String;

        r0 := @parameter5: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r142 = new java.lang.IllegalStateException;

        $r141 = new java.lang.StringBuilder;

        specialinvoke $r141.<java.lang.StringBuilder: void <init>()>();

        $r138 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No data for ");

        $r139 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r140 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r142.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r140);

        throw $r142;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (java.util.List) $r1;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (ucar.nc2.iosp.cinrad.Cinrad2Record) $r3;

        $i2 = virtualinvoke r4.<ucar.nc2.iosp.cinrad.Cinrad2Record: int getGateCount(int)>(i1);

        $r143 = new java.lang.StringBuilder;

        specialinvoke $r143.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("scan");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r144 = new java.lang.StringBuilder;

        specialinvoke $r144.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gate");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r145 = new ucar.nc2.Dimension;

        specialinvoke $r145.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>($r9, $i0);

        $r146 = new ucar.nc2.Dimension;

        specialinvoke $r146.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>($r13, $i2);

        virtualinvoke r16.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension addDimension(ucar.nc2.Group,ucar.nc2.Dimension)>(null, $r145);

        virtualinvoke r16.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension addDimension(ucar.nc2.Group,ucar.nc2.Dimension)>(null, $r146);

        $r147 = new java.util.ArrayList;

        specialinvoke $r147.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r147.<java.util.ArrayList: boolean add(java.lang.Object)>($r145);

        $r19 = r18.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.Dimension radialDim>;

        virtualinvoke $r147.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        virtualinvoke $r147.<java.util.ArrayList: boolean add(java.lang.Object)>($r146);

        $r148 = new ucar.nc2.Variable;

        specialinvoke $r148.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r16, null, null, r21);

        $r22 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        virtualinvoke $r148.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r22);

        virtualinvoke $r148.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r147);

        virtualinvoke r16.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r148);

        $r149 = new ucar.nc2.Attribute;

        $r24 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String getDatatypeUnits(int)>(i1);

        specialinvoke $r149.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r24);

        virtualinvoke $r148.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r149);

        $r150 = new ucar.nc2.Attribute;

        specialinvoke $r150.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", r26);

        virtualinvoke $r148.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r150);

        r27 = newarray (byte)[2];

        r27[0] = 1;

        r27[1] = 0;

        $r28 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        $r29 = virtualinvoke $r28.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r30 = newarray (int)[1];

        $r30[0] = 2;

        $r31 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r29, $r30, r27);

        $r151 = new ucar.nc2.Attribute;

        specialinvoke $r151.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>("missing_value", $r31);

        virtualinvoke $r148.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r151);

        $r153 = new ucar.nc2.Attribute;

        $r152 = new java.lang.Byte;

        specialinvoke $r152.<java.lang.Byte: void <init>(byte)>(0);

        specialinvoke $r153.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("signal_below_threshold", $r152);

        virtualinvoke $r148.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r153);

        $r155 = new ucar.nc2.Attribute;

        $r154 = new java.lang.Float;

        $f0 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: float getDatatypeScaleFactor(int)>(i1);

        specialinvoke $r154.<java.lang.Float: void <init>(float)>($f0);

        specialinvoke $r155.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("scale_factor", $r154);

        virtualinvoke $r148.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r155);

        $r157 = new ucar.nc2.Attribute;

        $r156 = new java.lang.Float;

        $f1 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: float getDatatypeAddOffset(int)>(i1);

        specialinvoke $r156.<java.lang.Float: void <init>(float)>($f1);

        specialinvoke $r157.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("add_offset", $r156);

        virtualinvoke $r148.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r157);

        $r158 = new ucar.nc2.Attribute;

        specialinvoke $r158.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_Unsigned", "true");

        virtualinvoke $r148.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r158);

        $r159 = new java.util.ArrayList;

        specialinvoke $r159.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r159.<java.util.ArrayList: boolean add(java.lang.Object)>($r145);

        $r41 = r18.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.Dimension radialDim>;

        virtualinvoke $r159.<java.util.ArrayList: boolean add(java.lang.Object)>($r41);

        $r160 = new java.lang.StringBuilder;

        specialinvoke $r160.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("time");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r161 = new ucar.nc2.Variable;

        specialinvoke $r161.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r16, null, null, $r45);

        $r47 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        virtualinvoke $r161.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r47);

        virtualinvoke $r161.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r159);

        virtualinvoke r16.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r161);

        $r48 = r18.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r49 = virtualinvoke $r48.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: java.util.Date getStartDate()>();

        $r162 = new java.lang.StringBuilder;

        specialinvoke $r162.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("msecs since ");

        $r52 = r18.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.units.DateFormatter formatter>;

        $r53 = virtualinvoke $r52.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r49);

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        $r163 = new ucar.nc2.Attribute;

        specialinvoke $r163.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "time since base date");

        virtualinvoke $r161.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r163);

        $r164 = new ucar.nc2.Attribute;

        specialinvoke $r164.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r55);

        virtualinvoke $r161.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r164);

        $r166 = new ucar.nc2.Attribute;

        $r165 = new java.lang.Integer;

        $i17 = (int) -9999;

        specialinvoke $r165.<java.lang.Integer: void <init>(int)>($i17);

        specialinvoke $r166.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("missing_value", $r165);

        virtualinvoke $r161.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r166);

        $r167 = new ucar.nc2.Attribute;

        $r61 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        $r62 = virtualinvoke $r61.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r167.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r62);

        virtualinvoke $r161.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r167);

        $r168 = new java.lang.StringBuilder;

        specialinvoke $r168.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elevation");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        $r169 = new ucar.nc2.Variable;

        specialinvoke $r169.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r16, null, null, $r66);

        $r68 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        virtualinvoke $r169.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r68);

        virtualinvoke $r169.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r159);

        virtualinvoke r16.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r169);

        $r170 = new ucar.nc2.Attribute;

        specialinvoke $r170.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees");

        virtualinvoke $r169.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r170);

        $r171 = new ucar.nc2.Attribute;

        specialinvoke $r171.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "elevation angle in degres: 0 = parallel to pedestal base, 90 = perpendicular");

        virtualinvoke $r169.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r171);

        $r173 = new ucar.nc2.Attribute;

        $r172 = new java.lang.Float;

        specialinvoke $r172.<java.lang.Float: void <init>(float)>(#NaNF);

        specialinvoke $r173.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("missing_value", $r172);

        virtualinvoke $r169.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r173);

        $r174 = new ucar.nc2.Attribute;

        $r74 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType RadialElevation>;

        $r75 = virtualinvoke $r74.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r174.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r75);

        virtualinvoke $r169.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r174);

        $r175 = new java.lang.StringBuilder;

        specialinvoke $r175.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("azimuth");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        $r176 = new ucar.nc2.Variable;

        specialinvoke $r176.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r16, null, null, $r79);

        $r81 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        virtualinvoke $r176.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r81);

        virtualinvoke $r176.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r159);

        virtualinvoke r16.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r176);

        $r177 = new ucar.nc2.Attribute;

        specialinvoke $r177.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees");

        virtualinvoke $r176.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r177);

        $r178 = new ucar.nc2.Attribute;

        specialinvoke $r178.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "azimuth angle in degrees: 0 = true north, 90 = east");

        virtualinvoke $r176.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r178);

        $r180 = new ucar.nc2.Attribute;

        $r179 = new java.lang.Float;

        specialinvoke $r179.<java.lang.Float: void <init>(float)>(#NaNF);

        specialinvoke $r180.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("missing_value", $r179);

        virtualinvoke $r176.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r180);

        $r181 = new ucar.nc2.Attribute;

        $r87 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType RadialAzimuth>;

        $r88 = virtualinvoke $r87.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r181.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r88);

        virtualinvoke $r176.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r181);

        $r182 = new java.lang.StringBuilder;

        specialinvoke $r182.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("distance");

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        $r183 = new ucar.nc2.Variable;

        specialinvoke $r183.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r16, null, null, $r92);

        $r94 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        virtualinvoke $r183.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r94);

        virtualinvoke $r183.<ucar.nc2.Variable: void setDimensions(java.lang.String)>($r13);

        $r95 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        $i3 = virtualinvoke r4.<ucar.nc2.iosp.cinrad.Cinrad2Record: int getGateStart(int)>(i1);

        $d0 = (double) $i3;

        $i4 = virtualinvoke r4.<ucar.nc2.iosp.cinrad.Cinrad2Record: int getGateSize(int)>(i1);

        $d1 = (double) $i4;

        $r96 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array makeArray(ucar.ma2.DataType,int,double,double)>($r95, $i2, $d0, $d1);

        virtualinvoke $r183.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r96, 0);

        virtualinvoke r16.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r183);

        $i5 = virtualinvoke r4.<ucar.nc2.iosp.cinrad.Cinrad2Record: int getGateStart(int)>(i1);

        $i6 = virtualinvoke r4.<ucar.nc2.iosp.cinrad.Cinrad2Record: int getGateSize(int)>(i1);

        $i7 = $i2 * $i6;

        $i8 = $i5 + $i7;

        $d2 = (double) $i8;

        r18.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: double radarRadius> = $d2;

        $r184 = new ucar.nc2.Attribute;

        specialinvoke $r184.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "m");

        virtualinvoke $r183.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r184);

        $r185 = new ucar.nc2.Attribute;

        specialinvoke $r185.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "radial distance to start of gate");

        virtualinvoke $r183.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r185);

        $r186 = new ucar.nc2.Attribute;

        $r100 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType RadialDistance>;

        $r101 = virtualinvoke $r100.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r186.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r101);

        virtualinvoke $r183.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r186);

        $r187 = new java.lang.StringBuilder;

        specialinvoke $r187.<java.lang.StringBuilder: void <init>()>();

        $r103 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numRadials");

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        $r188 = new ucar.nc2.Variable;

        specialinvoke $r188.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r16, null, null, $r105);

        $r107 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        virtualinvoke $r188.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r107);

        $r108 = virtualinvoke $r145.<ucar.nc2.Dimension: java.lang.String getName()>();

        virtualinvoke $r188.<ucar.nc2.Variable: void setDimensions(java.lang.String)>($r108);

        $r189 = new ucar.nc2.Attribute;

        specialinvoke $r189.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "number of valid radials in this scan");

        virtualinvoke $r188.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r189);

        virtualinvoke r16.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r188);

        $r190 = new java.lang.StringBuilder;

        specialinvoke $r190.<java.lang.StringBuilder: void <init>()>();

        $r111 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numGates");

        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        $r191 = new ucar.nc2.Variable;

        specialinvoke $r191.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r16, null, null, $r113);

        $r115 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        virtualinvoke $r191.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r115);

        $r116 = virtualinvoke $r145.<ucar.nc2.Dimension: java.lang.String getName()>();

        virtualinvoke $r191.<ucar.nc2.Variable: void setDimensions(java.lang.String)>($r116);

        $r192 = new ucar.nc2.Attribute;

        specialinvoke $r192.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "number of valid gates in this scan");

        virtualinvoke $r191.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r192);

        virtualinvoke r16.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r191);

        specialinvoke r18.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: void makeCoordinateDataWithMissing(int,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,java.util.List)>(i1, $r161, $r169, $r176, $r188, $r191, r0);

        $r193 = new java.lang.StringBuilder;

        specialinvoke $r193.<java.lang.StringBuilder: void <init>()>();

        $r119 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r79);

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.String toString()>();

        $r194 = new ucar.nc2.Attribute;

        specialinvoke $r194.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxes", $r126);

        virtualinvoke $r148.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r194);

        $r128 = r18.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.Dimension radialDim>;

        $i9 = virtualinvoke $r128.<ucar.nc2.Dimension: int getLength()>();

        r129 = newmultiarray (ucar.nc2.iosp.cinrad.Cinrad2Record)[$i0][$i9];

        i14 = 0;

     label2:
        $i10 = interfaceinvoke r0.<java.util.List: int size()>();

        if i14 >= $i10 goto label5;

        r131 = r129[i14];

        $r132 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i14);

        r133 = (java.util.List) $r132;

        i15 = 0;

     label3:
        $i11 = interfaceinvoke r133.<java.util.List: int size()>();

        if i15 >= $i11 goto label4;

        $r134 = interfaceinvoke r133.<java.util.List: java.lang.Object get(int)>(i15);

        r135 = (ucar.nc2.iosp.cinrad.Cinrad2Record) $r134;

        $s12 = r135.<ucar.nc2.iosp.cinrad.Cinrad2Record: short radial_num>;

        $i18 = (int) $s12;

        i13 = $i18 - 1;

        r131[i13] = r135;

        i15 = i15 + 1;

        goto label3;

     label4:
        i14 = i14 + 1;

        goto label2;

     label5:
        $r195 = new ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup;

        specialinvoke $r195.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup: void <init>(ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider,int,ucar.nc2.iosp.cinrad.Cinrad2Record[][])>(r18, i1, r129);

        virtualinvoke $r148.<ucar.nc2.Variable: void setSPobject(java.lang.Object)>($r195);

        return $r148;
    }

    private void makeVariableNoCoords(ucar.nc2.NetcdfFile, int, java.lang.String, java.lang.String, ucar.nc2.Variable)
    {
        byte[] r10;
        java.lang.Float $r19, $r21;
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r28;
        int[] $r13;
        java.lang.Byte $r17;
        ucar.nc2.iosp.cinrad.Cinrad2Record[][] $r29;
        ucar.ma2.DataType $r3, $r11;
        java.util.List $r5;
        ucar.nc2.Attribute $r6, $r8, $r15, $r16, $r18, $r20, $r22, $r23, $r24;
        float $f0, $f1;
        ucar.nc2.NetcdfFile r1;
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup r26, $r27;
        int i0;
        ucar.nc2.Variable $r0, r4;
        java.lang.String r2, $r7, r9;
        ucar.ma2.Array $r14;
        java.lang.Class $r12;
        java.lang.Object $r25;

        r28 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        r1 := @parameter0: ucar.nc2.NetcdfFile;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r9 := @parameter3: java.lang.String;

        r4 := @parameter4: ucar.nc2.Variable;

        $r0 = new ucar.nc2.Variable;

        specialinvoke $r0.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r1, null, null, r2);

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        virtualinvoke $r0.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r3);

        $r5 = virtualinvoke r4.<ucar.nc2.Variable: java.util.List getDimensions()>();

        virtualinvoke $r0.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r5);

        virtualinvoke r1.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r0);

        $r6 = new ucar.nc2.Attribute;

        $r7 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: java.lang.String getDatatypeUnits(int)>(i0);

        specialinvoke $r6.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r7);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r6);

        $r8 = new ucar.nc2.Attribute;

        specialinvoke $r8.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", r9);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r8);

        r10 = newarray (byte)[2];

        r10[0] = 1;

        r10[1] = 0;

        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        $r12 = virtualinvoke $r11.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r13 = newarray (int)[1];

        $r13[0] = 2;

        $r14 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r12, $r13, r10);

        $r15 = new ucar.nc2.Attribute;

        specialinvoke $r15.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>("missing_value", $r14);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r15);

        $r16 = new ucar.nc2.Attribute;

        $r17 = new java.lang.Byte;

        specialinvoke $r17.<java.lang.Byte: void <init>(byte)>(0);

        specialinvoke $r16.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("signal_below_threshold", $r17);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r16);

        $r18 = new ucar.nc2.Attribute;

        $r19 = new java.lang.Float;

        $f0 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: float getDatatypeScaleFactor(int)>(i0);

        specialinvoke $r19.<java.lang.Float: void <init>(float)>($f0);

        specialinvoke $r18.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("scale_factor", $r19);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r18);

        $r20 = new ucar.nc2.Attribute;

        $r21 = new java.lang.Float;

        $f1 = staticinvoke <ucar.nc2.iosp.cinrad.Cinrad2Record: float getDatatypeAddOffset(int)>(i0);

        specialinvoke $r21.<java.lang.Float: void <init>(float)>($f1);

        specialinvoke $r20.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("add_offset", $r21);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r20);

        $r22 = new ucar.nc2.Attribute;

        specialinvoke $r22.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_Unsigned", "true");

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r22);

        $r23 = virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("_CoordinateAxes");

        $r24 = new ucar.nc2.Attribute;

        specialinvoke $r24.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.nc2.Attribute)>("_CoordinateAxes", $r23);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r24);

        $r25 = virtualinvoke r4.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r26 = (ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup) $r25;

        $r27 = new ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup;

        $r29 = r26.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup: ucar.nc2.iosp.cinrad.Cinrad2Record[][] map>;

        specialinvoke $r27.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup: void <init>(ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider,int,ucar.nc2.iosp.cinrad.Cinrad2Record[][])>(r28, i0, $r29);

        virtualinvoke $r0.<ucar.nc2.Variable: void setSPobject(java.lang.Object)>($r27);

        return;
    }

    private void makeCoordinateData(int, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, java.util.List)
    {
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r31;
        int[] $r3, $r9, $r15, $r21, $r27;
        ucar.nc2.iosp.cinrad.Cinrad2VolumeScan $r32;
        ucar.ma2.DataType $r1, $r7, $r13, $r19, $r25;
        java.util.List r30, r34;
        float $f0, $f1;
        java.lang.StringBuilder $r39, $r40, $r43;
        ucar.nc2.iosp.cinrad.Cinrad2Record r36, r42;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, $i13;
        ucar.nc2.Variable r0, r6, r12, r18, r24;
        java.lang.String $r41;
        org.slf4j.Logger $r38;
        ucar.ma2.IndexIterator $r5, $r11, $r17, $r23, $r29;
        ucar.ma2.Array $r4, $r10, $r16, $r22, $r28;
        java.lang.Class $r2, $r8, $r14, $r20, $r26;
        java.lang.Object $r33, $r35;

        r31 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        i3 := @parameter0: int;

        r0 := @parameter1: ucar.nc2.Variable;

        r6 := @parameter2: ucar.nc2.Variable;

        r12 := @parameter3: ucar.nc2.Variable;

        r18 := @parameter4: ucar.nc2.Variable;

        r24 := @parameter5: ucar.nc2.Variable;

        r30 := @parameter6: java.util.List;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r2 = virtualinvoke $r1.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r2, $r3);

        $r5 = virtualinvoke $r4.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r7 = virtualinvoke r6.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r7.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r9 = virtualinvoke r6.<ucar.nc2.Variable: int[] getShape()>();

        $r10 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r8, $r9);

        $r11 = virtualinvoke $r10.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r13 = virtualinvoke r12.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r14 = virtualinvoke $r13.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r15 = virtualinvoke r12.<ucar.nc2.Variable: int[] getShape()>();

        $r16 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r14, $r15);

        $r17 = virtualinvoke $r16.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r19 = virtualinvoke r18.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r20 = virtualinvoke $r19.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r21 = virtualinvoke r18.<ucar.nc2.Variable: int[] getShape()>();

        $r22 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r20, $r21);

        $r23 = virtualinvoke $r22.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r25 = virtualinvoke r24.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r26 = virtualinvoke $r25.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r27 = virtualinvoke r24.<ucar.nc2.Variable: int[] getShape()>();

        $r28 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r26, $r27);

        $r29 = virtualinvoke $r28.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        i8 = -2147483648;

        $i0 = interfaceinvoke r30.<java.util.List: int size()>();

        $r32 = r31.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $i1 = virtualinvoke $r32.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: int getMaxRadials()>();

        i9 = 0;

     label1:
        if i9 >= $i0 goto label8;

        $r33 = interfaceinvoke r30.<java.util.List: java.lang.Object get(int)>(i9);

        r34 = (java.util.List) $r33;

        $i2 = interfaceinvoke r34.<java.util.List: int size()>();

        r42 = null;

        i10 = 0;

     label2:
        if i10 >= $i2 goto label5;

        $r35 = interfaceinvoke r34.<java.util.List: java.lang.Object get(int)>(i10);

        r36 = (ucar.nc2.iosp.cinrad.Cinrad2Record) $r35;

        if r42 != null goto label3;

        r42 = r36;

     label3:
        $i5 = r36.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs>;

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setIntNext(int)>($i5);

        $f0 = virtualinvoke r36.<ucar.nc2.iosp.cinrad.Cinrad2Record: float getElevation()>();

        interfaceinvoke $r11.<ucar.ma2.IndexIterator: void setFloatNext(float)>($f0);

        $f1 = virtualinvoke r36.<ucar.nc2.iosp.cinrad.Cinrad2Record: float getAzimuth()>();

        interfaceinvoke $r17.<ucar.ma2.IndexIterator: void setFloatNext(float)>($f1);

        $i6 = r36.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs>;

        if $i6 >= i8 goto label4;

        $r38 = <ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: org.slf4j.Logger logger>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("makeCoordinateData time out of order ");

        $i7 = r36.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs>;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.slf4j.Logger: void warn(java.lang.String)>($r41);

     label4:
        i8 = r36.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs>;

        i10 = i10 + 1;

        goto label2;

     label5:
        i11 = $i2;

     label6:
        if i11 >= $i1 goto label7;

        $i13 = (int) -9999;

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setIntNext(int)>($i13);

        interfaceinvoke $r11.<ucar.ma2.IndexIterator: void setFloatNext(float)>(#NaNF);

        interfaceinvoke $r17.<ucar.ma2.IndexIterator: void setFloatNext(float)>(#NaNF);

        i11 = i11 + 1;

        goto label6;

     label7:
        interfaceinvoke $r23.<ucar.ma2.IndexIterator: void setIntNext(int)>($i2);

        $i4 = virtualinvoke r42.<ucar.nc2.iosp.cinrad.Cinrad2Record: int getGateCount(int)>(i3);

        interfaceinvoke $r29.<ucar.ma2.IndexIterator: void setIntNext(int)>($i4);

        i9 = i9 + 1;

        goto label1;

     label8:
        virtualinvoke r0.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r4, 0);

        virtualinvoke r6.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r10, 0);

        virtualinvoke r12.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r16, 0);

        virtualinvoke r18.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r22, 0);

        virtualinvoke r24.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r28, 0);

        return;
    }

    private void makeCoordinateDataWithMissing(int, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, java.util.List)
    {
        java.lang.StringBuilder $r43, $r44, $r50;
        ucar.nc2.iosp.cinrad.Cinrad2Record r37, r49;
        short $s4;
        java.lang.String $r45;
        java.lang.ArrayIndexOutOfBoundsException $r46;
        ucar.ma2.Array $r4, $r10, $r16, $r22, $r28;
        ucar.ma2.Index $r5, $r11, $r17, $r38, $r39, $r40;
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r48;
        int[] $r3, $r9, $r15, $r21, $r27;
        boolean $z0, $z1, $z2;
        ucar.ma2.DataType $r1, $r7, $r13, $r19, $r25;
        java.util.List r33, r35;
        float $f0, $f1;
        int $i0, $i1, i2, $i3, $i5, $i6, $i7, $i8, i9, i10, i11, $i13, $i14;
        ucar.nc2.Variable r0, r6, r12, r18, r24;
        org.slf4j.Logger $r42, $r47;
        ucar.ma2.IndexIterator $r23, $r29, $r30, $r31, $r32;
        java.lang.Class $r2, $r8, $r14, $r20, $r26;
        java.lang.Object $r34, $r36;

        r48 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        i2 := @parameter0: int;

        r0 := @parameter1: ucar.nc2.Variable;

        r6 := @parameter2: ucar.nc2.Variable;

        r12 := @parameter3: ucar.nc2.Variable;

        r18 := @parameter4: ucar.nc2.Variable;

        r24 := @parameter5: ucar.nc2.Variable;

        r33 := @parameter6: java.util.List;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r2 = virtualinvoke $r1.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r2, $r3);

        $r5 = virtualinvoke $r4.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r7 = virtualinvoke r6.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r7.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r9 = virtualinvoke r6.<ucar.nc2.Variable: int[] getShape()>();

        $r10 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r8, $r9);

        $r11 = virtualinvoke $r10.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r13 = virtualinvoke r12.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r14 = virtualinvoke $r13.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r15 = virtualinvoke r12.<ucar.nc2.Variable: int[] getShape()>();

        $r16 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r14, $r15);

        $r17 = virtualinvoke $r16.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r19 = virtualinvoke r18.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r20 = virtualinvoke $r19.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r21 = virtualinvoke r18.<ucar.nc2.Variable: int[] getShape()>();

        $r22 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r20, $r21);

        $r23 = virtualinvoke $r22.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r25 = virtualinvoke r24.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r26 = virtualinvoke $r25.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r27 = virtualinvoke r24.<ucar.nc2.Variable: int[] getShape()>();

        $r28 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r26, $r27);

        $r29 = virtualinvoke $r28.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r30 = virtualinvoke $r4.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label01:
        $z0 = interfaceinvoke $r30.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $i13 = (int) -9999;

        interfaceinvoke $r30.<ucar.ma2.IndexIterator: void setIntNext(int)>($i13);

        goto label01;

     label02:
        $r31 = virtualinvoke $r10.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label03:
        $z1 = interfaceinvoke $r31.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        interfaceinvoke $r31.<ucar.ma2.IndexIterator: void setFloatNext(float)>(#NaNF);

        goto label03;

     label04:
        $r32 = virtualinvoke $r16.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label05:
        $z2 = interfaceinvoke $r32.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        interfaceinvoke $r32.<ucar.ma2.IndexIterator: void setFloatNext(float)>(#NaNF);

        goto label05;

     label06:
        i9 = -2147483648;

        $i0 = interfaceinvoke r33.<java.util.List: int size()>();

     label07:
        i10 = 0;

     label08:
        if i10 >= $i0 goto label13;

        $r34 = interfaceinvoke r33.<java.util.List: java.lang.Object get(int)>(i10);

        r35 = (java.util.List) $r34;

        $i1 = interfaceinvoke r35.<java.util.List: int size()>();

        r49 = null;

        i11 = 0;

     label09:
        if i11 >= $i1 goto label12;

        $r36 = interfaceinvoke r35.<java.util.List: java.lang.Object get(int)>(i11);

        r37 = (ucar.nc2.iosp.cinrad.Cinrad2Record) $r36;

        if r49 != null goto label10;

        r49 = r37;

     label10:
        $s4 = r37.<ucar.nc2.iosp.cinrad.Cinrad2Record: short radial_num>;

        $i14 = (int) $s4;

        $i8 = $i14 - 1;

        $r38 = virtualinvoke $r5.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i10, $i8);

        $i5 = r37.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs>;

        virtualinvoke $r4.<ucar.ma2.Array: void setInt(ucar.ma2.Index,int)>($r38, $i5);

        $r39 = virtualinvoke $r11.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i10, $i8);

        $f0 = virtualinvoke r37.<ucar.nc2.iosp.cinrad.Cinrad2Record: float getElevation()>();

        virtualinvoke $r10.<ucar.ma2.Array: void setFloat(ucar.ma2.Index,float)>($r39, $f0);

        $r40 = virtualinvoke $r17.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i10, $i8);

        $f1 = virtualinvoke r37.<ucar.nc2.iosp.cinrad.Cinrad2Record: float getAzimuth()>();

        virtualinvoke $r16.<ucar.ma2.Array: void setFloat(ucar.ma2.Index,float)>($r40, $f1);

        $i6 = r37.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs>;

        if $i6 >= i9 goto label11;

        $r42 = <ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: org.slf4j.Logger logger>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("makeCoordinateData time out of order ");

        $i7 = r37.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs>;

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r42.<org.slf4j.Logger: void warn(java.lang.String)>($r45);

     label11:
        i9 = r37.<ucar.nc2.iosp.cinrad.Cinrad2Record: int data_msecs>;

        i11 = i11 + 1;

        goto label09;

     label12:
        interfaceinvoke $r23.<ucar.ma2.IndexIterator: void setIntNext(int)>($i1);

        $i3 = virtualinvoke r49.<ucar.nc2.iosp.cinrad.Cinrad2Record: int getGateCount(int)>(i2);

        interfaceinvoke $r29.<ucar.ma2.IndexIterator: void setIntNext(int)>($i3);

        i10 = i10 + 1;

        goto label08;

     label13:
        goto label15;

     label14:
        $r46 := @caughtexception;

        $r47 = <ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: org.slf4j.Logger logger>;

        interfaceinvoke $r47.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>("Cinrad2IOSP.uncompress ", $r46);

     label15:
        virtualinvoke r0.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r4, 0);

        virtualinvoke r6.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r10, 0);

        virtualinvoke r12.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r16, 0);

        virtualinvoke r18.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r22, 0);

        virtualinvoke r24.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r28, 0);

        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label07 to label13 with label14;
    }

    public ucar.ma2.Array readData(ucar.nc2.Variable, ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r14;
        ucar.ma2.Section r3;
        int[] $r9;
        int $i0, $i1, $i2, i3;
        ucar.nc2.Variable r0;
        ucar.nc2.iosp.cinrad.Cinrad2Record[][] $r12;
        ucar.ma2.Range $r4, $r5, $r6;
        ucar.ma2.IndexIterator $r11;
        ucar.ma2.DataType $r7;
        ucar.ma2.Array $r10;
        ucar.nc2.iosp.cinrad.Cinrad2Record[] r13;
        java.lang.Object $r1;
        java.lang.Class $r8;
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup r2;

        r14 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        r0 := @parameter0: ucar.nc2.Variable;

        r3 := @parameter1: ucar.ma2.Section;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r2 = (ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup) $r1;

        $r4 = virtualinvoke r3.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(0);

        $r5 = virtualinvoke r3.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(1);

        $r6 = virtualinvoke r3.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(2);

        $r7 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r7.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r9 = virtualinvoke r3.<ucar.ma2.Section: int[] getShape()>();

        $r10 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r8, $r9);

        $r11 = virtualinvoke $r10.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        i3 = virtualinvoke $r4.<ucar.ma2.Range: int first()>();

     label1:
        $i0 = virtualinvoke $r4.<ucar.ma2.Range: int last()>();

        if i3 > $i0 goto label2;

        $r12 = r2.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup: ucar.nc2.iosp.cinrad.Cinrad2Record[][] map>;

        r13 = $r12[i3];

        $i1 = r2.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider$Vgroup: int datatype>;

        specialinvoke r14.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: void readOneScan(ucar.nc2.iosp.cinrad.Cinrad2Record[],ucar.ma2.Range,ucar.ma2.Range,int,ucar.ma2.IndexIterator)>(r13, $r5, $r6, $i1, $r11);

        $i2 = virtualinvoke $r4.<ucar.ma2.Range: int stride()>();

        i3 = i3 + $i2;

        goto label1;

     label2:
        return $r10;
    }

    private void readOneScan(ucar.nc2.iosp.cinrad.Cinrad2Record[], ucar.ma2.Range, ucar.ma2.Range, int, ucar.ma2.IndexIterator) throws java.io.IOException
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r2;
        ucar.ma2.Range r0, r4;
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r3;
        ucar.ma2.IndexIterator r5;
        ucar.nc2.iosp.cinrad.Cinrad2Record[] r1;
        int $i0, i1, $i2, i3;

        r3 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        r1 := @parameter0: ucar.nc2.iosp.cinrad.Cinrad2Record[];

        r0 := @parameter1: ucar.ma2.Range;

        r4 := @parameter2: ucar.ma2.Range;

        i1 := @parameter3: int;

        r5 := @parameter4: ucar.ma2.IndexIterator;

        i3 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.Range: int last()>();

        if i3 > $i0 goto label2;

        r2 = r1[i3];

        specialinvoke r3.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: void readOneRadial(ucar.nc2.iosp.cinrad.Cinrad2Record,int,ucar.ma2.Range,ucar.ma2.IndexIterator)>(r2, i1, r4, r5);

        $i2 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        i3 = i3 + $i2;

        goto label1;

     label2:
        return;
    }

    private void readOneRadial(ucar.nc2.iosp.cinrad.Cinrad2Record, int, ucar.ma2.Range, ucar.ma2.IndexIterator) throws java.io.IOException
    {
        ucar.nc2.iosp.cinrad.Cinrad2Record r0;
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r1;
        ucar.ma2.Range r3;
        ucar.unidata.io.RandomAccessFile $r5;
        ucar.ma2.IndexIterator r4;
        ucar.nc2.iosp.cinrad.Cinrad2VolumeScan $r2;
        int i0, $i1, $i2, i3;

        r1 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        r0 := @parameter0: ucar.nc2.iosp.cinrad.Cinrad2Record;

        i0 := @parameter1: int;

        r3 := @parameter2: ucar.ma2.Range;

        r4 := @parameter3: ucar.ma2.IndexIterator;

        if r0 != null goto label3;

        i3 = virtualinvoke r3.<ucar.ma2.Range: int first()>();

     label1:
        $i1 = virtualinvoke r3.<ucar.ma2.Range: int last()>();

        if i3 > $i1 goto label2;

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setByteNext(byte)>(1);

        $i2 = virtualinvoke r3.<ucar.ma2.Range: int stride()>();

        i3 = i3 + $i2;

        goto label1;

     label2:
        return;

     label3:
        $r2 = r1.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r5 = $r2.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke r0.<ucar.nc2.iosp.cinrad.Cinrad2Record: void readData(ucar.unidata.io.RandomAccessFile,int,ucar.ma2.Range,ucar.ma2.IndexIterator)>($r5, i0, r3, r4);

        return;
    }

    public void close() throws java.io.IOException
    {
        ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider r0;
        ucar.unidata.io.RandomAccessFile $r2;
        ucar.nc2.iosp.cinrad.Cinrad2VolumeScan $r1;

        r0 := @this: ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider;

        $r1 = r0.<ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: ucar.nc2.iosp.cinrad.Cinrad2VolumeScan volScan>;

        $r2 = $r1.<ucar.nc2.iosp.cinrad.Cinrad2VolumeScan: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke $r2.<ucar.unidata.io.RandomAccessFile: void close()>();

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: float MISSING_FLOAT> = #NaNF;

        <ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: int MISSING_INT> = -9999;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/iosp/cinrad/Cinrad2IOServiceProvider;");

        <ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider: org.slf4j.Logger logger> = $r0;

        return;
    }
}
