public final class org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl extends org.waveprotocol.wave.communication.gwt.JsonMessage implements org.waveprotocol.wave.federation.ProtocolHashedVersion
{
    private static final java.lang.String keyVersion;
    private static final java.lang.String keyHistoryHash;

    protected void <init>()
    {
        org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl;

        specialinvoke r0.<org.waveprotocol.wave.communication.gwt.JsonMessage: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl create()
    {
        org.waveprotocol.wave.communication.gwt.JsonMessage $r0;
        org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl r1;

        $r0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonMessage: org.waveprotocol.wave.communication.gwt.JsonMessage createJsonMessage()>();

        r1 = (org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl) $r0;

        return r1;
    }

    public void copyFrom(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.ProtocolHashedVersion r1;
        org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl r0, $r2;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $r2 = (org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl) r1;

        specialinvoke r0.<org.waveprotocol.wave.communication.gwt.JsonMessage: void copyFrom(org.waveprotocol.wave.communication.gwt.JsonMessage)>($r2);

        return;
    }

    public double getVersion()
    {
        org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl r0;
        boolean $z0;
        double $d0;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "1");

        if $z0 == 0 goto label1;

        $d0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: double getPropertyAsDouble(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "1");

        goto label2;

     label1:
        $d0 = 0.0;

     label2:
        return $d0;
    }

    public void setVersion(double)
    {
        org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl r0;
        double d0;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl;

        d0 := @parameter0: double;

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void setPropertyAsDouble(com.google.gwt.core.client.JavaScriptObject,java.lang.String,double)>(r0, "1", d0);

        return;
    }

    public org.waveprotocol.wave.communication.Blob getHistoryHash()
    {
        org.waveprotocol.wave.communication.Blob $r2;
        java.lang.String $r1;
        org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: boolean hasProperty(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "2");

        if $z0 == 0 goto label1;

        $r2 = new org.waveprotocol.wave.communication.Blob;

        $r1 = staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: java.lang.String getPropertyAsString(com.google.gwt.core.client.JavaScriptObject,java.lang.String)>(r0, "2");

        specialinvoke $r2.<org.waveprotocol.wave.communication.Blob: void <init>(java.lang.String)>($r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void setHistoryHash(org.waveprotocol.wave.communication.Blob)
    {
        org.waveprotocol.wave.communication.Blob r1;
        java.lang.String $r2;
        org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl r0;

        r0 := @this: org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl;

        r1 := @parameter0: org.waveprotocol.wave.communication.Blob;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.communication.Blob: java.lang.String getData()>();

        staticinvoke <org.waveprotocol.wave.communication.gwt.JsonHelper: void setPropertyAsString(com.google.gwt.core.client.JavaScriptObject,java.lang.String,java.lang.String)>(r0, "2", $r2);

        return;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r2;
        org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl;

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r1.<org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl: boolean nativeIsEqualTo(java.lang.Object)>(r0);

        return $z3;

     label1:
        $z1 = r0 instanceof org.waveprotocol.wave.federation.ProtocolHashedVersion;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.federation.ProtocolHashedVersion) r0;

        $z2 = staticinvoke <org.waveprotocol.wave.federation.ProtocolHashedVersionUtil: boolean isEqual(org.waveprotocol.wave.federation.ProtocolHashedVersion,org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r1, $r2);

        return $z2;

     label2:
        return 0;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl: java.lang.String keyHistoryHash> = "2";

        <org.waveprotocol.wave.federation.jso.ProtocolHashedVersionJsoImpl: java.lang.String keyVersion> = "1";

        return;
    }
}
