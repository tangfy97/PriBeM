public abstract class org.apache.jena.riot.lang.LangNTuple extends org.apache.jena.riot.lang.LangBase implements java.util.Iterator
{
    private static org.slf4j.Logger log;
    protected boolean skipOnBadTerm;

    protected void <init>(org.apache.jena.riot.tokens.Tokenizer, org.apache.jena.riot.system.ParserProfile, org.apache.jena.riot.system.StreamRDF)
    {
        org.apache.jena.riot.lang.LangNTuple r0;
        org.apache.jena.riot.tokens.Tokenizer r1;
        org.apache.jena.riot.system.ParserProfile r2;
        org.apache.jena.riot.system.StreamRDF r3;

        r0 := @this: org.apache.jena.riot.lang.LangNTuple;

        r1 := @parameter0: org.apache.jena.riot.tokens.Tokenizer;

        r2 := @parameter1: org.apache.jena.riot.system.ParserProfile;

        r3 := @parameter2: org.apache.jena.riot.system.StreamRDF;

        specialinvoke r0.<org.apache.jena.riot.lang.LangBase: void <init>(org.apache.jena.riot.tokens.Tokenizer,org.apache.jena.riot.system.ParserProfile,org.apache.jena.riot.system.StreamRDF)>(r1, r2, r3);

        r0.<org.apache.jena.riot.lang.LangNTuple: boolean skipOnBadTerm> = 0;

        return;
    }

    public final boolean hasNext()
    {
        org.apache.jena.riot.lang.LangNTuple r0;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.lang.LangNTuple;

        $z0 = specialinvoke r0.<org.apache.jena.riot.lang.LangBase: boolean moreTokens()>();

        return $z0;
    }

    public final java.lang.Object next()
    {
        org.apache.jena.riot.lang.LangNTuple r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.jena.riot.lang.LangNTuple;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LangNTuple: java.lang.Object parseOne()>();

        return $r1;
    }

    public final void remove()
    {
        org.apache.jena.riot.lang.LangNTuple r1;
        java.lang.UnsupportedOperationException $r0;

        r1 := @this: org.apache.jena.riot.lang.LangNTuple;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    protected abstract java.lang.Object parseOne();

    protected void skipOne(java.lang.Object, java.lang.String, long, long)
    {
        org.apache.jena.riot.lang.LangNTuple r0;
        org.apache.jena.riot.system.ParserProfile $r1;
        long l0, l1;
        org.apache.jena.riot.system.ErrorHandler $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Object r8;
        java.lang.String r5, $r7;

        r0 := @this: org.apache.jena.riot.lang.LangNTuple;

        r8 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r1 = r0.<org.apache.jena.riot.lang.LangNTuple: org.apache.jena.riot.system.ParserProfile profile>;

        $r2 = interfaceinvoke $r1.<org.apache.jena.riot.system.ParserProfile: org.apache.jena.riot.system.ErrorHandler getHandler()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skip: ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>($r7, l0, l1);

        return;
    }

    protected abstract com.hp.hpl.jena.graph.Node tokenAsNode(org.apache.jena.riot.tokens.Token);

    protected final void checkIRIOrBNode(org.apache.jena.riot.tokens.Token)
    {
        org.apache.jena.riot.lang.LangNTuple r3;
        org.apache.jena.riot.tokens.TokenType $r1, $r2;
        java.lang.Object[] $r4;
        org.apache.jena.riot.tokens.Token r0;
        boolean $z0, $z1;

        r3 := @this: org.apache.jena.riot.lang.LangNTuple;

        r0 := @parameter0: org.apache.jena.riot.tokens.Token;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType IRI>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType BNODE>;

        $z1 = virtualinvoke r0.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r2);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r0;

        virtualinvoke r3.<org.apache.jena.riot.lang.LangNTuple: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>(r0, "Expected BNode or IRI: Got: %s", $r4);

        return;
    }

    protected final void checkIRI(org.apache.jena.riot.tokens.Token)
    {
        org.apache.jena.riot.lang.LangNTuple r2;
        org.apache.jena.riot.tokens.TokenType $r1;
        java.lang.Object[] $r3;
        org.apache.jena.riot.tokens.Token r0;
        boolean $z0;

        r2 := @this: org.apache.jena.riot.lang.LangNTuple;

        r0 := @parameter0: org.apache.jena.riot.tokens.Token;

        $r1 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType IRI>;

        $z0 = virtualinvoke r0.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        virtualinvoke r2.<org.apache.jena.riot.lang.LangNTuple: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>(r0, "Expected IRI: Got: %s", $r3);

        return;
    }

    protected final void checkRDFTerm(org.apache.jena.riot.tokens.Token)
    {
        java.lang.Object[] $r5, $r9, $r13, $r14;
        org.apache.jena.riot.tokens.Token r0, $r7, $r11;
        int[] $r1;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.jena.riot.lang.LangNTuple r3;
        org.apache.jena.riot.system.ParserProfile $r4, $r6, $r10;
        org.apache.jena.riot.tokens.TokenType $r2, $r8, $r12;

        r3 := @this: org.apache.jena.riot.lang.LangNTuple;

        r0 := @parameter0: org.apache.jena.riot.tokens.Token;

        $r1 = <org.apache.jena.riot.lang.LangNTuple$1: int[] $SwitchMap$org$apache$jena$riot$tokens$TokenType>;

        $r2 = virtualinvoke r0.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.TokenType getType()>();

        $i0 = virtualinvoke $r2.<org.apache.jena.riot.tokens.TokenType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label4;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        return;

     label2:
        $r10 = r3.<org.apache.jena.riot.lang.LangNTuple: org.apache.jena.riot.system.ParserProfile profile>;

        $z3 = interfaceinvoke $r10.<org.apache.jena.riot.system.ParserProfile: boolean isStrictMode()>();

        if $z3 == 0 goto label3;

        $r11 = virtualinvoke r0.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token getSubToken1()>();

        $r12 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

        $z4 = virtualinvoke $r11.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r12);

        if $z4 != 0 goto label3;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r0;

        virtualinvoke r3.<org.apache.jena.riot.lang.LangNTuple: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>(r0, "Illegal single quoted string: %s", $r13);

     label3:
        return;

     label4:
        $r6 = r3.<org.apache.jena.riot.lang.LangNTuple: org.apache.jena.riot.system.ParserProfile profile>;

        $z1 = interfaceinvoke $r6.<org.apache.jena.riot.system.ParserProfile: boolean isStrictMode()>();

        if $z1 == 0 goto label5;

        $r7 = virtualinvoke r0.<org.apache.jena.riot.tokens.Token: org.apache.jena.riot.tokens.Token getSubToken1()>();

        $r8 = <org.apache.jena.riot.tokens.TokenType: org.apache.jena.riot.tokens.TokenType STRING2>;

        $z2 = virtualinvoke $r7.<org.apache.jena.riot.tokens.Token: boolean hasType(org.apache.jena.riot.tokens.TokenType)>($r8);

        if $z2 != 0 goto label5;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r0;

        virtualinvoke r3.<org.apache.jena.riot.lang.LangNTuple: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>(r0, "Illegal single quoted string: %s", $r9);

     label5:
        return;

     label6:
        $r4 = r3.<org.apache.jena.riot.lang.LangNTuple: org.apache.jena.riot.system.ParserProfile profile>;

        $z0 = interfaceinvoke $r4.<org.apache.jena.riot.system.ParserProfile: boolean isStrictMode()>();

        if $z0 == 0 goto label8;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r0;

        virtualinvoke r3.<org.apache.jena.riot.lang.LangNTuple: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>(r0, "Illegal single quoted string: %s", $r5);

        goto label8;

     label7:
        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r0;

        virtualinvoke r3.<org.apache.jena.riot.lang.LangNTuple: void exception(org.apache.jena.riot.tokens.Token,java.lang.String,java.lang.Object[])>(r0, "Illegal object: %s", $r14);

     label8:
        return;
    }

    public boolean getSkipOnBadTerm()
    {
        org.apache.jena.riot.lang.LangNTuple r0;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.lang.LangNTuple;

        $z0 = r0.<org.apache.jena.riot.lang.LangNTuple: boolean skipOnBadTerm>;

        return $z0;
    }

    public void setSkipOnBadTerm(boolean)
    {
        org.apache.jena.riot.lang.LangNTuple r0;
        boolean z0;

        r0 := @this: org.apache.jena.riot.lang.LangNTuple;

        z0 := @parameter0: boolean;

        r0.<org.apache.jena.riot.lang.LangNTuple: boolean skipOnBadTerm> = z0;

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jena/riot/lang/LangNTuple;");

        <org.apache.jena.riot.lang.LangNTuple: org.slf4j.Logger log> = $r0;

        return;
    }
}
