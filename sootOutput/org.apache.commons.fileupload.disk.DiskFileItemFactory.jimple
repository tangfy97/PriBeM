public class org.apache.commons.fileupload.disk.DiskFileItemFactory extends java.lang.Object implements org.apache.commons.fileupload.FileItemFactory
{
    public static final int DEFAULT_SIZE_THRESHOLD;
    private java.io.File repository;
    private int sizeThreshold;
    private org.apache.commons.io.FileCleaningTracker fileCleaningTracker;

    public void <init>()
    {
        org.apache.commons.fileupload.disk.DiskFileItemFactory r0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItemFactory;

        specialinvoke r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: void <init>(int,java.io.File)>(10240, null);

        return;
    }

    public void <init>(int, java.io.File)
    {
        int i0;
        org.apache.commons.fileupload.disk.DiskFileItemFactory r0;
        java.io.File r1;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItemFactory;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: int sizeThreshold> = 10240;

        r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: int sizeThreshold> = i0;

        r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: java.io.File repository> = r1;

        return;
    }

    public java.io.File getRepository()
    {
        org.apache.commons.fileupload.disk.DiskFileItemFactory r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItemFactory;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: java.io.File repository>;

        return $r1;
    }

    public void setRepository(java.io.File)
    {
        org.apache.commons.fileupload.disk.DiskFileItemFactory r0;
        java.io.File r1;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItemFactory;

        r1 := @parameter0: java.io.File;

        r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: java.io.File repository> = r1;

        return;
    }

    public int getSizeThreshold()
    {
        int $i0;
        org.apache.commons.fileupload.disk.DiskFileItemFactory r0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItemFactory;

        $i0 = r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: int sizeThreshold>;

        return $i0;
    }

    public void setSizeThreshold(int)
    {
        int i0;
        org.apache.commons.fileupload.disk.DiskFileItemFactory r0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItemFactory;

        i0 := @parameter0: int;

        r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: int sizeThreshold> = i0;

        return;
    }

    public org.apache.commons.fileupload.FileItem createItem(java.lang.String, java.lang.String, boolean, java.lang.String)
    {
        org.apache.commons.io.FileCleaningTracker $r6;
        java.io.File $r5, $r7;
        org.apache.commons.fileupload.disk.DiskFileItem $r0;
        org.apache.commons.fileupload.disk.DiskFileItemFactory r4;
        int $i0;
        java.lang.String r1, r2, r3;
        boolean z0;

        r4 := @this: org.apache.commons.fileupload.disk.DiskFileItemFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        $r0 = new org.apache.commons.fileupload.disk.DiskFileItem;

        $i0 = r4.<org.apache.commons.fileupload.disk.DiskFileItemFactory: int sizeThreshold>;

        $r5 = r4.<org.apache.commons.fileupload.disk.DiskFileItemFactory: java.io.File repository>;

        specialinvoke $r0.<org.apache.commons.fileupload.disk.DiskFileItem: void <init>(java.lang.String,java.lang.String,boolean,java.lang.String,int,java.io.File)>(r1, r2, z0, r3, $i0, $r5);

        $r6 = virtualinvoke r4.<org.apache.commons.fileupload.disk.DiskFileItemFactory: org.apache.commons.io.FileCleaningTracker getFileCleaningTracker()>();

        if $r6 == null goto label1;

        $r7 = virtualinvoke $r0.<org.apache.commons.fileupload.disk.DiskFileItem: java.io.File getTempFile()>();

        virtualinvoke $r6.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object)>($r7, r4);

     label1:
        return $r0;
    }

    public org.apache.commons.io.FileCleaningTracker getFileCleaningTracker()
    {
        org.apache.commons.io.FileCleaningTracker $r1;
        org.apache.commons.fileupload.disk.DiskFileItemFactory r0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItemFactory;

        $r1 = r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: org.apache.commons.io.FileCleaningTracker fileCleaningTracker>;

        return $r1;
    }

    public void setFileCleaningTracker(org.apache.commons.io.FileCleaningTracker)
    {
        org.apache.commons.io.FileCleaningTracker r1;
        org.apache.commons.fileupload.disk.DiskFileItemFactory r0;

        r0 := @this: org.apache.commons.fileupload.disk.DiskFileItemFactory;

        r1 := @parameter0: org.apache.commons.io.FileCleaningTracker;

        r0.<org.apache.commons.fileupload.disk.DiskFileItemFactory: org.apache.commons.io.FileCleaningTracker fileCleaningTracker> = r1;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.fileupload.disk.DiskFileItemFactory: int DEFAULT_SIZE_THRESHOLD> = 10240;

        return;
    }
}
