public final class com.mycila.inject.internal.guava.collect.Ranges extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.Ranges r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Ranges;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut, com.mycila.inject.internal.guava.collect.Cut)
    {
        com.mycila.inject.internal.guava.collect.Range $r0;
        com.mycila.inject.internal.guava.collect.Cut r1, r2;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Cut;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Cut;

        $r0 = new com.mycila.inject.internal.guava.collect.Range;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Range: void <init>(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>(r1, r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.Range open(java.lang.Comparable, java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Range $r4;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r3;
        java.lang.Comparable r0, r2;

        r0 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveValue(java.lang.Comparable)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowValue(java.lang.Comparable)>(r2);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r1, $r3);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.Range closed(java.lang.Comparable, java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Range $r4;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r3;
        java.lang.Comparable r0, r2;

        r0 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowValue(java.lang.Comparable)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveValue(java.lang.Comparable)>(r2);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r1, $r3);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.Range closedOpen(java.lang.Comparable, java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Range $r4;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r3;
        java.lang.Comparable r0, r2;

        r0 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowValue(java.lang.Comparable)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowValue(java.lang.Comparable)>(r2);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r1, $r3);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.Range openClosed(java.lang.Comparable, java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Range $r4;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r3;
        java.lang.Comparable r0, r2;

        r0 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveValue(java.lang.Comparable)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveValue(java.lang.Comparable)>(r2);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r1, $r3);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.Range range(java.lang.Comparable, com.mycila.inject.internal.guava.collect.BoundType, java.lang.Comparable, com.mycila.inject.internal.guava.collect.BoundType)
    {
        com.mycila.inject.internal.guava.collect.Cut r4, $r8, $r9;
        com.mycila.inject.internal.guava.collect.BoundType r0, r1, $r2, $r5;
        com.mycila.inject.internal.guava.collect.Range $r7;
        java.lang.Comparable r3, r6;

        r3 := @parameter0: java.lang.Comparable;

        r0 := @parameter1: com.mycila.inject.internal.guava.collect.BoundType;

        r6 := @parameter2: java.lang.Comparable;

        r1 := @parameter3: com.mycila.inject.internal.guava.collect.BoundType;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        if r0 != $r2 goto label1;

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveValue(java.lang.Comparable)>(r3);

        goto label2;

     label1:
        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowValue(java.lang.Comparable)>(r3);

     label2:
        r4 = $r8;

        $r5 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        if r1 != $r5 goto label3;

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowValue(java.lang.Comparable)>(r6);

        goto label4;

     label3:
        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveValue(java.lang.Comparable)>(r6);

     label4:
        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>(r4, $r9);

        return $r7;
    }

    public static com.mycila.inject.internal.guava.collect.Range lessThan(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Range $r3;
        com.mycila.inject.internal.guava.collect.Cut $r0, $r2;
        java.lang.Comparable r1;

        r1 := @parameter0: java.lang.Comparable;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowAll()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowValue(java.lang.Comparable)>(r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r0, $r2);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.Range atMost(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Range $r3;
        com.mycila.inject.internal.guava.collect.Cut $r0, $r2;
        java.lang.Comparable r1;

        r1 := @parameter0: java.lang.Comparable;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowAll()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveValue(java.lang.Comparable)>(r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r0, $r2);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.Range upTo(java.lang.Comparable, com.mycila.inject.internal.guava.collect.BoundType)
    {
        java.lang.AssertionError $r5;
        com.mycila.inject.internal.guava.collect.BoundType r0;
        com.mycila.inject.internal.guava.collect.Range $r3, $r4;
        int[] $r1;
        int $i0, $i1;
        java.lang.Comparable r2;

        r2 := @parameter0: java.lang.Comparable;

        r0 := @parameter1: com.mycila.inject.internal.guava.collect.BoundType;

        $r1 = <com.mycila.inject.internal.guava.collect.Ranges$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BoundType: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range lessThan(java.lang.Comparable)>(r2);

        return $r4;

     label2:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range atMost(java.lang.Comparable)>(r2);

        return $r3;

     label3:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;
    }

    public static com.mycila.inject.internal.guava.collect.Range greaterThan(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Range $r3;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r2;
        java.lang.Comparable r0;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveValue(java.lang.Comparable)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveAll()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r1, $r2);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.Range atLeast(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Range $r3;
        com.mycila.inject.internal.guava.collect.Cut $r1, $r2;
        java.lang.Comparable r0;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowValue(java.lang.Comparable)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveAll()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r1, $r2);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.Range downTo(java.lang.Comparable, com.mycila.inject.internal.guava.collect.BoundType)
    {
        java.lang.AssertionError $r5;
        com.mycila.inject.internal.guava.collect.BoundType r0;
        com.mycila.inject.internal.guava.collect.Range $r3, $r4;
        int[] $r1;
        int $i0, $i1;
        java.lang.Comparable r2;

        r2 := @parameter0: java.lang.Comparable;

        r0 := @parameter1: com.mycila.inject.internal.guava.collect.BoundType;

        $r1 = <com.mycila.inject.internal.guava.collect.Ranges$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BoundType: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range greaterThan(java.lang.Comparable)>(r2);

        return $r4;

     label2:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range atLeast(java.lang.Comparable)>(r2);

        return $r3;

     label3:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;
    }

    public static com.mycila.inject.internal.guava.collect.Range all()
    {
        com.mycila.inject.internal.guava.collect.Range $r2;
        com.mycila.inject.internal.guava.collect.Cut $r0, $r1;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowAll()>();

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveAll()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range create(com.mycila.inject.internal.guava.collect.Cut,com.mycila.inject.internal.guava.collect.Cut)>($r0, $r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.Range singleton(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        com.mycila.inject.internal.guava.collect.Range $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range closed(java.lang.Comparable,java.lang.Comparable)>(r0, r0);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.collect.Range encloseAll(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.mycila.inject.internal.guava.collect.Range $r4, $r13;
        com.mycila.inject.internal.guava.collect.Ordering $r8, $r10;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.ContiguousSet $r12;
        java.lang.Object $r2, $r3, $r5, $r6, $r9, $r11;
        java.lang.Comparable r7, r14, r15;

        r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.ContiguousSet;

        if $z0 == 0 goto label1;

        $r12 = (com.mycila.inject.internal.guava.collect.ContiguousSet) r0;

        $r13 = virtualinvoke $r12.<com.mycila.inject.internal.guava.collect.ContiguousSet: com.mycila.inject.internal.guava.collect.Range range()>();

        return $r13;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        r14 = (java.lang.Comparable) $r3;

        r15 = r14;

     label2:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        r7 = (java.lang.Comparable) $r6;

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r9 = virtualinvoke $r8.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object min(java.lang.Object,java.lang.Object)>(r14, r7);

        r14 = (java.lang.Comparable) $r9;

        $r10 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r11 = virtualinvoke $r10.<com.mycila.inject.internal.guava.collect.Ordering: java.lang.Object max(java.lang.Object,java.lang.Object)>(r15, r7);

        r15 = (java.lang.Comparable) $r11;

        goto label2;

     label3:
        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Ranges: com.mycila.inject.internal.guava.collect.Range closed(java.lang.Comparable,java.lang.Comparable)>(r14, r15);

        return $r4;
    }
}
