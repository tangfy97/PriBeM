public class org.apache.james.mime4j.util.CharsetUtil extends java.lang.Object
{
    public static final java.lang.String CRLF;
    public static final int CR;
    public static final int LF;
    public static final int SP;
    public static final int HT;
    public static final java.nio.charset.Charset US_ASCII;
    public static final java.nio.charset.Charset ISO_8859_1;
    public static final java.nio.charset.Charset UTF_8;
    public static final java.nio.charset.Charset DEFAULT_CHARSET;

    public void <init>()
    {
        org.apache.james.mime4j.util.CharsetUtil r0;

        r0 := @this: org.apache.james.mime4j.util.CharsetUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isASCII(char)
    {
        char c0, $c1;
        boolean $z0;

        c0 := @parameter0: char;

        $c1 = 65408 & c0;

        if $c1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isASCII(java.lang.String)
    {
        int $i0, i2;
        char $c1;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String may not be null");

        throw $r1;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label2:
        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isASCII(char)>($c1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isWhitespace(char)
    {
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 32 goto label1;

        $i2 = (int) c0;

        if $i2 == 9 goto label1;

        $i3 = (int) c0;

        if $i3 == 13 goto label1;

        $i4 = (int) c0;

        if $i4 != 10 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isWhitespace(java.lang.String)
    {
        int $i0, i2;
        char $c1;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String may not be null");

        throw $r1;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label2:
        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>($c1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static java.nio.charset.Charset lookup(java.lang.String)
    {
        java.nio.charset.Charset $r1;
        java.nio.charset.IllegalCharsetNameException $r3;
        java.lang.String r0;
        java.nio.charset.UnsupportedCharsetException $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        return null;

     label4:
        $r2 := @caughtexception;

        return null;

        catch java.nio.charset.IllegalCharsetNameException from label1 to label2 with label3;
        catch java.nio.charset.UnsupportedCharsetException from label1 to label2 with label4;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r0, $r1, $r2, $r3;

        <org.apache.james.mime4j.util.CharsetUtil: int HT> = 9;

        <org.apache.james.mime4j.util.CharsetUtil: int SP> = 32;

        <org.apache.james.mime4j.util.CharsetUtil: int LF> = 10;

        <org.apache.james.mime4j.util.CharsetUtil: int CR> = 13;

        <org.apache.james.mime4j.util.CharsetUtil: java.lang.String CRLF> = "\r\n";

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset US_ASCII> = $r0;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ISO-8859-1");

        <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset ISO_8859_1> = $r1;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset UTF_8> = $r2;

        $r3 = <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;

        <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset DEFAULT_CHARSET> = $r3;

        return;
    }
}
