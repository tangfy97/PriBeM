public abstract class org.apache.batik.gvt.event.AbstractAWTEventDispatcher extends java.lang.Object implements org.apache.batik.gvt.event.EventDispatcher, java.awt.event.MouseListener, java.awt.event.MouseMotionListener, java.awt.event.KeyListener
{
    protected org.apache.batik.gvt.GraphicsNode root;
    protected java.awt.geom.AffineTransform baseTransform;
    protected javax.swing.event.EventListenerList glisteners;
    protected org.apache.batik.gvt.GraphicsNode lastHit;
    protected org.apache.batik.gvt.GraphicsNode currentKeyEventTarget;
    protected java.util.List eventQueue;
    protected boolean eventDispatchEnabled;
    protected int eventQueueMaxSize;
    static final int MAX_QUEUE_SIZE;
    private int nodeIncrementEventID;
    private int nodeIncrementEventCode;
    private int nodeIncrementEventModifiers;
    private int nodeDecrementEventID;
    private int nodeDecrementEventCode;
    private int nodeDecrementEventModifiers;
    static java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseListener;
    static java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseWheelListener;
    static java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeKeyListener;

    public void <init>()
    {
        java.util.LinkedList $r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue> = $r1;

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: boolean eventDispatchEnabled> = 1;

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int eventQueueMaxSize> = 10;

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeIncrementEventID> = 401;

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeIncrementEventCode> = 9;

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeIncrementEventModifiers> = 0;

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeDecrementEventID> = 401;

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeDecrementEventCode> = 9;

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeDecrementEventModifiers> = 1;

        return;
    }

    public void setRootNode(org.apache.batik.gvt.GraphicsNode)
    {
        java.util.List $r3;
        org.apache.batik.gvt.GraphicsNode r1, $r2;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        $r2 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode root>;

        if $r2 == r1 goto label1;

        $r3 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

     label1:
        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode root> = r1;

        return;
    }

    public org.apache.batik.gvt.GraphicsNode getRootNode()
    {
        org.apache.batik.gvt.GraphicsNode $r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode root>;

        return $r1;
    }

    public void setBaseTransform(java.awt.geom.AffineTransform)
    {
        java.util.List $r4;
        java.awt.geom.AffineTransform r1, $r2, $r3, $r5;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.awt.geom.AffineTransform baseTransform>;

        if $r2 == r1 goto label2;

        $r3 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.awt.geom.AffineTransform baseTransform>;

        if $r3 == null goto label1;

        $r5 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.awt.geom.AffineTransform baseTransform>;

        $z0 = virtualinvoke $r5.<java.awt.geom.AffineTransform: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

     label1:
        $r4 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

     label2:
        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.awt.geom.AffineTransform baseTransform> = r1;

        return;
    }

    public java.awt.geom.AffineTransform getBaseTransform()
    {
        java.awt.geom.AffineTransform $r0, $r2;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r1;

        r1 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        $r0 = new java.awt.geom.AffineTransform;

        $r2 = r1.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.awt.geom.AffineTransform baseTransform>;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r2);

        return $r0;
    }

    public void mousePressed(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.MouseEvent;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r1);

        return;
    }

    public void mouseReleased(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.MouseEvent;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r1);

        return;
    }

    public void mouseEntered(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.MouseEvent;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r1);

        return;
    }

    public void mouseExited(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.MouseEvent;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r1);

        return;
    }

    public void mouseClicked(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.MouseEvent;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r1);

        return;
    }

    public void mouseMoved(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.MouseEvent;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r1);

        return;
    }

    public void mouseDragged(java.awt.event.MouseEvent)
    {
        java.awt.event.MouseEvent r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.MouseEvent;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r1);

        return;
    }

    public void keyPressed(java.awt.event.KeyEvent)
    {
        java.awt.event.KeyEvent r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.KeyEvent;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r1);

        return;
    }

    public void keyReleased(java.awt.event.KeyEvent)
    {
        java.awt.event.KeyEvent r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.KeyEvent;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r1);

        return;
    }

    public void keyTyped(java.awt.event.KeyEvent)
    {
        java.awt.event.KeyEvent r1;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.KeyEvent;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r1);

        return;
    }

    public void addGraphicsNodeMouseListener(org.apache.batik.gvt.event.GraphicsNodeMouseListener)
    {
        javax.swing.event.EventListenerList $r1, $r4, $r5;
        org.apache.batik.gvt.event.GraphicsNodeMouseListener r3;
        java.lang.Class $r2, $r6;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r3 := @parameter0: org.apache.batik.gvt.event.GraphicsNodeMouseListener;

        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        if $r1 != null goto label1;

        $r5 = new javax.swing.event.EventListenerList;

        specialinvoke $r5.<javax.swing.event.EventListenerList: void <init>()>();

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners> = $r5;

     label1:
        $r4 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        $r2 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseListener>;

        if $r2 != null goto label2;

        $r6 = staticinvoke <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$(java.lang.String)>("org.apache.batik.gvt.event.GraphicsNodeMouseListener");

        <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseListener> = $r6;

        goto label3;

     label2:
        $r6 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseListener>;

     label3:
        virtualinvoke $r4.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>($r6, r3);

        return;
    }

    public void removeGraphicsNodeMouseListener(org.apache.batik.gvt.event.GraphicsNodeMouseListener)
    {
        javax.swing.event.EventListenerList $r1, $r4;
        org.apache.batik.gvt.event.GraphicsNodeMouseListener r3;
        java.lang.Class $r2, $r5;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r3 := @parameter0: org.apache.batik.gvt.event.GraphicsNodeMouseListener;

        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        if $r1 == null goto label3;

        $r4 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        $r2 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseListener>;

        if $r2 != null goto label1;

        $r5 = staticinvoke <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$(java.lang.String)>("org.apache.batik.gvt.event.GraphicsNodeMouseListener");

        <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseListener> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseListener>;

     label2:
        virtualinvoke $r4.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>($r5, r3);

     label3:
        return;
    }

    public void addGraphicsNodeMouseWheelListener(org.apache.batik.gvt.event.GraphicsNodeMouseWheelListener)
    {
        org.apache.batik.gvt.event.GraphicsNodeMouseWheelListener r3;
        javax.swing.event.EventListenerList $r1, $r4, $r5;
        java.lang.Class $r2, $r6;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r3 := @parameter0: org.apache.batik.gvt.event.GraphicsNodeMouseWheelListener;

        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        if $r1 != null goto label1;

        $r5 = new javax.swing.event.EventListenerList;

        specialinvoke $r5.<javax.swing.event.EventListenerList: void <init>()>();

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners> = $r5;

     label1:
        $r4 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        $r2 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseWheelListener>;

        if $r2 != null goto label2;

        $r6 = staticinvoke <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$(java.lang.String)>("org.apache.batik.gvt.event.GraphicsNodeMouseWheelListener");

        <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseWheelListener> = $r6;

        goto label3;

     label2:
        $r6 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseWheelListener>;

     label3:
        virtualinvoke $r4.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>($r6, r3);

        return;
    }

    public void removeGraphicsNodeMouseWheelListener(org.apache.batik.gvt.event.GraphicsNodeMouseWheelListener)
    {
        org.apache.batik.gvt.event.GraphicsNodeMouseWheelListener r3;
        javax.swing.event.EventListenerList $r1, $r4;
        java.lang.Class $r2, $r5;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r3 := @parameter0: org.apache.batik.gvt.event.GraphicsNodeMouseWheelListener;

        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        if $r1 == null goto label3;

        $r4 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        $r2 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseWheelListener>;

        if $r2 != null goto label1;

        $r5 = staticinvoke <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$(java.lang.String)>("org.apache.batik.gvt.event.GraphicsNodeMouseWheelListener");

        <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseWheelListener> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseWheelListener>;

     label2:
        virtualinvoke $r4.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>($r5, r3);

     label3:
        return;
    }

    public void addGraphicsNodeKeyListener(org.apache.batik.gvt.event.GraphicsNodeKeyListener)
    {
        javax.swing.event.EventListenerList $r1, $r4, $r5;
        java.lang.Class $r2, $r6;
        org.apache.batik.gvt.event.GraphicsNodeKeyListener r3;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r3 := @parameter0: org.apache.batik.gvt.event.GraphicsNodeKeyListener;

        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        if $r1 != null goto label1;

        $r5 = new javax.swing.event.EventListenerList;

        specialinvoke $r5.<javax.swing.event.EventListenerList: void <init>()>();

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners> = $r5;

     label1:
        $r4 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        $r2 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeKeyListener>;

        if $r2 != null goto label2;

        $r6 = staticinvoke <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$(java.lang.String)>("org.apache.batik.gvt.event.GraphicsNodeKeyListener");

        <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeKeyListener> = $r6;

        goto label3;

     label2:
        $r6 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeKeyListener>;

     label3:
        virtualinvoke $r4.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>($r6, r3);

        return;
    }

    public void removeGraphicsNodeKeyListener(org.apache.batik.gvt.event.GraphicsNodeKeyListener)
    {
        javax.swing.event.EventListenerList $r1, $r4;
        java.lang.Class $r2, $r5;
        org.apache.batik.gvt.event.GraphicsNodeKeyListener r3;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r3 := @parameter0: org.apache.batik.gvt.event.GraphicsNodeKeyListener;

        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        if $r1 == null goto label3;

        $r4 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        $r2 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeKeyListener>;

        if $r2 != null goto label1;

        $r5 = staticinvoke <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$(java.lang.String)>("org.apache.batik.gvt.event.GraphicsNodeKeyListener");

        <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeKeyListener> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeKeyListener>;

     label2:
        virtualinvoke $r4.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>($r5, r3);

     label3:
        return;
    }

    public java.util.EventListener[] getListeners(java.lang.Class)
    {
        java.lang.Object[] $r5;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r1;
        javax.swing.event.EventListenerList $r2, $r4;
        int $i0, $i1, i2, i3, $i4, $i5;
        boolean $z0;
        java.util.EventListener[] $r8;
        java.lang.Class r0;
        java.lang.Object $r3, $r6, $r7;

        r1 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r0 := @parameter0: java.lang.Class;

        $r2 = r1.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        $i0 = virtualinvoke $r2.<javax.swing.event.EventListenerList: int getListenerCount(java.lang.Class)>(r0);

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, $i0);

        $r4 = r1.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        $r5 = virtualinvoke $r4.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        i2 = 0;

        i3 = 0;

        goto label3;

     label1:
        $r6 = $r5[i2];

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $i1 = i2 + 1;

        $r7 = $r5[$i1];

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r3, i3, $r7);

        i3 = i3 + 1;

     label2:
        i2 = i2 + 2;

     label3:
        $i4 = lengthof $r5;

        $i5 = $i4 - 1;

        if i2 < $i5 goto label1;

        $r8 = (java.util.EventListener[]) $r3;

        return $r8;
    }

    public void setEventDispatchEnabled(boolean)
    {
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;
        java.util.EventObject r4;
        java.util.List $r1, $r2;
        int $i0;
        java.lang.Object $r3;
        boolean z0, $z1;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: boolean eventDispatchEnabled> = z0;

        $z1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: boolean eventDispatchEnabled>;

        if $z1 == 0 goto label3;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(0);

        r4 = (java.util.EventObject) $r3;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchEvent(java.util.EventObject)>(r4);

     label2:
        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 > 0 goto label1;

     label3:
        return;
    }

    public void setEventQueueMaxSize(int)
    {
        java.util.List $r1, $r2, $r3;
        int i0, $i1, $i2;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        i0 := @parameter0: int;

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int eventQueueMaxSize> = i0;

        if i0 != 0 goto label2;

        $r2 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        goto label2;

     label1:
        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue>;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(0);

     label2:
        $r3 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i2 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int eventQueueMaxSize>;

        if $i1 > $i2 goto label1;

        return;
    }

    public void dispatchEvent(java.util.EventObject)
    {
        java.awt.event.InputEvent r3;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;
        java.util.EventObject r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.gvt.GraphicsNode $r1;
        java.awt.event.KeyEvent $r4;
        java.awt.event.MouseEvent $r5;
        java.util.List $r6, $r7, $r8;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r2 := @parameter0: java.util.EventObject;

        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode root>;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: boolean eventDispatchEnabled>;

        if $z0 != 0 goto label5;

        $i0 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int eventQueueMaxSize>;

        if $i0 <= 0 goto label4;

        $r6 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label3;

     label2:
        $r8 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue>;

        interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>(0);

     label3:
        $r7 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.List eventQueue>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i2 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int eventQueueMaxSize>;

        if $i1 > $i2 goto label2;

     label4:
        return;

     label5:
        $z1 = r2 instanceof java.awt.event.MouseEvent;

        if $z1 == 0 goto label6;

        $r5 = (java.awt.event.MouseEvent) r2;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchMouseEvent(java.awt.event.MouseEvent)>($r5);

        goto label9;

     label6:
        $z2 = r2 instanceof java.awt.event.KeyEvent;

        if $z2 == 0 goto label9;

        r3 = (java.awt.event.InputEvent) r2;

        $z3 = virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: boolean isNodeIncrementEvent(java.awt.event.InputEvent)>(r3);

        if $z3 == 0 goto label7;

        specialinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void incrementKeyTarget()>();

        goto label9;

     label7:
        $z4 = virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: boolean isNodeDecrementEvent(java.awt.event.InputEvent)>(r3);

        if $z4 == 0 goto label8;

        specialinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void decrementKeyTarget()>();

        goto label9;

     label8:
        $r4 = (java.awt.event.KeyEvent) r2;

        virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void dispatchKeyEvent(java.awt.event.KeyEvent)>($r4);

     label9:
        return;
    }

    protected int getCurrentLockState()
    {
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r5;
        int $i0, $i1, $i2, i3, i4, i5;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.UnsupportedOperationException $r1, $r2, $r3, $r4;
        java.awt.Toolkit $r0;

        r5 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        z4 = 0;

     label01:
        $z0 = virtualinvoke $r0.<java.awt.Toolkit: boolean getLockingKeyState(int)>(262);

        if $z0 == 0 goto label02;

        z4 = 1;

     label02:
        goto label04;

     label03:
        $r4 := @caughtexception;

     label04:
        $i2 = z4 << 1;

        i3 = $i2;

     label05:
        $z1 = virtualinvoke $r0.<java.awt.Toolkit: boolean getLockingKeyState(int)>(145);

        if $z1 == 0 goto label06;

        i3 = $i2 + 1;

     label06:
        goto label08;

     label07:
        $r3 := @caughtexception;

     label08:
        $i1 = i3 << 1;

        i4 = $i1;

     label09:
        $z2 = virtualinvoke $r0.<java.awt.Toolkit: boolean getLockingKeyState(int)>(144);

        if $z2 == 0 goto label10;

        i4 = $i1 + 1;

     label10:
        goto label12;

     label11:
        $r2 := @caughtexception;

     label12:
        $i0 = i4 << 1;

        i5 = $i0;

     label13:
        $z3 = virtualinvoke $r0.<java.awt.Toolkit: boolean getLockingKeyState(int)>(20);

        if $z3 == 0 goto label14;

        i5 = $i0 + 1;

     label14:
        goto label16;

     label15:
        $r1 := @caughtexception;

     label16:
        return i5;

        catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
        catch java.lang.UnsupportedOperationException from label05 to label06 with label07;
        catch java.lang.UnsupportedOperationException from label09 to label10 with label11;
        catch java.lang.UnsupportedOperationException from label13 to label14 with label15;
    }

    protected abstract void dispatchKeyEvent(java.awt.event.KeyEvent);

    protected abstract int getModifiers(java.awt.event.InputEvent);

    protected abstract int getButton(java.awt.event.MouseEvent);

    protected void dispatchMouseEvent(java.awt.event.MouseEvent)
    {
        org.apache.batik.gvt.GraphicsNode $r4, $r5, $r9, $r11, $r13, $r15, $r17;
        java.awt.geom.AffineTransform $r3, $r19;
        java.awt.Component $r6, $r7;
        long $l10, $l19, $l27, $l35;
        org.apache.batik.gvt.event.GraphicsNodeMouseEvent $r10, $r12, $r14, $r16;
        java.awt.event.MouseEvent r1;
        java.awt.geom.Point2D$Float $r0;
        java.awt.geom.Point2D r20;
        java.awt.Point $r8, $r18, r21;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;

        r2 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.MouseEvent;

        $r0 = new java.awt.geom.Point2D$Float;

        $i0 = virtualinvoke r1.<java.awt.event.MouseEvent: int getX()>();

        $f0 = (float) $i0;

        $i1 = virtualinvoke r1.<java.awt.event.MouseEvent: int getY()>();

        $f1 = (float) $i1;

        specialinvoke $r0.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f0, $f1);

        r20 = $r0;

        $r3 = r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.awt.geom.AffineTransform baseTransform>;

        if $r3 == null goto label1;

        $r19 = r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.awt.geom.AffineTransform baseTransform>;

        r20 = virtualinvoke $r19.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r0, null);

     label1:
        $r4 = r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode root>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.gvt.GraphicsNode nodeHitAt(java.awt.geom.Point2D)>(r20);

        $r6 = virtualinvoke r1.<java.awt.event.ComponentEvent: java.awt.Component getComponent()>();

        $z0 = virtualinvoke $r6.<java.awt.Component: boolean isShowing()>();

        if $z0 != 0 goto label2;

        $r18 = new java.awt.Point;

        specialinvoke $r18.<java.awt.Point: void <init>(int,int)>(0, 0);

        r21 = $r18;

        goto label3;

     label2:
        $r7 = virtualinvoke r1.<java.awt.event.ComponentEvent: java.awt.Component getComponent()>();

        $r8 = virtualinvoke $r7.<java.awt.Component: java.awt.Point getLocationOnScreen()>();

        r21 = $r8;

        $i2 = $r8.<java.awt.Point: int x>;

        $i3 = virtualinvoke r1.<java.awt.event.MouseEvent: int getX()>();

        $i4 = $i2 + $i3;

        $r8.<java.awt.Point: int x> = $i4;

        $i5 = $r8.<java.awt.Point: int y>;

        $i6 = virtualinvoke r1.<java.awt.event.MouseEvent: int getY()>();

        $i7 = $i5 + $i6;

        $r8.<java.awt.Point: int y> = $i7;

     label3:
        $i8 = virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int getCurrentLockState()>();

        $r9 = r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode lastHit>;

        if $r9 == $r5 goto label5;

        $r13 = r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode lastHit>;

        if $r13 == null goto label4;

        $r16 = new org.apache.batik.gvt.event.GraphicsNodeMouseEvent;

        $r17 = r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode lastHit>;

        $l35 = virtualinvoke r1.<java.awt.event.InputEvent: long getWhen()>();

        $i36 = virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int getModifiers(java.awt.event.InputEvent)>(r1);

        $i37 = virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int getButton(java.awt.event.MouseEvent)>(r1);

        $d18 = virtualinvoke r20.<java.awt.geom.Point2D: double getX()>();

        $f8 = (float) $d18;

        $d19 = virtualinvoke r20.<java.awt.geom.Point2D: double getY()>();

        $f9 = (float) $d19;

        $d20 = virtualinvoke $r0.<java.awt.geom.Point2D: double getX()>();

        $d21 = staticinvoke <java.lang.Math: double floor(double)>($d20);

        $i38 = (int) $d21;

        $d22 = virtualinvoke $r0.<java.awt.geom.Point2D: double getY()>();

        $d23 = staticinvoke <java.lang.Math: double floor(double)>($d22);

        $i39 = (int) $d23;

        $i40 = r21.<java.awt.Point: int x>;

        $i41 = r21.<java.awt.Point: int y>;

        $i42 = virtualinvoke r1.<java.awt.event.MouseEvent: int getClickCount()>();

        specialinvoke $r16.<org.apache.batik.gvt.event.GraphicsNodeMouseEvent: void <init>(org.apache.batik.gvt.GraphicsNode,int,long,int,int,int,float,float,int,int,int,int,int,org.apache.batik.gvt.GraphicsNode)>($r17, 505, $l35, $i36, $i8, $i37, $f8, $f9, $i38, $i39, $i40, $i41, $i42, $r5);

        virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void processMouseEvent(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>($r16);

     label4:
        if $r5 == null goto label5;

        $r14 = new org.apache.batik.gvt.event.GraphicsNodeMouseEvent;

        $l27 = virtualinvoke r1.<java.awt.event.InputEvent: long getWhen()>();

        $i28 = virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int getModifiers(java.awt.event.InputEvent)>(r1);

        $i29 = virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int getButton(java.awt.event.MouseEvent)>(r1);

        $d12 = virtualinvoke r20.<java.awt.geom.Point2D: double getX()>();

        $f6 = (float) $d12;

        $d13 = virtualinvoke r20.<java.awt.geom.Point2D: double getY()>();

        $f7 = (float) $d13;

        $d14 = virtualinvoke $r0.<java.awt.geom.Point2D: double getX()>();

        $d15 = staticinvoke <java.lang.Math: double floor(double)>($d14);

        $i30 = (int) $d15;

        $d16 = virtualinvoke $r0.<java.awt.geom.Point2D: double getY()>();

        $d17 = staticinvoke <java.lang.Math: double floor(double)>($d16);

        $i31 = (int) $d17;

        $i32 = r21.<java.awt.Point: int x>;

        $i33 = r21.<java.awt.Point: int y>;

        $i34 = virtualinvoke r1.<java.awt.event.MouseEvent: int getClickCount()>();

        $r15 = r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode lastHit>;

        specialinvoke $r14.<org.apache.batik.gvt.event.GraphicsNodeMouseEvent: void <init>(org.apache.batik.gvt.GraphicsNode,int,long,int,int,int,float,float,int,int,int,int,int,org.apache.batik.gvt.GraphicsNode)>($r5, 504, $l27, $i28, $i8, $i29, $f6, $f7, $i30, $i31, $i32, $i33, $i34, $r15);

        virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void processMouseEvent(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>($r14);

     label5:
        if $r5 == null goto label6;

        $r12 = new org.apache.batik.gvt.event.GraphicsNodeMouseEvent;

        $i18 = virtualinvoke r1.<java.awt.AWTEvent: int getID()>();

        $l19 = virtualinvoke r1.<java.awt.event.InputEvent: long getWhen()>();

        $i20 = virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int getModifiers(java.awt.event.InputEvent)>(r1);

        $i21 = virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int getButton(java.awt.event.MouseEvent)>(r1);

        $d6 = virtualinvoke r20.<java.awt.geom.Point2D: double getX()>();

        $f4 = (float) $d6;

        $d7 = virtualinvoke r20.<java.awt.geom.Point2D: double getY()>();

        $f5 = (float) $d7;

        $d8 = virtualinvoke $r0.<java.awt.geom.Point2D: double getX()>();

        $d9 = staticinvoke <java.lang.Math: double floor(double)>($d8);

        $i22 = (int) $d9;

        $d10 = virtualinvoke $r0.<java.awt.geom.Point2D: double getY()>();

        $d11 = staticinvoke <java.lang.Math: double floor(double)>($d10);

        $i23 = (int) $d11;

        $i24 = r21.<java.awt.Point: int x>;

        $i25 = r21.<java.awt.Point: int y>;

        $i26 = virtualinvoke r1.<java.awt.event.MouseEvent: int getClickCount()>();

        specialinvoke $r12.<org.apache.batik.gvt.event.GraphicsNodeMouseEvent: void <init>(org.apache.batik.gvt.GraphicsNode,int,long,int,int,int,float,float,int,int,int,int,int,org.apache.batik.gvt.GraphicsNode)>($r5, $i18, $l19, $i20, $i8, $i21, $f4, $f5, $i22, $i23, $i24, $i25, $i26, null);

        virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void processMouseEvent(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>($r12);

        goto label7;

     label6:
        $r10 = new org.apache.batik.gvt.event.GraphicsNodeMouseEvent;

        $r11 = r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode root>;

        $i9 = virtualinvoke r1.<java.awt.AWTEvent: int getID()>();

        $l10 = virtualinvoke r1.<java.awt.event.InputEvent: long getWhen()>();

        $i11 = virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int getModifiers(java.awt.event.InputEvent)>(r1);

        $i12 = virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int getButton(java.awt.event.MouseEvent)>(r1);

        $d0 = virtualinvoke r20.<java.awt.geom.Point2D: double getX()>();

        $f2 = (float) $d0;

        $d1 = virtualinvoke r20.<java.awt.geom.Point2D: double getY()>();

        $f3 = (float) $d1;

        $d2 = virtualinvoke $r0.<java.awt.geom.Point2D: double getX()>();

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $i13 = (int) $d3;

        $d4 = virtualinvoke $r0.<java.awt.geom.Point2D: double getY()>();

        $d5 = staticinvoke <java.lang.Math: double floor(double)>($d4);

        $i14 = (int) $d5;

        $i15 = r21.<java.awt.Point: int x>;

        $i16 = r21.<java.awt.Point: int y>;

        $i17 = virtualinvoke r1.<java.awt.event.MouseEvent: int getClickCount()>();

        specialinvoke $r10.<org.apache.batik.gvt.event.GraphicsNodeMouseEvent: void <init>(org.apache.batik.gvt.GraphicsNode,int,long,int,int,int,float,float,int,int,int,int,int,org.apache.batik.gvt.GraphicsNode)>($r11, $i9, $l10, $i11, $i8, $i12, $f2, $f3, $i13, $i14, $i15, $i16, $i17, null);

        virtualinvoke r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: void processMouseEvent(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>($r10);

     label7:
        r2.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: org.apache.batik.gvt.GraphicsNode lastHit> = $r5;

        return;
    }

    protected void processMouseEvent(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)
    {
        javax.swing.event.EventListenerList $r1;
        java.util.EventListener[] $r3;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;
        org.apache.batik.gvt.event.GraphicsNodeMouseEvent r4;
        java.lang.StringBuffer $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, i15;
        java.lang.String $r16;
        org.apache.batik.gvt.event.GraphicsNodeMouseListener[] $r17;
        java.lang.IllegalArgumentException $r12;
        org.apache.batik.gvt.event.GraphicsNodeMouseListener $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.Class $r2, $r18;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r4 := @parameter0: org.apache.batik.gvt.event.GraphicsNodeMouseEvent;

        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        if $r1 == null goto label25;

        $r2 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseListener>;

        if $r2 != null goto label01;

        $r18 = staticinvoke <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$(java.lang.String)>("org.apache.batik.gvt.event.GraphicsNodeMouseListener");

        <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseListener> = $r18;

        goto label02;

     label01:
        $r18 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeMouseListener>;

     label02:
        $r3 = virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.EventListener[] getListeners(java.lang.Class)>($r18);

        $r17 = (org.apache.batik.gvt.event.GraphicsNodeMouseListener[]) $r3;

        $i0 = virtualinvoke r4.<org.apache.batik.gvt.event.GraphicsNodeEvent: int getID()>();

        tableswitch($i0)
        {
            case 500: goto label15;
            case 501: goto label18;
            case 502: goto label21;
            case 503: goto label03;
            case 504: goto label09;
            case 505: goto label12;
            case 506: goto label06;
            default: goto label24;
        };

     label03:
        i9 = 0;

        goto label05;

     label04:
        $r8 = $r17[i9];

        interfaceinvoke $r8.<org.apache.batik.gvt.event.GraphicsNodeMouseListener: void mouseMoved(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>(r4);

        i9 = i9 + 1;

     label05:
        $i4 = lengthof $r17;

        if i9 < $i4 goto label04;

        goto label25;

     label06:
        i10 = 0;

        goto label08;

     label07:
        $r5 = $r17[i10];

        interfaceinvoke $r5.<org.apache.batik.gvt.event.GraphicsNodeMouseListener: void mouseDragged(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>(r4);

        i10 = i10 + 1;

     label08:
        $i1 = lengthof $r17;

        if i10 < $i1 goto label07;

        goto label25;

     label09:
        i11 = 0;

        goto label11;

     label10:
        $r7 = $r17[i11];

        interfaceinvoke $r7.<org.apache.batik.gvt.event.GraphicsNodeMouseListener: void mouseEntered(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>(r4);

        i11 = i11 + 1;

     label11:
        $i3 = lengthof $r17;

        if i11 < $i3 goto label10;

        goto label25;

     label12:
        i12 = 0;

        goto label14;

     label13:
        $r6 = $r17[i12];

        interfaceinvoke $r6.<org.apache.batik.gvt.event.GraphicsNodeMouseListener: void mouseExited(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>(r4);

        i12 = i12 + 1;

     label14:
        $i2 = lengthof $r17;

        if i12 < $i2 goto label13;

        goto label25;

     label15:
        i13 = 0;

        goto label17;

     label16:
        $r11 = $r17[i13];

        interfaceinvoke $r11.<org.apache.batik.gvt.event.GraphicsNodeMouseListener: void mouseClicked(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>(r4);

        i13 = i13 + 1;

     label17:
        $i7 = lengthof $r17;

        if i13 < $i7 goto label16;

        goto label25;

     label18:
        i14 = 0;

        goto label20;

     label19:
        $r10 = $r17[i14];

        interfaceinvoke $r10.<org.apache.batik.gvt.event.GraphicsNodeMouseListener: void mousePressed(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>(r4);

        i14 = i14 + 1;

     label20:
        $i6 = lengthof $r17;

        if i14 < $i6 goto label19;

        goto label25;

     label21:
        i15 = 0;

        goto label23;

     label22:
        $r9 = $r17[i15];

        interfaceinvoke $r9.<org.apache.batik.gvt.event.GraphicsNodeMouseListener: void mouseReleased(org.apache.batik.gvt.event.GraphicsNodeMouseEvent)>(r4);

        i15 = i15 + 1;

     label23:
        $i5 = lengthof $r17;

        if i15 < $i5 goto label22;

        goto label25;

     label24:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown Mouse Event type: ");

        $i8 = virtualinvoke r4.<org.apache.batik.gvt.event.GraphicsNodeEvent: int getID()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label25:
        return;
    }

    public void processKeyEvent(org.apache.batik.gvt.event.GraphicsNodeKeyEvent)
    {
        org.apache.batik.gvt.event.GraphicsNodeKeyListener $r5, $r6, $r7;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;
        javax.swing.event.EventListenerList $r1;
        java.lang.StringBuffer $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.lang.String $r12;
        org.apache.batik.gvt.event.GraphicsNodeKeyListener[] $r13;
        java.util.EventListener[] $r4;
        java.lang.IllegalArgumentException $r8;
        org.apache.batik.gvt.event.GraphicsNodeKeyEvent r2;
        java.lang.Class $r3, $r14;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r2 := @parameter0: org.apache.batik.gvt.event.GraphicsNodeKeyEvent;

        $r1 = r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: javax.swing.event.EventListenerList glisteners>;

        if $r1 == null goto label13;

        $r3 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeKeyListener>;

        if $r3 != null goto label01;

        $r14 = staticinvoke <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$(java.lang.String)>("org.apache.batik.gvt.event.GraphicsNodeKeyListener");

        <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeKeyListener> = $r14;

        goto label02;

     label01:
        $r14 = <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.lang.Class class$org$apache$batik$gvt$event$GraphicsNodeKeyListener>;

     label02:
        $r4 = virtualinvoke r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: java.util.EventListener[] getListeners(java.lang.Class)>($r14);

        $r13 = (org.apache.batik.gvt.event.GraphicsNodeKeyListener[]) $r4;

        $i0 = virtualinvoke r2.<org.apache.batik.gvt.event.GraphicsNodeEvent: int getID()>();

        tableswitch($i0)
        {
            case 400: goto label09;
            case 401: goto label03;
            case 402: goto label06;
            default: goto label12;
        };

     label03:
        i5 = 0;

        goto label05;

     label04:
        $r6 = $r13[i5];

        interfaceinvoke $r6.<org.apache.batik.gvt.event.GraphicsNodeKeyListener: void keyPressed(org.apache.batik.gvt.event.GraphicsNodeKeyEvent)>(r2);

        i5 = i5 + 1;

     label05:
        $i2 = lengthof $r13;

        if i5 < $i2 goto label04;

        goto label13;

     label06:
        i6 = 0;

        goto label08;

     label07:
        $r5 = $r13[i6];

        interfaceinvoke $r5.<org.apache.batik.gvt.event.GraphicsNodeKeyListener: void keyReleased(org.apache.batik.gvt.event.GraphicsNodeKeyEvent)>(r2);

        i6 = i6 + 1;

     label08:
        $i1 = lengthof $r13;

        if i6 < $i1 goto label07;

        goto label13;

     label09:
        i7 = 0;

        goto label11;

     label10:
        $r7 = $r13[i7];

        interfaceinvoke $r7.<org.apache.batik.gvt.event.GraphicsNodeKeyListener: void keyTyped(org.apache.batik.gvt.event.GraphicsNodeKeyEvent)>(r2);

        i7 = i7 + 1;

     label11:
        $i3 = lengthof $r13;

        if i7 < $i3 goto label10;

        goto label13;

     label12:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown Key Event type: ");

        $i4 = virtualinvoke r2.<org.apache.batik.gvt.event.GraphicsNodeEvent: int getID()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label13:
        virtualinvoke r2.<org.apache.batik.gvt.event.GraphicsNodeEvent: void consume()>();

        return;
    }

    private void incrementKeyTarget()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r1;

        r1 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Increment not implemented.");

        throw $r0;
    }

    private void decrementKeyTarget()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r1;

        r1 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Decrement not implemented.");

        throw $r0;
    }

    public void setNodeIncrementEvent(java.awt.event.InputEvent)
    {
        java.awt.event.InputEvent r1;
        int $i0, $i1, $i2;
        java.awt.event.KeyEvent $r2;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.InputEvent;

        $i0 = virtualinvoke r1.<java.awt.AWTEvent: int getID()>();

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeIncrementEventID> = $i0;

        $z0 = r1 instanceof java.awt.event.KeyEvent;

        if $z0 == 0 goto label1;

        $r2 = (java.awt.event.KeyEvent) r1;

        $i2 = virtualinvoke $r2.<java.awt.event.KeyEvent: int getKeyCode()>();

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeIncrementEventCode> = $i2;

     label1:
        $i1 = virtualinvoke r1.<java.awt.event.InputEvent: int getModifiers()>();

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeIncrementEventModifiers> = $i1;

        return;
    }

    public void setNodeDecrementEvent(java.awt.event.InputEvent)
    {
        java.awt.event.InputEvent r1;
        int $i0, $i1, $i2;
        java.awt.event.KeyEvent $r2;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r1 := @parameter0: java.awt.event.InputEvent;

        $i0 = virtualinvoke r1.<java.awt.AWTEvent: int getID()>();

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeDecrementEventID> = $i0;

        $z0 = r1 instanceof java.awt.event.KeyEvent;

        if $z0 == 0 goto label1;

        $r2 = (java.awt.event.KeyEvent) r1;

        $i2 = virtualinvoke $r2.<java.awt.event.KeyEvent: int getKeyCode()>();

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeDecrementEventCode> = $i2;

     label1:
        $i1 = virtualinvoke r1.<java.awt.event.InputEvent: int getModifiers()>();

        r0.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeDecrementEventModifiers> = $i1;

        return;
    }

    protected boolean isNodeIncrementEvent(java.awt.event.InputEvent)
    {
        java.awt.event.InputEvent r0;
        java.awt.event.KeyEvent $r2;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r1 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r0 := @parameter0: java.awt.event.InputEvent;

        $i0 = virtualinvoke r0.<java.awt.AWTEvent: int getID()>();

        $i1 = r1.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeIncrementEventID>;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof java.awt.event.KeyEvent;

        if $z0 == 0 goto label2;

        $r2 = (java.awt.event.KeyEvent) r0;

        $i5 = virtualinvoke $r2.<java.awt.event.KeyEvent: int getKeyCode()>();

        $i6 = r1.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeIncrementEventCode>;

        if $i5 == $i6 goto label2;

        return 0;

     label2:
        $i2 = virtualinvoke r0.<java.awt.event.InputEvent: int getModifiers()>();

        $i3 = r1.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeIncrementEventModifiers>;

        $i4 = $i2 & $i3;

        if $i4 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    protected boolean isNodeDecrementEvent(java.awt.event.InputEvent)
    {
        java.awt.event.InputEvent r0;
        java.awt.event.KeyEvent $r2;
        org.apache.batik.gvt.event.AbstractAWTEventDispatcher r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r1 := @this: org.apache.batik.gvt.event.AbstractAWTEventDispatcher;

        r0 := @parameter0: java.awt.event.InputEvent;

        $i0 = virtualinvoke r0.<java.awt.AWTEvent: int getID()>();

        $i1 = r1.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeDecrementEventID>;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof java.awt.event.KeyEvent;

        if $z0 == 0 goto label2;

        $r2 = (java.awt.event.KeyEvent) r0;

        $i5 = virtualinvoke $r2.<java.awt.event.KeyEvent: int getKeyCode()>();

        $i6 = r1.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeDecrementEventCode>;

        if $i5 == $i6 goto label2;

        return 0;

     label2:
        $i2 = virtualinvoke r0.<java.awt.event.InputEvent: int getModifiers()>();

        $i3 = r1.<org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int nodeDecrementEventModifiers>;

        $i4 = $i2 & $i3;

        if $i4 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    public static void <clinit>()
    {
        <org.apache.batik.gvt.event.AbstractAWTEventDispatcher: int MAX_QUEUE_SIZE> = 10;

        return;
    }
}
