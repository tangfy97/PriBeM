public class org.sat4j.tools.SingleSolutionDetector extends org.sat4j.tools.SolverDecorator
{
    private static final long serialVersionUID;
    static final boolean $assertionsDisabled;

    public void <init>(org.sat4j.specs.ISolver)
    {
        org.sat4j.tools.SingleSolutionDetector r0;
        org.sat4j.specs.ISolver r1;

        r0 := @this: org.sat4j.tools.SingleSolutionDetector;

        r1 := @parameter0: org.sat4j.specs.ISolver;

        specialinvoke r0.<org.sat4j.tools.SolverDecorator: void <init>(org.sat4j.specs.ISolver)>(r1);

        return;
    }

    public boolean hasASingleSolution() throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.core.VecInt $r1;
        org.sat4j.tools.SingleSolutionDetector r0;
        boolean $z0;

        r0 := @this: org.sat4j.tools.SingleSolutionDetector;

        $r1 = new org.sat4j.core.VecInt;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>()>();

        $z0 = virtualinvoke r0.<org.sat4j.tools.SingleSolutionDetector: boolean hasASingleSolution(org.sat4j.specs.IVecInt)>($r1);

        return $z0;
    }

    public boolean hasASingleSolution(org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        java.lang.AssertionError $r5;
        int[] $r1;
        int $i0, i1, $i2, $i3, i4;
        boolean $z0, $z1, $z2, z3;
        org.sat4j.specs.ContradictionException $r6;
        org.sat4j.specs.IConstr $r3;
        org.sat4j.specs.IVecInt r4;
        org.sat4j.core.VecInt $r2;
        org.sat4j.tools.SingleSolutionDetector r0;

        r0 := @this: org.sat4j.tools.SingleSolutionDetector;

        r4 := @parameter0: org.sat4j.specs.IVecInt;

        $r1 = virtualinvoke r0.<org.sat4j.tools.SingleSolutionDetector: int[] model()>();

        $z0 = <org.sat4j.tools.SingleSolutionDetector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $r1 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r2 = new org.sat4j.core.VecInt;

        $i0 = lengthof $r1;

        specialinvoke $r2.<org.sat4j.core.VecInt: void <init>(int)>($i0);

        $i3 = lengthof $r1;

        i4 = 0;

     label2:
        if i4 >= $i3 goto label3;

        i1 = $r1[i4];

        $i2 = neg i1;

        interfaceinvoke $r2.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i2);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r3 = virtualinvoke r0.<org.sat4j.tools.SingleSolutionDetector: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r2);

        $z1 = virtualinvoke r0.<org.sat4j.tools.SingleSolutionDetector: boolean isSatisfiable(org.sat4j.specs.IVecInt)>(r4);

        if $z1 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        z3 = $z2;

        virtualinvoke r0.<org.sat4j.tools.SingleSolutionDetector: boolean removeConstr(org.sat4j.specs.IConstr)>($r3);

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        z3 = 1;

     label8:
        return z3;

        catch org.sat4j.specs.ContradictionException from label3 to label6 with label7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.tools.SingleSolutionDetector: long serialVersionUID> = 1L;

        $r0 = class "Lorg/sat4j/tools/SingleSolutionDetector;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.tools.SingleSolutionDetector: boolean $assertionsDisabled> = $z1;

        return;
    }
}
