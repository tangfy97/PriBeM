public class org.apache.lucene.document.Field extends java.lang.Object implements org.apache.lucene.index.IndexableField
{
    protected final org.apache.lucene.document.FieldType type;
    protected final java.lang.String name;
    protected java.lang.Object fieldsData;
    protected org.apache.lucene.analysis.TokenStream tokenStream;
    private transient org.apache.lucene.analysis.TokenStream internalTokenStream;
    private transient org.apache.lucene.document.Field$ReusableStringReader internalReader;
    protected float boost;

    protected void <init>(java.lang.String, org.apache.lucene.document.FieldType)
    {
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.FieldType r2;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.document.FieldType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.document.Field: float boost> = 1.0F;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name cannot be null");

        throw $r4;

     label1:
        r0.<org.apache.lucene.document.Field: java.lang.String name> = r1;

        if r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("type cannot be null");

        throw $r3;

     label2:
        r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type> = r2;

        return;
    }

    public void <init>(java.lang.String, java.io.Reader, org.apache.lucene.document.FieldType)
    {
        org.apache.lucene.document.FieldType r2;
        java.io.Reader r3;
        java.lang.IllegalArgumentException $r4, $r5, $r7, $r8;
        java.lang.NullPointerException $r6;
        org.apache.lucene.document.Field r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.io.Reader;

        r2 := @parameter2: org.apache.lucene.document.FieldType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.document.Field: float boost> = 1.0F;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name cannot be null");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("type cannot be null");

        throw $r7;

     label2:
        if r3 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("reader cannot be null");

        throw $r6;

     label3:
        $z0 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean stored()>();

        if $z0 == 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fields with a Reader value cannot be stored");

        throw $r5;

     label4:
        $z1 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean indexed()>();

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean tokenized()>();

        if $z2 != 0 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("non-tokenized fields must use String values");

        throw $r4;

     label5:
        r0.<org.apache.lucene.document.Field: java.lang.String name> = r1;

        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = r3;

        r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type> = r2;

        return;
    }

    public void <init>(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.FieldType)
    {
        org.apache.lucene.analysis.TokenStream r2;
        org.apache.lucene.document.FieldType r3;
        java.lang.IllegalArgumentException $r4, $r5, $r7;
        java.lang.NullPointerException $r6;
        org.apache.lucene.document.Field r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r3 := @parameter2: org.apache.lucene.document.FieldType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.document.Field: float boost> = 1.0F;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name cannot be null");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("tokenStream cannot be null");

        throw $r6;

     label2:
        $z0 = virtualinvoke r3.<org.apache.lucene.document.FieldType: boolean indexed()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r3.<org.apache.lucene.document.FieldType: boolean tokenized()>();

        if $z1 != 0 goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TokenStream fields must be indexed and tokenized");

        throw $r4;

     label4:
        $z2 = virtualinvoke r3.<org.apache.lucene.document.FieldType: boolean stored()>();

        if $z2 == 0 goto label5;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TokenStream fields cannot be stored");

        throw $r5;

     label5:
        r0.<org.apache.lucene.document.Field: java.lang.String name> = r1;

        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = null;

        r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream tokenStream> = r2;

        r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type> = r3;

        return;
    }

    public void <init>(java.lang.String, byte[], org.apache.lucene.document.FieldType)
    {
        byte[] r2;
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.FieldType r3;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: org.apache.lucene.document.FieldType;

        $i0 = lengthof r2;

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,byte[],int,int,org.apache.lucene.document.FieldType)>(r1, r2, 0, $i0, r3);

        return;
    }

    public void <init>(java.lang.String, byte[], int, int, org.apache.lucene.document.FieldType)
    {
        byte[] r3;
        org.apache.lucene.document.Field r0;
        org.apache.lucene.util.BytesRef $r2;
        org.apache.lucene.document.FieldType r4;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r4 := @parameter4: org.apache.lucene.document.FieldType;

        $r2 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r2.<org.apache.lucene.util.BytesRef: void <init>(byte[],int,int)>(r3, i0, i1);

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,org.apache.lucene.util.BytesRef,org.apache.lucene.document.FieldType)>(r1, $r2, r4);

        return;
    }

    public void <init>(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.document.FieldType)
    {
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.FieldType r2;
        org.apache.lucene.util.BytesRef r3;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.lucene.util.BytesRef;

        r2 := @parameter2: org.apache.lucene.document.FieldType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.document.Field: float boost> = 1.0F;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name cannot be null");

        throw $r5;

     label1:
        $z0 = virtualinvoke r2.<org.apache.lucene.document.FieldType: boolean indexed()>();

        if $z0 == 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields with BytesRef values cannot be indexed");

        throw $r4;

     label2:
        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = r3;

        r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type> = r2;

        r0.<org.apache.lucene.document.Field: java.lang.String name> = r1;

        return;
    }

    public void <init>(java.lang.String, java.lang.String, org.apache.lucene.document.FieldType)
    {
        org.apache.lucene.document.FieldType r3;
        java.lang.IllegalArgumentException $r4, $r5, $r6, $r7;
        org.apache.lucene.document.Field r0;
        java.lang.String r1, r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.document.FieldType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.document.Field: float boost> = 1.0F;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name cannot be null");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("value cannot be null");

        throw $r6;

     label2:
        $z0 = virtualinvoke r3.<org.apache.lucene.document.FieldType: boolean stored()>();

        if $z0 != 0 goto label3;

        $z3 = virtualinvoke r3.<org.apache.lucene.document.FieldType: boolean indexed()>();

        if $z3 != 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("it doesn\'t make sense to have a field that is neither indexed nor stored");

        throw $r5;

     label3:
        $z1 = virtualinvoke r3.<org.apache.lucene.document.FieldType: boolean indexed()>();

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r3.<org.apache.lucene.document.FieldType: boolean storeTermVectors()>();

        if $z2 == 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot store term vector information for a field that is not indexed");

        throw $r4;

     label4:
        r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type> = r3;

        r0.<org.apache.lucene.document.Field: java.lang.String name> = r1;

        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = r2;

        return;
    }

    public java.lang.String stringValue()
    {
        org.apache.lucene.document.Field r0;
        java.lang.Object $r1, $r2, $r4;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.document.Field;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z1 = $r4 instanceof java.lang.Number;

        if $z1 == 0 goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;

     label2:
        return null;
    }

    public java.io.Reader readerValue()
    {
        org.apache.lucene.document.Field r0;
        java.lang.Object $r1, $r2;
        java.io.Reader $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.io.Reader;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r3 = (java.io.Reader) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public org.apache.lucene.analysis.TokenStream tokenStreamValue()
    {
        org.apache.lucene.analysis.TokenStream $r1;
        org.apache.lucene.document.Field r0;

        r0 := @this: org.apache.lucene.document.Field;

        $r1 = r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream tokenStream>;

        return $r1;
    }

    public void setStringValue(java.lang.String)
    {
        java.lang.IllegalArgumentException $r3;
        org.apache.lucene.document.Field r0;
        java.lang.Object $r1, $r6;
        java.lang.StringBuilder $r4, $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String r2, $r8, $r11;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change value type from ");

        $r6 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to String");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label1:
        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = r2;

        return;
    }

    public void setReaderValue(java.io.Reader)
    {
        java.io.Reader r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.lucene.document.Field r0;
        java.lang.Object $r1, $r6;
        java.lang.StringBuilder $r4, $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        r2 := @parameter0: java.io.Reader;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.io.Reader;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change value type from ");

        $r6 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to Reader");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label1:
        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = r2;

        return;
    }

    public void setBytesValue(byte[])
    {
        byte[] r2;
        org.apache.lucene.document.Field r0;
        org.apache.lucene.util.BytesRef $r1;

        r0 := @this: org.apache.lucene.document.Field;

        r2 := @parameter0: byte[];

        $r1 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r1.<org.apache.lucene.util.BytesRef: void <init>(byte[])>(r2);

        virtualinvoke r0.<org.apache.lucene.document.Field: void setBytesValue(org.apache.lucene.util.BytesRef)>($r1);

        return;
    }

    public void setBytesValue(org.apache.lucene.util.BytesRef)
    {
        org.apache.lucene.document.FieldType $r2;
        java.lang.String $r10, $r13;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef r3;
        java.lang.IllegalArgumentException $r4, $r5;
        org.apache.lucene.document.Field r0;
        java.lang.Object $r1, $r8;
        java.lang.StringBuilder $r6, $r7, $r11, $r12;
        java.lang.Class $r9;

        r0 := @this: org.apache.lucene.document.Field;

        r3 := @parameter0: org.apache.lucene.util.BytesRef;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof org.apache.lucene.util.BytesRef;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change value type from ");

        $r8 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getSimpleName()>();

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to BytesRef");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label1:
        $r2 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type>;

        $z1 = virtualinvoke $r2.<org.apache.lucene.document.FieldType: boolean indexed()>();

        if $z1 == 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot set a BytesRef value on an indexed field");

        throw $r4;

     label2:
        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = r3;

        return;
    }

    public void setByteValue(byte)
    {
        java.lang.IllegalArgumentException $r3;
        byte b0;
        org.apache.lucene.document.Field r0;
        java.lang.Object $r1, $r6;
        java.lang.StringBuilder $r4, $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;
        java.lang.Byte $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        b0 := @parameter0: byte;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.lang.Byte;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change value type from ");

        $r6 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to Byte");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label1:
        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = $r2;

        return;
    }

    public void setShortValue(short)
    {
        java.lang.IllegalArgumentException $r3;
        short s0;
        org.apache.lucene.document.Field r0;
        java.lang.Short $r2;
        java.lang.Object $r1, $r6;
        java.lang.StringBuilder $r4, $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        s0 := @parameter0: short;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.lang.Short;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change value type from ");

        $r6 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to Short");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label1:
        $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);

        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = $r2;

        return;
    }

    public void setIntValue(int)
    {
        java.lang.IllegalArgumentException $r3;
        java.lang.Integer $r2;
        org.apache.lucene.document.Field r0;
        int i0;
        java.lang.Object $r1, $r6;
        java.lang.StringBuilder $r4, $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.lang.Integer;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change value type from ");

        $r6 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to Integer");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = $r2;

        return;
    }

    public void setLongValue(long)
    {
        long l0;
        java.lang.IllegalArgumentException $r3;
        java.lang.Long $r2;
        org.apache.lucene.document.Field r0;
        java.lang.Object $r1, $r6;
        java.lang.StringBuilder $r4, $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.lang.Long;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change value type from ");

        $r6 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to Long");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label1:
        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = $r2;

        return;
    }

    public void setFloatValue(float)
    {
        java.lang.Float $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.lucene.document.Field r0;
        float f0;
        java.lang.Object $r1, $r6;
        java.lang.StringBuilder $r4, $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.lang.Float;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change value type from ");

        $r6 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to Float");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label1:
        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = $r2;

        return;
    }

    public void setDoubleValue(double)
    {
        java.lang.Double $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.lucene.document.Field r0;
        java.lang.Object $r1, $r6;
        java.lang.StringBuilder $r4, $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;
        boolean $z0;
        double d0;

        r0 := @this: org.apache.lucene.document.Field;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.lang.Double;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change value type from ");

        $r6 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to Double");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label1:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData> = $r2;

        return;
    }

    public void setTokenStream(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.document.FieldType$NumericType $r5;
        org.apache.lucene.analysis.TokenStream r6;
        org.apache.lucene.document.FieldType $r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2, $r7;
        org.apache.lucene.document.Field r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.document.Field;

        r6 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r1 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.document.FieldType: boolean indexed()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type>;

        $z1 = virtualinvoke $r3.<org.apache.lucene.document.FieldType: boolean tokenized()>();

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TokenStream fields must be indexed and tokenized");

        throw $r2;

     label2:
        $r4 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.document.FieldType: org.apache.lucene.document.FieldType$NumericType numericType()>();

        if $r5 == null goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot set private TokenStream on numeric fields");

        throw $r7;

     label3:
        r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream tokenStream> = r6;

        return;
    }

    public java.lang.String name()
    {
        java.lang.String $r1;
        org.apache.lucene.document.Field r0;

        r0 := @this: org.apache.lucene.document.Field;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.String name>;

        return $r1;
    }

    public float boost()
    {
        float $f0;
        org.apache.lucene.document.Field r0;

        r0 := @this: org.apache.lucene.document.Field;

        $f0 = r0.<org.apache.lucene.document.Field: float boost>;

        return $f0;
    }

    public void setBoost(float)
    {
        org.apache.lucene.document.FieldType $r1, $r3;
        java.lang.IllegalArgumentException $r2;
        byte $b0;
        org.apache.lucene.document.Field r0;
        float f0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.document.Field;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 1.0F;

        if $b0 == 0 goto label2;

        $r1 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type>;

        $z0 = virtualinvoke $r1.<org.apache.lucene.document.FieldType: boolean indexed()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type>;

        $z1 = virtualinvoke $r3.<org.apache.lucene.document.FieldType: boolean omitNorms()>();

        if $z1 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You cannot set an index-time boost on an unindexed field, or one that omits norms");

        throw $r2;

     label2:
        r0.<org.apache.lucene.document.Field: float boost> = f0;

        return;
    }

    public java.lang.Number numericValue()
    {
        org.apache.lucene.document.Field r0;
        java.lang.Object $r1, $r2;
        java.lang.Number $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r3 = (java.lang.Number) $r2;

        return $r3;

     label1:
        return null;
    }

    public org.apache.lucene.util.BytesRef binaryValue()
    {
        org.apache.lucene.document.Field r0;
        org.apache.lucene.util.BytesRef $r3;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.document.Field;

        $r1 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $z0 = $r1 instanceof org.apache.lucene.util.BytesRef;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r3 = (org.apache.lucene.util.BytesRef) $r2;

        return $r3;

     label1:
        return null;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.document.FieldType $r2;
        org.apache.lucene.document.Field r1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r5, $r7;
        java.lang.String $r3, $r4, $r6;

        r1 := @this: org.apache.lucene.document.Field;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.document.FieldType: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        $r4 = r1.<org.apache.lucene.document.Field: java.lang.String name>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r5 = r1.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        if $r5 == null goto label1;

        $r7 = r1.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public org.apache.lucene.document.FieldType fieldType()
    {
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.FieldType $r1;

        r0 := @this: org.apache.lucene.document.Field;

        $r1 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type>;

        return $r1;
    }

    public org.apache.lucene.analysis.TokenStream tokenStream(org.apache.lucene.analysis.Analyzer) throws java.io.IOException
    {
        org.apache.lucene.document.Field$StringTokenStream $r24, $r27;
        org.apache.lucene.document.FieldType $r1, $r2, $r4, $r35;
        int[] $r32;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.document.FieldType$NumericType $r3;
        java.io.Reader $r6, $r18;
        org.apache.lucene.document.Field$ReusableStringReader $r9, $r10, $r14, $r16;
        float $f0;
        org.apache.lucene.analysis.NumericTokenStream $r34, $r36;
        long $l2;
        java.lang.AssertionError $r33;
        int $i0, $i1, $i3, $i4;
        java.lang.String $r7, $r11, $r13, $r17, $r21, $r25;
        java.lang.Number $r37;
        double $d0;
        org.apache.lucene.analysis.TokenStream $r5, $r15, $r19, $r20, $r22, $r23, $r26, $r29, $r30, $r38;
        org.apache.lucene.analysis.Analyzer r12;
        java.lang.IllegalArgumentException $r8, $r28;
        org.apache.lucene.document.Field r0;
        java.lang.Object $r31;

        r0 := @this: org.apache.lucene.document.Field;

        r12 := @parameter0: org.apache.lucene.analysis.Analyzer;

        $r1 = virtualinvoke r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType fieldType()>();

        $z0 = virtualinvoke $r1.<org.apache.lucene.document.FieldType: boolean indexed()>();

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r2 = virtualinvoke r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType fieldType()>();

        $r3 = virtualinvoke $r2.<org.apache.lucene.document.FieldType: org.apache.lucene.document.FieldType$NumericType numericType()>();

        if $r3 == null goto label09;

        $r29 = r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream internalTokenStream>;

        $z3 = $r29 instanceof org.apache.lucene.analysis.NumericTokenStream;

        if $z3 != 0 goto label02;

        $r34 = new org.apache.lucene.analysis.NumericTokenStream;

        $r35 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType type>;

        $i4 = virtualinvoke $r35.<org.apache.lucene.document.FieldType: int numericPrecisionStep()>();

        specialinvoke $r34.<org.apache.lucene.analysis.NumericTokenStream: void <init>(int)>($i4);

        r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream internalTokenStream> = $r34;

     label02:
        $r30 = r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream internalTokenStream>;

        $r36 = (org.apache.lucene.analysis.NumericTokenStream) $r30;

        $r31 = r0.<org.apache.lucene.document.Field: java.lang.Object fieldsData>;

        $r37 = (java.lang.Number) $r31;

        $r32 = <org.apache.lucene.document.Field$1: int[] $SwitchMap$org$apache$lucene$document$FieldType$NumericType>;

        $i0 = virtualinvoke $r3.<org.apache.lucene.document.FieldType$NumericType: int ordinal()>();

        $i1 = $r32[$i0];

        tableswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            default: goto label07;
        };

     label03:
        $i3 = virtualinvoke $r37.<java.lang.Number: int intValue()>();

        virtualinvoke $r36.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setIntValue(int)>($i3);

        goto label08;

     label04:
        $l2 = virtualinvoke $r37.<java.lang.Number: long longValue()>();

        virtualinvoke $r36.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setLongValue(long)>($l2);

        goto label08;

     label05:
        $f0 = virtualinvoke $r37.<java.lang.Number: float floatValue()>();

        virtualinvoke $r36.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setFloatValue(float)>($f0);

        goto label08;

     label06:
        $d0 = virtualinvoke $r37.<java.lang.Number: double doubleValue()>();

        virtualinvoke $r36.<org.apache.lucene.analysis.NumericTokenStream: org.apache.lucene.analysis.NumericTokenStream setDoubleValue(double)>($d0);

        goto label08;

     label07:
        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>(java.lang.Object)>("Should never get here");

        throw $r33;

     label08:
        $r38 = r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream internalTokenStream>;

        return $r38;

     label09:
        $r4 = virtualinvoke r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType fieldType()>();

        $z1 = virtualinvoke $r4.<org.apache.lucene.document.FieldType: boolean tokenized()>();

        if $z1 != 0 goto label12;

        $r21 = virtualinvoke r0.<org.apache.lucene.document.Field: java.lang.String stringValue()>();

        if $r21 != null goto label10;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-Tokenized Fields must have a String value");

        throw $r28;

     label10:
        $r22 = r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream internalTokenStream>;

        $z2 = $r22 instanceof org.apache.lucene.document.Field$StringTokenStream;

        if $z2 != 0 goto label11;

        $r27 = new org.apache.lucene.document.Field$StringTokenStream;

        specialinvoke $r27.<org.apache.lucene.document.Field$StringTokenStream: void <init>()>();

        r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream internalTokenStream> = $r27;

     label11:
        $r23 = r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream internalTokenStream>;

        $r24 = (org.apache.lucene.document.Field$StringTokenStream) $r23;

        $r25 = virtualinvoke r0.<org.apache.lucene.document.Field: java.lang.String stringValue()>();

        virtualinvoke $r24.<org.apache.lucene.document.Field$StringTokenStream: void setValue(java.lang.String)>($r25);

        $r26 = r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream internalTokenStream>;

        return $r26;

     label12:
        $r5 = r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream tokenStream>;

        if $r5 == null goto label13;

        $r20 = r0.<org.apache.lucene.document.Field: org.apache.lucene.analysis.TokenStream tokenStream>;

        return $r20;

     label13:
        $r6 = virtualinvoke r0.<org.apache.lucene.document.Field: java.io.Reader readerValue()>();

        if $r6 == null goto label14;

        $r17 = virtualinvoke r0.<org.apache.lucene.document.Field: java.lang.String name()>();

        $r18 = virtualinvoke r0.<org.apache.lucene.document.Field: java.io.Reader readerValue()>();

        $r19 = virtualinvoke r12.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>($r17, $r18);

        return $r19;

     label14:
        $r7 = virtualinvoke r0.<org.apache.lucene.document.Field: java.lang.String stringValue()>();

        if $r7 == null goto label16;

        $r9 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.Field$ReusableStringReader internalReader>;

        if $r9 != null goto label15;

        $r16 = new org.apache.lucene.document.Field$ReusableStringReader;

        specialinvoke $r16.<org.apache.lucene.document.Field$ReusableStringReader: void <init>()>();

        r0.<org.apache.lucene.document.Field: org.apache.lucene.document.Field$ReusableStringReader internalReader> = $r16;

     label15:
        $r10 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.Field$ReusableStringReader internalReader>;

        $r11 = virtualinvoke r0.<org.apache.lucene.document.Field: java.lang.String stringValue()>();

        virtualinvoke $r10.<org.apache.lucene.document.Field$ReusableStringReader: void setValue(java.lang.String)>($r11);

        $r13 = virtualinvoke r0.<org.apache.lucene.document.Field: java.lang.String name()>();

        $r14 = r0.<org.apache.lucene.document.Field: org.apache.lucene.document.Field$ReusableStringReader internalReader>;

        $r15 = virtualinvoke r12.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>($r13, $r14);

        return $r15;

     label16:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must have either TokenStream, String, Reader or Number value");

        throw $r8;
    }

    public static final org.apache.lucene.document.FieldType translateFieldType(org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)
    {
        org.apache.lucene.document.Field$Store r1, $r2;
        org.apache.lucene.document.Field$Index r3;
        org.apache.lucene.document.FieldType $r0;
        org.apache.lucene.document.Field$TermVector r5;
        int[] $r4, $r6;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r1 := @parameter0: org.apache.lucene.document.Field$Store;

        r3 := @parameter1: org.apache.lucene.document.Field$Index;

        r5 := @parameter2: org.apache.lucene.document.Field$TermVector;

        $r0 = new org.apache.lucene.document.FieldType;

        specialinvoke $r0.<org.apache.lucene.document.FieldType: void <init>()>();

        $r2 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        if r1 != $r2 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setStored(boolean)>($z0);

        $r4 = <org.apache.lucene.document.Field$1: int[] $SwitchMap$org$apache$lucene$document$Field$Index>;

        $i0 = virtualinvoke r3.<org.apache.lucene.document.Field$Index: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            default: goto label07;
        };

     label03:
        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setIndexed(boolean)>(1);

        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setTokenized(boolean)>(1);

        goto label07;

     label04:
        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setIndexed(boolean)>(1);

        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setTokenized(boolean)>(1);

        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setOmitNorms(boolean)>(1);

        goto label07;

     label05:
        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setIndexed(boolean)>(1);

        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setTokenized(boolean)>(0);

        goto label07;

     label06:
        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setIndexed(boolean)>(1);

        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setTokenized(boolean)>(0);

        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setOmitNorms(boolean)>(1);

        goto label07;

     label07:
        $r6 = <org.apache.lucene.document.Field$1: int[] $SwitchMap$org$apache$lucene$document$Field$TermVector>;

        $i2 = virtualinvoke r5.<org.apache.lucene.document.Field$TermVector: int ordinal()>();

        $i3 = $r6[$i2];

        tableswitch($i3)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label11;
            case 5: goto label12;
            default: goto label13;
        };

     label08:
        goto label13;

     label09:
        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setStoreTermVectors(boolean)>(1);

        goto label13;

     label10:
        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setStoreTermVectors(boolean)>(1);

        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setStoreTermVectorPositions(boolean)>(1);

        goto label13;

     label11:
        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setStoreTermVectors(boolean)>(1);

        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setStoreTermVectorOffsets(boolean)>(1);

        goto label13;

     label12:
        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setStoreTermVectors(boolean)>(1);

        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setStoreTermVectorPositions(boolean)>(1);

        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void setStoreTermVectorOffsets(boolean)>(1);

     label13:
        virtualinvoke $r0.<org.apache.lucene.document.FieldType: void freeze()>();

        return $r0;
    }

    public void <init>(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index)
    {
        org.apache.lucene.document.Field$Store r3;
        org.apache.lucene.document.Field$Index r4;
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.Field$TermVector $r5;
        org.apache.lucene.document.FieldType $r6;
        java.lang.String r1, r2;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.document.Field$Store;

        r4 := @parameter3: org.apache.lucene.document.Field$Index;

        $r5 = <org.apache.lucene.document.Field$TermVector: org.apache.lucene.document.Field$TermVector NO>;

        $r6 = staticinvoke <org.apache.lucene.document.Field: org.apache.lucene.document.FieldType translateFieldType(org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index,org.apache.lucene.document.Field$TermVector)>(r3, r4, $r5);

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.FieldType)>(r1, r2, $r6);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)
    {
        org.apache.lucene.document.Field$Store r3;
        org.apache.lucene.document.Field$Index r4;
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.Field$TermVector r5;
        org.apache.lucene.document.FieldType $r6;
        java.lang.String r1, r2;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.document.Field$Store;

        r4 := @parameter3: org.apache.lucene.document.Field$Index;

        r5 := @parameter4: org.apache.lucene.document.Field$TermVector;

        $r6 = staticinvoke <org.apache.lucene.document.Field: org.apache.lucene.document.FieldType translateFieldType(org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index,org.apache.lucene.document.Field$TermVector)>(r3, r4, r5);

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,java.lang.String,org.apache.lucene.document.FieldType)>(r1, r2, $r6);

        return;
    }

    public void <init>(java.lang.String, java.io.Reader)
    {
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.Field$TermVector $r3;
        java.lang.String r1;
        java.io.Reader r2;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        $r3 = <org.apache.lucene.document.Field$TermVector: org.apache.lucene.document.Field$TermVector NO>;

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,java.io.Reader,org.apache.lucene.document.Field$TermVector)>(r1, r2, $r3);

        return;
    }

    public void <init>(java.lang.String, java.io.Reader, org.apache.lucene.document.Field$TermVector)
    {
        org.apache.lucene.document.Field$Store $r5;
        org.apache.lucene.document.Field$Index $r4;
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.Field$TermVector r3;
        org.apache.lucene.document.FieldType $r6;
        java.lang.String r1;
        java.io.Reader r2;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        r3 := @parameter2: org.apache.lucene.document.Field$TermVector;

        $r5 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store NO>;

        $r4 = <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index ANALYZED>;

        $r6 = staticinvoke <org.apache.lucene.document.Field: org.apache.lucene.document.FieldType translateFieldType(org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index,org.apache.lucene.document.Field$TermVector)>($r5, $r4, r3);

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,java.io.Reader,org.apache.lucene.document.FieldType)>(r1, r2, $r6);

        return;
    }

    public void <init>(java.lang.String, org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.TokenStream r2;
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.Field$TermVector $r3;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        $r3 = <org.apache.lucene.document.Field$TermVector: org.apache.lucene.document.Field$TermVector NO>;

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,org.apache.lucene.analysis.TokenStream,org.apache.lucene.document.Field$TermVector)>(r1, r2, $r3);

        return;
    }

    public void <init>(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.Field$TermVector)
    {
        org.apache.lucene.document.Field$Store $r5;
        org.apache.lucene.document.Field$Index $r4;
        org.apache.lucene.analysis.TokenStream r2;
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.Field$TermVector r3;
        org.apache.lucene.document.FieldType $r6;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.analysis.TokenStream;

        r3 := @parameter2: org.apache.lucene.document.Field$TermVector;

        $r5 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store NO>;

        $r4 = <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index ANALYZED>;

        $r6 = staticinvoke <org.apache.lucene.document.Field: org.apache.lucene.document.FieldType translateFieldType(org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index,org.apache.lucene.document.Field$TermVector)>($r5, $r4, r3);

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,org.apache.lucene.analysis.TokenStream,org.apache.lucene.document.FieldType)>(r1, r2, $r6);

        return;
    }

    public void <init>(java.lang.String, byte[])
    {
        byte[] r2;
        org.apache.lucene.document.Field$Store $r5;
        org.apache.lucene.document.Field$Index $r4;
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.Field$TermVector $r3;
        org.apache.lucene.document.FieldType $r6;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r5 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $r4 = <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index NO>;

        $r3 = <org.apache.lucene.document.Field$TermVector: org.apache.lucene.document.Field$TermVector NO>;

        $r6 = staticinvoke <org.apache.lucene.document.Field: org.apache.lucene.document.FieldType translateFieldType(org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index,org.apache.lucene.document.Field$TermVector)>($r5, $r4, $r3);

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,byte[],org.apache.lucene.document.FieldType)>(r1, r2, $r6);

        return;
    }

    public void <init>(java.lang.String, byte[], int, int)
    {
        byte[] r2;
        org.apache.lucene.document.Field$Store $r5;
        org.apache.lucene.document.Field$Index $r4;
        org.apache.lucene.document.Field$TermVector $r3;
        org.apache.lucene.document.FieldType $r6;
        org.apache.lucene.document.Field r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.document.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r5 = <org.apache.lucene.document.Field$Store: org.apache.lucene.document.Field$Store YES>;

        $r4 = <org.apache.lucene.document.Field$Index: org.apache.lucene.document.Field$Index NO>;

        $r3 = <org.apache.lucene.document.Field$TermVector: org.apache.lucene.document.Field$TermVector NO>;

        $r6 = staticinvoke <org.apache.lucene.document.Field: org.apache.lucene.document.FieldType translateFieldType(org.apache.lucene.document.Field$Store,org.apache.lucene.document.Field$Index,org.apache.lucene.document.Field$TermVector)>($r5, $r4, $r3);

        specialinvoke r0.<org.apache.lucene.document.Field: void <init>(java.lang.String,byte[],int,int,org.apache.lucene.document.FieldType)>(r1, r2, i0, i1, $r6);

        return;
    }

    public volatile org.apache.lucene.index.IndexableFieldType fieldType()
    {
        org.apache.lucene.document.Field r0;
        org.apache.lucene.document.FieldType $r1;

        r0 := @this: org.apache.lucene.document.Field;

        $r1 = virtualinvoke r0.<org.apache.lucene.document.Field: org.apache.lucene.document.FieldType fieldType()>();

        return $r1;
    }
}
