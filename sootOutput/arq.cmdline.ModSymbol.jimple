public class arq.cmdline.ModSymbol extends java.lang.Object implements arq.cmdline.ArgModuleGeneral
{
    protected final arq.cmdline.ArgDecl setDecl;
    com.hp.hpl.jena.sparql.util.Context context;
    private java.lang.String namespace;

    public void <init>()
    {
        arq.cmdline.ModSymbol r0;

        r0 := @this: arq.cmdline.ModSymbol;

        specialinvoke r0.<arq.cmdline.ModSymbol: void <init>(java.lang.String)>("arq");

        return;
    }

    public void <init>(java.lang.String)
    {
        arq.cmdline.ModSymbol r0;
        arq.cmdline.ArgDecl $r1;
        java.lang.String[] $r2;
        java.lang.String r4;
        com.hp.hpl.jena.sparql.util.Context $r3;

        r0 := @this: arq.cmdline.ModSymbol;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new arq.cmdline.ArgDecl;

        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "define";

        $r2[1] = "defn";

        $r2[2] = "def";

        specialinvoke $r1.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "set", $r2);

        r0.<arq.cmdline.ModSymbol: arq.cmdline.ArgDecl setDecl> = $r1;

        $r3 = new com.hp.hpl.jena.sparql.util.Context;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.util.Context: void <init>()>();

        r0.<arq.cmdline.ModSymbol: com.hp.hpl.jena.sparql.util.Context context> = $r3;

        r0.<arq.cmdline.ModSymbol: java.lang.String namespace> = r4;

        return;
    }

    public void registerWith(arq.cmdline.CmdGeneral)
    {
        arq.cmdline.Usage $r1;
        arq.cmdline.ModSymbol r2;
        arq.cmdline.CmdGeneral r0;
        arq.cmdline.ArgDecl $r3;

        r2 := @this: arq.cmdline.ModSymbol;

        r0 := @parameter0: arq.cmdline.CmdGeneral;

        $r1 = virtualinvoke r0.<arq.cmdline.CmdGeneral: arq.cmdline.Usage getUsage()>();

        virtualinvoke $r1.<arq.cmdline.Usage: void startCategory(java.lang.String)>("Symbol definition");

        $r3 = r2.<arq.cmdline.ModSymbol: arq.cmdline.ArgDecl setDecl>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r3, "--set", "Set a configuration symbol to a value");

        return;
    }

    public void checkCommandLine(arq.cmdline.CmdArgModule)
    {
        arq.cmdline.CmdArgModule r1;
        arq.cmdline.ModSymbol r0;

        r0 := @this: arq.cmdline.ModSymbol;

        r1 := @parameter0: arq.cmdline.CmdArgModule;

        return;
    }

    public void processArgs(arq.cmdline.CmdArgModule)
    {
        arq.cmdline.ArgDecl $r2, $r4, $r6;
        java.lang.String[] $r13;
        arq.cmdline.CmdArgModule r0;
        int $i0, $i1;
        java.lang.String r12, r14, $r15, $r23, r24;
        boolean $z0;
        com.hp.hpl.jena.sparql.util.Symbol $r16;
        java.util.Iterator $r8;
        arq.cmdline.ModSymbol r1;
        java.lang.RuntimeException $r18;
        com.hp.hpl.jena.sparql.util.Context $r9, $r10, $r17;
        java.util.List $r3, $r5, $r7;
        java.lang.Object $r11;
        java.lang.StringBuilder $r19, $r20, $r21, $r22;

        r1 := @this: arq.cmdline.ModSymbol;

        r0 := @parameter0: arq.cmdline.CmdArgModule;

        staticinvoke <com.hp.hpl.jena.query.ARQ: void init()>();

        $r2 = r1.<arq.cmdline.ModSymbol: arq.cmdline.ArgDecl setDecl>;

        $r3 = virtualinvoke r0.<arq.cmdline.CmdArgModule: java.util.List getValues(arq.cmdline.ArgDecl)>($r2);

        if $r3 == null goto label1;

        $r4 = r1.<arq.cmdline.ModSymbol: arq.cmdline.ArgDecl setDecl>;

        $r5 = virtualinvoke r0.<arq.cmdline.CmdArgModule: java.util.List getValues(arq.cmdline.ArgDecl)>($r4);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        $r6 = r1.<arq.cmdline.ModSymbol: arq.cmdline.ArgDecl setDecl>;

        $r7 = virtualinvoke r0.<arq.cmdline.CmdArgModule: java.util.List getValues(arq.cmdline.ArgDecl)>($r6);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r11 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke r12.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("=", 2);

        $i1 = lengthof $r13;

        if $i1 == 2 goto label4;

        $r18 = new java.lang.RuntimeException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t split \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' -- looking for \'=\' to separate name and value");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label4:
        r24 = $r13[0];

        r14 = $r13[1];

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.util.MappingRegistry: java.lang.String mapPrefixName(java.lang.String)>(r24);

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.util.Symbol: com.hp.hpl.jena.sparql.util.Symbol create(java.lang.String)>($r15);

        $r17 = r1.<arq.cmdline.ModSymbol: com.hp.hpl.jena.sparql.util.Context context>;

        virtualinvoke $r17.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r16, r14);

        goto label3;

     label5:
        $r9 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r10 = r1.<arq.cmdline.ModSymbol: com.hp.hpl.jena.sparql.util.Context context>;

        virtualinvoke $r9.<com.hp.hpl.jena.sparql.util.Context: void putAll(com.hp.hpl.jena.sparql.util.Context)>($r10);

        return;
    }

    public void verbose()
    {
        java.io.PrintStream $r1;
        arq.cmdline.ModSymbol r0;

        r0 := @this: arq.cmdline.ModSymbol;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r0.<arq.cmdline.ModSymbol: void verbose(java.io.PrintStream)>($r1);

        return;
    }

    public void verbose(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        org.apache.jena.atlas.io.IndentedWriter $r0;
        arq.cmdline.ModSymbol r2;

        r2 := @this: arq.cmdline.ModSymbol;

        r1 := @parameter0: java.io.PrintStream;

        $r0 = new org.apache.jena.atlas.io.IndentedWriter;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream)>(r1);

        virtualinvoke r2.<arq.cmdline.ModSymbol: void verbose(org.apache.jena.atlas.io.IndentedWriter)>($r0);

        virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public void verbose(org.apache.jena.atlas.io.IndentedWriter)
    {
        java.util.Iterator $r3;
        arq.cmdline.ModSymbol r0;
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.util.Context $r1, $r6;
        org.apache.jena.atlas.io.IndentedWriter r8;
        java.lang.Object $r4;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        java.lang.String $r7, $r13;
        boolean $z0;
        com.hp.hpl.jena.sparql.util.Symbol r5;

        r0 := @this: arq.cmdline.ModSymbol;

        r8 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        $r1 = r0.<arq.cmdline.ModSymbol: com.hp.hpl.jena.sparql.util.Context context>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.Context: java.util.Set keys()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.util.Symbol) $r4;

        $r6 = r0.<arq.cmdline.ModSymbol: com.hp.hpl.jena.sparql.util.Context context>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.util.Context: java.lang.String getAsString(com.hp.hpl.jena.sparql.util.Symbol)>(r5);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<org.apache.jena.atlas.io.IndentedWriter: void println(java.lang.String)>($r13);

        goto label1;

     label2:
        return;
    }
}
