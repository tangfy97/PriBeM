class org.waveprotocol.box.server.rpc.WebSocketClientChannel extends org.waveprotocol.box.server.rpc.WebSocketChannel
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final com.sixfire.websocket.WebSocket websocket;
    private final java.util.concurrent.ExecutorService threadPool;
    private final java.lang.Runnable asyncRead;
    private boolean isReading;

    public void <init>(com.sixfire.websocket.WebSocket, org.waveprotocol.box.server.rpc.ProtoCallback, java.util.concurrent.ExecutorService)
    {
        org.waveprotocol.box.server.rpc.WebSocketClientChannel$1 $r2;
        org.waveprotocol.box.server.rpc.WebSocketClientChannel r0;
        com.sixfire.websocket.WebSocket r3;
        org.waveprotocol.box.server.rpc.ProtoCallback r1;
        java.util.concurrent.ExecutorService r4;

        r0 := @this: org.waveprotocol.box.server.rpc.WebSocketClientChannel;

        r3 := @parameter0: com.sixfire.websocket.WebSocket;

        r1 := @parameter1: org.waveprotocol.box.server.rpc.ProtoCallback;

        r4 := @parameter2: java.util.concurrent.ExecutorService;

        specialinvoke r0.<org.waveprotocol.box.server.rpc.WebSocketChannel: void <init>(org.waveprotocol.box.server.rpc.ProtoCallback)>(r1);

        $r2 = new org.waveprotocol.box.server.rpc.WebSocketClientChannel$1;

        specialinvoke $r2.<org.waveprotocol.box.server.rpc.WebSocketClientChannel$1: void <init>(org.waveprotocol.box.server.rpc.WebSocketClientChannel)>(r0);

        r0.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: java.lang.Runnable asyncRead> = $r2;

        r0.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: boolean isReading> = 0;

        r0.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: com.sixfire.websocket.WebSocket websocket> = r3;

        r0.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: java.util.concurrent.ExecutorService threadPool> = r4;

        return;
    }

    public void startAsyncRead()
    {
        java.lang.IllegalStateException $r3;
        org.waveprotocol.box.server.rpc.WebSocketClientChannel r0;
        java.lang.Runnable $r1;
        java.util.concurrent.ExecutorService $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.WebSocketClientChannel;

        $z0 = r0.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: boolean isReading>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This websocket is already reading asynchronously.");

        throw $r3;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: java.util.concurrent.ExecutorService threadPool>;

        $r1 = r0.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: java.lang.Runnable asyncRead>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r1);

        r0.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: boolean isReading> = 1;

        return;
    }

    public void sendMessageString(java.lang.String) throws java.io.IOException
    {
        org.waveprotocol.box.server.rpc.WebSocketClientChannel r0;
        com.sixfire.websocket.WebSocket $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.box.server.rpc.WebSocketClientChannel;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: com.sixfire.websocket.WebSocket websocket>;

        virtualinvoke $r2.<com.sixfire.websocket.WebSocket: void send(java.lang.String)>(r1);

        return;
    }

    static com.sixfire.websocket.WebSocket access$000(org.waveprotocol.box.server.rpc.WebSocketClientChannel)
    {
        org.waveprotocol.box.server.rpc.WebSocketClientChannel r0;
        com.sixfire.websocket.WebSocket $r1;

        r0 := @parameter0: org.waveprotocol.box.server.rpc.WebSocketClientChannel;

        $r1 = r0.<org.waveprotocol.box.server.rpc.WebSocketClientChannel: com.sixfire.websocket.WebSocket websocket>;

        return $r1;
    }

    static org.waveprotocol.wave.util.logging.Log access$100()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.rpc.WebSocketClientChannel: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/rpc/WebSocketClientChannel;");

        <org.waveprotocol.box.server.rpc.WebSocketClientChannel: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
