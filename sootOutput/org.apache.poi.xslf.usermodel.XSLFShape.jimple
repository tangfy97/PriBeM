public abstract class org.apache.poi.xslf.usermodel.XSLFShape extends java.lang.Object
{

    public void <init>()
    {
        org.apache.poi.xslf.usermodel.XSLFShape r0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShape;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.awt.geom.Rectangle2D getAnchor();

    public abstract void setAnchor(java.awt.geom.Rectangle2D);

    public abstract org.apache.xmlbeans.XmlObject getXmlObject();

    public abstract java.lang.String getShapeName();

    public abstract int getShapeId();

    public abstract void setRotation(double);

    public abstract double getRotation();

    public abstract void setFlipHorizontal(boolean);

    public abstract void setFlipVertical(boolean);

    public abstract boolean getFlipHorizontal();

    public abstract boolean getFlipVertical();

    public abstract void draw(java.awt.Graphics2D);

    protected void applyTransform(java.awt.Graphics2D)
    {
        java.awt.geom.Rectangle2D $r1, $r8, $r10, r12;
        byte $b0, $b8, $b9;
        java.awt.geom.AffineTransform r5, $r6, $r7;
        org.apache.poi.xslf.usermodel.XSLFRenderingHint $r3;
        org.apache.poi.xslf.usermodel.XSLFShape r0;
        boolean $z0, $z1;
        java.awt.Shape $r9, $r11;
        java.awt.Graphics2D r2;
        int $i1, $i2, $i3, i4, $i5, $i6, $i7, $i10, $i11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, d35, d36, d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46;
        java.lang.Object $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShape;

        r2 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: java.awt.geom.Rectangle2D getAnchor()>();

        r12 = $r1;

        $r3 = <org.apache.poi.xslf.usermodel.XSLFRenderingHint: org.apache.poi.xslf.usermodel.XSLFRenderingHint GROUP_TRANSFORM>;

        $r4 = virtualinvoke r2.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r3);

        r5 = (java.awt.geom.AffineTransform) $r4;

        if r5 == null goto label01;

        $r11 = virtualinvoke r5.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        r12 = interfaceinvoke $r11.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

     label01:
        $d0 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: double getRotation()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label08;

        $d17 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getCenterX()>();

        $d18 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getCenterY()>();

        $d19 = $d0 % 360.0;

        $d20 = 360.0 + $d19;

        d35 = $d20 % 360.0;

        $i1 = (int) d35;

        $i2 = $i1 + 45;

        $i3 = $i2 / 90;

        i4 = $i3 % 4;

        d36 = 1.0;

        d37 = 1.0;

        if i4 == 1 goto label02;

        if i4 != 3 goto label07;

     label02:
        $r6 = new java.awt.geom.AffineTransform;

        specialinvoke $r6.<java.awt.geom.AffineTransform: void <init>()>();

        $r7 = new java.awt.geom.AffineTransform;

        specialinvoke $r7.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r5);

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void translate(double,double)>($d17, $d18);

        $i5 = i4 * 90;

        $d21 = (double) $i5;

        $d22 = staticinvoke <java.lang.Math: double toRadians(double)>($d21);

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void rotate(double)>($d22);

        $d24 = neg $d17;

        $d23 = neg $d18;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void translate(double,double)>($d24, $d23);

        virtualinvoke $r7.<java.awt.geom.AffineTransform: void translate(double,double)>($d17, $d18);

        $i6 = neg i4;

        $i7 = $i6 * 90;

        $d25 = (double) $i7;

        $d26 = staticinvoke <java.lang.Math: double toRadians(double)>($d25);

        virtualinvoke $r7.<java.awt.geom.AffineTransform: void rotate(double)>($d26);

        $d28 = neg $d17;

        $d27 = neg $d18;

        virtualinvoke $r7.<java.awt.geom.AffineTransform: void translate(double,double)>($d28, $d27);

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r7);

        $r8 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: java.awt.geom.Rectangle2D getAnchor()>();

        $r9 = virtualinvoke $r6.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r8);

        $r10 = interfaceinvoke $r9.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d29 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getWidth()>();

        $b8 = $d29 cmpl 0.0;

        if $b8 != 0 goto label03;

        $d38 = 1.0;

        goto label04;

     label03:
        $d30 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d31 = virtualinvoke $r10.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d38 = $d30 / $d31;

     label04:
        d36 = $d38;

        $d32 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getHeight()>();

        $b9 = $d32 cmpl 0.0;

        if $b9 != 0 goto label05;

        $d39 = 1.0;

        goto label06;

     label05:
        $d33 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d34 = virtualinvoke $r10.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d39 = $d33 / $d34;

     label06:
        d37 = $d39;

     label07:
        virtualinvoke r2.<java.awt.Graphics2D: void translate(double,double)>($d17, $d18);

        $i10 = i4 * 90;

        $d40 = (double) $i10;

        $d41 = d35 - $d40;

        $d42 = staticinvoke <java.lang.Math: double toRadians(double)>($d41);

        virtualinvoke r2.<java.awt.Graphics2D: void rotate(double)>($d42);

        virtualinvoke r2.<java.awt.Graphics2D: void scale(double,double)>(d36, d37);

        $i11 = i4 * 90;

        $d43 = (double) $i11;

        $d44 = staticinvoke <java.lang.Math: double toRadians(double)>($d43);

        virtualinvoke r2.<java.awt.Graphics2D: void rotate(double)>($d44);

        $d45 = neg $d17;

        $d46 = neg $d18;

        virtualinvoke r2.<java.awt.Graphics2D: void translate(double,double)>($d45, $d46);

     label08:
        $z1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: boolean getFlipHorizontal()>();

        if $z1 == 0 goto label09;

        $d9 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getX()>();

        $d10 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d11 = $d9 + $d10;

        $d12 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getY()>();

        virtualinvoke r2.<java.awt.Graphics2D: void translate(double,double)>($d11, $d12);

        virtualinvoke r2.<java.awt.Graphics2D: void scale(double,double)>(-1.0, 1.0);

        $d13 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getX()>();

        $d14 = neg $d13;

        $d15 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getY()>();

        $d16 = neg $d15;

        virtualinvoke r2.<java.awt.Graphics2D: void translate(double,double)>($d14, $d16);

     label09:
        $z0 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: boolean getFlipVertical()>();

        if $z0 == 0 goto label10;

        $d1 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getX()>();

        $d2 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getY()>();

        $d3 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d4 = $d2 + $d3;

        virtualinvoke r2.<java.awt.Graphics2D: void translate(double,double)>($d1, $d4);

        virtualinvoke r2.<java.awt.Graphics2D: void scale(double,double)>(1.0, -1.0);

        $d5 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getX()>();

        $d6 = neg $d5;

        $d7 = virtualinvoke r12.<java.awt.geom.Rectangle2D: double getY()>();

        $d8 = neg $d7;

        virtualinvoke r2.<java.awt.Graphics2D: void translate(double,double)>($d6, $d8);

     label10:
        return;
    }

    void copy(org.apache.poi.xslf.usermodel.XSLFShape)
    {
        java.awt.geom.Rectangle2D $r3;
        org.apache.poi.xslf.usermodel.XSLFShape r0, r2;
        java.lang.String $r8, $r12, $r14;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Class $r1, $r7, $r11;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r13;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFShape;

        r2 := @parameter0: org.apache.poi.xslf.usermodel.XSLFShape;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t copy ");

        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" into ");

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r4;

     label1:
        $r3 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFShape: java.awt.geom.Rectangle2D getAnchor()>();

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: void setAnchor(java.awt.geom.Rectangle2D)>($r3);

        return;
    }
}
