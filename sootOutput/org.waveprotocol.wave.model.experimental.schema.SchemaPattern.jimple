public final class org.waveprotocol.wave.model.experimental.schema.SchemaPattern extends java.lang.Object
{
    private org.waveprotocol.wave.model.experimental.schema.AttributesValidator attributesValidator;
    private org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue prologue;
    private java.util.Map potentialChildren;
    private org.waveprotocol.wave.model.experimental.schema.CharacterValidator characterValidator;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void initialize(org.waveprotocol.wave.model.experimental.schema.AttributesValidator, org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue, java.util.Map, org.waveprotocol.wave.model.experimental.schema.CharacterValidator)
    {
        org.waveprotocol.wave.model.experimental.schema.AttributesValidator r1, $r11;
        java.lang.AssertionError $r6, $r8, $r10, $r12;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue r2, $r9;
        java.util.Map r3, $r7;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.experimental.schema.CharacterValidator r4, $r5;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.AttributesValidator;

        r2 := @parameter1: org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: org.waveprotocol.wave.model.experimental.schema.CharacterValidator;

        $z0 = <org.waveprotocol.wave.model.experimental.schema.SchemaPattern: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r11 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: org.waveprotocol.wave.model.experimental.schema.AttributesValidator attributesValidator>;

        if $r11 == null goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $z1 = <org.waveprotocol.wave.model.experimental.schema.SchemaPattern: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r9 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue prologue>;

        if $r9 == null goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $z2 = <org.waveprotocol.wave.model.experimental.schema.SchemaPattern: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r7 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: java.util.Map potentialChildren>;

        if $r7 == null goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        $z3 = <org.waveprotocol.wave.model.experimental.schema.SchemaPattern: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $r5 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: org.waveprotocol.wave.model.experimental.schema.CharacterValidator characterValidator>;

        if $r5 == null goto label4;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: org.waveprotocol.wave.model.experimental.schema.AttributesValidator attributesValidator> = r1;

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue prologue> = r2;

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: java.util.Map potentialChildren> = r3;

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: org.waveprotocol.wave.model.experimental.schema.CharacterValidator characterValidator> = r4;

        return;
    }

    public org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue prologue()
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern r0;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue $r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: org.waveprotocol.wave.model.experimental.schema.SchemaPattern$Prologue prologue>;

        return $r1;
    }

    public org.waveprotocol.wave.model.experimental.schema.SchemaPattern child(java.lang.String)
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern r0, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: java.util.Map potentialChildren>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.model.experimental.schema.SchemaPattern) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult validateAttributes(org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult $r3;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern r0;
        org.waveprotocol.wave.model.experimental.schema.AttributesValidator $r2;
        org.waveprotocol.wave.model.document.operation.Attributes r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: org.waveprotocol.wave.model.experimental.schema.AttributesValidator attributesValidator>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.experimental.schema.AttributesValidator: org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult validate(org.waveprotocol.wave.model.document.operation.Attributes)>(r1);

        return $r3;
    }

    public org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult validateAttributesUpdate(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult $r3;
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern r0;
        org.waveprotocol.wave.model.experimental.schema.AttributesValidator $r2;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: org.waveprotocol.wave.model.experimental.schema.AttributesValidator attributesValidator>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.experimental.schema.AttributesValidator: org.waveprotocol.wave.model.experimental.schema.AttributeValidationResult validate(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r1);

        return $r3;
    }

    public int validateCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaPattern r0;
        int $i0;
        java.lang.String r1;
        org.waveprotocol.wave.model.experimental.schema.CharacterValidator $r2;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaPattern;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaPattern: org.waveprotocol.wave.model.experimental.schema.CharacterValidator characterValidator>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.experimental.schema.CharacterValidator: int validate(java.lang.String)>(r1);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/experimental/schema/SchemaPattern;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.experimental.schema.SchemaPattern: boolean $assertionsDisabled> = $z1;

        return;
    }
}
