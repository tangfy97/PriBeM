public final class org.wiztools.commons.RotN extends java.lang.Object
{
    private static final char[] lookup;

    private void <init>()
    {
        org.wiztools.commons.RotN r0;

        r0 := @this: org.wiztools.commons.RotN;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void map(int, org.wiztools.commons.RotN$Emitter)
    {
        char $c3, $c4;
        java.lang.IllegalArgumentException $r0;
        org.wiztools.commons.RotN$Emitter r3;
        int i0, $i1, $i2, i5, i6;
        char[] $r1, $r2, $r4, $r5;

        i0 := @parameter0: int;

        r3 := @parameter1: org.wiztools.commons.RotN$Emitter;

        if i0 < 1 goto label1;

        if i0 <= 25 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value of N should be between 1 and 26");

        throw $r0;

     label2:
        i5 = 0;

        i6 = i0;

     label3:
        $r1 = <org.wiztools.commons.RotN: char[] lookup>;

        $i1 = lengthof $r1;

        if i5 >= $i1 goto label5;

        $r2 = <org.wiztools.commons.RotN: char[] lookup>;

        $i2 = lengthof $r2;

        if i6 != $i2 goto label4;

        i6 = 0;

     label4:
        $r4 = <org.wiztools.commons.RotN: char[] lookup>;

        $c4 = $r4[i5];

        $r5 = <org.wiztools.commons.RotN: char[] lookup>;

        $c3 = $r5[i6];

        interfaceinvoke r3.<org.wiztools.commons.RotN$Emitter: void emit(char,char)>($c4, $c3);

        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label3;

     label5:
        return;
    }

    private static java.util.Map getCipherMap(int)
    {
        int i0;
        org.wiztools.commons.RotN$1 $r1;
        java.util.HashMap $r0;

        i0 := @parameter0: int;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new org.wiztools.commons.RotN$1;

        specialinvoke $r1.<org.wiztools.commons.RotN$1: void <init>(java.util.Map)>($r0);

        staticinvoke <org.wiztools.commons.RotN: void map(int,org.wiztools.commons.RotN$Emitter)>(i0, $r1);

        return $r0;
    }

    private static java.util.Map getDeCipherMap(int)
    {
        int i0;
        java.util.HashMap $r0;
        org.wiztools.commons.RotN$2 $r1;

        i0 := @parameter0: int;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new org.wiztools.commons.RotN$2;

        specialinvoke $r1.<org.wiztools.commons.RotN$2: void <init>(java.util.Map)>($r0);

        staticinvoke <org.wiztools.commons.RotN: void map(int,org.wiztools.commons.RotN$Emitter)>(i0, $r1);

        return $r0;
    }

    private static java.lang.String process(java.lang.String, java.util.Map) throws java.lang.IllegalArgumentException
    {
        char c2, $c3, $c4;
        java.lang.Character $r5, r7;
        java.util.Map r4;
        int $i0, i1, i5;
        char[] $r1;
        java.lang.StringBuilder $r2;
        java.lang.Object $r6;
        java.lang.String r0, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.util.Map;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r2 = new java.lang.StringBuilder;

        $i0 = lengthof $r1;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        i1 = lengthof $r1;

        i5 = 0;

     label1:
        if i5 >= i1 goto label5;

        c2 = $r1[i5];

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c2);

        $r6 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r7 = (java.lang.Character) $r6;

        if r7 != null goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        goto label4;

     label2:
        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c2);

        if $z0 == 0 goto label3;

        $c3 = virtualinvoke r7.<java.lang.Character: char charValue()>();

        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        goto label4;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String cipher(int, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.util.Map $r1;
        int i0;
        java.lang.String r0, $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.wiztools.commons.RotN: java.util.Map getCipherMap(int)>(i0);

        $r2 = staticinvoke <org.wiztools.commons.RotN: java.lang.String process(java.lang.String,java.util.Map)>(r0, $r1);

        return $r2;
    }

    public static java.lang.String deCipher(int, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.util.Map $r1;
        int i0;
        java.lang.String r0, $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.wiztools.commons.RotN: java.util.Map getDeCipherMap(int)>(i0);

        $r2 = staticinvoke <org.wiztools.commons.RotN: java.lang.String process(java.lang.String,java.util.Map)>(r0, $r1);

        return $r2;
    }

    static void <clinit>()
    {
        char[] $r1;
        java.lang.String $r0;

        $r0 = "abcdefghijklmnopqrstuvwxyz";

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        <org.wiztools.commons.RotN: char[] lookup> = $r1;

        return;
    }
}
