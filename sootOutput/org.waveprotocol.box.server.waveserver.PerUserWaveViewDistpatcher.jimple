public class org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher extends java.lang.Object implements org.waveprotocol.box.server.waveserver.WaveBus$Subscriber, org.waveprotocol.box.server.waveserver.PerUserWaveViewBus
{
    private static final java.util.concurrent.CopyOnWriteArraySet listeners;

    public void <init>()
    {
        org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void waveletUpdate(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.box.common.DeltaSequence)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r11;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r10;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r7;
        org.waveprotocol.wave.model.id.WaveletId $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r12, $r17;
        org.waveprotocol.box.common.DeltaSequence r4;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r0;
        org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.id.WaveletName $r3;
        org.waveprotocol.wave.model.id.WaveId $r2;
        java.util.Iterator $r5, $r8, $r14, $r19;
        java.util.concurrent.CopyOnWriteArraySet $r13, $r18;
        org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener r22, r23;
        java.lang.Object $r6, $r9, $r15, $r20;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r16;

        r21 := @this: org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r4 := @parameter1: org.waveprotocol.box.common.DeltaSequence;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r2, $r1);

        $r5 = virtualinvoke r4.<org.waveprotocol.box.common.DeltaSequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r6;

        $r8 = virtualinvoke r7.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r9;

        $z2 = r10 instanceof org.waveprotocol.wave.model.operation.wave.AddParticipant;

        if $z2 == 0 goto label5;

        $r16 = (org.waveprotocol.wave.model.operation.wave.AddParticipant) r10;

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r18 = <org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher: java.util.concurrent.CopyOnWriteArraySet listeners>;

        $r19 = virtualinvoke $r18.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>();

     label3:
        $z5 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener) $r20;

        interfaceinvoke r22.<org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener: com.google.common.util.concurrent.ListenableFuture onParticipantAdded(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId)>($r3, $r17);

        goto label3;

     label4:
        goto label7;

     label5:
        $z3 = r10 instanceof org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        if $z3 == 0 goto label7;

        $r11 = (org.waveprotocol.wave.model.operation.wave.RemoveParticipant) r10;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r13 = <org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher: java.util.concurrent.CopyOnWriteArraySet listeners>;

        $r14 = virtualinvoke $r13.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>();

     label6:
        $z4 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener) $r15;

        interfaceinvoke r23.<org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener: com.google.common.util.concurrent.ListenableFuture onParticipantRemoved(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId)>($r3, $r12);

        goto label6;

     label7:
        goto label2;

     label8:
        goto label1;

     label9:
        return;
    }

    public void waveletCommitted(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher r0;
        org.waveprotocol.wave.model.version.HashedVersion r2;
        org.waveprotocol.wave.model.id.WaveletName r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        return;
    }

    public void addListener(org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener)
    {
        org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher r2;
        org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener r0;
        java.util.concurrent.CopyOnWriteArraySet $r1;

        r2 := @this: org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener;

        $r1 = <org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher: java.util.concurrent.CopyOnWriteArraySet listeners>;

        virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void removeListener(org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener)
    {
        org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher r2;
        org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener r0;
        java.util.concurrent.CopyOnWriteArraySet $r1;

        r2 := @this: org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener;

        $r1 = <org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher: java.util.concurrent.CopyOnWriteArraySet listeners>;

        virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>(r0);

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.CopyOnWriteArraySet $r0;

        $r0 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r0.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        <org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher: java.util.concurrent.CopyOnWriteArraySet listeners> = $r0;

        return;
    }
}
