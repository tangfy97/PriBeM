public class org.springframework.beans.factory.config.ProviderCreatingFactoryBean extends org.springframework.beans.factory.config.AbstractFactoryBean
{
    private java.lang.String targetBeanName;

    public void <init>()
    {
        org.springframework.beans.factory.config.ProviderCreatingFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.ProviderCreatingFactoryBean;

        specialinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: void <init>()>();

        return;
    }

    public void setTargetBeanName(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.beans.factory.config.ProviderCreatingFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.ProviderCreatingFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.beans.factory.config.ProviderCreatingFactoryBean: java.lang.String targetBeanName> = r1;

        return;
    }

    public void afterPropertiesSet() throws java.lang.Exception
    {
        java.lang.String $r1;
        org.springframework.beans.factory.config.ProviderCreatingFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.ProviderCreatingFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.ProviderCreatingFactoryBean: java.lang.String targetBeanName>;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>($r1, "Property \'targetBeanName\' is required");

        specialinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: void afterPropertiesSet()>();

        return;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.beans.factory.config.ProviderCreatingFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.ProviderCreatingFactoryBean;

        return class "Ljavax/inject/Provider;";
    }

    protected javax.inject.Provider createInstance()
    {
        org.springframework.beans.factory.BeanFactory $r2;
        java.lang.String $r3;
        org.springframework.beans.factory.config.ProviderCreatingFactoryBean$TargetBeanProvider $r0;
        org.springframework.beans.factory.config.ProviderCreatingFactoryBean r1;

        r1 := @this: org.springframework.beans.factory.config.ProviderCreatingFactoryBean;

        $r0 = new org.springframework.beans.factory.config.ProviderCreatingFactoryBean$TargetBeanProvider;

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.config.ProviderCreatingFactoryBean: org.springframework.beans.factory.BeanFactory getBeanFactory()>();

        $r3 = r1.<org.springframework.beans.factory.config.ProviderCreatingFactoryBean: java.lang.String targetBeanName>;

        specialinvoke $r0.<org.springframework.beans.factory.config.ProviderCreatingFactoryBean$TargetBeanProvider: void <init>(org.springframework.beans.factory.BeanFactory,java.lang.String)>($r2, $r3);

        return $r0;
    }

    protected volatile java.lang.Object createInstance() throws java.lang.Exception
    {
        javax.inject.Provider $r1;
        org.springframework.beans.factory.config.ProviderCreatingFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.ProviderCreatingFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.config.ProviderCreatingFactoryBean: javax.inject.Provider createInstance()>();

        return $r1;
    }
}
