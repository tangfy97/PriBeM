class org.apache.batik.ext.awt.image.codec.png.ChunkStream extends java.io.OutputStream implements java.io.DataOutput
{
    private java.lang.String type;
    private java.io.ByteArrayOutputStream baos;
    private java.io.DataOutputStream dos;

    void <init>(java.lang.String) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.ByteArrayOutputStream $r2, $r4;
        java.io.DataOutputStream $r3;
        java.lang.String r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.lang.String type> = r1;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.ByteArrayOutputStream baos> = $r2;

        $r3 = new java.io.DataOutputStream;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.ByteArrayOutputStream baos>;

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos> = $r3;

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        byte[] r1;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.DataOutputStream $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r2.<java.io.FilterOutputStream: void write(byte[])>(r1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.DataOutputStream $r2;
        int i0, i1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r2.<java.io.DataOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        int i0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.DataOutputStream $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r1.<java.io.DataOutputStream: void write(int)>(i0);

        return;
    }

    public void writeBoolean(boolean) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.DataOutputStream $r1;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeBoolean(boolean)>(z0);

        return;
    }

    public void writeByte(int) throws java.io.IOException
    {
        int i0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.DataOutputStream $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>(i0);

        return;
    }

    public void writeBytes(java.lang.String) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.lang.String r1;
        java.io.DataOutputStream $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeBytes(java.lang.String)>(r1);

        return;
    }

    public void writeChar(int) throws java.io.IOException
    {
        int i0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.DataOutputStream $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeChar(int)>(i0);

        return;
    }

    public void writeChars(java.lang.String) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.lang.String r1;
        java.io.DataOutputStream $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeChars(java.lang.String)>(r1);

        return;
    }

    public void writeDouble(double) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.DataOutputStream $r1;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeDouble(double)>(d0);

        return;
    }

    public void writeFloat(float) throws java.io.IOException
    {
        float f0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.DataOutputStream $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeFloat(float)>(f0);

        return;
    }

    public void writeInt(int) throws java.io.IOException
    {
        int i0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.DataOutputStream $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>(i0);

        return;
    }

    public void writeLong(long) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        long l0;
        java.io.DataOutputStream $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeLong(long)>(l0);

        return;
    }

    public void writeShort(int) throws java.io.IOException
    {
        int i0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.DataOutputStream $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>(i0);

        return;
    }

    public void writeUTF(java.lang.String) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.lang.String r1;
        java.io.DataOutputStream $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r1);

        return;
    }

    public void writeToStream(java.io.DataOutputStream) throws java.io.IOException
    {
        byte[] r0, $r9;
        java.io.ByteArrayOutputStream $r7, $r8;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r1;
        byte $b1, $b3, $b5, $b7;
        java.io.DataOutputStream $r6, r10;
        int i8, $i9, $i10, $i11, $i13, $i15;
        java.lang.String $r2, $r3, $r4, $r5;
        char $c0, $c2, $c4, $c6;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        r10 := @parameter0: java.io.DataOutputStream;

        r0 = newarray (byte)[4];

        $r2 = r1.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.lang.String type>;

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $b1 = (byte) $c0;

        r0[0] = $b1;

        $r3 = r1.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.lang.String type>;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(1);

        $b3 = (byte) $c2;

        r0[1] = $b3;

        $r4 = r1.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.lang.String type>;

        $c4 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(2);

        $b5 = (byte) $c4;

        r0[2] = $b5;

        $r5 = r1.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.lang.String type>;

        $c6 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(3);

        $b7 = (byte) $c6;

        r0[3] = $b7;

        $r6 = r1.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r6.<java.io.DataOutputStream: void flush()>();

        $r7 = r1.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.ByteArrayOutputStream baos>;

        virtualinvoke $r7.<java.io.OutputStream: void flush()>();

        $r8 = r1.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.ByteArrayOutputStream baos>;

        $r9 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        i8 = lengthof $r9;

        virtualinvoke r10.<java.io.DataOutputStream: void writeInt(int)>(i8);

        virtualinvoke r10.<java.io.FilterOutputStream: void write(byte[])>(r0);

        virtualinvoke r10.<java.io.DataOutputStream: void write(byte[],int,int)>($r9, 0, i8);

        $i13 = (int) -1;

        $i9 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.CRC: int updateCRC(int,byte[],int,int)>($i13, r0, 0, 4);

        $i10 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.CRC: int updateCRC(int,byte[],int,int)>($i9, $r9, 0, i8);

        $i15 = (int) -1;

        $i11 = $i10 ^ $i15;

        virtualinvoke r10.<java.io.DataOutputStream: void writeInt(int)>($i11);

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.ChunkStream r0;
        java.io.ByteArrayOutputStream $r1, $r4;
        java.io.DataOutputStream $r2, $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.ByteArrayOutputStream baos>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.ByteArrayOutputStream baos>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void close()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.ByteArrayOutputStream baos> = null;

     label1:
        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos>;

        virtualinvoke $r3.<java.io.FilterOutputStream: void close()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: java.io.DataOutputStream dos> = null;

     label2:
        return;
    }
}
