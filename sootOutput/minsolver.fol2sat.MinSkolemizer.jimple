abstract class minsolver.fol2sat.MinSkolemizer extends kodkod.ast.visitor.AbstractReplacer
{
    private minsolver.fol2sat.MinEnvironment repEnv;
    private final minsolver.fol2sat.MinLeafInterpreter interpreter;
    private final kodkod.instance.Bounds bounds;
    private final kodkod.engine.config.Reporter reporter;
    private final java.util.List nonSkolems;
    private final java.util.List nonSkolemsView;
    private final java.util.List topSkolemConstraints;
    private boolean negated;
    private int skolemDepth;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator;

    static kodkod.util.nodes.AnnotatedNode skolemize(kodkod.util.nodes.AnnotatedNode, kodkod.instance.Bounds, kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r0;
        kodkod.instance.Bounds r3;
        int $i0;
        kodkod.util.nodes.AnnotatedNode r2, $r15, $r17;
        java.util.IdentityHashMap $r8;
        kodkod.ast.Formula $r5, $r11, r13, r16;
        minsolver.fol2sat.MinSkolemizer$2 $r1;
        minsolver.fol2sat.MinSkolemizer$1 $r9;
        kodkod.ast.Node $r4, $r7, $r10, $r14;
        java.lang.Object $r6, $r12;

        r2 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r3 := @parameter1: kodkod.instance.Bounds;

        r0 := @parameter2: kodkod.engine.config.Options;

        $i0 = virtualinvoke r0.<kodkod.engine.config.Options: int logTranslation()>();

        if $i0 <= 0 goto label3;

        $r8 = new java.util.IdentityHashMap;

        specialinvoke $r8.<java.util.IdentityHashMap: void <init>()>();

        $r9 = new minsolver.fol2sat.MinSkolemizer$1;

        specialinvoke $r9.<minsolver.fol2sat.MinSkolemizer$1: void <init>(kodkod.util.nodes.AnnotatedNode,kodkod.instance.Bounds,kodkod.engine.config.Options,kodkod.util.nodes.AnnotatedNode,java.util.Map)>(r2, r3, r0, r2, $r8);

        $r10 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r11 = (kodkod.ast.Formula) $r10;

        $r12 = virtualinvoke $r11.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r9);

        r13 = (kodkod.ast.Formula) $r12;

        $r14 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        if r13 != $r14 goto label1;

        $r15 = r2;

        goto label2;

     label1:
        $r15 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node,java.util.Map)>(r13, $r8);

     label2:
        return $r15;

     label3:
        $r1 = new minsolver.fol2sat.MinSkolemizer$2;

        specialinvoke $r1.<minsolver.fol2sat.MinSkolemizer$2: void <init>(kodkod.util.nodes.AnnotatedNode,kodkod.instance.Bounds,kodkod.engine.config.Options)>(r2, r3, r0);

        $r4 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r5 = (kodkod.ast.Formula) $r4;

        $r6 = virtualinvoke $r5.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r1);

        r16 = (kodkod.ast.Formula) $r6;

        $r7 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        if r16 != $r7 goto label4;

        $r17 = r2;

        goto label5;

     label4:
        $r17 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node)>(r16);

     label5:
        return $r17;
    }

    private void <init>(kodkod.util.nodes.AnnotatedNode, kodkod.instance.Bounds, kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r14;
        minsolver.fol2sat.MinLeafInterpreter $r17;
        java.util.ArrayList $r19, $r21;
        kodkod.instance.Bounds r16;
        minsolver.fol2sat.MinSkolemizer r0;
        java.util.Map $r11;
        int $i0;
        java.lang.Boolean $r10, $r13;
        kodkod.util.nodes.AnnotatedNode r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r6;
        kodkod.engine.config.Reporter $r15;
        java.util.Set $r2, $r5;
        minsolver.fol2sat.MinEnvironment $r18;
        minsolver.fol2sat.MinSkolemizer$3 $r20;
        kodkod.ast.visitor.AbstractDetector $r3, $r4;
        kodkod.ast.Node r8;
        java.lang.Object $r7, $r9, $r12;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r16 := @parameter1: kodkod.instance.Bounds;

        r14 := @parameter2: kodkod.engine.config.Options;

        $r2 = virtualinvoke r1.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes()>();

        specialinvoke r0.<kodkod.ast.visitor.AbstractReplacer: void <init>(java.util.Set)>($r2);

        $r3 = virtualinvoke r1.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.visitor.AbstractDetector freeVariableDetector()>();

        $r4 = virtualinvoke r1.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.visitor.AbstractDetector quantifiedFormulaDetector()>();

        $r5 = virtualinvoke r1.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kodkod.ast.Node) $r7;

        $r9 = virtualinvoke r8.<kodkod.ast.Node: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r3);

        $r10 = (java.lang.Boolean) $r9;

        $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label3;

        $z1 = r8 instanceof kodkod.ast.Formula;

        if $z1 == 0 goto label2;

        $r12 = virtualinvoke r8.<kodkod.ast.Node: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r4);

        $r13 = (java.lang.Boolean) $r12;

        $z2 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 != 0 goto label3;

     label2:
        $r11 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.Map cache>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, null);

     label3:
        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

        $r15 = virtualinvoke r14.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        r0.<minsolver.fol2sat.MinSkolemizer: kodkod.engine.config.Reporter reporter> = $r15;

        r0.<minsolver.fol2sat.MinSkolemizer: kodkod.instance.Bounds bounds> = r16;

        $r17 = staticinvoke <minsolver.fol2sat.MinLeafInterpreter: minsolver.fol2sat.MinLeafInterpreter overapproximating(kodkod.instance.Bounds,kodkod.engine.config.Options)>(r16, r14);

        r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinLeafInterpreter interpreter> = $r17;

        $r18 = staticinvoke <minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment empty()>();

        r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv> = $r18;

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems> = $r19;

        $r20 = new minsolver.fol2sat.MinSkolemizer$3;

        specialinvoke $r20.<minsolver.fol2sat.MinSkolemizer$3: void <init>(minsolver.fol2sat.MinSkolemizer)>(r0);

        r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolemsView> = $r20;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r0.<minsolver.fol2sat.MinSkolemizer: java.util.List topSkolemConstraints> = $r21;

        r0.<minsolver.fol2sat.MinSkolemizer: boolean negated> = 0;

        $i0 = virtualinvoke r14.<kodkod.engine.config.Options: int skolemDepth()>();

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = $i0;

        return;
    }

    protected final kodkod.ast.Node cache(kodkod.ast.Node, kodkod.ast.Node)
    {
        minsolver.fol2sat.MinSkolemizer r0;
        java.util.Map $r2, $r4;
        kodkod.ast.Node r1, r3;
        boolean $z0;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.Node;

        r3 := @parameter1: kodkod.ast.Node;

        $r2 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.Map cache>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.Map cache>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label1:
        return r3;
    }

    protected kodkod.ast.Formula source(kodkod.ast.Formula, kodkod.ast.Node)
    {
        minsolver.fol2sat.MinSkolemizer r1;
        kodkod.ast.Node r2;
        kodkod.ast.Formula r0;

        r1 := @this: minsolver.fol2sat.MinSkolemizer;

        r0 := @parameter0: kodkod.ast.Formula;

        r2 := @parameter1: kodkod.ast.Node;

        return r0;
    }

    public final kodkod.ast.Decl visit(kodkod.ast.Decl)
    {
        kodkod.ast.operator.Multiplicity $r8;
        kodkod.ast.Decl r1, $r10, r11, $r12;
        kodkod.ast.Expression $r3, r5, $r6;
        kodkod.ast.Node $r2, $r9;
        kodkod.ast.Variable $r7;
        minsolver.fol2sat.MinSkolemizer r0;
        int i0, $i2;
        java.lang.Object $r4;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r11 = (kodkod.ast.Decl) $r2;

        if r11 == null goto label1;

        return r11;

     label1:
        i0 = r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth>;

        $i2 = (int) -1;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = $i2;

        $r3 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Expression) $r4;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = i0;

        $r6 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        if r5 != $r6 goto label2;

        $r12 = r1;

        goto label3;

     label2:
        $r7 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r8 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.operator.Multiplicity multiplicity()>();

        $r12 = virtualinvoke $r7.<kodkod.ast.Variable: kodkod.ast.Decl declare(kodkod.ast.operator.Multiplicity,kodkod.ast.Expression)>($r8, r5);

     label3:
        $r9 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r12);

        $r10 = (kodkod.ast.Decl) $r9;

        return $r10;
    }

    public final kodkod.ast.Decls visit(kodkod.ast.Decls)
    {
        minsolver.fol2sat.MinSkolemizer r0;
        boolean $z0, z1, $z2;
        java.util.Iterator $r3, $r9;
        kodkod.ast.Decl r11, $r12, r23;
        kodkod.ast.Decls r1, $r18, r19, r20, $r21, $r22;
        minsolver.fol2sat.MinEnvironment $r5, $r8, $r13, $r16;
        kodkod.ast.Node $r2, $r17;
        kodkod.ast.Variable $r6, $r7, $r14, $r15;
        java.lang.Object $r4, $r10;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.Decls;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r19 = (kodkod.ast.Decls) $r2;

        if r19 != null goto label08;

        r20 = null;

        z1 = 1;

        $r9 = virtualinvoke r1.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label05;

     label01:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (kodkod.ast.Decl) $r10;

        $r12 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Decl visit(kodkod.ast.Decl)>(r11);

        if $r12 == r11 goto label02;

        z1 = 0;

     label02:
        if r20 != null goto label03;

        $r21 = $r12;

        goto label04;

     label03:
        $r21 = virtualinvoke r20.<kodkod.ast.Decls: kodkod.ast.Decls and(kodkod.ast.Decls)>($r12);

     label04:
        r20 = $r21;

        $r13 = r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv>;

        $r14 = virtualinvoke r11.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r15 = virtualinvoke r11.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r16 = virtualinvoke $r13.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment extend(kodkod.ast.Variable,java.lang.Object)>($r14, $r15);

        r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv> = $r16;

     label05:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label01;

        if z1 == 0 goto label06;

        $r22 = r1;

        goto label07;

     label06:
        $r22 = r20;

     label07:
        $r17 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r22);

        $r18 = (kodkod.ast.Decls) $r17;

        return $r18;

     label08:
        $r3 = virtualinvoke r1.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label10;

     label09:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r23 = (kodkod.ast.Decl) $r4;

        $r5 = r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv>;

        $r6 = virtualinvoke r23.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r7 = virtualinvoke r23.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r8 = virtualinvoke $r5.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment extend(kodkod.ast.Variable,java.lang.Object)>($r6, $r7);

        r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv> = $r8;

     label10:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label09;

        return r19;
    }

    public final kodkod.ast.Expression visit(kodkod.ast.Variable)
    {
        minsolver.fol2sat.MinSkolemizer r0;
        kodkod.ast.Expression r4;
        java.lang.Object $r3;
        minsolver.fol2sat.MinEnvironment $r2;
        minsolver.fol2sat.MinUnboundLeafException $r5;
        kodkod.ast.Variable r1;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv>;

        $r3 = virtualinvoke $r2.<minsolver.fol2sat.MinEnvironment: java.lang.Object lookup(kodkod.ast.Variable)>(r1);

        r4 = (kodkod.ast.Expression) $r3;

        if r4 != null goto label1;

        $r5 = new minsolver.fol2sat.MinUnboundLeafException;

        specialinvoke $r5.<minsolver.fol2sat.MinUnboundLeafException: void <init>(java.lang.String,kodkod.ast.LeafExpression)>("Unbound variable", r1);

        throw $r5;

     label1:
        return r4;
    }

    public final kodkod.ast.Expression visit(kodkod.ast.Comprehension)
    {
        kodkod.ast.Formula $r6, r8, $r10;
        kodkod.ast.Expression r11, $r12, $r14;
        kodkod.ast.Decls $r4, $r5, $r9;
        minsolver.fol2sat.MinEnvironment r3;
        kodkod.ast.Node $r2, $r13;
        minsolver.fol2sat.MinSkolemizer r0;
        java.lang.Object $r7;
        kodkod.ast.Comprehension r1;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r11 = (kodkod.ast.Expression) $r2;

        if r11 == null goto label1;

        return r11;

     label1:
        r3 = r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv>;

        $r4 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        $r5 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Decls visit(kodkod.ast.Decls)>($r4);

        $r6 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.Formula) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        if $r5 != $r9 goto label2;

        $r10 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        if r8 != $r10 goto label2;

        $r12 = r1;

        goto label3;

     label2:
        $r12 = virtualinvoke r8.<kodkod.ast.Formula: kodkod.ast.Expression comprehension(kodkod.ast.Decls)>($r5);

     label3:
        r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv> = r3;

        $r13 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r12);

        $r14 = (kodkod.ast.Expression) $r13;

        return $r14;
    }

    public final kodkod.ast.IntExpression visit(kodkod.ast.SumExpression)
    {
        kodkod.ast.IntExpression $r6, r8, $r10, r11, $r12, $r14;
        kodkod.ast.Decls $r4, $r5, $r9;
        minsolver.fol2sat.MinEnvironment r3;
        kodkod.ast.SumExpression r1;
        kodkod.ast.Node $r2, $r13;
        minsolver.fol2sat.MinSkolemizer r0;
        java.lang.Object $r7;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r11 = (kodkod.ast.IntExpression) $r2;

        if r11 == null goto label1;

        return r11;

     label1:
        r3 = r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv>;

        $r4 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        $r5 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Decls visit(kodkod.ast.Decls)>($r4);

        $r6 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.IntExpression) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        if $r5 != $r9 goto label2;

        $r10 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        if r8 != $r10 goto label2;

        $r12 = r1;

        goto label3;

     label2:
        $r12 = virtualinvoke r8.<kodkod.ast.IntExpression: kodkod.ast.IntExpression sum(kodkod.ast.Decls)>($r5);

     label3:
        r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv> = r3;

        $r13 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r12);

        $r14 = (kodkod.ast.IntExpression) $r13;

        return $r14;
    }

    private final kodkod.engine.bool.BooleanMatrix upperBound(kodkod.ast.Expression, minsolver.fol2sat.MinEnvironment)
    {
        kodkod.engine.bool.BooleanMatrix $r5;
        minsolver.fol2sat.MinSkolemizer r2;
        kodkod.ast.Expression r0;
        kodkod.util.nodes.AnnotatedNode $r1;
        minsolver.fol2sat.MinEnvironment r3;
        minsolver.fol2sat.MinLeafInterpreter $r4;

        r2 := @this: minsolver.fol2sat.MinSkolemizer;

        r0 := @parameter0: kodkod.ast.Expression;

        r3 := @parameter1: minsolver.fol2sat.MinEnvironment;

        $r1 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node)>(r0);

        $r4 = r2.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r5 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix approximate(kodkod.util.nodes.AnnotatedNode,minsolver.fol2sat.MinLeafInterpreter,minsolver.fol2sat.MinEnvironment)>($r1, $r4, r3);

        return $r5;
    }

    private kodkod.ast.Expression skolemExpr(kodkod.ast.Decl, kodkod.ast.Relation)
    {
        kodkod.instance.Bounds $r22, $r27;
        boolean $z0;
        kodkod.ast.Decl r2, $r9, $r12, $r14;
        kodkod.ast.Expression $r15, $r17, r28;
        minsolver.fol2sat.MinEnvironment r29;
        kodkod.ast.Variable $r3, $r10, $r13;
        java.util.List $r1, $r5, $r18;
        kodkod.ast.Relation r4;
        minsolver.fol2sat.MinSkolemizer r0;
        int $i0, $i1, i2, i3, $i5;
        kodkod.instance.Universe $r23;
        kodkod.instance.TupleFactory $r24;
        kodkod.instance.TupleSet $r26;
        java.util.Iterator $r6;
        kodkod.util.ints.IntSet $r25;
        kodkod.engine.bool.BooleanMatrix $r8, $r11, $r16, $r21, r31;
        minsolver.fol2sat.MinSkolemizer$DeclInfo $r20, r30;
        java.lang.Object $r7, $r19;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r2 := @parameter0: kodkod.ast.Decl;

        r4 := @parameter1: kodkod.ast.Relation;

        $r1 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = virtualinvoke r2.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $i1 = virtualinvoke $r3.<kodkod.ast.Variable: int arity()>();

        i2 = $i0 + $i1;

        r28 = r4;

        r29 = staticinvoke <minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment empty()>();

        $r5 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r30 = (minsolver.fol2sat.MinSkolemizer$DeclInfo) $r7;

        $r8 = r30.<minsolver.fol2sat.MinSkolemizer$DeclInfo: kodkod.engine.bool.BooleanMatrix upperBound>;

        if $r8 != null goto label2;

        $r14 = r30.<minsolver.fol2sat.MinSkolemizer$DeclInfo: kodkod.ast.Decl decl>;

        $r15 = virtualinvoke $r14.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r16 = specialinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.engine.bool.BooleanMatrix upperBound(kodkod.ast.Expression,minsolver.fol2sat.MinEnvironment)>($r15, r29);

        r30.<minsolver.fol2sat.MinSkolemizer$DeclInfo: kodkod.engine.bool.BooleanMatrix upperBound> = $r16;

     label2:
        $r9 = r30.<minsolver.fol2sat.MinSkolemizer$DeclInfo: kodkod.ast.Decl decl>;

        $r10 = virtualinvoke $r9.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r11 = r30.<minsolver.fol2sat.MinSkolemizer$DeclInfo: kodkod.engine.bool.BooleanMatrix upperBound>;

        r29 = virtualinvoke r29.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment extend(kodkod.ast.Variable,java.lang.Object)>($r10, $r11);

        $r12 = r30.<minsolver.fol2sat.MinSkolemizer$DeclInfo: kodkod.ast.Decl decl>;

        $r13 = virtualinvoke $r12.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        r28 = virtualinvoke $r13.<kodkod.ast.Variable: kodkod.ast.Expression join(kodkod.ast.Expression)>(r28);

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r17 = virtualinvoke r2.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        r31 = specialinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.engine.bool.BooleanMatrix upperBound(kodkod.ast.Expression,minsolver.fol2sat.MinEnvironment)>($r17, r29);

        i3 = $i0 - 1;

        goto label5;

     label4:
        $r18 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i3);

        $r20 = (minsolver.fol2sat.MinSkolemizer$DeclInfo) $r19;

        $r21 = $r20.<minsolver.fol2sat.MinSkolemizer$DeclInfo: kodkod.engine.bool.BooleanMatrix upperBound>;

        r31 = virtualinvoke $r21.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix cross(kodkod.engine.bool.BooleanMatrix)>(r31);

        $i5 = (int) -1;

        i3 = i3 + $i5;

     label5:
        if i3 >= 0 goto label4;

        $r22 = r0.<minsolver.fol2sat.MinSkolemizer: kodkod.instance.Bounds bounds>;

        $r23 = virtualinvoke $r22.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r24 = virtualinvoke $r23.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r25 = virtualinvoke r31.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.IntSet denseIndices()>();

        $r26 = virtualinvoke $r24.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(int,kodkod.util.ints.IntSet)>(i2, $r25);

        $r27 = r0.<minsolver.fol2sat.MinSkolemizer: kodkod.instance.Bounds bounds>;

        virtualinvoke $r27.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet)>(r4, $r26);

        return r28;
    }

    private kodkod.ast.Formula domainConstraint(kodkod.ast.Decl, kodkod.ast.Relation)
    {
        minsolver.fol2sat.MinSkolemizer r0;
        int $i0, i1;
        boolean $z0;
        java.util.Iterator $r2;
        kodkod.ast.Formula $r12, $r14;
        kodkod.ast.Decl $r7, r9;
        kodkod.ast.Expression $r11, $r13, r16;
        kodkod.ast.Decls r15;
        kodkod.ast.Variable $r10;
        java.util.List $r1;
        minsolver.fol2sat.MinSkolemizer$DeclInfo $r4, $r6;
        java.lang.Object $r3, $r5;
        kodkod.ast.Relation r8;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r9 := @parameter0: kodkod.ast.Decl;

        r8 := @parameter1: kodkod.ast.Relation;

        $r1 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (minsolver.fol2sat.MinSkolemizer$DeclInfo) $r3;

        r15 = $r4.<minsolver.fol2sat.MinSkolemizer$DeclInfo: kodkod.ast.Decl decl>;

        goto label2;

     label1:
        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (minsolver.fol2sat.MinSkolemizer$DeclInfo) $r5;

        $r7 = $r6.<minsolver.fol2sat.MinSkolemizer$DeclInfo: kodkod.ast.Decl decl>;

        r15 = virtualinvoke r15.<kodkod.ast.Decls: kodkod.ast.Decls and(kodkod.ast.Decls)>($r7);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        r16 = r8;

        i1 = 0;

        $r10 = virtualinvoke r9.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $i0 = virtualinvoke $r10.<kodkod.ast.Variable: int arity()>();

        goto label4;

     label3:
        $r11 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        r16 = virtualinvoke r16.<kodkod.ast.Expression: kodkod.ast.Expression join(kodkod.ast.Expression)>($r11);

        i1 = i1 + 1;

     label4:
        if i1 < $i0 goto label3;

        $r12 = <kodkod.ast.Formula: kodkod.ast.Formula TRUE>;

        $r13 = virtualinvoke $r12.<kodkod.ast.Formula: kodkod.ast.Expression comprehension(kodkod.ast.Decls)>(r15);

        $r14 = virtualinvoke r16.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r13);

        return $r14;
    }

    public final kodkod.ast.Formula visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.operator.FormulaOperator $r63, $r74;
        kodkod.ast.Decl $r27, r62, r68;
        java.lang.StringBuilder $r31, $r80;
        java.lang.String $r30, $r32;
        kodkod.ast.Formula $r6, $r10, $r11, $r12, $r17, $r21, $r41, $r42, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r56, $r58, $r59, r61, r64, r69, $r70, r71, $r72, $r76, $r77;
        minsolver.fol2sat.MinSkolemizer$DeclInfo $r81;
        kodkod.ast.operator.Quantifier $r4, $r22, $r60;
        kodkod.ast.operator.Multiplicity $r39, $r43;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        kodkod.engine.config.Reporter $r37;
        kodkod.ast.Expression $r38, $r40;
        minsolver.fol2sat.MinEnvironment r3, $r45, $r47, $r73;
        kodkod.ast.Variable $r29, $r34, $r46;
        java.util.List $r8, $r9, $r16, $r19, $r20, $r33, $r36, $r44, $r57, $r67;
        kodkod.ast.Relation $r35;
        kodkod.ast.QuantifiedFormula r1;
        minsolver.fol2sat.MinSkolemizer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i13, $i15;
        java.util.LinkedList $r78, $r79;
        java.util.Iterator $r13, $r25;
        kodkod.ast.Decls $r5, $r65, $r66;
        kodkod.ast.Node $r2, $r75;
        java.lang.Object $r7, $r14, $r18, $r26, $r55;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r61 = (kodkod.ast.Formula) $r2;

        if r61 == null goto label01;

        return r61;

     label01:
        r3 = r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv>;

        $r4 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.operator.Quantifier quantifier()>();

        $r5 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $i0 = r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth>;

        if $i0 < 0 goto label10;

        $z3 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z3 == 0 goto label02;

        $r60 = <kodkod.ast.operator.Quantifier: kodkod.ast.operator.Quantifier ALL>;

        if $r4 == $r60 goto label03;

     label02:
        $z4 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z4 != 0 goto label10;

        $r22 = <kodkod.ast.operator.Quantifier: kodkod.ast.operator.Quantifier SOME>;

        if $r4 != $r22 goto label10;

     label03:
        $r78 = new java.util.LinkedList;

        specialinvoke $r78.<java.util.LinkedList: void <init>()>();

        $r79 = new java.util.LinkedList;

        specialinvoke $r79.<java.util.LinkedList: void <init>()>();

        $r25 = virtualinvoke $r5.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label07;

     label04:
        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r62 = (kodkod.ast.Decl) $r26;

        $r27 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Decl visit(kodkod.ast.Decl)>(r62);

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>(java.lang.String)>("$");

        $r29 = virtualinvoke $r27.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r30 = virtualinvoke $r29.<kodkod.ast.Variable: java.lang.String name()>();

        $r31 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        $i3 = interfaceinvoke $r33.<java.util.List: int size()>();

        $r34 = virtualinvoke $r27.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $i4 = virtualinvoke $r34.<kodkod.ast.Variable: int arity()>();

        $i5 = $i3 + $i4;

        $r35 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation nary(java.lang.String,int)>($r32, $i5);

        $r37 = r0.<minsolver.fol2sat.MinSkolemizer: kodkod.engine.config.Reporter reporter>;

        $r36 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolemsView>;

        interfaceinvoke $r37.<kodkod.engine.config.Reporter: void skolemizing(kodkod.ast.Decl,kodkod.ast.Relation,java.util.List)>(r62, $r35, $r36);

        $r38 = specialinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Expression skolemExpr(kodkod.ast.Decl,kodkod.ast.Relation)>($r27, $r35);

        $r39 = virtualinvoke r62.<kodkod.ast.Decl: kodkod.ast.operator.Multiplicity multiplicity()>();

        $r40 = virtualinvoke $r27.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r41 = virtualinvoke $r38.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r40);

        $r42 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r41, r62);

        interfaceinvoke $r78.<java.util.List: boolean add(java.lang.Object)>($r42);

        $r43 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SET>;

        if $r39 == $r43 goto label05;

        $r50 = virtualinvoke $r38.<kodkod.ast.Expression: kodkod.ast.Formula apply(kodkod.ast.operator.Multiplicity)>($r39);

        $r51 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r50, r62);

        interfaceinvoke $r78.<java.util.List: boolean add(java.lang.Object)>($r51);

     label05:
        $r44 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        $z5 = interfaceinvoke $r44.<java.util.List: boolean isEmpty()>();

        if $z5 != 0 goto label06;

        $r48 = specialinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula domainConstraint(kodkod.ast.Decl,kodkod.ast.Relation)>($r27, $r35);

        $r49 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r48, r62);

        interfaceinvoke $r79.<java.util.List: boolean add(java.lang.Object)>($r49);

     label06:
        $r45 = r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv>;

        $r46 = virtualinvoke r62.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r47 = virtualinvoke $r45.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment extend(kodkod.ast.Variable,java.lang.Object)>($r46, $r38);

        r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv> = $r47;

     label07:
        $z8 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z8 != 0 goto label04;

        $r52 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(java.util.Collection)>($r78);

        $r53 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r52, $r5);

        $z6 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z6 == 0 goto label08;

        $r63 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        goto label09;

     label08:
        $r63 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

     label09:
        $r54 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r55 = virtualinvoke $r54.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r56 = (kodkod.ast.Formula) $r55;

        r64 = virtualinvoke $r53.<kodkod.ast.Formula: kodkod.ast.Formula compose(kodkod.ast.operator.FormulaOperator,kodkod.ast.Formula)>($r63, $r56);

        $z7 = interfaceinvoke $r79.<java.util.List: boolean isEmpty()>();

        if $z7 != 0 goto label20;

        $r57 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List topSkolemConstraints>;

        $r58 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(java.util.Collection)>($r79);

        $r59 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r58, $r5);

        interfaceinvoke $r57.<java.util.List: boolean add(java.lang.Object)>($r59);

        goto label20;

     label10:
        $r65 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r66 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Decls visit(kodkod.ast.Decls)>($r65);

        $i6 = r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth>;

        $r67 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        $i7 = interfaceinvoke $r67.<java.util.List: int size()>();

        $i8 = virtualinvoke $r66.<kodkod.ast.Decls: int size()>();

        $i9 = $i7 + $i8;

        if $i6 < $i9 goto label17;

        $r13 = virtualinvoke $r66.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label12;

     label11:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r68 = (kodkod.ast.Decl) $r14;

        $r16 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        $r81 = new minsolver.fol2sat.MinSkolemizer$DeclInfo;

        specialinvoke $r81.<minsolver.fol2sat.MinSkolemizer$DeclInfo: void <init>(kodkod.ast.Decl)>(r68);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r81);

     label12:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label11;

        $r17 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r18 = virtualinvoke $r17.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r69 = (kodkod.ast.Formula) $r18;

        if $r66 != $r5 goto label13;

        $r21 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        if r69 != $r21 goto label13;

        $r70 = r1;

        goto label14;

     label13:
        $r70 = virtualinvoke r69.<kodkod.ast.Formula: kodkod.ast.Formula quantify(kodkod.ast.operator.Quantifier,kodkod.ast.Decls)>($r4, $r66);

     label14:
        r64 = $r70;

        i10 = virtualinvoke $r66.<kodkod.ast.Decls: int size()>();

        goto label16;

     label15:
        $r20 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        $r19 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        $i1 = interfaceinvoke $r19.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        interfaceinvoke $r20.<java.util.List: java.lang.Object remove(int)>($i2);

        $i13 = (int) -1;

        i10 = i10 + $i13;

     label16:
        if i10 > 0 goto label15;

        goto label20;

     label17:
        i11 = r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth>;

        $i15 = (int) -1;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = $i15;

        $r6 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r71 = (kodkod.ast.Formula) $r7;

        if $r66 != $r5 goto label18;

        $r12 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        if r71 != $r12 goto label18;

        $r72 = r1;

        goto label19;

     label18:
        $r72 = virtualinvoke r71.<kodkod.ast.Formula: kodkod.ast.Formula quantify(kodkod.ast.operator.Quantifier,kodkod.ast.Decls)>($r4, $r66);

     label19:
        r64 = $r72;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = i11;

     label20:
        r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv> = r3;

        $r73 = r0.<minsolver.fol2sat.MinSkolemizer: minsolver.fol2sat.MinEnvironment repEnv>;

        $z9 = virtualinvoke $r73.<minsolver.fol2sat.MinEnvironment: boolean isEmpty()>();

        if $z9 == 0 goto label23;

        $r8 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List topSkolemConstraints>;

        $z0 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label23;

        $r9 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List topSkolemConstraints>;

        $r10 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(java.util.Collection)>($r9);

        $r11 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r10, r1);

        $z1 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z1 == 0 goto label21;

        $r74 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        goto label22;

     label21:
        $r74 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

     label22:
        r64 = virtualinvoke $r11.<kodkod.ast.Formula: kodkod.ast.Formula compose(kodkod.ast.operator.FormulaOperator,kodkod.ast.Formula)>($r74, r64);

     label23:
        $r75 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, r64);

        $r76 = (kodkod.ast.Formula) $r75;

        $r77 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r76, r1);

        return $r77;
    }

    public final kodkod.ast.Formula visit(kodkod.ast.NotFormula)
    {
        minsolver.fol2sat.MinSkolemizer r0;
        kodkod.ast.NotFormula r1;
        boolean $z0, $z1, $z2, $z3;
        kodkod.ast.Formula r3, $r4, $r6, $r7, $r9, $r11, $r12;
        kodkod.ast.Node $r2, $r8, $r10;
        java.lang.Object $r5;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.ast.Formula) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $z0 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z0 == 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        r0.<minsolver.fol2sat.MinSkolemizer: boolean negated> = $z2;

        $r4 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r11 = (kodkod.ast.Formula) $r5;

        $z1 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z1 == 0 goto label4;

        $z3 = 0;

        goto label5;

     label4:
        $z3 = 1;

     label5:
        r0.<minsolver.fol2sat.MinSkolemizer: boolean negated> = $z3;

        $r6 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        if $r11 != $r6 goto label6;

        $r10 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, r1);

        $r12 = (kodkod.ast.Formula) $r10;

        goto label7;

     label6:
        $r7 = virtualinvoke $r11.<kodkod.ast.Formula: kodkod.ast.Formula not()>();

        $r8 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r7);

        $r9 = (kodkod.ast.Formula) $r8;

        $r12 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r9, r1);

     label7:
        return $r12;
    }

    public final kodkod.ast.Formula visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.operator.FormulaOperator $r3, $r4, $r10, $r15, $r16, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        kodkod.ast.BinaryFormula r1;
        minsolver.fol2sat.MinSkolemizer r0;
        int i0, $i2;
        kodkod.ast.Formula $r5, $r7, $r9, $r11, $r13, r18, r19, r20, $r21, $r22, $r24, $r25;
        kodkod.ast.Node $r2, $r23;
        java.lang.Object $r6, $r8, $r12, $r14;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r18 = (kodkod.ast.Formula) $r2;

        if r18 == null goto label01;

        return r18;

     label01:
        $r3 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        i0 = r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth>;

        $r4 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IFF>;

        if $r3 == $r4 goto label03;

        $z2 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z2 == 0 goto label02;

        $r17 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r3 == $r17 goto label03;

     label02:
        $z3 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z3 != 0 goto label04;

        $r15 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR>;

        if $r3 == $r15 goto label03;

        $r16 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        if $r3 != $r16 goto label04;

     label03:
        $i2 = (int) -1;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = $i2;

     label04:
        $z4 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z4 == 0 goto label09;

        $r10 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        if $r3 != $r10 goto label09;

        $z0 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z0 == 0 goto label05;

        $z5 = 0;

        goto label06;

     label05:
        $z5 = 1;

     label06:
        r0.<minsolver.fol2sat.MinSkolemizer: boolean negated> = $z5;

        $r11 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $r12 = virtualinvoke $r11.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r19 = (kodkod.ast.Formula) $r12;

        $z1 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z1 == 0 goto label07;

        $z6 = 0;

        goto label08;

     label07:
        $z6 = 1;

     label08:
        r0.<minsolver.fol2sat.MinSkolemizer: boolean negated> = $z6;

        $r13 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $r14 = virtualinvoke $r13.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r20 = (kodkod.ast.Formula) $r14;

        goto label10;

     label09:
        $r5 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $r6 = virtualinvoke $r5.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r19 = (kodkod.ast.Formula) $r6;

        $r7 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r20 = (kodkod.ast.Formula) $r8;

     label10:
        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = i0;

        $r21 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        if r19 != $r21 goto label11;

        $r9 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        if r20 != $r9 goto label11;

        $r22 = r1;

        goto label12;

     label11:
        $r22 = virtualinvoke r19.<kodkod.ast.Formula: kodkod.ast.Formula compose(kodkod.ast.operator.FormulaOperator,kodkod.ast.Formula)>($r3, r20);

     label12:
        $r23 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r22);

        $r24 = (kodkod.ast.Formula) $r23;

        $r25 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r24, r1);

        return $r25;
    }

    public final kodkod.ast.Formula visit(kodkod.ast.NaryFormula)
    {
        kodkod.ast.Formula[] $r17;
        minsolver.fol2sat.MinSkolemizer r0;
        int[] $r4;
        kodkod.ast.operator.FormulaOperator $r3;
        int i0, $i1, $i2, $i3, i4, $i5, $i7, $i9;
        kodkod.ast.NaryFormula r1;
        java.lang.String $r15;
        boolean $z0, $z1, z2, $z3;
        kodkod.ast.Formula $r5, $r7, $r8, $r10, $r11, r16, $r18;
        java.lang.IllegalArgumentException $r20;
        kodkod.ast.Node $r2, $r9;
        java.lang.Object $r6;
        java.lang.StringBuilder $r14, $r19;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r16 = (kodkod.ast.Formula) $r2;

        if r16 == null goto label01;

        return r16;

     label01:
        i0 = r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth>;

        $r3 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r4 = staticinvoke <minsolver.fol2sat.MinSkolemizer: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator()>();

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        $i2 = $r4[$i1];

        tableswitch($i2)
        {
            case 1: goto label02;
            case 2: goto label03;
            default: goto label04;
        };

     label02:
        $z1 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z1 == 0 goto label05;

        $i7 = (int) -1;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = $i7;

        goto label05;

     label03:
        $z0 = r0.<minsolver.fol2sat.MinSkolemizer: boolean negated>;

        if $z0 != 0 goto label05;

        $i9 = (int) -1;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = $i9;

        goto label05;

     label04:
        $r20 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown nary operator: ");

        $r14 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r20;

     label05:
        $i3 = virtualinvoke r1.<kodkod.ast.NaryFormula: int size()>();

        $r17 = newarray (kodkod.ast.Formula)[$i3];

        z2 = 1;

        i4 = 0;

        goto label09;

     label06:
        $r5 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.Formula child(int)>(i4);

        $r6 = virtualinvoke $r5.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (kodkod.ast.Formula) $r6;

        $r17[i4] = $r7;

        if z2 == 0 goto label07;

        $r8 = $r17[i4];

        if $r5 != $r8 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        z2 = $z3;

        i4 = i4 + 1;

     label09:
        $i5 = lengthof $r17;

        if i4 < $i5 goto label06;

        if z2 == 0 goto label10;

        $r18 = r1;

        goto label11;

     label10:
        $r18 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula compose(kodkod.ast.operator.FormulaOperator,kodkod.ast.Formula[])>($r3, $r17);

     label11:
        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = i0;

        $r9 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r18);

        $r10 = (kodkod.ast.Formula) $r9;

        $r11 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r10, r1);

        return $r11;
    }

    public final kodkod.ast.Formula visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.IntComparisonFormula r1;
        minsolver.fol2sat.MinSkolemizer r0;
        kodkod.ast.Formula $r2, $r3;
        int i0, $i2;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        i0 = r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth>;

        $i2 = (int) -1;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = $i2;

        $r2 = specialinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.IntComparisonFormula)>(r1);

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = i0;

        $r3 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Formula visit(kodkod.ast.ComparisonFormula)
    {
        minsolver.fol2sat.MinSkolemizer r0;
        kodkod.ast.Formula $r2, $r3;
        int i0, $i2;
        kodkod.ast.ComparisonFormula r1;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        i0 = r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth>;

        $i2 = (int) -1;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = $i2;

        $r2 = specialinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.ComparisonFormula)>(r1);

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = i0;

        $r3 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Formula visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        minsolver.fol2sat.MinSkolemizer r0;
        kodkod.ast.Formula $r2, $r3;
        int i0, $i2;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        i0 = r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth>;

        $i2 = (int) -1;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = $i2;

        $r2 = specialinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.MultiplicityFormula)>(r1);

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = i0;

        $r3 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r2, r1);

        return $r3;
    }

    public final kodkod.ast.Formula visit(kodkod.ast.RelationPredicate)
    {
        minsolver.fol2sat.MinSkolemizer r0;
        kodkod.ast.Formula $r2, $r3;
        int i0, $i2;
        kodkod.ast.RelationPredicate r1;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        i0 = r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth>;

        $i2 = (int) -1;

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = $i2;

        $r2 = specialinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.RelationPredicate)>(r1);

        r0.<minsolver.fol2sat.MinSkolemizer: int skolemDepth> = i0;

        $r3 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Formula source(kodkod.ast.Formula,kodkod.ast.Node)>($r2, r1);

        return $r3;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decl)
    {
        kodkod.ast.Decl r1, $r2;
        minsolver.fol2sat.MinSkolemizer r0;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinSkolemizer: kodkod.ast.Decl visit(kodkod.ast.Decl)>(r1);

        return $r2;
    }

    void <init>(kodkod.util.nodes.AnnotatedNode, kodkod.instance.Bounds, kodkod.engine.config.Options, minsolver.fol2sat.MinSkolemizer)
    {
        kodkod.engine.config.Options r3;
        kodkod.instance.Bounds r2;
        minsolver.fol2sat.MinSkolemizer r0, r4;
        kodkod.util.nodes.AnnotatedNode r1;

        r0 := @this: minsolver.fol2sat.MinSkolemizer;

        r1 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r2 := @parameter1: kodkod.instance.Bounds;

        r3 := @parameter2: kodkod.engine.config.Options;

        r4 := @parameter3: minsolver.fol2sat.MinSkolemizer;

        specialinvoke r0.<minsolver.fol2sat.MinSkolemizer: void <init>(kodkod.util.nodes.AnnotatedNode,kodkod.instance.Bounds,kodkod.engine.config.Options)>(r1, r2, r3);

        return;
    }

    static java.util.List access$2(minsolver.fol2sat.MinSkolemizer)
    {
        java.util.List $r1;
        minsolver.fol2sat.MinSkolemizer r0;

        r0 := @parameter0: minsolver.fol2sat.MinSkolemizer;

        $r1 = r0.<minsolver.fol2sat.MinSkolemizer: java.util.List nonSkolems>;

        return $r1;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator()
    {
        java.lang.NoSuchFieldError $r7, $r8, $r9, $r10;
        int[] $r0, r2;
        kodkod.ast.operator.FormulaOperator $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        kodkod.ast.operator.FormulaOperator[] $r1;

        $r0 = <minsolver.fol2sat.MinSkolemizer: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i1] = 1;

     label03:
        goto label05;

     label04:
        $r10 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IFF>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i2] = 3;

     label06:
        goto label08;

     label07:
        $r9 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i3] = 4;

     label09:
        goto label11;

     label10:
        $r8 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i4] = 2;

     label12:
        goto label14;

     label13:
        $r7 := @caughtexception;

     label14:
        <minsolver.fol2sat.MinSkolemizer: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
    }
}
