public class org.codehaus.groovy.classgen.EnumVisitor extends org.codehaus.groovy.ast.ClassCodeVisitorSupport
{
    private static final int FS;
    private static final int PS;
    private static final int PUBLIC_FS;
    private static final int PRIVATE_FS;
    private final org.codehaus.groovy.control.CompilationUnit compilationUnit;
    private final org.codehaus.groovy.control.SourceUnit sourceUnit;

    public void <init>(org.codehaus.groovy.control.CompilationUnit, org.codehaus.groovy.control.SourceUnit)
    {
        org.codehaus.groovy.classgen.EnumVisitor r0;
        org.codehaus.groovy.control.CompilationUnit r1;
        org.codehaus.groovy.control.SourceUnit r2;

        r0 := @this: org.codehaus.groovy.classgen.EnumVisitor;

        r1 := @parameter0: org.codehaus.groovy.control.CompilationUnit;

        r2 := @parameter1: org.codehaus.groovy.control.SourceUnit;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void <init>()>();

        r0.<org.codehaus.groovy.classgen.EnumVisitor: org.codehaus.groovy.control.CompilationUnit compilationUnit> = r1;

        r0.<org.codehaus.groovy.classgen.EnumVisitor: org.codehaus.groovy.control.SourceUnit sourceUnit> = r2;

        return;
    }

    public void visitClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.EnumVisitor r0;
        org.codehaus.groovy.ast.ClassNode r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.EnumVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = specialinvoke r0.<org.codehaus.groovy.classgen.EnumVisitor: boolean isEnum(org.codehaus.groovy.ast.ClassNode)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<org.codehaus.groovy.classgen.EnumVisitor: void completeEnum(org.codehaus.groovy.ast.ClassNode)>(r1);

        return;
    }

    protected org.codehaus.groovy.control.SourceUnit getSourceUnit()
    {
        org.codehaus.groovy.classgen.EnumVisitor r0;
        org.codehaus.groovy.control.SourceUnit $r1;

        r0 := @this: org.codehaus.groovy.classgen.EnumVisitor;

        $r1 = r0.<org.codehaus.groovy.classgen.EnumVisitor: org.codehaus.groovy.control.SourceUnit sourceUnit>;

        return $r1;
    }

    private boolean isEnum(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.EnumVisitor r1;
        org.codehaus.groovy.ast.ClassNode r0;
        int $i0, $i1;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.EnumVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: int getModifiers()>();

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void completeEnum(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.EnumVisitor r27;
        java.lang.Integer $r165, $r190, $r201, $r231;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r212, $r223, $r229;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r168, $r173, $r194, $r199, $r237, $r242, $r246, $r250;
        org.codehaus.groovy.ast.expr.Expression $r13, $r65, $r72, r77, $r91, $r99, $r101, $r130, $r132, $r139;
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r15, $r26, $r30, $r31, $r38;
        org.codehaus.groovy.ast.stmt.ReturnStatement $r160, $r183, $r209, $r218, $r226;
        org.codehaus.groovy.ast.expr.ConstantExpression $r166, $r191, $r202, $r230, $r232;
        org.codehaus.groovy.ast.stmt.IfStatement $r179, $r205;
        org.codehaus.groovy.ast.expr.FieldExpression $r158, $r175, $r180, $r188, $r206, $r233, $r238, $r239, $r240, $r243, $r244, $r247;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r224;
        org.codehaus.groovy.ast.expr.ClassExpression $r213, $r216, $r234;
        org.codehaus.groovy.ast.Parameter[] $r8, $r17, $r28, $r82, $r117, $r147, $r148;
        java.lang.Object $r58, $r76, $r145;
        org.codehaus.groovy.ast.expr.VariableExpression $r100, $r131, $r164, $r169, $r174, $r181, $r187, $r195, $r200, $r207, $r214, $r221;
        org.codehaus.groovy.syntax.Token $r43, $r78, $r79, $r113, $r114;
        org.codehaus.groovy.ast.expr.BooleanExpression $r178, $r204;
        java.util.ArrayList $r227, $r228;
        org.codehaus.groovy.ast.MethodNode r149, $r156, $r161, $r184, $r211, $r220;
        java.lang.String $r62, $r146, $r150;
        org.codehaus.groovy.ast.Parameter $r210, $r219;
        org.codehaus.groovy.ast.stmt.EmptyStatement $r108, $r140;
        org.codehaus.groovy.ast.expr.ListExpression r73;
        boolean $z0, $z1, z2, z3, $z4, $z5, z6, z7, z8, z9;
        org.codehaus.groovy.ast.expr.SpreadExpression $r222;
        org.codehaus.groovy.ast.expr.ArrayExpression $r248;
        java.util.List $r2, $r41, $r74;
        org.codehaus.groovy.ast.expr.BinaryExpression $r167, $r177, $r193, $r203, $r236, $r241, $r245, $r249;
        org.codehaus.groovy.ast.stmt.BlockStatement $r157, $r162, $r163, $r185, $r186, $r215, $r225;
        org.codehaus.groovy.ast.ClassNode[] $r7, $r18, $r33, $r81, $r116;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r159, $r170, $r171, $r176, $r182, $r189, $r192, $r196, $r197, $r208, $r217, $r235;
        java.util.Iterator $r45, $r75;
        org.codehaus.groovy.ast.expr.DeclarationExpression $r172, $r198;
        org.codehaus.groovy.ast.FieldNode r59, r151, r152, $r153, $r154, $r155;

        r27 := @this: org.codehaus.groovy.classgen.EnumVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getMethods()>();

        z2 = 0;

        z7 = 0;

        z6 = 0;

        z3 = 0;

        z9 = 0;

        z8 = 0;

        i5 = 0;

     label01:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i5 >= $i0 goto label05;

        $r145 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i5);

        r149 = (org.codehaus.groovy.ast.MethodNode) $r145;

        $r146 = virtualinvoke r149.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z1 = virtualinvoke $r146.<java.lang.String: boolean equals(java.lang.Object)>("next");

        if $z1 == 0 goto label02;

        $r148 = virtualinvoke r149.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i4 = lengthof $r148;

        if $i4 != 0 goto label02;

        z2 = 1;

        z7 = 1;

        z6 = 1;

     label02:
        $r150 = virtualinvoke r149.<org.codehaus.groovy.ast.MethodNode: java.lang.String getName()>();

        $z4 = virtualinvoke $r150.<java.lang.String: boolean equals(java.lang.Object)>("previous");

        if $z4 == 0 goto label03;

        $r147 = virtualinvoke r149.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i3 = lengthof $r147;

        if $i3 != 0 goto label03;

        z3 = 1;

        z9 = 1;

        z8 = 1;

     label03:
        if z6 == 0 goto label04;

        if z9 == 0 goto label04;

        goto label05;

     label04:
        i5 = i5 + 1;

        goto label01;

     label05:
        $r153 = new org.codehaus.groovy.ast.FieldNode;

        specialinvoke $r153.<org.codehaus.groovy.ast.FieldNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>("MIN_VALUE", 25, r0, r0, null);

        $r154 = new org.codehaus.groovy.ast.FieldNode;

        specialinvoke $r154.<org.codehaus.groovy.ast.FieldNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>("MAX_VALUE", 25, r0, r0, null);

        $r155 = new org.codehaus.groovy.ast.FieldNode;

        specialinvoke $r155.<org.codehaus.groovy.ast.FieldNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>("$VALUES", 26, $r1, r0, null);

        virtualinvoke $r155.<org.codehaus.groovy.ast.FieldNode: void setSynthetic(boolean)>(1);

        $r156 = new org.codehaus.groovy.ast.MethodNode;

        $r8 = newarray (org.codehaus.groovy.ast.Parameter)[0];

        $r7 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        specialinvoke $r156.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("values", 25, $r1, $r8, $r7, null);

        virtualinvoke $r156.<org.codehaus.groovy.ast.MethodNode: void setSynthetic(boolean)>(1);

        $r157 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r157.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $r160 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        $r159 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r158 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r158.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r155);

        $r13 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

        specialinvoke $r159.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r158, "clone", $r13);

        specialinvoke $r160.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r159);

        virtualinvoke $r157.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r160);

        virtualinvoke $r156.<org.codehaus.groovy.ast.MethodNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r157);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>($r156);

        if z7 != 0 goto label06;

        $i8 = (int) -1;

        $i10 = (int) -1;

        $r113 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(100, $i8, $i10);

        $i12 = (int) -1;

        $i14 = (int) -1;

        $r114 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(127, $i12, $i14);

        $r161 = new org.codehaus.groovy.ast.MethodNode;

        $r117 = newarray (org.codehaus.groovy.ast.Parameter)[0];

        $r116 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        specialinvoke $r161.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("next", 1, r0, $r117, $r116, null);

        virtualinvoke $r161.<org.codehaus.groovy.ast.MethodNode: void setSynthetic(boolean)>(1);

        $r162 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r162.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $r163 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r163.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $r168 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r167 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r164 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r164.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("ordinal");

        $r166 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r165 = new java.lang.Integer;

        specialinvoke $r165.<java.lang.Integer: void <init>(int)>(0);

        specialinvoke $r166.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r165);

        specialinvoke $r167.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r164, $r113, $r166);

        specialinvoke $r168.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r167);

        virtualinvoke $r163.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r168);

        $r173 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r172 = new org.codehaus.groovy.ast.expr.DeclarationExpression;

        $r169 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r169.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("ordinal");

        $r171 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r170 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r131 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        $r130 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

        specialinvoke $r170.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r131, "ordinal", $r130);

        $r132 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

        specialinvoke $r171.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r170, "next", $r132);

        specialinvoke $r172.<org.codehaus.groovy.ast.expr.DeclarationExpression: void <init>(org.codehaus.groovy.ast.expr.VariableExpression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r169, $r113, $r171);

        specialinvoke $r173.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r172);

        virtualinvoke $r162.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r173);

        $r179 = new org.codehaus.groovy.ast.stmt.IfStatement;

        $r178 = new org.codehaus.groovy.ast.expr.BooleanExpression;

        $r177 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r174 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r174.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("ordinal");

        $r176 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r175 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r175.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r155);

        $r139 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

        specialinvoke $r176.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r175, "size", $r139);

        specialinvoke $r177.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r174, $r114, $r176);

        specialinvoke $r178.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r177);

        $r140 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        specialinvoke $r179.<org.codehaus.groovy.ast.stmt.IfStatement: void <init>(org.codehaus.groovy.ast.expr.BooleanExpression,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)>($r178, $r163, $r140);

        virtualinvoke $r162.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r179);

        $r183 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        $r182 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r180 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r180.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r155);

        $r181 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r181.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("ordinal");

        specialinvoke $r182.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r180, "getAt", $r181);

        specialinvoke $r183.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r182);

        virtualinvoke $r162.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r183);

        virtualinvoke $r161.<org.codehaus.groovy.ast.MethodNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r162);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>($r161);

     label06:
        if z8 != 0 goto label07;

        $i16 = (int) -1;

        $i18 = (int) -1;

        $r78 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(100, $i16, $i18);

        $i20 = (int) -1;

        $i22 = (int) -1;

        $r79 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(124, $i20, $i22);

        $r184 = new org.codehaus.groovy.ast.MethodNode;

        $r82 = newarray (org.codehaus.groovy.ast.Parameter)[0];

        $r81 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        specialinvoke $r184.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("previous", 1, r0, $r82, $r81, null);

        virtualinvoke $r184.<org.codehaus.groovy.ast.MethodNode: void setSynthetic(boolean)>(1);

        $r185 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r185.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $r186 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r186.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $r194 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r193 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r187 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r187.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("ordinal");

        $r192 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r189 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r188 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r188.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r155);

        $r91 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

        specialinvoke $r189.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r188, "size", $r91);

        $r191 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r190 = new java.lang.Integer;

        specialinvoke $r190.<java.lang.Integer: void <init>(int)>(1);

        specialinvoke $r191.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r190);

        specialinvoke $r192.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r189, "minus", $r191);

        specialinvoke $r193.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r187, $r78, $r192);

        specialinvoke $r194.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r193);

        virtualinvoke $r186.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r194);

        $r199 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r198 = new org.codehaus.groovy.ast.expr.DeclarationExpression;

        $r195 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r195.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("ordinal");

        $r197 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r196 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r100 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        $r99 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

        specialinvoke $r196.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r100, "ordinal", $r99);

        $r101 = <org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression NO_ARGUMENTS>;

        specialinvoke $r197.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r196, "previous", $r101);

        specialinvoke $r198.<org.codehaus.groovy.ast.expr.DeclarationExpression: void <init>(org.codehaus.groovy.ast.expr.VariableExpression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r195, $r78, $r197);

        specialinvoke $r199.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r198);

        virtualinvoke $r185.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r199);

        $r205 = new org.codehaus.groovy.ast.stmt.IfStatement;

        $r204 = new org.codehaus.groovy.ast.expr.BooleanExpression;

        $r203 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r200 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r200.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("ordinal");

        $r202 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r201 = new java.lang.Integer;

        specialinvoke $r201.<java.lang.Integer: void <init>(int)>(0);

        specialinvoke $r202.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r201);

        specialinvoke $r203.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r200, $r79, $r202);

        specialinvoke $r204.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r203);

        $r108 = <org.codehaus.groovy.ast.stmt.EmptyStatement: org.codehaus.groovy.ast.stmt.EmptyStatement INSTANCE>;

        specialinvoke $r205.<org.codehaus.groovy.ast.stmt.IfStatement: void <init>(org.codehaus.groovy.ast.expr.BooleanExpression,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)>($r204, $r186, $r108);

        virtualinvoke $r185.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r205);

        $r209 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        $r208 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r206 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r206.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r155);

        $r207 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r207.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("ordinal");

        specialinvoke $r208.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r206, "getAt", $r207);

        specialinvoke $r209.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r208);

        virtualinvoke $r185.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r209);

        virtualinvoke $r184.<org.codehaus.groovy.ast.MethodNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r185);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>($r184);

     label07:
        $r210 = new org.codehaus.groovy.ast.Parameter;

        $r15 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        specialinvoke $r210.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r15, "name");

        $r211 = new org.codehaus.groovy.ast.MethodNode;

        $r17 = newarray (org.codehaus.groovy.ast.Parameter)[1];

        $r17[0] = $r210;

        $r18 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        specialinvoke $r211.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("valueOf", 9, r0, $r17, $r18, null);

        $r212 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r212.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>()>();

        $r213 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r213.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>(r0);

        virtualinvoke $r212.<org.codehaus.groovy.ast.expr.ArgumentListExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>($r213);

        $r214 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r214.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("name");

        virtualinvoke $r212.<org.codehaus.groovy.ast.expr.ArgumentListExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>($r214);

        $r215 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r215.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $r218 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        $r217 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r216 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r26 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode Enum_Type>;

        specialinvoke $r216.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r26);

        specialinvoke $r217.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r216, "valueOf", $r212);

        specialinvoke $r218.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r217);

        virtualinvoke $r215.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r218);

        virtualinvoke $r211.<org.codehaus.groovy.ast.MethodNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r215);

        virtualinvoke $r211.<org.codehaus.groovy.ast.MethodNode: void setSynthetic(boolean)>(1);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>($r211);

        specialinvoke r27.<org.codehaus.groovy.classgen.EnumVisitor: void addConstructor(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r28 = newarray (org.codehaus.groovy.ast.Parameter)[1];

        $r219 = new org.codehaus.groovy.ast.Parameter;

        $r30 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        $r31 = virtualinvoke $r30.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        specialinvoke $r219.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r31, "para");

        $r28[0] = $r219;

        $r220 = new org.codehaus.groovy.ast.MethodNode;

        $r33 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        specialinvoke $r220.<org.codehaus.groovy.ast.MethodNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>("$INIT", 26, r0, $r28, $r33, null);

        virtualinvoke $r220.<org.codehaus.groovy.ast.MethodNode: void setSynthetic(boolean)>(1);

        $r224 = new org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r38 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode THIS>;

        $r223 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        $r222 = new org.codehaus.groovy.ast.expr.SpreadExpression;

        $r221 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r221.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>("para");

        specialinvoke $r222.<org.codehaus.groovy.ast.expr.SpreadExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r221);

        specialinvoke $r223.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r222);

        specialinvoke $r224.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r38, $r223);

        $r225 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r225.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $r226 = new org.codehaus.groovy.ast.stmt.ReturnStatement;

        specialinvoke $r226.<org.codehaus.groovy.ast.stmt.ReturnStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r224);

        virtualinvoke $r225.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r226);

        virtualinvoke $r220.<org.codehaus.groovy.ast.MethodNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r225);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addMethod(org.codehaus.groovy.ast.MethodNode)>($r220);

        $r41 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.util.List getFields()>();

        $r227 = new java.util.ArrayList;

        specialinvoke $r227.<java.util.ArrayList: void <init>()>();

        $i24 = (int) -1;

        i6 = $i24;

        $i26 = (int) -1;

        $i28 = (int) -1;

        $r43 = staticinvoke <org.codehaus.groovy.syntax.Token: org.codehaus.groovy.syntax.Token newSymbol(int,int,int)>(100, $i26, $i28);

        $r228 = new java.util.ArrayList;

        specialinvoke $r228.<java.util.ArrayList: void <init>()>();

        r151 = null;

        r152 = null;

        $r45 = interfaceinvoke $r41.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z5 = interfaceinvoke $r45.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label13;

        $r58 = interfaceinvoke $r45.<java.util.Iterator: java.lang.Object next()>();

        r59 = (org.codehaus.groovy.ast.FieldNode) $r58;

        $i1 = virtualinvoke r59.<org.codehaus.groovy.ast.FieldNode: int getModifiers()>();

        $i2 = $i1 & 16384;

        if $i2 != 0 goto label09;

        goto label08;

     label09:
        i6 = i6 + 1;

        if r151 != null goto label10;

        r151 = r59;

     label10:
        r152 = r59;

        $r229 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        specialinvoke $r229.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>()>();

        $r230 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r62 = virtualinvoke r59.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        specialinvoke $r230.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r62);

        virtualinvoke $r229.<org.codehaus.groovy.ast.expr.ArgumentListExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>($r230);

        $r232 = new org.codehaus.groovy.ast.expr.ConstantExpression;

        $r231 = new java.lang.Integer;

        specialinvoke $r231.<java.lang.Integer: void <init>(int)>(i6);

        specialinvoke $r232.<org.codehaus.groovy.ast.expr.ConstantExpression: void <init>(java.lang.Object)>($r231);

        virtualinvoke $r229.<org.codehaus.groovy.ast.expr.ArgumentListExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>($r232);

        $r65 = virtualinvoke r59.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        if $r65 == null goto label12;

        $r72 = virtualinvoke r59.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        r73 = (org.codehaus.groovy.ast.expr.ListExpression) $r72;

        $r74 = virtualinvoke r73.<org.codehaus.groovy.ast.expr.ListExpression: java.util.List getExpressions()>();

        $r75 = interfaceinvoke $r74.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r75.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r76 = interfaceinvoke $r75.<java.util.Iterator: java.lang.Object next()>();

        r77 = (org.codehaus.groovy.ast.expr.Expression) $r76;

        virtualinvoke $r229.<org.codehaus.groovy.ast.expr.ArgumentListExpression: org.codehaus.groovy.ast.expr.TupleExpression addExpression(org.codehaus.groovy.ast.expr.Expression)>(r77);

        goto label11;

     label12:
        virtualinvoke r59.<org.codehaus.groovy.ast.FieldNode: void setInitialValueExpression(org.codehaus.groovy.ast.expr.Expression)>(null);

        $r237 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r236 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r233 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r233.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>(r59);

        $r235 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r234 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r234.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>(r0);

        specialinvoke $r235.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,java.lang.String,org.codehaus.groovy.ast.expr.Expression)>($r234, "$INIT", $r229);

        specialinvoke $r236.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r233, $r43, $r235);

        specialinvoke $r237.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r236);

        interfaceinvoke $r228.<java.util.List: boolean add(java.lang.Object)>($r237);

        $r238 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r238.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>(r59);

        interfaceinvoke $r227.<java.util.List: boolean add(java.lang.Object)>($r238);

        goto label08;

     label13:
        if r151 == null goto label14;

        $r242 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r241 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r239 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r239.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r153);

        $r240 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r240.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>(r151);

        specialinvoke $r241.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r239, $r43, $r240);

        specialinvoke $r242.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r241);

        interfaceinvoke $r228.<java.util.List: boolean add(java.lang.Object)>($r242);

        $r246 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r245 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r243 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r243.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r154);

        $r244 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r244.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>(r152);

        specialinvoke $r245.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r243, $r43, $r244);

        specialinvoke $r246.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r245);

        interfaceinvoke $r228.<java.util.List: boolean add(java.lang.Object)>($r246);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addField(org.codehaus.groovy.ast.FieldNode)>($r153);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addField(org.codehaus.groovy.ast.FieldNode)>($r154);

     label14:
        $r250 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        $r249 = new org.codehaus.groovy.ast.expr.BinaryExpression;

        $r247 = new org.codehaus.groovy.ast.expr.FieldExpression;

        specialinvoke $r247.<org.codehaus.groovy.ast.expr.FieldExpression: void <init>(org.codehaus.groovy.ast.FieldNode)>($r155);

        $r248 = new org.codehaus.groovy.ast.expr.ArrayExpression;

        specialinvoke $r248.<org.codehaus.groovy.ast.expr.ArrayExpression: void <init>(org.codehaus.groovy.ast.ClassNode,java.util.List)>(r0, $r227);

        specialinvoke $r249.<org.codehaus.groovy.ast.expr.BinaryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r247, $r43, $r248);

        specialinvoke $r250.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r249);

        interfaceinvoke $r228.<java.util.List: boolean add(java.lang.Object)>($r250);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addStaticInitializerStatements(java.util.List,boolean)>($r228, 1);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void addField(org.codehaus.groovy.ast.FieldNode)>($r155);

        return;
    }

    private void addConstructor(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.EnumVisitor r8;
        boolean $z0, $z1;
        org.codehaus.groovy.ast.expr.VariableExpression $r19, $r21;
        org.codehaus.groovy.ast.expr.ArgumentListExpression $r18;
        java.util.List $r2;
        org.codehaus.groovy.ast.stmt.BlockStatement $r22, $r26;
        org.codehaus.groovy.ast.stmt.Statement $r9, $r13, $r24;
        java.util.ArrayList $r0;
        org.codehaus.groovy.ast.stmt.ExpressionStatement $r23;
        int $i0, $i1, $i2, $i3;
        org.codehaus.groovy.ast.ClassNode[] $r28;
        java.lang.String $r10, $r14;
        org.codehaus.groovy.ast.Parameter $r11, $r15;
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r17;
        org.codehaus.groovy.ast.ClassNode r1, $r12, $r16, $r20;
        org.codehaus.groovy.ast.Parameter[] $r6, r7, $r27;
        java.lang.Object $r4;
        org.codehaus.groovy.ast.ConstructorNode r5, $r25;

        r8 := @this: org.codehaus.groovy.classgen.EnumVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r0 = new java.util.ArrayList;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getDeclaredConstructors()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r25 = new org.codehaus.groovy.ast.ConstructorNode;

        $r27 = newarray (org.codehaus.groovy.ast.Parameter)[0];

        $r28 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] EMPTY_ARRAY>;

        $r26 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r26.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        specialinvoke $r25.<org.codehaus.groovy.ast.ConstructorNode: void <init>(int,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)>(2, $r27, $r28, $r26);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void addConstructor(org.codehaus.groovy.ast.ConstructorNode)>($r25);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r25);

     label1:
        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.ConstructorNode) $r4;

        $z0 = virtualinvoke r5.<org.codehaus.groovy.ast.ConstructorNode: boolean firstStatementIsSpecialConstructorCall()>();

        if $z0 == 0 goto label3;

        goto label2;

     label3:
        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i1 = lengthof $r6;

        $i2 = $i1 + 2;

        r7 = newarray (org.codehaus.groovy.ast.Parameter)[$i2];

        $r9 = virtualinvoke r5.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        $r10 = specialinvoke r8.<org.codehaus.groovy.classgen.EnumVisitor: java.lang.String getUniqueVariableName(java.lang.String,org.codehaus.groovy.ast.stmt.Statement)>("__str", $r9);

        $r11 = new org.codehaus.groovy.ast.Parameter;

        $r12 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode STRING_TYPE>;

        specialinvoke $r11.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r12, $r10);

        r7[0] = $r11;

        $r13 = virtualinvoke r5.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        $r14 = specialinvoke r8.<org.codehaus.groovy.classgen.EnumVisitor: java.lang.String getUniqueVariableName(java.lang.String,org.codehaus.groovy.ast.stmt.Statement)>("__int", $r13);

        $r15 = new org.codehaus.groovy.ast.Parameter;

        $r16 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode int_TYPE>;

        specialinvoke $r15.<org.codehaus.groovy.ast.Parameter: void <init>(org.codehaus.groovy.ast.ClassNode,java.lang.String)>($r16, $r14);

        r7[1] = $r15;

        $i3 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r7, 2, $i3);

        virtualinvoke r5.<org.codehaus.groovy.ast.ConstructorNode: void setParameters(org.codehaus.groovy.ast.Parameter[])>(r7);

        $r17 = new org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r20 = <org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode SUPER>;

        $r18 = new org.codehaus.groovy.ast.expr.ArgumentListExpression;

        $r19 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r19.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>($r10);

        $r21 = new org.codehaus.groovy.ast.expr.VariableExpression;

        specialinvoke $r21.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String)>($r14);

        specialinvoke $r18.<org.codehaus.groovy.ast.expr.ArgumentListExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r19, $r21);

        specialinvoke $r17.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r20, $r18);

        $r22 = new org.codehaus.groovy.ast.stmt.BlockStatement;

        specialinvoke $r22.<org.codehaus.groovy.ast.stmt.BlockStatement: void <init>()>();

        $r23 = new org.codehaus.groovy.ast.stmt.ExpressionStatement;

        specialinvoke $r23.<org.codehaus.groovy.ast.stmt.ExpressionStatement: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r17);

        virtualinvoke $r22.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r23);

        $r24 = virtualinvoke r5.<org.codehaus.groovy.ast.ConstructorNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        if $r24 == null goto label4;

        virtualinvoke $r22.<org.codehaus.groovy.ast.stmt.BlockStatement: void addStatement(org.codehaus.groovy.ast.stmt.Statement)>($r24);

     label4:
        virtualinvoke r5.<org.codehaus.groovy.ast.ConstructorNode: void setCode(org.codehaus.groovy.ast.stmt.Statement)>($r22);

        goto label2;

     label5:
        return;
    }

    private java.lang.String getUniqueVariableName(java.lang.String, org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r0;
        org.codehaus.groovy.classgen.EnumVisitor r3;
        java.lang.Object[] r1;
        org.codehaus.groovy.classgen.EnumVisitor$1 $r2;
        java.lang.StringBuffer $r6, $r7, $r8;
        java.lang.Object $r5;
        java.lang.String r4, $r9, $r10;

        r3 := @this: org.codehaus.groovy.classgen.EnumVisitor;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.groovy.ast.stmt.Statement;

        if r0 != null goto label1;

        return r4;

     label1:
        r1 = newarray (java.lang.Object)[1];

        $r2 = new org.codehaus.groovy.classgen.EnumVisitor$1;

        specialinvoke $r2.<org.codehaus.groovy.classgen.EnumVisitor$1: void <init>(org.codehaus.groovy.classgen.EnumVisitor,java.lang.String,java.lang.Object[])>(r3, r4, r1);

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>($r2);

        $r5 = r1[0];

        if $r5 == null goto label2;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = specialinvoke r3.<org.codehaus.groovy.classgen.EnumVisitor: java.lang.String getUniqueVariableName(java.lang.String,org.codehaus.groovy.ast.stmt.Statement)>($r9, r0);

        return $r10;

     label2:
        return r4;
    }

    public static void <clinit>()
    {
        <org.codehaus.groovy.classgen.EnumVisitor: int PRIVATE_FS> = 26;

        <org.codehaus.groovy.classgen.EnumVisitor: int PUBLIC_FS> = 25;

        <org.codehaus.groovy.classgen.EnumVisitor: int PS> = 9;

        <org.codehaus.groovy.classgen.EnumVisitor: int FS> = 24;

        return;
    }
}
