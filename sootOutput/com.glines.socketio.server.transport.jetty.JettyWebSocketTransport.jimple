public final class com.glines.socketio.server.transport.jetty.JettyWebSocketTransport extends com.glines.socketio.server.AbstractTransport
{
    private static final java.util.logging.Logger LOGGER;
    private final org.eclipse.jetty.websocket.WebSocketFactory wsFactory;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lcom/glines/socketio/server/transport/jetty/JettyWebSocketTransport;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: java.util.logging.Logger LOGGER> = $r2;

        return;
    }

    public void <init>()
    {
        com.glines.socketio.server.transport.jetty.JettyWebSocketTransport$1 $r2;
        org.eclipse.jetty.websocket.WebSocketFactory $r1;
        com.glines.socketio.server.transport.jetty.JettyWebSocketTransport r0;

        r0 := @this: com.glines.socketio.server.transport.jetty.JettyWebSocketTransport;

        specialinvoke r0.<com.glines.socketio.server.AbstractTransport: void <init>()>();

        $r1 = new org.eclipse.jetty.websocket.WebSocketFactory;

        $r2 = new com.glines.socketio.server.transport.jetty.JettyWebSocketTransport$1;

        specialinvoke $r2.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport$1: void <init>(com.glines.socketio.server.transport.jetty.JettyWebSocketTransport)>(r0);

        specialinvoke $r1.<org.eclipse.jetty.websocket.WebSocketFactory: void <init>(org.eclipse.jetty.websocket.WebSocketFactory$Acceptor)>($r2);

        r0.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: org.eclipse.jetty.websocket.WebSocketFactory wsFactory> = $r1;

        return;
    }

    public void init() throws com.glines.socketio.server.TransportInitializationException
    {
        org.eclipse.jetty.websocket.WebSocketFactory $r1, $r3, $r13, $r17;
        long $l3;
        java.util.logging.Level $r5;
        int $i0, $i1, $i2;
        com.glines.socketio.server.TransportType $r9;
        java.lang.String $r19;
        boolean $z0;
        com.glines.socketio.server.SocketIOConfig $r2, $r4;
        com.glines.socketio.server.transport.jetty.JettyWebSocketTransport r0;
        java.util.logging.Logger $r6, $r8;
        java.lang.StringBuilder $r7, $r10, $r11, $r12, $r14, $r15, $r16, $r18;

        r0 := @this: com.glines.socketio.server.transport.jetty.JettyWebSocketTransport;

        $r1 = r0.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: org.eclipse.jetty.websocket.WebSocketFactory wsFactory>;

        $r2 = virtualinvoke r0.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: com.glines.socketio.server.SocketIOConfig getConfig()>();

        $i0 = interfaceinvoke $r2.<com.glines.socketio.server.SocketIOConfig: int getBufferSize()>();

        virtualinvoke $r1.<org.eclipse.jetty.websocket.WebSocketFactory: void setBufferSize(int)>($i0);

        $r3 = r0.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: org.eclipse.jetty.websocket.WebSocketFactory wsFactory>;

        $r4 = virtualinvoke r0.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: com.glines.socketio.server.SocketIOConfig getConfig()>();

        $i1 = interfaceinvoke $r4.<com.glines.socketio.server.SocketIOConfig: int getMaxIdle()>();

        virtualinvoke $r3.<org.eclipse.jetty.websocket.WebSocketFactory: void setMaxIdleTime(int)>($i1);

        $r6 = <com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: java.util.logging.Logger LOGGER>;

        $r5 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r6.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r5);

        if $z0 == 0 goto label1;

        $r8 = <com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: java.util.logging.Logger LOGGER>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: com.glines.socketio.server.TransportType getType()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" configuration:\n");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - bufferSize=");

        $r13 = r0.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: org.eclipse.jetty.websocket.WebSocketFactory wsFactory>;

        $i2 = virtualinvoke $r13.<org.eclipse.jetty.websocket.WebSocketFactory: int getBufferSize()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - maxIdle=");

        $r17 = r0.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: org.eclipse.jetty.websocket.WebSocketFactory wsFactory>;

        $l3 = virtualinvoke $r17.<org.eclipse.jetty.websocket.WebSocketFactory: long getMaxIdleTime()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void fine(java.lang.String)>($r19);

     label1:
        return;
    }

    public com.glines.socketio.server.TransportType getType()
    {
        com.glines.socketio.server.TransportType $r0;
        com.glines.socketio.server.transport.jetty.JettyWebSocketTransport r1;

        r1 := @this: com.glines.socketio.server.transport.jetty.JettyWebSocketTransport;

        $r0 = <com.glines.socketio.server.TransportType: com.glines.socketio.server.TransportType WEB_SOCKET>;

        return $r0;
    }

    public void handle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, com.glines.socketio.server.Transport$InboundFactory, com.glines.socketio.server.SessionManager) throws java.io.IOException
    {
        com.glines.socketio.server.SocketIOSession $r14;
        com.glines.socketio.server.SocketIOInbound $r12;
        com.glines.socketio.server.SessionManager r13;
        boolean $z0, $z1, z2, $z4, $z5;
        com.glines.socketio.server.Transport$InboundFactory r11;
        com.glines.socketio.server.transport.jetty.JettyWebSocketTransport r5;
        java.lang.StringBuilder $r23, $r24, $r25;
        org.eclipse.jetty.websocket.WebSocketFactory $r18;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r21, r22, $r26;
        com.glines.socketio.server.SocketIOConfig $r16;
        javax.servlet.http.HttpServletResponse r4;
        com.glines.socketio.server.TransportHandler $r15;
        java.lang.Class $r17;
        java.lang.Object $r19;
        org.eclipse.jetty.websocket.WebSocket $r20;

        r5 := @this: com.glines.socketio.server.transport.jetty.JettyWebSocketTransport;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r4 := @parameter1: javax.servlet.http.HttpServletResponse;

        r11 := @parameter2: com.glines.socketio.server.Transport$InboundFactory;

        r13 := @parameter3: com.glines.socketio.server.SessionManager;

        $r1 = staticinvoke <com.glines.socketio.util.Web: java.lang.String extractSessionId(javax.servlet.http.HttpServletRequest)>(r0);

        $r2 = "GET";

        $r3 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label09;

        if $r1 != null goto label09;

        $r6 = "WebSocket";

        $r7 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Upgrade");

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label09;

        $r8 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Sec-WebSocket-Key1");

        if $r8 == null goto label01;

        $z5 = 1;

        $z4 = 1;

        goto label02;

     label01:
        $z5 = 0;

        $z4 = 0;

     label02:
        z2 = $z4;

        if $z5 == 0 goto label03;

        $r21 = "Sec-WebSocket-Protocol";

        goto label04;

     label03:
        $r21 = "WebSocket-Protocol";

     label04:
        $r9 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>($r21);

        r22 = $r9;

        if $r9 != null goto label05;

        r22 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Sec-WebSocket-Protocol");

     label05:
        interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Host");

        $r10 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Origin");

        if $r10 != null goto label06;

     label06:
        $r12 = interfaceinvoke r11.<com.glines.socketio.server.Transport$InboundFactory: com.glines.socketio.server.SocketIOInbound getInbound(javax.servlet.http.HttpServletRequest)>(r0);

        if $r12 != null goto label08;

        if z2 == 0 goto label07;

        interfaceinvoke r4.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>("Connection", "close");

     label07:
        interfaceinvoke r4.<javax.servlet.http.HttpServletResponse: void sendError(int)>(503);

        goto label10;

     label08:
        $r14 = interfaceinvoke r13.<com.glines.socketio.server.SessionManager: com.glines.socketio.server.SocketIOSession createSession(com.glines.socketio.server.SocketIOInbound)>($r12);

        $r15 = virtualinvoke r5.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: com.glines.socketio.server.TransportHandler newHandler(java.lang.Class,com.glines.socketio.server.SocketIOSession)>(class "Lorg/eclipse/jetty/websocket/WebSocket;", $r14);

        $r16 = virtualinvoke r5.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: com.glines.socketio.server.SocketIOConfig getConfig()>();

        interfaceinvoke $r15.<com.glines.socketio.server.TransportHandler: void init(com.glines.socketio.server.SocketIOConfig)>($r16);

        $r18 = r5.<com.glines.socketio.server.transport.jetty.JettyWebSocketTransport: org.eclipse.jetty.websocket.WebSocketFactory wsFactory>;

        $r17 = class "Lorg/eclipse/jetty/websocket/WebSocket;";

        $r19 = virtualinvoke $r17.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r15);

        $r20 = (org.eclipse.jetty.websocket.WebSocket) $r19;

        virtualinvoke $r18.<org.eclipse.jetty.websocket.WebSocketFactory: void upgrade(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.websocket.WebSocket,java.lang.String)>(r0, r4, $r20, r22);

        goto label10;

     label09:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transport error: Invalid request");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>(400, $r26);

     label10:
        return;
    }
}
