class org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.SubmitCallback
{
    final int val$submitConnectionTag;
    final org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0;

    void <init>(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl, int)
    {
        int i0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1 r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl;

        i0 := @parameter1: int;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: int val$submitConnectionTag> = i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(int, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.concurrencycontrol.common.ResponseCode, java.lang.String) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        byte $b5;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack $r32;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r11, $r35, $r40;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r41, $r42, $r43;
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r31, $r36, $r45;
        long $l1, $l2, $l3, $l4, $l6, $l7, $l8;
        org.waveprotocol.wave.model.version.HashedVersion r2;
        java.lang.String r1, $r30, $r44;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage $r10, $r20;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r50;
        org.waveprotocol.wave.concurrencycontrol.common.ResponseCode $r6, $r37, $r38, $r39, r46, $r47;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl $r3, $r5, $r7, $r14, $r17, $r33, $r34, $r48, $r49, $r51, $r52, $r53;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack $r4;
        boolean $z0, $z1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1 r0;
        java.util.List $r8, $r18, $r54;
        int i0;
        java.lang.Object $r9, $r19;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r46 := @parameter2: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode;

        r1 := @parameter3: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: boolean connectionIsCurrent()>();

        if $z0 == 0 goto label9;

        if i0 >= 0 goto label1;

        $r40 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delta channel: invalid submit delta response, opsApplied: ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $r45 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r40.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r44, $r45);

        throw $r40;

     label1:
        if r1 == null goto label2;

        $r39 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode OK>;

        if r46 != $r39 goto label2;

        r46 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode INTERNAL_ERROR>;

     label2:
        if i0 > 0 goto label3;

        $r38 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode OK>;

        if r46 != $r38 goto label4;

     label3:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.version.HashedVersion access$202(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl,org.waveprotocol.wave.model.version.HashedVersion)>($r3, r2);

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $r4 = new org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack;

        specialinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Ack: void <init>(int,org.waveprotocol.wave.model.version.HashedVersion)>(i0, r2);

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int access$300(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl,org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>($r5, $r4);

     label4:
        $r47 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode TOO_OLD>;

        if r46 != $r47 goto label5;

        $r35 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r37 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode TOO_OLD>;

        $r36 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable RECOVERABLE>;

        specialinvoke $r35.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String,java.lang.Throwable,org.waveprotocol.wave.concurrencycontrol.common.Recoverable,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r37, "Delta targeted too old version", null, $r36, null, null);

        throw $r35;

     label5:
        $r6 = <org.waveprotocol.wave.concurrencycontrol.common.ResponseCode: org.waveprotocol.wave.concurrencycontrol.common.ResponseCode OK>;

        if r46 == $r6 goto label8;

        $r34 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $r32 = new org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack;

        if i0 <= 0 goto label6;

        $l8 = virtualinvoke r2.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        goto label7;

     label6:
        $r33 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $l8 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long access$400(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)>($r33);

     label7:
        specialinvoke $r32.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Nack: void <init>(long,org.waveprotocol.wave.concurrencycontrol.common.ResponseCode,java.lang.String)>($l8, r46, r1);

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int access$300(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl,org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>($r34, $r32);

     label8:
        $r48 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $r49 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $r50 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta access$600(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)>($r49);

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta access$502(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl,org.waveprotocol.wave.model.operation.wave.WaveletDelta)>($r48, $r50);

        $r51 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.model.operation.wave.WaveletDelta access$602(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl,org.waveprotocol.wave.model.operation.wave.WaveletDelta)>($r51, null);

        $r52 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void access$700(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)>($r52);

        $r53 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $r54 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List access$800(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)>($r53);

        $z1 = interfaceinvoke $r54.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label9;

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List access$800(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)>($r7);

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) $r9;

        $l1 = virtualinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion()>();

        $l2 = virtualinvoke r2.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l3 = (long) i0;

        $l4 = $l2 - $l3;

        $b5 = $l1 cmp $l4;

        if $b5 == 0 goto label9;

        $r11 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delta channel couldn\'t flush messages after submit response: lastServerVersion ");

        $r14 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $l6 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: long access$400(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", queued message version ");

        $r17 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $r18 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.util.List access$800(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)>($r17);

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(0);

        $r20 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) $r19;

        $l7 = virtualinvoke $r20.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: long startVersion()>();

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" response version ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", opsApplied ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", code ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r46);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", errorMessage ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable NOT_RECOVERABLE>;

        specialinvoke $r11.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r30, $r31);

        throw $r11;

     label9:
        return;
    }

    public void onFailure(java.lang.String) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1 r0;
        org.waveprotocol.wave.concurrencycontrol.common.Recoverable $r7;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String r4, $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1;

        r4 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: boolean connectionIsCurrent()>();

        if $z0 == 0 goto label1;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.common.ChannelException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delta channel: submission failed: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = <org.waveprotocol.wave.concurrencycontrol.common.Recoverable: org.waveprotocol.wave.concurrencycontrol.common.Recoverable RECOVERABLE>;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.common.ChannelException: void <init>(java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.Recoverable)>($r6, $r7);

        throw $r1;

     label1:
        return;
    }

    private boolean connectionIsCurrent()
    {
        java.lang.Object[] $r5, $r10;
        java.lang.Integer $r7, $r9;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1 r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl $r1, $r4, $r6, $r8, $r11;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State $r2, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State access$900(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)>($r1);

        $r3 = <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$State CONNECTED>;

        if $r2 == $r3 goto label1;

        $r11 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = "Ignoring orphaned ack on disconnected channel";

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void access$1000(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl,java.lang.Object[])>($r11, $r10);

        return 0;

     label1:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int access$1100(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)>($r4);

        $i1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: int val$submitConnectionTag>;

        if $i0 == $i1 goto label2;

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = "Ignoring ophaned ack on with connection tag ";

        $i2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: int val$submitConnectionTag>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5[1] = $r7;

        $r5[2] = ", connectionTag now ";

        $r8 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$1: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl this$0>;

        $i3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: int access$1100(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r5[3] = $r9;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: void access$1000(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl,java.lang.Object[])>($r6, $r5);

        return 0;

     label2:
        return 1;
    }
}
