class org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph extends org.apache.jena.riot.system.StreamRDFBase
{
    protected final com.hp.hpl.jena.graph.Graph graph;
    protected boolean warningIssued;

    public void <init>(com.hp.hpl.jena.graph.Graph)
    {
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<org.apache.jena.riot.system.StreamRDFBase: void <init>()>();

        r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph: boolean warningIssued> = 0;

        r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph: com.hp.hpl.jena.graph.Graph graph> = r1;

        return;
    }

    public void triple(com.hp.hpl.jena.graph.Triple)
    {
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph r0;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph: com.hp.hpl.jena.graph.Graph graph>;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public void quad(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.sparql.core.Quad r0;
        com.hp.hpl.jena.graph.Triple $r3;
        org.apache.jena.riot.system.ErrorHandler $r4;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph r1;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: boolean isTriple()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph()>();

        if $z1 == 0 goto label2;

     label1:
        $r2 = r1.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Triple asTriple()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r3);

        goto label4;

     label2:
        $z2 = r1.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph: boolean warningIssued>;

        if $z2 != 0 goto label3;

        $r4 = staticinvoke <org.apache.jena.riot.system.ErrorHandlerFactory: org.apache.jena.riot.system.ErrorHandler getDefaultErrorHandler()>();

        interfaceinvoke $r4.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>("Only triples or default graph data expected : named graph data ignored", -1L, -1L);

     label3:
        r1.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph: boolean warningIssued> = 1;

     label4:
        return;
    }

    public void base(java.lang.String)
    {
        java.lang.String r1;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph r0;

        r0 := @this: org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void prefix(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.shared.JenaException $r5;
        org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph r0;
        java.lang.String r3, r4;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.shared.PrefixMapping $r2;

        r0 := @this: org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

     label1:
        $r1 = r0.<org.apache.jena.riot.system.StreamRDFLib$ParserOutputGraph: com.hp.hpl.jena.graph.Graph graph>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>(r3, r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch com.hp.hpl.jena.shared.JenaException from label1 to label2 with label3;
    }
}
