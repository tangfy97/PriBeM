final class org.apache.lucene.index.TermVectorsConsumer extends org.apache.lucene.index.TermsHashConsumer
{
    org.apache.lucene.codecs.TermVectorsWriter writer;
    final org.apache.lucene.index.DocumentsWriterPerThread docWriter;
    int freeCount;
    int lastDocID;
    final org.apache.lucene.index.DocumentsWriterPerThread$DocState docState;
    final org.apache.lucene.util.BytesRef flushTerm;
    final org.apache.lucene.index.ByteSliceReader vectorSliceReaderPos;
    final org.apache.lucene.index.ByteSliceReader vectorSliceReaderOff;
    boolean hasVectors;
    int numVectorFields;
    org.apache.lucene.index.TermVectorsConsumerPerField[] perFields;
    java.lang.String lastVectorFieldName;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.DocumentsWriterPerThread)
    {
        org.apache.lucene.index.TermVectorsConsumer r0;
        org.apache.lucene.util.BytesRef $r1;
        org.apache.lucene.index.DocumentsWriterPerThread$DocState $r5;
        org.apache.lucene.index.DocumentsWriterPerThread r4;
        org.apache.lucene.index.ByteSliceReader $r2, $r3;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        r4 := @parameter0: org.apache.lucene.index.DocumentsWriterPerThread;

        specialinvoke r0.<org.apache.lucene.index.TermsHashConsumer: void <init>()>();

        $r1 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r1.<org.apache.lucene.util.BytesRef: void <init>()>();

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.util.BytesRef flushTerm> = $r1;

        $r2 = new org.apache.lucene.index.ByteSliceReader;

        specialinvoke $r2.<org.apache.lucene.index.ByteSliceReader: void <init>()>();

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.ByteSliceReader vectorSliceReaderPos> = $r2;

        $r3 = new org.apache.lucene.index.ByteSliceReader;

        specialinvoke $r3.<org.apache.lucene.index.ByteSliceReader: void <init>()>();

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.ByteSliceReader vectorSliceReaderOff> = $r3;

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread docWriter> = r4;

        $r5 = r4.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState>;

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState> = $r5;

        return;
    }

    void flush(java.util.Map, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException
    {
        org.apache.lucene.index.TermVectorsConsumer r0;
        java.lang.Throwable $r16;
        org.apache.lucene.index.TermsHashPerField $r7;
        java.lang.AssertionError $r15;
        java.util.Map r2;
        org.apache.lucene.index.SegmentWriteState r8;
        int $i0;
        java.io.Closeable[] $r12, $r17;
        org.apache.lucene.index.FieldInfos $r10;
        boolean $z0, $z1;
        org.apache.lucene.index.TermsHashConsumerPerField r19;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        org.apache.lucene.index.SegmentInfo $r9, $r14;
        org.apache.lucene.index.TermVectorsConsumerPerField r6;
        org.apache.lucene.codecs.TermVectorsWriter $r1, $r11, $r13, $r18;
        java.lang.Object $r5;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        r2 := @parameter0: java.util.Map;

        r8 := @parameter1: org.apache.lucene.index.SegmentWriteState;

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        if $r1 == null goto label6;

        $r9 = r8.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $i0 = virtualinvoke $r9.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

     label1:
        virtualinvoke r0.<org.apache.lucene.index.TermVectorsConsumer: void fill(int)>($i0);

        $z0 = <org.apache.lucene.index.TermVectorsConsumer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r14 = r8.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        if $r14 != null goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label2:
        $r11 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        $r10 = r8.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.FieldInfos fieldInfos>;

        virtualinvoke $r11.<org.apache.lucene.codecs.TermVectorsWriter: void finish(org.apache.lucene.index.FieldInfos,int)>($r10, $i0);

     label3:
        $r12 = newarray (java.io.Closeable)[1];

        $r13 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        $r12[0] = $r13;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r12);

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer> = null;

        r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID> = 0;

        r0.<org.apache.lucene.index.TermVectorsConsumer: boolean hasVectors> = 0;

        goto label6;

     label4:
        $r16 := @caughtexception;

     label5:
        $r17 = newarray (java.io.Closeable)[1];

        $r18 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        $r17[0] = $r18;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r17);

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer> = null;

        r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID> = 0;

        r0.<org.apache.lucene.index.TermVectorsConsumer: boolean hasVectors> = 0;

        throw $r16;

     label6:
        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.lucene.index.TermsHashConsumerPerField) $r5;

        r6 = (org.apache.lucene.index.TermVectorsConsumerPerField) r19;

        $r7 = r6.<org.apache.lucene.index.TermVectorsConsumerPerField: org.apache.lucene.index.TermsHashPerField termsHashPerField>;

        virtualinvoke $r7.<org.apache.lucene.index.TermsHashPerField: void reset()>();

        virtualinvoke r6.<org.apache.lucene.index.TermVectorsConsumerPerField: void shrinkHash()>();

        goto label7;

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void fill(int) throws java.io.IOException
    {
        org.apache.lucene.index.TermVectorsConsumer r0;
        org.apache.lucene.codecs.TermVectorsWriter $r1, $r2;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        i0 := @parameter0: int;

     label1:
        $i1 = r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID>;

        if $i1 >= i0 goto label2;

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        virtualinvoke $r1.<org.apache.lucene.codecs.TermVectorsWriter: void startDocument(int)>(0);

        $r2 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        virtualinvoke $r2.<org.apache.lucene.codecs.TermVectorsWriter: void finishDocument()>();

        $i2 = r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID> = $i3;

        goto label1;

     label2:
        return;
    }

    private final void initTermVectorsWriter() throws java.io.IOException
    {
        org.apache.lucene.index.TermVectorsConsumer r0;
        long $l1;
        int $i0;
        org.apache.lucene.index.DocumentsWriterPerThread $r4, $r5, $r6, $r9, $r10;
        org.apache.lucene.store.IOContext $r2;
        org.apache.lucene.codecs.TermVectorsFormat $r8;
        org.apache.lucene.index.SegmentInfo $r12;
        org.apache.lucene.codecs.TermVectorsWriter $r1, $r13;
        org.apache.lucene.codecs.Codec $r7;
        org.apache.lucene.store.TrackingDirectoryWrapper $r11;
        org.apache.lucene.store.FlushInfo $r3;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        if $r1 != null goto label1;

        $r2 = new org.apache.lucene.store.IOContext;

        $r3 = new org.apache.lucene.store.FlushInfo;

        $r4 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread docWriter>;

        $i0 = virtualinvoke $r4.<org.apache.lucene.index.DocumentsWriterPerThread: int getNumDocsInRAM()>();

        $r5 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread docWriter>;

        $l1 = virtualinvoke $r5.<org.apache.lucene.index.DocumentsWriterPerThread: long bytesUsed()>();

        specialinvoke $r3.<org.apache.lucene.store.FlushInfo: void <init>(int,long)>($i0, $l1);

        specialinvoke $r2.<org.apache.lucene.store.IOContext: void <init>(org.apache.lucene.store.FlushInfo)>($r3);

        $r6 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread docWriter>;

        $r7 = $r6.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.codecs.Codec codec>;

        $r8 = virtualinvoke $r7.<org.apache.lucene.codecs.Codec: org.apache.lucene.codecs.TermVectorsFormat termVectorsFormat()>();

        $r9 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread docWriter>;

        $r11 = $r9.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.store.TrackingDirectoryWrapper directory>;

        $r10 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread docWriter>;

        $r12 = virtualinvoke $r10.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.index.SegmentInfo getSegmentInfo()>();

        $r13 = virtualinvoke $r8.<org.apache.lucene.codecs.TermVectorsFormat: org.apache.lucene.codecs.TermVectorsWriter vectorsWriter(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfo,org.apache.lucene.store.IOContext)>($r11, $r12, $r2);

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer> = $r13;

        r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID> = 0;

     label1:
        return;
    }

    void finishDocument(org.apache.lucene.index.TermsHash) throws java.io.IOException
    {
        org.apache.lucene.index.TermVectorsConsumer r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.index.TermVectorsConsumerPerField[] $r17;
        org.apache.lucene.index.IndexWriter $r6, $r20;
        org.apache.lucene.index.TermVectorsConsumerPerField $r18;
        org.apache.lucene.codecs.TermVectorsWriter $r2, $r3;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15;
        java.lang.AssertionError $r7, $r9, $r21;
        org.apache.lucene.index.DocumentsWriterPerThread$DocState $r1, $r8, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.String $r16;
        org.apache.lucene.index.DocumentsWriterPerThread $r5, $r19;
        org.apache.lucene.index.TermsHash r4;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        r4 := @parameter0: org.apache.lucene.index.TermsHash;

        $z0 = <org.apache.lucene.index.TermVectorsConsumer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r19 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread docWriter>;

        $r20 = $r19.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.index.IndexWriter writer>;

        $z5 = virtualinvoke $r20.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("TermVectorsTermsWriter.finishDocument start");

        if $z5 != 0 goto label1;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label1:
        $z1 = r0.<org.apache.lucene.index.TermVectorsConsumer: boolean hasVectors>;

        if $z1 != 0 goto label2;

        return;

     label2:
        specialinvoke r0.<org.apache.lucene.index.TermVectorsConsumer: void initTermVectorsWriter()>();

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState>;

        $i0 = $r1.<org.apache.lucene.index.DocumentsWriterPerThread$DocState: int docID>;

        virtualinvoke r0.<org.apache.lucene.index.TermVectorsConsumer: void fill(int)>($i0);

        $r2 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        $i1 = r0.<org.apache.lucene.index.TermVectorsConsumer: int numVectorFields>;

        virtualinvoke $r2.<org.apache.lucene.codecs.TermVectorsWriter: void startDocument(int)>($i1);

        i9 = 0;

     label3:
        $i2 = r0.<org.apache.lucene.index.TermVectorsConsumer: int numVectorFields>;

        if i9 >= $i2 goto label4;

        $r17 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.TermVectorsConsumerPerField[] perFields>;

        $r18 = $r17[i9];

        virtualinvoke $r18.<org.apache.lucene.index.TermVectorsConsumerPerField: void finishDocument()>();

        i9 = i9 + 1;

        goto label3;

     label4:
        $r3 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        virtualinvoke $r3.<org.apache.lucene.codecs.TermVectorsWriter: void finishDocument()>();

        $z2 = <org.apache.lucene.index.TermVectorsConsumer: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $i6 = r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID>;

        $r8 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState>;

        $i5 = $r8.<org.apache.lucene.index.DocumentsWriterPerThread$DocState: int docID>;

        if $i6 == $i5 goto label5;

        $r9 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lastDocID=");

        $i7 = r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" docState.docID=");

        $r14 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread$DocState docState>;

        $i8 = $r14.<org.apache.lucene.index.DocumentsWriterPerThread$DocState: int docID>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r9;

     label5:
        $i3 = r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID>;

        $i4 = $i3 + 1;

        r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID> = $i4;

        virtualinvoke r4.<org.apache.lucene.index.TermsHash: void reset()>();

        virtualinvoke r0.<org.apache.lucene.index.TermVectorsConsumer: void reset()>();

        $z3 = <org.apache.lucene.index.TermVectorsConsumer: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $r5 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.DocumentsWriterPerThread docWriter>;

        $r6 = $r5.<org.apache.lucene.index.DocumentsWriterPerThread: org.apache.lucene.index.IndexWriter writer>;

        $z4 = virtualinvoke $r6.<org.apache.lucene.index.IndexWriter: boolean testPoint(java.lang.String)>("TermVectorsTermsWriter.finishDocument end");

        if $z4 != 0 goto label6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label6:
        return;
    }

    public void abort()
    {
        org.apache.lucene.index.TermVectorsConsumer r0;
        org.apache.lucene.codecs.TermVectorsWriter $r1, $r2;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        r0.<org.apache.lucene.index.TermVectorsConsumer: boolean hasVectors> = 0;

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer>;

        virtualinvoke $r2.<org.apache.lucene.codecs.TermVectorsWriter: void abort()>();

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.codecs.TermVectorsWriter writer> = null;

     label1:
        r0.<org.apache.lucene.index.TermVectorsConsumer: int lastDocID> = 0;

        virtualinvoke r0.<org.apache.lucene.index.TermVectorsConsumer: void reset()>();

        return;
    }

    void reset()
    {
        org.apache.lucene.index.TermVectorsConsumer r0;
        org.apache.lucene.index.TermVectorsConsumerPerField[] $r1;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        r0.<org.apache.lucene.index.TermVectorsConsumer: int numVectorFields> = 0;

        $r1 = newarray (org.apache.lucene.index.TermVectorsConsumerPerField)[1];

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.TermVectorsConsumerPerField[] perFields> = $r1;

        return;
    }

    public org.apache.lucene.index.TermsHashConsumerPerField addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)
    {
        org.apache.lucene.index.TermVectorsConsumer r2;
        org.apache.lucene.index.TermVectorsConsumerPerField $r0;
        org.apache.lucene.index.TermsHashPerField r1;
        org.apache.lucene.index.FieldInfo r3;

        r2 := @this: org.apache.lucene.index.TermVectorsConsumer;

        r1 := @parameter0: org.apache.lucene.index.TermsHashPerField;

        r3 := @parameter1: org.apache.lucene.index.FieldInfo;

        $r0 = new org.apache.lucene.index.TermVectorsConsumerPerField;

        specialinvoke $r0.<org.apache.lucene.index.TermVectorsConsumerPerField: void <init>(org.apache.lucene.index.TermsHashPerField,org.apache.lucene.index.TermVectorsConsumer,org.apache.lucene.index.FieldInfo)>(r1, r2, r3);

        return $r0;
    }

    void addFieldToFlush(org.apache.lucene.index.TermVectorsConsumerPerField)
    {
        org.apache.lucene.index.TermVectorsConsumer r0;
        org.apache.lucene.index.TermVectorsConsumerPerField[] $r1, $r2, r4, $r5;
        org.apache.lucene.index.TermVectorsConsumerPerField r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        r3 := @parameter0: org.apache.lucene.index.TermVectorsConsumerPerField;

        $i1 = r0.<org.apache.lucene.index.TermVectorsConsumer: int numVectorFields>;

        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.TermVectorsConsumerPerField[] perFields>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $i4 = r0.<org.apache.lucene.index.TermVectorsConsumer: int numVectorFields>;

        $i6 = $i4 + 1;

        $i5 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i7 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i6, $i5);

        r4 = newarray (org.apache.lucene.index.TermVectorsConsumerPerField)[$i7];

        $r5 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.TermVectorsConsumerPerField[] perFields>;

        $i8 = r0.<org.apache.lucene.index.TermVectorsConsumer: int numVectorFields>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, 0, $i8);

        r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.TermVectorsConsumerPerField[] perFields> = r4;

     label1:
        $r2 = r0.<org.apache.lucene.index.TermVectorsConsumer: org.apache.lucene.index.TermVectorsConsumerPerField[] perFields>;

        $i2 = r0.<org.apache.lucene.index.TermVectorsConsumer: int numVectorFields>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.index.TermVectorsConsumer: int numVectorFields> = $i3;

        $r2[$i2] = r3;

        return;
    }

    void startDocument()
    {
        org.apache.lucene.index.TermVectorsConsumer r0;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        $z0 = <org.apache.lucene.index.TermVectorsConsumer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.lucene.index.TermVectorsConsumer: boolean clearLastVectorFieldName()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.lucene.index.TermVectorsConsumer: void reset()>();

        return;
    }

    final boolean clearLastVectorFieldName()
    {
        org.apache.lucene.index.TermVectorsConsumer r0;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        r0.<org.apache.lucene.index.TermVectorsConsumer: java.lang.String lastVectorFieldName> = null;

        return 1;
    }

    final boolean vectorFieldsInOrder(org.apache.lucene.index.FieldInfo)
    {
        org.apache.lucene.index.TermVectorsConsumer r0;
        java.lang.Throwable $r7;
        int $i0;
        org.apache.lucene.index.FieldInfo r2;
        java.lang.String $r1, $r3, $r4, $r5, $r6, $r8;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.TermVectorsConsumer;

        r2 := @parameter0: org.apache.lucene.index.FieldInfo;

     label1:
        $r1 = r0.<org.apache.lucene.index.TermVectorsConsumer: java.lang.String lastVectorFieldName>;

        if $r1 == null goto label4;

        $r5 = r0.<org.apache.lucene.index.TermVectorsConsumer: java.lang.String lastVectorFieldName>;

        $r4 = r2.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $i0 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r4);

        if $i0 >= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r6 = r2.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        r0.<org.apache.lucene.index.TermVectorsConsumer: java.lang.String lastVectorFieldName> = $r6;

        return $z0;

     label4:
        $r3 = r2.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        r0.<org.apache.lucene.index.TermVectorsConsumer: java.lang.String lastVectorFieldName> = $r3;

        return 1;

     label5:
        $r7 := @caughtexception;

     label6:
        $r8 = r2.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        r0.<org.apache.lucene.index.TermVectorsConsumer: java.lang.String lastVectorFieldName> = $r8;

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/TermVectorsConsumer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.TermVectorsConsumer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
