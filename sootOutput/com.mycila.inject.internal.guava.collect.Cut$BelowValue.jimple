final class com.mycila.inject.internal.guava.collect.Cut$BelowValue extends com.mycila.inject.internal.guava.collect.Cut
{
    private static final long serialVersionUID;

    void <init>(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r0;
        java.lang.Comparable r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Comparable) $r2;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Cut: void <init>(java.lang.Comparable)>($r3);

        return;
    }

    boolean isLessThan(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r0;
        int $i0;
        java.lang.Comparable r1, $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Range: int compareOrThrow(java.lang.Comparable,java.lang.Comparable)>($r2, r1);

        if $i0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    com.mycila.inject.internal.guava.collect.BoundType typeAsLowerBound()
    {
        com.mycila.inject.internal.guava.collect.BoundType $r0;
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        $r0 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType CLOSED>;

        return $r0;
    }

    com.mycila.inject.internal.guava.collect.BoundType typeAsUpperBound()
    {
        com.mycila.inject.internal.guava.collect.BoundType $r0;
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        $r0 = <com.mycila.inject.internal.guava.collect.BoundType: com.mycila.inject.internal.guava.collect.BoundType OPEN>;

        return $r0;
    }

    com.mycila.inject.internal.guava.collect.Cut withLowerBoundType(com.mycila.inject.internal.guava.collect.BoundType, com.mycila.inject.internal.guava.collect.DiscreteDomain)
    {
        com.mycila.inject.internal.guava.collect.Cut $r7;
        com.mycila.inject.internal.guava.collect.Cut$AboveValue $r8;
        java.lang.AssertionError $r9;
        com.mycila.inject.internal.guava.collect.DiscreteDomain r2;
        com.mycila.inject.internal.guava.collect.BoundType r0;
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r3;
        int[] $r1;
        int $i0, $i1;
        java.lang.Comparable $r4, $r5;

        r3 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BoundType;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.DiscreteDomain;

        $r1 = <com.mycila.inject.internal.guava.collect.Cut$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BoundType: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label5;
        };

     label1:
        return r3;

     label2:
        $r4 = r3.<com.mycila.inject.internal.guava.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $r5 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.DiscreteDomain: java.lang.Comparable previous(java.lang.Comparable)>($r4);

        if $r5 != null goto label3;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut belowAll()>();

        goto label4;

     label3:
        $r8 = new com.mycila.inject.internal.guava.collect.Cut$AboveValue;

        $r7 = $r8;

        specialinvoke $r8.<com.mycila.inject.internal.guava.collect.Cut$AboveValue: void <init>(java.lang.Comparable)>($r5);

     label4:
        return $r7;

     label5:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;
    }

    com.mycila.inject.internal.guava.collect.Cut withUpperBoundType(com.mycila.inject.internal.guava.collect.BoundType, com.mycila.inject.internal.guava.collect.DiscreteDomain)
    {
        com.mycila.inject.internal.guava.collect.Cut $r7;
        com.mycila.inject.internal.guava.collect.Cut$AboveValue $r8;
        java.lang.AssertionError $r9;
        com.mycila.inject.internal.guava.collect.DiscreteDomain r3;
        com.mycila.inject.internal.guava.collect.BoundType r0;
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r2;
        int[] $r1;
        int $i0, $i1;
        java.lang.Comparable $r4, $r5;

        r2 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BoundType;

        r3 := @parameter1: com.mycila.inject.internal.guava.collect.DiscreteDomain;

        $r1 = <com.mycila.inject.internal.guava.collect.Cut$1: int[] $SwitchMap$com$google$common$collect$BoundType>;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BoundType: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label4;
            default: goto label5;
        };

     label1:
        $r4 = r2.<com.mycila.inject.internal.guava.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $r5 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.DiscreteDomain: java.lang.Comparable previous(java.lang.Comparable)>($r4);

        if $r5 != null goto label2;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Cut: com.mycila.inject.internal.guava.collect.Cut aboveAll()>();

        goto label3;

     label2:
        $r8 = new com.mycila.inject.internal.guava.collect.Cut$AboveValue;

        $r7 = $r8;

        specialinvoke $r8.<com.mycila.inject.internal.guava.collect.Cut$AboveValue: void <init>(java.lang.Comparable)>($r5);

     label3:
        return $r7;

     label4:
        return r2;

     label5:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;
    }

    void describeAsLowerBound(java.lang.StringBuilder)
    {
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r2;
        java.lang.StringBuilder r0, $r1;
        java.lang.Comparable $r3;

        r2 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        r0 := @parameter0: java.lang.StringBuilder;

        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        return;
    }

    void describeAsUpperBound(java.lang.StringBuilder)
    {
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r1;
        java.lang.StringBuilder r0, $r3;
        java.lang.Comparable $r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        r0 := @parameter0: java.lang.StringBuilder;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        return;
    }

    java.lang.Comparable leastValueAbove(com.mycila.inject.internal.guava.collect.DiscreteDomain)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomain r2;
        java.lang.Comparable $r1;
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.DiscreteDomain;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        return $r1;
    }

    java.lang.Comparable greatestValueBelow(com.mycila.inject.internal.guava.collect.DiscreteDomain)
    {
        com.mycila.inject.internal.guava.collect.DiscreteDomain r0;
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r1;
        java.lang.Comparable $r2, $r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.DiscreteDomain;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.DiscreteDomain: java.lang.Comparable previous(java.lang.Comparable)>($r2);

        return $r3;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.Comparable $r1;
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Cut$BelowValue: java.lang.Comparable endpoint>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Cut $r2;
        com.mycila.inject.internal.guava.collect.Cut$BelowValue r0;
        int $i0;
        java.lang.Object r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Cut$BelowValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.mycila.inject.internal.guava.collect.Cut) r1;

        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.Cut: int compareTo(com.mycila.inject.internal.guava.collect.Cut)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.Cut$BelowValue: long serialVersionUID> = 0L;

        return;
    }
}
