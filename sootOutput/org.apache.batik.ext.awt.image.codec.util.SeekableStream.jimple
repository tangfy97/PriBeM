public abstract class org.apache.batik.ext.awt.image.codec.util.SeekableStream extends java.io.InputStream implements java.io.DataInput
{
    protected long markPos;
    private byte[] ruileBuf;

    public void <init>()
    {
        byte[] $r1;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long markPos> = -1L;

        $r1 = newarray (byte)[4];

        r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: byte[] ruileBuf> = $r1;

        return;
    }

    public static org.apache.batik.ext.awt.image.codec.util.SeekableStream wrapInputStream(java.io.InputStream, boolean)
    {
        org.apache.batik.ext.awt.image.codec.util.ForwardSeekableStream $r0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r5;
        org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream $r2;
        org.apache.batik.ext.awt.image.codec.util.MemoryCacheSeekableStream $r4;
        java.lang.Exception $r3;
        boolean z0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label5;

     label1:
        $r2 = new org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.util.FileCacheSeekableStream: void <init>(java.io.InputStream)>(r1);

        r5 = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.batik.ext.awt.image.codec.util.MemoryCacheSeekableStream;

        specialinvoke $r4.<org.apache.batik.ext.awt.image.codec.util.MemoryCacheSeekableStream: void <init>(java.io.InputStream)>(r1);

        r5 = $r4;

     label4:
        goto label6;

     label5:
        $r0 = new org.apache.batik.ext.awt.image.codec.util.ForwardSeekableStream;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.codec.util.ForwardSeekableStream: void <init>(java.io.InputStream)>(r1);

        r5 = $r0;

     label6:
        return r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public abstract int read() throws java.io.IOException;

    public abstract int read(byte[], int, int) throws java.io.IOException;

    public synchronized void mark(int)
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        int i1;
        long $l0;
        java.io.IOException $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        i1 := @parameter0: int;

     label1:
        $l0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long getFilePointer()>();

        r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long markPos> = $l0;

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long markPos> = -1L;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public synchronized void reset() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        byte $b1;
        long $l0, $l2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $l0 = r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long markPos>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $l2 = r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long markPos>;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>($l2);

     label1:
        return;
    }

    public boolean markSupported()
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $z0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: boolean canSeekBackwards()>();

        return $z0;
    }

    public boolean canSeekBackwards()
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        return 0;
    }

    public abstract long getFilePointer() throws java.io.IOException;

    public abstract void seek(long) throws java.io.IOException;

    public final void readFully(byte[]) throws java.io.IOException
    {
        int $i0;
        byte[] r1;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void readFully(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public final void readFully(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.io.EOFException $r2;
        int i0, i1, $i2, $i3, $i4, i5;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = 0;

     label1:
        $i3 = i0 + i5;

        $i2 = i1 - i5;

        $i4 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read(byte[],int,int)>(r1, $i3, $i2);

        if $i4 >= 0 goto label2;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label2:
        i5 = i5 + $i4;

        if i5 < i1 goto label1;

        return;
    }

    public int skipBytes(int) throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        int i0, $i3;
        long $l1, $l2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        return 0;

     label1:
        $l1 = (long) i0;

        $l2 = virtualinvoke r0.<java.io.InputStream: long skip(long)>($l1);

        $i3 = (int) $l2;

        return $i3;
    }

    public final boolean readBoolean() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        int $i0;
        java.io.EOFException $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        if $i0 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        if $i0 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public final byte readByte() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        byte $b1;
        int $i0;
        java.io.EOFException $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        if $i0 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $b1 = (byte) $i0;

        return $b1;
    }

    public final int readUnsignedByte() throws java.io.IOException
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.io.EOFException $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        if $i0 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        return $i0;
    }

    public final short readShort() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.io.EOFException $r1;
        short $s6;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i2 = $i0 | $i1;

        if $i2 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i4 = $i0 << 8;

        $i3 = $i1 << 0;

        $i5 = $i4 + $i3;

        $s6 = (short) $i5;

        return $s6;
    }

    public final short readShortLE() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.io.EOFException $r1;
        short $s6;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i2 = $i0 | $i1;

        if $i2 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i4 = $i1 << 8;

        $i3 = $i0 << 0;

        $i5 = $i4 + $i3;

        $s6 = (short) $i5;

        return $s6;
    }

    public final int readUnsignedShort() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.io.EOFException $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i2 = $i0 | $i1;

        if $i2 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i4 = $i0 << 8;

        $i3 = $i1 << 0;

        $i5 = $i4 + $i3;

        return $i5;
    }

    public final int readUnsignedShortLE() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.io.EOFException $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i2 = $i0 | $i1;

        if $i2 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i4 = $i1 << 8;

        $i3 = $i0 << 0;

        $i5 = $i4 + $i3;

        return $i5;
    }

    public final char readChar() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        char $c6;
        java.io.EOFException $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i2 = $i0 | $i1;

        if $i2 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i4 = $i0 << 8;

        $i3 = $i1 << 0;

        $i5 = $i4 + $i3;

        $c6 = (char) $i5;

        return $c6;
    }

    public final char readCharLE() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        char $c6;
        java.io.EOFException $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i2 = $i0 | $i1;

        if $i2 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i4 = $i1 << 8;

        $i3 = $i0 << 0;

        $i5 = $i4 + $i3;

        $c6 = (char) $i5;

        return $c6;
    }

    public final int readInt() throws java.io.IOException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.io.EOFException $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i4 = $i0 | $i1;

        $i5 = $i4 | $i2;

        $i6 = $i5 | $i3;

        if $i6 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i8 = $i0 << 24;

        $i7 = $i1 << 16;

        $i10 = $i8 + $i7;

        $i9 = $i2 << 8;

        $i12 = $i10 + $i9;

        $i11 = $i3 << 0;

        $i13 = $i12 + $i11;

        return $i13;
    }

    public final int readIntLE() throws java.io.IOException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.io.EOFException $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        $i4 = $i0 | $i1;

        $i5 = $i4 | $i2;

        $i6 = $i5 | $i3;

        if $i6 >= 0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;

     label1:
        $i8 = $i3 << 24;

        $i7 = $i2 << 16;

        $i10 = $i8 + $i7;

        $i9 = $i1 << 8;

        $i12 = $i10 + $i9;

        $i11 = $i0 << 0;

        $i13 = $i12 + $i11;

        return $i13;
    }

    public final long readUnsignedInt() throws java.io.IOException
    {
        long l1, l3, l5, l7, $l8, $l9, $l10, $l12, $l13, $l14, $l15, $l16, $l17, $l18;
        byte $b11;
        int $i0, $i2, $i4, $i6, $i19;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.io.EOFException $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        l1 = (long) $i0;

        $i2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        l3 = (long) $i2;

        $i4 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        l5 = (long) $i4;

        $i6 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        l7 = (long) $i6;

        $l8 = l1 | l3;

        $l9 = $l8 | l5;

        $l10 = $l9 | l7;

        $b11 = $l10 cmp 0L;

        $i19 = (int) $b11;

        if $i19 >= 0 goto label1;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label1:
        $l13 = l1 << 24;

        $l12 = l3 << 16;

        $l15 = $l13 + $l12;

        $l14 = l5 << 8;

        $l17 = $l15 + $l14;

        $l16 = l7 << 0;

        $l18 = $l17 + $l16;

        return $l18;
    }

    public final long readUnsignedIntLE() throws java.io.IOException
    {
        byte[] $r1, $r2, $r3, $r4, $r5;
        long l2, l5, l8, l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18;
        short $s1, $s4, $s7, $s10, $s19, $s20, $s21, $s22;
        byte $b0, $b3, $b6, $b9;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: byte[] ruileBuf>;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void readFully(byte[])>($r1);

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: byte[] ruileBuf>;

        $b0 = $r2[0];

        $s19 = (short) $b0;

        $s1 = $s19 & 255;

        l2 = (long) $s1;

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: byte[] ruileBuf>;

        $b3 = $r3[1];

        $s20 = (short) $b3;

        $s4 = $s20 & 255;

        l5 = (long) $s4;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: byte[] ruileBuf>;

        $b6 = $r4[2];

        $s21 = (short) $b6;

        $s7 = $s21 & 255;

        l8 = (long) $s7;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: byte[] ruileBuf>;

        $b9 = $r5[3];

        $s22 = (short) $b9;

        $s10 = $s22 & 255;

        l11 = (long) $s10;

        $l13 = l11 << 24;

        $l12 = l8 << 16;

        $l15 = $l13 + $l12;

        $l14 = l5 << 8;

        $l17 = $l15 + $l14;

        $l16 = l2 << 0;

        $l18 = $l17 + $l16;

        return $l18;
    }

    public final long readLong() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        long $l1, $l2, $l4, $l5, $l6;
        int $i0, $i3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readInt()>();

        $l1 = (long) $i0;

        $l2 = $l1 << 32;

        $i3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readInt()>();

        $l4 = (long) $i3;

        $l5 = $l4 & 4294967295L;

        $l6 = $l2 + $l5;

        return $l6;
    }

    public final long readLongLE() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        long $l2, $l3, $l4, $l5, $l6;
        int $i0, $i1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readIntLE()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readIntLE()>();

        $l2 = (long) $i1;

        $l5 = $l2 << 32;

        $l3 = (long) $i0;

        $l4 = $l3 & 4294967295L;

        $l6 = $l5 + $l4;

        return $l6;
    }

    public final float readFloat() throws java.io.IOException
    {
        int $i0;
        float $f0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readInt()>();

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;
    }

    public final float readFloatLE() throws java.io.IOException
    {
        int $i0;
        float $f0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int readIntLE()>();

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;
    }

    public final double readDouble() throws java.io.IOException
    {
        long $l0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $l0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long readLong()>();

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }

    public final double readDoubleLE() throws java.io.IOException
    {
        long $l0;
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $l0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long readLongLE()>();

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }

    public final java.lang.String readLine() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r1;
        long $l1;
        char $c3;
        java.lang.StringBuffer $r3;
        int $i0, $i2, $i4, i5, $i7, $i9;
        java.lang.String $r2;
        boolean z0;

        r1 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $i7 = (int) -1;

        i5 = $i7;

        z0 = 0;

        goto label5;

     label1:
        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        i5 = $i0;

        lookupswitch($i0)
        {
            case -1: goto label2;
            case 10: goto label2;
            case 13: goto label3;
            default: goto label4;
        };

     label2:
        z0 = 1;

        goto label5;

     label3:
        z0 = 1;

        $l1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: long getFilePointer()>();

        $i2 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: int read()>();

        if $i2 == 10 goto label5;

        virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SeekableStream: void seek(long)>($l1);

        goto label5;

     label4:
        $c3 = (char) $i0;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

     label5:
        if z0 == 0 goto label1;

        $i9 = (int) -1;

        if i5 != $i9 goto label6;

        $i4 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        if $i4 != 0 goto label6;

        return null;

     label6:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public final java.lang.String readUTF() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        $r1 = staticinvoke <java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>(r0);

        return $r1;
    }

    protected void finalize() throws java.lang.Throwable
    {
        org.apache.batik.ext.awt.image.codec.util.SeekableStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SeekableStream;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        virtualinvoke r0.<java.io.InputStream: void close()>();

        return;
    }
}
