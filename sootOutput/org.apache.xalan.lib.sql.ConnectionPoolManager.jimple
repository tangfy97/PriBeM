public class org.apache.xalan.lib.sql.ConnectionPoolManager extends java.lang.Object
{
    static java.util.Hashtable m_poolTable;
    static boolean m_isInit;

    public void <init>()
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager r0;

        r0 := @this: org.apache.xalan.lib.sql.ConnectionPoolManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.xalan.lib.sql.ConnectionPoolManager: void init()>();

        return;
    }

    public synchronized void init()
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager r1;
        java.util.Hashtable $r0;
        boolean $z0;

        r1 := @this: org.apache.xalan.lib.sql.ConnectionPoolManager;

        $z0 = <org.apache.xalan.lib.sql.ConnectionPoolManager: boolean m_isInit>;

        if $z0 != 1 goto label1;

        return;

     label1:
        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.apache.xalan.lib.sql.ConnectionPoolManager: java.util.Hashtable m_poolTable> = $r0;

        <org.apache.xalan.lib.sql.ConnectionPoolManager: boolean m_isInit> = 1;

        return;
    }

    public synchronized void registerPool(java.lang.String, org.apache.xalan.lib.sql.ConnectionPool)
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager r6;
        java.lang.IllegalArgumentException $r4;
        org.apache.xalan.lib.sql.ConnectionPool r2;
        java.lang.String r0, $r5;
        java.util.Hashtable $r1, $r3;
        boolean $z0;

        r6 := @this: org.apache.xalan.lib.sql.ConnectionPoolManager;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xalan.lib.sql.ConnectionPool;

        $r1 = <org.apache.xalan.lib.sql.ConnectionPoolManager: java.util.Hashtable m_poolTable>;

        $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_POOL_EXISTS", null);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r3 = <org.apache.xalan.lib.sql.ConnectionPoolManager: java.util.Hashtable m_poolTable>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

        return;
    }

    public synchronized void removePool(java.lang.String)
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager r0;
        org.apache.xalan.lib.sql.ConnectionPool $r2;
        java.lang.String r1;
        java.util.Hashtable $r3;
        boolean $z0;

        r0 := @this: org.apache.xalan.lib.sql.ConnectionPoolManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.xalan.lib.sql.ConnectionPoolManager: org.apache.xalan.lib.sql.ConnectionPool getPool(java.lang.String)>(r1);

        if null == $r2 goto label1;

        interfaceinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPool: void setPoolEnabled(boolean)>(0);

        $z0 = interfaceinvoke $r2.<org.apache.xalan.lib.sql.ConnectionPool: boolean hasActiveConnections()>();

        if $z0 != 0 goto label1;

        $r3 = <org.apache.xalan.lib.sql.ConnectionPoolManager: java.util.Hashtable m_poolTable>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    public synchronized org.apache.xalan.lib.sql.ConnectionPool getPool(java.lang.String)
    {
        org.apache.xalan.lib.sql.ConnectionPoolManager r4;
        org.apache.xalan.lib.sql.ConnectionPool $r3;
        java.lang.Object $r2;
        java.lang.String r0;
        java.util.Hashtable $r1;

        r4 := @this: org.apache.xalan.lib.sql.ConnectionPoolManager;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.xalan.lib.sql.ConnectionPoolManager: java.util.Hashtable m_poolTable>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.xalan.lib.sql.ConnectionPool) $r2;

        return $r3;
    }

    static void <clinit>()
    {
        <org.apache.xalan.lib.sql.ConnectionPoolManager: java.util.Hashtable m_poolTable> = null;

        <org.apache.xalan.lib.sql.ConnectionPoolManager: boolean m_isInit> = 0;

        return;
    }
}
