public class org.apache.batik.gvt.flow.FlowTextPainter extends org.apache.batik.gvt.renderer.StrokingTextPainter
{
    protected static org.apache.batik.gvt.TextPainter singleton;
    public static final char SOFT_HYPHEN;
    public static final char ZERO_WIDTH_SPACE;
    public static final char ZERO_WIDTH_JOINER;
    public static final char SPACE;
    public static final java.text.AttributedCharacterIterator$Attribute WORD_LIMIT;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK;
    public static final java.text.AttributedCharacterIterator$Attribute LINE_HEIGHT;
    public static final java.text.AttributedCharacterIterator$Attribute GVT_FONT;
    protected static java.util.Set szAtts;

    public void <init>()
    {
        org.apache.batik.gvt.flow.FlowTextPainter r0;

        r0 := @this: org.apache.batik.gvt.flow.FlowTextPainter;

        specialinvoke r0.<org.apache.batik.gvt.renderer.StrokingTextPainter: void <init>()>();

        return;
    }

    public static org.apache.batik.gvt.TextPainter getInstance()
    {
        org.apache.batik.gvt.TextPainter $r0;

        $r0 = <org.apache.batik.gvt.flow.FlowTextPainter: org.apache.batik.gvt.TextPainter singleton>;

        return $r0;
    }

    public java.util.List getTextRuns(org.apache.batik.gvt.TextNode, java.text.AttributedCharacterIterator)
    {
        org.apache.batik.gvt.TextNode r0;
        java.text.AttributedCharacterIterator[] $r4;
        java.util.ArrayList $r11, $r13, $r17, r20;
        java.text.AttributedCharacterIterator$Attribute $r6;
        boolean $z0, $z1;
        java.util.Iterator $r10;
        org.apache.batik.gvt.flow.FlowTextPainter r2;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r19, r21;
        org.apache.batik.gvt.text.TextSpanLayout $r14, $r16;
        java.util.List $r1, $r5, r8, $r9;
        java.awt.font.FontRenderContext $r18;
        java.text.AttributedCharacterIterator r3;
        java.lang.Object $r7, $r12, $r15;

        r2 := @this: org.apache.batik.gvt.flow.FlowTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.TextNode;

        r3 := @parameter1: java.text.AttributedCharacterIterator;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r4 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator[] getTextChunkACIs(java.text.AttributedCharacterIterator)>(r3);

        $r5 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.List computeTextRuns(org.apache.batik.gvt.TextNode,java.text.AttributedCharacterIterator,java.text.AttributedCharacterIterator[])>(r0, r3, $r4);

        interfaceinvoke r3.<java.text.CharacterIterator: char first()>();

        $r6 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS>;

        $r7 = interfaceinvoke r3.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r6);

        r8 = (java.util.List) $r7;

        if r8 == null goto label5;

        $r10 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r20 = $r13;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = virtualinvoke r19.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label4;

     label2:
        $r15 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r15;

        $z0 = virtualinvoke r21.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: boolean isFirstRunInChunk()>();

        if $z0 == 0 goto label3;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r20 = $r17;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r17);

     label3:
        $r16 = virtualinvoke r21.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        interfaceinvoke r20.<java.util.List: boolean add(java.lang.Object)>($r16);

     label4:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $r18 = r2.<org.apache.batik.gvt.renderer.BasicTextPainter: java.awt.font.FontRenderContext fontRenderContext>;

        staticinvoke <org.apache.batik.gvt.flow.FlowTextPainter: boolean textWrap(java.text.AttributedCharacterIterator[],java.util.List,java.util.List,java.awt.font.FontRenderContext)>($r4, $r11, r8, $r18);

     label5:
        virtualinvoke r0.<org.apache.batik.gvt.TextNode: void setTextRuns(java.util.List)>($r5);

        $r9 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        return $r9;
    }

    public static boolean textWrap(java.text.AttributedCharacterIterator[], java.util.List, java.util.List, java.awt.font.FontRenderContext)
    {
        org.apache.batik.gvt.flow.WordInfo[][] r2;
        byte $b4;
        org.apache.batik.gvt.flow.WordInfo[] $r14, $r17, r34, r40;
        org.apache.batik.gvt.flow.RegionInfo r33;
        float[] r6;
        java.text.AttributedCharacterIterator$Attribute $r15;
        org.apache.batik.gvt.font.GVTGlyphVector[] r1;
        java.awt.font.FontRenderContext r13;
        org.apache.batik.gvt.flow.BlockInfo r32, r35;
        org.apache.batik.gvt.text.GlyphLayout r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16;
        java.awt.Shape $r23;
        org.apache.batik.gvt.flow.GlyphGroupInfo $r27;
        java.util.List r3, r18, r30;
        java.text.AttributedCharacterIterator r29;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, f9;
        java.text.AttributedCharacterIterator[] r0;
        org.apache.batik.gvt.flow.BlockInfo[] r5;
        org.apache.batik.gvt.font.GVTGlyphVector $r11, $r28;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, $i16, $i17, i18, i19, $i20;
        java.util.LinkedList $r42, $r44;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, d8, d9, d10;
        java.util.Iterator $r4, $r9, $r19;
        org.apache.batik.gvt.flow.WordInfo r36, r39, r41;
        java.lang.Object $r8, $r10, $r16, $r21, $r25, r37;
        org.apache.batik.gvt.flow.FlowRegions $r45;
        org.apache.batik.gvt.font.MultiGlyphVector $r43;
        org.apache.batik.gvt.flow.LineInfo r38, $r46, $r47;

        r0 := @parameter0: java.text.AttributedCharacterIterator[];

        r3 := @parameter1: java.util.List;

        r18 := @parameter2: java.util.List;

        r13 := @parameter3: java.awt.font.FontRenderContext;

        $i0 = lengthof r0;

        r1 = newarray (org.apache.batik.gvt.font.GVTGlyphVector)[$i0];

        $i1 = lengthof r0;

        r2 = newarray (org.apache.batik.gvt.flow.WordInfo[])[$i1];

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

        f9 = 0.0F;

        i12 = 0;

        $i2 = lengthof r0;

        r5 = newarray (org.apache.batik.gvt.flow.BlockInfo)[$i2];

        $i3 = lengthof r0;

        r6 = newarray (float)[$i3];

        i13 = 0;

        goto label06;

     label01:
        r29 = r0[i13];

        $r42 = new java.util.LinkedList;

        specialinvoke $r42.<java.util.LinkedList: void <init>()>();

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.util.List) $r8;

        $r9 = interfaceinvoke r30.<java.util.List: java.util.Iterator iterator()>();

        goto label03;

     label02:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.apache.batik.gvt.text.GlyphLayout) $r10;

        $r11 = virtualinvoke r31.<org.apache.batik.gvt.text.GlyphLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        interfaceinvoke $r42.<java.util.List: boolean add(java.lang.Object)>($r11);

     label03:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

        $r43 = new org.apache.batik.gvt.font.MultiGlyphVector;

        specialinvoke $r43.<org.apache.batik.gvt.font.MultiGlyphVector: void <init>(java.util.List)>($r42);

        r1[i13] = $r43;

        $r14 = staticinvoke <org.apache.batik.gvt.flow.FlowTextPainter: org.apache.batik.gvt.flow.WordInfo[] doWordAnalysis(org.apache.batik.gvt.font.GVTGlyphVector,java.text.AttributedCharacterIterator,int,java.awt.font.FontRenderContext)>($r43, r29, i12, r13);

        r2[i13] = $r14;

        interfaceinvoke r29.<java.text.CharacterIterator: char first()>();

        $r15 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH>;

        $r16 = interfaceinvoke r29.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r15);

        r32 = (org.apache.batik.gvt.flow.BlockInfo) $r16;

        virtualinvoke r32.<org.apache.batik.gvt.flow.BlockInfo: void initLineInfo(java.awt.font.FontRenderContext)>(r13);

        r5[i13] = r32;

        $f0 = virtualinvoke r32.<org.apache.batik.gvt.flow.BlockInfo: float getTopMargin()>();

        $b4 = f9 cmpl $f0;

        $i20 = (int) $b4;

        if $i20 <= 0 goto label04;

        r6[i13] = f9;

        goto label05;

     label04:
        $f1 = virtualinvoke r32.<org.apache.batik.gvt.flow.BlockInfo: float getTopMargin()>();

        r6[i13] = $f1;

     label05:
        f9 = virtualinvoke r32.<org.apache.batik.gvt.flow.BlockInfo: float getBottomMargin()>();

        $r17 = r2[i13];

        $i5 = lengthof $r17;

        i12 = i12 + $i5;

        i13 = i13 + 1;

     label06:
        $z14 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z14 != 0 goto label01;

        $r19 = interfaceinvoke r18.<java.util.List: java.util.Iterator iterator()>();

        i14 = 0;

        i15 = 0;

        $r44 = new java.util.LinkedList;

        specialinvoke $r44.<java.util.LinkedList: void <init>()>();

        goto label27;

     label07:
        $r21 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r33 = (org.apache.batik.gvt.flow.RegionInfo) $r21;

        $r45 = new org.apache.batik.gvt.flow.FlowRegions;

        $r23 = virtualinvoke r33.<org.apache.batik.gvt.flow.RegionInfo: java.awt.Shape getShape()>();

        specialinvoke $r45.<org.apache.batik.gvt.flow.FlowRegions: void <init>(java.awt.Shape)>($r23);

        goto label25;

     label08:
        r34 = r2[i15];

        r35 = r5[i15];

        r36 = r34[i14];

        r37 = virtualinvoke r36.<org.apache.batik.gvt.flow.WordInfo: java.lang.Object getFlowLine()>();

        $f2 = virtualinvoke r36.<org.apache.batik.gvt.flow.WordInfo: float getLineHeight()>();

        $f3 = virtualinvoke r35.<org.apache.batik.gvt.flow.BlockInfo: float getLineHeight()>();

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>($f2, $f3);

        d7 = (double) $f4;

        $r46 = new org.apache.batik.gvt.flow.LineInfo;

        specialinvoke $r46.<org.apache.batik.gvt.flow.LineInfo: void <init>(org.apache.batik.gvt.flow.FlowRegions,org.apache.batik.gvt.flow.BlockInfo,boolean)>($r45, r35, 1);

        r38 = $r46;

        $d0 = virtualinvoke $r46.<org.apache.batik.gvt.flow.LineInfo: double getCurrentY()>();

        $f5 = r6[i15];

        $d1 = (double) $f5;

        d8 = $d0 + $d1;

        r6[i15] = 0.0F;

        $z2 = virtualinvoke $r46.<org.apache.batik.gvt.flow.LineInfo: boolean gotoY(double)>(d8);

        if $z2 == 0 goto label10;

        goto label26;

     label09:
        $d2 = virtualinvoke $r46.<org.apache.batik.gvt.flow.LineInfo: double getCurrentY()>();

        $d3 = d7 * 0.1;

        d9 = $d2 + $d3;

        $z4 = virtualinvoke $r46.<org.apache.batik.gvt.flow.LineInfo: boolean gotoY(double)>(d9);

        if $z4 == 0 goto label10;

        goto label11;

     label10:
        $z3 = virtualinvoke $r46.<org.apache.batik.gvt.flow.LineInfo: boolean addWord(org.apache.batik.gvt.flow.WordInfo)>(r36);

        if $z3 == 0 goto label09;

     label11:
        $z5 = virtualinvoke $r45.<org.apache.batik.gvt.flow.FlowRegions: boolean done()>();

        if $z5 == 0 goto label12;

        goto label26;

     label12:
        i14 = i14 + 1;

        goto label20;

     label13:
        r39 = r34[i14];

        $r25 = virtualinvoke r39.<org.apache.batik.gvt.flow.WordInfo: java.lang.Object getFlowLine()>();

        if $r25 != r37 goto label14;

        $z13 = virtualinvoke r38.<org.apache.batik.gvt.flow.LineInfo: boolean addWord(org.apache.batik.gvt.flow.WordInfo)>(r39);

        if $z13 == 0 goto label14;

        goto label19;

     label14:
        virtualinvoke r38.<org.apache.batik.gvt.flow.LineInfo: void layout()>();

        interfaceinvoke $r44.<java.util.List: boolean add(java.lang.Object)>(r38);

        r38 = null;

        r37 = virtualinvoke r39.<org.apache.batik.gvt.flow.WordInfo: java.lang.Object getFlowLine()>();

        $f6 = virtualinvoke r39.<org.apache.batik.gvt.flow.WordInfo: float getLineHeight()>();

        $f7 = virtualinvoke r35.<org.apache.batik.gvt.flow.BlockInfo: float getLineHeight()>();

        $f8 = staticinvoke <java.lang.Math: float max(float,float)>($f6, $f7);

        $d6 = (double) $f8;

        d7 = $d6;

        $z6 = virtualinvoke $r45.<org.apache.batik.gvt.flow.FlowRegions: boolean newLine(double)>($d6);

        if $z6 != 0 goto label15;

        goto label21;

     label15:
        $r47 = new org.apache.batik.gvt.flow.LineInfo;

        specialinvoke $r47.<org.apache.batik.gvt.flow.LineInfo: void <init>(org.apache.batik.gvt.flow.FlowRegions,org.apache.batik.gvt.flow.BlockInfo,boolean)>($r45, r35, 0);

        r38 = $r47;

        goto label17;

     label16:
        $d4 = virtualinvoke $r47.<org.apache.batik.gvt.flow.LineInfo: double getCurrentY()>();

        $d5 = $d6 * 0.1;

        d10 = $d4 + $d5;

        $z8 = virtualinvoke $r47.<org.apache.batik.gvt.flow.LineInfo: boolean gotoY(double)>(d10);

        if $z8 == 0 goto label17;

        goto label18;

     label17:
        $z7 = virtualinvoke $r47.<org.apache.batik.gvt.flow.LineInfo: boolean addWord(org.apache.batik.gvt.flow.WordInfo)>(r39);

        if $z7 == 0 goto label16;

     label18:
        $z9 = virtualinvoke $r45.<org.apache.batik.gvt.flow.FlowRegions: boolean done()>();

        if $z9 == 0 goto label19;

        goto label21;

     label19:
        i14 = i14 + 1;

     label20:
        $i16 = lengthof r34;

        if i14 < $i16 goto label13;

     label21:
        if r38 == null goto label22;

        virtualinvoke r38.<org.apache.batik.gvt.flow.LineInfo: void setParaEnd(boolean)>(1);

        virtualinvoke r38.<org.apache.batik.gvt.flow.LineInfo: void layout()>();

     label22:
        $z10 = virtualinvoke $r45.<org.apache.batik.gvt.flow.FlowRegions: boolean done()>();

        if $z10 == 0 goto label23;

        goto label26;

     label23:
        i15 = i15 + 1;

        i14 = 0;

        $z11 = virtualinvoke r35.<org.apache.batik.gvt.flow.BlockInfo: boolean isFlowRegionBreak()>();

        if $z11 == 0 goto label24;

        goto label26;

     label24:
        $z12 = virtualinvoke $r45.<org.apache.batik.gvt.flow.FlowRegions: boolean newLine(double)>(d7);

        if $z12 != 0 goto label25;

        goto label26;

     label25:
        $i6 = lengthof r2;

        if i15 < $i6 goto label08;

     label26:
        $i17 = lengthof r2;

        if i15 != $i17 goto label27;

        goto label28;

     label27:
        $z1 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label07;

     label28:
        $i7 = lengthof r2;

        if i15 >= $i7 goto label29;

        $z15 = 1;

        goto label30;

     label29:
        $z15 = 0;

     label30:
        z16 = $z15;

        goto label38;

     label31:
        r40 = r2[i15];

        goto label37;

     label32:
        r41 = r40[i14];

        $i10 = virtualinvoke r41.<org.apache.batik.gvt.flow.WordInfo: int getNumGlyphGroups()>();

        i18 = 0;

        goto label36;

     label33:
        $r27 = virtualinvoke r41.<org.apache.batik.gvt.flow.WordInfo: org.apache.batik.gvt.flow.GlyphGroupInfo getGlyphGroup(int)>(i18);

        $r28 = virtualinvoke $r27.<org.apache.batik.gvt.flow.GlyphGroupInfo: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        $i11 = virtualinvoke $r27.<org.apache.batik.gvt.flow.GlyphGroupInfo: int getEnd()>();

        i19 = virtualinvoke $r27.<org.apache.batik.gvt.flow.GlyphGroupInfo: int getStart()>();

        goto label35;

     label34:
        interfaceinvoke $r28.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphVisible(int,boolean)>(i19, 0);

        i19 = i19 + 1;

     label35:
        if i19 <= $i11 goto label34;

        i18 = i18 + 1;

     label36:
        if i18 < $i10 goto label33;

        i14 = i14 + 1;

     label37:
        $i9 = lengthof r40;

        if i14 < $i9 goto label32;

        i15 = i15 + 1;

        i14 = 0;

     label38:
        $i8 = lengthof r2;

        if i15 < $i8 goto label31;

        return z16;
    }

    static int[] allocWordMap(int[], int)
    {
        int[] r0, $r1;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, $i8;

        r0 := @parameter0: int[];

        i4 := @parameter1: int;

        if r0 == null goto label2;

        $i0 = lengthof r0;

        if i4 > $i0 goto label1;

        return r0;

     label1:
        $i1 = lengthof r0;

        $i2 = $i1 * 2;

        if i4 >= $i2 goto label2;

        $i3 = lengthof r0;

        i4 = $i3 * 2;

     label2:
        $r1 = newarray (int)[i4];

        if r0 == null goto label3;

        $i5 = lengthof r0;

        goto label4;

     label3:
        $i5 = 0;

     label4:
        i6 = $i5;

        if i4 >= $i5 goto label5;

        i6 = i4;

     label5:
        if i6 == 0 goto label6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r1, 0, i6);

     label6:
        $i8 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r1, i6, i4, $i8);

        return $r1;
    }

    static org.apache.batik.gvt.flow.WordInfo[] doWordAnalysis(org.apache.batik.gvt.font.GVTGlyphVector, java.text.AttributedCharacterIterator, int, java.awt.font.FontRenderContext)
    {
        java.lang.Integer r43, r44, r50;
        float[] $r16, $r37, $r38;
        java.text.AttributedCharacterIterator$Attribute $r3, $r5, $r10, $r12, $r17, $r22, $r24, $r28;
        boolean[] $r39, $r40, $r41;
        java.awt.font.FontRenderContext r20;
        int[] r1, $r32, r42, r53, r55, r56, r58, r59;
        java.text.AttributedCharacterIterator r2;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i57, i58, i59, $i61, $i62, i63, i64, i65, i66, $i67, $i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, $i78, i79, $i81, $i83, $i84, $i85, $i86, $i87, $i88;
        org.apache.batik.gvt.font.GVTLineMetrics $r21, $r27, $r30;
        java.lang.Object $r4, $r6, $r11, $r13, $r18, $r19, $r23, $r25, $r29;
        java.lang.Float r14, r52;
        org.apache.batik.gvt.flow.WordInfo[] r45, r46;
        java.util.Set $r15, $r26;
        int[][] r54;
        org.apache.batik.gvt.flow.GlyphGroupInfo[] r57;
        boolean $z0, $z1, $z2;
        org.apache.batik.gvt.flow.GlyphGroupInfo $r61, $r62, $r63;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12;
        org.apache.batik.gvt.font.GVTFont r48;
        org.apache.batik.gvt.font.GVTGlyphVector r0;
        org.apache.batik.gvt.flow.WordInfo $r7, $r9, $r31, $r35, r47, r49, r51, $r60;
        char $c13, $c16, $c20, c56, c60;

        r0 := @parameter0: org.apache.batik.gvt.font.GVTGlyphVector;

        r2 := @parameter1: java.text.AttributedCharacterIterator;

        i3 := @parameter2: int;

        r20 := @parameter3: java.awt.font.FontRenderContext;

        $i0 = interfaceinvoke r0.<org.apache.batik.gvt.font.GVTGlyphVector: int getNumGlyphs()>();

        r1 = newarray (int)[$i0];

        r42 = staticinvoke <org.apache.batik.gvt.flow.FlowTextPainter: int[] allocWordMap(int[],int)>(null, 10);

        i43 = 0;

        i44 = interfaceinvoke r2.<java.text.CharacterIterator: int getBeginIndex()>();

        i45 = 0;

        goto label08;

     label01:
        $i1 = interfaceinvoke r0.<org.apache.batik.gvt.font.GVTGlyphVector: int getCharacterCount(int,int)>(i45, i45);

        interfaceinvoke r2.<java.text.CharacterIterator: char setIndex(int)>(i44);

        $r3 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute WORD_LIMIT>;

        $r4 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r3);

        r43 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke r43.<java.lang.Integer: int intValue()>();

        i46 = $i2 - i3;

        if i46 <= i43 goto label02;

        i43 = i46;

        $i6 = i46 + 1;

        r42 = staticinvoke <org.apache.batik.gvt.flow.FlowTextPainter: int[] allocWordMap(int[],int)>(r42, $i6);

     label02:
        i44 = i44 + 1;

        i47 = 1;

        goto label07;

     label03:
        interfaceinvoke r2.<java.text.CharacterIterator: char setIndex(int)>(i44);

        $r5 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute WORD_LIMIT>;

        $r6 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r5);

        r44 = (java.lang.Integer) $r6;

        $i4 = virtualinvoke r44.<java.lang.Integer: int intValue()>();

        i48 = $i4 - i3;

        if i48 <= i43 goto label04;

        i43 = i48;

        $i5 = i48 + 1;

        r42 = staticinvoke <org.apache.batik.gvt.flow.FlowTextPainter: int[] allocWordMap(int[],int)>(r42, $i5);

     label04:
        if i48 >= i46 goto label05;

        r42[i46] = i48;

        i46 = i48;

        goto label06;

     label05:
        if i48 <= i46 goto label06;

        r42[i48] = i46;

     label06:
        i44 = i44 + 1;

        i47 = i47 + 1;

     label07:
        if i47 < $i1 goto label03;

        r1[i45] = i46;

        i45 = i45 + 1;

     label08:
        if i45 < $i0 goto label01;

        i49 = 0;

        $i7 = i43 + 1;

        r45 = newarray (org.apache.batik.gvt.flow.WordInfo)[$i7];

        i50 = 0;

        goto label14;

     label09:
        i51 = r42[i50];

        $i81 = (int) -1;

        if i51 != $i81 goto label10;

        $r60 = new org.apache.batik.gvt.flow.WordInfo;

        $i8 = i49;

        i49 = i49 + 1;

        specialinvoke $r60.<org.apache.batik.gvt.flow.WordInfo: void <init>(int)>($i8);

        r45[i50] = $r60;

        goto label13;

     label10:
        i52 = i51;

        i53 = r42[i50];

        goto label12;

     label11:
        i52 = i53;

        i53 = r42[i53];

     label12:
        $i83 = (int) -1;

        if i53 != $i83 goto label11;

        r42[i50] = i52;

        $r7 = r45[i52];

        r45[i50] = $r7;

     label13:
        i50 = i50 + 1;

     label14:
        if i50 <= i43 goto label09;

        r46 = newarray (org.apache.batik.gvt.flow.WordInfo)[i49];

        i54 = 0;

        goto label16;

     label15:
        r47 = r45[i54];

        $i9 = virtualinvoke r47.<org.apache.batik.gvt.flow.WordInfo: int getIndex()>();

        $r9 = r45[i54];

        r46[$i9] = $r9;

        i54 = i54 + 1;

     label16:
        if i54 <= i43 goto label15;

        $i10 = interfaceinvoke r2.<java.text.CharacterIterator: int getBeginIndex()>();

        i55 = $i10;

        $i11 = interfaceinvoke r2.<java.text.CharacterIterator: int getEndIndex()>();

        c56 = interfaceinvoke r2.<java.text.CharacterIterator: char setIndex(int)>($i10);

        i57 = $i10;

        $r10 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        $r11 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r10);

        r48 = (org.apache.batik.gvt.font.GVTFont) $r11;

        f12 = 1.0F;

        $r12 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute LINE_HEIGHT>;

        $r13 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r12);

        r14 = (java.lang.Float) $r13;

        if r14 == null goto label17;

        f12 = virtualinvoke r14.<java.lang.Float: float floatValue()>();

     label17:
        $r15 = <org.apache.batik.gvt.flow.FlowTextPainter: java.util.Set szAtts>;

        i58 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: int getRunLimit(java.util.Set)>($r15);

        r49 = null;

        $r37 = newarray (float)[$i0];

        $r38 = newarray (float)[$i0];

        $r39 = newarray (boolean)[$i0];

        $r40 = newarray (boolean)[$i0];

        $r41 = newarray (boolean)[$i0];

        $i12 = $i0 + 1;

        $r16 = interfaceinvoke r0.<org.apache.batik.gvt.font.GVTGlyphVector: float[] getGlyphPositions(int,int,float[])>(0, $i12, null);

        i59 = 0;

        goto label28;

     label18:
        c60 = c56;

        $c13 = interfaceinvoke r2.<java.text.CharacterIterator: char setIndex(int)>(i55);

        c56 = $c13;

        $r17 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute WORD_LIMIT>;

        $r18 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r17);

        r50 = (java.lang.Integer) $r18;

        $i14 = virtualinvoke r50.<java.lang.Integer: int intValue()>();

        $i15 = $i14 - i3;

        r51 = r45[$i15];

        $r19 = virtualinvoke r51.<org.apache.batik.gvt.flow.WordInfo: java.lang.Object getFlowLine()>();

        if $r19 != null goto label19;

        $r28 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK>;

        $r29 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r28);

        virtualinvoke r51.<org.apache.batik.gvt.flow.WordInfo: void setFlowLine(java.lang.Object)>($r29);

     label19:
        if r49 != null goto label20;

        r49 = r51;

        goto label21;

     label20:
        if r49 == r51 goto label21;

        $r27 = interfaceinvoke r48.<org.apache.batik.gvt.font.GVTFont: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)>(r2, i57, i55, r20);

        virtualinvoke r49.<org.apache.batik.gvt.flow.WordInfo: void addLineMetrics(org.apache.batik.gvt.font.GVTFont,org.apache.batik.gvt.font.GVTLineMetrics)>(r48, $r27);

        virtualinvoke r49.<org.apache.batik.gvt.flow.WordInfo: void addLineHeight(float)>(f12);

        i57 = i55;

        r49 = r51;

     label21:
        $i61 = interfaceinvoke r0.<org.apache.batik.gvt.font.GVTGlyphVector: int getCharacterCount(int,int)>(i59, i59);

        if $i61 != 1 goto label26;

        $i84 = (int) $c13;

        lookupswitch($i84)
        {
            case 32: goto label25;
            case 173: goto label22;
            case 8203: goto label24;
            case 8205: goto label23;
            default: goto label26;
        };

     label22:
        $r39[i59] = 1;

        $c16 = interfaceinvoke r2.<java.text.CharacterIterator: char next()>();

        interfaceinvoke r2.<java.text.CharacterIterator: char previous()>();

        $i85 = (int) c60;

        $i86 = (int) $c16;

        $f0 = interfaceinvoke r48.<org.apache.batik.gvt.font.GVTFont: float getHKern(int,int)>($i85, $i86);

        $i17 = 2 * i59;

        $i18 = $i17 + 2;

        $f2 = $r16[$i18];

        $i19 = 2 * i59;

        $f1 = $r16[$i19];

        $f3 = $f2 - $f1;

        $f4 = $f3 + $f0;

        $f5 = neg $f4;

        $r38[i59] = $f5;

        goto label26;

     label23:
        $r40[i59] = 1;

        goto label26;

     label24:
        $r40[i59] = 1;

        goto label26;

     label25:
        $r41[i59] = 1;

        $c20 = interfaceinvoke r2.<java.text.CharacterIterator: char next()>();

        interfaceinvoke r2.<java.text.CharacterIterator: char previous()>();

        $i87 = (int) c60;

        $i88 = (int) $c20;

        $f6 = interfaceinvoke r48.<org.apache.batik.gvt.font.GVTFont: float getHKern(int,int)>($i87, $i88);

        $i21 = 2 * i59;

        $i22 = $i21 + 2;

        $f8 = $r16[$i22];

        $i23 = 2 * i59;

        $f7 = $r16[$i23];

        $f9 = $f8 - $f7;

        $f10 = $f9 + $f6;

        $f11 = neg $f10;

        $r37[i59] = $f11;

     label26:
        $i62 = i55 + $i61;

        i55 = $i62;

        if $i62 <= i58 goto label27;

        if $i62 >= $i11 goto label27;

        $r21 = interfaceinvoke r48.<org.apache.batik.gvt.font.GVTFont: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)>(r2, i57, i58, r20);

        virtualinvoke r49.<org.apache.batik.gvt.flow.WordInfo: void addLineMetrics(org.apache.batik.gvt.font.GVTFont,org.apache.batik.gvt.font.GVTLineMetrics)>(r48, $r21);

        virtualinvoke r49.<org.apache.batik.gvt.flow.WordInfo: void addLineHeight(float)>(f12);

        r49 = null;

        i57 = $i62;

        interfaceinvoke r2.<java.text.CharacterIterator: char setIndex(int)>($i62);

        $r22 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        $r23 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r22);

        r48 = (org.apache.batik.gvt.font.GVTFont) $r23;

        $r24 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute LINE_HEIGHT>;

        $r25 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r24);

        r52 = (java.lang.Float) $r25;

        f12 = virtualinvoke r52.<java.lang.Float: float floatValue()>();

        $r26 = <org.apache.batik.gvt.flow.FlowTextPainter: java.util.Set szAtts>;

        i58 = interfaceinvoke r2.<java.text.AttributedCharacterIterator: int getRunLimit(java.util.Set)>($r26);

     label27:
        i59 = i59 + 1;

     label28:
        if i59 < $i0 goto label18;

        $r30 = interfaceinvoke r48.<org.apache.batik.gvt.font.GVTFont: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)>(r2, i57, i58, r20);

        virtualinvoke r49.<org.apache.batik.gvt.flow.WordInfo: void addLineMetrics(org.apache.batik.gvt.font.GVTFont,org.apache.batik.gvt.font.GVTLineMetrics)>(r48, $r30);

        virtualinvoke r49.<org.apache.batik.gvt.flow.WordInfo: void addLineHeight(float)>(f12);

        r53 = newarray (int)[i49];

        i63 = 0;

        goto label30;

     label29:
        i64 = r1[i63];

        $r31 = r45[i64];

        $i24 = virtualinvoke $r31.<org.apache.batik.gvt.flow.WordInfo: int getIndex()>();

        r1[i63] = $i24;

        $i25 = r53[$i24];

        $i26 = $i25 + 1;

        r53[$i24] = $i26;

        i63 = i63 + 1;

     label30:
        if i63 < $i0 goto label29;

        r54 = newarray (int[])[i49];

        r55 = newarray (int)[i49];

        i65 = 0;

        goto label35;

     label31:
        i66 = r1[i65];

        r56 = r54[i66];

        if r56 != null goto label32;

        $i34 = r53[i66];

        $r32 = newarray (int)[$i34];

        r54[i66] = $r32;

        r56 = $r32;

        r53[i66] = 0;

     label32:
        $i35 = r53[i66];

        r56[$i35] = i65;

        if $i35 != 0 goto label33;

        $i32 = r55[i66];

        $i33 = $i32 + 1;

        r55[i66] = $i33;

        goto label34;

     label33:
        $i27 = $i35 - 1;

        $i29 = r56[$i27];

        $i28 = i65 - 1;

        if $i29 == $i28 goto label34;

        $i30 = r55[i66];

        $i31 = $i30 + 1;

        r55[i66] = $i31;

     label34:
        $i67 = r53[i66];

        $i68 = $i67 + 1;

        r53[i66] = $i68;

        i65 = i65 + 1;

     label35:
        if i65 < $i0 goto label31;

        i69 = 0;

        goto label42;

     label36:
        i70 = r55[i69];

        r57 = newarray (org.apache.batik.gvt.flow.GlyphGroupInfo)[i70];

        if i70 != 1 goto label37;

        r58 = r54[i69];

        i71 = r58[0];

        $i41 = lengthof r58;

        $i42 = $i41 - 1;

        i72 = r58[$i42];

        $r61 = new org.apache.batik.gvt.flow.GlyphGroupInfo;

        $z2 = $r39[i72];

        specialinvoke $r61.<org.apache.batik.gvt.flow.GlyphGroupInfo: void <init>(org.apache.batik.gvt.font.GVTGlyphVector,int,int,boolean[],boolean,float[],float[],float[],boolean[])>(r0, i71, i72, $r40, $z2, $r16, $r38, $r37, $r41);

        r57[0] = $r61;

        goto label41;

     label37:
        i73 = 0;

        r59 = r54[i69];

        i74 = r59[0];

        i75 = i74;

        i76 = 1;

        goto label40;

     label38:
        $i37 = i74 + 1;

        $i36 = r59[i76];

        if $i37 == $i36 goto label39;

        $i38 = i76 - 1;

        i77 = r59[$i38];

        $r62 = new org.apache.batik.gvt.flow.GlyphGroupInfo;

        $z0 = $r39[i77];

        specialinvoke $r62.<org.apache.batik.gvt.flow.GlyphGroupInfo: void <init>(org.apache.batik.gvt.font.GVTGlyphVector,int,int,boolean[],boolean,float[],float[],float[],boolean[])>(r0, i75, i77, $r40, $z0, $r16, $r38, $r37, $r41);

        r57[i73] = $r62;

        i75 = r59[i76];

        i73 = i73 + 1;

     label39:
        i74 = r59[i76];

        i76 = i76 + 1;

     label40:
        $i78 = lengthof r59;

        if i76 < $i78 goto label38;

        $i39 = lengthof r59;

        $i40 = $i39 - 1;

        i79 = r59[$i40];

        $r63 = new org.apache.batik.gvt.flow.GlyphGroupInfo;

        $z1 = $r39[i79];

        specialinvoke $r63.<org.apache.batik.gvt.flow.GlyphGroupInfo: void <init>(org.apache.batik.gvt.font.GVTGlyphVector,int,int,boolean[],boolean,float[],float[],float[],boolean[])>(r0, i75, i79, $r40, $z1, $r16, $r38, $r37, $r41);

        r57[i73] = $r63;

     label41:
        $r35 = r46[i69];

        virtualinvoke $r35.<org.apache.batik.gvt.flow.WordInfo: void setGlyphGroups(org.apache.batik.gvt.flow.GlyphGroupInfo[])>(r57);

        i69 = i69 + 1;

     label42:
        if i69 < i49 goto label36;

        return r46;
    }

    static void <clinit>()
    {
        java.awt.font.TextAttribute $r7;
        java.util.Set $r8, $r10, $r12;
        org.apache.batik.gvt.flow.FlowTextPainter $r0;
        java.util.HashSet $r6;
        java.text.AttributedCharacterIterator$Attribute $r1, $r9, $r11;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r2, $r3, $r4, $r5;

        <org.apache.batik.gvt.flow.FlowTextPainter: char SPACE> = 32;

        <org.apache.batik.gvt.flow.FlowTextPainter: char ZERO_WIDTH_JOINER> = 8205;

        <org.apache.batik.gvt.flow.FlowTextPainter: char ZERO_WIDTH_SPACE> = 8203;

        <org.apache.batik.gvt.flow.FlowTextPainter: char SOFT_HYPHEN> = 173;

        $r0 = new org.apache.batik.gvt.flow.FlowTextPainter;

        specialinvoke $r0.<org.apache.batik.gvt.flow.FlowTextPainter: void <init>()>();

        <org.apache.batik.gvt.flow.FlowTextPainter: org.apache.batik.gvt.TextPainter singleton> = $r0;

        $r1 = <org.apache.batik.gvt.flow.TextLineBreaks: java.text.AttributedCharacterIterator$Attribute WORD_LIMIT>;

        <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute WORD_LIMIT> = $r1;

        $r2 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_REGIONS>;

        <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS> = $r2;

        $r3 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_LINE_BREAK>;

        <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK> = $r3;

        $r4 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LINE_HEIGHT>;

        <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute LINE_HEIGHT> = $r4;

        $r5 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute GVT_FONT>;

        <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        <org.apache.batik.gvt.flow.FlowTextPainter: java.util.Set szAtts> = $r6;

        $r8 = <org.apache.batik.gvt.flow.FlowTextPainter: java.util.Set szAtts>;

        $r7 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r10 = <org.apache.batik.gvt.flow.FlowTextPainter: java.util.Set szAtts>;

        $r9 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r9);

        $r12 = <org.apache.batik.gvt.flow.FlowTextPainter: java.util.Set szAtts>;

        $r11 = <org.apache.batik.gvt.flow.FlowTextPainter: java.text.AttributedCharacterIterator$Attribute LINE_HEIGHT>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r11);

        return;
    }
}
