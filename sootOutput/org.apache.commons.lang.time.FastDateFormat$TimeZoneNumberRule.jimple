class org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule extends java.lang.Object implements org.apache.commons.lang.time.FastDateFormat$Rule
{
    static final org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_COLON;
    static final org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_NO_COLON;
    final boolean mColon;

    void <init>(boolean)
    {
        org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule r0;
        boolean z0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: boolean mColon> = z0;

        return;
    }

    public int estimateLength()
    {
        org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule r0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule;

        return 5;
    }

    public void appendTo(java.lang.StringBuffer, java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.StringBuffer r1;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9, $i10, $i11, $i13, $i14, $i16, $i17, i18, $i20;
        org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule r2;
        boolean $z0;
        char $c4, $c7, $c12, $c15;

        r2 := @this: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule;

        r1 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.util.Calendar;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(15);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(16);

        i18 = $i0 + $i1;

        if i18 >= 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        i18 = neg i18;

        goto label2;

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

     label2:
        $i17 = i18 / 3600000;

        $i2 = $i17 / 10;

        $i3 = $i2 + 48;

        $c4 = (char) $i3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        $i5 = $i17 % 10;

        $i6 = $i5 + 48;

        $c7 = (char) $i6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        $z0 = r2.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: boolean mColon>;

        if $z0 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

     label3:
        $i20 = (int) 60000;

        $i9 = i18 / $i20;

        $i8 = 60 * $i17;

        $i16 = $i9 - $i8;

        $i10 = $i16 / 10;

        $i11 = $i10 + 48;

        $c12 = (char) $i11;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c12);

        $i13 = $i16 % 10;

        $i14 = $i13 + 48;

        $c15 = (char) $i14;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c15);

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule $r0, $r1;

        $r0 = new org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule;

        specialinvoke $r0.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: void <init>(boolean)>(1);

        <org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_COLON> = $r0;

        $r1 = new org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule;

        specialinvoke $r1.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: void <init>(boolean)>(0);

        <org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_NO_COLON> = $r1;

        return;
    }
}
