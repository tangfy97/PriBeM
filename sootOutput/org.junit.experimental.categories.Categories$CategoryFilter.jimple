public class org.junit.experimental.categories.Categories$CategoryFilter extends org.junit.runner.manipulation.Filter
{
    private final java.lang.Class fIncluded;
    private final java.lang.Class fExcluded;

    public static org.junit.experimental.categories.Categories$CategoryFilter include(java.lang.Class)
    {
        org.junit.experimental.categories.Categories$CategoryFilter $r0;
        java.lang.Class r1;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.junit.experimental.categories.Categories$CategoryFilter;

        specialinvoke $r0.<org.junit.experimental.categories.Categories$CategoryFilter: void <init>(java.lang.Class,java.lang.Class)>(r1, null);

        return $r0;
    }

    public void <init>(java.lang.Class, java.lang.Class)
    {
        org.junit.experimental.categories.Categories$CategoryFilter r0;
        java.lang.Class r1, r2;

        r0 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<org.junit.runner.manipulation.Filter: void <init>()>();

        r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class fIncluded> = r1;

        r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class fExcluded> = r2;

        return;
    }

    public java.lang.String describe()
    {
        org.junit.experimental.categories.Categories$CategoryFilter r2;
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.Class $r3;
        java.lang.String $r5;

        r2 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("category ");

        $r3 = r2.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class fIncluded>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public boolean shouldRun(org.junit.runner.Description)
    {
        java.util.Iterator $r3;
        org.junit.experimental.categories.Categories$CategoryFilter r0;
        org.junit.runner.Description r1, r5;
        java.util.ArrayList $r2;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $z0 = specialinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean hasCorrectCategoryAnnotation(org.junit.runner.Description)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r1.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.junit.runner.Description) $r4;

        $z2 = virtualinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean shouldRun(org.junit.runner.Description)>(r5);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    private boolean hasCorrectCategoryAnnotation(org.junit.runner.Description)
    {
        org.junit.experimental.categories.Categories$CategoryFilter r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r3, $r4;
        org.junit.runner.Description r1;
        java.util.List $r2;
        java.lang.Object $r5, $r8;
        java.lang.Class $r6, $r7, $r9, $r10, $r11, r12, r13;

        r0 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $r2 = specialinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.List categories(org.junit.runner.Description)>(r1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        $r11 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class fIncluded>;

        if $r11 != null goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        return $z5;

     label03:
        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.Class) $r8;

        $r9 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class fExcluded>;

        if $r9 == null goto label05;

        $r10 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class fExcluded>;

        $z4 = virtualinvoke $r10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r12);

        if $z4 == 0 goto label05;

        return 0;

     label05:
        goto label04;

     label06:
        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.Class) $r5;

        $r6 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class fIncluded>;

        if $r6 == null goto label08;

        $r7 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class fIncluded>;

        $z3 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r13);

        if $z3 == 0 goto label09;

     label08:
        return 1;

     label09:
        goto label07;

     label10:
        return 0;
    }

    private java.util.List categories(org.junit.runner.Description)
    {
        org.junit.experimental.categories.Categories$CategoryFilter r1;
        java.lang.Class[] $r3, $r6;
        org.junit.runner.Description r2, $r5;
        java.util.ArrayList $r0;
        java.util.List $r4, $r7;

        r1 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        r2 := @parameter0: org.junit.runner.Description;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = specialinvoke r1.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class[] directCategories(org.junit.runner.Description)>(r2);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        $r5 = specialinvoke r1.<org.junit.experimental.categories.Categories$CategoryFilter: org.junit.runner.Description parentDescription(org.junit.runner.Description)>(r2);

        $r6 = specialinvoke r1.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class[] directCategories(org.junit.runner.Description)>($r5);

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        virtualinvoke $r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r7);

        return $r0;
    }

    private org.junit.runner.Description parentDescription(org.junit.runner.Description)
    {
        org.junit.experimental.categories.Categories$CategoryFilter r3;
        org.junit.runner.Description r0, $r2;
        java.lang.Class $r1;

        r3 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        r0 := @parameter0: org.junit.runner.Description;

        $r1 = virtualinvoke r0.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createSuiteDescription(java.lang.Class)>($r1);

        return $r2;
    }

    private java.lang.Class[] directCategories(org.junit.runner.Description)
    {
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class[] $r3, $r4, $r5;
        org.junit.experimental.categories.Categories$CategoryFilter r6;
        org.junit.runner.Description r0;
        org.junit.experimental.categories.Category r2;

        r6 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        r0 := @parameter0: org.junit.runner.Description;

        if r0 != null goto label1;

        $r5 = newarray (java.lang.Class)[0];

        return $r5;

     label1:
        $r1 = virtualinvoke r0.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/categories/Category;");

        r2 = (org.junit.experimental.categories.Category) $r1;

        if r2 != null goto label2;

        $r4 = newarray (java.lang.Class)[0];

        return $r4;

     label2:
        $r3 = interfaceinvoke r2.<org.junit.experimental.categories.Category: java.lang.Class[] value()>();

        return $r3;
    }
}
