public final class org.waveprotocol.wave.model.document.operation.NindoAutomaton extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints;
    private final org.waveprotocol.wave.model.document.indexed.IndexedDocument doc;
    private int effectivePos;
    private int resultingLength;
    private final java.util.ArrayList stack;
    private final java.util.Set openAnnotationKeys;
    private int resultingPos;
    private static final int MAX_DOC_LENGTH;
    static final boolean $assertionsDisabled;

    private static boolean isXmlNameStartChar(char)
    {
        boolean $z0, $z1, $z2, $z3;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i28, $i29, $i30, $i32, $i34, $i35, $i36, $i38, $i39, $i40;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 58 goto label17;

        $i2 = (int) c0;

        if 65 > $i2 goto label01;

        $i3 = (int) c0;

        if $i3 <= 90 goto label17;

     label01:
        $i4 = (int) c0;

        if $i4 != 95 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        $i5 = (int) c0;

        if 97 > $i5 goto label04;

        $i6 = (int) c0;

        if $i6 > 122 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        $z2 = $z0 | $z1;

        if $z2 != 0 goto label17;

        $i7 = (int) c0;

        if 192 > $i7 goto label06;

        $i8 = (int) c0;

        if $i8 <= 214 goto label17;

     label06:
        $i9 = (int) c0;

        if 216 > $i9 goto label07;

        $i10 = (int) c0;

        if $i10 <= 246 goto label17;

     label07:
        $i11 = (int) c0;

        if 248 > $i11 goto label08;

        $i12 = (int) c0;

        if $i12 <= 767 goto label17;

     label08:
        $i13 = (int) c0;

        if 880 > $i13 goto label09;

        $i14 = (int) c0;

        if $i14 <= 893 goto label17;

     label09:
        $i15 = (int) c0;

        if 895 > $i15 goto label10;

        $i16 = (int) c0;

        if $i16 <= 8191 goto label17;

     label10:
        $i17 = (int) c0;

        if 8204 > $i17 goto label11;

        $i18 = (int) c0;

        if $i18 <= 8205 goto label17;

     label11:
        $i19 = (int) c0;

        if 8304 > $i19 goto label12;

        $i20 = (int) c0;

        if $i20 <= 8591 goto label17;

     label12:
        $i21 = (int) c0;

        if 11264 > $i21 goto label13;

        $i22 = (int) c0;

        if $i22 <= 12271 goto label17;

     label13:
        $i23 = (int) c0;

        if 12289 > $i23 goto label14;

        $i24 = (int) c0;

        $i26 = (int) 55295;

        if $i24 <= $i26 goto label17;

     label14:
        $i28 = (int) 63744;

        $i29 = (int) c0;

        if $i28 > $i29 goto label15;

        $i30 = (int) c0;

        $i32 = (int) 64975;

        if $i30 <= $i32 goto label17;

     label15:
        $i34 = (int) 65008;

        $i35 = (int) c0;

        if $i34 > $i35 goto label16;

        $i36 = (int) c0;

        $i38 = (int) 65533;

        if $i36 <= $i38 goto label17;

     label16:
        $i39 = (int) c0;

        if 65536 > $i39 goto label18;

        $i40 = (int) c0;

        if $i40 > 983039 goto label18;

     label17:
        $z3 = 1;

        goto label19;

     label18:
        $z3 = 0;

     label19:
        return $z3;
    }

    private static boolean isXmlNameChar(char)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean isXmlNameStartChar(char)>(c0);

        if $z0 != 0 goto label3;

        $i1 = (int) c0;

        if $i1 == 45 goto label3;

        $i2 = (int) c0;

        if $i2 == 46 goto label3;

        $i3 = (int) c0;

        if 48 > $i3 goto label1;

        $i4 = (int) c0;

        if $i4 <= 57 goto label3;

     label1:
        $i5 = (int) c0;

        if $i5 == 183 goto label3;

        $i6 = (int) c0;

        if 768 > $i6 goto label2;

        $i7 = (int) c0;

        if $i7 <= 879 goto label3;

     label2:
        $i8 = (int) c0;

        if 8255 > $i8 goto label4;

        $i9 = (int) c0;

        if $i9 > 8256 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    private static boolean isXmlName(java.lang.String)
    {
        char $c1, $c3;
        java.lang.AssertionError $r1;
        int $i0, $i2, i4;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return 0;

     label2:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean isXmlNameStartChar(char)>($c1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        i4 = 1;

     label4:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i2 goto label6;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean isXmlNameChar(char)>($c3);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        return 1;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r3;

        r3 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed;

        if r0 == null goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void add(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1);

     label1:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validationResult()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r3;

        r3 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid;

        if r0 == null goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void add(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1);

     label1:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validationResult()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r3;

        r3 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation;

        if r0 == null goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void add(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1);

     label1:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validationResult()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r0;
        int $i0, $i1;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r2;

        r2 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed;

        $i0 = specialinvoke r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos()>();

        $i1 = r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed: void <init>(java.lang.String,int,int)>(r1, $i0, $i1);

        return $r0;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r0;
        int $i0, $i1;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r2;

        r2 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid;

        $i0 = specialinvoke r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos()>();

        $i1 = r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid: void <init>(java.lang.String,int,int)>(r1, $i0, $i1);

        return $r0;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r0;
        int $i0, $i1;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r2;

        r2 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation;

        $i0 = specialinvoke r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos()>();

        $i1 = r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation: void <init>(java.lang.String,int,int)>(r1, $i0, $i1);

        return $r0;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r0;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $r0 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r0;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedElementStart(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("elementStart with no elementEnd");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedDeleteElementStart(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("deleteElementStart with no deleteElementEnd");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedElementEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("elementEnd with no elementStart");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedDeleteElementEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("deleteElementEnd with no deleteElementStart");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedStartAnnotation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startAnnotation of key ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with no endAnnotation");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedEndAnnotation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endAnnotation of key ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with no startAnnotation");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult skipDistanceNotPositive(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("skip distance not positive");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult skipInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("skip inside insert or delete");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeChangeInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("attribute change inside insert or delete");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult skipPastEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("skip past end of document");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("characters is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult emptyCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("characters is empty");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult insertInsideDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("insertion inside deletion");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteInsideInsert(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("deletion inside insertion");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullTag(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("element type is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult elementTypeNotXmlName(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element type is not an XML name: \"");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributes(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("attributes is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributeKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("attribute key is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeKeyNotXmlName(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attribute key is not an XML name: \"");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributeValue(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("attribute value is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAnnotationKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("annotation key is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult textNotAllowedInElement(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r8;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element type ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not allow text content");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult tooLong(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("intermediate or final document too long");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteLengthNotPositive(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("delete length not positive");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult cannotDeleteSoManyCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, int, int)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r10;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        int i0, i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r11;
        java.lang.String $r9;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot delete ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" characters,");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" only ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" available");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>($r9);

        $r11 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r10);

        return $r11;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidAttribute(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r10;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r11;
        java.lang.String r4, r7, $r9;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not permit attribute ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r9);

        $r11 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r10);

        return $r11;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidAttribute(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r13;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9, $r11;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r14;
        java.lang.String r4, r7, r10, $r12;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        r10 := @parameter3: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not permit attribute ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with value ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r12);

        $r14 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r13);

        return $r14;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult typeInvalidRoot(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>("type not permitted as root element");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r10;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r11;
        java.lang.String r4, r7, $r9;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element type ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not permit subelement type ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r9);

        $r11 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r10);

        return $r11;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementStartToDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("no element start to delete here");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementEndToDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("no element end to delete here");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementStartToChangeAttributes(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("no element start to change attributes here");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private java.lang.Object elementStartingHere()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r1, $r2, $r3, $r4, $r6, $r7, $r10, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        org.waveprotocol.wave.model.document.util.Point $r5, $r8;
        java.lang.Object $r9, $r11, $r13;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndex(int,int)>($i0, $i1);

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $i3 = $i2 + 1;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        if $i3 < $i4 goto label1;

        return null;

     label1:
        $i5 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        if $i5 != 0 goto label2;

        $r12 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.Object getDocumentElement()>();

        goto label3;

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i6 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i6);

        $r13 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>($r4, $r5);

     label3:
        $r7 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r6 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i7 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $i8 = $i7 + 1;

        $r8 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i8);

        $r9 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>($r7, $r8);

        if $r9 != null goto label4;

        return null;

     label4:
        $r10 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.Object getParentElement(java.lang.Object)>($r9);

        if $r13 == $r11 goto label5;

        return null;

     label5:
        return $r9;
    }

    private java.lang.Object elementEndingNext()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r1, $r2, $r3, $r4, $r5, $r6, $r9, $r10, $r13, $r15;
        java.lang.AssertionError $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        org.waveprotocol.wave.model.document.util.Point $r7, $r11;
        boolean $z0;
        java.lang.Object $r8, $r12, $r14, $r16;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndex(int,int)>($i0, $i1);

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        if $i2 != 0 goto label1;

        return null;

     label1:
        $i3 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        if $i3 != $i4 goto label2;

        return null;

     label2:
        $i5 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i6 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        $i7 = $i6 - 1;

        if $i5 != $i7 goto label4;

        $r15 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r16 = interfaceinvoke $r15.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.Object getDocumentElement()>();

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if $r16 != null goto label3;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label3:
        return $r16;

     label4:
        $r4 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i8 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i8);

        $r6 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i9 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i9);

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>($r6, $r7);

        $r10 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r9 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i10 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $i11 = $i10 + 1;

        $r11 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i11);

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>($r10, $r11);

        if $r8 != null goto label5;

        return null;

     label5:
        $r13 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.Object getParentElement(java.lang.Object)>($r8);

        if $r14 == $r12 goto label6;

        return null;

     label6:
        return $r8;
    }

    private static java.lang.Object nthEnclosingElement(org.waveprotocol.wave.model.document.indexed.IndexedDocument, int, int)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument r0;
        java.lang.AssertionError $r2, $r3;
        int i0, i1, i2;
        java.lang.Object r4;
        org.waveprotocol.wave.model.document.util.Point $r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocument;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 >= 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>(r0, $r1);

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        $z1 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if r4 != null goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.Object getParentElement(java.lang.Object)>(r4);

        i2 = i2 + 1;

        goto label2;

     label4:
        return r4;
    }

    private static int remainingCharactersInElement(org.waveprotocol.wave.model.document.indexed.IndexedDocument, int)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument r0;
        java.lang.AssertionError $r7, $r8;
        short $s4, $s5, $s7, $s8;
        int i0, $i1, $i2, $i3, $i6, $i9, i10, $i11, $i12, $i13, $i14;
        org.waveprotocol.wave.model.document.util.Point $r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2, r5, $r6;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocument;

        i0 := @parameter1: int;

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        if i0 < $i1 goto label1;

        return 0;

     label1:
        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r5 = $r2;

        $z1 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $s7 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: short getNodeType(java.lang.Object)>($r2);

        $s8 = <org.waveprotocol.wave.model.document.indexed.NodeType: short TEXT_NODE>;

        $i11 = (int) $s7;

        $i12 = (int) $s8;

        if $i11 == $i12 goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        $i3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: int getItemSize(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>(r0, $r2);

        $i9 = $i3 - $i2;

        i10 = $i9;

        $z2 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        if $i9 >= 0 goto label4;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label4:
        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.Object getNextSibling(java.lang.Object)>(r5);

        if $r6 == null goto label6;

        $s4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: short getNodeType(java.lang.Object)>($r6);

        $s5 = <org.waveprotocol.wave.model.document.indexed.NodeType: short TEXT_NODE>;

        $i13 = (int) $s4;

        $i14 = (int) $s5;

        if $i13 == $i14 goto label5;

        goto label6;

     label5:
        $i6 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: int getItemSize(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>(r0, $r6);

        i10 = i10 + $i6;

        r5 = $r6;

        goto label4;

     label6:
        return i10;
    }

    private boolean tagAllowsText(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        java.lang.AssertionError $r5;
        int[] $r3;
        int $i0, $i1;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r4;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        $r3 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton$1: int[] $SwitchMap$org$waveprotocol$wave$model$document$operation$automaton$DocumentSchema$PermittedCharacters>;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters permittedCharacters(java.lang.String)>(r1);

        $i0 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        return 1;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("unexpected return value from permittedCharacters");

        throw $r5;
    }

    private boolean elementAllowedAsRoot(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: boolean permitsChild(java.lang.String,java.lang.String)>(null, r1);

        return $z0;
    }

    private boolean elementAllowsAttribute(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r3;
        java.lang.String r1, r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: boolean permitsAttribute(java.lang.String,java.lang.String)>(r1, r2);

        return $z0;
    }

    private boolean elementAllowsAttribute(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r4;
        java.lang.String r1, r2, r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        $z0 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: boolean permitsAttribute(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $z0;
    }

    private boolean elementAllowsChild(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r3;
        java.lang.String r1, r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: boolean permitsChild(java.lang.String,java.lang.String)>(r1, r2);

        return $z0;
    }

    public void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, org.waveprotocol.wave.model.document.indexed.IndexedDocument)
    {
        java.util.HashSet $r2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocument r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r3;
        int $i0;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r4 := @parameter1: org.waveprotocol.wave.model.document.indexed.IndexedDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.Set openAnnotationKeys> = $r2;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos> = 0;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints> = r3;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc> = r4;

        $i0 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingLength> = $i0;

        return;
    }

    private int resultingLength()
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingLength>;

        return $i0;
    }

    private int effectivePos()
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        return $i0;
    }

    private org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol effectiveDocSymbol()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol $r4, $r5, $r6, $r7;
        int $i0, $i1;
        java.lang.Object $r2, $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        if $i0 < $i1 goto label1;

        $r7 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol END>;

        return $r7;

     label1:
        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.Object elementStartingHere()>();

        if $r2 == null goto label2;

        $r6 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol OPEN>;

        return $r6;

     label2:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.Object elementEndingNext()>();

        if $r3 == null goto label3;

        $r5 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol CLOSE>;

        return $r5;

     label3:
        $r4 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol CHARACTER>;

        return $r4;
    }

    private java.lang.String effectiveDocSymbolTag()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r3, $r7;
        java.lang.IllegalStateException $r11;
        java.lang.AssertionError $r6, $r10;
        int[] $r1;
        int $i0, $i1;
        java.lang.String $r5, $r9;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol $r2;
        java.lang.Object $r4, $r8;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $r1 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton$1: int[] $SwitchMap$org$waveprotocol$wave$model$document$operation$NindoAutomaton$DocSymbol>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol effectiveDocSymbol()>();

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label3;
            default: goto label5;
        };

     label1:
        $r7 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.Object elementStartingHere()>();

        $r9 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.String getTagName(java.lang.Object)>($r8);

        $z1 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if $r9 != null goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        return $r9;

     label3:
        $r3 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.Object elementEndingNext()>();

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.String getTagName(java.lang.Object)>($r4);

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        if $r5 != null goto label4;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        return $r5;

     label5:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not at tag");

        throw $r11;
    }

    private boolean stackIsEmpty()
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        return $z0;
    }

    private org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()
    {
        java.lang.AssertionError $r6;
        java.util.ArrayList $r1, $r2, $r5;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry $r4;
        int $i0, $i1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $z1 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry) $r3;

        return $r4;
    }

    private java.lang.Object effectiveEnclosingElement()
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry $r2, $r4, $r9, r18;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r7, $r8, $r10;
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r1, $r14, $r22;
        java.lang.AssertionError $r16, $r20, $r21;
        java.util.ArrayList $r12;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r11;
        java.util.Iterator $r13;
        java.lang.RuntimeException $r6;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$DeleteElement $r5, $r19;
        java.lang.Object $r15, $r17, $r23;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        if $i0 == 0 goto label01;

        $i1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        if $i1 < $i2 goto label02;

     label01:
        return null;

     label02:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean stackIsEmpty()>();

        if $z0 == 0 goto label03;

        $r22 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i4 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r23 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.Object nthEnclosingElement(org.waveprotocol.wave.model.document.indexed.IndexedDocument,int,int)>($r22, $i4, 0);

        return $r23;

     label03:
        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement asInsertElement()>();

        if $r3 == null goto label04;

        $z4 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z4 != 0 goto label04;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label04:
        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DeleteElement asDeleteElement()>();

        if $r5 == null goto label10;

        $r12 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $r13 = virtualinvoke $r12.<java.util.ArrayList: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r17 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry) $r17;

        $r19 = virtualinvoke r18.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DeleteElement asDeleteElement()>();

        if $r19 == null goto label06;

        goto label07;

     label06:
        $z3 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z3 != 0 goto label07;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label07:
        goto label05;

     label08:
        $r14 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i3 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r15 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.Object nthEnclosingElement(org.waveprotocol.wave.model.document.indexed.IndexedDocument,int,int)>($r14, $i3, 0);

        $z2 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z2 != 0 goto label09;

        if $r15 != null goto label09;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label09:
        return $r15;

     label10:
        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected top of stack: ");

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r6;
    }

    private java.lang.String effectiveEnclosingElementTag()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry $r4, $r6;
        java.lang.Object $r1;
        java.lang.String $r3, $r8;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement $r5, $r7;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean stackIsEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement asInsertElement()>();

        if $r5 == null goto label1;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement asInsertElement()>();

        $r8 = $r7.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement: java.lang.String tag>;

        return $r8;

     label1:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.Object effectiveEnclosingElement()>();

        if $r1 != null goto label2;

        return null;

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.String getTagName(java.lang.Object)>($r1);

        return $r3;
    }

    private java.lang.String effectiveEnclosingElementParentTag()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r2, $r4;
        java.lang.AssertionError $r6, $r19, $r20;
        java.util.ArrayList $r9, $r13, $r14;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry $r7, $r10, r21;
        int $i0, $i1, $i2;
        java.lang.String $r5, $r12, $r17;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement $r8, $r11, $r16, $r18;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r1, $r3, $r15;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean stackIsEmpty()>();

        if $z0 != 0 goto label4;

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement asInsertElement()>();

        if $r8 == null goto label4;

        $r9 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $i0 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        if $i0 <= 1 goto label3;

        $r14 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $r13 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $i1 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        $i2 = $i1 - 2;

        $r15 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        r21 = (org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry) $r15;

        $z2 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z2 != 0 goto label1;

        if r21 != null goto label1;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label1:
        $z3 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z3 != 0 goto label2;

        $r18 = virtualinvoke r21.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement asInsertElement()>();

        if $r18 != null goto label2;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label2:
        $r16 = virtualinvoke r21.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement asInsertElement()>();

        $r17 = $r16.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement: java.lang.String tag>;

        return $r17;

     label3:
        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement asInsertElement()>();

        $r12 = $r11.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement: java.lang.String tag>;

        return $r12;

     label4:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.Object effectiveEnclosingElement()>();

        $z1 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z1 != 0 goto label5;

        if $r1 != null goto label5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label5:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.Object getParentElement(java.lang.Object)>($r1);

        if $r3 != null goto label6;

        return null;

     label6:
        $r4 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.String getTagName(java.lang.Object)>($r3);

        return $r5;
    }

    private boolean isAnnotationOpen(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.Set openAnnotationKeys>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public int maxLengthIncrease()
    {
        int $i0, i1;
        java.lang.AssertionError $r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingLength>;

        i1 = 429496729 - $i0;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return i1;
    }

    public int maxSkipDistance()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        if $i0 < $i1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        $i3 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $i4 = $i2 - $i3;

        return $i4;
    }

    private boolean canIncreaseLength(int)
    {
        int i0, $i1;
        java.lang.AssertionError $r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int maxLengthIncrease()>();

        if i0 > $i1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private boolean canSkip(int)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r1;
        java.lang.AssertionError $r2, $r3;
        int i0, $i1, $i2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int size()>();

        if $i2 <= 429496729 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int maxSkipDistance()>();

        if i0 > $i1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int maxCharactersToDelete()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r1;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoAutomaton: int remainingCharactersInElement(org.waveprotocol.wave.model.document.indexed.IndexedDocument,int)>($r1, $i0);

        return $i1;
    }

    private boolean topOfStackIsDeletion()
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$DeleteElement $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry $r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean stackIsEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DeleteElement asDeleteElement()>();

        if $r2 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean topOfStackIsInsertion()
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry $r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean stackIsEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement asInsertElement()>();

        if $r2 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean topOfStackIsInsertElement()
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry $r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean stackIsEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement asInsertElement()>();

        if $r2 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean topOfStackIsDeleteElement()
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$DeleteElement $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry $r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean stackIsEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry topOfStack()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DeleteElement asDeleteElement()>();

        if $r2 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void advance(int)
    {
        int i0, $i1, $i2;
        java.lang.AssertionError $r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos>;

        $i2 = $i1 + i0;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int effectivePos> = $i2;

        return;
    }

    private void increaseLength(int)
    {
        int i0, $i1, $i2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        i0 := @parameter0: int;

        $i1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingLength>;

        $i2 = $i1 + i0;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingLength> = $i2;

        return;
    }

    private void decreaseLength(int)
    {
        int i0, $i1, $i2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        i0 := @parameter0: int;

        $i1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingLength>;

        $i2 = $i1 - i0;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingLength> = $i2;

        return;
    }

    private void pushOntoStack(org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry)
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        java.util.ArrayList $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void popStack()
    {
        java.lang.AssertionError $r4;
        java.util.ArrayList $r1, $r2, $r3;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        return;
    }

    private void setAnnotationOpen(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.Set openAnnotationKeys>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void setAnnotationClosed(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.Set openAnnotationKeys>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkSkip(int, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        int i0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r3, $r4, $r5;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if i0 > 0 goto label1;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult skipDistanceNotPositive(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r5;

     label1:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean stackIsEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult skipInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r4;

     label2:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean canSkip(int)>(i0);

        if $z1 != 0 goto label3;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult skipPastEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r3;

     label3:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r1;
    }

    public void doSkip(int)
    {
        java.lang.AssertionError $r3;
        int i0, $i1, $i2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkSkip(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(i0, null);

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r1 != $r2 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void advance(int)>(i0);

        $i1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos>;

        $i2 = $i1 + i0;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos> = $i2;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkCharacters(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r4;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r5, $r6, $r7, $r8, $r9;
        java.lang.String r0, $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label1;

        $r9 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r4);

        return $r9;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r8 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult emptyCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r4);

        return $r8;

     label2:
        $z0 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean topOfStackIsDeletion()>();

        if $z0 == 0 goto label3;

        $r7 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult insertInsideDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r4);

        return $r7;

     label3:
        $r2 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.String effectiveEnclosingElementTag()>();

        $z1 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean tagAllowsText(java.lang.String)>($r2);

        if $z1 != 0 goto label4;

        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult textNotAllowedInElement(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r4, $r2);

        return $r6;

     label4:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $z2 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean canIncreaseLength(int)>($i1);

        if $z2 != 0 goto label5;

        $r5 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult tooLong(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r4);

        return $r5;

     label5:
        $r3 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r3;
    }

    public void doCharacters(java.lang.String)
    {
        java.lang.AssertionError $r4;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2, $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkCharacters(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, null);

        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r2 != $r3 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void increaseLength(int)>($i0);

        $i1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos>;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i1 + $i2;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos> = $i3;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkDeleteCharacters(int, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        int i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r3, $r4, $r5;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        i0 := @parameter0: int;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if i0 > 0 goto label1;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteLengthNotPositive(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r5;

     label1:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean topOfStackIsInsertion()>();

        if $z0 == 0 goto label2;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteInsideInsert(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r4;

     label2:
        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int maxCharactersToDelete()>();

        if i0 <= $i1 goto label3;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult cannotDeleteSoManyCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int,int)>(r2, i0, $i1);

        return $r3;

     label3:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r1;
    }

    public void doDeleteCharacters(int)
    {
        int i0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r2;
        java.lang.AssertionError $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkDeleteCharacters(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(i0, null);

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r1 != $r2 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void advance(int)>(i0);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void decreaseLength(int)>(i0);

        return;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAttributes(java.lang.String, java.util.Map, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, boolean)
    {
        java.util.Map r0;
        java.lang.String r7, r9, r11;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r10;
        boolean $z0, $z1, $z2, z3, $z4;
        java.util.Map$Entry r5;
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r12;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r13, $r14, $r15, $r16, $r17, $r18;
        java.lang.Object $r4, $r6, $r8;

        r10 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r11 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Map;

        r12 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        z3 := @parameter3: boolean;

        if r0 != null goto label1;

        $r18 = specialinvoke r10.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributes(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r12);

        return $r18;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r8;

        if r7 != null goto label3;

        $r17 = specialinvoke r10.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributeKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r12);

        return $r17;

     label3:
        $z1 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean isXmlName(java.lang.String)>(r7);

        if $z1 != 0 goto label4;

        $r16 = specialinvoke r10.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeKeyNotXmlName(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r12, r7);

        return $r16;

     label4:
        if r9 != null goto label6;

        if z3 != 0 goto label5;

        $r15 = specialinvoke r10.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributeValue(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r12);

        return $r15;

     label5:
        $z4 = specialinvoke r10.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean elementAllowsAttribute(java.lang.String,java.lang.String)>(r11, r7);

        if $z4 != 0 goto label7;

        $r14 = specialinvoke r10.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidAttribute(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String)>(r12, r11, r7);

        return $r14;

     label6:
        $z2 = specialinvoke r10.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean elementAllowsAttribute(java.lang.String,java.lang.String,java.lang.String)>(r11, r7, r9);

        if $z2 != 0 goto label7;

        $r13 = specialinvoke r10.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidAttribute(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String,java.lang.String)>(r12, r11, r7, r9);

        return $r13;

     label7:
        goto label2;

     label8:
        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r3;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkElementStart(java.lang.String, java.util.Map, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        java.util.Map r2;
        int $i0;
        java.lang.String r0, $r11, $r18;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol $r6, $r7;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4, $r5, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17;

        r1 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label1;

        $r17 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullTag(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r17;

     label1:
        $z0 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean isXmlName(java.lang.String)>(r0);

        if $z0 != 0 goto label2;

        $r16 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult elementTypeNotXmlName(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r3, r0);

        return $r16;

     label2:
        $r4 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAttributes(java.lang.String,java.util.Map,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,boolean)>(r0, r2, r3, 0);

        $r5 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        if $r4 == $r5 goto label3;

        return $r4;

     label3:
        $z1 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean topOfStackIsDeletion()>();

        if $z1 == 0 goto label4;

        $r15 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult insertInsideDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r15;

     label4:
        $z2 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean canIncreaseLength(int)>(2);

        if $z2 != 0 goto label5;

        $r14 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult tooLong(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r14;

     label5:
        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol effectiveDocSymbol()>();

        $r7 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol END>;

        if $r6 != $r7 goto label7;

        $r11 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.String effectiveEnclosingElementTag()>();

        if $r11 != null goto label7;

        $z5 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean stackIsEmpty()>();

        if $z5 == 0 goto label7;

        $i0 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingLength()>();

        if $i0 != 0 goto label7;

        $z6 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean elementAllowedAsRoot(java.lang.String)>(r0);

        if $z6 == 0 goto label6;

        $r13 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r13;

     label6:
        $r12 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult typeInvalidRoot(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r12;

     label7:
        $r18 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.String effectiveEnclosingElementTag()>();

        if $r18 != null goto label8;

        $z4 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean elementAllowedAsRoot(java.lang.String)>(r0);

        if $z4 != 0 goto label9;

        $r10 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult typeInvalidRoot(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r10;

     label8:
        $z3 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean elementAllowsChild(java.lang.String,java.lang.String)>($r18, r0);

        if $z3 != 0 goto label9;

        $r9 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String)>(r3, $r18, r0);

        return $r9;

     label9:
        $r8 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r8;
    }

    public void doElementStart(java.lang.String, java.util.Map)
    {
        java.lang.AssertionError $r6;
        java.util.Map r3;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4, $r5;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Map;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkElementStart(java.lang.String,java.util.Map,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, r3, null);

        $r5 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r4 != $r5 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement: org.waveprotocol.wave.model.document.operation.NindoAutomaton$InsertElement getInstance(java.lang.String)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void pushOntoStack(org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry)>($r2);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void increaseLength(int)>(2);

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos> = $i1;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkElementEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean topOfStackIsInsertElement()>();

        if $z0 != 0 goto label1;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedElementEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r3;

     label1:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r1;
    }

    public void doElementEnd()
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r2;
        java.lang.AssertionError $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkElementEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(null);

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r1 != $r2 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void popStack()>();

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos> = $i1;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkDeleteElementStart(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol $r1, $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean topOfStackIsInsertion()>();

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteInsideInsert(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r4);

        return $r6;

     label1:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol effectiveDocSymbol()>();

        $r2 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol OPEN>;

        if $r1 == $r2 goto label2;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementStartToDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r4);

        return $r5;

     label2:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r3;
    }

    public void doDeleteElementStart()
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$DeleteElement $r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2, $r3;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkDeleteElementStart(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(null);

        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r2 != $r3 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.document.operation.NindoAutomaton$DeleteElement: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DeleteElement getInstance()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void pushOntoStack(org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry)>($r1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void advance(int)>(1);

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkDeleteElementEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol $r1, $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean topOfStackIsDeleteElement()>();

        if $z0 != 0 goto label1;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedDeleteElementEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r4);

        return $r6;

     label1:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol effectiveDocSymbol()>();

        $r2 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol CLOSE>;

        if $r1 == $r2 goto label2;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementEndToDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r4);

        return $r5;

     label2:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r3;
    }

    public void doDeleteElementEnd()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r2;
        java.lang.AssertionError $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkDeleteElementEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(null);

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r1 != $r2 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void popStack()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void decreaseLength(int)>(2);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void advance(int)>(1);

        return;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkChangeAttributes(java.util.Map, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, boolean)
    {
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol $r1, $r2;
        java.lang.AssertionError $r7;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r5;
        java.util.Map r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r6, $r8, $r9;
        java.lang.String $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1, z2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r4 := @parameter0: java.util.Map;

        r5 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        z2 := @parameter2: boolean;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean stackIsEmpty()>();

        if $z0 != 0 goto label1;

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeChangeInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r5);

        return $r9;

     label1:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol effectiveDocSymbol()>();

        $r2 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.NindoAutomaton$DocSymbol OPEN>;

        if $r1 == $r2 goto label2;

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementStartToChangeAttributes(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r5);

        return $r8;

     label2:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.lang.String effectiveDocSymbolTag()>();

        $z1 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if $r3 != null goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAttributes(java.lang.String,java.util.Map,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,boolean)>($r3, r4, r5, z2);

        return $r6;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkSetAttributes(java.util.Map, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        java.util.Map r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkChangeAttributes(java.util.Map,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,boolean)>(r1, r2, 0);

        return $r3;
    }

    public void doSetAttributes(java.util.Map)
    {
        java.lang.AssertionError $r4;
        java.util.Map r1;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2, $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.util.Map;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkSetAttributes(java.util.Map,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, null);

        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r2 != $r3 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void advance(int)>(1);

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos> = $i1;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkUpdateAttributes(java.util.Map, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        java.util.Map r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkChangeAttributes(java.util.Map,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,boolean)>(r1, r2, 1);

        return $r3;
    }

    public void doUpdateAttributes(java.util.Map)
    {
        java.lang.AssertionError $r4;
        java.util.Map r1;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2, $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.util.Map;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkUpdateAttributes(java.util.Map,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, null);

        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r2 != $r3 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void advance(int)>(1);

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int resultingPos> = $i1;

        return;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAnnotationKey(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r4;
        java.lang.String r0;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r2;

        r2 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label1;

        $r4 = specialinvoke r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAnnotationKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r4;

     label1:
        $r1 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkStartAnnotation(java.lang.String, java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r4, $r5;
        java.lang.String r1, r6;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r2 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAnnotationKey(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, r2);

        $r4 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        if $r3 == $r4 goto label1;

        return $r3;

     label1:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r5;
    }

    public void doStartAnnotation(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r4;
        java.lang.String r1, r2;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkStartAnnotation(java.lang.String,java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, r2, null);

        $r4 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r3 != $r4 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void setAnnotationOpen(java.lang.String)>(r1);

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkEndAnnotation(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r4, $r5, $r6;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAnnotationKey(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, r2);

        $r4 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        if $r3 == $r4 goto label1;

        return $r3;

     label1:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean isAnnotationOpen(java.lang.String)>(r1);

        if $z0 != 0 goto label2;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedEndAnnotation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r2, r1);

        return $r6;

     label2:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r5;
    }

    public void doEndAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2, $r3;
        java.lang.String r1;
        java.lang.AssertionError $r4;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter0: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkEndAnnotation(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, null);

        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r2 != $r3 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void setAnnotationClosed(java.lang.String)>(r1);

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkFinish(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        java.util.Iterator $r2, $r4;
        java.util.Set $r3;
        java.util.ArrayList $r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r7;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry r11;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r5, $r8, $r10;
        java.lang.Object $r6, $r9;
        java.lang.String r12;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r7 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.ArrayList stack>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r9 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry) $r9;

        $r10 = virtualinvoke r11.<org.waveprotocol.wave.model.document.operation.NindoAutomaton$StackEntry: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult notClosed(org.waveprotocol.wave.model.document.operation.NindoAutomaton,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r0, r7);

        return $r10;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: java.util.Set openAnnotationKeys>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r6;

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedStartAnnotation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r7, r12);

        return $r8;

     label2:
        $r5 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r5;
    }

    public void doFinish()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r2;
        java.lang.AssertionError $r3;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        $z0 = <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkFinish(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(null);

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult ILL_FORMED>;

        if $r1 != $r2 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        return;
    }

    static org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult access$100(org.waveprotocol.wave.model.document.operation.NindoAutomaton, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedElementStart(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1);

        return $r2;
    }

    static org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult access$200(org.waveprotocol.wave.model.document.operation.NindoAutomaton, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.NindoAutomaton;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedDeleteElementStart(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.waveprotocol.wave.model.document.operation.NindoAutomaton: int MAX_DOC_LENGTH> = 429496729;

        $r0 = class "Lorg/waveprotocol/wave/model/document/operation/NindoAutomaton;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.operation.NindoAutomaton: boolean $assertionsDisabled> = $z1;

        return;
    }
}
