public class com.hp.hpl.jena.sparql.algebra.TransformWrapper extends java.lang.Object implements com.hp.hpl.jena.sparql.algebra.Transform
{
    protected final com.hp.hpl.jena.sparql.algebra.Transform transform;

    public void <init>(com.hp.hpl.jena.sparql.algebra.Transform)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r1;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTable)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTable r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTable;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTable)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpBGP)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTriple)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTriple)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuad)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuad)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPath r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPath)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpProcedure, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpProcedure,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)
    {
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r1;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock)
    {
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r1;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpService, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpService r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpService;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpService,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExtend, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExtend,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpJoin r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r4;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r4;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDiff, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform $r4;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.op.OpDiff r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDiff;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDiff,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpMinus, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform $r4;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpMinus,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpUnion, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpUnion r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r4;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpUnion,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpConditional, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpConditional r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r4;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, r3, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpConditional;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpConditional,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2, r3);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSequence, java.util.List)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSequence r1;
        java.util.List r2;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        r2 := @parameter1: java.util.List;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSequence,java.util.List)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDisjunction, java.util.List)
    {
        java.util.List r2;
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        r2 := @parameter1: java.util.List;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDisjunction,java.util.List)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExt)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExt r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExt;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExt)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpNull)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpNull r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r2;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpNull;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpNull)>(r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLabel, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.op.OpLabel r1;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLabel;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLabel,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpList, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpList r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpList;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpList,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpOrder, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpOrder,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTopN, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTopN,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpProject, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProject r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProject;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpProject,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDistinct, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDistinct r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpDistinct,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpReduced, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpReduced r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpReduced;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpReduced,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSlice, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSlice,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGroup, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGroup r1;
        com.hp.hpl.jena.sparql.algebra.Transform $r3;
        com.hp.hpl.jena.sparql.algebra.TransformWrapper r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformWrapper;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.TransformWrapper: com.hp.hpl.jena.sparql.algebra.Transform transform>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGroup,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r4;
    }
}
