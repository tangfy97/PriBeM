public final class org.apache.lucene.util.IntBlockPool$SliceReader extends java.lang.Object
{
    private final org.apache.lucene.util.IntBlockPool pool;
    private int upto;
    private int bufferUpto;
    private int bufferOffset;
    private int[] buffer;
    private int limit;
    private int level;
    private int end;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.IntBlockPool)
    {
        org.apache.lucene.util.IntBlockPool$SliceReader r0;
        org.apache.lucene.util.IntBlockPool r1;

        r0 := @this: org.apache.lucene.util.IntBlockPool$SliceReader;

        r1 := @parameter0: org.apache.lucene.util.IntBlockPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: org.apache.lucene.util.IntBlockPool pool> = r1;

        return;
    }

    public void reset(int, int)
    {
        int[][] $r2;
        org.apache.lucene.util.IntBlockPool$SliceReader r0;
        org.apache.lucene.util.IntBlockPool $r1;
        int[] $r3, $r4;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12;

        r0 := @this: org.apache.lucene.util.IntBlockPool$SliceReader;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        $i1 = i0 / 8192;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferUpto> = $i1;

        $i2 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferUpto>;

        $i3 = $i2 * 8192;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferOffset> = $i3;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int end> = i4;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto> = i0;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int level> = 1;

        $r1 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: org.apache.lucene.util.IntBlockPool pool>;

        $r2 = $r1.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $i5 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferUpto>;

        $r3 = $r2[$i5];

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int[] buffer> = $r3;

        $i6 = i0 & 8191;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto> = $i6;

        $r4 = staticinvoke <org.apache.lucene.util.IntBlockPool: int[] access$300()>();

        i7 = $r4[0];

        $i8 = i0 + i7;

        if $i8 < i4 goto label1;

        $i12 = i4 & 8191;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int limit> = $i12;

        goto label2;

     label1:
        $i9 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto>;

        $i10 = $i9 + i7;

        $i11 = $i10 - 1;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int limit> = $i11;

     label2:
        return;
    }

    public boolean endOfSlice()
    {
        java.lang.AssertionError $r1;
        org.apache.lucene.util.IntBlockPool$SliceReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.IntBlockPool$SliceReader;

        $z0 = <org.apache.lucene.util.IntBlockPool$SliceReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i5 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto>;

        $i4 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferOffset>;

        $i7 = $i5 + $i4;

        $i6 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int end>;

        if $i7 <= $i6 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto>;

        $i0 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferOffset>;

        $i3 = $i1 + $i0;

        $i2 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int end>;

        if $i3 != $i2 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public int readInt()
    {
        java.lang.AssertionError $r2, $r3;
        org.apache.lucene.util.IntBlockPool$SliceReader r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.util.IntBlockPool$SliceReader;

        $z0 = <org.apache.lucene.util.IntBlockPool$SliceReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.lucene.util.IntBlockPool$SliceReader: boolean endOfSlice()>();

        if $z2 == 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <org.apache.lucene.util.IntBlockPool$SliceReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i6 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto>;

        $i5 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int limit>;

        if $i6 <= $i5 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $i1 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto>;

        $i0 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int limit>;

        if $i1 != $i0 goto label3;

        specialinvoke r0.<org.apache.lucene.util.IntBlockPool$SliceReader: void nextSlice()>();

     label3:
        $r1 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int[] buffer>;

        $i2 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto> = $i3;

        $i4 = $r1[$i2];

        return $i4;
    }

    private void nextSlice()
    {
        int[][] $r5;
        java.lang.AssertionError $r7;
        org.apache.lucene.util.IntBlockPool$SliceReader r0;
        org.apache.lucene.util.IntBlockPool $r4;
        int[] $r1, $r2, $r3, $r6;
        int $i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.IntBlockPool$SliceReader;

        $r1 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int[] buffer>;

        $i0 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int limit>;

        i1 = $r1[$i0];

        $r2 = staticinvoke <org.apache.lucene.util.IntBlockPool: int[] access$400()>();

        $i2 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int level>;

        $i3 = $i2 - 1;

        $i4 = $r2[$i3];

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int level> = $i4;

        $r3 = staticinvoke <org.apache.lucene.util.IntBlockPool: int[] access$300()>();

        $i5 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int level>;

        i6 = $r3[$i5];

        $i7 = i1 / 8192;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferUpto> = $i7;

        $i8 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferUpto>;

        $i9 = $i8 * 8192;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferOffset> = $i9;

        $r4 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: org.apache.lucene.util.IntBlockPool pool>;

        $r5 = $r4.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $i10 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferUpto>;

        $r6 = $r5[$i10];

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int[] buffer> = $r6;

        $i11 = i1 & 8191;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto> = $i11;

        $i13 = i1 + i6;

        $i12 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int end>;

        if $i13 < $i12 goto label2;

        $z0 = <org.apache.lucene.util.IntBlockPool$SliceReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i20 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int end>;

        $i21 = $i20 - i1;

        if $i21 > 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $i18 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int end>;

        $i17 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int bufferOffset>;

        $i19 = $i18 - $i17;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int limit> = $i19;

        goto label3;

     label2:
        $i14 = r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int upto>;

        $i15 = $i14 + i6;

        $i16 = $i15 - 1;

        r0.<org.apache.lucene.util.IntBlockPool$SliceReader: int limit> = $i16;

     label3:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/IntBlockPool;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.IntBlockPool$SliceReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
