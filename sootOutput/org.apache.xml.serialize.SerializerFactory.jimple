public abstract class org.apache.xml.serialize.SerializerFactory extends java.lang.Object
{
    public static final java.lang.String FactoriesProperty;
    private static java.util.Hashtable _factories;
    static java.lang.Class class$org$apache$xml$serialize$SerializerFactory;

    public void <init>()
    {
        org.apache.xml.serialize.SerializerFactory r0;

        r0 := @this: org.apache.xml.serialize.SerializerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void registerSerializerFactory(org.apache.xml.serialize.SerializerFactory)
    {
        java.lang.Throwable $r4;
        org.apache.xml.serialize.SerializerFactory r1;
        java.lang.String $r2;
        java.util.Hashtable r0, $r3;

        r1 := @parameter0: org.apache.xml.serialize.SerializerFactory;

        r0 = <org.apache.xml.serialize.SerializerFactory: java.util.Hashtable _factories>;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xml.serialize.SerializerFactory: java.lang.String getSupportedMethod()>();

        $r3 = <org.apache.xml.serialize.SerializerFactory: java.util.Hashtable _factories>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1);

        exitmonitor r0;

        goto label3;

     label2:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

     label3:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public static org.apache.xml.serialize.SerializerFactory getSerializerFactory(java.lang.String)
    {
        org.apache.xml.serialize.SerializerFactory $r3;
        java.lang.Object $r2;
        java.lang.String r0;
        java.util.Hashtable $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.xml.serialize.SerializerFactory: java.util.Hashtable _factories>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.xml.serialize.SerializerFactory) $r2;

        return $r3;
    }

    protected abstract java.lang.String getSupportedMethod();

    public abstract org.apache.xml.serialize.Serializer makeSerializer(org.apache.xml.serialize.OutputFormat);

    public abstract org.apache.xml.serialize.Serializer makeSerializer(java.io.Writer, org.apache.xml.serialize.OutputFormat);

    public abstract org.apache.xml.serialize.Serializer makeSerializer(java.io.OutputStream, org.apache.xml.serialize.OutputFormat) throws java.io.UnsupportedEncodingException;

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        org.apache.xml.serialize.SerializerFactory $r15;
        java.util.StringTokenizer $r6;
        java.lang.String $r5, $r7, $r12, $r14;
        java.util.Hashtable $r0, $r11, $r13;
        boolean $z0, $z1;
        java.lang.Exception $r16;
        java.lang.Class $r8, $r17;
        java.lang.Object $r10;
        java.lang.ClassLoader $r9;
        org.apache.xml.serialize.SerializerFactoryImpl $r1, $r2, $r3, $r4;

        <org.apache.xml.serialize.SerializerFactory: java.lang.String FactoriesProperty> = "org.apache.xml.serialize.factories";

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.apache.xml.serialize.SerializerFactory: java.util.Hashtable _factories> = $r0;

        $r1 = new org.apache.xml.serialize.SerializerFactoryImpl;

        specialinvoke $r1.<org.apache.xml.serialize.SerializerFactoryImpl: void <init>(java.lang.String)>("xml");

        staticinvoke <org.apache.xml.serialize.SerializerFactory: void registerSerializerFactory(org.apache.xml.serialize.SerializerFactory)>($r1);

        $r2 = new org.apache.xml.serialize.SerializerFactoryImpl;

        specialinvoke $r2.<org.apache.xml.serialize.SerializerFactoryImpl: void <init>(java.lang.String)>("html");

        staticinvoke <org.apache.xml.serialize.SerializerFactory: void registerSerializerFactory(org.apache.xml.serialize.SerializerFactory)>($r2);

        $r3 = new org.apache.xml.serialize.SerializerFactoryImpl;

        specialinvoke $r3.<org.apache.xml.serialize.SerializerFactoryImpl: void <init>(java.lang.String)>("xhtml");

        staticinvoke <org.apache.xml.serialize.SerializerFactory: void registerSerializerFactory(org.apache.xml.serialize.SerializerFactory)>($r3);

        $r4 = new org.apache.xml.serialize.SerializerFactoryImpl;

        specialinvoke $r4.<org.apache.xml.serialize.SerializerFactoryImpl: void <init>(java.lang.String)>("text");

        staticinvoke <org.apache.xml.serialize.SerializerFactory: void registerSerializerFactory(org.apache.xml.serialize.SerializerFactory)>($r4);

        $r5 = staticinvoke <org.apache.xml.serialize.SecuritySupport: java.lang.String getSystemProperty(java.lang.String)>("org.apache.xml.serialize.factories");

        if $r5 == null goto label8;

        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r5, " ;,:");

        goto label7;

     label1:
        $r7 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label2:
        $r8 = <org.apache.xml.serialize.SerializerFactory: java.lang.Class class$org$apache$xml$serialize$SerializerFactory>;

        if $r8 != null goto label3;

        $r17 = staticinvoke <org.apache.xml.serialize.SerializerFactory: java.lang.Class class$(java.lang.String)>("org.apache.xml.serialize.SerializerFactory");

        <org.apache.xml.serialize.SerializerFactory: java.lang.Class class$org$apache$xml$serialize$SerializerFactory> = $r17;

        goto label4;

     label3:
        $r17 = <org.apache.xml.serialize.SerializerFactory: java.lang.Class class$org$apache$xml$serialize$SerializerFactory>;

     label4:
        $r9 = virtualinvoke $r17.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r10 = staticinvoke <org.apache.xml.serialize.ObjectFactory: java.lang.Object newInstance(java.lang.String,java.lang.ClassLoader,boolean)>($r7, $r9, 1);

        $r15 = (org.apache.xml.serialize.SerializerFactory) $r10;

        $r11 = <org.apache.xml.serialize.SerializerFactory: java.util.Hashtable _factories>;

        $r12 = virtualinvoke $r15.<org.apache.xml.serialize.SerializerFactory: java.lang.String getSupportedMethod()>();

        $z0 = virtualinvoke $r11.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r12);

        if $z0 == 0 goto label5;

        $r13 = <org.apache.xml.serialize.SerializerFactory: java.util.Hashtable _factories>;

        $r14 = virtualinvoke $r15.<org.apache.xml.serialize.SerializerFactory: java.lang.String getSupportedMethod()>();

        virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

     label5:
        goto label7;

     label6:
        $r16 := @caughtexception;

     label7:
        $z1 = virtualinvoke $r6.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label5 with label6;
    }
}
