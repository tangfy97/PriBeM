public class org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper extends java.lang.Object implements org.apache.batik.bridge.UserAgent
{
    protected org.apache.batik.bridge.UserAgent userAgent;

    public void <init>(org.apache.batik.bridge.UserAgent)
    {
        org.apache.batik.bridge.UserAgent r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r1 := @parameter0: org.apache.batik.bridge.UserAgent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent> = r1;

        return;
    }

    public org.apache.batik.gvt.event.EventDispatcher getEventDispatcher()
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$1$Query $r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;
        org.apache.batik.gvt.event.EventDispatcher $r2, $r4;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: org.apache.batik.gvt.event.EventDispatcher getEventDispatcher()>();

        return $r4;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$1$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$1$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r2 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$1$Query: org.apache.batik.gvt.event.EventDispatcher result>;

        return $r2;
    }

    public java.awt.geom.Dimension2D getViewportSize()
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$2$Query $r0;
        java.awt.geom.Dimension2D $r2, $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: java.awt.geom.Dimension2D getViewportSize()>();

        return $r4;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$2$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$2$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r2 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$2$Query: java.awt.geom.Dimension2D result>;

        return $r2;
    }

    public void displayError(java.lang.Exception)
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$22 $r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        java.lang.Exception r2;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: java.lang.Exception;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>(r2);

        goto label2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$22;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$22: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.lang.Exception)>(r1, r2);

        staticinvoke <java.awt.EventQueue: void invokeLater(java.lang.Runnable)>($r0);

     label2:
        return;
    }

    public void displayMessage(java.lang.String)
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$23 $r0;
        java.lang.String r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: void displayMessage(java.lang.String)>(r2);

        goto label2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$23;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$23: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.lang.String)>(r1, r2);

        staticinvoke <java.awt.EventQueue: void invokeLater(java.lang.Runnable)>($r0);

     label2:
        return;
    }

    public void showAlert(java.lang.String)
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$24 $r1;
        java.lang.String r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r0;
        boolean $z0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: void showAlert(java.lang.String)>(r2);

        goto label2;

     label1:
        $r1 = new org.apache.batik.swing.svg.AbstractJSVGComponent$24;

        specialinvoke $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$24: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.lang.String)>(r0, r2);

        virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r1);

     label2:
        return;
    }

    public java.lang.String showPrompt(java.lang.String)
    {
        org.apache.batik.bridge.UserAgent $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$3$Query $r0;
        java.lang.String r2, $r3, $r5;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r4 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.bridge.UserAgent: java.lang.String showPrompt(java.lang.String)>(r2);

        return $r5;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$3$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$3$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.lang.String)>(r1, r2);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r3 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$3$Query: java.lang.String result>;

        return $r3;
    }

    public java.lang.String showPrompt(java.lang.String, java.lang.String)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$4$Query $r0;
        org.apache.batik.bridge.UserAgent $r5;
        java.lang.String r2, r3, $r4, $r6;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r5 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r6 = interfaceinvoke $r5.<org.apache.batik.bridge.UserAgent: java.lang.String showPrompt(java.lang.String,java.lang.String)>(r2, r3);

        return $r6;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$4$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$4$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.lang.String,java.lang.String)>(r1, r2, r3);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r4 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$4$Query: java.lang.String result>;

        return $r4;
    }

    public boolean showConfirm(java.lang.String)
    {
        org.apache.batik.bridge.UserAgent $r3;
        java.lang.String r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$5$Query $r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $z2 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: boolean showConfirm(java.lang.String)>(r2);

        return $z2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$5$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$5$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.lang.String)>(r1, r2);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $z1 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$5$Query: boolean result>;

        return $z1;
    }

    public float getPixelUnitToMillimeter()
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$6$Query $r0;
        float $f0, $f1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $f1 = interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: float getPixelUnitToMillimeter()>();

        return $f1;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$6$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$6$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $f0 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$6$Query: float result>;

        return $f0;
    }

    public float getPixelToMM()
    {
        float $f0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r0;

        r0 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $f0 = virtualinvoke r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public java.lang.String getDefaultFontFamily()
    {
        org.apache.batik.bridge.UserAgent $r3;
        java.lang.String $r2, $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$7$Query $r0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: java.lang.String getDefaultFontFamily()>();

        return $r4;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$7$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$7$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r2 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$7$Query: java.lang.String result>;

        return $r2;
    }

    public float getMediumFontSize()
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$8$Query $r0;
        float $f0, $f1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $f1 = interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: float getMediumFontSize()>();

        return $f1;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$8$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$8$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $f0 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$8$Query: float result>;

        return $f0;
    }

    public float getLighterFontWeight(float)
    {
        org.apache.batik.bridge.UserAgent $r2;
        float f0, $f1, $f2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$9$Query $r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $f2 = interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: float getLighterFontWeight(float)>(f0);

        return $f2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$9$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$9$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,float)>(r1, f0);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $f1 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$9$Query: float result>;

        return $f1;
    }

    public float getBolderFontWeight(float)
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$10$Query $r0;
        float f0, $f1, $f2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $f2 = interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: float getBolderFontWeight(float)>(f0);

        return $f2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$10$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$10$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,float)>(r1, f0);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $f1 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$10$Query: float result>;

        return $f1;
    }

    public java.lang.String getLanguages()
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$11$Query $r0;
        java.lang.String $r2, $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: java.lang.String getLanguages()>();

        return $r4;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$11$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$11$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r2 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$11$Query: java.lang.String result>;

        return $r2;
    }

    public java.lang.String getUserStyleSheetURI()
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$12$Query $r0;
        java.lang.String $r2, $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: java.lang.String getUserStyleSheetURI()>();

        return $r4;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$12$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$12$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r2 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$12$Query: java.lang.String result>;

        return $r2;
    }

    public void openLink(org.w3c.dom.svg.SVGAElement)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$25 $r0;
        org.apache.batik.bridge.UserAgent $r3;
        org.w3c.dom.svg.SVGAElement r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: org.w3c.dom.svg.SVGAElement;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: void openLink(org.w3c.dom.svg.SVGAElement)>(r2);

        goto label2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$25;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$25: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,org.w3c.dom.svg.SVGAElement)>(r1, r2);

        staticinvoke <java.awt.EventQueue: void invokeLater(java.lang.Runnable)>($r0);

     label2:
        return;
    }

    public void setSVGCursor(java.awt.Cursor)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$26 $r0;
        org.apache.batik.bridge.UserAgent $r3;
        java.awt.Cursor r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: java.awt.Cursor;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: void setSVGCursor(java.awt.Cursor)>(r2);

        goto label2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$26;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$26: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.awt.Cursor)>(r1, r2);

        staticinvoke <java.awt.EventQueue: void invokeLater(java.lang.Runnable)>($r0);

     label2:
        return;
    }

    public void setTextSelection(org.apache.batik.gvt.text.Mark, org.apache.batik.gvt.text.Mark)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$27 $r0;
        org.apache.batik.bridge.UserAgent $r4;
        org.apache.batik.gvt.text.Mark r2, r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: org.apache.batik.gvt.text.Mark;

        r3 := @parameter1: org.apache.batik.gvt.text.Mark;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r4 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r4.<org.apache.batik.bridge.UserAgent: void setTextSelection(org.apache.batik.gvt.text.Mark,org.apache.batik.gvt.text.Mark)>(r2, r3);

        goto label2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$27;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$27: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,org.apache.batik.gvt.text.Mark,org.apache.batik.gvt.text.Mark)>(r1, r2, r3);

        staticinvoke <java.awt.EventQueue: void invokeLater(java.lang.Runnable)>($r0);

     label2:
        return;
    }

    public void deselectAll()
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$28 $r0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: void deselectAll()>();

        goto label2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$28;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$28: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        staticinvoke <java.awt.EventQueue: void invokeLater(java.lang.Runnable)>($r0);

     label2:
        return;
    }

    public java.lang.String getXMLParserClassName()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$13$Query $r0;
        org.apache.batik.bridge.UserAgent $r3;
        java.lang.String $r2, $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: java.lang.String getXMLParserClassName()>();

        return $r4;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$13$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$13$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r2 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$13$Query: java.lang.String result>;

        return $r2;
    }

    public boolean isXMLParserValidating()
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$14$Query $r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $z2 = interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: boolean isXMLParserValidating()>();

        return $z2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$14$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$14$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $z1 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$14$Query: boolean result>;

        return $z1;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        java.awt.geom.AffineTransform $r2, $r4;
        boolean $z0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$15$Query $r0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: java.awt.geom.AffineTransform getTransform()>();

        return $r4;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$15$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$15$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r2 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$15$Query: java.awt.geom.AffineTransform result>;

        return $r2;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$16$Query $r1;
        java.awt.geom.AffineTransform r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r2;
        boolean $z0;

        r2 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r0 := @parameter0: java.awt.geom.AffineTransform;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: void setTransform(java.awt.geom.AffineTransform)>(r0);

        goto label2;

     label1:
        $r1 = new org.apache.batik.swing.svg.AbstractJSVGComponent$16$Query;

        specialinvoke $r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$16$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.awt.geom.AffineTransform)>(r2, r0);

        virtualinvoke r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r1);

     label2:
        return;
    }

    public java.lang.String getMedia()
    {
        org.apache.batik.bridge.UserAgent $r3;
        java.lang.String $r2, $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$17$Query $r0;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: java.lang.String getMedia()>();

        return $r4;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$17$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$17$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r2 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$17$Query: java.lang.String result>;

        return $r2;
    }

    public java.lang.String getAlternateStyleSheet()
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$18$Query $r0;
        java.lang.String $r2, $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: java.lang.String getAlternateStyleSheet()>();

        return $r4;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$18$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$18$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r2 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$18$Query: java.lang.String result>;

        return $r2;
    }

    public java.awt.Point getClientAreaLocationOnScreen()
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$19$Query $r0;
        org.apache.batik.bridge.UserAgent $r3;
        java.awt.Point $r2, $r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: java.awt.Point getClientAreaLocationOnScreen()>();

        return $r4;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$19$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$19$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper)>(r1);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r2 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$19$Query: java.awt.Point result>;

        return $r2;
    }

    public boolean hasFeature(java.lang.String)
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$20$Query $r0;
        java.lang.String r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $z2 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: boolean hasFeature(java.lang.String)>(r2);

        return $z2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$20$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$20$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.lang.String)>(r1, r2);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $z1 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$20$Query: boolean result>;

        return $z1;
    }

    public boolean supportExtension(java.lang.String)
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$21$Query $r0;
        java.lang.String r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $z2 = interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: boolean supportExtension(java.lang.String)>(r2);

        return $z2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$21$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$21$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.lang.String)>(r1, r2);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $z1 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$21$Query: boolean result>;

        return $z1;
    }

    public void registerExtension(org.apache.batik.bridge.BridgeExtension)
    {
        org.apache.batik.bridge.UserAgent $r3;
        org.apache.batik.bridge.BridgeExtension r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$29 $r0;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: org.apache.batik.bridge.BridgeExtension;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r3.<org.apache.batik.bridge.UserAgent: void registerExtension(org.apache.batik.bridge.BridgeExtension)>(r2);

        goto label2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$29;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$29: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,org.apache.batik.bridge.BridgeExtension)>(r1, r2);

        staticinvoke <java.awt.EventQueue: void invokeLater(java.lang.Runnable)>($r0);

     label2:
        return;
    }

    public void handleElement(org.w3c.dom.Element, java.lang.Object)
    {
        org.apache.batik.bridge.UserAgent $r4;
        org.w3c.dom.Element r2;
        org.apache.batik.swing.svg.AbstractJSVGComponent$30 $r0;
        java.lang.Object r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r4 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r4.<org.apache.batik.bridge.UserAgent: void handleElement(org.w3c.dom.Element,java.lang.Object)>(r2, r3);

        goto label2;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$30;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$30: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,org.w3c.dom.Element,java.lang.Object)>(r1, r2, r3);

        staticinvoke <java.awt.EventQueue: void invokeLater(java.lang.Runnable)>($r0);

     label2:
        return;
    }

    public org.apache.batik.bridge.ScriptSecurity getScriptSecurity(java.lang.String, org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.bridge.ScriptSecurity $r5, $r7;
        org.apache.batik.swing.svg.AbstractJSVGComponent$22$Query $r3;
        org.apache.batik.bridge.UserAgent $r6;
        org.apache.batik.util.ParsedURL r1, r2;
        java.lang.String r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r4;
        boolean $z0;

        r4 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.batik.util.ParsedURL;

        r2 := @parameter2: org.apache.batik.util.ParsedURL;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r6 = r4.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r7 = interfaceinvoke $r6.<org.apache.batik.bridge.UserAgent: org.apache.batik.bridge.ScriptSecurity getScriptSecurity(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r0, r1, r2);

        return $r7;

     label1:
        $r3 = new org.apache.batik.swing.svg.AbstractJSVGComponent$22$Query;

        specialinvoke $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent$22$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r4, r0, r1, r2);

        virtualinvoke r4.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r3);

        $r5 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent$22$Query: org.apache.batik.bridge.ScriptSecurity result>;

        return $r5;
    }

    public void checkLoadScript(java.lang.String, org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL) throws java.lang.SecurityException
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$23$Query $r3;
        org.apache.batik.bridge.UserAgent $r8;
        org.apache.batik.util.ParsedURL r1, r2;
        java.lang.SecurityException $r5, $r6, $r7;
        java.lang.String r0;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r4;
        boolean $z0;

        r4 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.batik.util.ParsedURL;

        r2 := @parameter2: org.apache.batik.util.ParsedURL;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r8 = r4.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r8.<org.apache.batik.bridge.UserAgent: void checkLoadScript(java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r0, r1, r2);

        goto label2;

     label1:
        $r3 = new org.apache.batik.swing.svg.AbstractJSVGComponent$23$Query;

        specialinvoke $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent$23$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,java.lang.String,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r4, r0, r1, r2);

        virtualinvoke r4.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r3);

        $r5 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent$23$Query: java.lang.SecurityException se>;

        if $r5 == null goto label2;

        $r6 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent$23$Query: java.lang.SecurityException se>;

        virtualinvoke $r6.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        $r7 = $r3.<org.apache.batik.swing.svg.AbstractJSVGComponent$23$Query: java.lang.SecurityException se>;

        throw $r7;

     label2:
        return;
    }

    public org.apache.batik.bridge.ExternalResourceSecurity getExternalResourceSecurity(org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.bridge.UserAgent $r5;
        org.apache.batik.util.ParsedURL r0, r1;
        org.apache.batik.swing.svg.AbstractJSVGComponent$24$Query $r2;
        org.apache.batik.bridge.ExternalResourceSecurity $r4, $r6;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r3;
        boolean $z0;

        r3 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r0 := @parameter0: org.apache.batik.util.ParsedURL;

        r1 := @parameter1: org.apache.batik.util.ParsedURL;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r5 = r3.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r6 = interfaceinvoke $r5.<org.apache.batik.bridge.UserAgent: org.apache.batik.bridge.ExternalResourceSecurity getExternalResourceSecurity(org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r0, r1);

        return $r6;

     label1:
        $r2 = new org.apache.batik.swing.svg.AbstractJSVGComponent$24$Query;

        specialinvoke $r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$24$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r3, r0, r1);

        virtualinvoke r3.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r2);

        $r4 = $r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$24$Query: org.apache.batik.bridge.ExternalResourceSecurity result>;

        return $r4;
    }

    public void checkLoadExternalResource(org.apache.batik.util.ParsedURL, org.apache.batik.util.ParsedURL) throws java.lang.SecurityException
    {
        org.apache.batik.bridge.UserAgent $r7;
        org.apache.batik.util.ParsedURL r0, r1;
        java.lang.SecurityException $r4, $r5, $r6;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r3;
        org.apache.batik.swing.svg.AbstractJSVGComponent$25$Query $r2;
        boolean $z0;

        r3 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r0 := @parameter0: org.apache.batik.util.ParsedURL;

        r1 := @parameter1: org.apache.batik.util.ParsedURL;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r7 = r3.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        interfaceinvoke $r7.<org.apache.batik.bridge.UserAgent: void checkLoadExternalResource(org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r0, r1);

        goto label2;

     label1:
        $r2 = new org.apache.batik.swing.svg.AbstractJSVGComponent$25$Query;

        specialinvoke $r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$25$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r3, r0, r1);

        virtualinvoke r3.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r2);

        $r4 = $r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$25$Query: java.lang.SecurityException se>;

        if $r4 == null goto label2;

        $r5 = $r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$25$Query: java.lang.SecurityException se>;

        virtualinvoke $r5.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        $r6 = $r2.<org.apache.batik.swing.svg.AbstractJSVGComponent$25$Query: java.lang.SecurityException se>;

        throw $r6;

     label2:
        return;
    }

    public org.w3c.dom.svg.SVGDocument getBrokenLinkDocument(org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        org.w3c.dom.svg.SVGDocument $r6, $r9;
        org.apache.batik.swing.svg.AbstractJSVGComponent$26$Query $r0;
        java.lang.RuntimeException $r5, $r7;
        org.apache.batik.bridge.UserAgent $r8;
        org.w3c.dom.Element r2;
        java.lang.String r3, r4;
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r1;
        boolean $z0;

        r1 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r2 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $z0 = staticinvoke <java.awt.EventQueue: boolean isDispatchThread()>();

        if $z0 == 0 goto label1;

        $r8 = r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: org.apache.batik.bridge.UserAgent userAgent>;

        $r9 = interfaceinvoke $r8.<org.apache.batik.bridge.UserAgent: org.w3c.dom.svg.SVGDocument getBrokenLinkDocument(org.w3c.dom.Element,java.lang.String,java.lang.String)>(r2, r3, r4);

        return $r9;

     label1:
        $r0 = new org.apache.batik.swing.svg.AbstractJSVGComponent$26$Query;

        specialinvoke $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$26$Query: void <init>(org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper,org.w3c.dom.Element,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        virtualinvoke r1.<org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper: void invokeAndWait(java.lang.Runnable)>($r0);

        $r5 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$26$Query: java.lang.RuntimeException rex>;

        if $r5 == null goto label2;

        $r7 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$26$Query: java.lang.RuntimeException rex>;

        throw $r7;

     label2:
        $r6 = $r0.<org.apache.batik.swing.svg.AbstractJSVGComponent$26$Query: org.w3c.dom.svg.SVGDocument doc>;

        return $r6;
    }

    protected void invokeAndWait(java.lang.Runnable)
    {
        org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper r2;
        java.lang.Runnable r0;
        java.lang.Exception $r1;

        r2 := @this: org.apache.batik.swing.svg.AbstractJSVGComponent$BridgeUserAgentWrapper;

        r0 := @parameter0: java.lang.Runnable;

     label1:
        staticinvoke <java.awt.EventQueue: void invokeAndWait(java.lang.Runnable)>(r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
