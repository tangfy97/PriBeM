public abstract class org.apache.log4j.jmx.AbstractDynamicMBean extends java.lang.Object implements javax.management.DynamicMBean, javax.management.MBeanRegistration
{
    java.lang.String dClassName;
    javax.management.MBeanServer server;
    private final java.util.Vector mbeanList;

    public void <init>()
    {
        org.apache.log4j.jmx.AbstractDynamicMBean r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.log4j.jmx.AbstractDynamicMBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.log4j.jmx.AbstractDynamicMBean: java.util.Vector mbeanList> = $r1;

        return;
    }

    protected static java.lang.String getAppenderName(org.apache.log4j.Appender)
    {
        org.apache.log4j.Appender r0;
        int $i0;
        java.lang.String $r1, $r2, r3;

        r0 := @parameter0: org.apache.log4j.Appender;

        $r1 = interfaceinvoke r0.<org.apache.log4j.Appender: java.lang.String getName()>();

        r3 = $r1;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        return r3;
    }

    public javax.management.AttributeList getAttributes(java.lang.String[])
    {
        java.lang.String[] r0;
        javax.management.AttributeList $r1;
        javax.management.Attribute $r5;
        java.lang.StringBuffer $r9, $r10, $r12;
        int $i0, $i1, i2;
        java.lang.String $r3, $r6, $r11, $r13;
        org.apache.log4j.jmx.AbstractDynamicMBean r2;
        java.lang.RuntimeException $r14;
        java.lang.IllegalArgumentException $r8;
        javax.management.JMException $r15;
        java.lang.Object $r4;
        javax.management.RuntimeOperationsException $r7;

        r2 := @this: org.apache.log4j.jmx.AbstractDynamicMBean;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        $r7 = new javax.management.RuntimeOperationsException;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("attributeNames[] cannot be null");

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot invoke a getter of ");

        $r11 = r2.<org.apache.log4j.jmx.AbstractDynamicMBean: java.lang.String dClassName>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r8, $r13);

        throw $r7;

     label1:
        $r1 = new javax.management.AttributeList;

        specialinvoke $r1.<javax.management.AttributeList: void <init>()>();

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        return $r1;

     label2:
        i2 = 0;

     label3:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label9;

     label4:
        $r3 = r0[i2];

        $r4 = interfaceinvoke r2.<javax.management.DynamicMBean: java.lang.Object getAttribute(java.lang.String)>($r3);

        $r5 = new javax.management.Attribute;

        $r6 = r0[i2];

        specialinvoke $r5.<javax.management.Attribute: void <init>(java.lang.String,java.lang.Object)>($r6, $r4);

        virtualinvoke $r1.<javax.management.AttributeList: void add(javax.management.Attribute)>($r5);

     label5:
        goto label8;

     label6:
        $r15 := @caughtexception;

        virtualinvoke $r15.<java.lang.Throwable: void printStackTrace()>();

        goto label8;

     label7:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Throwable: void printStackTrace()>();

     label8:
        i2 = i2 + 1;

        goto label3;

     label9:
        return $r1;

        catch javax.management.JMException from label4 to label5 with label6;
        catch java.lang.RuntimeException from label4 to label5 with label7;
    }

    public javax.management.AttributeList setAttributes(javax.management.AttributeList)
    {
        javax.management.AttributeList r0, $r1;
        javax.management.Attribute r4, $r8;
        java.lang.StringBuffer $r11, $r12, $r14;
        java.lang.String $r6, $r13, $r15;
        boolean $z0, $z1;
        org.apache.log4j.jmx.AbstractDynamicMBean r5;
        java.util.Iterator $r2;
        java.lang.RuntimeException $r16;
        java.lang.IllegalArgumentException $r10;
        javax.management.JMException $r17;
        java.lang.Object $r3, $r7;
        javax.management.RuntimeOperationsException $r9;

        r5 := @this: org.apache.log4j.jmx.AbstractDynamicMBean;

        r0 := @parameter0: javax.management.AttributeList;

        if r0 != null goto label1;

        $r9 = new javax.management.RuntimeOperationsException;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("AttributeList attributes cannot be null");

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot invoke a setter of ");

        $r13 = r5.<org.apache.log4j.jmx.AbstractDynamicMBean: java.lang.String dClassName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r10, $r15);

        throw $r9;

     label1:
        $r1 = new javax.management.AttributeList;

        specialinvoke $r1.<javax.management.AttributeList: void <init>()>();

        $z0 = virtualinvoke r0.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        $r2 = virtualinvoke r0.<java.util.AbstractList: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (javax.management.Attribute) $r3;

     label4:
        interfaceinvoke r5.<javax.management.DynamicMBean: void setAttribute(javax.management.Attribute)>(r4);

        $r6 = virtualinvoke r4.<javax.management.Attribute: java.lang.String getName()>();

        $r7 = interfaceinvoke r5.<javax.management.DynamicMBean: java.lang.Object getAttribute(java.lang.String)>($r6);

        $r8 = new javax.management.Attribute;

        specialinvoke $r8.<javax.management.Attribute: void <init>(java.lang.String,java.lang.Object)>($r6, $r7);

        virtualinvoke $r1.<javax.management.AttributeList: void add(javax.management.Attribute)>($r8);

     label5:
        goto label8;

     label6:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.lang.Throwable: void printStackTrace()>();

        goto label8;

     label7:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.lang.Throwable: void printStackTrace()>();

     label8:
        goto label3;

     label9:
        return $r1;

        catch javax.management.JMException from label4 to label5 with label6;
        catch java.lang.RuntimeException from label4 to label5 with label7;
    }

    protected abstract org.apache.log4j.Logger getLogger();

    public void postDeregister()
    {
        org.apache.log4j.jmx.AbstractDynamicMBean r0;
        org.apache.log4j.Logger $r1;

        r0 := @this: org.apache.log4j.jmx.AbstractDynamicMBean;

        $r1 = virtualinvoke r0.<org.apache.log4j.jmx.AbstractDynamicMBean: org.apache.log4j.Logger getLogger()>();

        virtualinvoke $r1.<org.apache.log4j.Category: void debug(java.lang.Object)>("postDeregister is called.");

        return;
    }

    public void postRegister(java.lang.Boolean)
    {
        org.apache.log4j.jmx.AbstractDynamicMBean r0;
        java.lang.Boolean r1;

        r0 := @this: org.apache.log4j.jmx.AbstractDynamicMBean;

        r1 := @parameter0: java.lang.Boolean;

        return;
    }

    public javax.management.ObjectName preRegister(javax.management.MBeanServer, javax.management.ObjectName)
    {
        org.apache.log4j.jmx.AbstractDynamicMBean r0;
        javax.management.ObjectName r7;
        org.apache.log4j.Logger $r1;
        java.lang.StringBuffer $r2, $r3, $r5, $r6, $r8;
        javax.management.MBeanServer r4;
        java.lang.String $r9;

        r0 := @this: org.apache.log4j.jmx.AbstractDynamicMBean;

        r4 := @parameter0: javax.management.MBeanServer;

        r7 := @parameter1: javax.management.ObjectName;

        $r1 = virtualinvoke r0.<org.apache.log4j.jmx.AbstractDynamicMBean: org.apache.log4j.Logger getLogger()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("preRegister called. Server=");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", name=");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.log4j.Category: void debug(java.lang.Object)>($r9);

        r0.<org.apache.log4j.jmx.AbstractDynamicMBean: javax.management.MBeanServer server> = r4;

        return r7;
    }

    protected void registerMBean(java.lang.Object, javax.management.ObjectName) throws javax.management.InstanceAlreadyExistsException, javax.management.MBeanRegistrationException, javax.management.NotCompliantMBeanException
    {
        org.apache.log4j.jmx.AbstractDynamicMBean r0;
        java.util.Vector $r4;
        javax.management.MBeanServer $r3;
        java.lang.Object r1;
        javax.management.ObjectName r2;

        r0 := @this: org.apache.log4j.jmx.AbstractDynamicMBean;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: javax.management.ObjectName;

        $r3 = r0.<org.apache.log4j.jmx.AbstractDynamicMBean: javax.management.MBeanServer server>;

        interfaceinvoke $r3.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>(r1, r2);

        $r4 = r0.<org.apache.log4j.jmx.AbstractDynamicMBean: java.util.Vector mbeanList>;

        virtualinvoke $r4.<java.util.Vector: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void preDeregister()
    {
        java.util.Enumeration $r3;
        org.apache.log4j.Logger $r1, $r8, $r15;
        java.util.Vector $r2;
        java.lang.StringBuffer $r9, $r10, $r12, $r16, $r17, $r19;
        javax.management.MBeanServer $r6;
        javax.management.MBeanRegistrationException $r7;
        java.lang.String $r11, $r13, $r18, $r20;
        javax.management.InstanceNotFoundException $r14;
        boolean $z0;
        org.apache.log4j.jmx.AbstractDynamicMBean r0;
        javax.management.ObjectName r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.log4j.jmx.AbstractDynamicMBean;

        $r1 = virtualinvoke r0.<org.apache.log4j.jmx.AbstractDynamicMBean: org.apache.log4j.Logger getLogger()>();

        virtualinvoke $r1.<org.apache.log4j.Category: void debug(java.lang.Object)>("preDeregister called.");

        $r2 = r0.<org.apache.log4j.jmx.AbstractDynamicMBean: java.util.Vector mbeanList>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (javax.management.ObjectName) $r4;

     label2:
        $r6 = r0.<org.apache.log4j.jmx.AbstractDynamicMBean: javax.management.MBeanServer server>;

        interfaceinvoke $r6.<javax.management.MBeanServer: void unregisterMBean(javax.management.ObjectName)>(r5);

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        $r15 = virtualinvoke r0.<org.apache.log4j.jmx.AbstractDynamicMBean: org.apache.log4j.Logger getLogger()>();

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Missing MBean ");

        $r18 = virtualinvoke r5.<javax.management.ObjectName: java.lang.String getCanonicalName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r15.<org.apache.log4j.Category: void warn(java.lang.Object)>($r20);

        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<org.apache.log4j.jmx.AbstractDynamicMBean: org.apache.log4j.Logger getLogger()>();

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed unregistering ");

        $r11 = virtualinvoke r5.<javax.management.ObjectName: java.lang.String getCanonicalName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.log4j.Category: void warn(java.lang.Object)>($r13);

     label6:
        goto label1;

     label7:
        return;

        catch javax.management.InstanceNotFoundException from label2 to label3 with label4;
        catch javax.management.MBeanRegistrationException from label2 to label3 with label5;
    }

    public abstract javax.management.MBeanInfo getMBeanInfo();

    public abstract java.lang.Object invoke(java.lang.String, java.lang.Object[], java.lang.String[]) throws javax.management.MBeanException, javax.management.ReflectionException;

    public abstract void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.InvalidAttributeValueException, javax.management.MBeanException, javax.management.ReflectionException;

    public abstract java.lang.Object getAttribute(java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException;
}
