public class org.apache.xpath.axes.ChildTestIterator extends org.apache.xpath.axes.BasicTestIterator
{
    protected transient org.apache.xml.dtm.DTMAxisTraverser m_traverser;

    void <init>(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        int i0, i1;
        org.apache.xpath.compiler.Compiler r1;
        org.apache.xpath.axes.ChildTestIterator r0;

        r0 := @this: org.apache.xpath.axes.ChildTestIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.axes.BasicTestIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r1, i0, i1);

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMAxisTraverser)
    {
        org.apache.xml.dtm.DTMAxisTraverser r1;
        org.apache.xpath.axes.ChildTestIterator r0;

        r0 := @this: org.apache.xpath.axes.ChildTestIterator;

        r1 := @parameter0: org.apache.xml.dtm.DTMAxisTraverser;

        specialinvoke r0.<org.apache.xpath.axes.BasicTestIterator: void <init>(org.apache.xml.utils.PrefixResolver)>(null);

        r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = r1;

        return;
    }

    protected int getNextNode()
    {
        org.apache.xpath.axes.ChildTestIterator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        org.apache.xml.dtm.DTMAxisTraverser $r1, $r2;

        r0 := @this: org.apache.xpath.axes.ChildTestIterator;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        $i7 = (int) -1;

        if $i7 != $i0 goto label1;

        $r2 = r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i4 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        $i5 = virtualinvoke $r2.<org.apache.xml.dtm.DTMAxisTraverser: int first(int)>($i4);

        goto label2;

     label1:
        $r1 = r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i2 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        $i1 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        $i5 = virtualinvoke $r1.<org.apache.xml.dtm.DTMAxisTraverser: int next(int,int)>($i2, $i1);

     label2:
        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i5;

        $i3 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        return $i3;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xml.dtm.DTMIterator $r1;
        org.apache.xml.dtm.DTMAxisTraverser $r3;
        org.apache.xpath.axes.ChildTestIterator r0, r2;

        r0 := @this: org.apache.xpath.axes.ChildTestIterator;

        $r1 = specialinvoke r0.<org.apache.xpath.axes.BasicTestIterator: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        r2 = (org.apache.xpath.axes.ChildTestIterator) $r1;

        $r3 = r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        r2.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = $r3;

        return r2;
    }

    public void setRoot(int, java.lang.Object)
    {
        int i0;
        org.apache.xml.dtm.DTM $r2;
        java.lang.Object r1;
        org.apache.xml.dtm.DTMAxisTraverser $r3;
        org.apache.xpath.axes.ChildTestIterator r0;

        r0 := @this: org.apache.xpath.axes.ChildTestIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void setRoot(int,java.lang.Object)>(i0, r1);

        $r2 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM m_cdtm>;

        $r3 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)>(3);

        r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = $r3;

        return;
    }

    public int getAxis()
    {
        org.apache.xpath.axes.ChildTestIterator r0;

        r0 := @this: org.apache.xpath.axes.ChildTestIterator;

        return 3;
    }

    public void detach()
    {
        org.apache.xpath.axes.ChildTestIterator r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.ChildTestIterator;

        $z0 = r0.<org.apache.xpath.axes.LocPathIterator: boolean m_allowDetach>;

        if $z0 == 0 goto label1;

        r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = null;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void detach()>();

     label1:
        return;
    }
}
