public class org.apache.cxf.clustering.LoadDistributorTargetSelector extends org.apache.cxf.clustering.FailoverTargetSelector
{
    private static final java.util.logging.Logger LOG;
    private static final java.lang.String IS_DISTRIBUTED;
    private java.util.List addressList;
    private boolean failover;

    public void <init>()
    {
        org.apache.cxf.clustering.LoadDistributorTargetSelector r0;

        r0 := @this: org.apache.cxf.clustering.LoadDistributorTargetSelector;

        specialinvoke r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: void <init>(org.apache.cxf.transport.Conduit)>(null);

        return;
    }

    public void <init>(org.apache.cxf.transport.Conduit)
    {
        org.apache.cxf.clustering.LoadDistributorTargetSelector r0;
        org.apache.cxf.transport.Conduit r1;

        r0 := @this: org.apache.cxf.clustering.LoadDistributorTargetSelector;

        r1 := @parameter0: org.apache.cxf.transport.Conduit;

        specialinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector: void <init>(org.apache.cxf.transport.Conduit)>(r1);

        r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: boolean failover> = 1;

        return;
    }

    public boolean isFailover()
    {
        org.apache.cxf.clustering.LoadDistributorTargetSelector r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.clustering.LoadDistributorTargetSelector;

        $z0 = r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: boolean failover>;

        return $z0;
    }

    public void setFailover(boolean)
    {
        org.apache.cxf.clustering.LoadDistributorTargetSelector r0;
        boolean z0;

        r0 := @this: org.apache.cxf.clustering.LoadDistributorTargetSelector;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: boolean failover> = z0;

        return;
    }

    protected java.util.logging.Logger getLogger()
    {
        org.apache.cxf.clustering.LoadDistributorTargetSelector r1;
        java.util.logging.Logger $r0;

        r1 := @this: org.apache.cxf.clustering.LoadDistributorTargetSelector;

        $r0 = <org.apache.cxf.clustering.LoadDistributorTargetSelector: java.util.logging.Logger LOG>;

        return $r0;
    }

    public org.apache.cxf.transport.Conduit selectConduit(org.apache.cxf.message.Message)
    {
        org.apache.cxf.transport.Conduit $r9, $r15, $r16;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r6;
        java.util.Map $r4, $r7, $r13, $r14;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationKey $r2;
        java.lang.String $r10, $r12;
        boolean $z0;
        org.apache.cxf.service.model.EndpointInfo $r11;
        org.apache.cxf.message.Message r0;
        org.apache.cxf.message.Exchange $r1;
        org.apache.cxf.endpoint.Endpoint $r8;
        org.apache.cxf.clustering.LoadDistributorTargetSelector r3;
        java.lang.Object $r5;

        r3 := @this: org.apache.cxf.clustering.LoadDistributorTargetSelector;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r2 = new org.apache.cxf.clustering.FailoverTargetSelector$InvocationKey;

        specialinvoke $r2.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationKey: void <init>(org.apache.cxf.message.Exchange)>($r1);

        $r4 = r3.<org.apache.cxf.clustering.LoadDistributorTargetSelector: java.util.Map inProgress>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r6 = (org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext) $r5;

        if r6 == null goto label2;

        $r7 = virtualinvoke r6.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.Map getContext()>();

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>("org.apache.cxf.clustering.LoadDistributorTargetSelector.IS_DISTRIBUTED");

        if $z0 != 0 goto label2;

        $r8 = specialinvoke r3.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.endpoint.Endpoint getDistributionTarget(org.apache.cxf.message.Exchange,org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext)>($r1, r6);

        if $r8 == null goto label2;

        virtualinvoke r3.<org.apache.cxf.clustering.LoadDistributorTargetSelector: void setEndpoint(org.apache.cxf.endpoint.Endpoint)>($r8);

        $r9 = r3.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.transport.Conduit selectedConduit>;

        if $r9 == null goto label1;

        $r15 = r3.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.transport.Conduit selectedConduit>;

        interfaceinvoke $r15.<org.apache.cxf.transport.Conduit: void close()>();

        r3.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.transport.Conduit selectedConduit> = null;

     label1:
        $r10 = <org.apache.cxf.message.Message: java.lang.String ENDPOINT_ADDRESS>;

        $r11 = interfaceinvoke $r8.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r12 = virtualinvoke $r11.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r12);

        $r13 = virtualinvoke r6.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.Map getContext()>();

        virtualinvoke r3.<org.apache.cxf.clustering.LoadDistributorTargetSelector: void overrideAddressProperty(java.util.Map)>($r13);

        $r14 = virtualinvoke r6.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.Map getContext()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.apache.cxf.clustering.LoadDistributorTargetSelector.IS_DISTRIBUTED", null);

     label2:
        $r16 = virtualinvoke r3.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.transport.Conduit getSelectedConduit(org.apache.cxf.message.Message)>(r0);

        return $r16;
    }

    protected org.apache.cxf.endpoint.Endpoint getFailoverTarget(org.apache.cxf.message.Exchange, org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext)
    {
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;
        java.lang.String $r5, $r15;
        boolean $z0;
        org.apache.cxf.service.model.EndpointInfo $r7, $r14;
        org.apache.cxf.message.Exchange r9;
        java.util.List $r3, $r10, $r12, r16;
        org.apache.cxf.endpoint.Endpoint $r6, $r13, r17;
        org.apache.cxf.clustering.LoadDistributorTargetSelector r1;
        org.apache.cxf.clustering.FailoverStrategy $r2, $r4, $r8, $r11;

        r1 := @this: org.apache.cxf.clustering.LoadDistributorTargetSelector;

        r9 := @parameter0: org.apache.cxf.message.Exchange;

        r0 := @parameter1: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        $z0 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: boolean hasAlternates()>();

        if $z0 != 0 goto label2;

        $r8 = virtualinvoke r1.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r10 = interfaceinvoke $r8.<org.apache.cxf.clustering.FailoverStrategy: java.util.List getAlternateAddresses(org.apache.cxf.message.Exchange)>(r9);

        r16 = $r10;

        if $r10 == null goto label1;

        $r13 = interfaceinvoke r9.<org.apache.cxf.message.Exchange: org.apache.cxf.endpoint.Endpoint getEndpoint()>();

        $r14 = interfaceinvoke $r13.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r15 = virtualinvoke $r14.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        interfaceinvoke $r10.<java.util.List: boolean remove(java.lang.Object)>($r15);

        virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: void setAlternateAddresses(java.util.List)>($r10);

        goto label3;

     label1:
        $r11 = virtualinvoke r1.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r12 = interfaceinvoke $r11.<org.apache.cxf.clustering.FailoverStrategy: java.util.List getAlternateEndpoints(org.apache.cxf.message.Exchange)>(r9);

        virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: void setAlternateEndpoints(java.util.List)>($r12);

        goto label3;

     label2:
        r16 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List getAlternateAddresses()>();

     label3:
        r17 = null;

        if r16 == null goto label5;

        $r4 = virtualinvoke r1.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r5 = interfaceinvoke $r4.<org.apache.cxf.clustering.FailoverStrategy: java.lang.String selectAlternateAddress(java.util.List)>(r16);

        if $r5 == null goto label4;

        $r6 = virtualinvoke r1.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.endpoint.Endpoint getEndpoint()>();

        r17 = $r6;

        $r7 = interfaceinvoke $r6.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        virtualinvoke $r7.<org.apache.cxf.service.model.EndpointInfo: void setAddress(java.lang.String)>($r5);

     label4:
        goto label6;

     label5:
        $r2 = virtualinvoke r1.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r3 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List getAlternateEndpoints()>();

        r17 = interfaceinvoke $r2.<org.apache.cxf.clustering.FailoverStrategy: org.apache.cxf.endpoint.Endpoint selectAlternateEndpoint(java.util.List)>($r3);

     label6:
        return r17;
    }

    private org.apache.cxf.endpoint.Endpoint getDistributionTarget(org.apache.cxf.message.Exchange, org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext)
    {
        java.lang.NullPointerException $r17;
        boolean $z0, $z1, $z2;
        java.util.logging.Logger $r18;
        java.util.List $r1, $r3, $r6, $r9, $r11, $r16, $r28, r29;
        java.lang.StringBuilder $r19, $r20, $r23, $r24, $r26;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r7;
        java.lang.String $r13, $r25, $r27;
        org.apache.cxf.service.model.EndpointInfo $r15;
        org.apache.cxf.message.Exchange r5;
        org.apache.cxf.endpoint.Endpoint $r14, r30;
        org.apache.cxf.clustering.LoadDistributorTargetSelector r0;
        org.apache.cxf.clustering.FailoverStrategy $r2, $r4, $r8, $r10, $r12, $r21;
        java.lang.Class $r22;

        r0 := @this: org.apache.cxf.clustering.LoadDistributorTargetSelector;

        r5 := @parameter0: org.apache.cxf.message.Exchange;

        r7 := @parameter1: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        $r1 = r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: java.util.List addressList>;

        if $r1 == null goto label01;

        $r16 = r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: java.util.List addressList>;

        $z2 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label04;

     label01:
        $r2 = virtualinvoke r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r3 = interfaceinvoke $r2.<org.apache.cxf.clustering.FailoverStrategy: java.util.List getAlternateAddresses(org.apache.cxf.message.Exchange)>(null);

        r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: java.util.List addressList> = $r3;

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        $r18 = virtualinvoke r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: java.util.logging.Logger getLogger()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Strategy ");

        $r21 = virtualinvoke r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r22 = virtualinvoke $r21.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot handle a null argument to getAlternateAddresses: ");

        $r25 = virtualinvoke $r17.<java.lang.NullPointerException: java.lang.String toString()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.util.logging.Logger: void fine(java.lang.String)>($r27);

     label04:
        $r28 = r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: java.util.List addressList>;

        r29 = $r28;

        if $r28 == null goto label05;

        $z1 = interfaceinvoke $r28.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label07;

     label05:
        $r4 = virtualinvoke r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r6 = interfaceinvoke $r4.<org.apache.cxf.clustering.FailoverStrategy: java.util.List getAlternateAddresses(org.apache.cxf.message.Exchange)>(r5);

        r29 = $r6;

        if $r6 == null goto label06;

        virtualinvoke r7.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: void setAlternateAddresses(java.util.List)>($r6);

        goto label07;

     label06:
        $r8 = virtualinvoke r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r9 = interfaceinvoke $r8.<org.apache.cxf.clustering.FailoverStrategy: java.util.List getAlternateEndpoints(org.apache.cxf.message.Exchange)>(r5);

        virtualinvoke r7.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: void setAlternateEndpoints(java.util.List)>($r9);

     label07:
        r30 = null;

        if r29 == null goto label09;

        $z0 = interfaceinvoke r29.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label09;

        $r12 = virtualinvoke r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r13 = interfaceinvoke $r12.<org.apache.cxf.clustering.FailoverStrategy: java.lang.String selectAlternateAddress(java.util.List)>(r29);

        if $r13 == null goto label08;

        $r14 = virtualinvoke r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.endpoint.Endpoint getEndpoint()>();

        r30 = $r14;

        $r15 = interfaceinvoke $r14.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        virtualinvoke $r15.<org.apache.cxf.service.model.EndpointInfo: void setAddress(java.lang.String)>($r13);

     label08:
        goto label10;

     label09:
        $r10 = virtualinvoke r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r11 = virtualinvoke r7.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List getAlternateEndpoints()>();

        r30 = interfaceinvoke $r10.<org.apache.cxf.clustering.FailoverStrategy: org.apache.cxf.endpoint.Endpoint selectAlternateEndpoint(java.util.List)>($r11);

     label10:
        return r30;

        catch java.lang.NullPointerException from label01 to label02 with label03;
    }

    protected boolean requiresFailover(org.apache.cxf.message.Exchange)
    {
        org.apache.cxf.clustering.LoadDistributorTargetSelector r0;
        org.apache.cxf.message.Exchange r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.clustering.LoadDistributorTargetSelector;

        r1 := @parameter0: org.apache.cxf.message.Exchange;

        $z0 = r0.<org.apache.cxf.clustering.LoadDistributorTargetSelector: boolean failover>;

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector: boolean requiresFailover(org.apache.cxf.message.Exchange)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        <org.apache.cxf.clustering.LoadDistributorTargetSelector: java.lang.String IS_DISTRIBUTED> = "org.apache.cxf.clustering.LoadDistributorTargetSelector.IS_DISTRIBUTED";

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/clustering/LoadDistributorTargetSelector;");

        <org.apache.cxf.clustering.LoadDistributorTargetSelector: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
