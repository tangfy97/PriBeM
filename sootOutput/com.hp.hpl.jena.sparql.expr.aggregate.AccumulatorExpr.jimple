abstract class com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr extends java.lang.Object implements com.hp.hpl.jena.sparql.expr.aggregate.Accumulator
{
    private long count;
    protected long errorCount;
    private final com.hp.hpl.jena.sparql.expr.Expr expr;

    protected void <init>(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: long count> = 0L;

        r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: long errorCount> = 0L;

        r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: com.hp.hpl.jena.sparql.expr.Expr expr> = r1;

        return;
    }

    public final void accumulate(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r4;
        long $l0, $l1, $l2, $l3;
        com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r5;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: com.hp.hpl.jena.sparql.expr.Expr expr>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: void accumulate(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>($r4, r1, r2);

        $l0 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: long count>;

        $l1 = $l0 + 1L;

        r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: long count> = $l1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $l2 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: long errorCount>;

        $l3 = $l2 + 1L;

        r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: long errorCount> = $l3;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: void accumulateError(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

     label4:
        return;

        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label1 to label2 with label3;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue getValue()
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r1;
        byte $b1;
        long $l0;
        com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr;

        $l0 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: long errorCount>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: com.hp.hpl.jena.sparql.expr.NodeValue getAccValue()>();

        return $r1;

     label1:
        return null;
    }

    protected long getErrorCount()
    {
        long $l0;
        com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr;

        $l0 = r0.<com.hp.hpl.jena.sparql.expr.aggregate.AccumulatorExpr: long errorCount>;

        return $l0;
    }

    protected abstract com.hp.hpl.jena.sparql.expr.NodeValue getAccValue();

    protected abstract void accumulate(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv);

    protected abstract void accumulateError(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv);
}
