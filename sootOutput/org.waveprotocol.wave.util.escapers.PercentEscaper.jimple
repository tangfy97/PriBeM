public class org.waveprotocol.wave.util.escapers.PercentEscaper extends org.waveprotocol.wave.util.escapers.UnicodeEscaper
{
    public static final java.lang.String SAFECHARS_URLENCODER;
    public static final java.lang.String SAFEPATHCHARS_URLENCODER;
    public static final java.lang.String SAFEQUERYSTRINGCHARS_URLENCODER;
    private static final char[] URI_ESCAPED_SPACE;
    private static final char[] UPPER_HEX_DIGITS;
    private final boolean plusForSpace;
    private final boolean[] safeOctets;

    public void <init>(java.lang.String, boolean)
    {
        boolean[] $r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        org.waveprotocol.wave.util.escapers.PercentEscaper r0;
        java.lang.String r1;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.util.escapers.PercentEscaper;

        r1 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        specialinvoke r0.<org.waveprotocol.wave.util.escapers.UnicodeEscaper: void <init>()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>(".*[0-9A-Za-z].*");

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Alphanumeric characters are always \'safe\' and should not be explicitly specified");

        throw $r5;

     label1:
        if z1 == 0 goto label2;

        $z3 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(" ");

        if $z3 == 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("plusForSpace cannot be specified when space is a \'safe\' character");

        throw $r4;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("%");

        if $z2 == 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The \'%\' character cannot be specified as \'safe\'");

        throw $r3;

     label3:
        r0.<org.waveprotocol.wave.util.escapers.PercentEscaper: boolean plusForSpace> = z1;

        $r2 = staticinvoke <org.waveprotocol.wave.util.escapers.PercentEscaper: boolean[] createSafeOctets(java.lang.String)>(r1);

        r0.<org.waveprotocol.wave.util.escapers.PercentEscaper: boolean[] safeOctets> = $r2;

        return;
    }

    private static boolean[] createSafeOctets(java.lang.String)
    {
        int $i0, i2, i3, i4, i6, i7, i8, i9, i10, $i11, $i12;
        java.lang.String r0;
        boolean[] r2;
        char c1, c5;
        char[] $r1;

        r0 := @parameter0: java.lang.String;

        i2 = 122;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i3 = lengthof $r1;

        i4 = 0;

     label01:
        if i4 >= i3 goto label02;

        c5 = $r1[i4];

        $i11 = (int) c5;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i11, i2);

        i4 = i4 + 1;

        goto label01;

     label02:
        $i0 = i2 + 1;

        r2 = newarray (boolean)[$i0];

        i6 = 48;

     label03:
        if i6 > 57 goto label04;

        r2[i6] = 1;

        i6 = i6 + 1;

        goto label03;

     label04:
        i7 = 65;

     label05:
        if i7 > 90 goto label06;

        r2[i7] = 1;

        i7 = i7 + 1;

        goto label05;

     label06:
        i8 = 97;

     label07:
        if i8 > 122 goto label08;

        r2[i8] = 1;

        i8 = i8 + 1;

        goto label07;

     label08:
        i9 = lengthof $r1;

        i10 = 0;

     label09:
        if i10 >= i9 goto label10;

        c1 = $r1[i10];

        $i12 = (int) c1;

        r2[$i12] = 1;

        i10 = i10 + 1;

        goto label09;

     label10:
        return r2;
    }

    protected int nextEscapeIndex(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        boolean[] $r2, $r3;
        char $c1;
        org.waveprotocol.wave.util.escapers.PercentEscaper r1;
        int i0, $i2, i3, $i4, $i5;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.util.escapers.PercentEscaper;

        r0 := @parameter0: java.lang.CharSequence;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

     label1:
        if i3 >= i0 goto label3;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        $r2 = r1.<org.waveprotocol.wave.util.escapers.PercentEscaper: boolean[] safeOctets>;

        $i2 = lengthof $r2;

        $i4 = (int) $c1;

        if $i4 >= $i2 goto label3;

        $r3 = r1.<org.waveprotocol.wave.util.escapers.PercentEscaper: boolean[] safeOctets>;

        $i5 = (int) $c1;

        $z0 = $r3[$i5];

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i3;
    }

    public java.lang.String escape(java.lang.String)
    {
        boolean[] $r2, $r4;
        char $c1;
        org.waveprotocol.wave.util.escapers.PercentEscaper r1;
        int $i0, $i2, i3, $i4, $i5;
        java.lang.String r0, $r3;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.util.escapers.PercentEscaper;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label1:
        if i3 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $r2 = r1.<org.waveprotocol.wave.util.escapers.PercentEscaper: boolean[] safeOctets>;

        $i2 = lengthof $r2;

        $i4 = (int) $c1;

        if $i4 >= $i2 goto label2;

        $r4 = r1.<org.waveprotocol.wave.util.escapers.PercentEscaper: boolean[] safeOctets>;

        $i5 = (int) $c1;

        $z0 = $r4[$i5];

        if $z0 != 0 goto label3;

     label2:
        $r3 = virtualinvoke r1.<org.waveprotocol.wave.util.escapers.PercentEscaper: java.lang.String escapeSlow(java.lang.String,int)>(r0, i3);

        return $r3;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return r0;
    }

    protected char[] escape(int)
    {
        java.lang.StringBuilder $r4, $r5, $r31;
        java.lang.String $r6;
        boolean[] $r1, $r26;
        char[] $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, r27, r28, r29, r30;
        boolean $z0, $z1;
        org.waveprotocol.wave.util.escapers.PercentEscaper r0;
        int $i0, $i1, $i3, $i4, $i6, $i8, $i9, $i11, $i13, $i14, $i16, $i18, $i20, $i21, $i23, $i25, $i26, $i29, $i31, $i32, $i34, $i36, $i38, $i40, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, $i57;
        char $c2, $c5, $c7, $c10, $c12, $c15, $c17, $c19, $c22, $c24, $c27, $c28, $c30, $c33, $c35, $c37, $c39, $c41;
        java.lang.IllegalArgumentException $r32;

        r0 := @this: org.waveprotocol.wave.util.escapers.PercentEscaper;

        i42 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.util.escapers.PercentEscaper: boolean[] safeOctets>;

        $i0 = lengthof $r1;

        if i42 >= $i0 goto label1;

        $r26 = r0.<org.waveprotocol.wave.util.escapers.PercentEscaper: boolean[] safeOctets>;

        $z1 = $r26[i42];

        if $z1 == 0 goto label1;

        return null;

     label1:
        if i42 != 32 goto label2;

        $z0 = r0.<org.waveprotocol.wave.util.escapers.PercentEscaper: boolean plusForSpace>;

        if $z0 == 0 goto label2;

        $r25 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] URI_ESCAPED_SPACE>;

        return $r25;

     label2:
        if i42 > 127 goto label3;

        r27 = newarray (char)[3];

        r27[0] = 37;

        $r23 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i38 = i42 & 15;

        $c39 = $r23[$i38];

        r27[2] = $c39;

        $r24 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i40 = i42 >>> 4;

        $c41 = $r24[$i40];

        r27[1] = $c41;

        return r27;

     label3:
        if i42 > 2047 goto label4;

        r28 = newarray (char)[6];

        r28[0] = 37;

        r28[3] = 37;

        $r19 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i29 = i42 & 15;

        $c30 = $r19[$i29];

        r28[5] = $c30;

        i43 = i42 >>> 4;

        $r20 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i31 = i43 & 3;

        $i32 = 8 | $i31;

        $c33 = $r20[$i32];

        r28[4] = $c33;

        i44 = i43 >>> 2;

        $r21 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i34 = i44 & 15;

        $c35 = $r21[$i34];

        r28[2] = $c35;

        i45 = i44 >>> 4;

        $r22 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i36 = 12 | i45;

        $c37 = $r22[$i36];

        r28[1] = $c37;

        return r28;

     label4:
        $i57 = (int) 65535;

        if i42 > $i57 goto label5;

        r29 = newarray (char)[9];

        r29[0] = 37;

        r29[1] = 69;

        r29[3] = 37;

        r29[6] = 37;

        $r14 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i18 = i42 & 15;

        $c19 = $r14[$i18];

        r29[8] = $c19;

        i46 = i42 >>> 4;

        $r15 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i20 = i46 & 3;

        $i21 = 8 | $i20;

        $c22 = $r15[$i21];

        r29[7] = $c22;

        i47 = i46 >>> 2;

        $r16 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i23 = i47 & 15;

        $c24 = $r16[$i23];

        r29[5] = $c24;

        i48 = i47 >>> 4;

        $r17 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i25 = i48 & 3;

        $i26 = 8 | $i25;

        $c27 = $r17[$i26];

        r29[4] = $c27;

        i49 = i48 >>> 2;

        $r18 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $c28 = $r18[i49];

        r29[2] = $c28;

        return r29;

     label5:
        if i42 > 1114111 goto label6;

        r30 = newarray (char)[12];

        r30[0] = 37;

        r30[1] = 70;

        r30[3] = 37;

        r30[6] = 37;

        r30[9] = 37;

        $r7 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i1 = i42 & 15;

        $c2 = $r7[$i1];

        r30[11] = $c2;

        i50 = i42 >>> 4;

        $r8 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i3 = i50 & 3;

        $i4 = 8 | $i3;

        $c5 = $r8[$i4];

        r30[10] = $c5;

        i51 = i50 >>> 2;

        $r9 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i6 = i51 & 15;

        $c7 = $r9[$i6];

        r30[8] = $c7;

        i52 = i51 >>> 4;

        $r10 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i8 = i52 & 3;

        $i9 = 8 | $i8;

        $c10 = $r10[$i9];

        r30[7] = $c10;

        i53 = i52 >>> 2;

        $r11 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i11 = i53 & 15;

        $c12 = $r11[$i11];

        r30[5] = $c12;

        i54 = i53 >>> 4;

        $r12 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i13 = i54 & 3;

        $i14 = 8 | $i13;

        $c15 = $r12[$i14];

        r30[4] = $c15;

        i55 = i54 >>> 2;

        $r13 = <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS>;

        $i16 = i55 & 7;

        $c17 = $r13[$i16];

        r30[2] = $c17;

        return r30;

     label6:
        $r32 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid unicode character value ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i42);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r32;
    }

    static void <clinit>()
    {
        char[] $r0, $r2;
        java.lang.String $r1;

        <org.waveprotocol.wave.util.escapers.PercentEscaper: java.lang.String SAFEQUERYSTRINGCHARS_URLENCODER> = "-_.!~*\'()@:$,;/?:";

        <org.waveprotocol.wave.util.escapers.PercentEscaper: java.lang.String SAFEPATHCHARS_URLENCODER> = "-_.!~*\'()@:$&,;=";

        <org.waveprotocol.wave.util.escapers.PercentEscaper: java.lang.String SAFECHARS_URLENCODER> = "-_.*";

        $r0 = newarray (char)[1];

        $r0[0] = 43;

        <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] URI_ESCAPED_SPACE> = $r0;

        $r1 = "0123456789ABCDEF";

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        <org.waveprotocol.wave.util.escapers.PercentEscaper: char[] UPPER_HEX_DIGITS> = $r2;

        return;
    }
}
