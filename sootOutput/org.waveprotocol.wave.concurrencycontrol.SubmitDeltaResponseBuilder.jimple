public final class org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder extends java.lang.Object
{
    private org.waveprotocol.wave.concurrencycontrol.ResponseStatus status;
    private java.lang.Integer operationsApplied;
    private org.waveprotocol.wave.federation.ProtocolHashedVersion hashedVersionAfterApplication;
    private java.lang.Long timestampAfterApplication;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r1;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder: org.waveprotocol.wave.concurrencycontrol.ResponseStatus status> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder setOperationsApplied(int)
    {
        int i0;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder r0;
        java.lang.Integer $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder: java.lang.Integer operationsApplied> = $r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder clearHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder;

        r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder: org.waveprotocol.wave.federation.ProtocolHashedVersion hashedVersionAfterApplication> = null;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder setHashedVersionAfterApplication(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.ProtocolHashedVersion r1;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder: org.waveprotocol.wave.federation.ProtocolHashedVersion hashedVersionAfterApplication> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder clearTimestampAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder;

        r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder: java.lang.Long timestampAfterApplication> = null;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder setTimestampAfterApplication(long)
    {
        long l0;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder r0;
        java.lang.Long $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder: java.lang.Long timestampAfterApplication> = $r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse build(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder$Factory)
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse $r1;
        long $l1;
        java.lang.Integer $r4;
        java.lang.Long $r6;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder$Factory r0;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r3;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r5;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder r2;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder$Factory;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder$Factory: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse create()>();

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder: org.waveprotocol.wave.concurrencycontrol.ResponseStatus status>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r3);

        $r4 = r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder: java.lang.Integer operationsApplied>;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: void setOperationsApplied(int)>($i0);

        $r5 = r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder: org.waveprotocol.wave.federation.ProtocolHashedVersion hashedVersionAfterApplication>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: void setHashedVersionAfterApplication(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r5);

        $r6 = r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseBuilder: java.lang.Long timestampAfterApplication>;

        $l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: void setTimestampAfterApplication(long)>($l1);

        return $r1;
    }
}
