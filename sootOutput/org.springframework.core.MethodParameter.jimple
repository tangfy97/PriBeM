public class org.springframework.core.MethodParameter extends java.lang.Object
{
    private java.lang.reflect.Method method;
    private java.lang.reflect.Constructor constructor;
    private final int parameterIndex;
    private java.lang.Class parameterType;
    private java.lang.reflect.Type genericParameterType;
    private java.lang.'annotation'.Annotation[] parameterAnnotations;
    private org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer;
    private java.lang.String parameterName;
    private int nestingLevel;
    private java.util.Map typeIndexesPerLevel;
    java.util.Map typeVariableMap;

    public void <init>(java.lang.reflect.Method, int)
    {
        int i0;
        java.lang.reflect.Method r1;
        org.springframework.core.MethodParameter r0;

        r0 := @this: org.springframework.core.MethodParameter;

        r1 := @parameter0: java.lang.reflect.Method;

        i0 := @parameter1: int;

        specialinvoke r0.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int,int)>(r1, i0, 1);

        return;
    }

    public void <init>(java.lang.reflect.Method, int, int)
    {
        org.springframework.core.MethodParameter r0;
        int i0, i1;
        java.lang.reflect.Method r1;

        r0 := @this: org.springframework.core.MethodParameter;

        r1 := @parameter0: java.lang.reflect.Method;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.MethodParameter: int nestingLevel> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Method must not be null");

        r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method> = r1;

        r0.<org.springframework.core.MethodParameter: int parameterIndex> = i0;

        r0.<org.springframework.core.MethodParameter: int nestingLevel> = i1;

        return;
    }

    public void <init>(java.lang.reflect.Constructor, int)
    {
        int i0;
        java.lang.reflect.Constructor r1;
        org.springframework.core.MethodParameter r0;

        r0 := @this: org.springframework.core.MethodParameter;

        r1 := @parameter0: java.lang.reflect.Constructor;

        i0 := @parameter1: int;

        specialinvoke r0.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Constructor,int,int)>(r1, i0, 1);

        return;
    }

    public void <init>(java.lang.reflect.Constructor, int, int)
    {
        org.springframework.core.MethodParameter r0;
        int i0, i1;
        java.lang.reflect.Constructor r1;

        r0 := @this: org.springframework.core.MethodParameter;

        r1 := @parameter0: java.lang.reflect.Constructor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.MethodParameter: int nestingLevel> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Constructor must not be null");

        r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor> = r1;

        r0.<org.springframework.core.MethodParameter: int parameterIndex> = i0;

        r0.<org.springframework.core.MethodParameter: int nestingLevel> = i1;

        return;
    }

    public void <init>(org.springframework.core.MethodParameter)
    {
        java.lang.'annotation'.Annotation[] $r5;
        java.lang.reflect.Constructor $r3;
        org.springframework.core.MethodParameter r0, r1;
        java.util.Map $r6;
        int $i0;
        java.lang.Class $r4;
        java.lang.reflect.Method $r2;

        r0 := @this: org.springframework.core.MethodParameter;

        r1 := @parameter0: org.springframework.core.MethodParameter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.MethodParameter: int nestingLevel> = 1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Original must not be null");

        $r2 = r1.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method> = $r2;

        $r3 = r1.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor>;

        r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor> = $r3;

        $i0 = r1.<org.springframework.core.MethodParameter: int parameterIndex>;

        r0.<org.springframework.core.MethodParameter: int parameterIndex> = $i0;

        $r4 = r1.<org.springframework.core.MethodParameter: java.lang.Class parameterType>;

        r0.<org.springframework.core.MethodParameter: java.lang.Class parameterType> = $r4;

        $r5 = r1.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] parameterAnnotations>;

        r0.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] parameterAnnotations> = $r5;

        $r6 = r1.<org.springframework.core.MethodParameter: java.util.Map typeVariableMap>;

        r0.<org.springframework.core.MethodParameter: java.util.Map typeVariableMap> = $r6;

        return;
    }

    public java.lang.reflect.Method getMethod()
    {
        java.lang.reflect.Method $r1;
        org.springframework.core.MethodParameter r0;

        r0 := @this: org.springframework.core.MethodParameter;

        $r1 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        return $r1;
    }

    public java.lang.reflect.Constructor getConstructor()
    {
        java.lang.reflect.Constructor $r1;
        org.springframework.core.MethodParameter r0;

        r0 := @this: org.springframework.core.MethodParameter;

        $r1 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor>;

        return $r1;
    }

    public java.lang.Class getDeclaringClass()
    {
        org.springframework.core.MethodParameter r0;
        java.lang.Class $r4;
        java.lang.reflect.Method $r1, $r3;
        java.lang.reflect.Constructor $r2;

        r0 := @this: org.springframework.core.MethodParameter;

        $r1 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        goto label2;

     label1:
        $r2 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor>;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

     label2:
        return $r4;
    }

    public int getParameterIndex()
    {
        int $i0;
        org.springframework.core.MethodParameter r0;

        r0 := @this: org.springframework.core.MethodParameter;

        $i0 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        return $i0;
    }

    void setParameterType(java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.core.MethodParameter r0;

        r0 := @this: org.springframework.core.MethodParameter;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.core.MethodParameter: java.lang.Class parameterType> = r1;

        return;
    }

    public java.lang.Class getParameterType()
    {
        java.lang.Class[] $r4, $r6;
        java.lang.reflect.Constructor $r3;
        org.springframework.core.MethodParameter r0;
        int $i0, $i1, $i2;
        java.lang.Class $r1, $r9, $r10, $r11;
        java.lang.reflect.Method $r2, $r5, $r7, $r8;

        r0 := @this: org.springframework.core.MethodParameter;

        $r1 = r0.<org.springframework.core.MethodParameter: java.lang.Class parameterType>;

        if $r1 != null goto label6;

        $i0 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        if $i0 >= 0 goto label3;

        $r7 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        if $r7 == null goto label1;

        $r8 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        goto label2;

     label1:
        $r9 = null;

     label2:
        r0.<org.springframework.core.MethodParameter: java.lang.Class parameterType> = $r9;

        goto label6;

     label3:
        $r2 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        if $r2 == null goto label4;

        $r5 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        $r10 = $r6[$i2];

        goto label5;

     label4:
        $r3 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i1 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        $r10 = $r4[$i1];

     label5:
        r0.<org.springframework.core.MethodParameter: java.lang.Class parameterType> = $r10;

     label6:
        $r11 = r0.<org.springframework.core.MethodParameter: java.lang.Class parameterType>;

        return $r11;
    }

    public java.lang.reflect.Type getGenericParameterType()
    {
        java.lang.reflect.Constructor $r3;
        java.lang.reflect.Type $r1, $r9, $r10, $r11;
        org.springframework.core.MethodParameter r0;
        int $i0, $i1, $i2;
        java.lang.reflect.Type[] $r4, $r6;
        java.lang.reflect.Method $r2, $r5, $r7, $r8;

        r0 := @this: org.springframework.core.MethodParameter;

        $r1 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Type genericParameterType>;

        if $r1 != null goto label6;

        $i0 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        if $i0 >= 0 goto label3;

        $r7 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        if $r7 == null goto label1;

        $r8 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        goto label2;

     label1:
        $r9 = null;

     label2:
        r0.<org.springframework.core.MethodParameter: java.lang.reflect.Type genericParameterType> = $r9;

        goto label6;

     label3:
        $r2 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        if $r2 == null goto label4;

        $r5 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $i2 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        $r10 = $r6[$i2];

        goto label5;

     label4:
        $r3 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $i1 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        $r10 = $r4[$i1];

     label5:
        r0.<org.springframework.core.MethodParameter: java.lang.reflect.Type genericParameterType> = $r10;

     label6:
        $r11 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Type genericParameterType>;

        return $r11;
    }

    public java.lang.'annotation'.Annotation[] getMethodAnnotations()
    {
        org.springframework.core.MethodParameter r0;
        java.lang.'annotation'.Annotation[] $r4;
        java.lang.reflect.Method $r1, $r3;
        java.lang.reflect.Constructor $r2;

        r0 := @this: org.springframework.core.MethodParameter;

        $r1 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        goto label2;

     label1:
        $r2 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor>;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getAnnotations()>();

     label2:
        return $r4;
    }

    public java.lang.'annotation'.Annotation getMethodAnnotation(java.lang.Class)
    {
        org.springframework.core.MethodParameter r0;
        java.lang.'annotation'.Annotation $r5;
        java.lang.Class r2;
        java.lang.reflect.Method $r1, $r4;
        java.lang.reflect.Constructor $r3;

        r0 := @this: org.springframework.core.MethodParameter;

        r2 := @parameter0: java.lang.Class;

        $r1 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        if $r1 == null goto label1;

        $r4 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r2);

        goto label2;

     label1:
        $r3 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor>;

        $r5 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r2);

     label2:
        return $r5;
    }

    public java.lang.'annotation'.Annotation[] getParameterAnnotations()
    {
        java.lang.'annotation'.Annotation[][] $r7;
        java.lang.'annotation'.Annotation[] $r1, $r4, $r5, $r8;
        java.lang.reflect.Constructor $r3;
        org.springframework.core.MethodParameter r0;
        int $i0, $i1, $i2, $i3;
        java.lang.reflect.Method $r2, $r6;

        r0 := @this: org.springframework.core.MethodParameter;

        $r1 = r0.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] parameterAnnotations>;

        if $r1 != null goto label4;

        $r2 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        if $r2 == null goto label1;

        $r6 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        goto label2;

     label1:
        $r3 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor>;

        $r7 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

     label2:
        $i0 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        if $i0 < 0 goto label3;

        $i2 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        $i1 = lengthof $r7;

        if $i2 >= $i1 goto label3;

        $i3 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        $r5 = $r7[$i3];

        r0.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] parameterAnnotations> = $r5;

        goto label4;

     label3:
        $r4 = newarray (java.lang.'annotation'.Annotation)[0];

        r0.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] parameterAnnotations> = $r4;

     label4:
        $r8 = r0.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] parameterAnnotations>;

        return $r8;
    }

    public java.lang.'annotation'.Annotation getParameterAnnotation(java.lang.Class)
    {
        org.springframework.core.MethodParameter r0;
        int i0, i1;
        java.lang.'annotation'.Annotation r2;
        java.lang.Class r3;
        java.lang.'annotation'.Annotation[] $r1;
        boolean $z0;

        r0 := @this: org.springframework.core.MethodParameter;

        r3 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] getParameterAnnotations()>();

        i0 = lengthof $r1;

        i1 = 0;

        goto label3;

     label1:
        r2 = $r1[i1];

        $z0 = virtualinvoke r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return null;
    }

    public void initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer)
    {
        org.springframework.core.ParameterNameDiscoverer r1;
        org.springframework.core.MethodParameter r0;

        r0 := @this: org.springframework.core.MethodParameter;

        r1 := @parameter0: org.springframework.core.ParameterNameDiscoverer;

        r0.<org.springframework.core.MethodParameter: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer> = r1;

        return;
    }

    public java.lang.String getParameterName()
    {
        org.springframework.core.ParameterNameDiscoverer $r1, $r4, $r7;
        java.lang.String[] $r8;
        java.lang.reflect.Constructor $r3;
        org.springframework.core.MethodParameter r0;
        int $i0;
        java.lang.String $r5, $r9;
        java.lang.reflect.Method $r2, $r6;

        r0 := @this: org.springframework.core.MethodParameter;

        $r1 = r0.<org.springframework.core.MethodParameter: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer>;

        if $r1 == null goto label4;

        $r2 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        if $r2 == null goto label1;

        $r7 = r0.<org.springframework.core.MethodParameter: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer>;

        $r6 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Method method>;

        $r8 = interfaceinvoke $r7.<org.springframework.core.ParameterNameDiscoverer: java.lang.String[] getParameterNames(java.lang.reflect.Method)>($r6);

        goto label2;

     label1:
        $r4 = r0.<org.springframework.core.MethodParameter: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer>;

        $r3 = r0.<org.springframework.core.MethodParameter: java.lang.reflect.Constructor constructor>;

        $r8 = interfaceinvoke $r4.<org.springframework.core.ParameterNameDiscoverer: java.lang.String[] getParameterNames(java.lang.reflect.Constructor)>($r3);

     label2:
        if $r8 == null goto label3;

        $i0 = r0.<org.springframework.core.MethodParameter: int parameterIndex>;

        $r5 = $r8[$i0];

        r0.<org.springframework.core.MethodParameter: java.lang.String parameterName> = $r5;

     label3:
        r0.<org.springframework.core.MethodParameter: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer> = null;

     label4:
        $r9 = r0.<org.springframework.core.MethodParameter: java.lang.String parameterName>;

        return $r9;
    }

    public void increaseNestingLevel()
    {
        int $i0, $i1;
        org.springframework.core.MethodParameter r0;

        r0 := @this: org.springframework.core.MethodParameter;

        $i0 = r0.<org.springframework.core.MethodParameter: int nestingLevel>;

        $i1 = $i0 + 1;

        r0.<org.springframework.core.MethodParameter: int nestingLevel> = $i1;

        return;
    }

    public void decreaseNestingLevel()
    {
        org.springframework.core.MethodParameter r0;
        java.util.Map $r1;
        int $i0, $i1, $i2;
        java.lang.Integer $r2;

        r0 := @this: org.springframework.core.MethodParameter;

        $r1 = specialinvoke r0.<org.springframework.core.MethodParameter: java.util.Map getTypeIndexesPerLevel()>();

        $i0 = r0.<org.springframework.core.MethodParameter: int nestingLevel>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        $i1 = r0.<org.springframework.core.MethodParameter: int nestingLevel>;

        $i2 = $i1 - 1;

        r0.<org.springframework.core.MethodParameter: int nestingLevel> = $i2;

        return;
    }

    public int getNestingLevel()
    {
        int $i0;
        org.springframework.core.MethodParameter r0;

        r0 := @this: org.springframework.core.MethodParameter;

        $i0 = r0.<org.springframework.core.MethodParameter: int nestingLevel>;

        return $i0;
    }

    public void setTypeIndexForCurrentLevel(int)
    {
        org.springframework.core.MethodParameter r0;
        java.util.Map $r1;
        int $i0, i1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.springframework.core.MethodParameter;

        i1 := @parameter0: int;

        $r1 = specialinvoke r0.<org.springframework.core.MethodParameter: java.util.Map getTypeIndexesPerLevel()>();

        $i0 = r0.<org.springframework.core.MethodParameter: int nestingLevel>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    public java.lang.Integer getTypeIndexForCurrentLevel()
    {
        int $i0;
        java.lang.Integer $r1;
        org.springframework.core.MethodParameter r0;

        r0 := @this: org.springframework.core.MethodParameter;

        $i0 = r0.<org.springframework.core.MethodParameter: int nestingLevel>;

        $r1 = virtualinvoke r0.<org.springframework.core.MethodParameter: java.lang.Integer getTypeIndexForLevel(int)>($i0);

        return $r1;
    }

    public java.lang.Integer getTypeIndexForLevel(int)
    {
        org.springframework.core.MethodParameter r0;
        java.util.Map $r1;
        int i0;
        java.lang.Object $r3;
        java.lang.Integer $r2, $r4;

        r0 := @this: org.springframework.core.MethodParameter;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.springframework.core.MethodParameter: java.util.Map getTypeIndexesPerLevel()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.Integer) $r3;

        return $r4;
    }

    private java.util.Map getTypeIndexesPerLevel()
    {
        org.springframework.core.MethodParameter r0;
        java.util.Map $r1, $r2;
        java.util.HashMap $r3;

        r0 := @this: org.springframework.core.MethodParameter;

        $r1 = r0.<org.springframework.core.MethodParameter: java.util.Map typeIndexesPerLevel>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(4);

        r0.<org.springframework.core.MethodParameter: java.util.Map typeIndexesPerLevel> = $r3;

     label1:
        $r2 = r0.<org.springframework.core.MethodParameter: java.util.Map typeIndexesPerLevel>;

        return $r2;
    }

    public static org.springframework.core.MethodParameter forMethodOrConstructor(java.lang.Object, int)
    {
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.Constructor $r7;
        org.springframework.core.MethodParameter $r6, $r8;
        int i0;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.reflect.Method $r9;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = r0 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label1;

        $r8 = new org.springframework.core.MethodParameter;

        $r9 = (java.lang.reflect.Method) r0;

        specialinvoke $r8.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>($r9, i0);

        return $r8;

     label1:
        $z1 = r0 instanceof java.lang.reflect.Constructor;

        if $z1 == 0 goto label2;

        $r6 = new org.springframework.core.MethodParameter;

        $r7 = (java.lang.reflect.Constructor) r0;

        specialinvoke $r6.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Constructor,int)>($r7, i0);

        return $r6;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Given object [");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is neither a Method nor a Constructor");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }
}
