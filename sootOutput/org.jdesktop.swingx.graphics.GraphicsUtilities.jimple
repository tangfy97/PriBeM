public class org.jdesktop.swingx.graphics.GraphicsUtilities extends java.lang.Object
{

    private void <init>()
    {
        org.jdesktop.swingx.graphics.GraphicsUtilities r0;

        r0 := @this: org.jdesktop.swingx.graphics.GraphicsUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.awt.GraphicsConfiguration getGraphicsConfiguration()
    {
        java.awt.GraphicsConfiguration $r2;
        java.awt.GraphicsEnvironment $r0;
        java.awt.GraphicsDevice $r1;

        $r0 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        $r1 = virtualinvoke $r0.<java.awt.GraphicsEnvironment: java.awt.GraphicsDevice getDefaultScreenDevice()>();

        $r2 = virtualinvoke $r1.<java.awt.GraphicsDevice: java.awt.GraphicsConfiguration getDefaultConfiguration()>();

        return $r2;
    }

    private static boolean isHeadless()
    {
        boolean $z0;

        $z0 = staticinvoke <java.awt.GraphicsEnvironment: boolean isHeadless()>();

        return $z0;
    }

    public static java.awt.image.BufferedImage convertToBufferedImage(java.awt.Image)
    {
        java.lang.Throwable $r3;
        java.awt.Image r0;
        java.awt.image.BufferedImage $r1;
        java.awt.Graphics2D $r2;
        int $i0, $i1;

        r0 := @parameter0: java.awt.Image;

        $i0 = virtualinvoke r0.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(null);

        $i1 = virtualinvoke r0.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(null);

        $r1 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage createCompatibleTranslucentImage(int,int)>($i0, $i1);

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

     label1:
        virtualinvoke $r2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r0, 0, 0, null);

     label2:
        virtualinvoke $r2.<java.awt.Graphics2D: void dispose()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke $r2.<java.awt.Graphics2D: void dispose()>();

        throw $r3;

     label5:
        return $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.awt.image.BufferedImage createColorModelCompatibleImage(java.awt.image.BufferedImage)
    {
        java.awt.image.ColorModel $r1;
        java.awt.image.BufferedImage r0, $r2;
        int $i0, $i1;
        java.awt.image.WritableRaster $r3;
        boolean $z0;

        r0 := @parameter0: java.awt.image.BufferedImage;

        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r2 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $r3 = virtualinvoke $r1.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i0, $i1);

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r1, $r3, $z0, null);

        return $r2;
    }

    public static java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $r1 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage,int,int)>(r0, $i0, $i1);

        return $r1;
    }

    public static java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage, int, int)
    {
        java.awt.GraphicsConfiguration $r0;
        java.awt.image.BufferedImage r1, $r2;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r1 := @parameter0: java.awt.image.BufferedImage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: boolean isHeadless()>();

        if $z0 == 0 goto label1;

        $r2 = new java.awt.image.BufferedImage;

        $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getType()>();

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, $i3);

        goto label2;

     label1:
        $r0 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.GraphicsConfiguration getGraphicsConfiguration()>();

        $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>();

        $r2 = virtualinvoke $r0.<java.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int,int)>(i0, i1, $i2);

     label2:
        return $r2;
    }

    public static java.awt.image.BufferedImage createCompatibleImage(int, int)
    {
        java.awt.GraphicsConfiguration $r0;
        java.awt.image.BufferedImage $r1;
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: boolean isHeadless()>();

        if $z0 == 0 goto label1;

        $r1 = new java.awt.image.BufferedImage;

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1);

        goto label2;

     label1:
        $r0 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.GraphicsConfiguration getGraphicsConfiguration()>();

        $r1 = virtualinvoke $r0.<java.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int)>(i0, i1);

     label2:
        return $r1;
    }

    public static java.awt.image.BufferedImage createCompatibleTranslucentImage(int, int)
    {
        java.awt.GraphicsConfiguration $r0;
        java.awt.image.BufferedImage $r1;
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: boolean isHeadless()>();

        if $z0 == 0 goto label1;

        $r1 = new java.awt.image.BufferedImage;

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 2);

        goto label2;

     label1:
        $r0 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.GraphicsConfiguration getGraphicsConfiguration()>();

        $r1 = virtualinvoke $r0.<java.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int,int)>(i0, i1, 3);

     label2:
        return $r1;
    }

    public static java.awt.image.BufferedImage loadCompatibleImage(java.io.InputStream) throws java.io.IOException
    {
        java.awt.image.BufferedImage $r1, $r2;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>(r0);

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage toCompatibleImage(java.awt.image.BufferedImage)>($r1);

        return $r2;
    }

    public static java.awt.image.BufferedImage loadCompatibleImage(java.net.URL) throws java.io.IOException
    {
        java.awt.image.BufferedImage $r1, $r2;
        java.net.URL r0;

        r0 := @parameter0: java.net.URL;

        $r1 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.net.URL)>(r0);

        $r2 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage toCompatibleImage(java.awt.image.BufferedImage)>($r1);

        return $r2;
    }

    public static java.awt.image.BufferedImage toCompatibleImage(java.awt.image.BufferedImage)
    {
        java.lang.Throwable $r7;
        java.awt.GraphicsConfiguration $r2, $r4;
        java.awt.image.BufferedImage r0, $r5;
        java.awt.image.ColorModel $r1, $r3;
        int $i0, $i1, $i2;
        java.awt.Graphics $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.image.BufferedImage;

        $z0 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: boolean isHeadless()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r2 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.GraphicsConfiguration getGraphicsConfiguration()>();

        $r3 = virtualinvoke $r2.<java.awt.GraphicsConfiguration: java.awt.image.ColorModel getColorModel()>();

        $z1 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        $r4 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.GraphicsConfiguration getGraphicsConfiguration()>();

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $i2 = virtualinvoke r0.<java.awt.image.BufferedImage: int getTransparency()>();

        $r5 = virtualinvoke $r4.<java.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int,int)>($i0, $i1, $i2);

        $r6 = virtualinvoke $r5.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

     label3:
        virtualinvoke $r6.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r0, 0, 0, null);

     label4:
        virtualinvoke $r6.<java.awt.Graphics: void dispose()>();

        goto label7;

     label5:
        $r7 := @caughtexception;

     label6:
        virtualinvoke $r6.<java.awt.Graphics: void dispose()>();

        throw $r7;

     label7:
        return $r5;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static java.awt.image.BufferedImage createThumbnailFast(java.awt.image.BufferedImage, int)
    {
        java.lang.Throwable $r9;
        java.awt.Graphics2D $r2;
        int $i0, $i1, i2, $i3, $i4, i5, i6;
        java.awt.image.BufferedImage r0, $r1;
        java.lang.IllegalArgumentException $r5, $r6, $r7, $r8;
        java.awt.RenderingHints$Key $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, f9;
        java.lang.Object $r3;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i2 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if $i0 <= $i1 goto label03;

        if i2 < $i0 goto label01;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newSize must be lower than the image width");

        throw $r8;

     label01:
        if i2 > 0 goto label02;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newSize must be greater than 0");

        throw $r7;

     label02:
        $f5 = (float) $i0;

        $f4 = (float) $i1;

        f8 = $f5 / $f4;

        i5 = i2;

        $f6 = (float) i2;

        $f7 = $f6 / f8;

        i6 = (int) $f7;

        goto label06;

     label03:
        if i2 < $i1 goto label04;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newSize must be lower than the image height");

        throw $r6;

     label04:
        if i2 > 0 goto label05;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newSize must be greater than 0");

        throw $r5;

     label05:
        $f1 = (float) $i1;

        $f0 = (float) $i0;

        f9 = $f1 / $f0;

        i6 = i2;

        $f2 = (float) i2;

        $f3 = $f2 / f9;

        i5 = (int) $f3;

     label06:
        $r1 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage,int,int)>(r0, i5, i6);

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

     label07:
        $r4 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r3 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        virtualinvoke $r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r4, $r3);

        $i3 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i4 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke $r2.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>(r0, 0, 0, $i3, $i4, null);

     label08:
        virtualinvoke $r2.<java.awt.Graphics2D: void dispose()>();

        goto label11;

     label09:
        $r9 := @caughtexception;

     label10:
        virtualinvoke $r2.<java.awt.Graphics2D: void dispose()>();

        throw $r9;

     label11:
        return $r1;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static java.awt.image.BufferedImage createThumbnailFast(java.awt.image.BufferedImage, int, int)
    {
        java.lang.Throwable $r7;
        java.awt.image.BufferedImage r0, $r3;
        java.lang.IllegalArgumentException $r1, $r2;
        java.awt.Graphics2D $r4;
        int i0, $i1, i2, $i3, $i4, $i5;
        java.awt.RenderingHints$Key $r6;
        java.lang.Object $r5;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        if i0 >= $i1 goto label1;

        $i3 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if i2 < $i3 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newWidth and newHeight cannot be greater than the image dimensions");

        throw $r1;

     label2:
        if i0 <= 0 goto label3;

        if i2 > 0 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newWidth and newHeight must be greater than 0");

        throw $r2;

     label4:
        $r3 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage,int,int)>(r0, i0, i2);

        $r4 = virtualinvoke $r3.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

     label5:
        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        virtualinvoke $r4.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r6, $r5);

        $i4 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getWidth()>();

        $i5 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke $r4.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>(r0, 0, 0, $i4, $i5, null);

     label6:
        virtualinvoke $r4.<java.awt.Graphics2D: void dispose()>();

        goto label9;

     label7:
        $r7 := @caughtexception;

     label8:
        virtualinvoke $r4.<java.awt.Graphics2D: void dispose()>();

        throw $r7;

     label9:
        return $r3;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static java.awt.image.BufferedImage createThumbnail(java.awt.image.BufferedImage, int)
    {
        boolean z0, z1, $z2, $z4, $z5;
        java.awt.image.BufferedImage r0, $r1, $r5, r14, r15;
        float $f0, $f1, f2, $f3, $f4, f5, $f6, $f7, $f8, $f9;
        java.lang.Throwable $r12, $r13;
        java.awt.Graphics2D $r2, $r6, r16;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, i7, i8, i9, $i10;
        java.lang.IllegalArgumentException $r9, $r10, $r11;
        java.awt.RenderingHints$Key $r4, $r8;
        java.lang.Object $r3, $r7;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i3 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        i6 = $i0;

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        i7 = $i1;

        $i2 = virtualinvoke r0.<java.awt.image.BufferedImage: int getTransparency()>();

        if $i2 == 1 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        if $i0 <= $i1 goto label03;

        $z5 = 1;

        $z4 = 1;

        goto label04;

     label03:
        $z5 = 0;

        $z4 = 0;

     label04:
        z1 = $z5;

        if $z4 == 0 goto label05;

        if i3 < $i0 goto label06;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newSize must be lower than the image width");

        throw $r11;

     label05:
        if i3 < $i1 goto label06;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newSize must be lower than the image height");

        throw $r10;

     label06:
        if i3 > 0 goto label07;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newSize must be greater than 0");

        throw $r9;

     label07:
        $f1 = (float) $i0;

        $f0 = (float) $i1;

        f2 = $f1 / $f0;

        $f4 = (float) $i1;

        $f3 = (float) $i0;

        f5 = $f4 / $f3;

        r14 = r0;

        r15 = null;

        r16 = null;

     label08:
        i8 = $i0;

        i9 = $i1;

     label09:
        if z1 == 0 goto label11;

        i6 = i6 / 2;

        if i6 >= i3 goto label10;

        i6 = i3;

     label10:
        $f8 = (float) i6;

        $f9 = $f8 / f2;

        i7 = (int) $f9;

        goto label13;

     label11:
        i7 = i7 / 2;

        if i7 >= i3 goto label12;

        i7 = i3;

     label12:
        $f6 = (float) i7;

        $f7 = $f6 / f5;

        i6 = (int) $f7;

     label13:
        if r15 == null goto label14;

        if z0 == 0 goto label16;

     label14:
        if r16 == null goto label15;

        virtualinvoke r16.<java.awt.Graphics2D: void dispose()>();

     label15:
        $r1 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage,int,int)>(r0, i6, i7);

        r15 = $r1;

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        r16 = $r2;

        $r4 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r3 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        virtualinvoke $r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r4, $r3);

     label16:
        virtualinvoke r16.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r14, 0, 0, i6, i7, 0, 0, i8, i9, null);

        i8 = i6;

        i9 = i7;

        r14 = r15;

        if z1 == 0 goto label17;

        $i10 = i6;

        goto label18;

     label17:
        $i10 = i7;

     label18:
        if i3 != $i10 goto label09;

     label19:
        virtualinvoke r16.<java.awt.Graphics2D: void dispose()>();

        goto label22;

     label20:
        $r13 := @caughtexception;

     label21:
        virtualinvoke r16.<java.awt.Graphics2D: void dispose()>();

        throw $r13;

     label22:
        $i4 = virtualinvoke r14.<java.awt.image.BufferedImage: int getWidth()>();

        if i6 != $i4 goto label23;

        $i5 = virtualinvoke r14.<java.awt.image.BufferedImage: int getHeight()>();

        if i7 == $i5 goto label29;

     label23:
        $r5 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage,int,int)>(r0, i6, i7);

        $r6 = virtualinvoke $r5.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

     label24:
        $r8 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        virtualinvoke $r6.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r8, $r7);

        virtualinvoke $r6.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r14, 0, 0, i6, i7, 0, 0, i6, i7, null);

     label25:
        virtualinvoke $r6.<java.awt.Graphics2D: void dispose()>();

        goto label28;

     label26:
        $r12 := @caughtexception;

     label27:
        virtualinvoke $r6.<java.awt.Graphics2D: void dispose()>();

        throw $r12;

     label28:
        r14 = $r5;

     label29:
        return r14;

        catch java.lang.Throwable from label08 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    public static java.awt.image.BufferedImage createThumbnail(java.awt.image.BufferedImage, int, int)
    {
        java.lang.Throwable $r11, $r12;
        java.awt.Graphics2D $r4, $r8, r15;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, i7, i8, i9, i10;
        boolean z0, $z1;
        java.awt.image.BufferedImage r0, $r3, $r7, r13, r14;
        java.lang.IllegalArgumentException $r1, $r2;
        java.awt.RenderingHints$Key $r6, $r10;
        java.lang.Object $r5, $r9;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        i7 = $i0;

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        i8 = $i1;

        $i2 = virtualinvoke r0.<java.awt.image.BufferedImage: int getTransparency()>();

        if $i2 == 1 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z0 = $z1;

        if i3 >= $i0 goto label03;

        if i4 < $i1 goto label04;

     label03:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newWidth and newHeight cannot be greater than the image dimensions");

        throw $r1;

     label04:
        if i3 <= 0 goto label05;

        if i4 > 0 goto label06;

     label05:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newWidth and newHeight must be greater than 0");

        throw $r2;

     label06:
        r13 = r0;

        r14 = null;

        r15 = null;

     label07:
        i9 = $i0;

        i10 = $i1;

     label08:
        if i7 <= i3 goto label09;

        i7 = i7 / 2;

        if i7 >= i3 goto label09;

        i7 = i3;

     label09:
        if i8 <= i4 goto label10;

        i8 = i8 / 2;

        if i8 >= i4 goto label10;

        i8 = i4;

     label10:
        if r14 == null goto label11;

        if z0 == 0 goto label13;

     label11:
        if r15 == null goto label12;

        virtualinvoke r15.<java.awt.Graphics2D: void dispose()>();

     label12:
        $r3 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage,int,int)>(r0, i7, i8);

        r14 = $r3;

        $r4 = virtualinvoke $r3.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        r15 = $r4;

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        virtualinvoke $r4.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r6, $r5);

     label13:
        virtualinvoke r15.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r13, 0, 0, i7, i8, 0, 0, i9, i10, null);

        i9 = i7;

        i10 = i8;

        r13 = r14;

        if i7 != i3 goto label08;

        if i8 != i4 goto label08;

     label14:
        virtualinvoke r15.<java.awt.Graphics2D: void dispose()>();

        goto label17;

     label15:
        $r12 := @caughtexception;

     label16:
        virtualinvoke r15.<java.awt.Graphics2D: void dispose()>();

        throw $r12;

     label17:
        $i5 = virtualinvoke r14.<java.awt.image.BufferedImage: int getWidth()>();

        if i7 != $i5 goto label18;

        $i6 = virtualinvoke r14.<java.awt.image.BufferedImage: int getHeight()>();

        if i8 == $i6 goto label24;

     label18:
        $r7 = staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: java.awt.image.BufferedImage createCompatibleImage(java.awt.image.BufferedImage,int,int)>(r0, i7, i8);

        $r8 = virtualinvoke $r7.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

     label19:
        $r10 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r9 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        virtualinvoke $r8.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r10, $r9);

        virtualinvoke $r8.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r13, 0, 0, i7, i8, 0, 0, i7, i8, null);

     label20:
        virtualinvoke $r8.<java.awt.Graphics2D: void dispose()>();

        goto label23;

     label21:
        $r11 := @caughtexception;

     label22:
        virtualinvoke $r8.<java.awt.Graphics2D: void dispose()>();

        throw $r11;

     label23:
        r13 = $r7;

     label24:
        return r13;

        catch java.lang.Throwable from label07 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    public static int[] getPixels(java.awt.image.BufferedImage, int, int, int, int, int[])
    {
        int[] $r0, $r4, $r5, $r6, r8;
        int i0, i1, $i2, $i3, $i4, i5, i6, $i7;
        java.awt.image.BufferedImage r1;
        java.lang.IllegalArgumentException $r7;
        java.awt.image.WritableRaster $r2;
        java.lang.Object $r3;

        r1 := @parameter0: java.awt.image.BufferedImage;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r8 := @parameter5: int[];

        if i0 == 0 goto label1;

        if i1 != 0 goto label2;

     label1:
        $r0 = newarray (int)[0];

        return $r0;

     label2:
        if r8 != null goto label3;

        $i7 = i0 * i1;

        r8 = newarray (int)[$i7];

        goto label4;

     label3:
        $i3 = lengthof r8;

        $i2 = i0 * i1;

        if $i3 >= $i2 goto label4;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pixels array must have a length >= w*h");

        throw $r7;

     label4:
        $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getType()>();

        if $i4 == 2 goto label5;

        if $i4 != 1 goto label6;

     label5:
        $r2 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r3 = virtualinvoke $r2.<java.awt.image.Raster: java.lang.Object getDataElements(int,int,int,int,java.lang.Object)>(i5, i6, i0, i1, r8);

        $r4 = (int[]) $r3;

        $r5 = (int[]) $r4;

        return $r5;

     label6:
        $r6 = virtualinvoke r1.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(i5, i6, i0, i1, r8, 0, i0);

        return $r6;
    }

    public static void setPixels(java.awt.image.BufferedImage, int, int, int, int, int[])
    {
        java.awt.image.BufferedImage r1;
        java.lang.IllegalArgumentException $r3;
        int[] r0;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.awt.image.WritableRaster $r2;

        r1 := @parameter0: java.awt.image.BufferedImage;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r0 := @parameter5: int[];

        if r0 == null goto label1;

        if i0 == 0 goto label1;

        if i1 != 0 goto label2;

     label1:
        return;

     label2:
        $i3 = lengthof r0;

        $i2 = i0 * i1;

        if $i3 >= $i2 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pixels array must have a length >= w*h");

        throw $r3;

     label3:
        $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getType()>();

        if $i4 == 2 goto label4;

        if $i4 != 1 goto label5;

     label4:
        $r2 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        virtualinvoke $r2.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>(i5, i6, i0, i1, r0);

        goto label6;

     label5:
        virtualinvoke r1.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(i5, i6, i0, i1, r0, 0, i0);

     label6:
        return;
    }

    public static java.awt.Shape mergeClip(java.awt.Graphics, java.awt.Shape)
    {
        java.awt.Shape $r1, r4;
        java.awt.geom.Area $r2, $r3;
        java.awt.Graphics r0;

        r0 := @parameter0: java.awt.Graphics;

        r4 := @parameter1: java.awt.Shape;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.Shape getClip()>();

        if $r1 != null goto label1;

        virtualinvoke r0.<java.awt.Graphics: void setClip(java.awt.Shape)>(r4);

        return null;

     label1:
        $r2 = new java.awt.geom.Area;

        specialinvoke $r2.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r1);

        $r3 = new java.awt.geom.Area;

        specialinvoke $r3.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r4);

        virtualinvoke $r2.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>($r3);

        virtualinvoke r0.<java.awt.Graphics: void setClip(java.awt.Shape)>($r2);

        return $r1;
    }
}
