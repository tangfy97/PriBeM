public final class org.apache.log4j.EnhancedThrowableRenderer extends java.lang.Object implements org.apache.log4j.spi.ThrowableRenderer
{
    private java.lang.reflect.Method getStackTraceMethod;
    private java.lang.reflect.Method getClassNameMethod;
    static java.lang.Class class$java$lang$Throwable;

    public void <init>()
    {
        org.apache.log4j.EnhancedThrowableRenderer r0;
        java.lang.Class $r1, $r3, $r6;
        java.lang.reflect.Method $r2, $r4;
        java.lang.Exception $r5;

        r0 := @this: org.apache.log4j.EnhancedThrowableRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r1 = <org.apache.log4j.EnhancedThrowableRenderer: java.lang.Class class$java$lang$Throwable>;

        if $r1 != null goto label2;

        $r6 = staticinvoke <org.apache.log4j.EnhancedThrowableRenderer: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

        <org.apache.log4j.EnhancedThrowableRenderer: java.lang.Class class$java$lang$Throwable> = $r6;

        goto label3;

     label2:
        $r6 = <org.apache.log4j.EnhancedThrowableRenderer: java.lang.Class class$java$lang$Throwable>;

     label3:
        $r2 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getStackTrace", null);

        r0.<org.apache.log4j.EnhancedThrowableRenderer: java.lang.reflect.Method getStackTraceMethod> = $r2;

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.StackTraceElement");

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getClassName", null);

        r0.<org.apache.log4j.EnhancedThrowableRenderer: java.lang.reflect.Method getClassNameMethod> = $r4;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public java.lang.String[] doRender(java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.lang.Object[] $r6, r7;
        org.apache.log4j.EnhancedThrowableRenderer r0;
        java.lang.String[] $r3, r8;
        java.util.HashMap $r10;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r9, $r12;
        java.lang.reflect.Method $r1, $r4;
        java.lang.Exception $r13;
        java.lang.Object $r5, $r11;

        r0 := @this: org.apache.log4j.EnhancedThrowableRenderer;

        r2 := @parameter0: java.lang.Throwable;

        $r1 = r0.<org.apache.log4j.EnhancedThrowableRenderer: java.lang.reflect.Method getStackTraceMethod>;

        if $r1 == null goto label5;

     label1:
        $r4 = r0.<org.apache.log4j.EnhancedThrowableRenderer: java.lang.reflect.Method getStackTraceMethod>;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, null);

        $r6 = (java.lang.Object[]) $r5;

        r7 = (java.lang.Object[]) $r6;

        $i0 = lengthof r7;

        $i1 = $i0 + 1;

        r8 = newarray (java.lang.String)[$i1];

        $r9 = virtualinvoke r2.<java.lang.Throwable: java.lang.String toString()>();

        r8[0] = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        i4 = 0;

     label2:
        $i2 = lengthof r7;

        if i4 >= $i2 goto label3;

        $i3 = i4 + 1;

        $r11 = r7[i4];

        $r12 = specialinvoke r0.<org.apache.log4j.EnhancedThrowableRenderer: java.lang.String formatElement(java.lang.Object,java.util.Map)>($r11, $r10);

        r8[$i3] = $r12;

        i4 = i4 + 1;

        goto label2;

     label3:
        return r8;

     label4:
        $r13 := @caughtexception;

     label5:
        $r3 = staticinvoke <org.apache.log4j.DefaultThrowableRenderer: java.lang.String[] render(java.lang.Throwable)>(r2);

        return $r3;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    private java.lang.String formatElement(java.lang.Object, java.util.Map)
    {
        java.net.URL $r15;
        org.apache.log4j.EnhancedThrowableRenderer r2;
        java.util.Map r7;
        java.lang.SecurityException $r21;
        java.lang.reflect.Method $r4;
        boolean $z0;
        java.lang.Exception $r20;
        java.lang.Object[] $r3;
        java.lang.StringBuffer $r23;
        int $i0, $i1, $i3, $i4, $i5, $i6, i7, $i8;
        java.lang.String $r6, $r13, $r14, $r16, $r17, $r18, $r19, $r22;
        java.lang.Package $r12;
        char $c2;
        java.security.ProtectionDomain $r10;
        java.lang.Object r1, $r5, $r8;
        java.lang.Class $r9;
        java.security.CodeSource $r11;

        r2 := @this: org.apache.log4j.EnhancedThrowableRenderer;

        r1 := @parameter0: java.lang.Object;

        r7 := @parameter1: java.util.Map;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>(java.lang.String)>("\tat ");

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

     label01:
        $r4 = r2.<org.apache.log4j.EnhancedThrowableRenderer: java.lang.reflect.Method getClassNameMethod>;

        $r3 = (java.lang.Object[]) null;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r3);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $r8 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        if $r8 == null goto label02;

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        goto label13;

     label02:
        $r9 = specialinvoke r2.<org.apache.log4j.EnhancedThrowableRenderer: java.lang.Class findClass(java.lang.String)>($r6);

        $i0 = virtualinvoke $r23.<java.lang.StringBuffer: int length()>();

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

     label03:
        $r10 = virtualinvoke $r9.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $r11 = virtualinvoke $r10.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();

        if $r11 == null goto label09;

        $r15 = virtualinvoke $r11.<java.security.CodeSource: java.net.URL getLocation()>();

        if $r15 == null goto label09;

        $r16 = "file";

        $r17 = virtualinvoke $r15.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z0 == 0 goto label08;

        $r18 = virtualinvoke $r15.<java.net.URL: java.lang.String getPath()>();

        if $r18 == null goto label07;

        $i1 = virtualinvoke $r18.<java.lang.String: int lastIndexOf(int)>(47);

        i7 = $i1;

        $c2 = <java.io.File: char separatorChar>;

        $i8 = (int) $c2;

        $i3 = virtualinvoke $r18.<java.lang.String: int lastIndexOf(int)>($i8);

        if $i3 <= $i1 goto label04;

        i7 = $i3;

     label04:
        if i7 <= 0 goto label05;

        $i4 = virtualinvoke $r18.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        if i7 != $i5 goto label06;

     label05:
        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r15);

        goto label07;

     label06:
        $i6 = i7 + 1;

        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int)>($i6);

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

     label07:
        goto label09;

     label08:
        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r15);

     label09:
        goto label11;

     label10:
        $r21 := @caughtexception;

     label11:
        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r12 = virtualinvoke $r9.<java.lang.Class: java.lang.Package getPackage()>();

        if $r12 == null goto label12;

        $r14 = virtualinvoke $r12.<java.lang.Package: java.lang.String getImplementationVersion()>();

        if $r14 == null goto label12;

        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

     label12:
        virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r22 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String substring(int)>($i0);

        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r22);

     label13:
        goto label15;

     label14:
        $r20 := @caughtexception;

     label15:
        $r13 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;

        catch java.lang.SecurityException from label03 to label09 with label10;
        catch java.lang.Exception from label01 to label13 with label14;
    }

    private java.lang.Class findClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        org.apache.log4j.EnhancedThrowableRenderer r5;
        java.lang.Thread $r0;
        java.lang.Class $r3, $r6, $r8, $r10;
        java.lang.ClassNotFoundException $r4, $r9;
        java.lang.ClassLoader $r1, $r7;
        java.lang.String r2;

        r5 := @this: org.apache.log4j.EnhancedThrowableRenderer;

        r2 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

     label2:
        return $r3;

     label3:
        $r9 := @caughtexception;

     label4:
        $r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2);

     label5:
        return $r10;

     label6:
        $r4 := @caughtexception;

        $r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r8 = virtualinvoke $r7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        return $r8;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
