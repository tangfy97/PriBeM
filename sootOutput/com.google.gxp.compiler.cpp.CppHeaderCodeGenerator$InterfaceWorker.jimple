class com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker extends com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker
{
    private final com.google.gxp.com.google.common.collect.ImmutableSet extraIncludess;

    public void <init>(java.lang.Appendable, com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.Interface, java.util.Set)
    {
        com.google.gxp.com.google.common.collect.ImmutableSet $r5;
        com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker r0;
        com.google.gxp.compiler.alerts.AlertSink r2;
        java.lang.Appendable r1;
        java.util.Set r4;
        com.google.gxp.compiler.base.Interface r3;

        r0 := @this: com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: com.google.gxp.compiler.alerts.AlertSink;

        r3 := @parameter2: com.google.gxp.compiler.base.Interface;

        r4 := @parameter3: java.util.Set;

        specialinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$InterfaceWorker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Interface)>(r1, r2, r3);

        $r5 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableSet: com.google.gxp.com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)>(r4);

        r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: com.google.gxp.com.google.common.collect.ImmutableSet extraIncludess> = $r5;

        return;
    }

    protected void appendClass()
    {
        com.google.gxp.compiler.alerts.SourcePosition $r7;
        java.lang.Object[] $r8;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r2;
        com.google.gxp.com.google.common.collect.ImmutableSet $r4;
        com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker r0;
        java.lang.String $r9;
        com.google.gxp.compiler.base.Interface $r1, $r3, $r5, $r6, $r10;

        r0 := @this: com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker;

        $r1 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: com.google.gxp.compiler.base.Interface iface>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Interface: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r3 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: com.google.gxp.compiler.base.Interface iface>;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendIfdefGuardStart(com.google.gxp.compiler.base.Root)>($r3);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendLine(java.lang.CharSequence)>("#include \"gxp/base/base.h\"");

        $r5 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: com.google.gxp.compiler.base.Interface iface>;

        $r4 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: com.google.gxp.com.google.common.collect.ImmutableSet extraIncludess>;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendImports(com.google.gxp.compiler.base.Root,java.util.Set)>($r5, $r4);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendNamespacesOpen(com.google.gxp.compiler.base.TemplateName)>($r2);

        $r6 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: com.google.gxp.compiler.base.Interface iface>;

        $r7 = virtualinvoke $r6.<com.google.gxp.compiler.base.Interface: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)>($r2);

        $r8[0] = $r9;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r7, "class %s {", $r8);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendLine(java.lang.CharSequence)>("public:");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendLine(java.lang.CharSequence)>("};");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendNamespacesClose(com.google.gxp.compiler.base.TemplateName)>($r2);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendLine()>();

        $r10 = r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: com.google.gxp.compiler.base.Interface iface>;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppHeaderCodeGenerator$InterfaceWorker: void appendIfdefGuardEnd(com.google.gxp.compiler.base.Root)>($r10);

        return;
    }
}
