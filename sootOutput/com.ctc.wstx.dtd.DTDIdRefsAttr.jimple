public final class com.ctc.wstx.dtd.DTDIdRefsAttr extends com.ctc.wstx.dtd.DTDAttribute
{

    public void <init>(com.ctc.wstx.dtd.NameKey, com.ctc.wstx.dtd.DefaultAttrValue, int, boolean, boolean)
    {
        com.ctc.wstx.dtd.DefaultAttrValue r2;
        com.ctc.wstx.dtd.NameKey r1;
        com.ctc.wstx.dtd.DTDIdRefsAttr r0;
        int i0;
        boolean z0, z1;

        r0 := @this: com.ctc.wstx.dtd.DTDIdRefsAttr;

        r1 := @parameter0: com.ctc.wstx.dtd.NameKey;

        r2 := @parameter1: com.ctc.wstx.dtd.DefaultAttrValue;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        specialinvoke r0.<com.ctc.wstx.dtd.DTDAttribute: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>(r1, r2, i0, z0, z1);

        return;
    }

    public com.ctc.wstx.dtd.DTDAttribute cloneWith(int)
    {
        com.ctc.wstx.dtd.DefaultAttrValue $r2;
        com.ctc.wstx.dtd.NameKey $r3;
        com.ctc.wstx.dtd.DTDIdRefsAttr $r0, r1;
        int i0;
        boolean $z0, $z1;

        r1 := @this: com.ctc.wstx.dtd.DTDIdRefsAttr;

        i0 := @parameter0: int;

        $r0 = new com.ctc.wstx.dtd.DTDIdRefsAttr;

        $r3 = r1.<com.ctc.wstx.dtd.DTDIdRefsAttr: com.ctc.wstx.dtd.NameKey mName>;

        $r2 = r1.<com.ctc.wstx.dtd.DTDIdRefsAttr: com.ctc.wstx.dtd.DefaultAttrValue mDefValue>;

        $z1 = r1.<com.ctc.wstx.dtd.DTDIdRefsAttr: boolean mCfgNsAware>;

        $z0 = r1.<com.ctc.wstx.dtd.DTDIdRefsAttr: boolean mCfgXml11>;

        specialinvoke $r0.<com.ctc.wstx.dtd.DTDIdRefsAttr: void <init>(com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.DefaultAttrValue,int,boolean,boolean)>($r3, $r2, i0, $z1, $z0);

        return $r0;
    }

    public int getValueType()
    {
        com.ctc.wstx.dtd.DTDIdRefsAttr r0;

        r0 := @this: com.ctc.wstx.dtd.DTDIdRefsAttr;

        return 4;
    }

    public java.lang.String validate(com.ctc.wstx.dtd.DTDValidatorBase, char[], int, int, boolean) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.dtd.DTDValidatorBase r0;
        com.ctc.wstx.dtd.NameKey $r5, $r6;
        com.ctc.wstx.dtd.DTDIdRefsAttr r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.ctc.wstx.dtd.ElementId $r7;
        java.lang.StringBuffer r14, $r15;
        int $i0, $i2, i5, i6, i7, i9, i10, $i13, $i15, $i16, $i17;
        java.lang.String $r8, $r10, $r11, $r12, r13;
        char $c1, $c3, $c4, c8, c11;
        com.ctc.wstx.dtd.ElementIdMap $r1;
        javax.xml.stream.Location $r2;
        char[] r3;

        r4 := @this: com.ctc.wstx.dtd.DTDIdRefsAttr;

        r0 := @parameter0: com.ctc.wstx.dtd.DTDValidatorBase;

        r3 := @parameter1: char[];

        i5 := @parameter2: int;

        i6 := @parameter3: int;

        z0 := @parameter4: boolean;

     label01:
        if i5 >= i6 goto label02;

        $c4 = r3[i5];

        $z10 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>($c4);

        if $z10 == 0 goto label02;

        i5 = i5 + 1;

        goto label01;

     label02:
        if i5 < i6 goto label03;

        $r12 = virtualinvoke r4.<com.ctc.wstx.dtd.DTDIdRefsAttr: java.lang.String reportValidationProblem(com.ctc.wstx.dtd.DTDValidatorBase,java.lang.String)>(r0, "Empty IDREFS value");

        return $r12;

     label03:
        $i13 = (int) -1;

        i7 = i6 + $i13;

     label04:
        if i7 <= i5 goto label05;

        $c3 = r3[i7];

        $z9 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>($c3);

        if $z9 == 0 goto label05;

        $i15 = (int) -1;

        i7 = i7 + $i15;

        goto label04;

     label05:
        $r1 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDValidatorBase: com.ctc.wstx.dtd.ElementIdMap getIdMap()>();

        $r2 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDValidatorBase: javax.xml.stream.Location getLocation()>();

        r13 = null;

        r14 = null;

     label06:
        if i5 > i7 goto label16;

        c8 = r3[i5];

        $z2 = r4.<com.ctc.wstx.dtd.DTDIdRefsAttr: boolean mCfgNsAware>;

        $z1 = r4.<com.ctc.wstx.dtd.DTDIdRefsAttr: boolean mCfgXml11>;

        $z3 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isNameStartChar(char,boolean,boolean)>(c8, $z2, $z1);

        if $z3 != 0 goto label07;

        $r11 = virtualinvoke r4.<com.ctc.wstx.dtd.DTDIdRefsAttr: java.lang.String reportInvalidChar(com.ctc.wstx.dtd.DTDValidatorBase,char,java.lang.String)>(r0, c8, "not valid as the first IDREFS character");

        return $r11;

     label07:
        $i16 = (int) c8;

        i9 = $i16;

        i10 = i5 + 1;

     label08:
        if i10 > i7 goto label11;

        c11 = r3[i10];

        $z5 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>(c11);

        if $z5 == 0 goto label09;

        goto label11;

     label09:
        $z7 = r4.<com.ctc.wstx.dtd.DTDIdRefsAttr: boolean mCfgNsAware>;

        $z6 = r4.<com.ctc.wstx.dtd.DTDIdRefsAttr: boolean mCfgXml11>;

        $z8 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isNameChar(char,boolean,boolean)>(c11, $z7, $z6);

        if $z8 != 0 goto label10;

        $r10 = virtualinvoke r4.<com.ctc.wstx.dtd.DTDIdRefsAttr: java.lang.String reportInvalidChar(com.ctc.wstx.dtd.DTDValidatorBase,char,java.lang.String)>(r0, c11, "not valid as an IDREFS character");

        return $r10;

     label10:
        $i2 = i9 * 31;

        $i17 = (int) c11;

        i9 = $i2 + $i17;

        i10 = i10 + 1;

        goto label08;

     label11:
        $i0 = i10 - i5;

        $r5 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDValidatorBase: com.ctc.wstx.dtd.NameKey getElemName()>();

        $r6 = r4.<com.ctc.wstx.dtd.DTDIdRefsAttr: com.ctc.wstx.dtd.NameKey mName>;

        $r7 = virtualinvoke $r1.<com.ctc.wstx.dtd.ElementIdMap: com.ctc.wstx.dtd.ElementId addReferenced(char[],int,int,int,javax.xml.stream.Location,com.ctc.wstx.dtd.NameKey,com.ctc.wstx.dtd.NameKey)>(r3, i5, $i0, i9, $r2, $r5, $r6);

        i5 = i10 + 1;

        if z0 == 0 goto label14;

        if r13 != null goto label12;

        r13 = virtualinvoke $r7.<com.ctc.wstx.dtd.ElementId: java.lang.String getId()>();

        goto label14;

     label12:
        if r14 != null goto label13;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>(java.lang.String)>(r13);

        r14 = $r15;

     label13:
        $r8 = virtualinvoke $r7.<com.ctc.wstx.dtd.ElementId: java.lang.String getId()>();

        r13 = $r8;

        virtualinvoke r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

     label14:
        if i5 > i7 goto label15;

        $c1 = r3[i5];

        $z4 = staticinvoke <com.ctc.wstx.io.WstxInputData: boolean isSpaceChar(char)>($c1);

        if $z4 == 0 goto label15;

        i5 = i5 + 1;

        goto label14;

     label15:
        goto label06;

     label16:
        if z0 == 0 goto label18;

        if r14 == null goto label17;

        r13 = virtualinvoke r14.<java.lang.StringBuffer: java.lang.String toString()>();

     label17:
        return r13;

     label18:
        return null;
    }

    public void validateDefault(com.ctc.wstx.sr.InputProblemReporter, boolean) throws org.codehaus.stax2.validation.XMLValidationException
    {
        com.ctc.wstx.dtd.DefaultAttrValue $r3;
        com.ctc.wstx.dtd.DTDIdRefsAttr r0;
        com.ctc.wstx.sr.InputProblemReporter r1;
        java.lang.String $r2;
        boolean z0;

        r0 := @this: com.ctc.wstx.dtd.DTDIdRefsAttr;

        r1 := @parameter0: com.ctc.wstx.sr.InputProblemReporter;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<com.ctc.wstx.dtd.DTDIdRefsAttr: java.lang.String validateDefaultNames(com.ctc.wstx.sr.InputProblemReporter,boolean)>(r1, z0);

        if z0 == 0 goto label1;

        $r3 = r0.<com.ctc.wstx.dtd.DTDIdRefsAttr: com.ctc.wstx.dtd.DefaultAttrValue mDefValue>;

        virtualinvoke $r3.<com.ctc.wstx.dtd.DefaultAttrValue: void setValue(java.lang.String)>($r2);

     label1:
        return;
    }
}
