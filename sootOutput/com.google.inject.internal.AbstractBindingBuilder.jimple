public abstract class com.google.inject.internal.AbstractBindingBuilder extends java.lang.Object
{
    public static final java.lang.String IMPLEMENTATION_ALREADY_SET;
    public static final java.lang.String SINGLE_INSTANCE_AND_SCOPE;
    public static final java.lang.String SCOPE_ALREADY_SET;
    public static final java.lang.String BINDING_TO_NULL;
    public static final java.lang.String CONSTANT_VALUE_ALREADY_SET;
    public static final java.lang.String ANNOTATION_ALREADY_SPECIFIED;
    protected static final com.google.inject.Key NULL_KEY;
    protected java.util.List elements;
    protected int position;
    protected final com.google.inject.Binder binder;
    private com.google.inject.internal.BindingImpl binding;

    public void <init>(com.google.inject.Binder, java.util.List, java.lang.Object, com.google.inject.Key)
    {
        com.google.inject.internal.Scoping $r6;
        com.google.inject.Key r5;
        java.util.List r2;
        com.google.inject.Binder r1;
        com.google.inject.internal.BindingImpl $r7;
        com.google.inject.internal.AbstractBindingBuilder r0;
        int $i0, $i1;
        java.lang.Object r4;
        com.google.inject.internal.UntargettedBindingImpl $r3;

        r0 := @this: com.google.inject.internal.AbstractBindingBuilder;

        r1 := @parameter0: com.google.inject.Binder;

        r2 := @parameter1: java.util.List;

        r4 := @parameter2: java.lang.Object;

        r5 := @parameter3: com.google.inject.Key;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.Binder binder> = r1;

        r0.<com.google.inject.internal.AbstractBindingBuilder: java.util.List elements> = r2;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        r0.<com.google.inject.internal.AbstractBindingBuilder: int position> = $i0;

        $r3 = new com.google.inject.internal.UntargettedBindingImpl;

        $r6 = <com.google.inject.internal.Scoping: com.google.inject.internal.Scoping UNSCOPED>;

        specialinvoke $r3.<com.google.inject.internal.UntargettedBindingImpl: void <init>(java.lang.Object,com.google.inject.Key,com.google.inject.internal.Scoping)>(r4, r5, $r6);

        r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding> = $r3;

        $i1 = r0.<com.google.inject.internal.AbstractBindingBuilder: int position>;

        $r7 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        interfaceinvoke r2.<java.util.List: void add(int,java.lang.Object)>($i1, $r7);

        return;
    }

    protected com.google.inject.internal.BindingImpl getBinding()
    {
        com.google.inject.internal.BindingImpl $r1;
        com.google.inject.internal.AbstractBindingBuilder r0;

        r0 := @this: com.google.inject.internal.AbstractBindingBuilder;

        $r1 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        return $r1;
    }

    protected com.google.inject.internal.BindingImpl setBinding(com.google.inject.internal.BindingImpl)
    {
        java.util.List $r2;
        com.google.inject.internal.BindingImpl r1;
        com.google.inject.internal.AbstractBindingBuilder r0;
        int $i0;

        r0 := @this: com.google.inject.internal.AbstractBindingBuilder;

        r1 := @parameter0: com.google.inject.internal.BindingImpl;

        r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding> = r1;

        $r2 = r0.<com.google.inject.internal.AbstractBindingBuilder: java.util.List elements>;

        $i0 = r0.<com.google.inject.internal.AbstractBindingBuilder: int position>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, r1);

        return r1;
    }

    protected com.google.inject.internal.BindingImpl annotatedWithInternal(java.lang.Class)
    {
        com.google.inject.Key $r4, $r6;
        com.google.inject.internal.BindingImpl $r2, $r3, $r7, $r8;
        com.google.inject.internal.AbstractBindingBuilder r1;
        java.lang.Class r0;
        com.google.inject.TypeLiteral $r5;

        r1 := @this: com.google.inject.internal.AbstractBindingBuilder;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "annotationType");

        virtualinvoke r1.<com.google.inject.internal.AbstractBindingBuilder: void checkNotAnnotated()>();

        $r3 = r1.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        $r2 = r1.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        $r4 = virtualinvoke $r2.<com.google.inject.internal.BindingImpl: com.google.inject.Key getKey()>();

        $r5 = virtualinvoke $r4.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r6 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral,java.lang.Class)>($r5, r0);

        $r7 = virtualinvoke $r3.<com.google.inject.internal.BindingImpl: com.google.inject.internal.BindingImpl withKey(com.google.inject.Key)>($r6);

        $r8 = virtualinvoke r1.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl setBinding(com.google.inject.internal.BindingImpl)>($r7);

        return $r8;
    }

    protected com.google.inject.internal.BindingImpl annotatedWithInternal(java.lang.'annotation'.Annotation)
    {
        com.google.inject.Key $r4, $r6;
        com.google.inject.internal.BindingImpl $r2, $r3, $r7, $r8;
        com.google.inject.internal.AbstractBindingBuilder r1;
        java.lang.'annotation'.Annotation r0;
        com.google.inject.TypeLiteral $r5;

        r1 := @this: com.google.inject.internal.AbstractBindingBuilder;

        r0 := @parameter0: java.lang.'annotation'.Annotation;

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "annotation");

        virtualinvoke r1.<com.google.inject.internal.AbstractBindingBuilder: void checkNotAnnotated()>();

        $r3 = r1.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        $r2 = r1.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        $r4 = virtualinvoke $r2.<com.google.inject.internal.BindingImpl: com.google.inject.Key getKey()>();

        $r5 = virtualinvoke $r4.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r6 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral,java.lang.'annotation'.Annotation)>($r5, r0);

        $r7 = virtualinvoke $r3.<com.google.inject.internal.BindingImpl: com.google.inject.internal.BindingImpl withKey(com.google.inject.Key)>($r6);

        $r8 = virtualinvoke r1.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl setBinding(com.google.inject.internal.BindingImpl)>($r7);

        return $r8;
    }

    public void in(java.lang.Class)
    {
        com.google.inject.internal.Scoping $r3;
        com.google.inject.internal.BindingImpl $r2, $r4;
        com.google.inject.internal.AbstractBindingBuilder r1;
        java.lang.Class r0;

        r1 := @this: com.google.inject.internal.AbstractBindingBuilder;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "scopeAnnotation");

        virtualinvoke r1.<com.google.inject.internal.AbstractBindingBuilder: void checkNotScoped()>();

        $r2 = virtualinvoke r1.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl getBinding()>();

        $r3 = staticinvoke <com.google.inject.internal.Scoping: com.google.inject.internal.Scoping forAnnotation(java.lang.Class)>(r0);

        $r4 = virtualinvoke $r2.<com.google.inject.internal.BindingImpl: com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping)>($r3);

        virtualinvoke r1.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl setBinding(com.google.inject.internal.BindingImpl)>($r4);

        return;
    }

    public void in(com.google.inject.Scope)
    {
        com.google.inject.internal.Scoping $r3;
        com.google.inject.internal.BindingImpl $r2, $r4;
        com.google.inject.internal.AbstractBindingBuilder r1;
        com.google.inject.Scope r0;

        r1 := @this: com.google.inject.internal.AbstractBindingBuilder;

        r0 := @parameter0: com.google.inject.Scope;

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "scope");

        virtualinvoke r1.<com.google.inject.internal.AbstractBindingBuilder: void checkNotScoped()>();

        $r2 = virtualinvoke r1.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl getBinding()>();

        $r3 = staticinvoke <com.google.inject.internal.Scoping: com.google.inject.internal.Scoping forInstance(com.google.inject.Scope)>(r0);

        $r4 = virtualinvoke $r2.<com.google.inject.internal.BindingImpl: com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping)>($r3);

        virtualinvoke r1.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl setBinding(com.google.inject.internal.BindingImpl)>($r4);

        return;
    }

    public void asEagerSingleton()
    {
        com.google.inject.internal.Scoping $r2;
        com.google.inject.internal.BindingImpl $r1, $r3;
        com.google.inject.internal.AbstractBindingBuilder r0;

        r0 := @this: com.google.inject.internal.AbstractBindingBuilder;

        virtualinvoke r0.<com.google.inject.internal.AbstractBindingBuilder: void checkNotScoped()>();

        $r1 = virtualinvoke r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl getBinding()>();

        $r2 = <com.google.inject.internal.Scoping: com.google.inject.internal.Scoping EAGER_SINGLETON>;

        $r3 = virtualinvoke $r1.<com.google.inject.internal.BindingImpl: com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping)>($r2);

        virtualinvoke r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl setBinding(com.google.inject.internal.BindingImpl)>($r3);

        return;
    }

    protected boolean keyTypeIsSet()
    {
        com.google.inject.Key $r3;
        com.google.inject.internal.BindingImpl $r1;
        java.lang.reflect.Type $r5;
        com.google.inject.internal.AbstractBindingBuilder r0;
        java.lang.Class $r2;
        com.google.inject.TypeLiteral $r4;
        boolean $z0, $z1;

        r0 := @this: com.google.inject.internal.AbstractBindingBuilder;

        $r2 = class "Ljava/lang/Void;";

        $r1 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        $r3 = virtualinvoke $r1.<com.google.inject.internal.BindingImpl: com.google.inject.Key getKey()>();

        $r4 = virtualinvoke $r3.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r5 = virtualinvoke $r4.<com.google.inject.TypeLiteral: java.lang.reflect.Type getType()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected void checkNotTargetted()
    {
        java.lang.Object[] $r2;
        com.google.inject.Binder $r3;
        com.google.inject.internal.BindingImpl $r1;
        com.google.inject.internal.AbstractBindingBuilder r0;
        boolean $z0;

        r0 := @this: com.google.inject.internal.AbstractBindingBuilder;

        $r1 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        $z0 = $r1 instanceof com.google.inject.internal.UntargettedBindingImpl;

        if $z0 != 0 goto label1;

        $r3 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.Binder binder>;

        $r2 = newarray (java.lang.Object)[0];

        interfaceinvoke $r3.<com.google.inject.Binder: void addError(java.lang.String,java.lang.Object[])>("Implementation is set more than once.", $r2);

     label1:
        return;
    }

    protected void checkNotAnnotated()
    {
        java.lang.Object[] $r4;
        com.google.inject.Binder $r5;
        com.google.inject.internal.BindingImpl $r1;
        com.google.inject.internal.AbstractBindingBuilder r0;
        com.google.inject.Key $r2;
        java.lang.Class $r3;

        r0 := @this: com.google.inject.internal.AbstractBindingBuilder;

        $r1 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        $r2 = virtualinvoke $r1.<com.google.inject.internal.BindingImpl: com.google.inject.Key getKey()>();

        $r3 = virtualinvoke $r2.<com.google.inject.Key: java.lang.Class getAnnotationType()>();

        if $r3 == null goto label1;

        $r5 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.Binder binder>;

        $r4 = newarray (java.lang.Object)[0];

        interfaceinvoke $r5.<com.google.inject.Binder: void addError(java.lang.String,java.lang.Object[])>("More than one annotation is specified for this binding.", $r4);

     label1:
        return;
    }

    protected void checkNotScoped()
    {
        java.lang.Object[] $r4, $r6;
        com.google.inject.internal.Scoping $r3;
        com.google.inject.Binder $r5, $r7;
        com.google.inject.internal.BindingImpl $r1, $r2;
        com.google.inject.internal.AbstractBindingBuilder r0;
        boolean $z0, $z1;

        r0 := @this: com.google.inject.internal.AbstractBindingBuilder;

        $r1 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        $z0 = $r1 instanceof com.google.inject.spi.InstanceBinding;

        if $z0 == 0 goto label1;

        $r7 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.Binder binder>;

        $r6 = newarray (java.lang.Object)[0];

        interfaceinvoke $r7.<com.google.inject.Binder: void addError(java.lang.String,java.lang.Object[])>("Setting the scope is not permitted when binding to a single instance.", $r6);

        return;

     label1:
        $r2 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.internal.BindingImpl binding>;

        $r3 = virtualinvoke $r2.<com.google.inject.internal.BindingImpl: com.google.inject.internal.Scoping getScoping()>();

        $z1 = virtualinvoke $r3.<com.google.inject.internal.Scoping: boolean isExplicitlyScoped()>();

        if $z1 == 0 goto label2;

        $r5 = r0.<com.google.inject.internal.AbstractBindingBuilder: com.google.inject.Binder binder>;

        $r4 = newarray (java.lang.Object)[0];

        interfaceinvoke $r5.<com.google.inject.Binder: void addError(java.lang.String,java.lang.Object[])>("Scope is set more than once.", $r4);

     label2:
        return;
    }

    static void <clinit>()
    {
        com.google.inject.Key $r0;

        <com.google.inject.internal.AbstractBindingBuilder: java.lang.String ANNOTATION_ALREADY_SPECIFIED> = "More than one annotation is specified for this binding.";

        <com.google.inject.internal.AbstractBindingBuilder: java.lang.String CONSTANT_VALUE_ALREADY_SET> = "Constant value is set more than once.";

        <com.google.inject.internal.AbstractBindingBuilder: java.lang.String BINDING_TO_NULL> = "Binding to null instances is not allowed. Use toProvider(Providers.of(null)) if this is your intended behaviour.";

        <com.google.inject.internal.AbstractBindingBuilder: java.lang.String SCOPE_ALREADY_SET> = "Scope is set more than once.";

        <com.google.inject.internal.AbstractBindingBuilder: java.lang.String SINGLE_INSTANCE_AND_SCOPE> = "Setting the scope is not permitted when binding to a single instance.";

        <com.google.inject.internal.AbstractBindingBuilder: java.lang.String IMPLEMENTATION_ALREADY_SET> = "Implementation is set more than once.";

        $r0 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(class "Ljava/lang/Void;");

        <com.google.inject.internal.AbstractBindingBuilder: com.google.inject.Key NULL_KEY> = $r0;

        return;
    }
}
