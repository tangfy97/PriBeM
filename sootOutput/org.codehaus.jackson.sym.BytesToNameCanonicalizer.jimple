public final class org.codehaus.jackson.sym.BytesToNameCanonicalizer extends java.lang.Object
{
    protected static final int DEFAULT_TABLE_SIZE;
    protected static final int MAX_TABLE_SIZE;
    static final int MAX_ENTRIES_FOR_REUSE;
    static final int MIN_HASH_SIZE;
    static final int INITIAL_COLLISION_LEN;
    static final int LAST_VALID_BUCKET;
    final org.codehaus.jackson.sym.BytesToNameCanonicalizer _parent;
    final boolean _intern;
    private int _count;
    private int _mainHashMask;
    private int[] _mainHash;
    private org.codehaus.jackson.sym.Name[] _mainNames;
    private org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList;
    private int _collCount;
    private int _collEnd;
    private transient boolean _needRehash;
    private boolean _mainHashShared;
    private boolean _mainNamesShared;
    private boolean _collListShared;

    public static org.codehaus.jackson.sym.BytesToNameCanonicalizer createRoot()
    {
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r0;

        $r0 = new org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        specialinvoke $r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void <init>(int,boolean)>(64, 1);

        return $r0;
    }

    public synchronized org.codehaus.jackson.sym.BytesToNameCanonicalizer makeChild(boolean, boolean)
    {
        org.codehaus.jackson.sym.BytesToNameCanonicalizer $r0, r1;
        boolean z0, z1;

        r1 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        z1 := @parameter0: boolean;

        z0 := @parameter1: boolean;

        $r0 = new org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        specialinvoke $r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void <init>(org.codehaus.jackson.sym.BytesToNameCanonicalizer,boolean)>(r1, z0);

        return $r0;
    }

    public void release()
    {
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0, $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean maybeDirty()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer _parent>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer _parent>;

        specialinvoke $r2.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void mergeChild(org.codehaus.jackson.sym.BytesToNameCanonicalizer)>(r0);

        specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void markAsShared()>();

     label1:
        return;
    }

    private void <init>(int, boolean)
    {
        int $i0, $i1, i2, i3;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        i2 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer _parent> = null;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _intern> = z0;

        if i2 >= 16 goto label1;

        i2 = 16;

        goto label4;

     label1:
        $i0 = i2 - 1;

        $i1 = i2 & $i0;

        if $i1 == 0 goto label4;

        i3 = 16;

     label2:
        if i3 >= i2 goto label3;

        i3 = i3 + i3;

        goto label2;

     label3:
        i2 = i3;

     label4:
        specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void initTables(int)>(i2);

        return;
    }

    private void <init>(org.codehaus.jackson.sym.BytesToNameCanonicalizer, boolean)
    {
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0, r1;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] $r4;
        org.codehaus.jackson.sym.Name[] $r3;
        int[] $r2;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r1 := @parameter0: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer _parent> = r1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _intern> = z0;

        $i0 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count>;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count> = $i0;

        $i1 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask>;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask> = $i1;

        $r2 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash> = $r2;

        $r3 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames> = $r3;

        $r4 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList> = $r4;

        $i2 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount>;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount> = $i2;

        $i3 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd>;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd> = $i3;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _needRehash> = 0;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainHashShared> = 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainNamesShared> = 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _collListShared> = 1;

        return;
    }

    private void initTables(int)
    {
        org.codehaus.jackson.sym.Name[] $r2;
        int[] $r1;
        int i0, $i1;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        i0 := @parameter0: int;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count> = 0;

        $r1 = newarray (int)[i0];

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash> = $r1;

        $r2 = newarray (org.codehaus.jackson.sym.Name)[i0];

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames> = $r2;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainHashShared> = 0;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainNamesShared> = 0;

        $i1 = i0 - 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask> = $i1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _collListShared> = 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList> = null;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd> = 0;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _needRehash> = 0;

        return;
    }

    private synchronized void mergeChild(org.codehaus.jackson.sym.BytesToNameCanonicalizer)
    {
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0, r1;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] $r4;
        org.codehaus.jackson.sym.Name[] $r3;
        int[] $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r1 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r0 := @parameter0: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        i0 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count>;

        $i1 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count>;

        if i0 > $i1 goto label1;

        return;

     label1:
        $i2 = virtualinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int size()>();

        if $i2 <= 6000 goto label2;

        specialinvoke r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void initTables(int)>(64);

        goto label3;

     label2:
        $i3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count>;

        r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count> = $i3;

        $r2 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash> = $r2;

        $r3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames> = $r3;

        r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainHashShared> = 1;

        r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainNamesShared> = 1;

        $i4 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask>;

        r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask> = $i4;

        $r4 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList> = $r4;

        $i5 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount>;

        r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount> = $i5;

        $i6 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd>;

        r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd> = $i6;

     label3:
        return;
    }

    private void markAsShared()
    {
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainHashShared> = 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainNamesShared> = 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _collListShared> = 1;

        return;
    }

    public int size()
    {
        int $i0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        $i0 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count>;

        return $i0;
    }

    public boolean maybeDirty()
    {
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        $z0 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainHashShared>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static org.codehaus.jackson.sym.Name getEmptyName()
    {
        org.codehaus.jackson.sym.Name1 $r0;

        $r0 = staticinvoke <org.codehaus.jackson.sym.Name1: org.codehaus.jackson.sym.Name1 getEmptyName()>();

        return $r0;
    }

    public org.codehaus.jackson.sym.Name findName(int)
    {
        org.codehaus.jackson.sym.Name $r3, r5;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        int[] $r1;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9, $i11;
        boolean $z0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] $r2;
        org.codehaus.jackson.sym.Name[] $r4;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket r6;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.codehaus.jackson.sym.BytesToNameCanonicalizer: int calcHash(int)>(i0);

        $i2 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask>;

        i3 = $i1 & $i2;

        $r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        i8 = $r1[i3];

        $i4 = i8 >> 8;

        $i5 = $i4 ^ $i1;

        $i6 = $i5 << 8;

        if $i6 != 0 goto label3;

        $r4 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        r5 = $r4[i3];

        if r5 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r5.<org.codehaus.jackson.sym.Name: boolean equals(int)>(i0);

        if $z0 == 0 goto label2;

        return r5;

     label2:
        goto label4;

     label3:
        if i8 != 0 goto label4;

        return null;

     label4:
        $i7 = i8 & 255;

        if $i7 <= 0 goto label5;

        $i11 = (int) -1;

        i9 = $i7 + $i11;

        $r2 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        r6 = $r2[i9];

        if r6 == null goto label5;

        $r3 = virtualinvoke r6.<org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket: org.codehaus.jackson.sym.Name find(int,int,int)>($i1, i0, 0);

        return $r3;

     label5:
        return null;
    }

    public org.codehaus.jackson.sym.Name findName(int, int)
    {
        org.codehaus.jackson.sym.Name $r3, r5;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        int[] $r1;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i9, i10, $i12;
        boolean $z0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] $r2;
        org.codehaus.jackson.sym.Name[] $r4;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket r6;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <org.codehaus.jackson.sym.BytesToNameCanonicalizer: int calcHash(int,int)>(i0, i1);

        $i3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask>;

        i4 = $i2 & $i3;

        $r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        i9 = $r1[i4];

        $i5 = i9 >> 8;

        $i6 = $i5 ^ $i2;

        $i7 = $i6 << 8;

        if $i7 != 0 goto label3;

        $r4 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        r5 = $r4[i4];

        if r5 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r5.<org.codehaus.jackson.sym.Name: boolean equals(int,int)>(i0, i1);

        if $z0 == 0 goto label2;

        return r5;

     label2:
        goto label4;

     label3:
        if i9 != 0 goto label4;

        return null;

     label4:
        $i8 = i9 & 255;

        if $i8 <= 0 goto label5;

        $i12 = (int) -1;

        i10 = $i8 + $i12;

        $r2 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        r6 = $r2[i10];

        if r6 == null goto label5;

        $r3 = virtualinvoke r6.<org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket: org.codehaus.jackson.sym.Name find(int,int,int)>($i2, i0, i1);

        return $r3;

     label5:
        return null;
    }

    public org.codehaus.jackson.sym.Name findName(int[], int)
    {
        org.codehaus.jackson.sym.Name $r4, r6;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r1;
        int[] r0, $r2;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9, $i11;
        boolean $z0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] $r3;
        org.codehaus.jackson.sym.Name[] $r5;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket r7;

        r1 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.codehaus.jackson.sym.BytesToNameCanonicalizer: int calcHash(int[],int)>(r0, i0);

        $i2 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask>;

        i3 = $i1 & $i2;

        $r2 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        i8 = $r2[i3];

        $i4 = i8 >> 8;

        $i5 = $i4 ^ $i1;

        $i6 = $i5 << 8;

        if $i6 != 0 goto label3;

        $r5 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        r6 = $r5[i3];

        if r6 == null goto label1;

        $z0 = virtualinvoke r6.<org.codehaus.jackson.sym.Name: boolean equals(int[],int)>(r0, i0);

        if $z0 == 0 goto label2;

     label1:
        return r6;

     label2:
        goto label4;

     label3:
        if i8 != 0 goto label4;

        return null;

     label4:
        $i7 = i8 & 255;

        if $i7 <= 0 goto label5;

        $i11 = (int) -1;

        i9 = $i7 + $i11;

        $r3 = r1.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        r7 = $r3[i9];

        if r7 == null goto label5;

        $r4 = virtualinvoke r7.<org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket: org.codehaus.jackson.sym.Name find(int,int[],int)>($i1, r0, i0);

        return $r4;

     label5:
        return null;
    }

    public org.codehaus.jackson.sym.Name addName(java.lang.String, int[], int)
    {
        org.codehaus.jackson.sym.Name $r2;
        org.codehaus.jackson.util.InternCache $r3;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        int[] r1;
        int i0, $i1;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        $z0 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _intern>;

        if $z0 == 0 goto label1;

        $r3 = <org.codehaus.jackson.util.InternCache: org.codehaus.jackson.util.InternCache instance>;

        r4 = virtualinvoke $r3.<org.codehaus.jackson.util.InternCache: java.lang.String intern(java.lang.String)>(r4);

     label1:
        $i1 = staticinvoke <org.codehaus.jackson.sym.BytesToNameCanonicalizer: int calcHash(int[],int)>(r1, i0);

        $r2 = staticinvoke <org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name constructName(int,java.lang.String,int[],int)>($i1, r4, r1, i0);

        specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void _addSymbol(int,org.codehaus.jackson.sym.Name)>($i1, $r2);

        return $r2;
    }

    public static final int calcHash(int)
    {
        int i0, $i1, $i2, i3, i4;

        i0 := @parameter0: int;

        $i1 = i0 >>> 16;

        i3 = i0 ^ $i1;

        $i2 = i3 >>> 8;

        i4 = i3 ^ $i2;

        return i4;
    }

    public static final int calcHash(int, int)
    {
        int i0, i1, $i2, $i3, $i4, i5, i6, i7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 * 31;

        i5 = $i2 + i1;

        $i3 = i5 >>> 16;

        i6 = i5 ^ $i3;

        $i4 = i6 >>> 8;

        i7 = i6 ^ $i4;

        return i7;
    }

    public static final int calcHash(int[], int)
    {
        int[] r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i5 = r0[0];

        i6 = 1;

     label1:
        if i6 >= i0 goto label2;

        $i4 = i5 * 31;

        $i3 = r0[i6];

        i5 = $i4 + $i3;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i1 = i5 >>> 16;

        i7 = i5 ^ $i1;

        $i2 = i7 >>> 8;

        i8 = i7 ^ $i2;

        return i8;
    }

    private void _addSymbol(int, org.codehaus.jackson.sym.Name)
    {
        int[] $r3, $r10, $r12, $r13;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.jackson.sym.Name[] $r1, $r11;
        org.codehaus.jackson.sym.Name $r2, r5;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, $i26, $i28;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] $r6, $r8, $r9;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket $r7, $r14;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        i2 := @parameter0: int;

        r5 := @parameter1: org.codehaus.jackson.sym.Name;

        $z0 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainHashShared>;

        if $z0 == 0 goto label01;

        specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void unshareMain()>();

     label01:
        $z1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _needRehash>;

        if $z1 == 0 goto label02;

        specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void rehash()>();

     label02:
        $i0 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count> = $i1;

        $i3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask>;

        $i16 = i2 & $i3;

        $r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        $r2 = $r1[$i16];

        if $r2 != null goto label04;

        $r10 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        $i15 = i2 << 8;

        $r10[$i16] = $i15;

        $z3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainNamesShared>;

        if $z3 == 0 goto label03;

        specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void unshareNames()>();

     label03:
        $r11 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        $r11[$i16] = r5;

        goto label10;

     label04:
        $z2 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _collListShared>;

        if $z2 == 0 goto label05;

        specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void unshareCollision()>();

     label05:
        $i4 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount>;

        $i5 = $i4 + 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount> = $i5;

        $r3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        $i13 = $r3[$i16];

        $i14 = $i13 & 255;

        if $i14 != 0 goto label08;

        $i9 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd>;

        if $i9 > 254 goto label06;

        i17 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd>;

        $i10 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd>;

        $i11 = $i10 + 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd> = $i11;

        $r9 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        $i12 = lengthof $r9;

        if i17 < $i12 goto label07;

        specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void expandCollision()>();

        goto label07;

     label06:
        i17 = specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int findBestBucket()>();

     label07:
        $r12 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        $i26 = (int) -256;

        $i18 = $i13 & $i26;

        $i19 = i17 + 1;

        $i20 = $i18 | $i19;

        $r12[$i16] = $i20;

        goto label09;

     label08:
        $i28 = (int) -1;

        i17 = $i14 + $i28;

     label09:
        $r8 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        $r14 = new org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket;

        $r6 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        $r7 = $r6[i17];

        specialinvoke $r14.<org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket: void <init>(org.codehaus.jackson.sym.Name,org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket)>(r5, $r7);

        $r8[i17] = $r14;

     label10:
        $r13 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        $i21 = lengthof $r13;

        $i22 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count>;

        $i23 = $i21 >> 1;

        if $i22 <= $i23 goto label12;

        i24 = $i21 >> 2;

        $i7 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count>;

        $i6 = $i21 - i24;

        if $i7 <= $i6 goto label11;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _needRehash> = 1;

        goto label12;

     label11:
        $i8 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount>;

        if $i8 < i24 goto label12;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _needRehash> = 1;

     label12:
        return;
    }

    private void rehash()
    {
        int[] r1, $r2, $r14, $r22, $r25, $r29;
        org.codehaus.jackson.sym.Name[] r3, $r4, $r15, $r23, $r24;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r31;
        org.codehaus.jackson.sym.Name r13, $r16, r26;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, i25, i26, $i27, $i28, $i29, $i31, $i33;
        java.lang.String $r12;
        java.lang.RuntimeException $r32;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] $r5, $r18, $r20, $r21, r27;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket $r19, r28, $r30;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _needRehash> = 0;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainNamesShared> = 0;

        r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        i0 = lengthof r1;

        i1 = i0 + i0;

        if i1 <= 65536 goto label01;

        specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void nukeSymbols()>();

        return;

     label01:
        $r2 = newarray (int)[i1];

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash> = $r2;

        $i2 = i1 - 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask> = $i2;

        r3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        $r4 = newarray (org.codehaus.jackson.sym.Name)[i1];

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames> = $r4;

        i20 = 0;

        i21 = 0;

     label02:
        if i21 >= i0 goto label04;

        r26 = r3[i21];

        if r26 == null goto label03;

        i20 = i20 + 1;

        $i17 = virtualinvoke r26.<org.codehaus.jackson.sym.Name: int hashCode()>();

        $i18 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask>;

        i22 = $i17 & $i18;

        $r24 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        $r24[i22] = r26;

        $r25 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        $i19 = $i17 << 8;

        $r25[i22] = $i19;

     label03:
        i21 = i21 + 1;

        goto label02;

     label04:
        i23 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd>;

        if i23 != 0 goto label05;

        return;

     label05:
        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount> = 0;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd> = 0;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _collListShared> = 0;

        r27 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        $i3 = lengthof r27;

        $r5 = newarray (org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket)[$i3];

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList> = $r5;

        i24 = 0;

     label06:
        if i24 >= i23 goto label15;

        r28 = r27[i24];

     label07:
        if r28 == null goto label14;

        i20 = i20 + 1;

        r13 = r28.<org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket: org.codehaus.jackson.sym.Name mName>;

        $i6 = virtualinvoke r13.<org.codehaus.jackson.sym.Name: int hashCode()>();

        $i7 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _mainHashMask>;

        i8 = $i6 & $i7;

        $r14 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        i9 = $r14[i8];

        $r15 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        $r16 = $r15[i8];

        if $r16 != null goto label08;

        $r22 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        $i16 = $i6 << 8;

        $r22[i8] = $i16;

        $r23 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        $r23[i8] = r13;

        goto label13;

     label08:
        $i10 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount>;

        $i11 = $i10 + 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount> = $i11;

        i25 = i9 & 255;

        if i25 != 0 goto label11;

        $i12 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd>;

        if $i12 > 254 goto label09;

        i26 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd>;

        $i13 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd>;

        $i14 = $i13 + 1;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd> = $i14;

        $r21 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        $i15 = lengthof $r21;

        if i26 < $i15 goto label10;

        specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: void expandCollision()>();

        goto label10;

     label09:
        i26 = specialinvoke r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int findBestBucket()>();

     label10:
        $r29 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        $i31 = (int) -256;

        $i27 = i9 & $i31;

        $i28 = i26 + 1;

        $i29 = $i27 | $i28;

        $r29[i8] = $i29;

        goto label12;

     label11:
        $i33 = (int) -1;

        i26 = i25 + $i33;

     label12:
        $r20 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        $r30 = new org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket;

        $r18 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        $r19 = $r18[i26];

        specialinvoke $r30.<org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket: void <init>(org.codehaus.jackson.sym.Name,org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket)>(r13, $r19);

        $r20[i26] = $r30;

     label13:
        r28 = r28.<org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket mNext>;

        goto label07;

     label14:
        i24 = i24 + 1;

        goto label06;

     label15:
        $i4 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count>;

        if i20 == $i4 goto label16;

        $r32 = new java.lang.RuntimeException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: count after rehash ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; should be ");

        $i5 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r32;

     label16:
        return;
    }

    private void nukeSymbols()
    {
        org.codehaus.jackson.sym.Name[] $r2;
        int[] $r1;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] $r3;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _count> = 0;

        $r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, 0);

        $r2 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, null);

        $r3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r3, null);

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collCount> = 0;

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd> = 0;

        return;
    }

    private int findBestBucket()
    {
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] r1;
        int i0, $i1, i2, i3, i4, $i6;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket $r2;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        i2 = 2147483647;

        $i6 = (int) -1;

        i3 = $i6;

        i4 = 0;

        i0 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int _collEnd>;

     label1:
        if i4 >= i0 goto label4;

        $r2 = r1[i4];

        $i1 = virtualinvoke $r2.<org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket: int length()>();

        if $i1 >= i2 goto label3;

        if $i1 != 1 goto label2;

        return i4;

     label2:
        i2 = $i1;

        i3 = i4;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return i3;
    }

    private void unshareMain()
    {
        int[] r1, $r2, $r3, $r4;
        int i0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        $r2 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        i0 = lengthof $r2;

        $r3 = newarray (int)[i0];

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash> = $r3;

        $r4 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: int[] _mainHash>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, i0);

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainHashShared> = 0;

        return;
    }

    private void unshareCollision()
    {
        int i0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] r1, $r2, $r3, $r4;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        if r1 != null goto label1;

        $r4 = newarray (org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket)[32];

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList> = $r4;

        goto label2;

     label1:
        i0 = lengthof r1;

        $r2 = newarray (org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket)[i0];

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList> = $r2;

        $r3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, i0);

     label2:
        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _collListShared> = 0;

        return;
    }

    private void unshareNames()
    {
        org.codehaus.jackson.sym.Name[] r1, $r2, $r3;
        int i0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        i0 = lengthof r1;

        $r2 = newarray (org.codehaus.jackson.sym.Name)[i0];

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames> = $r2;

        $r3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.Name[] _mainNames>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, i0);

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: boolean _mainNamesShared> = 0;

        return;
    }

    private void expandCollision()
    {
        int i0, $i1;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer r0;
        org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] r1, $r2, $r3;

        r0 := @this: org.codehaus.jackson.sym.BytesToNameCanonicalizer;

        r1 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        i0 = lengthof r1;

        $i1 = i0 + i0;

        $r2 = newarray (org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket)[$i1];

        r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList> = $r2;

        $r3 = r0.<org.codehaus.jackson.sym.BytesToNameCanonicalizer: org.codehaus.jackson.sym.BytesToNameCanonicalizer$Bucket[] _collList>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, i0);

        return;
    }

    private static org.codehaus.jackson.sym.Name constructName(int, java.lang.String, int[], int)
    {
        org.codehaus.jackson.sym.NameN $r0;
        int[] r2, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.String r1;
        org.codehaus.jackson.sym.Name1 $r5;
        org.codehaus.jackson.sym.Name2 $r4;
        org.codehaus.jackson.sym.Name3 $r3;

        i1 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: int[];

        i0 := @parameter3: int;

        if i0 >= 4 goto label4;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r5 = new org.codehaus.jackson.sym.Name1;

        $i8 = r2[0];

        specialinvoke $r5.<org.codehaus.jackson.sym.Name1: void <init>(java.lang.String,int,int)>(r1, i1, $i8);

        return $r5;

     label2:
        $r4 = new org.codehaus.jackson.sym.Name2;

        $i7 = r2[0];

        $i6 = r2[1];

        specialinvoke $r4.<org.codehaus.jackson.sym.Name2: void <init>(java.lang.String,int,int,int)>(r1, i1, $i7, $i6);

        return $r4;

     label3:
        $r3 = new org.codehaus.jackson.sym.Name3;

        $i5 = r2[0];

        $i4 = r2[1];

        $i3 = r2[2];

        specialinvoke $r3.<org.codehaus.jackson.sym.Name3: void <init>(java.lang.String,int,int,int,int)>(r1, i1, $i5, $i4, $i3);

        return $r3;

     label4:
        $r6 = newarray (int)[i0];

        i9 = 0;

     label5:
        if i9 >= i0 goto label6;

        $i2 = r2[i9];

        $r6[i9] = $i2;

        i9 = i9 + 1;

        goto label5;

     label6:
        $r0 = new org.codehaus.jackson.sym.NameN;

        specialinvoke $r0.<org.codehaus.jackson.sym.NameN: void <init>(java.lang.String,int,int[],int)>(r1, i1, $r6, i0);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.sym.BytesToNameCanonicalizer: int LAST_VALID_BUCKET> = 254;

        <org.codehaus.jackson.sym.BytesToNameCanonicalizer: int INITIAL_COLLISION_LEN> = 32;

        <org.codehaus.jackson.sym.BytesToNameCanonicalizer: int MIN_HASH_SIZE> = 16;

        <org.codehaus.jackson.sym.BytesToNameCanonicalizer: int MAX_ENTRIES_FOR_REUSE> = 6000;

        <org.codehaus.jackson.sym.BytesToNameCanonicalizer: int MAX_TABLE_SIZE> = 65536;

        <org.codehaus.jackson.sym.BytesToNameCanonicalizer: int DEFAULT_TABLE_SIZE> = 64;

        return;
    }
}
