public class com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame extends com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame
{
    com.hp.hpl.jena.util.iterator.ExtendedIterator matchIterator;

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: void <init>()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame: void init(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)>(r1);

        return;
    }

    public boolean nextMatch(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)
    {
        com.hp.hpl.jena.graph.Triple $r5;
        com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1, $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter r4;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame;

        r4 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

     label1:
        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame: com.hp.hpl.jena.util.iterator.ExtendedIterator matchIterator>;

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame: com.hp.hpl.jena.util.iterator.ExtendedIterator matchIterator>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.graph.Triple) $r3;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame: boolean bindResult(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)>($r5, r4);

        if $z1 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public void init(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.reasoner.TriplePattern $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter r1;
        com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI $r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: void init(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)>(r1);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine getEngine()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI getInfGraph()>();

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame: com.hp.hpl.jena.reasoner.TriplePattern goal>;

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI: com.hp.hpl.jena.util.iterator.ExtendedIterator findDataMatches(com.hp.hpl.jena.reasoner.TriplePattern)>($r4);

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame: com.hp.hpl.jena.util.iterator.ExtendedIterator matchIterator> = $r5;

        return;
    }

    public void close()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1, $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame: com.hp.hpl.jena.util.iterator.ExtendedIterator matchIterator>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.TripleMatchFrame: com.hp.hpl.jena.util.iterator.ExtendedIterator matchIterator>;

        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label1:
        return;
    }
}
