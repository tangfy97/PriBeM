class com.pff.PSTTable$NodeInfo extends java.lang.Object
{
    int startOffset;
    int endOffset;
    com.pff.PSTNodeInputStream in;
    final com.pff.PSTTable this$0;

    void <init>(com.pff.PSTTable, int, int, com.pff.PSTNodeInputStream) throws com.pff.PSTException
    {
        java.lang.Object[] $r4;
        com.pff.PSTTable$NodeInfo r0;
        com.pff.PSTException $r3;
        java.lang.Integer $r5, $r6;
        int i0, i1;
        com.pff.PSTNodeInputStream r2;
        java.lang.String $r7;
        com.pff.PSTTable r1;

        r0 := @this: com.pff.PSTTable$NodeInfo;

        r1 := @parameter0: com.pff.PSTTable;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: com.pff.PSTNodeInputStream;

        r0.<com.pff.PSTTable$NodeInfo: com.pff.PSTTable this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 <= i1 goto label1;

        $r3 = new com.pff.PSTException;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid NodeInfo parameters: start %1$d is greater than end %2$d", $r4);

        specialinvoke $r3.<com.pff.PSTException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        r0.<com.pff.PSTTable$NodeInfo: int startOffset> = i0;

        r0.<com.pff.PSTTable$NodeInfo: int endOffset> = i1;

        r0.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in> = r2;

        return;
    }

    int length()
    {
        int $i0, $i1, $i2;
        com.pff.PSTTable$NodeInfo r0;

        r0 := @this: com.pff.PSTTable$NodeInfo;

        $i1 = r0.<com.pff.PSTTable$NodeInfo: int endOffset>;

        $i0 = r0.<com.pff.PSTTable$NodeInfo: int startOffset>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    long seekAndReadLong(long, int) throws java.io.IOException, com.pff.PSTException
    {
        long l1, $l2, $l4, $l5;
        com.pff.PSTTable$NodeInfo r0;
        int $i0, i3;
        com.pff.PSTNodeInputStream $r1;

        r0 := @this: com.pff.PSTTable$NodeInfo;

        l1 := @parameter0: long;

        i3 := @parameter1: int;

        $r1 = r0.<com.pff.PSTTable$NodeInfo: com.pff.PSTNodeInputStream in>;

        $i0 = r0.<com.pff.PSTTable$NodeInfo: int startOffset>;

        $l2 = (long) $i0;

        $l4 = $l2 + l1;

        $l5 = virtualinvoke $r1.<com.pff.PSTNodeInputStream: long seekAndReadLong(long,int)>($l4, i3);

        return $l5;
    }
}
