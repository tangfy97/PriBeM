class org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter extends java.lang.Object
{
    private static final java.lang.String TRANSLATOR_NAME;
    private static final java.lang.String POLICY_NAME;
    private static final java.lang.String DOMAIN_NAME;
    private static final java.lang.String DEDICATED_SYSTEM;
    private static final java.lang.String LOADER_NAME;
    private static final java.lang.String GET_POLICY;
    private static final java.lang.String GET_DOMAIN;
    private static final java.lang.String GET_SYSTEM;
    private static final java.lang.String ADD_TRANSLATOR_NAME;
    private static final java.lang.String SET_TRANSLATOR_NAME;
    private final java.lang.ClassLoader classLoader;
    private final java.lang.Class translatorClass;
    private final java.lang.reflect.Method addTranslator;
    private final java.lang.Object target;

    void <init>(java.lang.ClassLoader)
    {
        java.lang.IllegalStateException $r39;
        java.lang.NoSuchMethodException $r40;
        java.lang.reflect.Method $r5, $r14, $r19, r45;
        boolean $z0;
        java.lang.Exception $r38;
        java.lang.StringBuilder $r23, $r25, $r26, $r31, $r32, $r33, $r34, $r35, $r36;
        java.lang.ClassLoader $r3, $r7, r41, r42, r43;
        java.lang.Object[] $r6, $r15, $r20;
        java.lang.String $r24, $r27, $r37;
        org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter r0;
        java.lang.Class[] $r4, $r11, $r13, $r18, $r28;
        java.lang.IllegalArgumentException $r30;
        java.lang.Class $r1, $r2, $r9, $r10, $r12, $r17, $r22, $r29;
        java.lang.Object $r8, $r16, $r21, r44;

        r0 := @this: org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter;

        r41 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label01:
        $r1 = virtualinvoke r41.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.jboss.classloader.spi.base.BaseClassLoader");

        r42 = null;

        r43 = r41;

        goto label04;

     label02:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r43);

        if $z0 == 0 goto label03;

        r42 = r43;

     label03:
        r43 = virtualinvoke r43.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label04:
        if r43 == null goto label05;

        if r42 == null goto label02;

     label05:
        if r42 != null goto label06;

        $r30 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and its parents are not suitable ClassLoaders: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A [");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.jboss.classloader.spi.base.BaseClassLoader");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] implementation is required.");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r37);

        throw $r30;

     label06:
        r0.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.ClassLoader classLoader> = r42;

        $r2 = virtualinvoke r42.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = newarray (java.lang.Class)[0];

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getPolicy", $r4);

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r5);

        $r7 = r0.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        $r6 = newarray (java.lang.Object)[0];

        $r8 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r7, $r6);

        r44 = null;

        r45 = null;

        $r9 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.jboss.util.loading.Translator");

        r0.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.Class translatorClass> = $r9;

        $r10 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.jboss.classloader.spi.base.BaseClassLoaderPolicy");

     label07:
        $r11 = newarray (java.lang.Class)[1];

        $r12 = r0.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.Class translatorClass>;

        $r11[0] = $r12;

        r45 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addTranslator", $r11);

        r44 = $r8;

     label08:
        goto label10;

     label09:
        $r40 := @caughtexception;

     label10:
        if r45 != null goto label11;

        $r13 = newarray (java.lang.Class)[0];

        $r14 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getClassLoaderDomain", $r13);

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r14);

        $r15 = newarray (java.lang.Object)[0];

        $r16 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r8, $r15);

        $r17 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.jboss.classloader.spi.base.BaseClassLoaderDomain");

        $r18 = newarray (java.lang.Class)[0];

        $r19 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getClassLoaderSystem", $r18);

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r19);

        $r20 = newarray (java.lang.Object)[0];

        $r21 = virtualinvoke $r19.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r16, $r20);

        $r22 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.jboss.classloader.spi.ClassLoaderSystem");

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("JBoss LoadTimeWeaver requires JBoss loader system of type ");

        $r24 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on JBoss 5.0.x");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.springframework.util.Assert: void isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)>($r22, $r21, $r27);

        $r28 = newarray (java.lang.Class)[1];

        $r29 = r0.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.Class translatorClass>;

        $r28[0] = $r29;

        r45 = virtualinvoke $r22.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("setTranslator", $r28);

        r44 = $r21;

     label11:
        r0.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.reflect.Method addTranslator> = r45;

        r0.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.Object target> = r44;

     label12:
        goto label14;

     label13:
        $r38 := @caughtexception;

        $r39 = new java.lang.IllegalStateException;

        specialinvoke $r39.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not initialize JBoss LoadTimeWeaver because the JBoss 5 API classes are not available", $r38);

        throw $r39;

     label14:
        return;

        catch java.lang.NoSuchMethodException from label07 to label08 with label09;
        catch java.lang.Exception from label01 to label12 with label13;
    }

    public void addTransformer(java.lang.instrument.ClassFileTransformer)
    {
        java.lang.IllegalStateException $r12;
        java.lang.Object[] $r8;
        java.lang.instrument.ClassFileTransformer r1;
        java.lang.String $r16;
        org.springframework.instrument.classloading.jboss.JBossTranslatorAdapter $r0;
        java.lang.reflect.Method $r10;
        org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter r2;
        java.lang.Class[] $r5;
        java.lang.Exception $r11;
        java.lang.Class $r3, $r6;
        java.lang.Object $r7, $r9;
        java.lang.StringBuilder $r13, $r15;
        java.lang.ClassLoader $r4, $r14;

        r2 := @this: org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter;

        r1 := @parameter0: java.lang.instrument.ClassFileTransformer;

        $r0 = new org.springframework.instrument.classloading.jboss.JBossTranslatorAdapter;

        specialinvoke $r0.<org.springframework.instrument.classloading.jboss.JBossTranslatorAdapter: void <init>(java.lang.instrument.ClassFileTransformer)>(r1);

        $r3 = r2.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.Class translatorClass>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = newarray (java.lang.Class)[1];

        $r6 = r2.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.Class translatorClass>;

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r4, $r5, $r0);

     label1:
        $r10 = r2.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.reflect.Method addTranslator>;

        $r9 = r2.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.Object target>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r7;

        virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r9, $r8);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not add transformer on JBoss classloader ");

        $r14 = r2.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r11);

        throw $r12;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter r0;
        java.lang.ClassLoader $r1;

        r0 := @this: org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter;

        $r1 = r0.<org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.String SET_TRANSLATOR_NAME> = "setTranslator";

        <org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.String ADD_TRANSLATOR_NAME> = "addTranslator";

        <org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.String GET_SYSTEM> = "getClassLoaderSystem";

        <org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.String GET_DOMAIN> = "getClassLoaderDomain";

        <org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.String GET_POLICY> = "getPolicy";

        <org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.String LOADER_NAME> = "org.jboss.classloader.spi.base.BaseClassLoader";

        <org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.String DEDICATED_SYSTEM> = "org.jboss.classloader.spi.ClassLoaderSystem";

        <org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.String DOMAIN_NAME> = "org.jboss.classloader.spi.base.BaseClassLoaderDomain";

        <org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.String POLICY_NAME> = "org.jboss.classloader.spi.base.BaseClassLoaderPolicy";

        <org.springframework.instrument.classloading.jboss.JBossClassLoaderAdapter: java.lang.String TRANSLATOR_NAME> = "org.jboss.util.loading.Translator";

        return;
    }
}
