public abstract class org.springframework.remoting.rmi.RmiClientInterceptorUtils extends java.lang.Object
{
    private static final java.lang.String ORACLE_CONNECTION_EXCEPTION;
    private static final org.apache.commons.logging.Log logger;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.String ORACLE_CONNECTION_EXCEPTION> = "com.evermind.server.rmi.RMIConnectionException";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/remoting/rmi/RmiClientInterceptorUtils;");

        <org.springframework.remoting.rmi.RmiClientInterceptorUtils: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.remoting.rmi.RmiClientInterceptorUtils r0;

        r0 := @this: org.springframework.remoting.rmi.RmiClientInterceptorUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation, java.rmi.Remote, java.lang.String) throws java.lang.Throwable
    {
        java.lang.Throwable $r4;
        java.rmi.Remote r1;
        java.lang.Exception $r8;
        java.lang.reflect.InvocationTargetException $r3;
        java.rmi.RemoteException r5;
        org.aopalliance.intercept.MethodInvocation r0;
        java.lang.Object $r2;
        java.lang.String r7;
        java.lang.reflect.Method $r6;
        boolean $z0;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r1 := @parameter1: java.rmi.Remote;

        r7 := @parameter2: java.lang.String;

     label1:
        $r2 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Object invokeRemoteMethod(org.aopalliance.intercept.MethodInvocation,java.lang.Object)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r4 instanceof java.rmi.RemoteException;

        if $z0 == 0 goto label4;

        r5 = (java.rmi.RemoteException) $r4;

        $r6 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r8 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Exception convertRmiAccessException(java.lang.reflect.Method,java.rmi.RemoteException,java.lang.String)>($r6, r5, r7);

        throw $r8;

     label4:
        throw $r4;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    public static java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation, java.rmi.Remote) throws java.lang.reflect.InvocationTargetException
    {
        java.lang.Object $r2;
        org.aopalliance.intercept.MethodInvocation r0;
        java.rmi.Remote r1;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r1 := @parameter1: java.rmi.Remote;

        $r2 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Object invokeRemoteMethod(org.aopalliance.intercept.MethodInvocation,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object invokeRemoteMethod(org.aopalliance.intercept.MethodInvocation, java.lang.Object) throws java.lang.reflect.InvocationTargetException
    {
        java.lang.Throwable $r12;
        java.lang.Object[] $r8, $r10;
        java.lang.NoSuchMethodException $r17;
        org.aopalliance.intercept.MethodInvocation r0;
        org.springframework.remoting.RemoteProxyFailureException $r13, $r18;
        java.lang.String $r5, $r16, $r21;
        java.lang.reflect.Method $r1, $r7;
        boolean $z0;
        java.lang.Class[] $r6;
        java.lang.reflect.InvocationTargetException $r22;
        java.lang.Class $r2, $r4;
        java.lang.Object r3, $r9, $r11;
        java.lang.StringBuilder $r14, $r15, $r19, $r20;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r3 := @parameter1: java.lang.Object;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

     label1:
        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        $r11 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r10);

     label2:
        return $r11;

     label3:
        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r6 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r7 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r5, $r6);

        $r8 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        $r9 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r8);

     label4:
        return $r9;

     label5:
        $r22 := @caughtexception;

        throw $r22;

     label6:
        $r17 := @caughtexception;

        $r18 = new org.springframework.remoting.RemoteProxyFailureException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("No matching RMI stub method found for: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.springframework.remoting.RemoteProxyFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r17);

        throw $r18;

     label7:
        $r12 := @caughtexception;

        $r13 = new org.springframework.remoting.RemoteProxyFailureException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invocation of RMI stub method failed: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.springframework.remoting.RemoteProxyFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r12);

        throw $r13;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
        catch java.lang.NoSuchMethodException from label1 to label2 with label6;
        catch java.lang.NoSuchMethodException from label3 to label4 with label6;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    public static java.lang.Exception convertRmiAccessException(java.lang.reflect.Method, java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r4;
        org.springframework.remoting.RemoteAccessException $r2;
        java.rmi.RemoteException $r5;
        org.apache.commons.logging.Log $r0, $r6;
        java.lang.String r3;
        java.lang.reflect.Method r1;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.reflect.Method;

        r4 := @parameter1: java.lang.Throwable;

        r3 := @parameter2: java.lang.String;

        $r0 = <org.springframework.remoting.rmi.RmiClientInterceptorUtils: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <org.springframework.remoting.rmi.RmiClientInterceptorUtils: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>(r3, r4);

     label1:
        $z1 = staticinvoke <org.springframework.util.ReflectionUtils: boolean declaresException(java.lang.reflect.Method,java.lang.Class)>(r1, class "Ljava/rmi/RemoteException;");

        if $z1 == 0 goto label2;

        $r5 = new java.rmi.RemoteException;

        specialinvoke $r5.<java.rmi.RemoteException: void <init>(java.lang.String,java.lang.Throwable)>(r3, r4);

        return $r5;

     label2:
        $r2 = new org.springframework.remoting.RemoteAccessException;

        specialinvoke $r2.<org.springframework.remoting.RemoteAccessException: void <init>(java.lang.String,java.lang.Throwable)>(r3, r4);

        return $r2;
    }

    public static java.lang.Exception convertRmiAccessException(java.lang.reflect.Method, java.rmi.RemoteException, java.lang.String)
    {
        java.lang.String r2;
        java.lang.reflect.Method r0;
        java.lang.Exception $r3;
        java.rmi.RemoteException r1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.rmi.RemoteException;

        r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: boolean isConnectFailure(java.rmi.RemoteException)>(r1);

        $r3 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Exception convertRmiAccessException(java.lang.reflect.Method,java.rmi.RemoteException,boolean,java.lang.String)>(r0, r1, $z0, r2);

        return $r3;
    }

    public static java.lang.Exception convertRmiAccessException(java.lang.reflect.Method, java.rmi.RemoteException, boolean, java.lang.String)
    {
        org.springframework.remoting.RemoteAccessException $r4;
        java.lang.String r6, $r9, $r14, $r19;
        org.springframework.remoting.RemoteConnectFailureException $r10;
        java.lang.reflect.Method r1;
        boolean $z0, $z1, z2;
        java.rmi.RemoteException r2;
        org.apache.commons.logging.Log $r0, $r16;
        java.lang.Class $r3;
        java.lang.StringBuilder $r5, $r7, $r8, $r11, $r12, $r13, $r15, $r17, $r18;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.rmi.RemoteException;

        z2 := @parameter2: boolean;

        r6 := @parameter3: java.lang.String;

        $r0 = <org.springframework.remoting.rmi.RmiClientInterceptorUtils: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r16 = <org.springframework.remoting.rmi.RmiClientInterceptorUtils: org.apache.commons.logging.Log logger>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Remote service [");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] threw exception");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r19, r2);

     label1:
        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <org.springframework.util.ReflectionUtils: boolean declaresException(java.lang.reflect.Method,java.lang.Class)>(r1, $r3);

        if $z1 == 0 goto label2;

        return r2;

     label2:
        if z2 == 0 goto label3;

        $r10 = new org.springframework.remoting.RemoteConnectFailureException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not connect to remote service [");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.springframework.remoting.RemoteConnectFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r14, r2);

        return $r10;

     label3:
        $r4 = new org.springframework.remoting.RemoteAccessException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not access remote service [");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.remoting.RemoteAccessException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r2);

        return $r4;
    }

    public static boolean isConnectFailure(java.rmi.RemoteException)
    {
        java.lang.Throwable $r1;
        java.rmi.RemoteException r0;
        java.lang.Class $r3;
        java.lang.String $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: java.rmi.RemoteException;

        $z0 = r0 instanceof java.rmi.ConnectException;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.rmi.ConnectIOException;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof java.rmi.UnknownHostException;

        if $z2 != 0 goto label1;

        $z3 = r0 instanceof java.rmi.NoSuchObjectException;

        if $z3 != 0 goto label1;

        $z4 = r0 instanceof java.rmi.StubNotFoundException;

        if $z4 != 0 goto label1;

        $r1 = virtualinvoke r0.<java.rmi.RemoteException: java.lang.Throwable getCause()>();

        $z5 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: boolean isCorbaConnectFailure(java.lang.Throwable)>($r1);

        if $z5 != 0 goto label1;

        $r2 = "com.evermind.server.rmi.RMIConnectionException";

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $z6 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z6 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    private static boolean isCorbaConnectFailure(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.omg.CORBA.CompletionStatus $r2, $r3;
        org.omg.CORBA.SystemException $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof org.omg.CORBA.COMM_FAILURE;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof org.omg.CORBA.NO_RESPONSE;

        if $z1 == 0 goto label2;

     label1:
        $r1 = (org.omg.CORBA.SystemException) r0;

        $r3 = $r1.<org.omg.CORBA.SystemException: org.omg.CORBA.CompletionStatus completed>;

        $r2 = <org.omg.CORBA.CompletionStatus: org.omg.CORBA.CompletionStatus COMPLETED_NO>;

        if $r3 != $r2 goto label2;

        return 1;

     label2:
        return 0;
    }
}
