public class org.codehaus.jackson.map.util.ISO8601Utils extends java.lang.Object
{
    private static final java.lang.String GMT_ID;
    private static final java.util.TimeZone TIMEZONE_GMT;

    public void <init>()
    {
        org.codehaus.jackson.map.util.ISO8601Utils r0;

        r0 := @this: org.codehaus.jackson.map.util.ISO8601Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String format(java.util.Date)
    {
        java.lang.String $r2;
        java.util.Date r0;
        java.util.TimeZone $r1;

        r0 := @parameter0: java.util.Date;

        $r1 = <org.codehaus.jackson.map.util.ISO8601Utils: java.util.TimeZone TIMEZONE_GMT>;

        $r2 = staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone)>(r0, 0, $r1);

        return $r2;
    }

    public static java.lang.String format(java.util.Date, boolean)
    {
        java.util.Date r0;
        java.util.TimeZone $r1;
        java.lang.String $r2;
        boolean z0;

        r0 := @parameter0: java.util.Date;

        z0 := @parameter1: boolean;

        $r1 = <org.codehaus.jackson.map.util.ISO8601Utils: java.util.TimeZone TIMEZONE_GMT>;

        $r2 = staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone)>(r0, z0, $r1);

        return $r2;
    }

    public static java.lang.String format(java.util.Date, boolean, java.util.TimeZone)
    {
        java.util.Date r3;
        java.util.Locale $r2;
        boolean z0;
        java.util.GregorianCalendar $r19;
        java.util.TimeZone r1;
        java.lang.StringBuilder $r20;
        long $l15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i33, $i35;
        java.lang.String $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        char $c31;

        r3 := @parameter0: java.util.Date;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.TimeZone;

        $r19 = new java.util.GregorianCalendar;

        $r2 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r19.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(r1, $r2);

        virtualinvoke $r19.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        $r4 = "yyyy-MM-ddThh:mm:ss";

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if z0 == 0 goto label1;

        $r18 = ".sss";

        $i29 = virtualinvoke $r18.<java.lang.String: int length()>();

        goto label2;

     label1:
        $i29 = 0;

     label2:
        $i28 = $i0 + $i29;

        $i1 = virtualinvoke r1.<java.util.TimeZone: int getRawOffset()>();

        if $i1 != 0 goto label3;

        $r17 = "Z";

        $i30 = virtualinvoke $r17.<java.lang.String: int length()>();

        goto label4;

     label3:
        $r5 = "+hh:mm";

        $i30 = virtualinvoke $r5.<java.lang.String: int length()>();

     label4:
        $i27 = $i28 + $i30;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(int)>($i27);

        $i2 = virtualinvoke $r19.<java.util.Calendar: int get(int)>(1);

        $r7 = "yyyy";

        $i3 = virtualinvoke $r7.<java.lang.String: int length()>();

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r20, $i2, $i3);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i4 = virtualinvoke $r19.<java.util.Calendar: int get(int)>(2);

        $i5 = $i4 + 1;

        $r8 = "MM";

        $i6 = virtualinvoke $r8.<java.lang.String: int length()>();

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r20, $i5, $i6);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i7 = virtualinvoke $r19.<java.util.Calendar: int get(int)>(5);

        $r9 = "dd";

        $i8 = virtualinvoke $r9.<java.lang.String: int length()>();

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r20, $i7, $i8);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(84);

        $i9 = virtualinvoke $r19.<java.util.Calendar: int get(int)>(11);

        $r10 = "hh";

        $i10 = virtualinvoke $r10.<java.lang.String: int length()>();

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r20, $i9, $i10);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i11 = virtualinvoke $r19.<java.util.Calendar: int get(int)>(12);

        $r11 = "mm";

        $i12 = virtualinvoke $r11.<java.lang.String: int length()>();

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r20, $i11, $i12);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i13 = virtualinvoke $r19.<java.util.Calendar: int get(int)>(13);

        $r12 = "ss";

        $i14 = virtualinvoke $r12.<java.lang.String: int length()>();

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r20, $i13, $i14);

        if z0 == 0 goto label5;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i25 = virtualinvoke $r19.<java.util.Calendar: int get(int)>(14);

        $r16 = "sss";

        $i26 = virtualinvoke $r16.<java.lang.String: int length()>();

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r20, $i25, $i26);

     label5:
        $l15 = virtualinvoke $r19.<java.util.Calendar: long getTimeInMillis()>();

        $i16 = virtualinvoke r1.<java.util.TimeZone: int getOffset(long)>($l15);

        if $i16 == 0 goto label8;

        $i33 = (int) 60000;

        $i17 = $i16 / $i33;

        $i18 = $i17 / 60;

        $i19 = staticinvoke <java.lang.Math: int abs(int)>($i18);

        $i35 = (int) 60000;

        $i20 = $i16 / $i35;

        $i21 = $i20 % 60;

        $i22 = staticinvoke <java.lang.Math: int abs(int)>($i21);

        if $i16 >= 0 goto label6;

        $c31 = 45;

        goto label7;

     label6:
        $c31 = 43;

     label7:
        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c31);

        $r14 = "hh";

        $i23 = virtualinvoke $r14.<java.lang.String: int length()>();

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r20, $i19, $i23);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r15 = "mm";

        $i24 = virtualinvoke $r15.<java.lang.String: int length()>();

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)>($r20, $i22, $i24);

        goto label9;

     label8:
        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);

     label9:
        $r13 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public static java.util.Date parse(java.lang.String)
    {
        java.lang.IndexOutOfBoundsException $r27, $r36, $r37;
        java.util.Date $r8;
        byte b9, b11, b12;
        boolean $z0;
        java.util.GregorianCalendar $r38;
        java.util.TimeZone $r5;
        java.lang.StringBuilder $r2, $r4, $r12, $r13, $r18, $r19, $r24, $r25, $r30, $r31, $r34, $r35, $r39, $r41, $r43;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, i10, $i13, $i14, $i15, $i16;
        java.lang.String r0, $r3, $r6, $r14, $r20, $r26, $r32, r33;
        char $c6, $c7;
        java.lang.NumberFormatException $r21;
        java.lang.IllegalArgumentException $r15, $r40, $r42, $r44;

        r0 := @parameter0: java.lang.String;

     label01:
        $i0 = staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(r0, 0, 4);

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void checkOffset(java.lang.String,int,char)>(r0, 4, 45);

        $i1 = staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(r0, 5, 7);

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void checkOffset(java.lang.String,int,char)>(r0, 7, 45);

        $i2 = staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(r0, 8, 10);

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void checkOffset(java.lang.String,int,char)>(r0, 10, 84);

        $i3 = staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(r0, 11, 13);

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void checkOffset(java.lang.String,int,char)>(r0, 13, 58);

        $i4 = staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(r0, 14, 16);

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void checkOffset(java.lang.String,int,char)>(r0, 16, 58);

        b9 = 19;

        b12 = 19;

        b11 = 19;

        $i5 = staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(r0, 17, 19);

        i10 = 0;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(19);

        $i13 = (int) $c6;

        if $i13 != 46 goto label02;

        staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: void checkOffset(java.lang.String,int,char)>(r0, 19, 46);

        b9 = 23;

        b12 = 23;

        b11 = 23;

        i10 = staticinvoke <org.codehaus.jackson.map.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(r0, 20, 23);

     label02:
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(b12);

        $i14 = (int) $c7;

        if $i14 == 43 goto label03;

        $i15 = (int) $c7;

        if $i15 != 45 goto label04;

     label03:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GMT");

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(b11);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        r33 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label06;

     label04:
        $i16 = (int) $c7;

        if $i16 != 90 goto label05;

        r33 = "GMT";

        goto label06;

     label05:
        $r36 = new java.lang.IndexOutOfBoundsException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid time zone indicator ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r14);

        throw $r36;

     label06:
        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r33);

        $r6 = virtualinvoke $r5.<java.util.TimeZone: java.lang.String getID()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r33);

        if $z0 != 0 goto label07;

        $r37 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r37.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r37;

     label07:
        $r38 = new java.util.GregorianCalendar;

        specialinvoke $r38.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r5);

        virtualinvoke $r38.<java.util.Calendar: void setLenient(boolean)>(0);

        virtualinvoke $r38.<java.util.Calendar: void set(int,int)>(1, $i0);

        $i8 = $i1 - 1;

        virtualinvoke $r38.<java.util.Calendar: void set(int,int)>(2, $i8);

        virtualinvoke $r38.<java.util.Calendar: void set(int,int)>(5, $i2);

        virtualinvoke $r38.<java.util.Calendar: void set(int,int)>(11, $i3);

        virtualinvoke $r38.<java.util.Calendar: void set(int,int)>(12, $i4);

        virtualinvoke $r38.<java.util.Calendar: void set(int,int)>(13, $i5);

        virtualinvoke $r38.<java.util.Calendar: void set(int,int)>(14, i10);

        $r8 = virtualinvoke $r38.<java.util.Calendar: java.util.Date getTime()>();

     label08:
        return $r8;

     label09:
        $r27 := @caughtexception;

        $r40 = new java.lang.IllegalArgumentException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse date ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r32, $r27);

        throw $r40;

     label10:
        $r21 := @caughtexception;

        $r42 = new java.lang.IllegalArgumentException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse date ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r26, $r21);

        throw $r42;

     label11:
        $r15 := @caughtexception;

        $r44 = new java.lang.IllegalArgumentException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse date ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r15);

        throw $r44;

        catch java.lang.IndexOutOfBoundsException from label01 to label08 with label09;
        catch java.lang.NumberFormatException from label01 to label08 with label10;
        catch java.lang.IllegalArgumentException from label01 to label08 with label11;
    }

    private static void checkOffset(java.lang.String, int, char) throws java.lang.IndexOutOfBoundsException
    {
        java.lang.IndexOutOfBoundsException $r10;
        char $c1, c2;
        int i0, $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r9;
        java.lang.String r0, $r8;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c2 := @parameter2: char;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i3 = (int) $c1;

        $i4 = (int) c2;

        if $i3 == $i4 goto label1;

        $r10 = new java.lang.IndexOutOfBoundsException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' character but found \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r10;

     label1:
        return;
    }

    private static int parseInt(java.lang.String, int, int) throws java.lang.NumberFormatException
    {
        int i0, i1, $i2, $i3, $i4, $i6, $i8, i9, i10, i11;
        java.lang.String r0, $r5, $r10;
        char $c5, $c7;
        java.lang.NumberFormatException $r1, $r6, $r11;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 > $i2 goto label1;

        if i0 <= i1 goto label2;

     label1:
        $r11 = new java.lang.NumberFormatException;

        specialinvoke $r11.<java.lang.NumberFormatException: void <init>(java.lang.String)>(r0);

        throw $r11;

     label2:
        i9 = i0;

        i10 = 0;

        if i0 >= i1 goto label4;

        i9 = i0 + 1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i8 = staticinvoke <java.lang.Character: int digit(char,int)>($c7, 10);

        if $i8 >= 0 goto label3;

        $r6 = new java.lang.NumberFormatException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        i10 = neg $i8;

     label4:
        if i9 >= i1 goto label6;

        $i4 = i9;

        i9 = i9 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $i6 = staticinvoke <java.lang.Character: int digit(char,int)>($c5, 10);

        if $i6 >= 0 goto label5;

        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label5:
        i11 = i10 * 10;

        i10 = i11 - $i6;

        goto label4;

     label6:
        $i3 = neg i10;

        return $i3;
    }

    private static void padInt(java.lang.StringBuilder, int, int)
    {
        int i0, i1, $i2, i3, $i5;
        java.lang.StringBuilder r1;
        java.lang.String $r0;

        r1 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        i3 = i1 - $i2;

     label1:
        if i3 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        return;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r0;

        <org.codehaus.jackson.map.util.ISO8601Utils: java.lang.String GMT_ID> = "GMT";

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        <org.codehaus.jackson.map.util.ISO8601Utils: java.util.TimeZone TIMEZONE_GMT> = $r0;

        return;
    }
}
