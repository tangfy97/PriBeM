public class org.apache.batik.css.engine.value.svg.StrokeWidthManager extends org.apache.batik.css.engine.value.LengthManager
{

    public void <init>()
    {
        org.apache.batik.css.engine.value.svg.StrokeWidthManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeWidthManager;

        specialinvoke r0.<org.apache.batik.css.engine.value.LengthManager: void <init>()>();

        return;
    }

    public boolean isInheritedProperty()
    {
        org.apache.batik.css.engine.value.svg.StrokeWidthManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeWidthManager;

        return 1;
    }

    public boolean isAnimatableProperty()
    {
        org.apache.batik.css.engine.value.svg.StrokeWidthManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeWidthManager;

        return 1;
    }

    public boolean isAdditiveProperty()
    {
        org.apache.batik.css.engine.value.svg.StrokeWidthManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeWidthManager;

        return 1;
    }

    public int getPropertyType()
    {
        org.apache.batik.css.engine.value.svg.StrokeWidthManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeWidthManager;

        return 17;
    }

    public java.lang.String getPropertyName()
    {
        org.apache.batik.css.engine.value.svg.StrokeWidthManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeWidthManager;

        return "stroke-width";
    }

    public org.apache.batik.css.engine.value.Value getDefaultValue()
    {
        org.apache.batik.css.engine.value.svg.StrokeWidthManager r1;
        org.apache.batik.css.engine.value.Value $r0;

        r1 := @this: org.apache.batik.css.engine.value.svg.StrokeWidthManager;

        $r0 = <org.apache.batik.css.engine.value.svg.SVGValueConstants: org.apache.batik.css.engine.value.Value NUMBER_1>;

        return $r0;
    }

    public org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        short $s0;
        org.w3c.css.sac.LexicalUnit r0;
        int $i1;
        org.apache.batik.css.engine.value.svg.StrokeWidthManager r1;
        org.apache.batik.css.engine.value.Value $r3, $r4;
        org.apache.batik.css.engine.CSSEngine r2;

        r1 := @this: org.apache.batik.css.engine.value.svg.StrokeWidthManager;

        r0 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r2 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        $s0 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i1 = (int) $s0;

        if $i1 != 12 goto label1;

        $r4 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        return $r4;

     label1:
        $r3 = specialinvoke r1.<org.apache.batik.css.engine.value.LengthManager: org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit,org.apache.batik.css.engine.CSSEngine)>(r0, r2);

        return $r3;
    }

    protected int getOrientation()
    {
        org.apache.batik.css.engine.value.svg.StrokeWidthManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.StrokeWidthManager;

        return 2;
    }
}
