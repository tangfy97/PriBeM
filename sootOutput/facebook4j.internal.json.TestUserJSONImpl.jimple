final class facebook4j.internal.json.TestUserJSONImpl extends java.lang.Object implements facebook4j.TestUser, java.io.Serializable
{
    private static final long serialVersionUID;
    private java.lang.String id;
    private java.lang.String accessToken;
    private java.lang.String loginUrl;
    private java.lang.String email;
    private java.lang.String password;

    void <init>(facebook4j.internal.http.HttpResponse) throws facebook4j.FacebookException
    {
        facebook4j.internal.json.TestUserJSONImpl r0;
        facebook4j.internal.org.json.JSONObject $r2;
        facebook4j.internal.http.HttpResponse r1;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        r1 := @parameter0: facebook4j.internal.http.HttpResponse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<facebook4j.internal.http.HttpResponse: facebook4j.internal.org.json.JSONObject asJSONObject()>();

        specialinvoke r0.<facebook4j.internal.json.TestUserJSONImpl: void init(facebook4j.internal.org.json.JSONObject)>($r2);

        return;
    }

    void <init>(facebook4j.internal.org.json.JSONObject) throws facebook4j.FacebookException
    {
        facebook4j.internal.json.TestUserJSONImpl r0;
        facebook4j.internal.org.json.JSONObject r1;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        r1 := @parameter0: facebook4j.internal.org.json.JSONObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<facebook4j.internal.json.TestUserJSONImpl: void init(facebook4j.internal.org.json.JSONObject)>(r1);

        return;
    }

    private void init(facebook4j.internal.org.json.JSONObject) throws facebook4j.FacebookException
    {
        facebook4j.internal.json.TestUserJSONImpl r0;
        facebook4j.internal.org.json.JSONObject r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        r1 := @parameter0: facebook4j.internal.org.json.JSONObject;

        $r2 = staticinvoke <facebook4j.internal.util.z_F4JInternalParseUtil: java.lang.String getRawString(java.lang.String,facebook4j.internal.org.json.JSONObject)>("id", r1);

        r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String id> = $r2;

        $r3 = staticinvoke <facebook4j.internal.util.z_F4JInternalParseUtil: java.lang.String getRawString(java.lang.String,facebook4j.internal.org.json.JSONObject)>("access_token", r1);

        r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String accessToken> = $r3;

        $r4 = staticinvoke <facebook4j.internal.util.z_F4JInternalParseUtil: java.lang.String getRawString(java.lang.String,facebook4j.internal.org.json.JSONObject)>("login_url", r1);

        r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String loginUrl> = $r4;

        $z0 = virtualinvoke r1.<facebook4j.internal.org.json.JSONObject: boolean isNull(java.lang.String)>("email");

        if $z0 != 0 goto label1;

        $r6 = staticinvoke <facebook4j.internal.util.z_F4JInternalParseUtil: java.lang.String getRawString(java.lang.String,facebook4j.internal.org.json.JSONObject)>("email", r1);

        r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String email> = $r6;

     label1:
        $z1 = virtualinvoke r1.<facebook4j.internal.org.json.JSONObject: boolean isNull(java.lang.String)>("password");

        if $z1 != 0 goto label2;

        $r5 = staticinvoke <facebook4j.internal.util.z_F4JInternalParseUtil: java.lang.String getRawString(java.lang.String,facebook4j.internal.org.json.JSONObject)>("password", r1);

        r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String password> = $r5;

     label2:
        return;
    }

    public int compareTo(facebook4j.TestUser)
    {
        facebook4j.internal.json.TestUserJSONImpl r0;
        facebook4j.TestUser r1;
        int $i0;
        java.lang.String $r2, $r3;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        r1 := @parameter0: facebook4j.TestUser;

        $r2 = r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String id>;

        $r3 = interfaceinvoke r1.<facebook4j.TestUser: java.lang.String getId()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>($r3);

        return $i0;
    }

    public java.lang.String getId()
    {
        java.lang.String $r1;
        facebook4j.internal.json.TestUserJSONImpl r0;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        $r1 = r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String id>;

        return $r1;
    }

    public java.lang.String getAccessToken()
    {
        java.lang.String $r1;
        facebook4j.internal.json.TestUserJSONImpl r0;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        $r1 = r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String accessToken>;

        return $r1;
    }

    public java.lang.String getLoginUrl()
    {
        java.lang.String $r1;
        facebook4j.internal.json.TestUserJSONImpl r0;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        $r1 = r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String loginUrl>;

        return $r1;
    }

    public java.lang.String getEmail()
    {
        java.lang.String $r1;
        facebook4j.internal.json.TestUserJSONImpl r0;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        $r1 = r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String email>;

        return $r1;
    }

    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        facebook4j.internal.json.TestUserJSONImpl r0;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        $r1 = r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String password>;

        return $r1;
    }

    public int hashCode()
    {
        facebook4j.internal.json.TestUserJSONImpl r0;
        int $i0, $i1;
        java.lang.String $r1, $r2;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        $r1 = r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String id>;

        if $r1 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String id>;

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

     label2:
        $i0 = 31 + $i1;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        facebook4j.internal.json.TestUserJSONImpl r0, r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r5, $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (facebook4j.internal.json.TestUserJSONImpl) r1;

        $r5 = r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String id>;

        if $r5 != null goto label4;

        $r8 = r4.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String id>;

        if $r8 == null goto label5;

        return 0;

     label4:
        $r7 = r0.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String id>;

        $r6 = r4.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String id>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public java.lang.String toString()
    {
        facebook4j.internal.json.TestUserJSONImpl r2;
        java.lang.String $r3, $r6, $r9, $r12, $r15, $r18;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17;

        r2 := @this: facebook4j.internal.json.TestUserJSONImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TestUserJSONImpl [id=");

        $r3 = r2.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String id>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", accessToken=");

        $r6 = r2.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String accessToken>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", loginUrl=");

        $r9 = r2.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String loginUrl>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", email=");

        $r12 = r2.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String email>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", password=");

        $r15 = r2.<facebook4j.internal.json.TestUserJSONImpl: java.lang.String password>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;
    }

    public volatile int compareTo(java.lang.Object)
    {
        facebook4j.internal.json.TestUserJSONImpl r0;
        facebook4j.TestUser $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: facebook4j.internal.json.TestUserJSONImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (facebook4j.TestUser) r1;

        $i0 = virtualinvoke r0.<facebook4j.internal.json.TestUserJSONImpl: int compareTo(facebook4j.TestUser)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <facebook4j.internal.json.TestUserJSONImpl: long serialVersionUID> = -5704997286478031118L;

        return;
    }
}
