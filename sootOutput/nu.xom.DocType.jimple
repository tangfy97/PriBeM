public class nu.xom.DocType extends nu.xom.Node
{
    private java.lang.String rootName;
    private java.lang.String systemID;
    private java.lang.String publicID;
    private java.lang.String internalDTDSubset;

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        r0.<nu.xom.DocType: java.lang.String internalDTDSubset> = "";

        specialinvoke r0.<nu.xom.DocType: void _setRootElementName(java.lang.String)>(r1);

        specialinvoke r0.<nu.xom.DocType: void _setSystemID(java.lang.String)>(r2);

        specialinvoke r0.<nu.xom.DocType: void _setPublicID(java.lang.String)>(r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<nu.xom.DocType: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, null, r2);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.DocType: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, null, null);

        return;
    }

    public void <init>(nu.xom.DocType)
    {
        java.lang.String $r2, $r3, $r4, $r5;
        nu.xom.DocType r0, r1;

        r0 := @this: nu.xom.DocType;

        r1 := @parameter0: nu.xom.DocType;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        r0.<nu.xom.DocType: java.lang.String internalDTDSubset> = "";

        $r2 = r1.<nu.xom.DocType: java.lang.String internalDTDSubset>;

        r0.<nu.xom.DocType: java.lang.String internalDTDSubset> = $r2;

        $r3 = r1.<nu.xom.DocType: java.lang.String publicID>;

        r0.<nu.xom.DocType: java.lang.String publicID> = $r3;

        $r4 = r1.<nu.xom.DocType: java.lang.String systemID>;

        r0.<nu.xom.DocType: java.lang.String systemID> = $r4;

        $r5 = r1.<nu.xom.DocType: java.lang.String rootName>;

        r0.<nu.xom.DocType: java.lang.String rootName> = $r5;

        return;
    }

    private void <init>()
    {
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        specialinvoke r0.<nu.xom.Node: void <init>()>();

        r0.<nu.xom.DocType: java.lang.String internalDTDSubset> = "";

        return;
    }

    static nu.xom.DocType build(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, r3;
        nu.xom.DocType $r0;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r0 = new nu.xom.DocType;

        specialinvoke $r0.<nu.xom.DocType: void <init>()>();

        $r0.<nu.xom.DocType: java.lang.String publicID> = r1;

        $r0.<nu.xom.DocType: java.lang.String systemID> = r2;

        $r0.<nu.xom.DocType: java.lang.String rootName> = r3;

        return $r0;
    }

    public final java.lang.String getRootElementName()
    {
        java.lang.String $r1;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        $r1 = r0.<nu.xom.DocType: java.lang.String rootName>;

        return $r1;
    }

    public void setRootElementName(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.DocType: void _setRootElementName(java.lang.String)>(r1);

        return;
    }

    private void _setRootElementName(java.lang.String)
    {
        java.lang.String r0;
        nu.xom.DocType r1;

        r1 := @this: nu.xom.DocType;

        r0 := @parameter0: java.lang.String;

        staticinvoke <nu.xom.Verifier: void checkXMLName(java.lang.String)>(r0);

        r1.<nu.xom.DocType: java.lang.String rootName> = r0;

        return;
    }

    public final java.lang.String getInternalDTDSubset()
    {
        java.lang.String $r1;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        $r1 = r0.<nu.xom.DocType: java.lang.String internalDTDSubset>;

        return $r1;
    }

    public final void setInternalDTDSubset(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        nu.xom.DocType r1;

        r1 := @this: nu.xom.DocType;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        staticinvoke <nu.xom.Verifier: void checkInternalDTDSubset(java.lang.String)>(r0);

        virtualinvoke r1.<nu.xom.DocType: void fastSetInternalDTDSubset(java.lang.String)>(r0);

        goto label2;

     label1:
        r1.<nu.xom.DocType: java.lang.String internalDTDSubset> = "";

     label2:
        return;
    }

    final void fastSetInternalDTDSubset(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        r1 := @parameter0: java.lang.String;

        r0.<nu.xom.DocType: java.lang.String internalDTDSubset> = r1;

        return;
    }

    public final java.lang.String getPublicID()
    {
        java.lang.String $r1;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        $r1 = r0.<nu.xom.DocType: java.lang.String publicID>;

        return $r1;
    }

    public void setPublicID(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.DocType: void _setPublicID(java.lang.String)>(r1);

        return;
    }

    private void _setPublicID(java.lang.String)
    {
        java.lang.StringBuffer $r6, $r8, $r9, $r17;
        int $i0, $i2, $i5, i7, $i8, $i9, $i10;
        java.lang.String $r1, r2, $r7, $r10;
        nu.xom.DocType r0;
        boolean $z0, $z1, $z2;
        nu.xom.IllegalDataException $r15, $r16, $r18, $r19;
        char $c1, $c3, $c4, $c6;
        nu.xom.WellformednessException $r14;

        r0 := @this: nu.xom.DocType;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<nu.xom.DocType: java.lang.String systemID>;

        if $r1 != null goto label1;

        if r2 == null goto label1;

        $r14 = new nu.xom.WellformednessException;

        specialinvoke $r14.<nu.xom.WellformednessException: void <init>(java.lang.String)>("Cannot have a public ID without a system ID");

        throw $r14;

     label1:
        if r2 == null goto label7;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label7;

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <nu.xom.Verifier: boolean isXMLSpaceCharacter(char)>($c1);

        if $z0 == 0 goto label2;

        $r15 = new nu.xom.IllegalDataException;

        specialinvoke $r15.<nu.xom.IllegalDataException: void <init>(java.lang.String)>("Initial white space in public IDs is not round trippable.");

        throw $r15;

     label2:
        $i2 = $i0 - 1;

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i2);

        $z1 = staticinvoke <nu.xom.Verifier: boolean isXMLSpaceCharacter(char)>($c3);

        if $z1 == 0 goto label3;

        $r16 = new nu.xom.IllegalDataException;

        specialinvoke $r16.<nu.xom.IllegalDataException: void <init>(java.lang.String)>("Trailing white space in public IDs is not round trippable.");

        throw $r16;

     label3:
        i7 = 0;

     label4:
        if i7 >= $i0 goto label7;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i7);

        $z2 = staticinvoke <nu.xom.DocType: boolean isXMLPublicIDCharacter(char)>($c4);

        if $z2 != 0 goto label5;

        $r18 = new nu.xom.IllegalDataException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The character 0x");

        $i8 = (int) $c4;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not allowed in public IDs");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<nu.xom.IllegalDataException: void <init>(java.lang.String)>($r10);

        throw $r18;

     label5:
        $i9 = (int) $c4;

        if $i9 != 32 goto label6;

        $i5 = i7 - 1;

        $c6 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i5);

        $i10 = (int) $c6;

        if $i10 != 32 goto label6;

        $r19 = new nu.xom.IllegalDataException;

        specialinvoke $r19.<nu.xom.IllegalDataException: void <init>(java.lang.String)>("Multiple consecutive spaces in public IDs are not round trippable.");

        throw $r19;

     label6:
        i7 = i7 + 1;

        goto label4;

     label7:
        r0.<nu.xom.DocType: java.lang.String publicID> = r2;

        return;
    }

    public final java.lang.String getSystemID()
    {
        java.lang.String $r1;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        $r1 = r0.<nu.xom.DocType: java.lang.String systemID>;

        return $r1;
    }

    public void setSystemID(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.DocType: void _setSystemID(java.lang.String)>(r1);

        return;
    }

    private void _setSystemID(java.lang.String)
    {
        nu.xom.MalformedURIException $r6;
        nu.xom.WellformednessException $r5;
        int $i0, $i2;
        java.lang.String r0, $r3;
        nu.xom.DocType r1;

        r1 := @this: nu.xom.DocType;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = r1.<nu.xom.DocType: java.lang.String publicID>;

        if $r3 == null goto label1;

        $r5 = new nu.xom.WellformednessException;

        specialinvoke $r5.<nu.xom.WellformednessException: void <init>(java.lang.String)>("Cannot remove system ID without removing public ID first");

        throw $r5;

     label1:
        if r0 == null goto label2;

        staticinvoke <nu.xom.Verifier: void checkURIReference(java.lang.String)>(r0);

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(35);

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        $r6 = new nu.xom.MalformedURIException;

        specialinvoke $r6.<nu.xom.MalformedURIException: void <init>(java.lang.String)>("System literals cannot contain fragment identifiers");

        virtualinvoke $r6.<nu.xom.MalformedURIException: void setData(java.lang.String)>(r0);

        throw $r6;

     label2:
        r1.<nu.xom.DocType: java.lang.String systemID> = r0;

        return;
    }

    public final java.lang.String getValue()
    {
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        return "";
    }

    public final nu.xom.Node getChild(int)
    {
        int i0;
        java.lang.IndexOutOfBoundsException $r0;
        nu.xom.DocType r1;

        r1 := @this: nu.xom.DocType;

        i0 := @parameter0: int;

        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Document type declarations do not have children");

        throw $r0;
    }

    public final int getChildCount()
    {
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        return 0;
    }

    public final java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r5, $r6, $r8, $r9;
        java.lang.Class $r3;
        java.lang.String $r4, $r7, $r10;
        nu.xom.DocType r2;

        r2 := @this: nu.xom.DocType;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r7 = r2.<nu.xom.DocType: java.lang.String rootName>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    public nu.xom.Node copy()
    {
        nu.xom.DocType $r0, r1;

        r1 := @this: nu.xom.DocType;

        $r0 = new nu.xom.DocType;

        specialinvoke $r0.<nu.xom.DocType: void <init>(nu.xom.DocType)>(r1);

        return $r0;
    }

    public final java.lang.String toXML()
    {
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        nu.xom.DocType r1;

        r1 := @this: nu.xom.DocType;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<!DOCTYPE ");

        $r2 = r1.<nu.xom.DocType: java.lang.String rootName>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = r1.<nu.xom.DocType: java.lang.String publicID>;

        if $r3 == null goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" PUBLIC \"");

        $r8 = r1.<nu.xom.DocType: java.lang.String publicID>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" \"");

        $r9 = r1.<nu.xom.DocType: java.lang.String systemID>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

        goto label2;

     label1:
        $r4 = r1.<nu.xom.DocType: java.lang.String systemID>;

        if $r4 == null goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" SYSTEM \"");

        $r7 = r1.<nu.xom.DocType: java.lang.String systemID>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

     label2:
        $r10 = r1.<nu.xom.DocType: java.lang.String internalDTDSubset>;

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [\n");

        $r6 = r1.<nu.xom.DocType: java.lang.String internalDTDSubset>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    boolean isDocType()
    {
        nu.xom.DocType r0;

        r0 := @this: nu.xom.DocType;

        return 1;
    }

    private static boolean isXMLPublicIDCharacter(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        tableswitch($i1)
        {
            case 32: goto label01;
            case 33: goto label02;
            case 34: goto label03;
            case 35: goto label04;
            case 36: goto label05;
            case 37: goto label06;
            case 38: goto label07;
            case 39: goto label08;
            case 40: goto label09;
            case 41: goto label10;
            case 42: goto label11;
            case 43: goto label12;
            case 44: goto label13;
            case 45: goto label14;
            case 46: goto label15;
            case 47: goto label16;
            case 48: goto label17;
            case 49: goto label18;
            case 50: goto label19;
            case 51: goto label20;
            case 52: goto label21;
            case 53: goto label22;
            case 54: goto label23;
            case 55: goto label24;
            case 56: goto label25;
            case 57: goto label26;
            case 58: goto label27;
            case 59: goto label28;
            case 60: goto label29;
            case 61: goto label30;
            case 62: goto label31;
            case 63: goto label32;
            case 64: goto label33;
            case 65: goto label34;
            case 66: goto label35;
            case 67: goto label36;
            case 68: goto label37;
            case 69: goto label38;
            case 70: goto label39;
            case 71: goto label40;
            case 72: goto label41;
            case 73: goto label42;
            case 74: goto label43;
            case 75: goto label44;
            case 76: goto label45;
            case 77: goto label46;
            case 78: goto label47;
            case 79: goto label48;
            case 80: goto label49;
            case 81: goto label50;
            case 82: goto label51;
            case 83: goto label52;
            case 84: goto label53;
            case 85: goto label54;
            case 86: goto label55;
            case 87: goto label56;
            case 88: goto label57;
            case 89: goto label58;
            case 90: goto label59;
            case 91: goto label60;
            case 92: goto label61;
            case 93: goto label62;
            case 94: goto label63;
            case 95: goto label64;
            case 96: goto label65;
            case 97: goto label66;
            case 98: goto label67;
            case 99: goto label68;
            case 100: goto label69;
            case 101: goto label70;
            case 102: goto label71;
            case 103: goto label72;
            case 104: goto label73;
            case 105: goto label74;
            case 106: goto label75;
            case 107: goto label76;
            case 108: goto label77;
            case 109: goto label78;
            case 110: goto label79;
            case 111: goto label80;
            case 112: goto label81;
            case 113: goto label82;
            case 114: goto label83;
            case 115: goto label84;
            case 116: goto label85;
            case 117: goto label86;
            case 118: goto label87;
            case 119: goto label88;
            case 120: goto label89;
            case 121: goto label90;
            case 122: goto label91;
            default: goto label92;
        };

     label01:
        return 1;

     label02:
        return 1;

     label03:
        return 0;

     label04:
        return 1;

     label05:
        return 1;

     label06:
        return 1;

     label07:
        return 0;

     label08:
        return 1;

     label09:
        return 1;

     label10:
        return 1;

     label11:
        return 1;

     label12:
        return 1;

     label13:
        return 1;

     label14:
        return 1;

     label15:
        return 1;

     label16:
        return 1;

     label17:
        return 1;

     label18:
        return 1;

     label19:
        return 1;

     label20:
        return 1;

     label21:
        return 1;

     label22:
        return 1;

     label23:
        return 1;

     label24:
        return 1;

     label25:
        return 1;

     label26:
        return 1;

     label27:
        return 1;

     label28:
        return 1;

     label29:
        return 0;

     label30:
        return 1;

     label31:
        return 0;

     label32:
        return 1;

     label33:
        return 1;

     label34:
        return 1;

     label35:
        return 1;

     label36:
        return 1;

     label37:
        return 1;

     label38:
        return 1;

     label39:
        return 1;

     label40:
        return 1;

     label41:
        return 1;

     label42:
        return 1;

     label43:
        return 1;

     label44:
        return 1;

     label45:
        return 1;

     label46:
        return 1;

     label47:
        return 1;

     label48:
        return 1;

     label49:
        return 1;

     label50:
        return 1;

     label51:
        return 1;

     label52:
        return 1;

     label53:
        return 1;

     label54:
        return 1;

     label55:
        return 1;

     label56:
        return 1;

     label57:
        return 1;

     label58:
        return 1;

     label59:
        return 1;

     label60:
        return 0;

     label61:
        return 0;

     label62:
        return 0;

     label63:
        return 0;

     label64:
        return 1;

     label65:
        return 0;

     label66:
        return 1;

     label67:
        return 1;

     label68:
        return 1;

     label69:
        return 1;

     label70:
        return 1;

     label71:
        return 1;

     label72:
        return 1;

     label73:
        return 1;

     label74:
        return 1;

     label75:
        return 1;

     label76:
        return 1;

     label77:
        return 1;

     label78:
        return 1;

     label79:
        return 1;

     label80:
        return 1;

     label81:
        return 1;

     label82:
        return 1;

     label83:
        return 1;

     label84:
        return 1;

     label85:
        return 1;

     label86:
        return 1;

     label87:
        return 1;

     label88:
        return 1;

     label89:
        return 1;

     label90:
        return 1;

     label91:
        return 1;

     label92:
        return 0;
    }
}
