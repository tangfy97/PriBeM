class com.google.common.collect.ConcurrentHashMultiset$EntrySet extends java.util.AbstractSet
{
    final com.google.common.collect.ConcurrentHashMultiset this$0;

    private void <init>(com.google.common.collect.ConcurrentHashMultiset)
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset r1;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        r1 := @parameter0: com.google.common.collect.ConcurrentHashMultiset;

        r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public int size()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset $r1;
        int $i0;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset this$0>;

        $r2 = staticinvoke <com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset)>($r1);

        $i0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset $r1;
        java.util.concurrent.ConcurrentMap $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset this$0>;

        $r2 = staticinvoke <com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r3;
        com.google.common.collect.Multiset$Entry r1;
        com.google.common.collect.ConcurrentHashMultiset $r4;
        int $i0, $i1;
        java.lang.Object r0, $r2;
        boolean $z0, $z1;

        r3 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.google.common.collect.Multiset$Entry;

        if $z0 == 0 goto label3;

        r1 = (com.google.common.collect.Multiset$Entry) r0;

        $r2 = interfaceinvoke r1.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke r1.<com.google.common.collect.Multiset$Entry: int getCount()>();

        if $i0 <= 0 goto label1;

        $r4 = r3.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset this$0>;

        $i1 = virtualinvoke $r4.<com.google.common.collect.ConcurrentHashMultiset: int count(java.lang.Object)>($r2);

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset $r1;
        java.util.Iterator $r4;
        java.util.Set $r3;
        com.google.common.collect.ConcurrentHashMultiset$EntrySet$1 $r5;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset this$0>;

        $r2 = staticinvoke <com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = new com.google.common.collect.ConcurrentHashMultiset$EntrySet$1;

        specialinvoke $r5.<com.google.common.collect.ConcurrentHashMultiset$EntrySet$1: void <init>(com.google.common.collect.ConcurrentHashMultiset$EntrySet,java.util.Iterator)>(r0, $r4);

        return $r5;
    }

    public java.lang.Object[] toArray()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = specialinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: java.util.List snapshot()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        java.util.List $r1;
        java.lang.Object[] r2, $r3;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        r2 := @parameter0: java.lang.Object[];

        $r1 = specialinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: java.util.List snapshot()>();

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        return $r3;
    }

    private java.util.List snapshot()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        java.util.Iterator $r2;
        int $i0;
        java.lang.Object $r3;
        com.google.common.collect.Multiset$Entry r4;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $i0 = virtualinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: int size()>();

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithExpectedSize(int)>($i0);

        $r2 = virtualinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.common.collect.Multiset$Entry) $r3;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label1;

     label2:
        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r3;
        com.google.common.collect.Multiset$Entry r1;
        java.lang.Integer $r6;
        java.util.concurrent.ConcurrentMap $r5;
        com.google.common.collect.ConcurrentHashMultiset $r4;
        int $i0;
        java.lang.Object r0, $r2;
        boolean $z0, $z1;

        r3 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.google.common.collect.Multiset$Entry;

        if $z0 == 0 goto label1;

        r1 = (com.google.common.collect.Multiset$Entry) r0;

        $r2 = interfaceinvoke r1.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke r1.<com.google.common.collect.Multiset$Entry: int getCount()>();

        $r4 = r3.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset this$0>;

        $r5 = staticinvoke <com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset)>($r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z1 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>($r2, $r6);

        return $z1;

     label1:
        return 0;
    }

    public void clear()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset $r1;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset this$0>;

        $r2 = staticinvoke <com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset)>($r1);

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: void clear()>();

        return;
    }

    public int hashCode()
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset $r1;
        int $i0;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        $r1 = r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: com.google.common.collect.ConcurrentHashMultiset this$0>;

        $r2 = staticinvoke <com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset)>($r1);

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    void <init>(com.google.common.collect.ConcurrentHashMultiset, com.google.common.collect.ConcurrentHashMultiset$1)
    {
        com.google.common.collect.ConcurrentHashMultiset$EntrySet r0;
        com.google.common.collect.ConcurrentHashMultiset$1 r2;
        com.google.common.collect.ConcurrentHashMultiset r1;

        r0 := @this: com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        r1 := @parameter0: com.google.common.collect.ConcurrentHashMultiset;

        r2 := @parameter1: com.google.common.collect.ConcurrentHashMultiset$1;

        specialinvoke r0.<com.google.common.collect.ConcurrentHashMultiset$EntrySet: void <init>(com.google.common.collect.ConcurrentHashMultiset)>(r1);

        return;
    }
}
