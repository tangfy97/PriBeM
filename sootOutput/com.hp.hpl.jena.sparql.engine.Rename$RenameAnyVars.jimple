class com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars extends java.lang.Object implements com.hp.hpl.jena.sparql.graph.NodeTransform
{
    private final java.util.Map aliases;
    private final java.util.Collection constants;
    private final java.lang.String varPrefix;

    public void <init>(java.util.Collection, java.lang.String)
    {
        com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars r0;
        java.util.Collection r2;
        java.util.HashMap $r1;
        java.lang.String r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars;

        r2 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: java.util.Map aliases> = $r1;

        r0.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: java.util.Collection constants> = r2;

        r0.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: java.lang.String varPrefix> = r3;

        return;
    }

    public final com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars r1;
        java.util.Collection $r2, $r6;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.Var r3, $r7, r9;
        java.util.Map $r4, $r8;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r2 = r1.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: java.util.Collection constants>;

        $z1 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        r3 = (com.hp.hpl.jena.sparql.core.Var) r0;

        $r4 = r1.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: java.util.Map aliases>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r9 = (com.hp.hpl.jena.sparql.core.Var) $r5;

        if r9 == null goto label3;

        return r9;

     label3:
        $r6 = r1.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: java.util.Collection constants>;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.engine.Rename: com.hp.hpl.jena.sparql.core.Var chooseVarName(com.hp.hpl.jena.sparql.core.Var,java.util.Collection,java.lang.String)>(r3, $r6, "/");

        $r8 = r1.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: java.util.Map aliases>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r7);

        return $r7;
    }

    public volatile java.lang.Object convert(java.lang.Object)
    {
        com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars r0;
        java.lang.Object r1;
        com.hp.hpl.jena.graph.Node $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.graph.Node) r1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.Rename$RenameAnyVars: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r2);

        return $r3;
    }
}
