class com.google.inject.internal.util.$MapMaker$StrategyImpl extends java.lang.Object implements java.io.Serializable, com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy
{
    final com.google.inject.internal.util.$MapMaker$Strength keyStrength;
    final com.google.inject.internal.util.$MapMaker$Strength valueStrength;
    final java.util.concurrent.ConcurrentMap map;
    final long expirationNanos;
    com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals;
    private static final long serialVersionUID;

    void <init>(com.google.inject.internal.util.$MapMaker)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        com.google.inject.internal.util.$MapMaker r1;
        com.google.inject.internal.util.$MapMaker$Strength $r2, $r3;
        long $l0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Builder $r4;
        java.util.concurrent.ConcurrentMap $r5;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: com.google.inject.internal.util.$MapMaker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength access$100(com.google.inject.internal.util.$MapMaker)>(r1);

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength keyStrength> = $r2;

        $r3 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength access$200(com.google.inject.internal.util.$MapMaker)>(r1);

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength valueStrength> = $r3;

        $l0 = staticinvoke <com.google.inject.internal.util.$MapMaker: long access$300(com.google.inject.internal.util.$MapMaker)>(r1);

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: long expirationNanos> = $l0;

        $r4 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder access$400(com.google.inject.internal.util.$MapMaker)>(r1);

        $r5 = virtualinvoke $r4.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: java.util.concurrent.ConcurrentMap buildMap(com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy)>(r0);

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: java.util.concurrent.ConcurrentMap map> = $r5;

        return;
    }

    void <init>(com.google.inject.internal.util.$MapMaker, com.google.inject.internal.util.$Function)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        com.google.inject.internal.util.$Function r5;
        com.google.inject.internal.util.$MapMaker$Strength $r2, $r3;
        long $l0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Builder $r4;
        java.util.concurrent.ConcurrentMap $r6;
        com.google.inject.internal.util.$MapMaker r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: com.google.inject.internal.util.$MapMaker;

        r5 := @parameter1: com.google.inject.internal.util.$Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength access$100(com.google.inject.internal.util.$MapMaker)>(r1);

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength keyStrength> = $r2;

        $r3 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$Strength access$200(com.google.inject.internal.util.$MapMaker)>(r1);

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength valueStrength> = $r3;

        $l0 = staticinvoke <com.google.inject.internal.util.$MapMaker: long access$300(com.google.inject.internal.util.$MapMaker)>(r1);

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: long expirationNanos> = $l0;

        $r4 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder access$400(com.google.inject.internal.util.$MapMaker)>(r1);

        $r6 = virtualinvoke $r4.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: java.util.concurrent.ConcurrentMap buildComputingMap(com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy,com.google.inject.internal.util.$Function)>(r0, r5);

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: java.util.concurrent.ConcurrentMap map> = $r6;

        return;
    }

    public void setValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry, java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        com.google.inject.internal.util.$MapMaker$Strength $r3;
        long $l0;
        byte $b1;
        int $i2;
        java.lang.Object r2, $r5;
        com.google.inject.internal.util.$MapMaker$ValueReference $r4;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength valueStrength>;

        $r4 = virtualinvoke $r3.<com.google.inject.internal.util.$MapMaker$Strength: com.google.inject.internal.util.$MapMaker$ValueReference referenceValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry,java.lang.Object)>(r1, r2);

        virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: void setValueReference(com.google.inject.internal.util.$MapMaker$ReferenceEntry,com.google.inject.internal.util.$MapMaker$ValueReference)>(r1, $r4);

        $l0 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: long expirationNanos>;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $r5 = interfaceinvoke r1.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: java.lang.Object getKey()>();

        virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: void scheduleRemoval(java.lang.Object,java.lang.Object)>($r5, r2);

     label1:
        return;
    }

    void scheduleRemoval(java.lang.Object, java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r5;
        java.util.Timer $r6;
        long $l0, $l1;
        java.util.concurrent.TimeUnit $r7;
        com.google.inject.internal.util.$MapMaker$StrategyImpl$1 $r4;
        java.lang.Object r1, r3;
        java.lang.ref.WeakReference $r0, $r2;

        r5 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.ref.WeakReference;

        specialinvoke $r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r3);

        $r6 = <com.google.inject.internal.util.$ExpirationTimer: java.util.Timer instance>;

        $r4 = new com.google.inject.internal.util.$MapMaker$StrategyImpl$1;

        specialinvoke $r4.<com.google.inject.internal.util.$MapMaker$StrategyImpl$1: void <init>(com.google.inject.internal.util.$MapMaker$StrategyImpl,java.lang.ref.WeakReference,java.lang.ref.WeakReference)>(r5, $r0, $r2);

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = r5.<com.google.inject.internal.util.$MapMaker$StrategyImpl: long expirationNanos>;

        $l1 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);

        virtualinvoke $r6.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r4, $l1);

        return;
    }

    public boolean equalKeys(java.lang.Object, java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        com.google.inject.internal.util.$MapMaker$Strength $r3;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength keyStrength>;

        $z0 = virtualinvoke $r3.<com.google.inject.internal.util.$MapMaker$Strength: boolean equal(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    public boolean equalValues(java.lang.Object, java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        com.google.inject.internal.util.$MapMaker$Strength $r3;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength valueStrength>;

        $z0 = virtualinvoke $r3.<com.google.inject.internal.util.$MapMaker$Strength: boolean equal(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    public int hashKey(java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        int $i0;
        com.google.inject.internal.util.$MapMaker$Strength $r2;
        java.lang.Object r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength keyStrength>;

        $i0 = virtualinvoke $r2.<com.google.inject.internal.util.$MapMaker$Strength: int hash(java.lang.Object)>(r1);

        return $i0;
    }

    public java.lang.Object getKey(com.google.inject.internal.util.$MapMaker$ReferenceEntry)
    {
        java.lang.Object $r1;
        com.google.inject.internal.util.$MapMaker$StrategyImpl r2;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r0;

        r2 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r0 := @parameter0: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: java.lang.Object getKey()>();

        return $r1;
    }

    public int getHash(com.google.inject.internal.util.$MapMaker$ReferenceEntry)
    {
        int $i0;
        com.google.inject.internal.util.$MapMaker$StrategyImpl r1;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r0;

        r1 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r0 := @parameter0: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        $i0 = interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: int getHash()>();

        return $i0;
    }

    public com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry(java.lang.Object, int, com.google.inject.internal.util.$MapMaker$ReferenceEntry)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Internals $r3;
        int i0;
        com.google.inject.internal.util.$MapMaker$Strength $r4;
        java.lang.Object r1;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r2, $r5;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        $r4 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength keyStrength>;

        $r3 = r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals>;

        $r5 = virtualinvoke $r4.<com.google.inject.internal.util.$MapMaker$Strength: com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry(com.google.inject.internal.util.$CustomConcurrentHashMap$Internals,java.lang.Object,int,com.google.inject.internal.util.$MapMaker$ReferenceEntry)>($r3, r1, i0, r2);

        return $r5;
    }

    public com.google.inject.internal.util.$MapMaker$ReferenceEntry copyEntry(java.lang.Object, com.google.inject.internal.util.$MapMaker$ReferenceEntry, com.google.inject.internal.util.$MapMaker$ReferenceEntry)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r3;
        int $i0, $i1;
        java.lang.Object r4;
        com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference $r9;
        com.google.inject.internal.util.$MapMaker$ValueReference $r1, $r2, $r7;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r0, r5, $r6, $r8;

        r3 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r4 := @parameter0: java.lang.Object;

        r0 := @parameter1: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        r5 := @parameter2: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: com.google.inject.internal.util.$MapMaker$ValueReference getValueReference()>();

        $r2 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$ValueReference access$500()>();

        if $r1 != $r2 goto label1;

        $i1 = interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: int getHash()>();

        $r8 = virtualinvoke r3.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry(java.lang.Object,int,com.google.inject.internal.util.$MapMaker$ReferenceEntry)>(r4, $i1, r5);

        $r9 = new com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference;

        specialinvoke $r9.<com.google.inject.internal.util.$MapMaker$StrategyImpl$FutureValueReference: void <init>(com.google.inject.internal.util.$MapMaker$StrategyImpl,com.google.inject.internal.util.$MapMaker$ReferenceEntry,com.google.inject.internal.util.$MapMaker$ReferenceEntry)>(r3, r0, $r8);

        interfaceinvoke $r8.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: void setValueReference(com.google.inject.internal.util.$MapMaker$ValueReference)>($r9);

        return $r8;

     label1:
        $i0 = interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: int getHash()>();

        $r6 = virtualinvoke r3.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry(java.lang.Object,int,com.google.inject.internal.util.$MapMaker$ReferenceEntry)>(r4, $i0, r5);

        $r7 = interfaceinvoke $r1.<com.google.inject.internal.util.$MapMaker$ValueReference: com.google.inject.internal.util.$MapMaker$ValueReference copyFor(com.google.inject.internal.util.$MapMaker$ReferenceEntry)>($r6);

        interfaceinvoke $r6.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: void setValueReference(com.google.inject.internal.util.$MapMaker$ValueReference)>($r7);

        return $r6;
    }

    public java.lang.Object waitForValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry) throws java.lang.InterruptedException
    {
        java.lang.Throwable $r6;
        com.google.inject.internal.util.$MapMaker$StrategyImpl r7;
        java.lang.Object $r3;
        com.google.inject.internal.util.$MapMaker$ValueReference $r1, $r2, $r4, $r5, r8;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r0;

        r7 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r0 := @parameter0: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: com.google.inject.internal.util.$MapMaker$ValueReference getValueReference()>();

        r8 = $r1;

        $r2 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$ValueReference access$500()>();

        if $r1 != $r2 goto label6;

        entermonitor r0;

     label1:
        $r4 = interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: com.google.inject.internal.util.$MapMaker$ValueReference getValueReference()>();

        r8 = $r4;

        $r5 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$ValueReference access$500()>();

        if $r4 != $r5 goto label2;

        virtualinvoke r0.<java.lang.Object: void wait()>();

        goto label1;

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r6;

     label6:
        $r3 = interfaceinvoke r8.<com.google.inject.internal.util.$MapMaker$ValueReference: java.lang.Object waitForValue()>();

        return $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object getValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r3;
        java.lang.Object $r2;
        com.google.inject.internal.util.$MapMaker$ValueReference $r1;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r0;

        r3 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r0 := @parameter0: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: com.google.inject.internal.util.$MapMaker$ValueReference getValueReference()>();

        $r2 = interfaceinvoke $r1.<com.google.inject.internal.util.$MapMaker$ValueReference: java.lang.Object get()>();

        return $r2;
    }

    public java.lang.Object compute(java.lang.Object, com.google.inject.internal.util.$MapMaker$ReferenceEntry, com.google.inject.internal.util.$Function)
    {
        java.lang.Throwable $r13;
        com.google.inject.internal.util.$Function r0;
        com.google.inject.internal.util.$ComputationException $r15;
        java.lang.String $r10;
        com.google.inject.internal.util.$MapMaker$StrategyImpl r3;
        com.google.inject.internal.util.$MapMaker$NullOutputExceptionReference $r11;
        com.google.inject.internal.util.$NullOutputException $r12;
        com.google.inject.internal.util.$MapMaker$ComputationExceptionReference $r14;
        java.lang.Object r1, $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r4;

        r3 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        r0 := @parameter2: com.google.inject.internal.util.$Function;

     label1:
        $r2 = interfaceinvoke r0.<com.google.inject.internal.util.$Function: java.lang.Object apply(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new com.google.inject.internal.util.$MapMaker$ComputationExceptionReference;

        specialinvoke $r14.<com.google.inject.internal.util.$MapMaker$ComputationExceptionReference: void <init>(java.lang.Throwable)>($r13);

        virtualinvoke r3.<com.google.inject.internal.util.$MapMaker$StrategyImpl: void setValueReference(com.google.inject.internal.util.$MapMaker$ReferenceEntry,com.google.inject.internal.util.$MapMaker$ValueReference)>(r4, $r14);

        $r15 = new com.google.inject.internal.util.$ComputationException;

        specialinvoke $r15.<com.google.inject.internal.util.$ComputationException: void <init>(java.lang.Throwable)>($r13);

        throw $r15;

     label4:
        if $r2 != null goto label5;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned null for key ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new com.google.inject.internal.util.$MapMaker$NullOutputExceptionReference;

        specialinvoke $r11.<com.google.inject.internal.util.$MapMaker$NullOutputExceptionReference: void <init>(java.lang.String)>($r10);

        virtualinvoke r3.<com.google.inject.internal.util.$MapMaker$StrategyImpl: void setValueReference(com.google.inject.internal.util.$MapMaker$ReferenceEntry,com.google.inject.internal.util.$MapMaker$ValueReference)>(r4, $r11);

        $r12 = new com.google.inject.internal.util.$NullOutputException;

        specialinvoke $r12.<com.google.inject.internal.util.$NullOutputException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label5:
        virtualinvoke r3.<com.google.inject.internal.util.$MapMaker$StrategyImpl: void setValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry,java.lang.Object)>(r4, $r2);

        return $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void setValueReference(com.google.inject.internal.util.$MapMaker$ReferenceEntry, com.google.inject.internal.util.$MapMaker$ValueReference)
    {
        java.lang.Throwable $r4;
        com.google.inject.internal.util.$MapMaker$StrategyImpl r5;
        com.google.inject.internal.util.$MapMaker$ValueReference $r1, $r2, r3;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r0;
        boolean $z0;

        r5 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r0 := @parameter0: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        r3 := @parameter1: com.google.inject.internal.util.$MapMaker$ValueReference;

        $r1 = interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: com.google.inject.internal.util.$MapMaker$ValueReference getValueReference()>();

        $r2 = staticinvoke <com.google.inject.internal.util.$MapMaker: com.google.inject.internal.util.$MapMaker$ValueReference access$500()>();

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: void setValueReference(com.google.inject.internal.util.$MapMaker$ValueReference)>(r3);

        if $z0 == 0 goto label7;

        entermonitor r0;

     label3:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r0;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        exitmonitor r0;

     label6:
        throw $r4;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext(com.google.inject.internal.util.$MapMaker$ReferenceEntry)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r2;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry r0, $r1;

        r2 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r0 := @parameter0: com.google.inject.internal.util.$MapMaker$ReferenceEntry;

        $r1 = interfaceinvoke r0.<com.google.inject.internal.util.$MapMaker$ReferenceEntry: com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext()>();

        return $r1;
    }

    public void setInternals(com.google.inject.internal.util.$CustomConcurrentHashMap$Internals)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Internals r1;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: com.google.inject.internal.util.$CustomConcurrentHashMap$Internals;

        r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals> = r1;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Internals $r4;
        com.google.inject.internal.util.$MapMaker$Strength $r2, $r3;
        java.io.ObjectOutputStream r0;
        long $l0;
        java.util.concurrent.ConcurrentMap $r5;

        r1 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r0 := @parameter0: java.io.ObjectOutputStream;

        $r2 = r1.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength keyStrength>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        $r3 = r1.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$Strength valueStrength>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        $l0 = r1.<com.google.inject.internal.util.$MapMaker$StrategyImpl: long expirationNanos>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeLong(long)>($l0);

        $r4 = r1.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$CustomConcurrentHashMap$Internals internals>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $r5 = r1.<com.google.inject.internal.util.$MapMaker$StrategyImpl: java.util.concurrent.ConcurrentMap map>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        java.lang.IllegalAccessException $r12;
        java.io.ObjectInputStream r1;
        long $l0;
        java.lang.AssertionError $r13;
        java.lang.reflect.Field $r2, $r4, $r6, $r8, $r10;
        java.lang.Long $r7;
        java.lang.Object $r3, $r5, $r9, $r11;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.io.ObjectInputStream;

     label1:
        $r2 = <com.google.inject.internal.util.$MapMaker$StrategyImpl$Fields: java.lang.reflect.Field keyStrength>;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke $r2.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r3);

        $r4 = <com.google.inject.internal.util.$MapMaker$StrategyImpl$Fields: java.lang.reflect.Field valueStrength>;

        $r5 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke $r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r5);

        $r6 = <com.google.inject.internal.util.$MapMaker$StrategyImpl$Fields: java.lang.reflect.Field expirationNanos>;

        $l0 = virtualinvoke r1.<java.io.ObjectInputStream: long readLong()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r6.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r7);

        $r8 = <com.google.inject.internal.util.$MapMaker$StrategyImpl$Fields: java.lang.reflect.Field internals>;

        $r9 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke $r8.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r9);

        $r10 = <com.google.inject.internal.util.$MapMaker$StrategyImpl$Fields: java.lang.reflect.Field map>;

        $r11 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke $r10.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r11);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r13;

     label4:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public volatile java.lang.Object waitForValue(java.lang.Object) throws java.lang.InterruptedException
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        java.lang.Object r1, $r3;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r2;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.inject.internal.util.$MapMaker$ReferenceEntry) r1;

        $r3 = virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: java.lang.Object waitForValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry)>($r2);

        return $r3;
    }

    public volatile java.lang.Object compute(java.lang.Object, java.lang.Object, com.google.inject.internal.util.$Function)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        com.google.inject.internal.util.$Function r3;
        java.lang.Object r1, r2, $r5;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r4;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: com.google.inject.internal.util.$Function;

        $r4 = (com.google.inject.internal.util.$MapMaker$ReferenceEntry) r2;

        $r5 = virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: java.lang.Object compute(java.lang.Object,com.google.inject.internal.util.$MapMaker$ReferenceEntry,com.google.inject.internal.util.$Function)>(r1, $r4, r3);

        return $r5;
    }

    public volatile int getHash(java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        int $i0;
        java.lang.Object r1;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r2;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.inject.internal.util.$MapMaker$ReferenceEntry) r1;

        $i0 = virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: int getHash(com.google.inject.internal.util.$MapMaker$ReferenceEntry)>($r2);

        return $i0;
    }

    public volatile java.lang.Object getNext(java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        java.lang.Object r1;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r2, $r3;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.inject.internal.util.$MapMaker$ReferenceEntry) r1;

        $r3 = virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$ReferenceEntry getNext(com.google.inject.internal.util.$MapMaker$ReferenceEntry)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getKey(java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        java.lang.Object r1, $r3;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r2;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.inject.internal.util.$MapMaker$ReferenceEntry) r1;

        $r3 = virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: java.lang.Object getKey(com.google.inject.internal.util.$MapMaker$ReferenceEntry)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getValue(java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        java.lang.Object r1, $r3;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r2;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.inject.internal.util.$MapMaker$ReferenceEntry) r1;

        $r3 = virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: java.lang.Object getValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry)>($r2);

        return $r3;
    }

    public volatile void setValue(java.lang.Object, java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        java.lang.Object r1, r2;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r3;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (com.google.inject.internal.util.$MapMaker$ReferenceEntry) r1;

        virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: void setValue(com.google.inject.internal.util.$MapMaker$ReferenceEntry,java.lang.Object)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copyEntry(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        java.lang.Object r1, r2, r3;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r4, $r5, $r6;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (com.google.inject.internal.util.$MapMaker$ReferenceEntry) r2;

        $r4 = (com.google.inject.internal.util.$MapMaker$ReferenceEntry) r3;

        $r6 = virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$ReferenceEntry copyEntry(java.lang.Object,com.google.inject.internal.util.$MapMaker$ReferenceEntry,com.google.inject.internal.util.$MapMaker$ReferenceEntry)>(r1, $r5, $r4);

        return $r6;
    }

    public volatile java.lang.Object newEntry(java.lang.Object, int, java.lang.Object)
    {
        com.google.inject.internal.util.$MapMaker$StrategyImpl r0;
        int i0;
        java.lang.Object r1, r2;
        com.google.inject.internal.util.$MapMaker$ReferenceEntry $r3, $r4;

        r0 := @this: com.google.inject.internal.util.$MapMaker$StrategyImpl;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = (com.google.inject.internal.util.$MapMaker$ReferenceEntry) r2;

        $r4 = virtualinvoke r0.<com.google.inject.internal.util.$MapMaker$StrategyImpl: com.google.inject.internal.util.$MapMaker$ReferenceEntry newEntry(java.lang.Object,int,com.google.inject.internal.util.$MapMaker$ReferenceEntry)>(r1, i0, $r3);

        return $r4;
    }

    public static void <clinit>()
    {
        <com.google.inject.internal.util.$MapMaker$StrategyImpl: long serialVersionUID> = 0L;

        return;
    }
}
