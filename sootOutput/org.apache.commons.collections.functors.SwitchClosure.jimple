public class org.apache.commons.collections.functors.SwitchClosure extends java.lang.Object implements org.apache.commons.collections.Closure, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.commons.collections.Predicate[] iPredicates;
    private final org.apache.commons.collections.Closure[] iClosures;
    private final org.apache.commons.collections.Closure iDefault;

    public static org.apache.commons.collections.Closure getInstance(org.apache.commons.collections.Predicate[], org.apache.commons.collections.Closure[], org.apache.commons.collections.Closure)
    {
        org.apache.commons.collections.Closure r3, $r7;
        java.lang.IllegalArgumentException $r4;
        org.apache.commons.collections.Predicate[] $r0, r5;
        int $i0, $i1, $i2;
        org.apache.commons.collections.functors.SwitchClosure $r2;
        org.apache.commons.collections.Closure[] $r1, r6;

        r5 := @parameter0: org.apache.commons.collections.Predicate[];

        r6 := @parameter1: org.apache.commons.collections.Closure[];

        r3 := @parameter2: org.apache.commons.collections.Closure;

        staticinvoke <org.apache.commons.collections.functors.FunctorUtils: void validate(org.apache.commons.collections.Predicate[])>(r5);

        staticinvoke <org.apache.commons.collections.functors.FunctorUtils: void validate(org.apache.commons.collections.Closure[])>(r6);

        $i1 = lengthof r5;

        $i0 = lengthof r6;

        if $i1 == $i0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The predicate and closure arrays must be the same size");

        throw $r4;

     label1:
        $i2 = lengthof r5;

        if $i2 != 0 goto label4;

        if r3 != null goto label2;

        $r7 = <org.apache.commons.collections.functors.NOPClosure: org.apache.commons.collections.Closure INSTANCE>;

        goto label3;

     label2:
        $r7 = r3;

     label3:
        return $r7;

     label4:
        $r0 = staticinvoke <org.apache.commons.collections.functors.FunctorUtils: org.apache.commons.collections.Predicate[] copy(org.apache.commons.collections.Predicate[])>(r5);

        $r1 = staticinvoke <org.apache.commons.collections.functors.FunctorUtils: org.apache.commons.collections.Closure[] copy(org.apache.commons.collections.Closure[])>(r6);

        $r2 = new org.apache.commons.collections.functors.SwitchClosure;

        specialinvoke $r2.<org.apache.commons.collections.functors.SwitchClosure: void <init>(org.apache.commons.collections.Predicate[],org.apache.commons.collections.Closure[],org.apache.commons.collections.Closure)>($r0, $r1, r3);

        return $r2;
    }

    public static org.apache.commons.collections.Closure getInstance(java.util.Map)
    {
        org.apache.commons.collections.Closure r2, $r11, $r12, $r14;
        org.apache.commons.collections.Predicate[] r16;
        java.util.Map r0;
        int $i0, $i1, i2;
        org.apache.commons.collections.functors.SwitchClosure $r5;
        boolean $z0;
        org.apache.commons.collections.Predicate $r9;
        java.util.Map$Entry r7;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.lang.IllegalArgumentException $r13;
        java.lang.Object $r1, $r6, $r8, $r10;
        org.apache.commons.collections.Closure[] r15;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The predicate and closure map must not be null");

        throw $r13;

     label1:
        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        if $i0 != 0 goto label2;

        $r12 = <org.apache.commons.collections.functors.NOPClosure: org.apache.commons.collections.Closure INSTANCE>;

        return $r12;

     label2:
        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(null);

        r2 = (org.apache.commons.collections.Closure) $r1;

        $i1 = interfaceinvoke r0.<java.util.Map: int size()>();

        if $i1 != 0 goto label5;

        if r2 != null goto label3;

        $r14 = <org.apache.commons.collections.functors.NOPClosure: org.apache.commons.collections.Closure INSTANCE>;

        goto label4;

     label3:
        $r14 = r2;

     label4:
        return $r14;

     label5:
        r15 = newarray (org.apache.commons.collections.Closure)[$i1];

        r16 = newarray (org.apache.commons.collections.Predicate)[$i1];

        i2 = 0;

        $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (org.apache.commons.collections.Predicate) $r8;

        r16[i2] = $r9;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (org.apache.commons.collections.Closure) $r10;

        r15[i2] = $r11;

        i2 = i2 + 1;

        goto label6;

     label7:
        $r5 = new org.apache.commons.collections.functors.SwitchClosure;

        specialinvoke $r5.<org.apache.commons.collections.functors.SwitchClosure: void <init>(org.apache.commons.collections.Predicate[],org.apache.commons.collections.Closure[],org.apache.commons.collections.Closure)>(r16, r15, r2);

        return $r5;
    }

    public void <init>(org.apache.commons.collections.Predicate[], org.apache.commons.collections.Closure[], org.apache.commons.collections.Closure)
    {
        org.apache.commons.collections.Predicate[] r1;
        org.apache.commons.collections.Closure r3, $r4;
        org.apache.commons.collections.functors.SwitchClosure r0;
        org.apache.commons.collections.Closure[] r2;

        r0 := @this: org.apache.commons.collections.functors.SwitchClosure;

        r1 := @parameter0: org.apache.commons.collections.Predicate[];

        r2 := @parameter1: org.apache.commons.collections.Closure[];

        r3 := @parameter2: org.apache.commons.collections.Closure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections.functors.SwitchClosure: org.apache.commons.collections.Predicate[] iPredicates> = r1;

        r0.<org.apache.commons.collections.functors.SwitchClosure: org.apache.commons.collections.Closure[] iClosures> = r2;

        if r3 != null goto label1;

        $r4 = <org.apache.commons.collections.functors.NOPClosure: org.apache.commons.collections.Closure INSTANCE>;

        goto label2;

     label1:
        $r4 = r3;

     label2:
        r0.<org.apache.commons.collections.functors.SwitchClosure: org.apache.commons.collections.Closure iDefault> = $r4;

        return;
    }

    public void execute(java.lang.Object)
    {
        org.apache.commons.collections.Predicate $r5;
        org.apache.commons.collections.Closure $r3, $r7;
        org.apache.commons.collections.Predicate[] $r1, $r4;
        int $i0, i1;
        java.lang.Object r2;
        org.apache.commons.collections.functors.SwitchClosure r0;
        boolean $z0;
        org.apache.commons.collections.Closure[] $r6;

        r0 := @this: org.apache.commons.collections.functors.SwitchClosure;

        r2 := @parameter0: java.lang.Object;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.collections.functors.SwitchClosure: org.apache.commons.collections.Predicate[] iPredicates>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r4 = r0.<org.apache.commons.collections.functors.SwitchClosure: org.apache.commons.collections.Predicate[] iPredicates>;

        $r5 = $r4[i1];

        $z0 = interfaceinvoke $r5.<org.apache.commons.collections.Predicate: boolean evaluate(java.lang.Object)>(r2);

        if $z0 != 1 goto label2;

        $r6 = r0.<org.apache.commons.collections.functors.SwitchClosure: org.apache.commons.collections.Closure[] iClosures>;

        $r7 = $r6[i1];

        interfaceinvoke $r7.<org.apache.commons.collections.Closure: void execute(java.lang.Object)>(r2);

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = r0.<org.apache.commons.collections.functors.SwitchClosure: org.apache.commons.collections.Closure iDefault>;

        interfaceinvoke $r3.<org.apache.commons.collections.Closure: void execute(java.lang.Object)>(r2);

        return;
    }

    public org.apache.commons.collections.Predicate[] getPredicates()
    {
        org.apache.commons.collections.Predicate[] $r1;
        org.apache.commons.collections.functors.SwitchClosure r0;

        r0 := @this: org.apache.commons.collections.functors.SwitchClosure;

        $r1 = r0.<org.apache.commons.collections.functors.SwitchClosure: org.apache.commons.collections.Predicate[] iPredicates>;

        return $r1;
    }

    public org.apache.commons.collections.Closure[] getClosures()
    {
        org.apache.commons.collections.functors.SwitchClosure r0;
        org.apache.commons.collections.Closure[] $r1;

        r0 := @this: org.apache.commons.collections.functors.SwitchClosure;

        $r1 = r0.<org.apache.commons.collections.functors.SwitchClosure: org.apache.commons.collections.Closure[] iClosures>;

        return $r1;
    }

    public org.apache.commons.collections.Closure getDefaultClosure()
    {
        org.apache.commons.collections.Closure $r1;
        org.apache.commons.collections.functors.SwitchClosure r0;

        r0 := @this: org.apache.commons.collections.functors.SwitchClosure;

        $r1 = r0.<org.apache.commons.collections.functors.SwitchClosure: org.apache.commons.collections.Closure iDefault>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.functors.SwitchClosure: long serialVersionUID> = 3518477308466486130L;

        return;
    }
}
