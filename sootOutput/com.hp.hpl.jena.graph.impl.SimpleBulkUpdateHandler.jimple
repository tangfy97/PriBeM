public class com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler extends java.lang.Object implements com.hp.hpl.jena.graph.BulkUpdateHandler
{
    protected com.hp.hpl.jena.graph.impl.GraphWithPerform graph;
    protected com.hp.hpl.jena.graph.GraphEventManager manager;

    public void <init>(com.hp.hpl.jena.graph.impl.GraphWithPerform)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        com.hp.hpl.jena.graph.GraphEventManager $r2;
        com.hp.hpl.jena.graph.impl.GraphWithPerform r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r1 := @parameter0: com.hp.hpl.jena.graph.impl.GraphWithPerform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph> = r1;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.graph.impl.GraphWithPerform: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager> = $r2;

        return;
    }

    public void add(com.hp.hpl.jena.graph.Triple[])
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r1;
        com.hp.hpl.jena.graph.GraphEventManager $r3;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r2, $r5;
        com.hp.hpl.jena.graph.Triple $r4;
        int $i0, i1;
        com.hp.hpl.jena.graph.Triple[] r0;

        r1 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r5 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        $r4 = r0[i1];

        interfaceinvoke $r5.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performAdd(com.hp.hpl.jena.graph.Triple)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager>;

        $r2 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.GraphEventManager: void notifyAddArray(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple[])>($r2, r0);

        return;
    }

    public void add(java.util.List)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        java.util.List r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void add(java.util.List,boolean)>(r1, 1);

        return;
    }

    protected void add(java.util.List, boolean)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r1;
        com.hp.hpl.jena.graph.GraphEventManager $r3;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r2, $r4;
        com.hp.hpl.jena.graph.Triple $r6;
        java.util.List r0;
        int $i0, i1;
        java.lang.Object $r5;
        boolean z0;

        r1 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r0 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r4 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (com.hp.hpl.jena.graph.Triple) $r5;

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performAdd(com.hp.hpl.jena.graph.Triple)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        if z0 == 0 goto label3;

        $r3 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager>;

        $r2 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.GraphEventManager: void notifyAddList(com.hp.hpl.jena.graph.Graph,java.util.List)>($r2, r0);

     label3:
        return;
    }

    public void add(java.util.Iterator)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        java.util.Iterator r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r1 := @parameter0: java.util.Iterator;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void addIterator(java.util.Iterator,boolean)>(r1, 1);

        return;
    }

    public void addIterator(java.util.Iterator, boolean)
    {
        java.util.List $r1;
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r2;
        java.util.Iterator r0;
        com.hp.hpl.jena.graph.GraphEventManager $r4;
        boolean z0;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r3;

        r2 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r0 := @parameter0: java.util.Iterator;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <com.hp.hpl.jena.util.IteratorCollection: java.util.List iteratorToList(java.util.Iterator)>(r0);

        virtualinvoke r2.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void add(java.util.List,boolean)>($r1, 0);

        if z0 == 0 goto label1;

        $r4 = r2.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager>;

        $r3 = r2.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.GraphEventManager: void notifyAddIterator(com.hp.hpl.jena.graph.Graph,java.util.List)>($r3, $r1);

     label1:
        return;
    }

    public void add(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.graph.GraphEventManager $r4;
        com.hp.hpl.jena.graph.Graph r1;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r3;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r2 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void addIterator(java.util.Iterator,boolean)>($r2, 0);

        $r4 = r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager>;

        $r3 = r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.GraphEventManager: void notifyAddGraph(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>($r3, r1);

        return;
    }

    public void add(com.hp.hpl.jena.graph.Graph, boolean)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        com.hp.hpl.jena.graph.Graph r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void add(com.hp.hpl.jena.graph.Graph)>(r1);

        return;
    }

    public void delete(com.hp.hpl.jena.graph.Triple[])
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r1;
        com.hp.hpl.jena.graph.GraphEventManager $r3;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r2, $r5;
        com.hp.hpl.jena.graph.Triple $r4;
        int $i0, i1;
        com.hp.hpl.jena.graph.Triple[] r0;

        r1 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r5 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        $r4 = r0[i1];

        interfaceinvoke $r5.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performDelete(com.hp.hpl.jena.graph.Triple)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager>;

        $r2 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteArray(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple[])>($r2, r0);

        return;
    }

    public void delete(java.util.List)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        java.util.List r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void delete(java.util.List,boolean)>(r1, 1);

        return;
    }

    protected void delete(java.util.List, boolean)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r1;
        com.hp.hpl.jena.graph.GraphEventManager $r3;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r2, $r4;
        com.hp.hpl.jena.graph.Triple $r6;
        java.util.List r0;
        int $i0, i1;
        java.lang.Object $r5;
        boolean z0;

        r1 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r0 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r4 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (com.hp.hpl.jena.graph.Triple) $r5;

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.impl.GraphWithPerform: void performDelete(com.hp.hpl.jena.graph.Triple)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        if z0 == 0 goto label3;

        $r3 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager>;

        $r2 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteList(com.hp.hpl.jena.graph.Graph,java.util.List)>($r2, r0);

     label3:
        return;
    }

    public void delete(java.util.Iterator)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        java.util.Iterator r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r1 := @parameter0: java.util.Iterator;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void deleteIterator(java.util.Iterator,boolean)>(r1, 1);

        return;
    }

    public void deleteIterator(java.util.Iterator, boolean)
    {
        java.util.List $r1;
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r2;
        java.util.Iterator r0;
        com.hp.hpl.jena.graph.GraphEventManager $r4;
        boolean z0;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r3;

        r2 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r0 := @parameter0: java.util.Iterator;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <com.hp.hpl.jena.util.IteratorCollection: java.util.List iteratorToList(java.util.Iterator)>(r0);

        virtualinvoke r2.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void delete(java.util.List,boolean)>($r1, 0);

        if z0 == 0 goto label1;

        $r4 = r2.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager>;

        $r3 = r2.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteIterator(com.hp.hpl.jena.graph.Graph,java.util.List)>($r3, $r1);

     label1:
        return;
    }

    private java.util.List triplesOf(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        java.lang.Object $r4;
        com.hp.hpl.jena.graph.Graph r1;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.graph.Triple $r2;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple ANY>;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>($r2);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r0;
    }

    public void delete(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void delete(com.hp.hpl.jena.graph.Graph,boolean)>(r1, 0);

        return;
    }

    public void delete(com.hp.hpl.jena.graph.Graph, boolean)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r1;
        com.hp.hpl.jena.graph.GraphEventManager $r5;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r2, $r4;
        java.util.List $r6;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, z1;

        r1 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        z1 := @parameter1: boolean;

        $r2 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: boolean dependsOn(com.hp.hpl.jena.graph.Graph)>($r2);

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: java.util.List triplesOf(com.hp.hpl.jena.graph.Graph)>(r0);

        virtualinvoke r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void delete(java.util.List)>($r6);

        goto label2;

     label1:
        $r3 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)>(r0);

        virtualinvoke r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void deleteIterator(java.util.Iterator,boolean)>($r3, 0);

     label2:
        $r5 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager>;

        $r4 = r1.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        interfaceinvoke $r5.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteGraph(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>($r4, r0);

        return;
    }

    public void removeAll()
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        staticinvoke <com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void removeAll(com.hp.hpl.jena.graph.Graph)>($r1);

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void notifyRemoveAll()>();

        return;
    }

    protected void notifyRemoveAll()
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        com.hp.hpl.jena.graph.GraphEventManager $r3;
        com.hp.hpl.jena.graph.GraphEvents $r1;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        $r3 = r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager>;

        $r2 = r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        $r1 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents removeAll>;

        interfaceinvoke $r3.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>($r2, $r1);

        return;
    }

    public void remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler r0;
        com.hp.hpl.jena.graph.GraphEventManager $r5;
        com.hp.hpl.jena.graph.GraphEvents $r7;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.impl.GraphWithPerform $r4, $r6;

        r0 := @this: com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        staticinvoke <com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void removeAll(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, r1, r2, r3);

        $r5 = r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.GraphEventManager manager>;

        $r6 = r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: com.hp.hpl.jena.graph.impl.GraphWithPerform graph>;

        $r7 = staticinvoke <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents remove(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        interfaceinvoke $r5.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>($r6, $r7);

        return;
    }

    public static void removeAll(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.lang.Throwable $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void remove()>();

        goto label1;

     label2:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void removeAll(com.hp.hpl.jena.graph.Graph)
    {
        java.lang.Throwable $r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)>(r0);

     label1:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void remove()>();

        goto label1;

     label2:
        interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
