public class org.waveprotocol.wave.client.editor.content.FocusedContentRange extends org.waveprotocol.wave.model.document.util.FocusedPointRange
{
    private org.waveprotocol.wave.client.editor.content.ContentRange orderedRange;
    private boolean isOrdered;

    public void <init>(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange r0;
        org.waveprotocol.wave.model.document.util.Point r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.FocusedContentRange;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.FocusedPointRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(r1, r2);

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange r0;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.FocusedContentRange;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.FocusedPointRange: void <init>(org.waveprotocol.wave.model.document.util.Point)>(r1);

        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentRange asOrderedRange(boolean)
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange r0;
        org.waveprotocol.wave.client.editor.content.ContentRange $r1, $r6, $r7;
        org.waveprotocol.wave.model.document.util.Point $r2, $r3, $r4, $r5;
        boolean z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.FocusedContentRange;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.client.editor.content.ContentRange orderedRange>;

        if $r1 != null goto label3;

        if z0 == 0 goto label1;

        $r6 = new org.waveprotocol.wave.client.editor.content.ContentRange;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r4, $r5);

        goto label2;

     label1:
        $r6 = new org.waveprotocol.wave.client.editor.content.ContentRange;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r2, $r3);

     label2:
        r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.client.editor.content.ContentRange orderedRange> = $r6;

        r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: boolean isOrdered> = z0;

        goto label6;

     label3:
        $z1 = r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: boolean isOrdered>;

        if z0 != $z1 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Different isOrdered input from last time");

     label6:
        $r7 = r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.client.editor.content.ContentRange orderedRange>;

        return $r7;
    }
}
