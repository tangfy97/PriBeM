public class ucar.ma2.ArraySequenceNested extends ucar.ma2.ArrayStructure
{
    private int[] sequenceLen;
    private int[] sequenceOffset;
    private int total;

    public void <init>(ucar.ma2.StructureMembers, int)
    {
        ucar.ma2.StructureMembers r1;
        int[] $r2, $r3;
        int i0;
        ucar.ma2.ArraySequenceNested r0;

        r0 := @this: ucar.ma2.ArraySequenceNested;

        r1 := @parameter0: ucar.ma2.StructureMembers;

        i0 := @parameter1: int;

        $r2 = newarray (int)[1];

        $r2[0] = i0;

        specialinvoke r0.<ucar.ma2.ArrayStructure: void <init>(ucar.ma2.StructureMembers,int[])>(r1, $r2);

        r0.<ucar.ma2.ArraySequenceNested: int total> = 0;

        $r3 = newarray (int)[i0];

        r0.<ucar.ma2.ArraySequenceNested: int[] sequenceLen> = $r3;

        return;
    }

    protected ucar.ma2.StructureData makeStructureData(ucar.ma2.ArrayStructure, int)
    {
        ucar.ma2.StructureDataA $r0;
        ucar.ma2.ArrayStructure r1;
        int i0;
        ucar.ma2.ArraySequenceNested r2;

        r2 := @this: ucar.ma2.ArraySequenceNested;

        r1 := @parameter0: ucar.ma2.ArrayStructure;

        i0 := @parameter1: int;

        $r0 = new ucar.ma2.StructureDataA;

        specialinvoke $r0.<ucar.ma2.StructureDataA: void <init>(ucar.ma2.ArrayStructure,int)>(r1, i0);

        return $r0;
    }

    public ucar.ma2.StructureData getStructureData(int)
    {
        int i0;
        ucar.ma2.StructureDataA $r0;
        ucar.ma2.ArraySequenceNested r1;

        r1 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        $r0 = new ucar.ma2.StructureDataA;

        specialinvoke $r0.<ucar.ma2.StructureDataA: void <init>(ucar.ma2.ArrayStructure,int)>(r1, i0);

        return $r0;
    }

    public void setSequenceLength(int, int)
    {
        int[] $r1;
        int i0, i1;
        ucar.ma2.ArraySequenceNested r0;

        r0 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<ucar.ma2.ArraySequenceNested: int[] sequenceLen>;

        $r1[i0] = i1;

        return;
    }

    public int getSequenceLength(int)
    {
        int[] $r1;
        int i0, $i1;
        ucar.ma2.ArraySequenceNested r0;

        r0 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.ArraySequenceNested: int[] sequenceLen>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int getSequenceOffset(int)
    {
        int[] $r1;
        int i0, $i1;
        ucar.ma2.ArraySequenceNested r0;

        r0 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.ArraySequenceNested: int[] sequenceOffset>;

        $i1 = $r1[i0];

        return $i1;
    }

    public void finish()
    {
        ucar.ma2.StructureMembers$Member r7;
        int[] $r1, $r8, r9, $r13, $r15, $r16;
        boolean $z0;
        ucar.ma2.DataType $r10;
        java.util.List $r4;
        ucar.ma2.StructureMembers $r3;
        ucar.ma2.StructureDataA $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        ucar.ma2.StructureData[] $r2, $r14;
        java.util.Iterator $r5;
        ucar.ma2.Array $r11;
        java.lang.Object $r6;
        ucar.ma2.ArraySequenceNested r0;

        r0 := @this: ucar.ma2.ArraySequenceNested;

        $i0 = r0.<ucar.ma2.ArraySequenceNested: int nelems>;

        $r1 = newarray (int)[$i0];

        r0.<ucar.ma2.ArraySequenceNested: int[] sequenceOffset> = $r1;

        r0.<ucar.ma2.ArraySequenceNested: int total> = 0;

        i13 = 0;

     label1:
        $i1 = r0.<ucar.ma2.ArraySequenceNested: int nelems>;

        if i13 >= $i1 goto label2;

        $r15 = r0.<ucar.ma2.ArraySequenceNested: int[] sequenceOffset>;

        $i9 = r0.<ucar.ma2.ArraySequenceNested: int total>;

        $r15[i13] = $i9;

        $i11 = r0.<ucar.ma2.ArraySequenceNested: int total>;

        $r16 = r0.<ucar.ma2.ArraySequenceNested: int[] sequenceLen>;

        $i10 = $r16[i13];

        $i12 = $i11 + $i10;

        r0.<ucar.ma2.ArraySequenceNested: int total> = $i12;

        i13 = i13 + 1;

        goto label1;

     label2:
        $i2 = r0.<ucar.ma2.ArraySequenceNested: int nelems>;

        $r2 = newarray (ucar.ma2.StructureData)[$i2];

        r0.<ucar.ma2.ArraySequenceNested: ucar.ma2.StructureData[] sdata> = $r2;

        i14 = 0;

     label3:
        $i3 = r0.<ucar.ma2.ArraySequenceNested: int nelems>;

        if i14 >= $i3 goto label4;

        $r14 = r0.<ucar.ma2.ArraySequenceNested: ucar.ma2.StructureData[] sdata>;

        $r12 = new ucar.ma2.StructureDataA;

        $r13 = r0.<ucar.ma2.ArraySequenceNested: int[] sequenceOffset>;

        $i8 = $r13[i14];

        specialinvoke $r12.<ucar.ma2.StructureDataA: void <init>(ucar.ma2.ArrayStructure,int)>(r0, $i8);

        $r14[i14] = $r12;

        i14 = i14 + 1;

        goto label3;

     label4:
        $r3 = r0.<ucar.ma2.ArraySequenceNested: ucar.ma2.StructureMembers members>;

        $r4 = virtualinvoke $r3.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (ucar.ma2.StructureMembers$Member) $r6;

        $r8 = virtualinvoke r7.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $i4 = lengthof $r8;

        $i5 = $i4 + 1;

        r9 = newarray (int)[$i5];

        $i6 = r0.<ucar.ma2.ArraySequenceNested: int total>;

        r9[0] = $i6;

        $i7 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r9, 1, $i7);

        $r10 = virtualinvoke r7.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r10, r9);

        virtualinvoke r7.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r11);

        goto label5;

     label6:
        return;
    }

    public int getTotalNumberOfStructures()
    {
        int $i0;
        ucar.ma2.ArraySequenceNested r0;

        r0 := @this: ucar.ma2.ArraySequenceNested;

        $i0 = r0.<ucar.ma2.ArraySequenceNested: int total>;

        return $i0;
    }

    public ucar.ma2.ArrayStructure flatten()
    {
        ucar.ma2.StructureDataA $r4;
        ucar.ma2.ArrayStructureW $r0;
        ucar.ma2.StructureMembers $r2;
        int[] $r3;
        int $i0, $i1, i2;
        ucar.ma2.ArraySequenceNested r1;

        r1 := @this: ucar.ma2.ArraySequenceNested;

        $r0 = new ucar.ma2.ArrayStructureW;

        $r2 = virtualinvoke r1.<ucar.ma2.ArraySequenceNested: ucar.ma2.StructureMembers getStructureMembers()>();

        $r3 = newarray (int)[1];

        $i0 = r1.<ucar.ma2.ArraySequenceNested: int total>;

        $r3[0] = $i0;

        specialinvoke $r0.<ucar.ma2.ArrayStructureW: void <init>(ucar.ma2.StructureMembers,int[])>($r2, $r3);

        i2 = 0;

     label1:
        $i1 = r1.<ucar.ma2.ArraySequenceNested: int total>;

        if i2 >= $i1 goto label2;

        $r4 = new ucar.ma2.StructureDataA;

        specialinvoke $r4.<ucar.ma2.StructureDataA: void <init>(ucar.ma2.ArrayStructure,int)>(r1, i2);

        virtualinvoke $r0.<ucar.ma2.ArrayStructureW: void setStructureData(ucar.ma2.StructureData,int)>($r4, i2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public double getScalarDouble(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        int i0, $i1, $i2;
        java.lang.String $r10;
        double $d0;
        ucar.ma2.DataType $r1, $r2, $r7;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        ucar.ma2.ArraySequenceNested r11;

        r11 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 == $r2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be double");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $d0 = virtualinvoke $r3.<ucar.ma2.Array: double getDouble(int)>($i2);

        return $d0;
    }

    public double[] getJavaArrayDouble(int, ucar.ma2.StructureMembers$Member)
    {
        double[] r4;
        ucar.ma2.StructureMembers$Member r0;
        int $i0, i1, $i2, $i3, i4;
        java.lang.String $r11;
        double $d0;
        ucar.ma2.DataType $r1, $r2, $r8;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        ucar.ma2.ArraySequenceNested r12;

        r12 := @this: ucar.ma2.ArraySequenceNested;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 == $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be double");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = newarray (double)[$i0];

        i4 = 0;

     label2:
        if i4 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i4;

        $d0 = virtualinvoke $r3.<ucar.ma2.Array: double getDouble(int)>($i3);

        r4[i4] = $d0;

        i4 = i4 + 1;

        goto label2;

     label3:
        return r4;
    }

    public float getScalarFloat(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        int i0, $i1, $i2;
        java.lang.String $r10;
        ucar.ma2.DataType $r1, $r2, $r7;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array $r3;
        float $f0;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        ucar.ma2.ArraySequenceNested r11;

        r11 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 == $r2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be float");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $f0 = virtualinvoke $r3.<ucar.ma2.Array: float getFloat(int)>($i2);

        return $f0;
    }

    public float[] getJavaArrayFloat(int, ucar.ma2.StructureMembers$Member)
    {
        float[] r4;
        ucar.ma2.StructureMembers$Member r0;
        int $i0, i1, $i2, $i3, i4;
        java.lang.String $r11;
        ucar.ma2.DataType $r1, $r2, $r8;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r3;
        float $f0;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        ucar.ma2.ArraySequenceNested r12;

        r12 := @this: ucar.ma2.ArraySequenceNested;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 == $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be float");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = newarray (float)[$i0];

        i4 = 0;

     label2:
        if i4 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i4;

        $f0 = virtualinvoke $r3.<ucar.ma2.Array: float getFloat(int)>($i3);

        r4[i4] = $f0;

        i4 = i4 + 1;

        goto label2;

     label3:
        return r4;
    }

    public byte getScalarByte(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        byte $b3;
        int i0, $i1, $i2;
        java.lang.String $r12;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        ucar.ma2.ArraySequenceNested r13;

        r13 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be byte");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $b3 = virtualinvoke $r3.<ucar.ma2.Array: byte getByte(int)>($i2);

        return $b3;
    }

    public byte[] getJavaArrayByte(int, ucar.ma2.StructureMembers$Member)
    {
        byte[] $r6;
        ucar.ma2.StructureMembers$Member r0;
        byte $b4;
        int $i0, i1, $i2, $i3, i5;
        java.lang.String $r13;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r10;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;
        ucar.ma2.ArraySequenceNested r14;

        r14 := @this: ucar.ma2.ArraySequenceNested;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if $r4 == $r5 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be byte");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $r6 = newarray (byte)[$i0];

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i5;

        $b4 = virtualinvoke $r3.<ucar.ma2.Array: byte getByte(int)>($i3);

        $r6[i5] = $b4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return $r6;
    }

    public short getScalarShort(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        short $s3;
        int i0, $i1, $i2;
        java.lang.String $r12;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        ucar.ma2.ArraySequenceNested r13;

        r13 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be short");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $s3 = virtualinvoke $r3.<ucar.ma2.Array: short getShort(int)>($i2);

        return $s3;
    }

    public short[] getJavaArrayShort(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        short $s4;
        int $i0, i1, $i2, $i3, i5;
        java.lang.String $r13;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r10;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;
        short[] $r6;
        ucar.ma2.ArraySequenceNested r14;

        r14 := @this: ucar.ma2.ArraySequenceNested;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if $r4 == $r5 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be short");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $r6 = newarray (short)[$i0];

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i5;

        $s4 = virtualinvoke $r3.<ucar.ma2.Array: short getShort(int)>($i3);

        $r6[i5] = $s4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return $r6;
    }

    public int getScalarInt(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        int i0, $i1, $i2, $i3;
        java.lang.String $r12;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        ucar.ma2.ArraySequenceNested r13;

        r13 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be int");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $i3 = virtualinvoke $r3.<ucar.ma2.Array: int getInt(int)>($i2);

        return $i3;
    }

    public int[] getJavaArrayInt(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        int[] $r6;
        int $i0, i1, $i2, $i3, $i4, i5;
        java.lang.String $r13;
        ucar.ma2.DataType $r1, $r2, $r4, $r5, $r10;
        java.lang.IllegalArgumentException $r7;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;
        ucar.ma2.ArraySequenceNested r14;

        r14 := @this: ucar.ma2.ArraySequenceNested;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if $r4 == $r5 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be int");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $r6 = newarray (int)[$i0];

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i5;

        $i4 = virtualinvoke $r3.<ucar.ma2.Array: int getInt(int)>($i3);

        $r6[i5] = $i4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return $r6;
    }

    public long getScalarLong(int, ucar.ma2.StructureMembers$Member)
    {
        long $l3;
        ucar.ma2.StructureMembers$Member r0;
        int i0, $i1, $i2;
        java.lang.String $r10;
        ucar.ma2.DataType $r1, $r2, $r7;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        ucar.ma2.ArraySequenceNested r11;

        r11 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r1 == $r2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be long");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $l3 = virtualinvoke $r3.<ucar.ma2.Array: long getLong(int)>($i2);

        return $l3;
    }

    public long[] getJavaArrayLong(int, ucar.ma2.StructureMembers$Member)
    {
        long $l4;
        ucar.ma2.StructureMembers$Member r0;
        long[] r4;
        int $i0, i1, $i2, $i3, i5;
        java.lang.String $r11;
        ucar.ma2.DataType $r1, $r2, $r8;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        ucar.ma2.ArraySequenceNested r12;

        r12 := @this: ucar.ma2.ArraySequenceNested;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r1 == $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be long");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = newarray (long)[$i0];

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i5;

        $l4 = virtualinvoke $r3.<ucar.ma2.Array: long getLong(int)>($i3);

        r4[i5] = $l4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r4;
    }

    public char getScalarChar(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        int i0, $i1, $i2;
        java.lang.String $r10;
        ucar.ma2.DataType $r1, $r2, $r7;
        char $c3;
        java.lang.IllegalArgumentException $r4;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        ucar.ma2.ArraySequenceNested r11;

        r11 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 == $r2 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be char");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $c3 = virtualinvoke $r3.<ucar.ma2.Array: char getChar(int)>($i2);

        return $c3;
    }

    public char[] getJavaArrayChar(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        int $i0, i1, $i2, $i3, i5;
        java.lang.String $r11;
        ucar.ma2.DataType $r1, $r2, $r8;
        char $c4;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r3;
        char[] r4;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        ucar.ma2.ArraySequenceNested r12;

        r12 := @this: ucar.ma2.ArraySequenceNested;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 == $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be char");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r4 = newarray (char)[$i0];

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $i2 = i1 * $i0;

        $i3 = $i2 + i5;

        $c4 = virtualinvoke $r3.<ucar.ma2.Array: char getChar(int)>($i3);

        r4[i5] = $c4;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r4;
    }

    public java.lang.String getScalarString(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        ucar.ma2.ArrayChar r18;
        int i0;
        java.lang.String $r11, $r14, $r16;
        ucar.ma2.ArrayObject r19;
        ucar.ma2.DataType $r1, $r2, $r3, $r4, $r8;
        java.lang.IllegalArgumentException $r5;
        ucar.ma2.Array $r12, $r15;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        java.lang.Object $r13;
        ucar.ma2.ArraySequenceNested r17;

        r17 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 != $r2 goto label1;

        $r15 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r18 = (ucar.ma2.ArrayChar) $r15;

        $r16 = virtualinvoke r18.<ucar.ma2.ArrayChar: java.lang.String getString(int)>(i0);

        return $r16;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r4 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r3 != $r4 goto label2;

        $r12 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r19 = (ucar.ma2.ArrayObject) $r12;

        $r13 = virtualinvoke r19.<ucar.ma2.ArrayObject: java.lang.Object getObject(int)>(i0);

        $r14 = (java.lang.String) $r13;

        return $r14;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be String or char");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;
    }

    public java.lang.String[] getJavaArrayString(int, ucar.ma2.StructureMembers$Member)
    {
        java.lang.String[] r1;
        ucar.ma2.StructureMembers$Member r0;
        ucar.ma2.ArrayChar r19;
        int $i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String $r12, $r15, $r17;
        ucar.ma2.DataType $r2, $r3, $r4, $r5, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r13, $r16;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        java.lang.Object $r14;
        ucar.ma2.ArraySequenceNested r18;

        r18 := @this: ucar.ma2.ArraySequenceNested;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r1 = newarray (java.lang.String)[$i0];

        $r2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r2 != $r3 goto label3;

        $r16 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r19 = (ucar.ma2.ArrayChar) $r16;

        i6 = 0;

     label1:
        if i6 >= $i0 goto label2;

        $i4 = i1 * $i0;

        $i5 = $i4 + i6;

        $r17 = virtualinvoke r19.<ucar.ma2.ArrayChar: java.lang.String getString(int)>($i5);

        r1[i6] = $r17;

        i6 = i6 + 1;

        goto label1;

     label2:
        return r1;

     label3:
        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r4 != $r5 goto label6;

        $r13 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        i7 = 0;

     label4:
        if i7 >= $i0 goto label5;

        $i2 = i1 * $i0;

        $i3 = $i2 + i7;

        $r14 = virtualinvoke $r13.<ucar.ma2.Array: java.lang.Object getObject(int)>($i3);

        $r15 = (java.lang.String) $r14;

        r1[i7] = $r15;

        i7 = i7 + 1;

        goto label4;

     label5:
        return r1;

     label6:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be String or char");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;
    }

    public ucar.ma2.StructureData getScalarStructure(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r11;
        ucar.ma2.StructureMembers$Member r0;
        ucar.ma2.StructureData $r12;
        int i0, $i1, $i2;
        java.lang.String $r9;
        ucar.ma2.DataType $r1, $r2, $r6;
        java.lang.IllegalArgumentException $r3;
        ucar.ma2.Array $r10;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        ucar.ma2.ArraySequenceNested r13;

        r13 := @this: ucar.ma2.ArraySequenceNested;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r1 != $r2 goto label1;

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r11 = (ucar.ma2.ArrayStructure) $r10;

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i2 = i0 * $i1;

        $r12 = virtualinvoke r11.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getStructureData(int)>($i2);

        return $r12;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r6 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be Structure");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    public ucar.ma2.ArrayStructure getArrayStructure(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure r11;
        ucar.ma2.StructureMembers$Member r0;
        ucar.ma2.StructureData $r16;
        ucar.ma2.ArrayStructureW $r13;
        int[] $r15;
        int $i0, i1, $i2, $i3, i4;
        java.lang.String $r9;
        ucar.ma2.StructureData[] r12;
        ucar.ma2.DataType $r1, $r2, $r6;
        java.lang.IllegalArgumentException $r3;
        ucar.ma2.Array $r10;
        ucar.ma2.StructureMembers $r14;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        ucar.ma2.ArraySequenceNested r17;

        r17 := @this: ucar.ma2.ArraySequenceNested;

        i1 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r1 != $r2 goto label3;

        $r10 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        r11 = (ucar.ma2.ArrayStructure) $r10;

        $i0 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r12 = newarray (ucar.ma2.StructureData)[$i0];

        i4 = 0;

     label1:
        if i4 >= $i0 goto label2;

        $i2 = i1 * $i0;

        $i3 = $i2 + i4;

        $r16 = virtualinvoke r11.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getStructureData(int)>($i3);

        r12[i4] = $r16;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r13 = new ucar.ma2.ArrayStructureW;

        $r14 = virtualinvoke r11.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r15 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        specialinvoke $r13.<ucar.ma2.ArrayStructureW: void <init>(ucar.ma2.StructureMembers,int[],ucar.ma2.StructureData[])>($r14, $r15, r12);

        return $r13;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r6 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be Structure");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }
}
