class org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer extends org.apache.lucene.codecs.DocValuesConsumer
{
    static final int VERSION_START;
    static final int VERSION_CURRENT;
    static final byte NUMBER;
    static final byte BYTES;
    static final byte FST;
    static final int BLOCK_SIZE;
    static final byte DELTA_COMPRESSED;
    static final byte TABLE_COMPRESSED;
    static final byte UNCOMPRESSED;
    final org.apache.lucene.store.IndexOutput data;
    final org.apache.lucene.store.IndexOutput meta;
    final int maxDoc;
    final float acceptableOverheadRatio;

    void <init>(org.apache.lucene.index.SegmentWriteState, java.lang.String, java.lang.String, java.lang.String, java.lang.String, float) throws java.io.IOException
    {
        java.lang.Throwable $r24;
        org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer r0;
        org.apache.lucene.store.Directory $r9, $r19;
        org.apache.lucene.index.SegmentWriteState r1;
        int $i0;
        java.io.Closeable[] $r23, $r25;
        java.lang.String r4, $r5, $r6, $r7, r11, r14, $r15, $r16, $r17, r21;
        org.apache.lucene.store.IOContext $r8, $r18;
        org.apache.lucene.store.IndexOutput $r10, $r12, $r20, $r22;
        org.apache.lucene.index.SegmentInfo $r2, $r3, $r13;
        float f0;

        r0 := @this: org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer;

        r1 := @parameter0: org.apache.lucene.index.SegmentWriteState;

        r11 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r21 := @parameter3: java.lang.String;

        r14 := @parameter4: java.lang.String;

        f0 := @parameter5: float;

        specialinvoke r0.<org.apache.lucene.codecs.DocValuesConsumer: void <init>()>();

        r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: float acceptableOverheadRatio> = f0;

        $r2 = r1.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: int maxDoc> = $i0;

     label1:
        $r3 = r1.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $r6 = $r3.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r5 = r1.<org.apache.lucene.index.SegmentWriteState: java.lang.String segmentSuffix>;

        $r7 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r6, $r5, r4);

        $r9 = r1.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.store.Directory directory>;

        $r8 = r1.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.store.IOContext context>;

        $r10 = virtualinvoke $r9.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String,org.apache.lucene.store.IOContext)>($r7, $r8);

        r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data> = $r10;

        $r12 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        staticinvoke <org.apache.lucene.codecs.CodecUtil: void writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>($r12, r11, 0);

        $r13 = r1.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $r16 = $r13.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r15 = r1.<org.apache.lucene.index.SegmentWriteState: java.lang.String segmentSuffix>;

        $r17 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r16, $r15, r14);

        $r19 = r1.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.store.Directory directory>;

        $r18 = r1.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.store.IOContext context>;

        $r20 = virtualinvoke $r19.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String,org.apache.lucene.store.IOContext)>($r17, $r18);

        r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta> = $r20;

        $r22 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        staticinvoke <org.apache.lucene.codecs.CodecUtil: void writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>($r22, r21, 0);

     label2:
        if 1 != 0 goto label6;

        $r23 = newarray (java.io.Closeable)[1];

        $r23[0] = r0;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r23);

        goto label6;

     label3:
        $r24 := @caughtexception;

     label4:
        if 0 != 0 goto label5;

        $r25 = newarray (java.io.Closeable)[1];

        $r25[0] = r0;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r25);

     label5:
        throw $r24;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void addNumericField(org.apache.lucene.index.FieldInfo, java.lang.Iterable) throws java.io.IOException
    {
        java.lang.Integer $r29, $r33;
        byte $b17, $b18, $b21;
        java.lang.Long $r27, $r30, $r32, $r39;
        java.lang.Object[] $r45;
        org.apache.lucene.util.packed.PackedInts$FormatAndBits $r16;
        long $l1, $l2, $l5, $l13, $l15, $l16, $l19, $l22, l24, l25;
        java.lang.Number r26, r41, r42, r49;
        org.apache.lucene.util.packed.PackedInts$Format $r18, $r21;
        org.apache.lucene.index.FieldInfo r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        float $f0;
        org.apache.lucene.util.packed.PackedInts$Writer $r23;
        org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer r0;
        java.util.HashMap $r51;
        java.lang.Iterable r7;
        java.util.HashSet r40, $r50;
        org.apache.lucene.util.packed.BlockPackedWriter $r52;
        int $i0, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i20, $i23, $i26, $i27, i28, $i29, $i30, $i31;
        org.apache.lucene.store.IndexOutput $r2, $r3, $r4, $r5, $r9, $r10, $r11, $r13, $r17, $r19, $r20, $r22, $r31, $r34, $r37, $r43, $r48;
        java.lang.Long[] $r44, $r46;
        java.util.Iterator $r8, $r14, $r24, $r35;
        java.lang.Object $r15, $r25, $r28, $r36, $r38;

        r0 := @this: org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        r7 := @parameter1: java.lang.Iterable;

        $r2 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $i0 = r1.<org.apache.lucene.index.FieldInfo: int number>;

        virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i0);

        $r3 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r3.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>(0);

        $r5 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $r4 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $l1 = virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        virtualinvoke $r5.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l1);

        l24 = 9223372036854775807L;

        l25 = -9223372036854775808L;

        $r50 = new java.util.HashSet;

        specialinvoke $r50.<java.util.HashSet: void <init>()>();

        r40 = $r50;

        $r8 = interfaceinvoke r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r38 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r41 = (java.lang.Number) $r38;

        $l22 = virtualinvoke r41.<java.lang.Number: long longValue()>();

        l24 = staticinvoke <java.lang.Math: long min(long,long)>(l24, $l22);

        l25 = staticinvoke <java.lang.Math: long max(long,long)>(l25, $l22);

        if r40 == null goto label02;

        $r39 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l22);

        $z4 = virtualinvoke r40.<java.util.HashSet: boolean add(java.lang.Object)>($r39);

        if $z4 == 0 goto label02;

        $i23 = virtualinvoke r40.<java.util.HashSet: int size()>();

        if $i23 <= 256 goto label02;

        r40 = null;

     label02:
        goto label01;

     label03:
        if r40 == null goto label12;

        $i3 = virtualinvoke r40.<java.util.HashSet: int size()>();

        $i4 = $i3 - 1;

        $l5 = (long) $i4;

        $i6 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>($l5);

        $i7 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: int maxDoc>;

        $f0 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: float acceptableOverheadRatio>;

        $r16 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$FormatAndBits fastestFormatAndBits(int,int,float)>($i7, $i6, $f0);

        $i8 = $r16.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        if $i8 != 8 goto label06;

        $b17 = l24 cmp -128L;

        $i30 = (int) $b17;

        if $i30 < 0 goto label06;

        $b18 = l25 cmp 127L;

        $i31 = (int) $b18;

        if $i31 > 0 goto label06;

        $r34 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r34.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>(2);

        $r35 = interfaceinvoke r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r36 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.lang.Number) $r36;

        $r37 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $l19 = virtualinvoke r42.<java.lang.Number: long longValue()>();

        $i20 = (int) $l19;

        $b21 = (byte) $i20;

        virtualinvoke $r37.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>($b21);

        goto label04;

     label05:
        goto label11;

     label06:
        $r43 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r43.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>(1);

        $i26 = virtualinvoke r40.<java.util.HashSet: int size()>();

        $r44 = newarray (java.lang.Long)[$i26];

        $r45 = virtualinvoke r40.<java.util.HashSet: java.lang.Object[] toArray(java.lang.Object[])>($r44);

        $r46 = (java.lang.Long[]) $r45;

        $r51 = new java.util.HashMap;

        specialinvoke $r51.<java.util.HashMap: void <init>()>();

        $r48 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $i27 = lengthof $r46;

        virtualinvoke $r48.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i27);

        i28 = 0;

     label07:
        $i29 = lengthof $r46;

        if i28 >= $i29 goto label08;

        $r31 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $r30 = $r46[i28];

        $l16 = virtualinvoke $r30.<java.lang.Long: long longValue()>();

        virtualinvoke $r31.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l16);

        $r32 = $r46[i28];

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i28);

        virtualinvoke $r51.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r33);

        i28 = i28 + 1;

        goto label07;

     label08:
        $r17 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r17.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(1);

        $r19 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $r18 = $r16.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i9 = virtualinvoke $r18.<org.apache.lucene.util.packed.PackedInts$Format: int getId()>();

        virtualinvoke $r19.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i9);

        $r20 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $i10 = $r16.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        virtualinvoke $r20.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i10);

        $r22 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $r21 = $r16.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i12 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: int maxDoc>;

        $i11 = $r16.<org.apache.lucene.util.packed.PackedInts$FormatAndBits: int bitsPerValue>;

        $r23 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>($r22, $r21, $i12, $i11, 1024);

        $r24 = interfaceinvoke r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.lang.Number) $r25;

        $l13 = virtualinvoke r26.<java.lang.Number: long longValue()>();

        $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l13);

        $r28 = virtualinvoke $r51.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r27);

        $r29 = (java.lang.Integer) $r28;

        $i14 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        $l15 = (long) $i14;

        virtualinvoke $r23.<org.apache.lucene.util.packed.PackedInts$Writer: void add(long)>($l15);

        goto label09;

     label10:
        virtualinvoke $r23.<org.apache.lucene.util.packed.PackedInts$Writer: void finish()>();

     label11:
        goto label15;

     label12:
        $r9 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r9.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>(0);

        $r10 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r10.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(1);

        $r11 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        virtualinvoke $r11.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(4096);

        $r52 = new org.apache.lucene.util.packed.BlockPackedWriter;

        $r13 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        specialinvoke $r52.<org.apache.lucene.util.packed.BlockPackedWriter: void <init>(org.apache.lucene.store.DataOutput,int)>($r13, 4096);

        $r14 = interfaceinvoke r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label13:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r49 = (java.lang.Number) $r15;

        $l2 = virtualinvoke r49.<java.lang.Number: long longValue()>();

        virtualinvoke $r52.<org.apache.lucene.util.packed.BlockPackedWriter: void add(long)>($l2);

        goto label13;

     label14:
        virtualinvoke $r52.<org.apache.lucene.util.packed.BlockPackedWriter: void finish()>();

     label15:
        return;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r9;
        org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer r0;
        java.io.Closeable[] $r2, $r5, $r10, $r13;
        int $i1;
        org.apache.lucene.store.IndexOutput $r1, $r3, $r4, $r6, $r7, $r8, $r11, $r12, $r14, $r15;

        r0 := @this: org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer;

     label1:
        $r1 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        if $r1 == null goto label2;

        $r8 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $i1 = (int) -1;

        virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i1);

     label2:
        if 1 == 0 goto label3;

        $r5 = newarray (java.io.Closeable)[2];

        $r6 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $r5[0] = $r6;

        $r7 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $r5[1] = $r7;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r5);

        goto label8;

     label3:
        $r2 = newarray (java.io.Closeable)[2];

        $r3 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $r2[0] = $r3;

        $r4 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $r2[1] = $r4;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r2);

        goto label8;

     label4:
        $r9 := @caughtexception;

     label5:
        if 0 == 0 goto label6;

        $r13 = newarray (java.io.Closeable)[2];

        $r14 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $r13[0] = $r14;

        $r15 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $r13[1] = $r15;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r13);

        goto label7;

     label6:
        $r10 = newarray (java.io.Closeable)[2];

        $r11 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $r10[0] = $r11;

        $r12 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $r10[1] = $r12;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r10);

     label7:
        throw $r9;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addBinaryField(org.apache.lucene.index.FieldInfo, java.lang.Iterable) throws java.io.IOException
    {
        byte[] $r20;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef r18, r22;
        org.apache.lucene.util.packed.MonotonicBlockPackedWriter $r14;
        org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer r0;
        long $l1, $l2, $l3, $l5, l12;
        java.lang.Iterable r5;
        int $i0, $i4, $i6, $i7, $i8, $i9, i10, i11;
        org.apache.lucene.store.IndexOutput $r2, $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r21;
        java.util.Iterator $r6, $r16;
        org.apache.lucene.index.FieldInfo r1;
        java.lang.Object $r17, $r19;

        r0 := @this: org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        r5 := @parameter1: java.lang.Iterable;

        $r2 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $i0 = r1.<org.apache.lucene.index.FieldInfo: int number>;

        virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i0);

        $r3 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r3.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>(1);

        i10 = 2147483647;

        i11 = -2147483648;

        $r4 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $l1 = virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $r6 = interfaceinvoke r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r19 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.lucene.util.BytesRef) $r19;

        $i6 = r22.<org.apache.lucene.util.BytesRef: int length>;

        i10 = staticinvoke <java.lang.Math: int min(int,int)>(i10, $i6);

        $i7 = r22.<org.apache.lucene.util.BytesRef: int length>;

        i11 = staticinvoke <java.lang.Math: int max(int,int)>(i11, $i7);

        $r21 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $r20 = r22.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i9 = r22.<org.apache.lucene.util.BytesRef: int offset>;

        $i8 = r22.<org.apache.lucene.util.BytesRef: int length>;

        virtualinvoke $r21.<org.apache.lucene.store.IndexOutput: void writeBytes(byte[],int,int)>($r20, $i9, $i8);

        goto label1;

     label2:
        $r7 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r7.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l1);

        $r9 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $r8 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $l2 = virtualinvoke $r8.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $l3 = $l2 - $l1;

        virtualinvoke $r9.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l3);

        $r10 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r10.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(i10);

        $r11 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r11.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(i11);

        if i10 == i11 goto label5;

        $r12 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r12.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(1);

        $r13 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r13.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>(4096);

        $r14 = new org.apache.lucene.util.packed.MonotonicBlockPackedWriter;

        $r15 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        specialinvoke $r14.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: void <init>(org.apache.lucene.store.DataOutput,int)>($r15, 4096);

        l12 = 0L;

        $r16 = interfaceinvoke r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.lucene.util.BytesRef) $r17;

        $i4 = r18.<org.apache.lucene.util.BytesRef: int length>;

        $l5 = (long) $i4;

        l12 = l12 + $l5;

        virtualinvoke $r14.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: void add(long)>(l12);

        goto label3;

     label4:
        virtualinvoke $r14.<org.apache.lucene.util.packed.MonotonicBlockPackedWriter: void finish()>();

     label5:
        return;
    }

    private void writeFST(org.apache.lucene.index.FieldInfo, java.lang.Iterable) throws java.io.IOException
    {
        org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer r0;
        org.apache.lucene.util.fst.PositiveIntOutputs $r6;
        long $l1, l2;
        java.lang.Iterable r10;
        org.apache.lucene.util.IntsRef $r9, $r17;
        org.apache.lucene.util.fst.Builder $r7;
        java.lang.Long $r18;
        int $i0;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r8;
        org.apache.lucene.store.IndexOutput $r2, $r3, $r4, $r5, $r13, $r14;
        boolean $z0;
        java.util.Iterator $r11;
        org.apache.lucene.util.BytesRef r16;
        org.apache.lucene.index.FieldInfo r1;
        org.apache.lucene.util.fst.FST $r12;
        java.lang.Object $r15;

        r0 := @this: org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        r10 := @parameter1: java.lang.Iterable;

        $r2 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $i0 = r1.<org.apache.lucene.index.FieldInfo: int number>;

        virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i0);

        $r3 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r3.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>(2);

        $r5 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        $r4 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        $l1 = virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        virtualinvoke $r5.<org.apache.lucene.store.IndexOutput: void writeLong(long)>($l1);

        $r6 = staticinvoke <org.apache.lucene.util.fst.PositiveIntOutputs: org.apache.lucene.util.fst.PositiveIntOutputs getSingleton(boolean)>(1);

        $r7 = new org.apache.lucene.util.fst.Builder;

        $r8 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE1>;

        specialinvoke $r7.<org.apache.lucene.util.fst.Builder: void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE,org.apache.lucene.util.fst.Outputs)>($r8, $r6);

        $r9 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r9.<org.apache.lucene.util.IntsRef: void <init>()>();

        l2 = 0L;

        $r11 = interfaceinvoke r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r16 = (org.apache.lucene.util.BytesRef) $r15;

        $r17 = staticinvoke <org.apache.lucene.util.fst.Util: org.apache.lucene.util.IntsRef toIntsRef(org.apache.lucene.util.BytesRef,org.apache.lucene.util.IntsRef)>(r16, $r9);

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        virtualinvoke $r7.<org.apache.lucene.util.fst.Builder: void add(org.apache.lucene.util.IntsRef,java.lang.Object)>($r17, $r18);

        l2 = l2 + 1L;

        goto label1;

     label2:
        $r12 = virtualinvoke $r7.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST finish()>();

        if $r12 == null goto label3;

        $r14 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput data>;

        virtualinvoke $r12.<org.apache.lucene.util.fst.FST: void save(org.apache.lucene.store.DataOutput)>($r14);

     label3:
        $r13 = r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: org.apache.lucene.store.IndexOutput meta>;

        virtualinvoke $r13.<org.apache.lucene.store.IndexOutput: void writeVLong(long)>(l2);

        return;
    }

    public void addSortedField(org.apache.lucene.index.FieldInfo, java.lang.Iterable, java.lang.Iterable) throws java.io.IOException
    {
        org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer r0;
        org.apache.lucene.index.FieldInfo r1;
        java.lang.Iterable r2, r3;

        r0 := @this: org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        r3 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: java.lang.Iterable;

        virtualinvoke r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: void addNumericField(org.apache.lucene.index.FieldInfo,java.lang.Iterable)>(r1, r2);

        specialinvoke r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: void writeFST(org.apache.lucene.index.FieldInfo,java.lang.Iterable)>(r1, r3);

        return;
    }

    public void addSortedSetField(org.apache.lucene.index.FieldInfo, java.lang.Iterable, java.lang.Iterable, java.lang.Iterable) throws java.io.IOException
    {
        org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer r0;
        org.apache.lucene.index.FieldInfo r1;
        org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer$1 $r2;
        java.lang.Iterable r3, r4, r5;

        r0 := @this: org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        r5 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: java.lang.Iterable;

        r4 := @parameter3: java.lang.Iterable;

        $r2 = new org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer$1;

        specialinvoke $r2.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer$1: void <init>(org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer,java.lang.Iterable,java.lang.Iterable)>(r0, r3, r4);

        virtualinvoke r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: void addBinaryField(org.apache.lucene.index.FieldInfo,java.lang.Iterable)>(r1, $r2);

        specialinvoke r0.<org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: void writeFST(org.apache.lucene.index.FieldInfo,java.lang.Iterable)>(r1, r5);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: byte UNCOMPRESSED> = 2;

        <org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: byte TABLE_COMPRESSED> = 1;

        <org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: byte DELTA_COMPRESSED> = 0;

        <org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: int BLOCK_SIZE> = 4096;

        <org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: byte FST> = 2;

        <org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: byte BYTES> = 1;

        <org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: byte NUMBER> = 0;

        <org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: int VERSION_CURRENT> = 0;

        <org.apache.lucene.codecs.lucene42.Lucene42DocValuesConsumer: int VERSION_START> = 0;

        return;
    }
}
