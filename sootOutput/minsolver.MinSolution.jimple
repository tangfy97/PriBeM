public final class minsolver.MinSolution extends java.lang.Object
{
    private final minsolver.MinSolution$Outcome outcome;
    private final minsolver.MinStatistics stats;
    private kodkod.instance.Instance instance;
    private final minsolver.MinProof proof;
    public final minsolver.MinSolution$MinimizationHistory minimizationHistory;
    private final int[] propositionalModel;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lminsolver/MinSolution;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <minsolver.MinSolution: boolean $assertionsDisabled> = $z1;

        return;
    }

    public int[] getPropositionalModel()
    {
        minsolver.MinSolution r0;
        int[] $r1;

        r0 := @this: minsolver.MinSolution;

        $r1 = r0.<minsolver.MinSolution: int[] propositionalModel>;

        return $r1;
    }

    private void <init>(minsolver.MinSolution$Outcome, minsolver.MinStatistics, kodkod.instance.Instance, minsolver.MinProof, minsolver.MinSolution$MinimizationHistory, int[])
    {
        minsolver.MinSolution$MinimizationHistory r6;
        minsolver.MinProof r4;
        java.lang.AssertionError $r7;
        kodkod.instance.Instance r3;
        minsolver.MinSolution r0;
        int[] r5;
        minsolver.MinStatistics r2;
        boolean $z0;
        minsolver.MinSolution$Outcome r1;

        r0 := @this: minsolver.MinSolution;

        r1 := @parameter0: minsolver.MinSolution$Outcome;

        r2 := @parameter1: minsolver.MinStatistics;

        r3 := @parameter2: kodkod.instance.Instance;

        r4 := @parameter3: minsolver.MinProof;

        r6 := @parameter4: minsolver.MinSolution$MinimizationHistory;

        r5 := @parameter5: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <minsolver.MinSolution: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        r0.<minsolver.MinSolution: minsolver.MinSolution$Outcome outcome> = r1;

        r0.<minsolver.MinSolution: minsolver.MinStatistics stats> = r2;

        r0.<minsolver.MinSolution: kodkod.instance.Instance instance> = r3;

        r0.<minsolver.MinSolution: minsolver.MinProof proof> = r4;

        r0.<minsolver.MinSolution: int[] propositionalModel> = r5;

        r0.<minsolver.MinSolution: minsolver.MinSolution$MinimizationHistory minimizationHistory> = r6;

        return;
    }

    static minsolver.MinSolution satisfiable(minsolver.MinStatistics, kodkod.instance.Instance, minsolver.MinSolution$MinimizationHistory, int[])
    {
        kodkod.instance.Instance r2;
        minsolver.MinSolution $r0;
        int[] r4;
        minsolver.MinSolution$MinimizationHistory r3;
        minsolver.MinStatistics r1;
        minsolver.MinSolution$Outcome $r5;

        r1 := @parameter0: minsolver.MinStatistics;

        r2 := @parameter1: kodkod.instance.Instance;

        r3 := @parameter2: minsolver.MinSolution$MinimizationHistory;

        r4 := @parameter3: int[];

        $r0 = new minsolver.MinSolution;

        $r5 = <minsolver.MinSolution$Outcome: minsolver.MinSolution$Outcome SATISFIABLE>;

        specialinvoke $r0.<minsolver.MinSolution: void <init>(minsolver.MinSolution$Outcome,minsolver.MinStatistics,kodkod.instance.Instance,minsolver.MinProof,minsolver.MinSolution$MinimizationHistory,int[])>($r5, r1, r2, null, r3, r4);

        return $r0;
    }

    static minsolver.MinSolution triviallySatisfiable(minsolver.MinStatistics, kodkod.instance.Instance, minsolver.MinSolution$MinimizationHistory, int[])
    {
        kodkod.instance.Instance r2;
        minsolver.MinSolution $r0;
        int[] r4;
        minsolver.MinSolution$MinimizationHistory r3;
        minsolver.MinStatistics r1;
        minsolver.MinSolution$Outcome $r5;

        r1 := @parameter0: minsolver.MinStatistics;

        r2 := @parameter1: kodkod.instance.Instance;

        r3 := @parameter2: minsolver.MinSolution$MinimizationHistory;

        r4 := @parameter3: int[];

        $r0 = new minsolver.MinSolution;

        $r5 = <minsolver.MinSolution$Outcome: minsolver.MinSolution$Outcome TRIVIALLY_SATISFIABLE>;

        specialinvoke $r0.<minsolver.MinSolution: void <init>(minsolver.MinSolution$Outcome,minsolver.MinStatistics,kodkod.instance.Instance,minsolver.MinProof,minsolver.MinSolution$MinimizationHistory,int[])>($r5, r1, r2, null, r3, r4);

        return $r0;
    }

    static minsolver.MinSolution unsatisfiable(minsolver.MinStatistics, minsolver.MinProof, minsolver.MinSolution$MinimizationHistory, int[])
    {
        minsolver.MinSolution $r0;
        int[] r4;
        minsolver.MinSolution$MinimizationHistory r3;
        minsolver.MinProof r2;
        minsolver.MinStatistics r1;
        minsolver.MinSolution$Outcome $r5;

        r1 := @parameter0: minsolver.MinStatistics;

        r2 := @parameter1: minsolver.MinProof;

        r3 := @parameter2: minsolver.MinSolution$MinimizationHistory;

        r4 := @parameter3: int[];

        $r0 = new minsolver.MinSolution;

        $r5 = <minsolver.MinSolution$Outcome: minsolver.MinSolution$Outcome UNSATISFIABLE>;

        specialinvoke $r0.<minsolver.MinSolution: void <init>(minsolver.MinSolution$Outcome,minsolver.MinStatistics,kodkod.instance.Instance,minsolver.MinProof,minsolver.MinSolution$MinimizationHistory,int[])>($r5, r1, null, r2, r3, r4);

        return $r0;
    }

    static minsolver.MinSolution triviallyUnsatisfiable(minsolver.MinStatistics, minsolver.MinProof, minsolver.MinSolution$MinimizationHistory, int[])
    {
        minsolver.MinSolution $r0;
        int[] r4;
        minsolver.MinSolution$MinimizationHistory r3;
        minsolver.MinProof r2;
        minsolver.MinStatistics r1;
        minsolver.MinSolution$Outcome $r5;

        r1 := @parameter0: minsolver.MinStatistics;

        r2 := @parameter1: minsolver.MinProof;

        r3 := @parameter2: minsolver.MinSolution$MinimizationHistory;

        r4 := @parameter3: int[];

        $r0 = new minsolver.MinSolution;

        $r5 = <minsolver.MinSolution$Outcome: minsolver.MinSolution$Outcome TRIVIALLY_UNSATISFIABLE>;

        specialinvoke $r0.<minsolver.MinSolution: void <init>(minsolver.MinSolution$Outcome,minsolver.MinStatistics,kodkod.instance.Instance,minsolver.MinProof,minsolver.MinSolution$MinimizationHistory,int[])>($r5, r1, null, r2, r3, r4);

        return $r0;
    }

    public minsolver.MinSolution$Outcome outcome()
    {
        minsolver.MinSolution r0;
        minsolver.MinSolution$Outcome $r1;

        r0 := @this: minsolver.MinSolution;

        $r1 = r0.<minsolver.MinSolution: minsolver.MinSolution$Outcome outcome>;

        return $r1;
    }

    public kodkod.instance.Instance instance()
    {
        kodkod.instance.Instance $r1;
        minsolver.MinSolution r0;

        r0 := @this: minsolver.MinSolution;

        $r1 = r0.<minsolver.MinSolution: kodkod.instance.Instance instance>;

        return $r1;
    }

    public minsolver.MinProof proof()
    {
        minsolver.MinSolution r0;
        minsolver.MinProof $r1;

        r0 := @this: minsolver.MinSolution;

        $r1 = r0.<minsolver.MinSolution: minsolver.MinProof proof>;

        return $r1;
    }

    public minsolver.MinStatistics stats()
    {
        minsolver.MinSolution r0;
        minsolver.MinStatistics $r1;

        r0 := @this: minsolver.MinSolution;

        $r1 = r0.<minsolver.MinSolution: minsolver.MinStatistics stats>;

        return $r1;
    }

    public java.lang.String toString()
    {
        minsolver.MinProof $r4, $r7;
        kodkod.instance.Instance $r3, $r8;
        minsolver.MinSolution r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r6;
        minsolver.MinStatistics $r5;
        minsolver.MinSolution$Outcome $r2;

        r1 := @this: minsolver.MinSolution;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---OUTCOME---\n");

        $r2 = r1.<minsolver.MinSolution: minsolver.MinSolution$Outcome outcome>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = r1.<minsolver.MinSolution: kodkod.instance.Instance instance>;

        if $r3 == null goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n---INSTANCE---\n");

        $r8 = r1.<minsolver.MinSolution: kodkod.instance.Instance instance>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label1:
        $r4 = r1.<minsolver.MinSolution: minsolver.MinProof proof>;

        if $r4 == null goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n---PROOF---\n");

        $r7 = r1.<minsolver.MinSolution: minsolver.MinProof proof>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n---STATS---\n");

        $r5 = r1.<minsolver.MinSolution: minsolver.MinStatistics stats>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void sanitizeToBounds(kodkod.instance.Bounds)
    {
        java.util.Iterator $r7;
        java.util.Set $r6;
        kodkod.instance.Instance $r0, $r2, $r5, $r10;
        minsolver.MinSolution r1;
        kodkod.instance.Bounds r4;
        java.lang.Object $r8;
        kodkod.instance.Universe $r3;
        kodkod.ast.Relation r9;
        boolean $z0;
        kodkod.instance.TupleSet $r11;

        r1 := @this: minsolver.MinSolution;

        r4 := @parameter0: kodkod.instance.Bounds;

        $r0 = new kodkod.instance.Instance;

        $r2 = r1.<minsolver.MinSolution: kodkod.instance.Instance instance>;

        $r3 = virtualinvoke $r2.<kodkod.instance.Instance: kodkod.instance.Universe universe()>();

        specialinvoke $r0.<kodkod.instance.Instance: void <init>(kodkod.instance.Universe)>($r3);

        $r5 = staticinvoke <minalloy.IsomorphicSolutionBuilder: kodkod.instance.Instance padInstance(kodkod.instance.Instance,kodkod.instance.Bounds)>($r0, r4);

        $r6 = virtualinvoke r4.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kodkod.ast.Relation) $r8;

        $r10 = r1.<minsolver.MinSolution: kodkod.instance.Instance instance>;

        $r11 = virtualinvoke $r10.<kodkod.instance.Instance: kodkod.instance.TupleSet tuples(kodkod.ast.Relation)>(r9);

        virtualinvoke $r5.<kodkod.instance.Instance: void add(kodkod.ast.Relation,kodkod.instance.TupleSet)>(r9, $r11);

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        r1.<minsolver.MinSolution: kodkod.instance.Instance instance> = $r5;

        return;
    }
}
