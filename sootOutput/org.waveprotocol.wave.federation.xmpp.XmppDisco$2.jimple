class org.waveprotocol.wave.federation.xmpp.XmppDisco$2 extends java.lang.Object implements com.google.common.base.Function
{
    final int val$failExpirySecs;
    final int val$successExpirySecs;
    final org.waveprotocol.wave.federation.xmpp.XmppDisco this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppDisco, int, int)
    {
        org.waveprotocol.wave.federation.xmpp.XmppDisco$2 r0;
        int i0, i1;
        org.waveprotocol.wave.federation.xmpp.XmppDisco r1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco$2;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco$2: org.waveprotocol.wave.federation.xmpp.XmppDisco this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco$2: int val$failExpirySecs> = i0;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco$2: int val$successExpirySecs> = i1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.federation.xmpp.RemoteDisco apply(java.lang.String)
    {
        org.waveprotocol.wave.federation.xmpp.XmppDisco$2 r5;
        java.util.concurrent.atomic.AtomicLong $r3;
        org.waveprotocol.wave.federation.xmpp.RemoteDisco $r4;
        java.util.Map $r1;
        int $i0, $i1;
        org.waveprotocol.wave.federation.xmpp.XmppManager $r7;
        java.lang.Object $r2;
        java.lang.String r0;
        org.waveprotocol.wave.federation.xmpp.XmppDisco $r6;

        r5 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco$2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.federation.xmpp.XmppDisco: java.util.Map statDiscoStarted>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.util.concurrent.atomic.AtomicLong) $r2;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r4 = new org.waveprotocol.wave.federation.xmpp.RemoteDisco;

        $r6 = r5.<org.waveprotocol.wave.federation.xmpp.XmppDisco$2: org.waveprotocol.wave.federation.xmpp.XmppDisco this$0>;

        $r7 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppDisco: org.waveprotocol.wave.federation.xmpp.XmppManager access$000(org.waveprotocol.wave.federation.xmpp.XmppDisco)>($r6);

        $i1 = r5.<org.waveprotocol.wave.federation.xmpp.XmppDisco$2: int val$failExpirySecs>;

        $i0 = r5.<org.waveprotocol.wave.federation.xmpp.XmppDisco$2: int val$successExpirySecs>;

        specialinvoke $r4.<org.waveprotocol.wave.federation.xmpp.RemoteDisco: void <init>(org.waveprotocol.wave.federation.xmpp.XmppManager,java.lang.String,int,int)>($r7, r0, $i1, $i0);

        return $r4;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        org.waveprotocol.wave.federation.xmpp.RemoteDisco $r3;
        org.waveprotocol.wave.federation.xmpp.XmppDisco$2 r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppDisco$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppDisco$2: org.waveprotocol.wave.federation.xmpp.RemoteDisco apply(java.lang.String)>($r2);

        return $r3;
    }
}
