public class com.google.wave.api.WaveService extends java.lang.Object
{
    public static final com.google.wave.api.ProtocolVersion PROTOCOL_VERSION;
    private static final java.lang.String JSON_MIME_TYPE;
    private static final java.lang.String OAUTH_BODY_HASH;
    private static final java.lang.String POST;
    private static final java.lang.String SHA_1;
    private static final java.lang.String UTF_8;
    public static final java.lang.String RPC_URL;
    public static final java.lang.String SANDBOX_RPC_URL;
    private static final java.util.logging.Logger LOG;
    private static final java.lang.String OPERATION_NAMESPACE;
    private static final com.google.gson.Gson SERIALIZER;
    private static final net.oauth.OAuthValidator VALIDATOR;
    private final java.util.Map consumerDataMap;
    private final java.lang.String version;
    private final com.google.wave.api.WaveService$HttpFetcher httpFetcher;

    public void <init>()
    {
        com.google.wave.api.WaveService$HttpFetcher $r1;
        com.google.wave.api.WaveService r0;

        r0 := @this: com.google.wave.api.WaveService;

        $r1 = new com.google.wave.api.WaveService$HttpFetcher;

        specialinvoke $r1.<com.google.wave.api.WaveService$HttpFetcher: void <init>()>();

        specialinvoke r0.<com.google.wave.api.WaveService: void <init>(com.google.wave.api.WaveService$HttpFetcher,java.lang.String)>($r1, null);

        return;
    }

    public void <init>(java.lang.String)
    {
        com.google.wave.api.WaveService$HttpFetcher $r1;
        java.lang.String r2;
        com.google.wave.api.WaveService r0;

        r0 := @this: com.google.wave.api.WaveService;

        r2 := @parameter0: java.lang.String;

        $r1 = new com.google.wave.api.WaveService$HttpFetcher;

        specialinvoke $r1.<com.google.wave.api.WaveService$HttpFetcher: void <init>()>();

        specialinvoke r0.<com.google.wave.api.WaveService: void <init>(com.google.wave.api.WaveService$HttpFetcher,java.lang.String)>($r1, r2);

        return;
    }

    public void <init>(com.google.wave.api.WaveService$HttpFetcher, java.lang.String)
    {
        com.google.wave.api.WaveService$HttpFetcher r2;
        com.google.wave.api.WaveService r0;
        java.util.HashMap $r1;
        java.lang.String r3;

        r0 := @this: com.google.wave.api.WaveService;

        r2 := @parameter0: com.google.wave.api.WaveService$HttpFetcher;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.google.wave.api.WaveService: java.util.Map consumerDataMap> = $r1;

        r0.<com.google.wave.api.WaveService: com.google.wave.api.WaveService$HttpFetcher httpFetcher> = r2;

        r0.<com.google.wave.api.WaveService: java.lang.String version> = r3;

        return;
    }

    public void setupOAuth(java.lang.String, java.lang.String, java.lang.String)
    {
        com.google.wave.api.WaveService r3;
        java.util.Map $r5;
        java.lang.String r0, r1, r2;
        java.lang.IllegalArgumentException $r6;
        com.google.wave.api.WaveService$ConsumerData $r4;

        r3 := @this: com.google.wave.api.WaveService;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Consumer Key, Consumer Secret and RPCServerURL have to be non-null");

        throw $r6;

     label2:
        $r5 = r3.<com.google.wave.api.WaveService: java.util.Map consumerDataMap>;

        $r4 = new com.google.wave.api.WaveService$ConsumerData;

        specialinvoke $r4.<com.google.wave.api.WaveService$ConsumerData: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        return;
    }

    public void setupOAuth(net.oauth.OAuthAccessor, java.lang.String)
    {
        net.oauth.OAuthAccessor r0;
        com.google.wave.api.WaveService r3;
        java.util.Map $r5;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r1;
        com.google.wave.api.WaveService$ConsumerData $r4;

        r3 := @this: com.google.wave.api.WaveService;

        r0 := @parameter0: net.oauth.OAuthAccessor;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Accessor and RPCServerURL have to be non-null");

        throw $r1;

     label2:
        $r5 = r3.<com.google.wave.api.WaveService: java.util.Map consumerDataMap>;

        $r4 = new com.google.wave.api.WaveService$ConsumerData;

        specialinvoke $r4.<com.google.wave.api.WaveService$ConsumerData: void <init>(net.oauth.OAuthAccessor,java.lang.String)>(r0, r2);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        return;
    }

    public void validateOAuthRequest(java.lang.String, java.util.Map, java.lang.String, java.lang.String) throws net.oauth.OAuthException
    {
        byte[] $r13, $r14, $r16;
        java.net.URISyntaxException $r49;
        java.util.Map $r2, r6;
        net.oauth.OAuth$Parameter $r37;
        com.google.wave.api.WaveService$ConsumerData r4;
        boolean $z0, $z1;
        java.util.Set $r7;
        java.util.logging.Logger $r20;
        com.google.wave.api.WaveService r0;
        java.security.NoSuchAlgorithmException $r51;
        java.lang.StringBuilder $r19, $r21, $r23, $r27, $r28, $r29, $r30, $r32, $r41, $r42, $r43;
        java.security.MessageDigest $r11;
        java.lang.String[] r54;
        java.util.ArrayList $r5;
        int i0, i1;
        java.lang.String r1, r10, r12, $r15, $r17, $r22, $r24, $r31, $r33, r36, $r39, $r44;
        net.oauth.OAuthException $r46, $r47, $r48, $r50, $r52;
        java.util.Map$Entry r53;
        java.util.Iterator $r8;
        net.oauth.OAuthValidator $r25;
        java.io.IOException $r45;
        java.lang.IllegalArgumentException $r26, $r40;
        net.oauth.OAuthAccessor $r18;
        net.oauth.OAuthMessage $r9;
        java.lang.Object $r3, $r34, $r35, $r38;

        r0 := @this: com.google.wave.api.WaveService;

        r10 := @parameter0: java.lang.String;

        r6 := @parameter1: java.util.Map;

        r12 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        $r2 = r0.<com.google.wave.api.WaveService: java.util.Map consumerDataMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.google.wave.api.WaveService$ConsumerData) $r3;

        if r4 != null goto label01;

        $r40 = new java.lang.IllegalArgumentException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There is no consumer key and secret associated with the given RPC URL ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r44);

        throw $r40;

     label01:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r7 = interfaceinvoke r6.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r34 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r53 = (java.util.Map$Entry) $r34;

        $r35 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getValue()>();

        r54 = (java.lang.String[]) $r35;

        i0 = lengthof r54;

        i1 = 0;

     label03:
        if i1 >= i0 goto label04;

        r36 = r54[i1];

        $r37 = new net.oauth.OAuth$Parameter;

        $r38 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r39 = (java.lang.String) $r38;

        specialinvoke $r37.<net.oauth.OAuth$Parameter: void <init>(java.lang.String,java.lang.String)>($r39, r36);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r37);

        i1 = i1 + 1;

        goto label03;

     label04:
        goto label02;

     label05:
        $r9 = new net.oauth.OAuthMessage;

        specialinvoke $r9.<net.oauth.OAuthMessage: void <init>(java.lang.String,java.lang.String,java.util.Collection)>("POST", r10, $r5);

     label06:
        $r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        $r13 = virtualinvoke r12.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r14 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest(byte[])>($r13);

        $r15 = new java.lang.String;

        $r16 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>($r14, 0);

        specialinvoke $r15.<java.lang.String: void <init>(byte[],java.lang.String)>($r16, "UTF-8");

        $r17 = virtualinvoke $r9.<net.oauth.OAuthMessage: java.lang.String getParameter(java.lang.String)>("oauth_body_hash");

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z1 != 0 goto label07;

        $r26 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Body hash does not match. Expected: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", provided: ");

        $r31 = virtualinvoke $r9.<net.oauth.OAuthMessage: java.lang.String getParameter(java.lang.String)>("oauth_body_hash");

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r26;

     label07:
        $r18 = virtualinvoke r4.<com.google.wave.api.WaveService$ConsumerData: net.oauth.OAuthAccessor getAccessor()>();

        $r20 = <com.google.wave.api.WaveService: java.util.logging.Logger LOG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature base string: ");

        $r22 = staticinvoke <net.oauth.signature.OAuthSignatureMethod: java.lang.String getBaseString(net.oauth.OAuthMessage)>($r9);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.util.logging.Logger: void info(java.lang.String)>($r24);

        $r25 = <com.google.wave.api.WaveService: net.oauth.OAuthValidator VALIDATOR>;

        interfaceinvoke $r25.<net.oauth.OAuthValidator: void validateMessage(net.oauth.OAuthMessage,net.oauth.OAuthAccessor)>($r9, $r18);

     label08:
        goto label13;

     label09:
        $r51 := @caughtexception;

        $r52 = new net.oauth.OAuthException;

        specialinvoke $r52.<net.oauth.OAuthException: void <init>(java.lang.String,java.lang.Throwable)>("Error validating OAuth request", $r51);

        throw $r52;

     label10:
        $r49 := @caughtexception;

        $r50 = new net.oauth.OAuthException;

        specialinvoke $r50.<net.oauth.OAuthException: void <init>(java.lang.String,java.lang.Throwable)>("Error validating OAuth request", $r49);

        throw $r50;

     label11:
        $r47 := @caughtexception;

        $r48 = new net.oauth.OAuthException;

        specialinvoke $r48.<net.oauth.OAuthException: void <init>(java.lang.String,java.lang.Throwable)>("Error validating OAuth request", $r47);

        throw $r48;

     label12:
        $r45 := @caughtexception;

        $r46 = new net.oauth.OAuthException;

        specialinvoke $r46.<net.oauth.OAuthException: void <init>(java.lang.String,java.lang.Throwable)>("Error validating OAuth request", $r45);

        throw $r46;

     label13:
        return;

        catch java.security.NoSuchAlgorithmException from label06 to label08 with label09;
        catch java.net.URISyntaxException from label06 to label08 with label10;
        catch net.oauth.OAuthException from label06 to label08 with label11;
        catch java.io.IOException from label06 to label08 with label12;
    }

    public java.util.List submit(com.google.wave.api.Wavelet, java.lang.String) throws java.io.IOException
    {
        java.util.List $r4;
        com.google.wave.api.OperationQueue $r2, $r5;
        com.google.wave.api.WaveService r0;
        java.lang.String r3;
        com.google.wave.api.Wavelet r1;

        r0 := @this: com.google.wave.api.WaveService;

        r1 := @parameter0: com.google.wave.api.Wavelet;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r1.<com.google.wave.api.Wavelet: com.google.wave.api.OperationQueue getOperationQueue()>();

        $r4 = specialinvoke r0.<com.google.wave.api.WaveService: java.util.List makeRpc(com.google.wave.api.OperationQueue,java.lang.String)>($r2, r3);

        $r5 = virtualinvoke r1.<com.google.wave.api.Wavelet: com.google.wave.api.OperationQueue getOperationQueue()>();

        virtualinvoke $r5.<com.google.wave.api.OperationQueue: void clear()>();

        return $r4;
    }

    public com.google.wave.api.Wavelet blindWavelet(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId)
    {
        com.google.wave.api.WaveService r0;
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.wave.model.id.WaveletId r2;
        com.google.wave.api.Wavelet $r3;

        r0 := @this: com.google.wave.api.WaveService;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        $r3 = virtualinvoke r0.<com.google.wave.api.WaveService: com.google.wave.api.Wavelet blindWavelet(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r1, r2, null);

        return $r3;
    }

    public com.google.wave.api.Wavelet blindWavelet(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        com.google.wave.api.WaveService r0;
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.wave.model.id.WaveletId r2;
        java.util.HashMap $r4;
        java.lang.String r3;
        com.google.wave.api.Wavelet $r5;

        r0 := @this: com.google.wave.api.WaveService;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter2: java.lang.String;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = virtualinvoke r0.<com.google.wave.api.WaveService: com.google.wave.api.Wavelet blindWavelet(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,java.lang.String,java.util.Map)>(r1, r2, r3, $r4);

        return $r5;
    }

    public com.google.wave.api.Wavelet blindWavelet(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, java.lang.String, java.util.Map)
    {
        com.google.wave.api.WaveService r0;
        org.waveprotocol.wave.model.id.WaveId r1;
        java.util.Map r4;
        org.waveprotocol.wave.model.id.WaveletId r2;
        java.util.HashMap $r5;
        java.lang.String r3;
        com.google.wave.api.Wavelet $r6;

        r0 := @this: com.google.wave.api.WaveService;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.Map;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = virtualinvoke r0.<com.google.wave.api.WaveService: com.google.wave.api.Wavelet blindWavelet(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,java.lang.String,java.util.Map,java.util.Map)>(r1, r2, r3, r4, $r5);

        return $r6;
    }

    public com.google.wave.api.Wavelet blindWavelet(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, java.lang.String, java.util.Map, java.util.Map)
    {
        org.waveprotocol.wave.model.id.WaveId r3;
        java.util.Set $r8;
        org.waveprotocol.wave.model.id.WaveletId r4;
        java.util.HashMap $r12;
        com.google.wave.api.BlipThread $r14;
        com.google.wave.api.Wavelet $r16;
        java.util.ArrayList $r13;
        com.google.wave.api.OperationQueue $r15;
        com.google.wave.api.WaveService r11;
        java.util.Map r7, r9;
        int $i1;
        java.lang.String r0;

        r11 := @this: com.google.wave.api.WaveService;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r4 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r0 := @parameter2: java.lang.String;

        r7 := @parameter3: java.util.Map;

        r9 := @parameter4: java.util.Map;

        staticinvoke <com.google.wave.api.Util: void checkIsValidProxyForId(java.lang.String)>(r0);

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        $r16 = new com.google.wave.api.Wavelet;

        $r14 = new com.google.wave.api.BlipThread;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $i1 = (int) -1;

        specialinvoke $r14.<com.google.wave.api.BlipThread: void <init>(java.lang.String,int,java.util.List,java.util.Map)>("", $i1, $r13, r7);

        $r8 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $r15 = new com.google.wave.api.OperationQueue;

        specialinvoke $r15.<com.google.wave.api.OperationQueue: void <init>(java.lang.String)>(r0);

        specialinvoke $r16.<com.google.wave.api.Wavelet: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,java.lang.String,com.google.wave.api.BlipThread,java.util.Set,java.util.Map,java.util.Map,java.util.Map,com.google.wave.api.OperationQueue)>(r3, r4, null, $r14, $r8, $r12, r7, r9, $r15);

        return $r16;
    }

    public com.google.wave.api.Wavelet newWave(java.lang.String, java.util.Set)
    {
        com.google.wave.api.WaveService r0;
        java.util.Set r2;
        java.lang.String r1;
        com.google.wave.api.Wavelet $r3;

        r0 := @this: com.google.wave.api.WaveService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        $r3 = virtualinvoke r0.<com.google.wave.api.WaveService: com.google.wave.api.Wavelet newWave(java.lang.String,java.util.Set,java.lang.String)>(r1, r2, null);

        return $r3;
    }

    public com.google.wave.api.Wavelet newWave(java.lang.String, java.util.Set, java.lang.String)
    {
        com.google.wave.api.WaveService r0;
        java.util.Set r2;
        java.lang.String r1, r3;
        com.google.wave.api.Wavelet $r4;

        r0 := @this: com.google.wave.api.WaveService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<com.google.wave.api.WaveService: com.google.wave.api.Wavelet newWave(java.lang.String,java.util.Set,java.lang.String,java.lang.String)>(r1, r2, "", r3);

        return $r4;
    }

    public com.google.wave.api.Wavelet newWave(java.lang.String, java.util.Set, java.lang.String, java.lang.String)
    {
        com.google.wave.api.OperationQueue $r1;
        com.google.wave.api.WaveService r6;
        java.util.Set r3;
        java.lang.String r0, r2, r4;
        com.google.wave.api.Wavelet $r5;

        r6 := @this: com.google.wave.api.WaveService;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Set;

        r4 := @parameter2: java.lang.String;

        r0 := @parameter3: java.lang.String;

        staticinvoke <com.google.wave.api.Util: void checkIsValidProxyForId(java.lang.String)>(r0);

        $r1 = new com.google.wave.api.OperationQueue;

        specialinvoke $r1.<com.google.wave.api.OperationQueue: void <init>(java.lang.String)>(r0);

        $r5 = virtualinvoke $r1.<com.google.wave.api.OperationQueue: com.google.wave.api.Wavelet createWavelet(java.lang.String,java.util.Set,java.lang.String)>(r2, r3, r4);

        return $r5;
    }

    public com.google.wave.api.Wavelet newWave(java.lang.String, java.util.Set, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException, org.waveprotocol.wave.model.id.InvalidIdException
    {
        com.google.wave.api.JsonRpcResponse r10;
        com.google.wave.api.Wavelet $r5, r36, $r44;
        java.util.Map $r12, $r18, $r23;
        boolean $z0, $z1;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r13, $r19, $r24;
        org.waveprotocol.wave.model.id.WaveId $r16;
        java.util.Set r3;
        com.google.wave.api.BlipThread $r43;
        java.util.List $r8;
        com.google.wave.api.WaveService r7;
        org.waveprotocol.wave.model.id.WaveletId $r22;
        java.util.HashMap $r39, $r40, $r41;
        com.google.wave.api.Blip $r45;
        java.util.ArrayList $r42;
        int $i1;
        java.lang.String r0, r2, r4, r6, $r15, $r21, r26, $r35;
        org.waveprotocol.wave.model.id.IdSerialiser $r11, $r17;
        java.io.IOException $r38;
        com.google.wave.api.OperationQueue $r37;
        java.lang.Object $r9, $r14, $r20, $r25;

        r7 := @this: com.google.wave.api.WaveService;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Set;

        r4 := @parameter2: java.lang.String;

        r0 := @parameter3: java.lang.String;

        r6 := @parameter4: java.lang.String;

        staticinvoke <com.google.wave.api.Util: void checkIsValidProxyForId(java.lang.String)>(r0);

        $r37 = new com.google.wave.api.OperationQueue;

        specialinvoke $r37.<com.google.wave.api.OperationQueue: void <init>(java.lang.String)>(r0);

        $r5 = virtualinvoke $r37.<com.google.wave.api.OperationQueue: com.google.wave.api.Wavelet createWavelet(java.lang.String,java.util.Set,java.lang.String)>(r2, r3, r4);

        r36 = $r5;

        if r6 == null goto label2;

        $z0 = virtualinvoke r6.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r8 = virtualinvoke r7.<com.google.wave.api.WaveService: java.util.List submit(com.google.wave.api.Wavelet,java.lang.String)>($r5, r6);

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(1);

        r10 = (com.google.wave.api.JsonRpcResponse) $r9;

        $z1 = virtualinvoke r10.<com.google.wave.api.JsonRpcResponse: boolean isError()>();

        if $z1 == 0 goto label1;

        $r38 = new java.io.IOException;

        $r35 = virtualinvoke r10.<com.google.wave.api.JsonRpcResponse: java.lang.String getErrorMessage()>();

        specialinvoke $r38.<java.io.IOException: void <init>(java.lang.String)>($r35);

        throw $r38;

     label1:
        $r11 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r12 = virtualinvoke r10.<com.google.wave.api.JsonRpcResponse: java.util.Map getData()>();

        $r13 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty WAVE_ID>;

        $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        $r15 = (java.lang.String) $r14;

        $r16 = interfaceinvoke $r11.<org.waveprotocol.wave.model.id.IdSerialiser: org.waveprotocol.wave.model.id.WaveId deserialiseWaveId(java.lang.String)>($r15);

        $r17 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r18 = virtualinvoke r10.<com.google.wave.api.JsonRpcResponse: java.util.Map getData()>();

        $r19 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty WAVELET_ID>;

        $r20 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        $r21 = (java.lang.String) $r20;

        $r22 = interfaceinvoke $r17.<org.waveprotocol.wave.model.id.IdSerialiser: org.waveprotocol.wave.model.id.WaveletId deserialiseWaveletId(java.lang.String)>($r21);

        $r23 = virtualinvoke r10.<com.google.wave.api.JsonRpcResponse: java.util.Map getData()>();

        $r24 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_ID>;

        $r25 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        r26 = (java.lang.String) $r25;

        $r39 = new java.util.HashMap;

        specialinvoke $r39.<java.util.HashMap: void <init>()>();

        $r40 = new java.util.HashMap;

        specialinvoke $r40.<java.util.HashMap: void <init>()>();

        $r41 = new java.util.HashMap;

        specialinvoke $r41.<java.util.HashMap: void <init>()>();

        $r42 = new java.util.ArrayList;

        specialinvoke $r42.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r42.<java.util.List: boolean add(java.lang.Object)>(r26);

        $r43 = new com.google.wave.api.BlipThread;

        $i1 = (int) -1;

        specialinvoke $r43.<com.google.wave.api.BlipThread: void <init>(java.lang.String,int,java.util.List,java.util.Map)>("", $i1, $r42, $r39);

        $r44 = new com.google.wave.api.Wavelet;

        specialinvoke $r44.<com.google.wave.api.Wavelet: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,java.lang.String,com.google.wave.api.BlipThread,java.util.Set,java.util.Map,java.util.Map,java.util.Map,com.google.wave.api.OperationQueue)>($r16, $r22, r26, $r43, r3, $r41, $r39, $r40, $r37);

        r36 = $r44;

        $r45 = new com.google.wave.api.Blip;

        specialinvoke $r45.<com.google.wave.api.Blip: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.google.wave.api.Wavelet)>(r26, "", null, "", $r44);

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, $r45);

     label2:
        return r36;
    }

    public com.google.wave.api.SearchResult search(java.lang.String, java.lang.Integer, java.lang.Integer, java.lang.String) throws java.io.IOException
    {
        com.google.wave.api.JsonRpcResponse r8;
        java.lang.Integer r2, r3;
        java.util.Map $r9;
        java.lang.String r1, r5, $r14;
        boolean $z0;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r10;
        com.google.wave.api.SearchResult r12;
        java.io.IOException $r13;
        java.util.List $r6;
        com.google.wave.api.OperationQueue $r0;
        com.google.wave.api.WaveService r4;
        java.lang.Object $r7, $r11;

        r4 := @this: com.google.wave.api.WaveService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Integer;

        r3 := @parameter2: java.lang.Integer;

        r5 := @parameter3: java.lang.String;

        $r0 = new com.google.wave.api.OperationQueue;

        specialinvoke $r0.<com.google.wave.api.OperationQueue: void <init>()>();

        virtualinvoke $r0.<com.google.wave.api.OperationQueue: void search(java.lang.String,java.lang.Integer,java.lang.Integer)>(r1, r2, r3);

        $r6 = specialinvoke r4.<com.google.wave.api.WaveService: java.util.List makeRpc(com.google.wave.api.OperationQueue,java.lang.String)>($r0, r5);

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(1);

        r8 = (com.google.wave.api.JsonRpcResponse) $r7;

        $z0 = virtualinvoke r8.<com.google.wave.api.JsonRpcResponse: boolean isError()>();

        if $z0 == 0 goto label1;

        $r13 = new java.io.IOException;

        $r14 = virtualinvoke r8.<com.google.wave.api.JsonRpcResponse: java.lang.String getErrorMessage()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label1:
        virtualinvoke $r0.<com.google.wave.api.OperationQueue: void clear()>();

        $r9 = virtualinvoke r8.<com.google.wave.api.JsonRpcResponse: java.util.Map getData()>();

        $r10 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty SEARCH_RESULTS>;

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r12 = (com.google.wave.api.SearchResult) $r11;

        return r12;
    }

    public com.google.wave.api.Wavelet fetchWavelet(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, java.lang.String) throws java.io.IOException
    {
        com.google.wave.api.WaveService r0;
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.wave.model.id.WaveletId r2;
        java.lang.String r3;
        com.google.wave.api.Wavelet $r4;

        r0 := @this: com.google.wave.api.WaveService;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<com.google.wave.api.WaveService: com.google.wave.api.Wavelet fetchWavelet(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,java.lang.String,java.lang.String)>(r1, r2, null, r3);

        return $r4;
    }

    public com.google.wave.api.Wavelet fetchWavelet(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, java.lang.String, java.lang.String) throws java.io.IOException
    {
        com.google.wave.api.JsonRpcResponse r8;
        com.google.wave.api.Wavelet $r15;
        java.util.Map $r9, $r16, r19, $r22, r42;
        boolean $z0, $z1, $z2;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r10, $r17, $r23;
        org.waveprotocol.wave.model.id.WaveId r2;
        java.util.Set $r20, $r25;
        com.google.wave.api.BlipThread $r35, r41;
        java.util.List $r6, $r37;
        com.google.wave.api.WaveService r4;
        com.google.wave.api.BlipData $r30;
        org.waveprotocol.wave.model.id.WaveletId r3;
        java.util.HashMap $r13, $r14;
        com.google.wave.api.impl.WaveletData r12;
        com.google.wave.api.Blip $r31;
        int $i0;
        java.lang.String r0, r5, $r36, $r39;
        java.util.Map$Entry r40, r43;
        java.util.Iterator $r21, $r26;
        java.io.IOException $r38;
        com.google.wave.api.OperationQueue $r1;
        java.lang.Object $r7, $r11, $r18, $r24, $r27, $r28, $r29, $r32, $r33, $r34;

        r4 := @this: com.google.wave.api.WaveService;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r3 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r0 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        staticinvoke <com.google.wave.api.Util: void checkIsValidProxyForId(java.lang.String)>(r0);

        $r1 = new com.google.wave.api.OperationQueue;

        specialinvoke $r1.<com.google.wave.api.OperationQueue: void <init>(java.lang.String)>(r0);

        virtualinvoke $r1.<com.google.wave.api.OperationQueue: void fetchWavelet(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r2, r3);

        $r6 = specialinvoke r4.<com.google.wave.api.WaveService: java.util.List makeRpc(com.google.wave.api.OperationQueue,java.lang.String)>($r1, r5);

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(1);

        r8 = (com.google.wave.api.JsonRpcResponse) $r7;

        $z0 = virtualinvoke r8.<com.google.wave.api.JsonRpcResponse: boolean isError()>();

        if $z0 == 0 goto label1;

        $r38 = new java.io.IOException;

        $r39 = virtualinvoke r8.<com.google.wave.api.JsonRpcResponse: java.lang.String getErrorMessage()>();

        specialinvoke $r38.<java.io.IOException: void <init>(java.lang.String)>($r39);

        throw $r38;

     label1:
        virtualinvoke $r1.<com.google.wave.api.OperationQueue: void clear()>();

        $r9 = virtualinvoke r8.<com.google.wave.api.JsonRpcResponse: java.util.Map getData()>();

        $r10 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty WAVELET_DATA>;

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r12 = (com.google.wave.api.impl.WaveletData) $r11;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        $r15 = staticinvoke <com.google.wave.api.Wavelet: com.google.wave.api.Wavelet deserialize(com.google.wave.api.OperationQueue,java.util.Map,java.util.Map,com.google.wave.api.impl.WaveletData)>($r1, $r13, $r14, r12);

        $r16 = virtualinvoke r8.<com.google.wave.api.JsonRpcResponse: java.util.Map getData()>();

        $r17 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty THREADS>;

        $r18 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        r19 = (java.util.Map) $r18;

        $r20 = interfaceinvoke r19.<java.util.Map: java.util.Set entrySet()>();

        $r21 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r32 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.util.Map$Entry) $r32;

        $r33 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getValue()>();

        r41 = (com.google.wave.api.BlipThread) $r33;

        $r34 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r35 = new com.google.wave.api.BlipThread;

        $r36 = virtualinvoke r41.<com.google.wave.api.BlipThread: java.lang.String getId()>();

        $i0 = virtualinvoke r41.<com.google.wave.api.BlipThread: int getLocation()>();

        $r37 = virtualinvoke r41.<com.google.wave.api.BlipThread: java.util.List getBlipIds()>();

        specialinvoke $r35.<com.google.wave.api.BlipThread: void <init>(java.lang.String,int,java.util.List,java.util.Map)>($r36, $i0, $r37, $r13);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, $r35);

        goto label2;

     label3:
        $r22 = virtualinvoke r8.<com.google.wave.api.JsonRpcResponse: java.util.Map getData()>();

        $r23 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIPS>;

        $r24 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        r42 = (java.util.Map) $r24;

        $r25 = interfaceinvoke r42.<java.util.Map: java.util.Set entrySet()>();

        $r26 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r43 = (java.util.Map$Entry) $r27;

        $r28 = interfaceinvoke r43.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r29 = interfaceinvoke r43.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r30 = (com.google.wave.api.BlipData) $r29;

        $r31 = staticinvoke <com.google.wave.api.Blip: com.google.wave.api.Blip deserialize(com.google.wave.api.OperationQueue,com.google.wave.api.Wavelet,com.google.wave.api.BlipData)>($r1, $r15, $r30);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r31);

        goto label4;

     label5:
        return $r15;
    }

    protected java.util.Map getConsumerDataMap()
    {
        com.google.wave.api.WaveService r0;
        java.util.Map $r1;

        r0 := @this: com.google.wave.api.WaveService;

        $r1 = r0.<com.google.wave.api.WaveService: java.util.Map consumerDataMap>;

        return $r1;
    }

    protected boolean hasConsumerData(java.lang.String)
    {
        com.google.wave.api.WaveService r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.google.wave.api.WaveService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.google.wave.api.WaveService: java.util.Map consumerDataMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    private java.util.List makeRpc(com.google.wave.api.OperationQueue, java.lang.String) throws java.io.IOException
    {
        byte[] $r13;
        java.util.Map $r2, $r51;
        net.oauth.ParameterStyle $r22;
        com.google.wave.api.WaveService$ConsumerData r4;
        com.google.wave.api.WaveService$HttpFetcher $r21, $r50;
        java.lang.StringBuilder $r25, $r27, $r28, $r39, $r41, $r42, $r56, $r58, $r59, $r63, $r65, $r66;
        net.oauth.client.OAuthClient $r20;
        java.util.ArrayList $r30;
        java.lang.String r0, $r6, $r11, $r24, $r29, $r36, $r38, $r43, $r60, $r67;
        net.oauth.http.HttpMessage $r44;
        net.oauth.http.HttpResponseMessage $r52;
        java.io.IOException $r61, $r68;
        net.oauth.OAuthAccessor $r14, $r37;
        net.oauth.OAuthMessage $r15, $r23;
        java.util.AbstractMap$SimpleEntry $r17, $r19, $r46, $r48;
        java.lang.IllegalStateException $r53, $r54, $r70;
        java.net.URL $r45;
        java.net.URISyntaxException $r55;
        java.io.ByteArrayInputStream $r12;
        com.google.gson.Gson $r8, $r31, $r34;
        boolean $z0, $z1;
        java.util.logging.Logger $r26, $r40, $r57, $r64;
        java.util.List $r9, $r16, $r18, $r47, $r49, r72;
        com.google.wave.api.WaveService r1;
        java.lang.reflect.Type $r10, $r33;
        com.google.wave.api.ProtocolVersion $r7;
        java.io.UnsupportedEncodingException $r69;
        net.oauth.OAuthException $r62;
        com.google.wave.api.OperationQueue r5;
        java.lang.Object $r3, $r32, $r35;
        java.io.InputStream r71;

        r1 := @this: com.google.wave.api.WaveService;

        r5 := @parameter0: com.google.wave.api.OperationQueue;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label01;

        $r54 = new java.lang.IllegalStateException;

        specialinvoke $r54.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RPC Server URL is not set up.");

        throw $r54;

     label01:
        $r2 = r1.<com.google.wave.api.WaveService: java.util.Map consumerDataMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (com.google.wave.api.WaveService$ConsumerData) $r3;

        if r4 != null goto label02;

        $r53 = new java.lang.IllegalStateException;

        specialinvoke $r53.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Consumer key, consumer secret, and  JSON-RPC server URL have to be set first, by calling AbstractRobot.setupOAuth(), before invoking AbstractRobot.submit().");

        throw $r53;

     label02:
        $r7 = <com.google.wave.api.WaveService: com.google.wave.api.ProtocolVersion PROTOCOL_VERSION>;

        $r6 = r1.<com.google.wave.api.WaveService: java.lang.String version>;

        virtualinvoke r5.<com.google.wave.api.OperationQueue: void notifyRobotInformation(com.google.wave.api.ProtocolVersion,java.lang.String)>($r7, $r6);

        $r8 = <com.google.wave.api.WaveService: com.google.gson.Gson SERIALIZER>;

        $r9 = virtualinvoke r5.<com.google.wave.api.OperationQueue: java.util.List getPendingOperations()>();

        $r10 = <com.google.wave.api.impl.GsonFactory: java.lang.reflect.Type OPERATION_REQUEST_LIST_TYPE>;

        $r11 = virtualinvoke $r8.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>($r9, $r10);

     label03:
        $r12 = new java.io.ByteArrayInputStream;

        $r13 = virtualinvoke $r11.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13);

     label04:
        goto label06;

     label05:
        $r69 := @caughtexception;

        $r70 = new java.lang.IllegalStateException;

        specialinvoke $r70.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r69);

        throw $r70;

     label06:
        $z0 = virtualinvoke r4.<com.google.wave.api.WaveService$ConsumerData: boolean isUserAuthenticated()>();

        if $z0 != 0 goto label07;

        $r36 = virtualinvoke r4.<com.google.wave.api.WaveService$ConsumerData: java.lang.String getRpcServerUrl()>();

        $r37 = virtualinvoke r4.<com.google.wave.api.WaveService$ConsumerData: net.oauth.OAuthAccessor getAccessor()>();

        $r38 = staticinvoke <com.google.wave.api.WaveService: java.lang.String createOAuthUrlString(java.lang.String,java.lang.String,net.oauth.OAuthAccessor)>($r11, $r36, $r37);

        $r40 = <com.google.wave.api.WaveService: java.util.logging.Logger LOG>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JSON request to be sent: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<java.util.logging.Logger: void info(java.lang.String)>($r43);

        $r44 = new net.oauth.http.HttpMessage;

        $r45 = new java.net.URL;

        specialinvoke $r45.<java.net.URL: void <init>(java.lang.String)>($r38);

        specialinvoke $r44.<net.oauth.http.HttpMessage: void <init>(java.lang.String,java.net.URL,java.io.InputStream)>("POST", $r45, $r12);

        $r47 = $r44.<net.oauth.http.HttpMessage: java.util.List headers>;

        $r46 = new java.util.AbstractMap$SimpleEntry;

        specialinvoke $r46.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>("Content-Type", "application/json; charset=utf-8");

        interfaceinvoke $r47.<java.util.List: boolean add(java.lang.Object)>($r46);

        $r49 = $r44.<net.oauth.http.HttpMessage: java.util.List headers>;

        $r48 = new java.util.AbstractMap$SimpleEntry;

        specialinvoke $r48.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>("oauth_version", "1.0");

        interfaceinvoke $r49.<java.util.List: boolean add(java.lang.Object)>($r48);

        $r50 = r1.<com.google.wave.api.WaveService: com.google.wave.api.WaveService$HttpFetcher httpFetcher>;

        $r51 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r52 = virtualinvoke $r50.<com.google.wave.api.WaveService$HttpFetcher: net.oauth.http.HttpResponseMessage execute(net.oauth.http.HttpMessage,java.util.Map)>($r44, $r51);

        r71 = virtualinvoke $r52.<net.oauth.http.HttpResponseMessage: java.io.InputStream getBody()>();

        goto label08;

     label07:
        $r14 = virtualinvoke r4.<com.google.wave.api.WaveService$ConsumerData: net.oauth.OAuthAccessor getAccessor()>();

        $r15 = virtualinvoke $r14.<net.oauth.OAuthAccessor: net.oauth.OAuthMessage newRequestMessage(java.lang.String,java.lang.String,java.util.Collection,java.io.InputStream)>("POST", r0, null, $r12);

        $r16 = virtualinvoke $r15.<net.oauth.OAuthMessage: java.util.List getHeaders()>();

        $r17 = new java.util.AbstractMap$SimpleEntry;

        specialinvoke $r17.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>("Content-Type", "application/json");

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = virtualinvoke $r15.<net.oauth.OAuthMessage: java.util.List getHeaders()>();

        $r19 = new java.util.AbstractMap$SimpleEntry;

        specialinvoke $r19.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>("oauth_version", "1.0");

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = new net.oauth.client.OAuthClient;

        $r21 = r1.<com.google.wave.api.WaveService: com.google.wave.api.WaveService$HttpFetcher httpFetcher>;

        specialinvoke $r20.<net.oauth.client.OAuthClient: void <init>(net.oauth.http.HttpClient)>($r21);

        $r22 = <net.oauth.ParameterStyle: net.oauth.ParameterStyle BODY>;

        $r23 = virtualinvoke $r20.<net.oauth.client.OAuthClient: net.oauth.OAuthMessage invoke(net.oauth.OAuthMessage,net.oauth.ParameterStyle)>($r15, $r22);

        r71 = virtualinvoke $r23.<net.oauth.OAuthMessage: java.io.InputStream getBodyAsStream()>();

     label08:
        $r24 = staticinvoke <com.google.wave.api.WaveService$HttpFetcher: java.lang.String readInputStream(java.io.InputStream)>(r71);

        $r26 = <com.google.wave.api.WaveService: java.util.logging.Logger LOG>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Response returned: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.util.logging.Logger: void info(java.lang.String)>($r29);

        $z1 = virtualinvoke $r24.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z1 == 0 goto label09;

        $r34 = <com.google.wave.api.WaveService: com.google.gson.Gson SERIALIZER>;

        $r33 = <com.google.wave.api.impl.GsonFactory: java.lang.reflect.Type JSON_RPC_RESPONSE_LIST_TYPE>;

        $r35 = virtualinvoke $r34.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>($r24, $r33);

        r72 = (java.util.List) $r35;

        goto label10;

     label09:
        $r30 = new java.util.ArrayList;

        specialinvoke $r30.<java.util.ArrayList: void <init>(int)>(1);

        r72 = $r30;

        $r31 = <com.google.wave.api.WaveService: com.google.gson.Gson SERIALIZER>;

        $r32 = virtualinvoke $r31.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>($r24, class "Lcom/google/wave/api/JsonRpcResponse;");

        interfaceinvoke $r30.<java.util.List: boolean add(java.lang.Object)>($r32);

     label10:
        return r72;

     label11:
        $r62 := @caughtexception;

        $r64 = <com.google.wave.api.WaveService: java.util.logging.Logger LOG>;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OAuthException when constructing the OAuth parameters: ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r62);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r64.<java.util.logging.Logger: void warning(java.lang.String)>($r67);

        $r68 = new java.io.IOException;

        specialinvoke $r68.<java.io.IOException: void <init>(java.lang.Throwable)>($r62);

        throw $r68;

     label12:
        $r55 := @caughtexception;

        $r57 = <com.google.wave.api.WaveService: java.util.logging.Logger LOG>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URISyntaxException when constructing the OAuth parameters: ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r55);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<java.util.logging.Logger: void warning(java.lang.String)>($r60);

        $r61 = new java.io.IOException;

        specialinvoke $r61.<java.io.IOException: void <init>(java.lang.Throwable)>($r55);

        throw $r61;

        catch java.io.UnsupportedEncodingException from label03 to label04 with label05;
        catch net.oauth.OAuthException from label03 to label10 with label11;
        catch java.net.URISyntaxException from label03 to label10 with label12;
    }

    public static java.lang.String createOAuthUrlString(java.lang.String, java.lang.String, net.oauth.OAuthAccessor) throws java.io.IOException, java.net.URISyntaxException, net.oauth.OAuthException
    {
        byte[] $r4, $r5, $r6;
        boolean $z0, $z1;
        java.util.logging.Logger $r10;
        java.util.List $r2, $r16;
        java.lang.StringBuilder $r9, $r11, $r13, $r15;
        java.lang.String r1, r3, $r7, $r12, $r14, $r18, $r22, $r24, $r25, $r27, $r28;
        java.util.Map$Entry r20;
        java.util.Iterator $r17;
        char c0;
        net.oauth.OAuthAccessor r8;
        net.oauth.OAuthMessage $r0;
        java.lang.Object $r19, $r21, $r23, $r26;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r8 := @parameter2: net.oauth.OAuthAccessor;

        $r0 = new net.oauth.OAuthMessage;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r0.<net.oauth.OAuthMessage: void <init>(java.lang.String,java.lang.String,java.util.Collection)>("POST", r1, $r2);

        $r4 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r5 = staticinvoke <org.apache.commons.codec.digest.DigestUtils: byte[] sha(byte[])>($r4);

        $r6 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r5);

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(byte[],java.lang.String)>($r6, "UTF-8");

        virtualinvoke $r0.<net.oauth.OAuthMessage: void addParameter(java.lang.String,java.lang.String)>("oauth_body_hash", $r7);

        virtualinvoke $r0.<net.oauth.OAuthMessage: void addRequiredParameters(net.oauth.OAuthAccessor)>(r8);

        $r10 = <com.google.wave.api.WaveService: java.util.logging.Logger LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature base string: ");

        $r12 = staticinvoke <net.oauth.signature.OAuthSignatureMethod: java.lang.String getBaseString(net.oauth.OAuthMessage)>($r0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void info(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        c0 = 63;

        $r16 = virtualinvoke $r0.<net.oauth.OAuthMessage: java.util.List getParameters()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r19 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.util.Map$Entry) $r19;

        $r21 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = (java.lang.String) $r21;

        $z1 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r23 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (java.lang.String) $r23;

        $r25 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r24, "UTF-8");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r26 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r27 = (java.lang.String) $r26;

        $r28 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r27, "UTF-8");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        c0 = 38;

     label2:
        goto label1;

     label3:
        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;
    }

    static void <clinit>()
    {
        com.google.wave.api.impl.GsonFactory $r4;
        net.oauth.SimpleOAuthValidator $r6;
        com.google.gson.Gson $r5;
        com.google.wave.api.ProtocolVersion $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.util.logging.Logger $r3;

        <com.google.wave.api.WaveService: java.lang.String OPERATION_NAMESPACE> = "wave";

        <com.google.wave.api.WaveService: java.lang.String SANDBOX_RPC_URL> = "https://www-opensocial-sandbox.googleusercontent.com/api/rpc";

        <com.google.wave.api.WaveService: java.lang.String RPC_URL> = "https://www-opensocial.googleusercontent.com/api/rpc";

        <com.google.wave.api.WaveService: java.lang.String UTF_8> = "UTF-8";

        <com.google.wave.api.WaveService: java.lang.String SHA_1> = "SHA-1";

        <com.google.wave.api.WaveService: java.lang.String POST> = "POST";

        <com.google.wave.api.WaveService: java.lang.String OAUTH_BODY_HASH> = "oauth_body_hash";

        <com.google.wave.api.WaveService: java.lang.String JSON_MIME_TYPE> = "application/json; charset=utf-8";

        $r0 = <com.google.wave.api.ProtocolVersion: com.google.wave.api.ProtocolVersion DEFAULT>;

        <com.google.wave.api.WaveService: com.google.wave.api.ProtocolVersion PROTOCOL_VERSION> = $r0;

        $r1 = class "Lcom/google/wave/api/WaveService;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        <com.google.wave.api.WaveService: java.util.logging.Logger LOG> = $r3;

        $r4 = new com.google.wave.api.impl.GsonFactory;

        specialinvoke $r4.<com.google.wave.api.impl.GsonFactory: void <init>()>();

        $r5 = virtualinvoke $r4.<com.google.wave.api.impl.GsonFactory: com.google.gson.Gson create(java.lang.String)>("wave");

        <com.google.wave.api.WaveService: com.google.gson.Gson SERIALIZER> = $r5;

        $r6 = new net.oauth.SimpleOAuthValidator;

        specialinvoke $r6.<net.oauth.SimpleOAuthValidator: void <init>()>();

        <com.google.wave.api.WaveService: net.oauth.OAuthValidator VALIDATOR> = $r6;

        return;
    }
}
