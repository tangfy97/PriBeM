public abstract class org.apache.batik.dom.AbstractCharacterData extends org.apache.batik.dom.AbstractChildNode implements org.w3c.dom.CharacterData
{
    protected java.lang.String nodeValue;

    public void <init>()
    {
        org.apache.batik.dom.AbstractCharacterData r0;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        specialinvoke r0.<org.apache.batik.dom.AbstractChildNode: void <init>()>();

        r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue> = "";

        return;
    }

    public java.lang.String getNodeValue() throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractCharacterData r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        $r1 = r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue>;

        return $r1;
    }

    public void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r7;
        org.apache.batik.dom.AbstractCharacterData r0;
        java.lang.Integer $r12;
        org.apache.batik.dom.AbstractParentNode $r6;
        short $s0;
        org.w3c.dom.Node $r4, $r5;
        org.w3c.dom.DOMException $r10;
        int $i1;
        java.lang.String r1, r2, $r3, $r9, $r11;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        r2 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r7 = newarray (java.lang.Object)[2];

        $r12 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r12.<java.lang.Integer: void <init>(int)>($i1);

        $r7[0] = $r12;

        $r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r7[1] = $r9;

        $r10 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r7);

        throw $r10;

     label1:
        r1 = r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue>;

        if r2 != null goto label2;

        $r11 = "";

        goto label3;

     label2:
        $r11 = r2;

     label3:
        r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue> = $r11;

        $r3 = r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue>;

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: void fireDOMCharacterDataModifiedEvent(java.lang.String,java.lang.String)>(r1, $r3);

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractChildNode: org.w3c.dom.Node getParentNode()>();

        if $r4 == null goto label4;

        $r5 = virtualinvoke r0.<org.apache.batik.dom.AbstractChildNode: org.w3c.dom.Node getParentNode()>();

        $r6 = (org.apache.batik.dom.AbstractParentNode) $r5;

        virtualinvoke $r6.<org.apache.batik.dom.AbstractParentNode: void fireDOMSubtreeModifiedEvent()>();

     label4:
        return;
    }

    public java.lang.String getData() throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractCharacterData r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String getNodeValue()>();

        return $r1;
    }

    public void setData(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractCharacterData r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void setNodeValue(java.lang.String)>(r1);

        return;
    }

    public int getLength()
    {
        org.apache.batik.dom.AbstractCharacterData r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        $r1 = r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i0;
    }

    public java.lang.String substringData(int, int) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractCharacterData r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void checkOffsetCount(int,int)>(i0, i1);

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String getNodeValue()>();

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = i0 + i1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i4);

        return $r2;
    }

    public void appendData(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r7;
        org.apache.batik.dom.AbstractCharacterData r0;
        java.lang.Integer $r12;
        short $s0;
        java.lang.StringBuffer $r3, $r5, $r13;
        org.w3c.dom.DOMException $r10;
        int $i1;
        java.lang.String $r2, r4, $r6, $r9, $r11;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        r4 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r7 = newarray (java.lang.Object)[2];

        $r12 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i1 = (int) $s0;

        specialinvoke $r12.<java.lang.Integer: void <init>(int)>($i1);

        $r7[0] = $r12;

        $r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r7[1] = $r9;

        $r10 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r7);

        throw $r10;

     label1:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String getNodeValue()>();

        $r3 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        if r4 != null goto label2;

        $r11 = "";

        goto label3;

     label2:
        $r11 = r4;

     label3:
        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void setNodeValue(java.lang.String)>($r6);

        return;
    }

    public void insertData(int, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r1, $r13;
        org.apache.batik.dom.AbstractCharacterData r0;
        java.lang.Integer $r17, $r18;
        short $s3;
        java.lang.StringBuffer $r7, $r9, $r11, $r19;
        org.w3c.dom.DOMException $r3, $r16;
        int i0, $i1, $i2, $i4;
        java.lang.String $r4, $r6, r8, $r10, $r12, $r15;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r13 = newarray (java.lang.Object)[2];

        $r17 = new java.lang.Integer;

        $s3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i4 = (int) $s3;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i4);

        $r13[0] = $r17;

        $r15 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r13[1] = $r15;

        $r16 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r13);

        throw $r16;

     label1:
        if i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: int getLength()>();

        if i0 <= $i1 goto label3;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $r18 = new java.lang.Integer;

        specialinvoke $r18.<java.lang.Integer: void <init>(int)>(i0);

        $r1[0] = $r18;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(1, "offset", $r1);

        throw $r3;

     label3:
        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String getNodeValue()>();

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r7 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r10 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(i0, $i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void setNodeValue(java.lang.String)>($r12);

        return;
    }

    public void deleteData(int, int) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r8;
        org.apache.batik.dom.AbstractCharacterData r0;
        java.lang.Integer $r12;
        short $s6;
        java.lang.StringBuffer $r4, $r6, $r13;
        org.w3c.dom.DOMException $r11;
        int i0, i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.String $r1, $r3, $r5, $r7, $r10;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r8 = newarray (java.lang.Object)[2];

        $r12 = new java.lang.Integer;

        $s6 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i7 = (int) $s6;

        specialinvoke $r12.<java.lang.Integer: void <init>(int)>($i7);

        $r8[0] = $r12;

        $r10 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r8[1] = $r10;

        $r11 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r8);

        throw $r11;

     label1:
        virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void checkOffsetCount(int,int)>(i0, i1);

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String getNodeValue()>();

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = i0 + i1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $i5 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i4, $i5);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void setNodeValue(java.lang.String)>($r7);

        return;
    }

    public void replaceData(int, int, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r10;
        org.apache.batik.dom.AbstractCharacterData r0;
        java.lang.Integer $r14;
        short $s6;
        java.lang.StringBuffer $r4, $r6, $r8, $r15;
        org.w3c.dom.DOMException $r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.String $r1, $r3, r5, $r7, $r9, $r12;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r10 = newarray (java.lang.Object)[2];

        $r14 = new java.lang.Integer;

        $s6 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i7 = (int) $s6;

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i7);

        $r10[0] = $r14;

        $r12 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r10[1] = $r12;

        $r13 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r10);

        throw $r13;

     label1:
        virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void checkOffsetCount(int,int)>(i0, i1);

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String getNodeValue()>();

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r4 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = i0 + i1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $i5 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i4, $i5);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: void setNodeValue(java.lang.String)>($r9);

        return;
    }

    protected void checkOffsetCount(int, int) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r1, $r4;
        org.apache.batik.dom.AbstractCharacterData r0;
        java.lang.Integer $r2, $r5;
        org.w3c.dom.DOMException $r3, $r6;
        int i0, $i1, i2;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 < 0 goto label1;

        $i1 = virtualinvoke r0.<org.apache.batik.dom.AbstractCharacterData: int getLength()>();

        if i0 < $i1 goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        $r1[0] = $r2;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(1, "offset", $r1);

        throw $r3;

     label2:
        if i2 >= 0 goto label3;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(i2);

        $r4[0] = $r5;

        $r6 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(1, "negative.count", $r4);

        throw $r6;

     label3:
        return;
    }

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractCharacterData r0, r3;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractCharacterData) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue>;

        r3.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue> = $r4;

        return r1;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractCharacterData r0, r3;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractCharacterData) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue>;

        r3.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue> = $r4;

        return r1;
    }

    protected org.w3c.dom.Node copyInto(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractCharacterData r0, r2;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractCharacterData) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue>;

        r2.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue> = $r3;

        return r1;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractCharacterData r0, r2;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractCharacterData;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractCharacterData) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue>;

        r2.<org.apache.batik.dom.AbstractCharacterData: java.lang.String nodeValue> = $r3;

        return r1;
    }
}
