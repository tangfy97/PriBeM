class org.waveprotocol.wave.model.conversation.WaveletBasedConversation$2 extends java.lang.Object implements org.waveprotocol.wave.model.conversation.ObservableManifest$Listener
{
    final org.waveprotocol.wave.model.conversation.WaveletBasedConversation this$0;

    void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversation)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$2 r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$2;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversation;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$2: org.waveprotocol.wave.model.conversation.WaveletBasedConversation this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onAnchorChanged(org.waveprotocol.wave.model.conversation.AnchorData, org.waveprotocol.wave.model.conversation.AnchorData)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation$2 r0;
        org.waveprotocol.wave.model.conversation.AnchorData r1, r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversation$2;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.AnchorData;

        r2 := @parameter1: org.waveprotocol.wave.model.conversation.AnchorData;

        $r3 = r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversation$2: org.waveprotocol.wave.model.conversation.WaveletBasedConversation this$0>;

        staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: void access$1700(org.waveprotocol.wave.model.conversation.WaveletBasedConversation,org.waveprotocol.wave.model.conversation.AnchorData,org.waveprotocol.wave.model.conversation.AnchorData)>($r3, r1, r2);

        return;
    }
}
