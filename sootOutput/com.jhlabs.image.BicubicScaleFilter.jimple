public class com.jhlabs.image.BicubicScaleFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private int width;
    private int height;

    public void <init>()
    {
        com.jhlabs.image.BicubicScaleFilter r0;

        r0 := @this: com.jhlabs.image.BicubicScaleFilter;

        specialinvoke r0.<com.jhlabs.image.BicubicScaleFilter: void <init>(int,int)>(32, 32);

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        com.jhlabs.image.BicubicScaleFilter r0;

        r0 := @this: com.jhlabs.image.BicubicScaleFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.BicubicScaleFilter: int width> = i0;

        r0.<com.jhlabs.image.BicubicScaleFilter: int height> = i1;

        return;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r0, $r6, r8;
        com.jhlabs.image.BicubicScaleFilter r4;
        java.awt.image.ColorModel $r5;
        java.awt.Graphics2D $r1;
        java.awt.RenderingHints$Key $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;
        java.awt.image.WritableRaster $r7;
        boolean $z0;

        r4 := @this: com.jhlabs.image.BicubicScaleFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r8 := @parameter1: java.awt.image.BufferedImage;

        virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r8 != null goto label1;

        $r5 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r6 = new java.awt.image.BufferedImage;

        $i3 = r4.<com.jhlabs.image.BicubicScaleFilter: int width>;

        $i2 = r4.<com.jhlabs.image.BicubicScaleFilter: int height>;

        $r7 = virtualinvoke $r5.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i3, $i2);

        $z0 = virtualinvoke $r5.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r6.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r5, $r7, $z0, null);

        r8 = $r6;

     label1:
        $r1 = virtualinvoke r8.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r3 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r2 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BICUBIC>;

        virtualinvoke $r1.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r3, $r2);

        $i1 = r4.<com.jhlabs.image.BicubicScaleFilter: int width>;

        $i0 = r4.<com.jhlabs.image.BicubicScaleFilter: int height>;

        virtualinvoke $r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>(r0, 0, 0, $i1, $i0, null);

        virtualinvoke $r1.<java.awt.Graphics: void dispose()>();

        return r8;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.BicubicScaleFilter r0;

        r0 := @this: com.jhlabs.image.BicubicScaleFilter;

        return "Distort/Bicubic Scale";
    }
}
