public final class org.codehaus.jackson.util.TokenBuffer$Parser extends org.codehaus.jackson.JsonParser
{
    protected org.codehaus.jackson.ObjectCodec _codec;
    protected org.codehaus.jackson.util.TokenBuffer$Segment _segment;
    protected int _segmentPtr;
    protected org.codehaus.jackson.impl.JsonReadContext _parsingContext;
    protected boolean _closed;
    protected transient org.codehaus.jackson.util.ByteArrayBuilder _byteBuilder;
    protected org.codehaus.jackson.JsonLocation _location;
    private static final int INT_SPACE;

    public void <init>(org.codehaus.jackson.util.TokenBuffer$Segment, org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.util.TokenBuffer$Segment r1;
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.impl.JsonReadContext $r3;
        org.codehaus.jackson.ObjectCodec r2;
        int $i1, $i3, $i5;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        r1 := @parameter0: org.codehaus.jackson.util.TokenBuffer$Segment;

        r2 := @parameter1: org.codehaus.jackson.ObjectCodec;

        specialinvoke r0.<org.codehaus.jackson.JsonParser: void <init>()>();

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonLocation _location> = null;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment> = r1;

        $i1 = (int) -1;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr> = $i1;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.ObjectCodec _codec> = r2;

        $i3 = (int) -1;

        $i5 = (int) -1;

        $r3 = staticinvoke <org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createRootContext(int,int)>($i3, $i5);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r3;

        return;
    }

    public void setLocation(org.codehaus.jackson.JsonLocation)
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonLocation r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        r1 := @parameter0: org.codehaus.jackson.JsonLocation;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonLocation _location> = r1;

        return;
    }

    public org.codehaus.jackson.ObjectCodec getCodec()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.ObjectCodec $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.ObjectCodec _codec>;

        return $r1;
    }

    public void setCodec(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.ObjectCodec r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.ObjectCodec _codec> = r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $z0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: boolean _closed>;

        if $z0 != 0 goto label1;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: boolean _closed> = 1;

     label1:
        return;
    }

    public org.codehaus.jackson.JsonToken nextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r16, $r17, $r28;
        org.codehaus.jackson.impl.JsonReadContext $r12, $r13, $r14, $r15, $r18, $r19, $r20, $r21, $r22;
        boolean $z0;
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.util.TokenBuffer$Segment $r1, $r2, $r25, $r26, $r27;
        int $i0, $i1, $i2, $i4, $i6, $i8, $i10, $i12, $i14;
        java.lang.String $r24;
        java.lang.Object $r23;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $z0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: boolean _closed>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        if $r1 != null goto label2;

     label1:
        return null;

     label2:
        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr> = $i1;

        if $i1 < 16 goto label3;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr> = 0;

        $r25 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        $r26 = virtualinvoke $r25.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment next()>();

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment> = $r26;

        $r27 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        if $r27 != null goto label3;

        return null;

     label3:
        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        $i2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.JsonToken type(int)>($i2);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken> = $r3;

        $r5 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r5 != $r4 goto label4;

        $r22 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r23 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $r24 = (java.lang.String) $r23;

        virtualinvoke $r22.<org.codehaus.jackson.impl.JsonReadContext: void setCurrentName(java.lang.String)>($r24);

        goto label8;

     label4:
        $r7 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r7 != $r6 goto label5;

        $r20 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $i4 = (int) -1;

        $i6 = (int) -1;

        $r21 = virtualinvoke $r20.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildObjectContext(int,int)>($i4, $i6);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r21;

        goto label8;

     label5:
        $r9 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r8 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r9 != $r8 goto label6;

        $r18 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $i8 = (int) -1;

        $i10 = (int) -1;

        $r19 = virtualinvoke $r18.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildArrayContext(int,int)>($i8, $i10);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r19;

        goto label8;

     label6:
        $r11 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r10 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        if $r11 == $r10 goto label7;

        $r17 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r16 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r17 != $r16 goto label8;

     label7:
        $r12 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext getParent()>();

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r13;

        $r14 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        if $r14 != null goto label8;

        $i12 = (int) -1;

        $i14 = (int) -1;

        $r15 = staticinvoke <org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createRootContext(int,int)>($i12, $i14);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r15;

     label8:
        $r28 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        return $r28;
    }

    public org.codehaus.jackson.JsonParser skipChildren() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r6;
        int[] $r3;
        int $i0, $i1, i2, $i4;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r2 == $r1 goto label1;

        $r5 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r5 == $r4 goto label1;

        return r0;

     label1:
        i2 = 1;

     label2:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken nextToken()>();

        if $r6 != null goto label3;

        return r0;

     label3:
        $r3 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $i0 = virtualinvoke $r6.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label4:
        i2 = i2 + 1;

        goto label6;

     label5:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 != 0 goto label6;

        return r0;

     label6:
        goto label2;
    }

    public boolean isClosed()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $z0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: boolean _closed>;

        return $z0;
    }

    public org.codehaus.jackson.JsonStreamContext getParsingContext()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.impl.JsonReadContext $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        return $r1;
    }

    public org.codehaus.jackson.JsonLocation getTokenLocation()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonLocation $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonLocation getCurrentLocation()>();

        return $r1;
    }

    public org.codehaus.jackson.JsonLocation getCurrentLocation()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonLocation $r1, $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonLocation _location>;

        if $r1 != null goto label1;

        $r2 = <org.codehaus.jackson.JsonLocation: org.codehaus.jackson.JsonLocation NA>;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonLocation _location>;

     label2:
        return $r2;
    }

    public java.lang.String getCurrentName()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.String $r2;
        org.codehaus.jackson.impl.JsonReadContext $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getCurrentName()>();

        return $r2;
    }

    public java.lang.String getText()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonToken $r1, $r2, $r7;
        int[] $r3;
        int $i0, $i1;
        java.lang.Object $r4, $r5;
        java.lang.String $r6, $r8, $r9;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label6;

        $r3 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label5;
        };

     label1:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $r6 = (java.lang.String) $r5;

        return $r6;

     label2:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        if $r4 != null goto label3;

        $r9 = null;

        goto label4;

     label3:
        $r9 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

     label4:
        return $r9;

     label5:
        $r7 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.JsonToken: java.lang.String asString()>();

        return $r8;

     label6:
        return null;
    }

    public char[] getTextCharacters()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.String getText()>();

        if $r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

     label2:
        return $r2;
    }

    public int getTextLength()
    {
        int $i0;
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.String getText()>();

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

     label2:
        return $i0;
    }

    public int getTextOffset()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        return 0;
    }

    public java.math.BigInteger getBigIntegerValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        long $l2;
        org.codehaus.jackson.JsonParser$NumberType $r3;
        java.math.BigDecimal $r4;
        int[] $r2;
        int $i0, $i1;
        java.math.BigInteger $r5, $r6, $r7;
        java.lang.Number $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $z0 = $r1 instanceof java.math.BigInteger;

        if $z0 == 0 goto label1;

        $r7 = (java.math.BigInteger) $r1;

        return $r7;

     label1:
        $r2 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i0 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser$NumberType: int ordinal()>();

        $i1 = $r2[$i0];

        lookupswitch($i1)
        {
            case 3: goto label2;
            default: goto label3;
        };

     label2:
        $r4 = (java.math.BigDecimal) $r1;

        $r5 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        return $r5;

     label3:
        $l2 = virtualinvoke $r1.<java.lang.Number: long longValue()>();

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        return $r6;
    }

    public java.math.BigDecimal getDecimalValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        long $l2;
        org.codehaus.jackson.JsonParser$NumberType $r3;
        java.math.BigDecimal $r4, $r6, $r7, $r8;
        int[] $r2;
        int $i0, $i1;
        java.math.BigInteger $r5;
        java.lang.Number $r1;
        boolean $z0;
        double $d0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $z0 = $r1 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label1;

        $r8 = (java.math.BigDecimal) $r1;

        return $r8;

     label1:
        $r2 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i0 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser$NumberType: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label2;
            default: goto label4;
        };

     label2:
        $l2 = virtualinvoke $r1.<java.lang.Number: long longValue()>();

        $r6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l2);

        return $r6;

     label3:
        $r4 = new java.math.BigDecimal;

        $r5 = (java.math.BigInteger) $r1;

        specialinvoke $r4.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r5);

        return $r4;

     label4:
        $d0 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        $r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($d0);

        return $r7;
    }

    public double getDoubleValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.Number $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $d0 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public float getFloatValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        float $f0;
        java.lang.Number $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $f0 = virtualinvoke $r1.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    public int getIntValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        int $i0;
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.Number $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $i0 = virtualinvoke $r1.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public long getLongValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        long $l0;
        java.lang.Number $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $l0 = virtualinvoke $r1.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public org.codehaus.jackson.JsonParser$NumberType getNumberType() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonParser$NumberType $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.Number $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $z0 = $r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r7 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType INT>;

        return $r7;

     label1:
        $z1 = $r1 instanceof java.lang.Long;

        if $z1 == 0 goto label2;

        $r6 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType LONG>;

        return $r6;

     label2:
        $z2 = $r1 instanceof java.lang.Double;

        if $z2 == 0 goto label3;

        $r5 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType DOUBLE>;

        return $r5;

     label3:
        $z3 = $r1 instanceof java.math.BigDecimal;

        if $z3 == 0 goto label4;

        $r4 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_DECIMAL>;

        return $r4;

     label4:
        $z4 = $r1 instanceof java.lang.Float;

        if $z4 == 0 goto label5;

        $r3 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType FLOAT>;

        return $r3;

     label5:
        $z5 = $r1 instanceof java.math.BigInteger;

        if $z5 == 0 goto label6;

        $r2 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_INTEGER>;

        return $r2;

     label6:
        return null;
    }

    public final java.lang.Number getNumberValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.Object $r1;
        java.lang.Number $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _checkIsNumber()>();

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $r2 = (java.lang.Number) $r1;

        return $r2;
    }

    public java.lang.Object getEmbeddedObject()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonToken $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r2 != $r1 goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        return $r3;

     label1:
        return null;
    }

    public byte[] getBinaryValue(org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r7, $r17, $r18;
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4, $r11;
        org.codehaus.jackson.Base64Variant r6;
        java.lang.String $r5, $r14;
        boolean $z0;
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonParseException $r15;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;
        java.lang.Object $r16;
        org.codehaus.jackson.util.ByteArrayBuilder $r8, r19;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        r6 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r2 != $r1 goto label1;

        $r16 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $z0 = $r16 instanceof byte[];

        if $z0 == 0 goto label1;

        $r17 = (byte[]) $r16;

        $r18 = (byte[]) $r17;

        return $r18;

     label1:
        $r4 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r4 == $r3 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r11 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r14);

        throw $r15;

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.String getText()>();

        if $r5 != null goto label3;

        return null;

     label3:
        r19 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.ByteArrayBuilder _byteBuilder>;

        if r19 != null goto label4;

        $r8 = new org.codehaus.jackson.util.ByteArrayBuilder;

        specialinvoke $r8.<org.codehaus.jackson.util.ByteArrayBuilder: void <init>(int)>(100);

        r19 = $r8;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.ByteArrayBuilder _byteBuilder> = $r8;

     label4:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _decodeBase64(java.lang.String,org.codehaus.jackson.util.ByteArrayBuilder,org.codehaus.jackson.Base64Variant)>($r5, r19, r6);

        $r7 = virtualinvoke r19.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] toByteArray()>();

        return $r7;
    }

    protected void _decodeBase64(java.lang.String, org.codehaus.jackson.util.ByteArrayBuilder, org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.Base64Variant r1;
        boolean $z0;
        org.codehaus.jackson.util.TokenBuffer$Parser r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;
        int $i0, $i1, $i3, $i5, $i6, $i8, $i9, $i11, $i12, $i13, $i16, $i17, i18, i19, i20, i21, i22, $i23, $i25, $i27;
        java.lang.String r0, $r8;
        char $c2, $c4, $c7, $c10, $c14, $c15;
        org.codehaus.jackson.util.ByteArrayBuilder r2;

        r3 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.jackson.util.ByteArrayBuilder;

        r1 := @parameter2: org.codehaus.jackson.Base64Variant;

        i18 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

     label01:
        if i18 >= $i0 goto label16;

     label02:
        $i1 = i18;

        i18 = i18 + 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        if i18 < $i0 goto label03;

        goto label16;

     label03:
        $i23 = (int) $c2;

        if $i23 <= 32 goto label02;

        $i3 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c2);

        if $i3 >= 0 goto label04;

        virtualinvoke r3.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, $c2, 0, null);

     label04:
        if i18 < $i0 goto label05;

        virtualinvoke r3.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportBase64EOF()>();

     label05:
        i19 = i18 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i18);

        $i5 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c4);

        if $i5 >= 0 goto label06;

        virtualinvoke r3.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, $c4, 1, null);

     label06:
        $i6 = $i3 << 6;

        $i17 = $i6 | $i5;

        if i19 < $i0 goto label07;

        virtualinvoke r3.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportBase64EOF()>();

     label07:
        i20 = i19 + 1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i19);

        $i8 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c7);

        if $i8 >= 0 goto label11;

        $i25 = (int) -2;

        if $i8 == $i25 goto label08;

        virtualinvoke r3.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, $c7, 2, null);

     label08:
        if i20 < $i0 goto label09;

        virtualinvoke r3.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportBase64EOF()>();

     label09:
        i18 = i20 + 1;

        $c14 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i20);

        $z0 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(char)>($c14);

        if $z0 != 0 goto label10;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected padding character \'");

        $c15 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c15);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, $c14, 3, $r8);

     label10:
        $i16 = $i17 >> 4;

        virtualinvoke r2.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>($i16);

        goto label01;

     label11:
        $i9 = $i17 << 6;

        i21 = $i9 | $i8;

        if i20 < $i0 goto label12;

        virtualinvoke r3.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportBase64EOF()>();

     label12:
        i18 = i20 + 1;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i20);

        $i11 = virtualinvoke r1.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c10);

        if $i11 >= 0 goto label14;

        $i27 = (int) -2;

        if $i11 == $i27 goto label13;

        virtualinvoke r3.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>(r1, $c10, 3, null);

     label13:
        $i13 = i21 >> 2;

        virtualinvoke r2.<org.codehaus.jackson.util.ByteArrayBuilder: void appendTwoBytes(int)>($i13);

        goto label15;

     label14:
        $i12 = i21 << 6;

        i22 = $i12 | $i11;

        virtualinvoke r2.<org.codehaus.jackson.util.ByteArrayBuilder: void appendThreeBytes(int)>(i22);

     label15:
        goto label01;

     label16:
        return;
    }

    protected final java.lang.Object _currentObject()
    {
        org.codehaus.jackson.util.TokenBuffer$Segment $r1;
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TokenBuffer$Segment: java.lang.Object get(int)>($i0);

        return $r2;
    }

    protected void _checkIsNumber() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonToken $r1, $r4, $r9;
        org.codehaus.jackson.JsonParseException $r8;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label1;

        $r9 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $z0 = virtualinvoke $r9.<org.codehaus.jackson.JsonToken: boolean isNumeric()>();

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r4 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not numeric, can not use numeric value accessors");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r7);

        throw $r8;

     label2:
        return;
    }

    protected void _reportInvalidBase64(org.codehaus.jackson.Base64Variant, char, int, java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.Base64Variant r0;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.util.TokenBuffer$Parser r7;
        java.lang.StringBuilder $r2, $r4, $r5, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r27, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r3, r6, $r17, $r28, r33;
        char c0, $c1;
        org.codehaus.jackson.JsonParseException $r8;

        r7 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        r0 := @parameter0: org.codehaus.jackson.Base64Variant;

        c0 := @parameter1: char;

        i2 := @parameter2: int;

        r6 := @parameter3: java.lang.String;

        $i5 = (int) c0;

        if $i5 > 32 goto label1;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal white space character (code 0x");

        $i6 = (int) c0;

        $r28 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") as character #");

        $i4 = i2 + 1;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: can only used between units");

        r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(char)>(c0);

        if $z0 == 0 goto label2;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected padding character (\'");

        $c1 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') as character #");

        $i3 = i2 + 1;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        r33 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label2:
        $z1 = staticinvoke <java.lang.Character: boolean isDefined(char)>(c0);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c0);

        if $z2 == 0 goto label4;

     label3:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (code 0x");

        $i7 = (int) c0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r33 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code 0x");

        $i8 = (int) c0;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r33 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        if r6 == null goto label6;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r33 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r8 = virtualinvoke r7.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>(r33);

        throw $r8;
    }

    protected void _reportBase64EOF() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonParseException $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>("Unexpected end-of-String in base64 content");

        throw $r1;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.util.TokenBuffer$Parser: int INT_SPACE> = 32;

        return;
    }
}
