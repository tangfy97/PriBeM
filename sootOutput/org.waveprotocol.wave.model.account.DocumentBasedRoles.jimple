public class org.waveprotocol.wave.model.account.DocumentBasedRoles extends java.lang.Object implements org.waveprotocol.wave.model.account.ObservableRoles
{
    public static final java.lang.String ASSIGN_TAG;
    private final org.waveprotocol.wave.model.adt.ObservableElementList assignments;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    private final org.waveprotocol.wave.model.adt.ObservableElementList$Listener assignmentListListener;
    private final org.waveprotocol.wave.model.account.ObservableAssignment$Listener assignmentListener;

    private void <init>(org.waveprotocol.wave.model.adt.ObservableElementList)
    {
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.account.ObservableAssignment r9;
        org.waveprotocol.wave.model.adt.ObservableElementList r2;
        org.waveprotocol.wave.model.adt.ObservableElementList$Listener $r7;
        java.lang.Iterable $r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        org.waveprotocol.wave.model.account.ObservableAssignment$Listener $r10;
        java.lang.Object $r8;
        org.waveprotocol.wave.model.account.DocumentBasedRoles$1 $r3;
        org.waveprotocol.wave.model.account.DocumentBasedRoles$2 $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        r2 := @parameter0: org.waveprotocol.wave.model.adt.ObservableElementList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.adt.ObservableElementList assignments> = r2;

        $r3 = new org.waveprotocol.wave.model.account.DocumentBasedRoles$1;

        specialinvoke $r3.<org.waveprotocol.wave.model.account.DocumentBasedRoles$1: void <init>(org.waveprotocol.wave.model.account.DocumentBasedRoles)>(r0);

        r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.account.ObservableAssignment$Listener assignmentListener> = $r3;

        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Iterable getValues()>();

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.waveprotocol.wave.model.account.ObservableAssignment) $r8;

        $r10 = r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.account.ObservableAssignment$Listener assignmentListener>;

        interfaceinvoke r9.<org.waveprotocol.wave.model.account.ObservableAssignment: void addListener(java.lang.Object)>($r10);

        goto label1;

     label2:
        $r6 = new org.waveprotocol.wave.model.account.DocumentBasedRoles$2;

        specialinvoke $r6.<org.waveprotocol.wave.model.account.DocumentBasedRoles$2: void <init>(org.waveprotocol.wave.model.account.DocumentBasedRoles)>(r0);

        r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.adt.ObservableElementList$Listener assignmentListListener> = $r6;

        $r7 = r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.adt.ObservableElementList$Listener assignmentListListener>;

        interfaceinvoke r2.<org.waveprotocol.wave.model.adt.ObservableElementList: void addListener(java.lang.Object)>($r7);

        return;
    }

    private void fireOnChanged()
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.account.ObservableRoles$Listener r4;
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        $r1 = r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.account.ObservableRoles$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.account.ObservableRoles$Listener: void onChanged()>();

        goto label1;

     label2:
        return;
    }

    public static org.waveprotocol.wave.model.account.DocumentBasedRoles create(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;
        org.waveprotocol.wave.model.account.DocumentBasedRoles $r3;
        org.waveprotocol.wave.model.account.DocumentBasedRoles$3 $r1;
        java.lang.Object $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = new org.waveprotocol.wave.model.account.DocumentBasedRoles$3;

        specialinvoke $r1.<org.waveprotocol.wave.model.account.DocumentBasedRoles$3: void <init>()>();

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object 'with'(org.waveprotocol.wave.model.document.ObservableMutableDocument$Method)>($r1);

        $r3 = (org.waveprotocol.wave.model.account.DocumentBasedRoles) $r2;

        return $r3;
    }

    public boolean isPermitted(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.account.Capability)
    {
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        org.waveprotocol.wave.model.account.Capability r3;
        org.waveprotocol.wave.model.account.Role $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter1: org.waveprotocol.wave.model.account.Capability;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.account.Role getRole(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.account.Role: boolean isPermitted(org.waveprotocol.wave.model.account.Capability)>(r3);

        return $z0;
    }

    private org.waveprotocol.wave.model.account.Assignment getAssignment(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.account.ObservableAssignment r5, r8;
        org.waveprotocol.wave.model.adt.ObservableElementList $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r6, r7;
        java.lang.Iterable $r2;
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        r7 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r8 = null;

        $r1 = r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.adt.ObservableElementList assignments>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Iterable getValues()>();

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.account.ObservableAssignment) $r4;

        $r6 = interfaceinvoke r5.<org.waveprotocol.wave.model.account.Assignment: org.waveprotocol.wave.model.wave.ParticipantId getParticipant()>();

        $z1 = virtualinvoke $r6.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label2;

        r8 = r5;

     label2:
        goto label1;

     label3:
        return r8;
    }

    public org.waveprotocol.wave.model.account.Role getRole(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        org.waveprotocol.wave.model.account.Role $r3, $r4;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.account.Assignment $r2;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.account.Assignment getAssignment(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        if $r2 == null goto label1;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.account.Assignment: org.waveprotocol.wave.model.account.Role getRole()>();

        if $r4 == null goto label1;

        return $r4;

     label1:
        $r3 = <org.waveprotocol.wave.model.account.Policies: org.waveprotocol.wave.model.account.Role DEFAULT_ROLE>;

        return $r3;
    }

    public void assign(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.account.Role)
    {
        org.waveprotocol.wave.model.account.BasicAssignment $r8;
        org.waveprotocol.wave.model.account.DocumentBasedAssignment$AssignmentInitializer $r7;
        org.waveprotocol.wave.model.wave.ParticipantId r9, $r13;
        java.lang.Iterable $r5;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.account.ObservableAssignment r12, r15;
        org.waveprotocol.wave.model.adt.ObservableElementList $r4, $r10;
        org.waveprotocol.wave.model.account.Role r0, $r1, r2, $r14;
        org.waveprotocol.wave.model.account.DocumentBasedRoles r3;
        java.lang.Object $r11;

        r3 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        r9 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r0 := @parameter1: org.waveprotocol.wave.model.account.Role;

        $r1 = <org.waveprotocol.wave.model.account.Policies: org.waveprotocol.wave.model.account.Role DEFAULT_ROLE>;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.account.Role: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r14 = null;

        goto label2;

     label1:
        $r14 = r0;

     label2:
        r2 = $r14;

        r15 = null;

        $r4 = r3.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.adt.ObservableElementList assignments>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Iterable getValues()>();

        $r6 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r11 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.waveprotocol.wave.model.account.ObservableAssignment) $r11;

        $r13 = interfaceinvoke r12.<org.waveprotocol.wave.model.account.ObservableAssignment: org.waveprotocol.wave.model.wave.ParticipantId getParticipant()>();

        $z1 = virtualinvoke $r13.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>(r9);

        if $z1 == 0 goto label4;

        r15 = r12;

     label4:
        goto label3;

     label5:
        if r15 == null goto label6;

        interfaceinvoke r15.<org.waveprotocol.wave.model.account.ObservableAssignment: void setRole(org.waveprotocol.wave.model.account.Role)>(r2);

        goto label7;

     label6:
        if r2 == null goto label7;

        $r10 = r3.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.adt.ObservableElementList assignments>;

        $r7 = new org.waveprotocol.wave.model.account.DocumentBasedAssignment$AssignmentInitializer;

        $r8 = new org.waveprotocol.wave.model.account.BasicAssignment;

        specialinvoke $r8.<org.waveprotocol.wave.model.account.BasicAssignment: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.account.Role)>(r9, r2);

        specialinvoke $r7.<org.waveprotocol.wave.model.account.DocumentBasedAssignment$AssignmentInitializer: void <init>(org.waveprotocol.wave.model.account.Assignment)>($r8);

        interfaceinvoke $r10.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Object add(java.lang.Object)>($r7);

     label7:
        return;
    }

    public void addListener(org.waveprotocol.wave.model.account.ObservableRoles$Listener)
    {
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.account.ObservableRoles$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        r1 := @parameter0: org.waveprotocol.wave.model.account.ObservableRoles$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.account.ObservableRoles$Listener)
    {
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.account.ObservableRoles$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        r1 := @parameter0: org.waveprotocol.wave.model.account.ObservableRoles$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.lang.Iterable getAssignments()
    {
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        org.waveprotocol.wave.model.adt.ObservableElementList $r1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        $r1 = r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.adt.ObservableElementList assignments>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Iterable getValues()>();

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.account.ObservableRoles$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.account.ObservableRoles$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: void removeListener(org.waveprotocol.wave.model.account.ObservableRoles$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.account.ObservableRoles$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.account.ObservableRoles$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: void addListener(org.waveprotocol.wave.model.account.ObservableRoles$Listener)>($r2);

        return;
    }

    static void access$000(org.waveprotocol.wave.model.account.DocumentBasedRoles)
    {
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;

        r0 := @parameter0: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        specialinvoke r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: void fireOnChanged()>();

        return;
    }

    static org.waveprotocol.wave.model.account.ObservableAssignment$Listener access$100(org.waveprotocol.wave.model.account.DocumentBasedRoles)
    {
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        org.waveprotocol.wave.model.account.ObservableAssignment$Listener $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        $r1 = r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: org.waveprotocol.wave.model.account.ObservableAssignment$Listener assignmentListener>;

        return $r1;
    }

    void <init>(org.waveprotocol.wave.model.adt.ObservableElementList, org.waveprotocol.wave.model.account.DocumentBasedRoles$1)
    {
        org.waveprotocol.wave.model.account.DocumentBasedRoles r0;
        org.waveprotocol.wave.model.adt.ObservableElementList r1;
        org.waveprotocol.wave.model.account.DocumentBasedRoles$1 r2;

        r0 := @this: org.waveprotocol.wave.model.account.DocumentBasedRoles;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableElementList;

        r2 := @parameter1: org.waveprotocol.wave.model.account.DocumentBasedRoles$1;

        specialinvoke r0.<org.waveprotocol.wave.model.account.DocumentBasedRoles: void <init>(org.waveprotocol.wave.model.adt.ObservableElementList)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.account.DocumentBasedRoles: java.lang.String ASSIGN_TAG> = "assign";

        return;
    }
}
