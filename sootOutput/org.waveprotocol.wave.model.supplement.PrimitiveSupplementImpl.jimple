public final class org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl extends java.lang.Object implements org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement
{
    private final java.util.Map waveletReadStates;
    private final java.util.Map waveletThreadStates;
    private final java.util.Set folders;
    private final java.util.Map waveletArchiveVersions;
    private final java.util.Map waveletSeenVersions;
    private final java.util.Set wantedEvaluations;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    private java.lang.Boolean follow;
    private boolean pendingNotification;
    private final java.util.Map waveletNotifiedVersions;
    private final org.waveprotocol.wave.model.util.StringMap gadgetStates;

    private static int unboxVersion(java.lang.Integer)
    {
        int $i0, $i2;
        java.lang.Integer r0;

        r0 := @parameter0: java.lang.Integer;

        if r0 != null goto label1;

        $i2 = (int) -1;

        $i0 = $i2;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

     label2:
        return $i0;
    }

    public void <init>()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.HashMap $r1, $r2, $r4, $r5, $r8;
        org.waveprotocol.wave.model.util.StringMap $r9;
        java.util.HashSet $r3, $r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r7;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletThreadStates> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set folders> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletArchiveVersions> = $r4;

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletSeenVersions> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set wantedEvaluations> = $r6;

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r7;

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: boolean pendingNotification> = 0;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletNotifiedVersions> = $r8;

        $r9 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.StringMap gadgetStates> = $r9;

        return;
    }

    public void <init>(org.waveprotocol.wave.model.supplement.PrimitiveSupplement)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r47;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplement r10;
        java.lang.Integer $r28, $r34, $r36, $r39;
        java.util.Map $r27, $r30, $r38;
        java.util.Set $r19, $r21, $r23, $r35;
        org.waveprotocol.wave.model.id.WaveletId r51, r53, r55, r57, r58;
        org.waveprotocol.wave.model.version.HashedVersion $r31;
        java.lang.String r52, r54;
        org.waveprotocol.wave.model.util.StringMap $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState $r41;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r7;
        org.waveprotocol.wave.model.supplement.WantedEvaluation r56;
        java.util.HashMap $r5, $r59, $r60, $r62, $r64;
        java.lang.Iterable $r11, $r13, $r15, $r17, $r42, $r48;
        java.util.HashSet $r61, $r63;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13, $i15;
        java.lang.Boolean $r25;
        org.waveprotocol.wave.model.supplement.ThreadState $r45;
        java.util.Iterator $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r43, $r49;
        java.lang.Object $r26, $r29, $r32, $r33, $r37, $r40, $r44, $r46, $r50;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r10 := @parameter0: org.waveprotocol.wave.model.supplement.PrimitiveSupplement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r59 = new java.util.HashMap;

        specialinvoke $r59.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates> = $r59;

        $r60 = new java.util.HashMap;

        specialinvoke $r60.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletThreadStates> = $r60;

        $r61 = new java.util.HashSet;

        specialinvoke $r61.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set folders> = $r61;

        $r62 = new java.util.HashMap;

        specialinvoke $r62.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletArchiveVersions> = $r62;

        $r5 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletSeenVersions> = $r5;

        $r63 = new java.util.HashSet;

        specialinvoke $r63.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set wantedEvaluations> = $r63;

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r7;

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: boolean pendingNotification> = 0;

        $r64 = new java.util.HashMap;

        specialinvoke $r64.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletNotifiedVersions> = $r64;

        $r9 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.StringMap gadgetStates> = $r9;

        $r11 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.lang.Iterable getReadWavelets()>();

        $r12 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r46 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r51 = (org.waveprotocol.wave.model.id.WaveletId) $r46;

        $r47 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState getWaveletReadState(org.waveprotocol.wave.model.id.WaveletId)>(r51);

        $i3 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)>(r51);

        $i11 = (int) -1;

        if $i3 == $i11 goto label02;

        $i9 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)>(r51);

        virtualinvoke $r47.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: void setWaveletVersion(int)>($i9);

     label02:
        $i4 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId)>(r51);

        $i13 = (int) -1;

        if $i4 == $i13 goto label03;

        $i8 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId)>(r51);

        virtualinvoke $r47.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: void setParticipantVersion(int)>($i8);

     label03:
        $i5 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId)>(r51);

        $i15 = (int) -1;

        if $i5 == $i15 goto label04;

        $i7 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId)>(r51);

        virtualinvoke $r47.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: void setTagsVersion(int)>($i7);

     label04:
        $r48 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.lang.Iterable getReadBlips(org.waveprotocol.wave.model.id.WaveletId)>(r51);

        $r49 = interfaceinvoke $r48.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z9 = interfaceinvoke $r49.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label06;

        $r50 = interfaceinvoke $r49.<java.util.Iterator: java.lang.Object next()>();

        r52 = (java.lang.String) $r50;

        $i6 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r51, r52);

        virtualinvoke $r47.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: void setBlipVersion(java.lang.String,int)>(r52, $i6);

        goto label05;

     label06:
        goto label01;

     label07:
        $r13 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.lang.Iterable getWaveletsWithThreadState()>();

        $r14 = interfaceinvoke $r13.<java.lang.Iterable: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r40 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r53 = (org.waveprotocol.wave.model.id.WaveletId) $r40;

        $r41 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState getWaveletThreadState(org.waveprotocol.wave.model.id.WaveletId)>(r53);

        $r42 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.lang.Iterable getStatefulThreads(org.waveprotocol.wave.model.id.WaveletId)>(r53);

        $r43 = interfaceinvoke $r42.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z8 = interfaceinvoke $r43.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label10;

        $r44 = interfaceinvoke $r43.<java.util.Iterator: java.lang.Object next()>();

        r54 = (java.lang.String) $r44;

        $r45 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: org.waveprotocol.wave.model.supplement.ThreadState getThreadState(org.waveprotocol.wave.model.id.WaveletId,java.lang.String)>(r53, r54);

        virtualinvoke $r41.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState: void setThreadState(java.lang.String,org.waveprotocol.wave.model.supplement.ThreadState)>(r54, $r45);

        goto label09;

     label10:
        goto label08;

     label11:
        $r15 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.lang.Iterable getArchiveWavelets()>();

        $r16 = interfaceinvoke $r15.<java.lang.Iterable: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r37 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r55 = (org.waveprotocol.wave.model.id.WaveletId) $r37;

        $r38 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletArchiveVersions>;

        $i2 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getArchiveWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)>(r55);

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r55, $r39);

        goto label12;

     label13:
        $r17 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.lang.Iterable getFolders()>();

        $r18 = interfaceinvoke $r17.<java.lang.Iterable: java.util.Iterator iterator()>();

     label14:
        $z3 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label15;

        $r33 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r34 = (java.lang.Integer) $r33;

        $i1 = virtualinvoke $r34.<java.lang.Integer: int intValue()>();

        $r35 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set folders>;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r35.<java.util.Set: boolean add(java.lang.Object)>($r36);

        goto label14;

     label15:
        $r19 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.util.Set getWantedEvaluations()>();

        $r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z4 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label17;

        $r32 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r56 = (org.waveprotocol.wave.model.supplement.WantedEvaluation) $r32;

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: void addWantedEvaluation(org.waveprotocol.wave.model.supplement.WantedEvaluation)>(r56);

        goto label16;

     label17:
        $r21 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.util.Set getSeenWavelets()>();

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        $z5 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label19;

        $r29 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r57 = (org.waveprotocol.wave.model.id.WaveletId) $r29;

        $r30 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletSeenVersions>;

        $r31 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId)>(r57);

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r31);

        goto label18;

     label19:
        $r23 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.util.Set getNotifiedWavelets()>();

        $r24 = interfaceinvoke $r23.<java.util.Set: java.util.Iterator iterator()>();

     label20:
        $z6 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label21;

        $r26 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r58 = (org.waveprotocol.wave.model.id.WaveletId) $r26;

        $r27 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletNotifiedVersions>;

        $i0 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int getNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId)>(r58);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r58, $r28);

        goto label20;

     label21:
        $r25 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: java.lang.Boolean getFollowed()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.lang.Boolean follow> = $r25;

        $z7 = interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.PrimitiveSupplement: boolean getPendingNotification()>();

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: boolean pendingNotification> = $z7;

        return;
    }

    private org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState getWaveletReadState(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r4, r6;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Map $r2, $r5;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState) $r3;

        if r6 != null goto label1;

        $r4 = new org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState;

        specialinvoke $r4.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: void <init>()>();

        r6 = $r4;

        $r5 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    private org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState getWaveletThreadState(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Map $r2, $r5;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState $r4, r6;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletThreadStates>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState) $r3;

        if r6 != null goto label1;

        $r4 = new org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState;

        specialinvoke $r4.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState: void <init>(org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$1)>(null);

        r6 = $r4;

        $r5 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletThreadStates>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    public int getLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r6;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r7;
        java.util.Map $r2, $r3;
        int $i0;
        java.lang.Object $r4;
        java.lang.String r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState) $r4;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer getBlipVersion(java.lang.String)>(r5);

        goto label2;

     label1:
        $r7 = null;

     label2:
        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r7);

        return $i0;
    }

    public int getLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r5;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r6;
        java.util.Map $r2, $r3;
        int $i0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState) $r4;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer getParticipantVersion()>();

        goto label2;

     label1:
        $r6 = null;

     label2:
        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r6);

        return $i0;
    }

    public int getLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r5;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r6;
        java.util.Map $r2, $r3;
        int $i0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState) $r4;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer getTagsVersion()>();

        goto label2;

     label1:
        $r6 = null;

     label2:
        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r6);

        return $i0;
    }

    public int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r5;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r6;
        java.util.Map $r2, $r3;
        int $i0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState) $r4;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer getWaveletVersion()>();

        goto label2;

     label1:
        $r6 = null;

     label2:
        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r6);

        return $i0;
    }

    public java.lang.Iterable getReadWavelets()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Set $r2;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.lang.Iterable getReadBlips(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r6;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Iterable $r7;
        java.util.List $r3;
        java.util.Map $r2, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState) $r5;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Iterable getReadBlips()>();

        return $r7;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;
    }

    public void setLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r8;
        int $i0, i1;
        java.lang.Object $r7;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState getWaveletReadState(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer getBlipVersion(java.lang.String)>(r3);

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r4);

        virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: void setBlipVersion(java.lang.String,int)>(r3, i1);

        if i1 == $i0 goto label2;

        $r5 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r7;

        interfaceinvoke r8.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadBlipVersionChanged(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int,int)>(r1, r3, $i0, i1);

        goto label1;

     label2:
        return;
    }

    public void setLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r3;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r7;
        int $i0, i1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i1 := @parameter1: int;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState getWaveletReadState(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer getParticipantVersion()>();

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r3);

        virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: void setParticipantVersion(int)>(i1);

        if i1 == $i0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r6;

        interfaceinvoke r7.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadParticipantsVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r1, $i0, i1);

        goto label1;

     label2:
        return;
    }

    public void setLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r3;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r7;
        int $i0, i1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i1 := @parameter1: int;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState getWaveletReadState(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer getTagsVersion()>();

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r3);

        virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: void setTagsVersion(int)>(i1);

        if i1 == $i0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r6;

        interfaceinvoke r7.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadTagsVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r1, $i0, i1);

        goto label1;

     label2:
        return;
    }

    public void setLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r3;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r7;
        int $i0, i1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i1 := @parameter1: int;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState getWaveletReadState(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer getWaveletVersion()>();

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r3);

        virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: void setWaveletVersion(int)>(i1);

        if i1 == $i0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r6;

        interfaceinvoke r7.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadWaveletVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r1, $i0, i1);

        goto label1;

     label2:
        return;
    }

    public void clearReadState()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletReadStates>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public void clearBlipReadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState $r2;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r5;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r8;
        int $i0, $i2, $i4;
        java.lang.Object $r7;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState getWaveletReadState(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: java.lang.Integer getBlipVersion(java.lang.String)>(r3);

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r4);

        virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletReadState: void clearBlipVersion(java.lang.String)>(r3);

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        $r5 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r7;

        $i4 = (int) -1;

        interfaceinvoke r8.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadBlipVersionChanged(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int,int)>(r1, r3, $i0, $i4);

        goto label1;

     label2:
        return;
    }

    public org.waveprotocol.wave.model.supplement.ThreadState getThreadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r3;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState $r2;
        org.waveprotocol.wave.model.supplement.ThreadState $r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState getWaveletThreadState(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState: org.waveprotocol.wave.model.supplement.ThreadState getThreadState(java.lang.String)>(r3);

        return $r4;
    }

    public void setThreadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, org.waveprotocol.wave.model.supplement.ThreadState)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r7;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState $r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r6;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r9;
        java.lang.Object $r8;
        java.lang.String r3;
        org.waveprotocol.wave.model.supplement.ThreadState $r4, r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter1: java.lang.String;

        r5 := @parameter2: org.waveprotocol.wave.model.supplement.ThreadState;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState getWaveletThreadState(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState: org.waveprotocol.wave.model.supplement.ThreadState getThreadState(java.lang.String)>(r3);

        virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState: void setThreadState(java.lang.String,org.waveprotocol.wave.model.supplement.ThreadState)>(r3, r5);

        if r5 == $r4 goto label2;

        $r6 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r8;

        interfaceinvoke r9.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onThreadStateChanged(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,org.waveprotocol.wave.model.supplement.ThreadState,org.waveprotocol.wave.model.supplement.ThreadState)>(r1, r3, $r4, r5);

        goto label1;

     label2:
        return;
    }

    public java.lang.Iterable getStatefulThreads(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState $r2;
        java.lang.Iterable $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState getWaveletThreadState(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl$WaveletThreadState: java.lang.Iterable getStatefulThreads()>();

        return $r3;
    }

    public java.lang.Iterable getWaveletsWithThreadState()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Set $r2;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletThreadStates>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public void addFolder(int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r4;
        java.util.Set $r1;
        java.lang.Integer $r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r6;
        int i0;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set folders>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r5;

        interfaceinvoke r6.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onFolderAdded(int)>(i0);

        goto label1;

     label2:
        return;
    }

    public void removeAllFolders()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r3;
        java.util.Set $r1;
        java.lang.Integer r5;
        java.util.HashSet $r2;
        int $i0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set folders>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashSet newHashSet(java.util.Collection)>($r1);

        $r3 = virtualinvoke $r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: void removeFolder(int)>($i0);

        goto label1;

     label2:
        return;
    }

    public void removeFolder(int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r4;
        java.util.Set $r1;
        java.lang.Integer $r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r6;
        int i0;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set folders>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean remove(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r5;

        interfaceinvoke r6.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onFolderRemoved(int)>(i0);

        goto label1;

     label2:
        return;
    }

    public java.util.Set getFolders()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Set $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set folders>;

        return $r1;
    }

    public boolean isInFolder(int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        int i0;
        java.util.Set $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set folders>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    public void follow()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r7;
        java.lang.Boolean $r1, $r2, $r3;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.lang.Boolean follow>;

        $r1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r2 == $r1 goto label2;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.lang.Boolean follow> = $r3;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r6;

        interfaceinvoke r7.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onFollowed()>();

        goto label1;

     label2:
        return;
    }

    public void unfollow()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r5;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r7;
        java.lang.Boolean $r1, $r2, $r3;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.lang.Boolean follow>;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        if $r2 == $r1 goto label2;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.lang.Boolean follow> = $r3;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r6;

        interfaceinvoke r7.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onUnfollowed()>();

        goto label1;

     label2:
        return;
    }

    public void clearFollow()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r5;
        java.util.Iterator $r3;
        java.lang.Boolean $r1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.lang.Boolean follow>;

        if $r1 == null goto label2;

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.lang.Boolean follow> = null;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r4;

        interfaceinvoke r5.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onFollowCleared()>();

        goto label1;

     label2:
        return;
    }

    public java.lang.Boolean getFollowed()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.lang.Boolean $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.lang.Boolean follow>;

        return $r1;
    }

    public int getArchiveWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r5;
        java.util.Map $r2, $r3;
        int $i0, $i2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletArchiveVersions>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletArchiveVersions>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.lang.Integer) $r4;

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r5);

        return $i0;

     label1:
        $i2 = (int) -1;

        return $i2;
    }

    public void archiveAtVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Iterator $r8;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r4, $r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r7;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r10;
        java.util.Map $r2, $r5;
        int $i0, i1;
        java.lang.Object $r3, $r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i1 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletArchiveVersions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r4);

        $r5 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletArchiveVersions>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        $r7 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r9;

        interfaceinvoke r10.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onArchiveVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>(r1, $i0, i1);

        goto label1;

     label2:
        return;
    }

    public void clearArchiveState()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r5;
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletArchiveVersions>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r4;

        interfaceinvoke r5.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onArchiveClearChanged(boolean,boolean)>(0, 1);

        goto label1;

     label2:
        return;
    }

    public java.lang.Iterable getArchiveWavelets()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Set $r2;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletArchiveVersions>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Map $r2;
        org.waveprotocol.wave.model.version.HashedVersion r4, $r5;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletSeenVersions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.wave.model.version.HashedVersion) $r3;

        if null != r4 goto label1;

        $r5 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>(0L);

        return $r5;

     label1:
        return r4;
    }

    public void setSeenVersion(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Map $r3;
        org.waveprotocol.wave.model.version.HashedVersion r2;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletSeenVersions>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void clearSeenVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.util.Map $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletSeenVersions>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public java.util.Set getSeenWavelets()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Map $r1;
        java.util.Set $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletSeenVersions>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public java.util.Set getWantedEvaluations()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Set $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set wantedEvaluations>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Set immutableSet(java.util.Collection)>($r1);

        return $r2;
    }

    public void addWantedEvaluation(org.waveprotocol.wave.model.supplement.WantedEvaluation)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.supplement.WantedEvaluation r1;
        java.util.Iterator $r4;
        java.util.Set $r2;
        org.waveprotocol.wave.model.id.WaveletId $r7;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r6;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set wantedEvaluations>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) $r5;

        $r7 = interfaceinvoke r1.<org.waveprotocol.wave.model.supplement.WantedEvaluation: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        interfaceinvoke r6.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onWantedEvaluationsChanged(org.waveprotocol.wave.model.id.WaveletId)>($r7);

        goto label1;

     label2:
        return;
    }

    public boolean getPendingNotification()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $z0 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: boolean pendingNotification>;

        return $z0;
    }

    public int getNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r5;
        java.util.Map $r2, $r3;
        int $i0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletNotifiedVersions>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletNotifiedVersions>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.lang.Integer) $r4;

        goto label2;

     label1:
        $r5 = null;

     label2:
        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: int unboxVersion(java.lang.Integer)>($r5);

        return $i0;
    }

    public java.util.Set getNotifiedWavelets()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Map $r1;
        java.util.Set $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletNotifiedVersions>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public void setNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Map $r2;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Integer $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Map waveletNotifiedVersions>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public void clearPendingNotification()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: boolean pendingNotification> = 0;

        return;
    }

    public void addListener(org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        org.waveprotocol.wave.model.util.StringMap $r2, $r3, $r6, $r7;
        java.lang.Object $r4;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.ReadableStringMap $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.StringMap gadgetStates>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r6 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.StringMap gadgetStates>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, $r7);

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.StringMap gadgetStates>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r5 = (org.waveprotocol.wave.model.util.ReadableStringMap) $r4;

        return $r5;
    }

    public void setGadgetState(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r1;
        org.waveprotocol.wave.model.util.StringMap $r3, $r4, $r7, $r8, r9;
        java.lang.Object $r5;
        java.lang.String r0, r2, r6;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Private gadget state key is null.");

        $r3 = r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.StringMap gadgetStates>;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        $r7 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r9 = $r7;

        $r8 = r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.StringMap gadgetStates>;

        interfaceinvoke $r8.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r2, $r7);

        goto label2;

     label1:
        $r4 = r1.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: org.waveprotocol.wave.model.util.StringMap gadgetStates>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r2);

        r9 = (org.waveprotocol.wave.model.util.StringMap) $r5;

     label2:
        if r6 == null goto label3;

        interfaceinvoke r9.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r0, r6);

        goto label4;

     label3:
        interfaceinvoke r9.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>(r0);

     label4:
        return;
    }

    public volatile java.lang.Iterable getFolders()
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.util.Set $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: java.util.Set getFolders()>();

        return $r1;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: void removeListener(org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.PrimitiveSupplementImpl: void addListener(org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r2);

        return;
    }
}
