public class com.hp.hpl.jena.n3.turtle.Turtle2NTriples extends java.lang.Object implements com.hp.hpl.jena.n3.turtle.TurtleEventHandler
{
    java.io.PrintStream out;
    static boolean applyUnicodeEscapes;

    public void <init>(java.io.PrintStream)
    {
        java.io.PrintStream $r1, r2;
        com.hp.hpl.jena.n3.turtle.Turtle2NTriples r0;

        r0 := @this: com.hp.hpl.jena.n3.turtle.Turtle2NTriples;

        r2 := @parameter0: java.io.PrintStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <java.lang.System: java.io.PrintStream out>;

        r0.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out> = $r1;

        r0.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out> = r2;

        return;
    }

    public void triple(int, int, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        com.hp.hpl.jena.n3.turtle.Turtle2NTriples r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.graph.Triple r0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r26, $r27;
        int i0, i1;
        java.lang.String $r12, $r20, $r28;
        java.io.PrintStream $r29, $r30, $r31, $r32, $r33;
        com.hp.hpl.jena.n3.turtle.TurtleParseException $r5, $r13, $r21;

        r4 := @this: com.hp.hpl.jena.n3.turtle.Turtle2NTriples;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label1;

        $z5 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z5 != 0 goto label1;

        $r21 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : Error: Subject is not a URI or blank node");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label1:
        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 != 0 goto label2;

        $r13 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : Error: Predicate is not a URI");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r20);

        throw $r13;

     label2:
        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z4 != 0 goto label3;

        $r5 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : Error: Object is not a URI, blank node or literal");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label3:
        specialinvoke r4.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: void outputNode(com.hp.hpl.jena.graph.Node)>($r1);

        $r29 = r4.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r29.<java.io.PrintStream: void print(java.lang.String)>(" ");

        specialinvoke r4.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: void outputNode(com.hp.hpl.jena.graph.Node)>($r2);

        $r30 = r4.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r30.<java.io.PrintStream: void print(java.lang.String)>(" ");

        specialinvoke r4.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: void outputNode(com.hp.hpl.jena.graph.Node)>($r3);

        $r31 = r4.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r31.<java.io.PrintStream: void print(java.lang.String)>(" .");

        $r32 = r4.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r32.<java.io.PrintStream: void println()>();

        $r33 = r4.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r33.<java.io.PrintStream: void flush()>();

        return;
    }

    private void outputNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.n3.turtle.Turtle2NTriples r6;
        int $i0;
        java.lang.String $r5, $r8, $r10, $r13, $r15, $r18, $r21, $r24, $r26;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r2, $r7, $r9, $r11, $r12, $r14, $r16, $r17, $r19, $r20, $r22, $r23, $r25;
        java.lang.StringBuilder $r1, $r3, $r4;

        r6 := @this: com.hp.hpl.jena.n3.turtle.Turtle2NTriples;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        $r22 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r22.<java.io.PrintStream: void print(java.lang.String)>("<");

        $r23 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        $r24 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        virtualinvoke $r23.<java.io.PrintStream: void print(java.lang.String)>($r24);

        $r25 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r25.<java.io.PrintStream: void print(java.lang.String)>(">");

        return;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label2;

        $r19 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r19.<java.io.PrintStream: void print(java.lang.String)>("_:");

        $r20 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        $r21 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        virtualinvoke $r20.<java.io.PrintStream: void print(java.lang.String)>($r21);

        return;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label5;

        $r7 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void print(char)>(34);

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        virtualinvoke r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: void outputEsc(java.lang.String)>($r8);

        $r9 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void print(char)>(34);

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        if $r10 == null goto label3;

        $r15 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $i0 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $r16 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r16.<java.io.PrintStream: void print(char)>(64);

        $r17 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        $r18 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        virtualinvoke $r17.<java.io.PrintStream: void print(java.lang.String)>($r18);

     label3:
        $r26 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        if $r26 == null goto label4;

        $r11 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void print(java.lang.String)>("^^<");

        $r12 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        virtualinvoke $r12.<java.io.PrintStream: void print(java.lang.String)>($r13);

        $r14 = r6.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r14.<java.io.PrintStream: void print(java.lang.String)>(">");

     label4:
        return;

     label5:
        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal node: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    public void startFormula(int, int)
    {
        com.hp.hpl.jena.n3.turtle.TurtleParseException $r0;
        com.hp.hpl.jena.n3.turtle.Turtle2NTriples r8;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r8 := @this: com.hp.hpl.jena.n3.turtle.Turtle2NTriples;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : Error: Formula found");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    public void endFormula(int, int)
    {
        com.hp.hpl.jena.n3.turtle.TurtleParseException $r0;
        com.hp.hpl.jena.n3.turtle.Turtle2NTriples r8;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r8 := @this: com.hp.hpl.jena.n3.turtle.Turtle2NTriples;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.hp.hpl.jena.n3.turtle.TurtleParseException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : Error: Formula found");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.n3.turtle.TurtleParseException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    public void prefix(int, int, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.Turtle2NTriples r0;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @this: com.hp.hpl.jena.n3.turtle.Turtle2NTriples;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        return;
    }

    private static void writeString(java.lang.String, java.io.PrintWriter)
    {
        java.util.Locale $r3;
        int $i0, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        java.lang.String r0, $r2, $r4;
        java.io.PrintWriter r1;
        char $c1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.PrintWriter;

        i3 = 0;

     label01:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label11;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c1;

        if $i5 == 92 goto label02;

        $i6 = (int) $c1;

        if $i6 != 34 goto label03;

     label02:
        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(92);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>($c1);

        goto label10;

     label03:
        $i7 = (int) $c1;

        if $i7 != 10 goto label04;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("\\n");

        goto label10;

     label04:
        $i8 = (int) $c1;

        if $i8 != 13 goto label05;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("\\r");

        goto label10;

     label05:
        $i9 = (int) $c1;

        if $i9 != 9 goto label06;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("\\t");

        goto label10;

     label06:
        $i10 = (int) $c1;

        if $i10 < 32 goto label07;

        $i11 = (int) $c1;

        if $i11 >= 127 goto label07;

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>($c1);

        goto label10;

     label07:
        $i12 = (int) $c1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i12);

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        i4 = 4 - $i2;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("\\u");

     label08:
        if i4 <= 0 goto label09;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("0");

        $i14 = (int) -1;

        i4 = i4 + $i14;

        goto label08;

     label09:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r4);

     label10:
        i3 = i3 + 1;

        goto label01;

     label11:
        return;
    }

    public void outputEsc(java.lang.String)
    {
        com.hp.hpl.jena.n3.turtle.Turtle2NTriples r1;
        int $i0, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15;
        java.lang.String r0, $r4, $r5;
        java.io.PrintStream $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        char $c1;

        r1 := @this: com.hp.hpl.jena.n3.turtle.Turtle2NTriples;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label01:
        if i3 >= $i0 goto label12;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c1;

        if $i5 == 92 goto label02;

        $i6 = (int) $c1;

        if $i6 != 34 goto label03;

     label02:
        $r2 = r1.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void print(char)>(92);

        $r3 = r1.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void print(char)>($c1);

        goto label11;

     label03:
        $i7 = (int) $c1;

        if $i7 != 10 goto label04;

        $r13 = r1.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void print(java.lang.String)>("\\n");

        goto label11;

     label04:
        $i8 = (int) $c1;

        if $i8 != 9 goto label05;

        $r12 = r1.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void print(java.lang.String)>("\\t");

        goto label11;

     label05:
        $i9 = (int) $c1;

        if $i9 != 13 goto label06;

        $r11 = r1.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void print(java.lang.String)>("\\r");

        goto label11;

     label06:
        $i10 = (int) $c1;

        if $i10 != 12 goto label07;

        $r10 = r1.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>("\\f");

        goto label11;

     label07:
        $i11 = (int) $c1;

        if $i11 < 32 goto label08;

        $i12 = (int) $c1;

        if $i12 >= 127 goto label08;

        $r9 = r1.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void print(char)>($c1);

        goto label11;

     label08:
        $i13 = (int) $c1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i13);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        i4 = 4 - $i2;

        $r6 = r1.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>("\\u");

     label09:
        if i4 <= 0 goto label10;

        $r8 = r1.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void print(java.lang.String)>("0");

        $i15 = (int) -1;

        i4 = i4 + $i15;

        goto label09;

     label10:
        $r7 = r1.<com.hp.hpl.jena.n3.turtle.Turtle2NTriples: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void print(java.lang.String)>($r5);

     label11:
        i3 = i3 + 1;

        goto label01;

     label12:
        return;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.n3.turtle.Turtle2NTriples: boolean applyUnicodeEscapes> = 1;

        return;
    }
}
