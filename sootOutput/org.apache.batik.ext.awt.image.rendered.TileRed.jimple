public class org.apache.batik.ext.awt.image.rendered.TileRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed implements org.apache.batik.ext.awt.image.rendered.TileGenerator
{
    static final java.awt.geom.AffineTransform IDENTITY;
    java.awt.Rectangle tiledRegion;
    int xStep;
    int yStep;
    org.apache.batik.ext.awt.image.rendered.TileStore tiles;
    private java.awt.RenderingHints hints;
    final boolean is_INT_PACK;
    java.awt.image.RenderedImage tile;
    java.awt.image.WritableRaster raster;

    public void <init>(java.awt.image.RenderedImage, java.awt.Rectangle)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.TileRed r0;
        java.awt.image.RenderedImage r1;
        int $i0, $i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        r1 := @parameter0: java.awt.image.RenderedImage;

        r2 := @parameter1: java.awt.Rectangle;

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getWidth()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getHeight()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.TileRed: void <init>(java.awt.image.RenderedImage,java.awt.Rectangle,int,int,java.awt.RenderingHints)>(r1, r2, $i0, $i1, null);

        return;
    }

    public void <init>(java.awt.image.RenderedImage, java.awt.Rectangle, java.awt.RenderingHints)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.TileRed r0;
        java.awt.image.RenderedImage r1;
        int $i0, $i1;
        java.awt.RenderingHints r3;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        r1 := @parameter0: java.awt.image.RenderedImage;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.RenderingHints;

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getWidth()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getHeight()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.TileRed: void <init>(java.awt.image.RenderedImage,java.awt.Rectangle,int,int,java.awt.RenderingHints)>(r1, r2, $i0, $i1, r3);

        return;
    }

    public void <init>(java.awt.image.RenderedImage, java.awt.Rectangle, int, int)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.TileRed r0;
        java.awt.image.RenderedImage r1;
        int i0, i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        r1 := @parameter0: java.awt.image.RenderedImage;

        r2 := @parameter1: java.awt.Rectangle;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.TileRed: void <init>(java.awt.image.RenderedImage,java.awt.Rectangle,int,int,java.awt.RenderingHints)>(r1, r2, i0, i1, null);

        return;
    }

    public void <init>(java.awt.image.RenderedImage, java.awt.Rectangle, int, int, java.awt.RenderingHints)
    {
        java.awt.RenderingHints r3;
        java.awt.Point $r20;
        java.awt.image.SampleModel $r4, $r11, r16;
        byte $b5, $b10;
        org.apache.batik.ext.awt.image.rendered.TileRed r0;
        boolean $z0;
        java.awt.image.RenderedImage r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r7;
        org.apache.batik.ext.awt.image.rendered.TileCacheRed $r21;
        java.awt.Rectangle r1;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, i13, i14, i15, $i16, $i17, $i18, $i19;
        double $d0, $d1, d2, $d3, $d4, $d5, $d6, $d7, d8, d9;
        java.lang.IllegalArgumentException $r18, $r19;
        java.awt.image.ColorModel $r5;
        java.awt.image.WritableRaster $r8, $r9, $r10, $r13, $r17;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        r2 := @parameter0: java.awt.image.RenderedImage;

        r1 := @parameter1: java.awt.Rectangle;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.awt.RenderingHints;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.RenderedImage tile> = null;

        r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster raster> = null;

        if r1 != null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r18;

     label1:
        if r2 != null goto label2;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r19;

     label2:
        r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.Rectangle tiledRegion> = r1;

        r0.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep> = i0;

        r0.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep> = i1;

        r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.RenderingHints hints> = r3;

        $i3 = r1.<java.awt.Rectangle: int width>;

        $i2 = r1.<java.awt.Rectangle: int height>;

        $r4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.SampleModel fixSampleModel(java.awt.image.RenderedImage,int,int,int,int)>(r2, i0, i1, $i3, $i2);

        r16 = $r4;

        $r5 = interfaceinvoke r2.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $i4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: int getDefaultTileSize()>();

        d8 = (double) $i4;

        d9 = d8 * d8;

        $d1 = (double) i0;

        $d0 = (double) i1;

        d2 = $d1 * $d0;

        $d3 = 16.1 * d9;

        $b5 = $d3 cmpl d2;

        $i18 = (int) $b5;

        if $i18 <= 0 goto label4;

        i14 = i0;

        i15 = i1;

        $d4 = 4.0 * d2;

        $b10 = $d4 cmpg d9;

        $i19 = (int) $b10;

        if $i19 > 0 goto label3;

        $d5 = d9 / d2;

        $d6 = staticinvoke <java.lang.Math: double sqrt(double)>($d5);

        $d7 = staticinvoke <java.lang.Math: double ceil(double)>($d6);

        i13 = (int) $d7;

        i14 = i0 * i13;

        i15 = i1 * i13;

     label3:
        $r11 = virtualinvoke $r4.<java.awt.image.SampleModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>(i14, i15);

        r16 = $r11;

        $r20 = new java.awt.Point;

        $i11 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getMinX()>();

        $i12 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getMinY()>();

        specialinvoke $r20.<java.awt.Point: void <init>(int,int)>($i11, $i12);

        $r13 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r11, $r20);

        r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster raster> = $r13;

     label4:
        $z0 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>(r16, 0);

        r0.<org.apache.batik.ext.awt.image.rendered.TileRed: boolean is_INT_PACK> = $z0;

        $i16 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getMinX()>();

        $i17 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getMinY()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(null, r1, $r5, r16, $i16, $i17, null);

        $r17 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster raster>;

        if $r17 == null goto label5;

        $r8 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster raster>;

        $i6 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getMinX()>();

        $i7 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getMinY()>();

        $i8 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getMinX()>();

        $i9 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getMinY()>();

        $r9 = virtualinvoke $r8.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>($i6, $i7, i0, i1, $i8, $i9, null);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster fillRasterFrom(java.awt.image.WritableRaster,java.awt.image.RenderedImage)>($r9, r2);

        $r10 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster raster>;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TileRed: void fillOutRaster(java.awt.image.WritableRaster)>($r10);

        goto label6;

     label5:
        $r21 = new org.apache.batik.ext.awt.image.rendered.TileCacheRed;

        $r7 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>(r2);

        specialinvoke $r21.<org.apache.batik.ext.awt.image.rendered.TileCacheRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>($r7);

        r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.RenderedImage tile> = $r21;

     label6:
        return;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.rendered.TileRed r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35;
        java.awt.image.Raster $r2, $r3;
        double $d0, $d1, $d2, $d3;
        java.awt.image.WritableRaster r0;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep>;

        $i2 = $i0 / $i1;

        $d0 = (double) $i2;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i4 = (int) $d1;

        $i3 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep>;

        i5 = $i4 * $i3;

        $i6 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i7 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        $i8 = $i6 / $i7;

        $d2 = (double) $i8;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $i10 = (int) $d3;

        $i9 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        i11 = $i10 * $i9;

        $i12 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        i13 = $i12 - i5;

        $i14 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        i15 = $i14 - i11;

        $i16 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>(i13);

        $i17 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>(i15);

        $i18 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i19 = i13 + $i18;

        $i20 = $i19 - 1;

        $i21 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i20);

        $i22 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $i23 = i15 + $i22;

        $i24 = $i23 - 1;

        $i25 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i24);

        i34 = $i17;

        goto label6;

     label1:
        i35 = $i16;

        goto label5;

     label2:
        $r2 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.Raster getTile(int,int)>(i35, i34);

        $i26 = virtualinvoke $r2.<java.awt.image.Raster: int getMinX()>();

        $i27 = virtualinvoke $r2.<java.awt.image.Raster: int getMinY()>();

        $i28 = virtualinvoke $r2.<java.awt.image.Raster: int getWidth()>();

        $i29 = virtualinvoke $r2.<java.awt.image.Raster: int getHeight()>();

        $i30 = virtualinvoke $r2.<java.awt.image.Raster: int getMinX()>();

        $i31 = $i30 + i5;

        $i32 = virtualinvoke $r2.<java.awt.image.Raster: int getMinY()>();

        $i33 = $i32 + i11;

        $r3 = virtualinvoke $r2.<java.awt.image.Raster: java.awt.image.Raster createChild(int,int,int,int,int,int,int[])>($i26, $i27, $i28, $i29, $i31, $i33, null);

        $z0 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: boolean is_INT_PACK>;

        if $z0 == 0 goto label3;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r3, r0);

        goto label4;

     label3:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r3, r0);

     label4:
        i35 = i35 + 1;

     label5:
        if i35 <= $i21 goto label2;

        i34 = i34 + 1;

     label6:
        if i34 <= $i25 goto label1;

        return r0;
    }

    public java.awt.image.Raster getTile(int, int)
    {
        org.apache.batik.ext.awt.image.rendered.TileRed r0;
        int i0, i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, i9;
        java.awt.image.Raster $r2, $r4;
        java.awt.image.WritableRaster $r1, $r3;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster raster>;

        if $r1 == null goto label1;

        $i4 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        $i2 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i3 = i0 * $i2;

        i5 = $i4 + $i3;

        $i8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        $i6 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i7 = i1 * $i6;

        i9 = $i8 + $i7;

        $r3 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster raster>;

        $r4 = virtualinvoke $r3.<java.awt.image.Raster: java.awt.image.Raster createTranslatedChild(int,int)>(i5, i9);

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.Raster genTile(int,int)>(i0, i1);

        return $r2;
    }

    public java.awt.image.Raster genTile(int, int)
    {
        java.awt.Point $r2;
        java.awt.image.SampleModel $r3;
        org.apache.batik.ext.awt.image.rendered.TileRed r0;
        int i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, i9;
        java.awt.image.Raster $r7;
        java.awt.image.RenderedImage $r5;
        java.awt.image.WritableRaster $r1, $r4, $r6;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        $i3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        $i1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i2 = i0 * $i1;

        i4 = $i3 + $i2;

        $i8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        $i6 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i7 = i5 * $i6;

        i9 = $i8 + $i7;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster raster>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster raster>;

        $r7 = virtualinvoke $r6.<java.awt.image.Raster: java.awt.image.Raster createTranslatedChild(int,int)>(i4, i9);

        return $r7;

     label1:
        $r2 = new java.awt.Point;

        specialinvoke $r2.<java.awt.Point: void <init>(int,int)>(i4, i9);

        $r3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel sm>;

        $r4 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r3, $r2);

        $r5 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.RenderedImage tile>;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.image.WritableRaster fillRasterFrom(java.awt.image.WritableRaster,java.awt.image.RenderedImage)>($r4, $r5);

        return $r4;
    }

    public java.awt.image.WritableRaster fillRasterFrom(java.awt.image.WritableRaster, java.awt.image.RenderedImage)
    {
        java.awt.Color $r8;
        java.awt.RenderingHints $r5;
        org.apache.batik.ext.awt.image.rendered.TileRed r0;
        boolean $z0, $z1;
        java.awt.image.BufferedImage $r2;
        java.awt.image.RenderedImage r10;
        java.awt.AlphaComposite $r7, $r9;
        java.awt.Graphics2D $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, $i23, $i24, i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, i38, i39;
        double $d0, $d1, $d2, $d3;
        java.awt.image.ColorModel $r1;
        java.awt.image.WritableRaster r3, $r4;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        r3 := @parameter0: java.awt.image.WritableRaster;

        r10 := @parameter1: java.awt.image.RenderedImage;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel getColorModel()>();

        $r2 = new java.awt.image.BufferedImage;

        $r4 = virtualinvoke r3.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r1, $r4, $z0, null);

        $r5 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.RenderingHints hints>;

        $r6 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.Graphics2D createGraphics(java.awt.image.BufferedImage,java.awt.RenderingHints)>($r2, $r5);

        $i0 = virtualinvoke r3.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r3.<java.awt.image.Raster: int getMinY()>();

        $i2 = virtualinvoke r3.<java.awt.image.Raster: int getWidth()>();

        $i3 = virtualinvoke r3.<java.awt.image.Raster: int getHeight()>();

        $r7 = <java.awt.AlphaComposite: java.awt.AlphaComposite Clear>;

        virtualinvoke $r6.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r7);

        $r8 = new java.awt.Color;

        specialinvoke $r8.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, 0);

        virtualinvoke $r6.<java.awt.Graphics: void setColor(java.awt.Color)>($r8);

        virtualinvoke $r6.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i2, $i3);

        $r9 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        virtualinvoke $r6.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r9);

        $i5 = neg $i0;

        $i4 = neg $i1;

        virtualinvoke $r6.<java.awt.Graphics2D: void translate(int,int)>($i5, $i4);

        $i6 = interfaceinvoke r10.<java.awt.image.RenderedImage: int getMinX()>();

        $i7 = interfaceinvoke r10.<java.awt.image.RenderedImage: int getWidth()>();

        $i8 = $i6 + $i7;

        i9 = $i8 - 1;

        $i10 = interfaceinvoke r10.<java.awt.image.RenderedImage: int getMinY()>();

        $i11 = interfaceinvoke r10.<java.awt.image.RenderedImage: int getHeight()>();

        $i12 = $i10 + $i11;

        i13 = $i12 - 1;

        $i15 = $i0 - i9;

        $i14 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep>;

        $i16 = $i15 / $i14;

        $d0 = (double) $i16;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i18 = (int) $d1;

        $i17 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep>;

        i19 = $i18 * $i17;

        $i21 = $i1 - i13;

        $i20 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        $i22 = $i21 / $i20;

        $d2 = (double) $i22;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $i24 = (int) $d3;

        $i23 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        i25 = $i24 * $i23;

        virtualinvoke $r6.<java.awt.Graphics2D: void translate(int,int)>(i19, i25);

        $i26 = virtualinvoke r3.<java.awt.image.Raster: int getMinX()>();

        $i27 = i19 - $i26;

        $i28 = interfaceinvoke r10.<java.awt.image.RenderedImage: int getMinX()>();

        i37 = $i27 + $i28;

        $i29 = virtualinvoke r3.<java.awt.image.Raster: int getMinY()>();

        $i30 = i25 - $i29;

        $i31 = interfaceinvoke r10.<java.awt.image.RenderedImage: int getMinY()>();

        i38 = $i30 + $i31;

        i39 = i37;

        goto label4;

     label1:
        $z1 = staticinvoke <org.apache.batik.util.HaltingThread: boolean hasBeenHalted()>();

        if $z1 == 0 goto label3;

        return r3;

     label2:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,java.awt.image.RenderedImage)>($r6, r10);

        $i32 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep>;

        i37 = i37 + $i32;

        $i33 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep>;

        virtualinvoke $r6.<java.awt.Graphics2D: void translate(int,int)>($i33, 0);

     label3:
        if i37 < $i2 goto label2;

        $i34 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        i38 = i38 + $i34;

        $i36 = i39 - i37;

        $i35 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        virtualinvoke $r6.<java.awt.Graphics2D: void translate(int,int)>($i36, $i35);

        i37 = i39;

     label4:
        if i38 < $i3 goto label1;

        return r3;
    }

    protected void fillOutRaster(java.awt.image.WritableRaster)
    {
        java.awt.image.WritableRaster r1;
        org.apache.batik.ext.awt.image.rendered.TileRed r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        r1 := @parameter0: java.awt.image.WritableRaster;

        $z0 = r0.<org.apache.batik.ext.awt.image.rendered.TileRed: boolean is_INT_PACK>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TileRed: void fillOutRaster_INT_PACK(java.awt.image.WritableRaster)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.TileRed: void fillOutRaster_FALLBACK(java.awt.image.WritableRaster)>(r1);

     label2:
        return;
    }

    protected void fillOutRaster_INT_PACK(java.awt.image.WritableRaster)
    {
        int[][] $r5;
        java.awt.image.SampleModel $r1;
        int[] r6;
        org.apache.batik.ext.awt.image.rendered.TileRed r7;
        java.awt.image.DataBuffer $r3;
        java.awt.image.DataBufferInt r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40;
        java.awt.image.SinglePixelPackedSampleModel r2;
        java.awt.image.WritableRaster r0;

        r7 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r2 = (java.awt.image.SinglePixelPackedSampleModel) $r1;

        $i4 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r3 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r4 = (java.awt.image.DataBufferInt) $r3;

        $r5 = virtualinvoke r4.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r6 = $r5[0];

        $i5 = virtualinvoke r4.<java.awt.image.DataBuffer: int getOffset()>();

        $i6 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i7 = $i0 - $i6;

        $i8 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i9 = $i1 - $i8;

        $i10 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i7, $i9);

        i11 = $i5 + $i10;

        i27 = r7.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep>;

        i28 = r7.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep>;

        goto label11;

     label01:
        i29 = i27;

        $i12 = i28 + i27;

        if $i12 <= $i2 goto label02;

        i29 = $i2 - i28;

     label02:
        if i29 < 128 goto label05;

        i30 = i11;

        i31 = i11 + i28;

        i32 = 0;

        goto label04;

     label03:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, i30, r6, i31, i29);

        i30 = i30 + $i4;

        i31 = i31 + $i4;

        i32 = i32 + 1;

     label04:
        $i22 = r7.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        if i32 < $i22 goto label03;

        goto label10;

     label05:
        i33 = i11;

        i34 = i11 + i28;

        i35 = 0;

        goto label09;

     label06:
        i14 = i33;

        $i15 = i29 - 1;

        i36 = i33 + $i15;

        $i16 = i29 - 1;

        i37 = i34 + $i16;

        goto label08;

     label07:
        $i17 = i37;

        i37 = i37 - 1;

        $i18 = i36;

        i36 = i36 - 1;

        $i19 = r6[$i18];

        r6[$i17] = $i19;

     label08:
        if i36 >= i14 goto label07;

        $i20 = $i4 + 1;

        i33 = i36 + $i20;

        $i21 = $i4 + 1;

        i34 = i37 + $i21;

        i35 = i35 + 1;

     label09:
        $i13 = r7.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        if i35 < $i13 goto label06;

     label10:
        i28 = i28 + i27;

        i27 = i27 * 2;

     label11:
        if i28 < $i2 goto label01;

        i38 = r7.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        i39 = r7.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        goto label14;

     label12:
        i40 = i38;

        $i23 = i39 + i38;

        if $i23 <= $i3 goto label13;

        i40 = $i3 - i39;

     label13:
        $i24 = i39 * $i4;

        $i26 = i11 + $i24;

        $i25 = i40 * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, i11, r6, $i26, $i25);

        i39 = i39 + i38;

        i38 = i38 * 2;

     label14:
        if i39 < $i3 goto label12;

        return;
    }

    protected void fillOutRaster_FALLBACK(java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.rendered.TileRed r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, i22;
        java.awt.image.WritableRaster r0;
        java.lang.Object $r2, $r3, r4;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.TileRed;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        r4 = null;

        i17 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep>;

        i18 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int xStep>;

        goto label07;

     label01:
        i19 = i17;

        $i2 = i18 + i17;

        if $i2 <= $i0 goto label02;

        i19 = $i0 - i18;

     label02:
        $i3 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        $r2 = virtualinvoke r0.<java.awt.image.Raster: java.lang.Object getDataElements(int,int,int,int,java.lang.Object)>(0, 0, i19, $i3, r4);

        r4 = $r2;

        $i4 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        virtualinvoke r0.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>(i18, 0, i19, $i4, $r2);

        $i16 = i18 + i19;

        if $i16 < $i0 goto label03;

        goto label08;

     label03:
        $i5 = $i16 + i19;

        if $i5 <= $i0 goto label04;

        i19 = $i0 - $i16;

     label04:
        $i6 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        virtualinvoke r0.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>($i16, 0, i19, $i6, $r2);

        $i15 = $i16 + i19;

        if $i15 < $i0 goto label05;

        goto label08;

     label05:
        $i7 = $i15 + i19;

        if $i7 <= $i0 goto label06;

        i19 = $i0 - $i15;

     label06:
        $i8 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        virtualinvoke r0.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>($i15, 0, i19, $i8, $r2);

        i18 = $i15 + i17;

        i17 = i17 * 4;

     label07:
        if i18 < $i0 goto label01;

     label08:
        i20 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        i21 = r1.<org.apache.batik.ext.awt.image.rendered.TileRed: int yStep>;

        goto label15;

     label09:
        i22 = i20;

        $i9 = i21 + i20;

        if $i9 <= $i1 goto label10;

        i22 = $i1 - i21;

     label10:
        $r3 = virtualinvoke r0.<java.awt.image.Raster: java.lang.Object getDataElements(int,int,int,int,java.lang.Object)>(0, 0, $i0, i22, r4);

        r4 = $r3;

        virtualinvoke r0.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>(0, i21, $i0, i22, $r3);

        $i14 = i21 + i22;

        if i22 < $i1 goto label11;

        goto label16;

     label11:
        $i10 = $i14 + i22;

        if $i10 <= $i1 goto label12;

        i22 = $i1 - $i14;

     label12:
        virtualinvoke r0.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>(0, $i14, $i0, i22, $r3);

        $i13 = $i14 + i22;

        if i22 < $i1 goto label13;

        goto label16;

     label13:
        $i11 = $i13 + i22;

        if $i11 <= $i1 goto label14;

        i22 = $i1 - $i13;

     label14:
        virtualinvoke r0.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>(0, $i13, $i0, i22, $r3);

        $i12 = $i13 + i22;

        i21 = $i12 + i20;

        i20 = i20 * 4;

     label15:
        if i21 < $i1 goto label09;

     label16:
        return;
    }

    protected static java.awt.image.SampleModel fixSampleModel(java.awt.image.RenderedImage, int, int, int, int)
    {
        java.awt.image.RenderedImage r0;
        java.awt.image.SampleModel $r1, $r2;
        int $i0, $i1, i2, $i3, i4, i5, i6, i7, i8;

        r0 := @parameter0: java.awt.image.RenderedImage;

        i2 := @parameter1: int;

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        i6 := @parameter4: int;

        $i0 = staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: int getDefaultTileSize()>();

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i1 = virtualinvoke $r1.<java.awt.image.SampleModel: int getWidth()>();

        i7 = $i1;

        if $i1 >= $i0 goto label1;

        i7 = $i0;

     label1:
        if i7 <= i2 goto label2;

        i7 = i2;

     label2:
        $i3 = virtualinvoke $r1.<java.awt.image.SampleModel: int getHeight()>();

        i8 = $i3;

        if $i3 >= $i0 goto label3;

        i8 = $i0;

     label3:
        if i8 <= i4 goto label4;

        i8 = i4;

     label4:
        $r2 = virtualinvoke $r1.<java.awt.image.SampleModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>(i7, i8);

        return $r2;
    }

    static void <clinit>()
    {
        java.awt.geom.AffineTransform $r0;

        $r0 = new java.awt.geom.AffineTransform;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();

        <org.apache.batik.ext.awt.image.rendered.TileRed: java.awt.geom.AffineTransform IDENTITY> = $r0;

        return;
    }
}
