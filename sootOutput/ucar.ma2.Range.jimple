public final class ucar.ma2.Range extends java.lang.Object
{
    public static final ucar.ma2.Range EMPTY;
    public static final ucar.ma2.Range VLEN;
    private final int n;
    private final int first;
    private final int stride;
    private final java.lang.String name;
    private int hashCode;

    private void <init>()
    {
        ucar.ma2.Range r0;

        r0 := @this: ucar.ma2.Range;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Range: int hashCode> = 0;

        r0.<ucar.ma2.Range: int n> = 0;

        r0.<ucar.ma2.Range: int first> = 0;

        r0.<ucar.ma2.Range: int stride> = 1;

        r0.<ucar.ma2.Range: java.lang.String name> = null;

        return;
    }

    public void <init>(int, int) throws ucar.ma2.InvalidRangeException
    {
        int i0, i1;
        ucar.ma2.Range r0;

        r0 := @this: ucar.ma2.Range;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<ucar.ma2.Range: void <init>(java.lang.String,int,int,int)>(null, i0, i1, 1);

        return;
    }

    public void <init>(int)
    {
        int i0;
        ucar.ma2.Range r0;

        r0 := @this: ucar.ma2.Range;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Range: int hashCode> = 0;

        r0.<ucar.ma2.Range: java.lang.String name> = null;

        r0.<ucar.ma2.Range: int first> = 0;

        r0.<ucar.ma2.Range: int stride> = 1;

        r0.<ucar.ma2.Range: int n> = i0;

        return;
    }

    public void <init>(java.lang.String, int, int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: ucar.ma2.Range;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<ucar.ma2.Range: void <init>(java.lang.String,int,int,int)>(r1, i0, i1, 1);

        return;
    }

    public void <init>(int, int, int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r0;
        int i0, i1, i2;

        r0 := @this: ucar.ma2.Range;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<ucar.ma2.Range: void <init>(java.lang.String,int,int,int)>(null, i0, i1, i2);

        return;
    }

    public void <init>(java.lang.String, int, int, int) throws ucar.ma2.InvalidRangeException
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.String r1, $r7, $r15, $r21;
        ucar.ma2.Range r0;
        ucar.ma2.InvalidRangeException $r2, $r8, $r16;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20;

        r0 := @this: ucar.ma2.Range;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Range: int hashCode> = 0;

        if i0 >= 0 goto label1;

        $r16 = new ucar.ma2.InvalidRangeException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("first (");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label1:
        if i1 >= i0 goto label2;

        $r8 = new ucar.ma2.InvalidRangeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("last (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= first (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label2:
        if i2 >= 1 goto label3;

        $r2 = new ucar.ma2.InvalidRangeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stride (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label3:
        r0.<ucar.ma2.Range: java.lang.String name> = r1;

        r0.<ucar.ma2.Range: int first> = i0;

        r0.<ucar.ma2.Range: int stride> = i2;

        $i3 = i1 - i0;

        $i4 = $i3 / i2;

        $i5 = 1 + $i4;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>($i5, 1);

        r0.<ucar.ma2.Range: int n> = $i6;

        return;
    }

    public void <init>(ucar.ma2.Range)
    {
        ucar.ma2.Range r0, r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        r0 := @this: ucar.ma2.Range;

        r1 := @parameter0: ucar.ma2.Range;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Range: int hashCode> = 0;

        $i0 = virtualinvoke r1.<ucar.ma2.Range: int first()>();

        r0.<ucar.ma2.Range: int first> = $i0;

        $i1 = virtualinvoke r1.<ucar.ma2.Range: int length()>();

        r0.<ucar.ma2.Range: int n> = $i1;

        $i2 = virtualinvoke r1.<ucar.ma2.Range: int stride()>();

        r0.<ucar.ma2.Range: int stride> = $i2;

        $r2 = virtualinvoke r1.<ucar.ma2.Range: java.lang.String getName()>();

        r0.<ucar.ma2.Range: java.lang.String name> = $r2;

        return;
    }

    public void <init>(java.lang.String, ucar.ma2.Range)
    {
        ucar.ma2.Range r0, r2;
        int $i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: ucar.ma2.Range;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: ucar.ma2.Range;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Range: int hashCode> = 0;

        r0.<ucar.ma2.Range: java.lang.String name> = r1;

        $i0 = virtualinvoke r2.<ucar.ma2.Range: int first()>();

        r0.<ucar.ma2.Range: int first> = $i0;

        $i1 = virtualinvoke r2.<ucar.ma2.Range: int length()>();

        r0.<ucar.ma2.Range: int n> = $i1;

        $i2 = virtualinvoke r2.<ucar.ma2.Range: int stride()>();

        r0.<ucar.ma2.Range: int stride> = $i2;

        return;
    }

    public ucar.ma2.Range compose(ucar.ma2.Range) throws ucar.ma2.InvalidRangeException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8;
        java.lang.String $r7;
        ucar.ma2.Range r0, $r1, r2, $r3, $r4, $r5, $r6;

        r0 := @this: ucar.ma2.Range;

        r2 := @parameter0: ucar.ma2.Range;

        $i0 = virtualinvoke r0.<ucar.ma2.Range: int length()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r2.<ucar.ma2.Range: int length()>();

        if $i1 != 0 goto label2;

     label1:
        $r1 = <ucar.ma2.Range: ucar.ma2.Range EMPTY>;

        return $r1;

     label2:
        $r3 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r0 == $r3 goto label3;

        $r5 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r2 != $r5 goto label4;

     label3:
        $r4 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        return $r4;

     label4:
        $i2 = virtualinvoke r2.<ucar.ma2.Range: int first()>();

        $i3 = virtualinvoke r0.<ucar.ma2.Range: int element(int)>($i2);

        $i4 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        $i5 = virtualinvoke r2.<ucar.ma2.Range: int stride()>();

        i6 = $i4 * $i5;

        $i7 = virtualinvoke r2.<ucar.ma2.Range: int last()>();

        $i8 = virtualinvoke r0.<ucar.ma2.Range: int element(int)>($i7);

        $r6 = new ucar.ma2.Range;

        $r7 = r0.<ucar.ma2.Range: java.lang.String name>;

        specialinvoke $r6.<ucar.ma2.Range: void <init>(java.lang.String,int,int,int)>($r7, $i3, $i8, i6);

        return $r6;
    }

    public ucar.ma2.Range compact() throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r0, $r1;
        int $i0, $i1, $i2, i3, $i4, $i5, i6;
        java.lang.String $r2;

        r0 := @this: ucar.ma2.Range;

        $i0 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        if $i0 != 1 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i2 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        i3 = $i1 / $i2;

        $i4 = virtualinvoke r0.<ucar.ma2.Range: int length()>();

        $i5 = i3 + $i4;

        i6 = $i5 - 1;

        $r1 = new ucar.ma2.Range;

        $r2 = r0.<ucar.ma2.Range: java.lang.String name>;

        specialinvoke $r1.<ucar.ma2.Range: void <init>(java.lang.String,int,int,int)>($r2, i3, i6, 1);

        return $r1;
    }

    public ucar.ma2.Range shiftOrigin(int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r0, $r1, $r2, $r4;
        int $i0, i1, i2, $i3, $i4, i5;
        java.lang.String $r3;

        r0 := @this: ucar.ma2.Range;

        i1 := @parameter0: int;

        $r1 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r0 != $r1 goto label1;

        $r4 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        return $r4;

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        i2 = $i0 - i1;

        $i3 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        $i4 = virtualinvoke r0.<ucar.ma2.Range: int last()>();

        i5 = $i4 - i1;

        $r2 = new ucar.ma2.Range;

        $r3 = r0.<ucar.ma2.Range: java.lang.String name>;

        specialinvoke $r2.<ucar.ma2.Range: void <init>(java.lang.String,int,int,int)>($r3, i2, i5, $i3);

        return $r2;
    }

    public ucar.ma2.Range intersect(ucar.ma2.Range) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r0, $r1, r2, $r3, $r4, $r5, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30;
        java.lang.String $r8;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: ucar.ma2.Range;

        r2 := @parameter0: ucar.ma2.Range;

        $i0 = virtualinvoke r0.<ucar.ma2.Range: int length()>();

        if $i0 == 0 goto label01;

        $i1 = virtualinvoke r2.<ucar.ma2.Range: int length()>();

        if $i1 != 0 goto label02;

     label01:
        $r1 = <ucar.ma2.Range: ucar.ma2.Range EMPTY>;

        return $r1;

     label02:
        $r3 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r0 == $r3 goto label03;

        $r5 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r2 != $r5 goto label04;

     label03:
        $r4 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        return $r4;

     label04:
        $i2 = virtualinvoke r0.<ucar.ma2.Range: int last()>();

        $i3 = virtualinvoke r2.<ucar.ma2.Range: int last()>();

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $i5 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        $i6 = virtualinvoke r2.<ucar.ma2.Range: int stride()>();

        i7 = $i5 * $i6;

        if i7 != 1 goto label05;

        $i26 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i27 = virtualinvoke r2.<ucar.ma2.Range: int first()>();

        i28 = staticinvoke <java.lang.Math: int max(int,int)>($i26, $i27);

        goto label12;

     label05:
        $i8 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        if $i8 != 1 goto label08;

        $i18 = virtualinvoke r2.<ucar.ma2.Range: int first()>();

        $i19 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        if $i18 < $i19 goto label06;

        i28 = virtualinvoke r2.<ucar.ma2.Range: int first()>();

        goto label12;

     label06:
        $i20 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i21 = virtualinvoke r2.<ucar.ma2.Range: int first()>();

        $i22 = $i20 - $i21;

        i29 = $i22 / i7;

        $i23 = virtualinvoke r2.<ucar.ma2.Range: int first()>();

        $i24 = i29 * i7;

        i28 = $i23 + $i24;

        $i25 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        if i28 >= $i25 goto label07;

        i28 = i28 + i7;

     label07:
        goto label12;

     label08:
        $i9 = virtualinvoke r2.<ucar.ma2.Range: int stride()>();

        if $i9 != 1 goto label11;

        $i10 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i11 = virtualinvoke r2.<ucar.ma2.Range: int first()>();

        if $i10 < $i11 goto label09;

        i28 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        goto label12;

     label09:
        $i12 = virtualinvoke r2.<ucar.ma2.Range: int first()>();

        $i13 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i14 = $i12 - $i13;

        i30 = $i14 / i7;

        $i15 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i16 = i30 * i7;

        i28 = $i15 + $i16;

        $i17 = virtualinvoke r2.<ucar.ma2.Range: int first()>();

        if i28 >= $i17 goto label10;

        i28 = i28 + i7;

     label10:
        goto label12;

     label11:
        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Intersection when both ranges have a stride");

        throw $r6;

     label12:
        if i28 <= $i4 goto label13;

        $r9 = <ucar.ma2.Range: ucar.ma2.Range EMPTY>;

        return $r9;

     label13:
        $r7 = new ucar.ma2.Range;

        $r8 = r0.<ucar.ma2.Range: java.lang.String name>;

        specialinvoke $r7.<ucar.ma2.Range: void <init>(java.lang.String,int,int,int)>($r8, i28, $i4, i7);

        return $r7;
    }

    public boolean intersects(ucar.ma2.Range)
    {
        boolean $z0;
        ucar.ma2.Range r0, r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: ucar.ma2.Range;

        r1 := @parameter0: ucar.ma2.Range;

        $i0 = virtualinvoke r0.<ucar.ma2.Range: int length()>();

        if $i0 == 0 goto label01;

        $i1 = virtualinvoke r1.<ucar.ma2.Range: int length()>();

        if $i1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r2 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r0 == $r2 goto label03;

        $r3 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r1 != $r3 goto label04;

     label03:
        return 1;

     label04:
        $i2 = virtualinvoke r0.<ucar.ma2.Range: int last()>();

        $i3 = virtualinvoke r1.<ucar.ma2.Range: int last()>();

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $i5 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        $i6 = virtualinvoke r1.<ucar.ma2.Range: int stride()>();

        i7 = $i5 * $i6;

        if i7 != 1 goto label05;

        $i26 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i27 = virtualinvoke r1.<ucar.ma2.Range: int first()>();

        i28 = staticinvoke <java.lang.Math: int max(int,int)>($i26, $i27);

        goto label12;

     label05:
        $i8 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        if $i8 != 1 goto label08;

        $i18 = virtualinvoke r1.<ucar.ma2.Range: int first()>();

        $i19 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        if $i18 < $i19 goto label06;

        i28 = virtualinvoke r1.<ucar.ma2.Range: int first()>();

        goto label12;

     label06:
        $i20 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i21 = virtualinvoke r1.<ucar.ma2.Range: int first()>();

        $i22 = $i20 - $i21;

        i29 = $i22 / i7;

        $i23 = virtualinvoke r1.<ucar.ma2.Range: int first()>();

        $i24 = i29 * i7;

        i28 = $i23 + $i24;

        $i25 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        if i28 >= $i25 goto label07;

        i28 = i28 + i7;

     label07:
        goto label12;

     label08:
        $i9 = virtualinvoke r1.<ucar.ma2.Range: int stride()>();

        if $i9 != 1 goto label11;

        $i10 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i11 = virtualinvoke r1.<ucar.ma2.Range: int first()>();

        if $i10 < $i11 goto label09;

        i28 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        goto label12;

     label09:
        $i12 = virtualinvoke r1.<ucar.ma2.Range: int first()>();

        $i13 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i14 = $i12 - $i13;

        i30 = $i14 / i7;

        $i15 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i16 = i30 * i7;

        i28 = $i15 + $i16;

        $i17 = virtualinvoke r1.<ucar.ma2.Range: int first()>();

        if i28 >= $i17 goto label10;

        i28 = i28 + i7;

     label10:
        goto label12;

     label11:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Intersection when both ranges have a stride");

        throw $r4;

     label12:
        if i28 > $i4 goto label13;

        $z0 = 1;

        goto label14;

     label13:
        $z0 = 0;

     label14:
        return $z0;
    }

    public boolean past(ucar.ma2.Range)
    {
        ucar.ma2.Range r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: ucar.ma2.Range;

        r1 := @parameter0: ucar.ma2.Range;

        $i0 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i1 = virtualinvoke r1.<ucar.ma2.Range: int last()>();

        if $i0 <= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public ucar.ma2.Range union(ucar.ma2.Range) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r0, $r1, $r2, r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r6;

        r0 := @this: ucar.ma2.Range;

        r3 := @parameter0: ucar.ma2.Range;

        $i0 = virtualinvoke r0.<ucar.ma2.Range: int length()>();

        if $i0 != 0 goto label1;

        return r3;

     label1:
        $r1 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r0 == $r1 goto label2;

        $r4 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        if r3 != $r4 goto label3;

     label2:
        $r2 = <ucar.ma2.Range: ucar.ma2.Range VLEN>;

        return $r2;

     label3:
        $i1 = virtualinvoke r3.<ucar.ma2.Range: int length()>();

        if $i1 != 0 goto label4;

        return r0;

     label4:
        $i2 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i3 = virtualinvoke r3.<ucar.ma2.Range: int first()>();

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $i5 = virtualinvoke r0.<ucar.ma2.Range: int last()>();

        $i6 = virtualinvoke r3.<ucar.ma2.Range: int last()>();

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i6);

        $r5 = new ucar.ma2.Range;

        $r6 = r0.<ucar.ma2.Range: java.lang.String name>;

        specialinvoke $r5.<ucar.ma2.Range: void <init>(java.lang.String,int,int)>($r6, $i4, $i7);

        return $r5;
    }

    public int length()
    {
        int $i0;
        ucar.ma2.Range r0;

        r0 := @this: ucar.ma2.Range;

        $i0 = r0.<ucar.ma2.Range: int n>;

        return $i0;
    }

    public int element(int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r0;
        ucar.ma2.InvalidRangeException $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: ucar.ma2.Range;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r2.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("i must be >= 0");

        throw $r2;

     label1:
        $i1 = r0.<ucar.ma2.Range: int n>;

        if i0 < $i1 goto label2;

        $r1 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r1.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("i must be < length");

        throw $r1;

     label2:
        $i4 = r0.<ucar.ma2.Range: int first>;

        $i2 = r0.<ucar.ma2.Range: int stride>;

        $i3 = i0 * $i2;

        $i5 = $i4 + $i3;

        return $i5;
    }

    public int index(int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r0;
        ucar.ma2.InvalidRangeException $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, i5, $i6;

        r0 := @this: ucar.ma2.Range;

        i0 := @parameter0: int;

        $i1 = r0.<ucar.ma2.Range: int first>;

        if i0 >= $i1 goto label1;

        $r2 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r2.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("elem must be >= first");

        throw $r2;

     label1:
        $i2 = r0.<ucar.ma2.Range: int first>;

        $i4 = i0 - $i2;

        $i3 = r0.<ucar.ma2.Range: int stride>;

        i5 = $i4 / $i3;

        $i6 = r0.<ucar.ma2.Range: int n>;

        if i5 <= $i6 goto label2;

        $r1 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r1.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("elem must be <= first = n * stride");

        throw $r1;

     label2:
        return i5;
    }

    public boolean contains(int)
    {
        ucar.ma2.Range r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        r0 := @this: ucar.ma2.Range;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        if i0 >= $i1 goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r0.<ucar.ma2.Range: int last()>();

        if i0 <= $i2 goto label2;

        return 0;

     label2:
        $i3 = r0.<ucar.ma2.Range: int stride>;

        if $i3 != 1 goto label3;

        return 1;

     label3:
        $i4 = r0.<ucar.ma2.Range: int first>;

        $i6 = i0 - $i4;

        $i5 = r0.<ucar.ma2.Range: int stride>;

        $i7 = $i6 % $i5;

        if $i7 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    private int elementNC(int)
    {
        ucar.ma2.Range r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: ucar.ma2.Range;

        i0 := @parameter0: int;

        $i3 = r0.<ucar.ma2.Range: int first>;

        $i1 = r0.<ucar.ma2.Range: int stride>;

        $i2 = i0 * $i1;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public int first()
    {
        int $i0;
        ucar.ma2.Range r0;

        r0 := @this: ucar.ma2.Range;

        $i0 = r0.<ucar.ma2.Range: int first>;

        return $i0;
    }

    public int last()
    {
        ucar.ma2.Range r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: ucar.ma2.Range;

        $i4 = r0.<ucar.ma2.Range: int first>;

        $i0 = r0.<ucar.ma2.Range: int n>;

        $i2 = $i0 - 1;

        $i1 = r0.<ucar.ma2.Range: int stride>;

        $i3 = $i2 * $i1;

        $i5 = $i4 + $i3;

        return $i5;
    }

    public int stride()
    {
        int $i0;
        ucar.ma2.Range r0;

        r0 := @this: ucar.ma2.Range;

        $i0 = r0.<ucar.ma2.Range: int stride>;

        return $i0;
    }

    public java.lang.String getName()
    {
        ucar.ma2.Range r0;
        java.lang.String $r1;

        r0 := @this: ucar.ma2.Range;

        $r1 = r0.<ucar.ma2.Range: java.lang.String name>;

        return $r1;
    }

    public ucar.ma2.Range$Iterator getIterator()
    {
        ucar.ma2.Range r1;
        ucar.ma2.Range$Iterator $r0;

        r1 := @this: ucar.ma2.Range;

        $r0 = new ucar.ma2.Range$Iterator;

        specialinvoke $r0.<ucar.ma2.Range$Iterator: void <init>(ucar.ma2.Range)>(r1);

        return $r0;
    }

    public int getFirstInInterval(int)
    {
        ucar.ma2.Range r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, i7, i8, $i9, $i10, $i11, $i13, $i15;

        r0 := @this: ucar.ma2.Range;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<ucar.ma2.Range: int last()>();

        if i0 <= $i1 goto label1;

        $i13 = (int) -1;

        return $i13;

     label1:
        $i2 = r0.<ucar.ma2.Range: int first>;

        if i0 > $i2 goto label2;

        $i10 = r0.<ucar.ma2.Range: int first>;

        return $i10;

     label2:
        $i3 = r0.<ucar.ma2.Range: int stride>;

        if $i3 != 1 goto label3;

        return i0;

     label3:
        $i4 = r0.<ucar.ma2.Range: int first>;

        i5 = i0 - $i4;

        $i6 = r0.<ucar.ma2.Range: int stride>;

        i7 = i5 % $i6;

        i8 = i0 + i7;

        $i9 = virtualinvoke r0.<ucar.ma2.Range: int last()>();

        if i8 <= $i9 goto label4;

        $i15 = (int) -1;

        $i11 = $i15;

        goto label5;

     label4:
        $i11 = i8;

     label5:
        return $i11;
    }

    public java.lang.String toString()
    {
        ucar.ma2.Range r1;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5, $r7, $r8, $r9;
        java.lang.String $r6, $r10;

        r1 := @this: ucar.ma2.Range;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = r1.<ucar.ma2.Range: int first>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i1 = virtualinvoke r1.<ucar.ma2.Range: int last()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $i2 = r1.<ucar.ma2.Range: int stride>;

        if $i2 <= 1 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i3 = r1.<ucar.ma2.Range: int stride>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r10 = "";

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean equals(java.lang.Object)
    {
        ucar.ma2.Range r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: ucar.ma2.Range;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof ucar.ma2.Range;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (ucar.ma2.Range) r1;

        $i0 = r0.<ucar.ma2.Range: int n>;

        if $i0 != 0 goto label3;

        $i7 = r2.<ucar.ma2.Range: int n>;

        if $i7 != 0 goto label3;

        return 1;

     label3:
        $i2 = r2.<ucar.ma2.Range: int first>;

        $i1 = r0.<ucar.ma2.Range: int first>;

        if $i2 != $i1 goto label4;

        $i4 = r2.<ucar.ma2.Range: int n>;

        $i3 = r0.<ucar.ma2.Range: int n>;

        if $i4 != $i3 goto label4;

        $i6 = r2.<ucar.ma2.Range: int stride>;

        $i5 = r0.<ucar.ma2.Range: int stride>;

        if $i6 != $i5 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public int hashCode()
    {
        ucar.ma2.Range r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;

        r0 := @this: ucar.ma2.Range;

        $i0 = r0.<ucar.ma2.Range: int hashCode>;

        if $i0 != 0 goto label1;

        $i2 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

        $i3 = 37 * $i2;

        $i4 = virtualinvoke r0.<ucar.ma2.Range: int last()>();

        i7 = $i3 + $i4;

        $i5 = 37 * i7;

        $i6 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        i8 = $i5 + $i6;

        r0.<ucar.ma2.Range: int hashCode> = i8;

     label1:
        $i1 = r0.<ucar.ma2.Range: int hashCode>;

        return $i1;
    }

    public int min()
    {
        ucar.ma2.Range r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: ucar.ma2.Range;

        $i0 = r0.<ucar.ma2.Range: int n>;

        if $i0 <= 0 goto label2;

        $i2 = r0.<ucar.ma2.Range: int stride>;

        if $i2 <= 0 goto label1;

        $i9 = r0.<ucar.ma2.Range: int first>;

        return $i9;

     label1:
        $i7 = r0.<ucar.ma2.Range: int first>;

        $i3 = r0.<ucar.ma2.Range: int n>;

        $i5 = $i3 - 1;

        $i4 = r0.<ucar.ma2.Range: int stride>;

        $i6 = $i5 * $i4;

        $i8 = $i7 + $i6;

        return $i8;

     label2:
        $i1 = r0.<ucar.ma2.Range: int first>;

        return $i1;
    }

    public int max()
    {
        ucar.ma2.Range r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: ucar.ma2.Range;

        $i0 = r0.<ucar.ma2.Range: int n>;

        if $i0 <= 0 goto label2;

        $i6 = r0.<ucar.ma2.Range: int stride>;

        if $i6 <= 0 goto label1;

        $i12 = r0.<ucar.ma2.Range: int first>;

        $i8 = r0.<ucar.ma2.Range: int n>;

        $i10 = $i8 - 1;

        $i9 = r0.<ucar.ma2.Range: int stride>;

        $i11 = $i10 * $i9;

        $i13 = $i12 + $i11;

        return $i13;

     label1:
        $i7 = r0.<ucar.ma2.Range: int first>;

        return $i7;

     label2:
        $i1 = r0.<ucar.ma2.Range: int stride>;

        if $i1 <= 0 goto label3;

        $i4 = r0.<ucar.ma2.Range: int first>;

        $i5 = $i4 - 1;

        return $i5;

     label3:
        $i2 = r0.<ucar.ma2.Range: int first>;

        $i3 = $i2 + 1;

        return $i3;
    }

    public static java.util.List factory(int[])
    {
        ucar.ma2.Range $r5;
        java.util.ArrayList $r4;
        ucar.ma2.InvalidRangeException $r3;
        int[] r1;
        int $i0, $i1, $i2, $i3, i4, $i6;

        r1 := @parameter0: int[];

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label1:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label6;

     label2:
        $r5 = new ucar.ma2.Range;

        $i1 = r1[i4];

        $i2 = $i1 - 1;

        $i6 = (int) -1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i6);

        specialinvoke $r5.<ucar.ma2.Range: void <init>(int,int)>(0, $i3);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        return null;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return $r4;

        catch ucar.ma2.InvalidRangeException from label2 to label3 with label4;
    }

    public static java.util.List setDefaults(java.util.List, int[])
    {
        ucar.ma2.Range r2, $r3, $r5;
        java.util.ArrayList $r4;
        ucar.ma2.InvalidRangeException $r6;
        java.util.List r7;
        int[] r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.Object $r1;

        r7 := @parameter0: java.util.List;

        r0 := @parameter1: int[];

     label1:
        if r7 != null goto label4;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i5 = 0;

     label2:
        $i3 = lengthof r0;

        if i5 >= $i3 goto label3;

        $r5 = new ucar.ma2.Range;

        $i4 = r0[i5];

        specialinvoke $r5.<ucar.ma2.Range: void <init>(int,int)>(0, $i4);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        i5 = i5 + 1;

        goto label2;

     label3:
        return $r4;

     label4:
        i6 = 0;

     label5:
        $i0 = lengthof r0;

        if i6 >= $i0 goto label7;

        $r1 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i6);

        r2 = (ucar.ma2.Range) $r1;

        if r2 != null goto label6;

        $r3 = new ucar.ma2.Range;

        $i1 = r0[i6];

        $i2 = $i1 - 1;

        specialinvoke $r3.<ucar.ma2.Range: void <init>(int,int)>(0, $i2);

        interfaceinvoke r7.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i6, $r3);

     label6:
        i6 = i6 + 1;

        goto label5;

     label7:
        return r7;

     label8:
        $r6 := @caughtexception;

        return null;

        catch ucar.ma2.InvalidRangeException from label1 to label3 with label8;
        catch ucar.ma2.InvalidRangeException from label4 to label7 with label8;
    }

    public static java.util.List factory(int[], int[]) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range $r2;
        java.lang.Exception $r4;
        java.util.ArrayList $r0;
        ucar.ma2.InvalidRangeException $r5;
        int[] r1, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r6;

        r3 := @parameter0: int[];

        r1 := @parameter1: int[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i6 = 0;

     label1:
        $i0 = lengthof r1;

        if i6 >= $i0 goto label6;

     label2:
        $r2 = new ucar.ma2.Range;

        $i5 = r3[i6];

        $i2 = r3[i6];

        $i1 = r1[i6];

        $i3 = $i2 + $i1;

        $i4 = $i3 - 1;

        specialinvoke $r2.<ucar.ma2.Range: void <init>(int,int)>($i5, $i4);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = new ucar.ma2.InvalidRangeException;

        $r6 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r5.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label5:
        i6 = i6 + 1;

        goto label1;

     label6:
        return $r0;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static int[] getShape(java.util.List)
    {
        ucar.ma2.Range $r3;
        java.util.List r0;
        int[] r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (int)[$i0];

        i3 = 0;

     label2:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i1 goto label3;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = (ucar.ma2.Range) $r2;

        $i2 = virtualinvoke $r3.<ucar.ma2.Range: int length()>();

        r1[i3] = $i2;

        i3 = i3 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static java.lang.String toString(java.util.List)
    {
        ucar.ma2.Range $r4;
        java.util.List r0;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r1;
        java.lang.Object $r3;
        java.lang.String $r2;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 >= $i0 goto label4;

        if i2 <= 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label3:
        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (ucar.ma2.Range) $r3;

        $i1 = virtualinvoke $r4.<ucar.ma2.Range: int length()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        i2 = i2 + 1;

        goto label2;

     label4:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static long computeSize(java.util.List)
    {
        java.util.List r0;
        long $l0;
        int[] $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <ucar.ma2.Range: int[] getShape(java.util.List)>(r0);

        $l0 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>($r1);

        return $l0;
    }

    public static java.util.List appendShape(java.util.List, int) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range $r1;
        java.util.List r0;
        int i0, $i1;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r1 = new ucar.ma2.Range;

        $i1 = i0 - 1;

        specialinvoke $r1.<ucar.ma2.Range: void <init>(int,int)>(0, $i1);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }

    public static int[] getOrigin(java.util.List)
    {
        ucar.ma2.Range $r3;
        java.util.List r0;
        int[] r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (int)[$i0];

        i3 = 0;

     label2:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i1 goto label3;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = (ucar.ma2.Range) $r2;

        $i2 = virtualinvoke $r3.<ucar.ma2.Range: int first()>();

        r1[i3] = $i2;

        i3 = i3 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static ucar.ma2.Range[] toArray(java.util.List)
    {
        java.util.List r0;
        ucar.ma2.Range[] $r1, $r3, $r4;
        java.lang.Object[] $r2;
        int $i0;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = newarray (ucar.ma2.Range)[$i0];

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r3 = (ucar.ma2.Range[]) $r2;

        $r4 = (ucar.ma2.Range[]) $r3;

        return $r4;
    }

    public static java.util.List toList(ucar.ma2.Range[])
    {
        ucar.ma2.Range[] r0;
        java.util.List $r1;

        r0 := @parameter0: ucar.ma2.Range[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        return $r1;
    }

    public static java.lang.String makeSectionSpec(java.util.List)
    {
        ucar.ma2.Range r4;
        java.util.List r1;
        int $i0, i1;
        java.lang.StringBuilder $r0;
        java.lang.Object $r3;
        java.lang.String $r2, $r5;

        r1 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (ucar.ma2.Range) $r3;

        if i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r5 = virtualinvoke r4.<ucar.ma2.Range: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.util.List parseSpec(java.lang.String) throws ucar.ma2.InvalidRangeException
    {
        boolean $z0, $z1, $z2;
        ucar.ma2.Range $r8, $r9, r28;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r21, $r22, $r23, $r24, $r25, $r26;
        java.util.ArrayList $r0;
        java.util.StringTokenizer $r1, $r5;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r2, $r3, $r4, $r6, $r7, $r18, $r27, $r29;
        java.lang.NumberFormatException $r10, $r19;
        java.lang.IllegalArgumentException $r11, $r20;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.StringTokenizer;

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r2, "(),");

     label01:
        $z0 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label14;

        $r3 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(":");

        if $z1 == 0 goto label02;

        r28 = null;

        goto label13;

     label02:
        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(58);

        if $i0 >= 0 goto label06;

     label03:
        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r9 = new ucar.ma2.Range;

        specialinvoke $r9.<ucar.ma2.Range: void <init>(int,int)>($i3, $i3);

        r28 = $r9;

     label04:
        goto label13;

     label05:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" illegal selector: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" part of <");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r20;

     label06:
        $r5 = new java.util.StringTokenizer;

        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r4, ":");

        $r6 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r7 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z2 = virtualinvoke $r5.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label07;

        $r29 = virtualinvoke $r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label08;

     label07:
        $r29 = null;

     label08:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        if $r29 == null goto label09;

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r29);

        goto label10;

     label09:
        $i4 = 1;

     label10:
        $r8 = new ucar.ma2.Range;

        specialinvoke $r8.<ucar.ma2.Range: void <init>(int,int,int)>($i1, $i2, $i4);

        r28 = $r8;

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" illegal selector: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" part of <");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r11;

     label13:
        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r28);

        goto label01;

     label14:
        return $r0;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
        catch java.lang.NumberFormatException from label08 to label11 with label12;
    }

    public static java.lang.String checkInRange(java.util.List, int[])
    {
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.String $r11, $r15;
        ucar.ma2.Range r3;
        java.util.List r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: int[];

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = lengthof r1;

        if $i0 == $i1 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of ranges in section must be =");

        $i7 = lengthof r1;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;

     label1:
        i8 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i8 >= $i2 goto label5;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i8);

        r3 = (ucar.ma2.Range) $r2;

        if r3 != null goto label3;

        goto label4;

     label3:
        $i3 = virtualinvoke r3.<ucar.ma2.Range: int last()>();

        $i4 = r1[i8];

        if $i3 < $i4 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal range for dimension ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": requested ");

        $i5 = virtualinvoke r3.<ucar.ma2.Range: int last()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= max ");

        $i6 = r1[i8];

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label4:
        i8 = i8 + 1;

        goto label2;

     label5:
        return null;
    }

    static int access$000(ucar.ma2.Range)
    {
        int $i0;
        ucar.ma2.Range r0;

        r0 := @parameter0: ucar.ma2.Range;

        $i0 = r0.<ucar.ma2.Range: int n>;

        return $i0;
    }

    static int access$100(ucar.ma2.Range, int)
    {
        int i0, $i1;
        ucar.ma2.Range r0;

        r0 := @parameter0: ucar.ma2.Range;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<ucar.ma2.Range: int elementNC(int)>(i0);

        return $i1;
    }

    static void <clinit>()
    {
        int $i1;
        ucar.ma2.Range $r2, $r3;

        $r2 = new ucar.ma2.Range;

        specialinvoke $r2.<ucar.ma2.Range: void <init>()>();

        <ucar.ma2.Range: ucar.ma2.Range EMPTY> = $r2;

        $r3 = new ucar.ma2.Range;

        $i1 = (int) -1;

        specialinvoke $r3.<ucar.ma2.Range: void <init>(int)>($i1);

        <ucar.ma2.Range: ucar.ma2.Range VLEN> = $r3;

        return;
    }
}
