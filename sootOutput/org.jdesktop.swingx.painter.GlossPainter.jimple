public class org.jdesktop.swingx.painter.GlossPainter extends org.jdesktop.swingx.painter.AbstractPainter
{
    private java.awt.Paint paint;
    private org.jdesktop.swingx.painter.GlossPainter$GlossPosition position;

    public void <init>()
    {
        java.awt.Color $r1;
        org.jdesktop.swingx.painter.GlossPainter$GlossPosition $r2;
        org.jdesktop.swingx.painter.GlossPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.GlossPainter;

        $r1 = new java.awt.Color;

        specialinvoke $r1.<java.awt.Color: void <init>(float,float,float,float)>(1.0F, 1.0F, 1.0F, 0.2F);

        $r2 = <org.jdesktop.swingx.painter.GlossPainter$GlossPosition: org.jdesktop.swingx.painter.GlossPainter$GlossPosition TOP>;

        specialinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: void <init>(java.awt.Paint,org.jdesktop.swingx.painter.GlossPainter$GlossPosition)>($r1, $r2);

        return;
    }

    public void <init>(java.awt.Paint)
    {
        org.jdesktop.swingx.painter.GlossPainter$GlossPosition $r2;
        org.jdesktop.swingx.painter.GlossPainter r0;
        java.awt.Paint r1;

        r0 := @this: org.jdesktop.swingx.painter.GlossPainter;

        r1 := @parameter0: java.awt.Paint;

        $r2 = <org.jdesktop.swingx.painter.GlossPainter$GlossPosition: org.jdesktop.swingx.painter.GlossPainter$GlossPosition TOP>;

        specialinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: void <init>(java.awt.Paint,org.jdesktop.swingx.painter.GlossPainter$GlossPosition)>(r1, $r2);

        return;
    }

    public void <init>(org.jdesktop.swingx.painter.GlossPainter$GlossPosition)
    {
        java.awt.Color $r1;
        org.jdesktop.swingx.painter.GlossPainter$GlossPosition r2;
        org.jdesktop.swingx.painter.GlossPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.GlossPainter;

        r2 := @parameter0: org.jdesktop.swingx.painter.GlossPainter$GlossPosition;

        $r1 = new java.awt.Color;

        specialinvoke $r1.<java.awt.Color: void <init>(float,float,float,float)>(1.0F, 1.0F, 1.0F, 0.2F);

        specialinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: void <init>(java.awt.Paint,org.jdesktop.swingx.painter.GlossPainter$GlossPosition)>($r1, r2);

        return;
    }

    public void <init>(java.awt.Paint, org.jdesktop.swingx.painter.GlossPainter$GlossPosition)
    {
        org.jdesktop.swingx.painter.GlossPainter$GlossPosition r2;
        org.jdesktop.swingx.painter.GlossPainter r0;
        java.awt.Paint r1;

        r0 := @this: org.jdesktop.swingx.painter.GlossPainter;

        r1 := @parameter0: java.awt.Paint;

        r2 := @parameter1: org.jdesktop.swingx.painter.GlossPainter$GlossPosition;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void <init>()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: void setPaint(java.awt.Paint)>(r1);

        virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: void setPosition(org.jdesktop.swingx.painter.GlossPainter$GlossPosition)>(r2);

        return;
    }

    protected void doPaint(java.awt.Graphics2D, java.lang.Object, int, int)
    {
        java.awt.Rectangle $r9;
        org.jdesktop.swingx.painter.GlossPainter r0;
        java.awt.geom.Area $r3, $r8, $r10, r12;
        org.jdesktop.swingx.painter.GlossPainter$GlossPosition $r4, $r5;
        java.awt.Graphics2D r6;
        int i0, $i1, i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        java.awt.geom.Ellipse2D$Double $r2;
        java.awt.Paint $r1, $r7;
        java.lang.Object r11;

        r0 := @this: org.jdesktop.swingx.painter.GlossPainter;

        r6 := @parameter0: java.awt.Graphics2D;

        r11 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: java.awt.Paint getPaint()>();

        if $r1 == null goto label2;

        $r2 = new java.awt.geom.Ellipse2D$Double;

        $i1 = neg i0;

        $d0 = (double) $i1;

        $d7 = $d0 / 2.0;

        $d1 = (double) i2;

        $d6 = $d1 / 2.7;

        $d2 = (double) i0;

        $d5 = $d2 * 2.0;

        $d3 = (double) i2;

        $d4 = $d3 * 2.0;

        specialinvoke $r2.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($d7, $d6, $d5, $d4);

        $r3 = new java.awt.geom.Area;

        specialinvoke $r3.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r2);

        r12 = $r3;

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: org.jdesktop.swingx.painter.GlossPainter$GlossPosition getPosition()>();

        $r5 = <org.jdesktop.swingx.painter.GlossPainter$GlossPosition: org.jdesktop.swingx.painter.GlossPainter$GlossPosition TOP>;

        if $r4 != $r5 goto label1;

        $r8 = new java.awt.geom.Area;

        $r9 = new java.awt.Rectangle;

        specialinvoke $r9.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, i0, i2);

        specialinvoke $r8.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r9);

        $r10 = new java.awt.geom.Area;

        specialinvoke $r10.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r2);

        virtualinvoke $r8.<java.awt.geom.Area: void subtract(java.awt.geom.Area)>($r10);

        r12 = $r8;

     label1:
        $r7 = virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: java.awt.Paint getPaint()>();

        virtualinvoke r6.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r7);

        virtualinvoke r6.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r12);

     label2:
        return;
    }

    public java.awt.Paint getPaint()
    {
        org.jdesktop.swingx.painter.GlossPainter r0;
        java.awt.Paint $r1;

        r0 := @this: org.jdesktop.swingx.painter.GlossPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.GlossPainter: java.awt.Paint paint>;

        return $r1;
    }

    public void setPaint(java.awt.Paint)
    {
        org.jdesktop.swingx.painter.GlossPainter r0;
        java.awt.Paint r1, r2, $r3;

        r0 := @this: org.jdesktop.swingx.painter.GlossPainter;

        r2 := @parameter0: java.awt.Paint;

        r1 = r0.<org.jdesktop.swingx.painter.GlossPainter: java.awt.Paint paint>;

        r0.<org.jdesktop.swingx.painter.GlossPainter: java.awt.Paint paint> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: void setDirty(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: java.awt.Paint getPaint()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("paint", r1, $r3);

        return;
    }

    public org.jdesktop.swingx.painter.GlossPainter$GlossPosition getPosition()
    {
        org.jdesktop.swingx.painter.GlossPainter$GlossPosition $r1;
        org.jdesktop.swingx.painter.GlossPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.GlossPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.GlossPainter: org.jdesktop.swingx.painter.GlossPainter$GlossPosition position>;

        return $r1;
    }

    public void setPosition(org.jdesktop.swingx.painter.GlossPainter$GlossPosition)
    {
        org.jdesktop.swingx.painter.GlossPainter$GlossPosition r1, r2, $r3;
        org.jdesktop.swingx.painter.GlossPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.GlossPainter;

        r2 := @parameter0: org.jdesktop.swingx.painter.GlossPainter$GlossPosition;

        r1 = r0.<org.jdesktop.swingx.painter.GlossPainter: org.jdesktop.swingx.painter.GlossPainter$GlossPosition position>;

        r0.<org.jdesktop.swingx.painter.GlossPainter: org.jdesktop.swingx.painter.GlossPainter$GlossPosition position> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: void setDirty(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: org.jdesktop.swingx.painter.GlossPainter$GlossPosition getPosition()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.GlossPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("position", r1, $r3);

        return;
    }
}
