public class bsh.BshClassManager extends java.lang.Object
{
    private static java.lang.Object NOVALUE;
    private bsh.Interpreter declaringInterpreter;
    protected java.lang.ClassLoader externalClassLoader;
    protected transient java.util.Hashtable absoluteClassCache;
    protected transient java.util.Hashtable absoluteNonClasses;
    protected transient java.util.Hashtable resolvedObjectMethods;
    protected transient java.util.Hashtable resolvedStaticMethods;
    protected transient java.util.Hashtable definingClasses;
    protected transient java.util.Hashtable definingClassesBaseNames;
    static java.lang.Class class$bsh$Interpreter;

    public void <init>()
    {
        bsh.BshClassManager r0;
        java.util.Hashtable $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: bsh.BshClassManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<bsh.BshClassManager: java.util.Hashtable absoluteClassCache> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<bsh.BshClassManager: java.util.Hashtable absoluteNonClasses> = $r2;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r0.<bsh.BshClassManager: java.util.Hashtable resolvedObjectMethods> = $r3;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        r0.<bsh.BshClassManager: java.util.Hashtable resolvedStaticMethods> = $r4;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r0.<bsh.BshClassManager: java.util.Hashtable definingClasses> = $r5;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>()>();

        r0.<bsh.BshClassManager: java.util.Hashtable definingClassesBaseNames> = $r6;

        return;
    }

    public static bsh.BshClassManager createClassManager(bsh.Interpreter)
    {
        bsh.Interpreter $r0, r9;
        java.lang.Exception $r3;
        bsh.BshClassManager r10, $r11;
        java.lang.StringBuffer $r5, $r6, $r7;
        java.lang.Class $r1;
        java.lang.Object $r2;
        bsh.InterpreterError $r4;
        java.lang.String $r8;
        boolean $z0, $z1, $z2;

        r9 := @parameter0: bsh.Interpreter;

        $z0 = staticinvoke <bsh.Capabilities: boolean classExists(java.lang.String)>("java.lang.ref.WeakReference");

        if $z0 == 0 goto label4;

        $z1 = staticinvoke <bsh.Capabilities: boolean classExists(java.lang.String)>("java.util.HashMap");

        if $z1 == 0 goto label4;

        $z2 = staticinvoke <bsh.Capabilities: boolean classExists(java.lang.String)>("bsh.classpath.ClassManagerImpl");

        if $z2 == 0 goto label4;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("bsh.classpath.ClassManagerImpl");

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        r10 = (bsh.BshClassManager) $r2;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        $r4 = new bsh.InterpreterError;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error loading classmanager: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<bsh.InterpreterError: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        $r11 = new bsh.BshClassManager;

        specialinvoke $r11.<bsh.BshClassManager: void <init>()>();

        r10 = $r11;

     label5:
        if r9 != null goto label6;

        $r0 = new bsh.Interpreter;

        specialinvoke $r0.<bsh.Interpreter: void <init>()>();

        r9 = $r0;

     label6:
        r10.<bsh.BshClassManager: bsh.Interpreter declaringInterpreter> = r9;

        return r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean classExists(java.lang.String)
    {
        java.lang.Class $r2;
        java.lang.String r1;
        bsh.BshClassManager r0;
        boolean $z0;

        r0 := @this: bsh.BshClassManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<bsh.BshClassManager: java.lang.Class classForName(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Class classForName(java.lang.String)
    {
        bsh.BshClassManager r0;
        java.lang.StringBuffer $r3, $r4, $r5;
        java.lang.ClassNotFoundException $r7;
        java.lang.Class r8;
        java.lang.String r1, $r6;
        bsh.InterpreterError $r2;
        boolean $z0;

        r0 := @this: bsh.BshClassManager;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<bsh.BshClassManager: boolean isClassBeingDefined(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new bsh.InterpreterError;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attempting to load class in the process of being defined: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<bsh.InterpreterError: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        r8 = null;

     label2:
        r8 = virtualinvoke r0.<bsh.BshClassManager: java.lang.Class plainClassForName(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        goto label5;

     label5:
        if r8 != null goto label6;

        r8 = virtualinvoke r0.<bsh.BshClassManager: java.lang.Class loadSourceClass(java.lang.String)>(r1);

     label6:
        return r8;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    protected java.lang.Class loadSourceClass(java.lang.String)
    {
        bsh.BshClassManager r7;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r9, $r11, $r12, $r18, $r20, $r21;
        java.lang.String r2, $r3, $r6, $r13, $r22;
        java.io.PrintStream $r10, $r19, $r24;
        bsh.EvalError $r23;
        bsh.Interpreter $r15;
        java.io.InputStreamReader $r14;
        java.lang.Class $r16;
        java.lang.ClassNotFoundException $r17;
        java.io.InputStream $r8;

        r7 := @this: bsh.BshClassManager;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".java");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = virtualinvoke r7.<bsh.BshClassManager: java.io.InputStream getResourceAsStream(java.lang.String)>($r6);

        if $r8 != null goto label1;

        return null;

     label1:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Loading class from source file: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r15 = r7.<bsh.BshClassManager: bsh.Interpreter declaringInterpreter>;

        $r14 = new java.io.InputStreamReader;

        specialinvoke $r14.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r8);

        virtualinvoke $r15.<bsh.Interpreter: java.lang.Object eval(java.io.Reader)>($r14);

     label2:
        goto label4;

     label3:
        $r23 := @caughtexception;

        $r24 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.Object)>($r23);

        goto label4;

     label4:
        $r16 = virtualinvoke r7.<bsh.BshClassManager: java.lang.Class plainClassForName(java.lang.String)>(r2);

     label5:
        return $r16;

     label6:
        $r17 := @caughtexception;

        $r19 = <java.lang.System: java.io.PrintStream err>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class not found in source file: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r22);

        return null;

        catch bsh.EvalError from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
    }

    public java.lang.Class plainClassForName(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Error $r5;
        java.lang.Class r6;
        java.lang.ClassLoader $r1, $r3;
        java.lang.String r2;
        java.lang.NoClassDefFoundError $r4;
        bsh.BshClassManager r0;

        r0 := @this: bsh.BshClassManager;

        r2 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<bsh.BshClassManager: java.lang.ClassLoader externalClassLoader>;

        if $r1 == null goto label2;

        $r3 = r0.<bsh.BshClassManager: java.lang.ClassLoader externalClassLoader>;

        r6 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        goto label3;

     label2:
        r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2);

     label3:
        virtualinvoke r0.<bsh.BshClassManager: void cacheClassInfo(java.lang.String,java.lang.Class)>(r2, r6);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        $r5 = staticinvoke <bsh.BshClassManager: java.lang.Error noClassDefFound(java.lang.String,java.lang.Error)>(r2, $r4);

        throw $r5;

     label6:
        return r6;

        catch java.lang.NoClassDefFoundError from label1 to label4 with label5;
    }

    public java.net.URL getResource(java.lang.String)
    {
        java.net.URL r6;
        bsh.BshClassManager r0;
        java.lang.Class $r2, $r7;
        java.lang.ClassLoader $r1, $r4;
        java.lang.String r3, $r5;

        r0 := @this: bsh.BshClassManager;

        r3 := @parameter0: java.lang.String;

        r6 = null;

        $r1 = r0.<bsh.BshClassManager: java.lang.ClassLoader externalClassLoader>;

        if $r1 == null goto label1;

        $r4 = r0.<bsh.BshClassManager: java.lang.ClassLoader externalClassLoader>;

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1);

        r6 = virtualinvoke $r4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r5);

     label1:
        if r6 != null goto label4;

        $r2 = <bsh.BshClassManager: java.lang.Class class$bsh$Interpreter>;

        if $r2 != null goto label2;

        $r7 = staticinvoke <bsh.BshClassManager: java.lang.Class class$(java.lang.String)>("bsh.Interpreter");

        <bsh.BshClassManager: java.lang.Class class$bsh$Interpreter> = $r7;

        goto label3;

     label2:
        $r7 = <bsh.BshClassManager: java.lang.Class class$bsh$Interpreter>;

     label3:
        r6 = virtualinvoke $r7.<java.lang.Class: java.net.URL getResource(java.lang.String)>(r3);

     label4:
        return r6;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        bsh.BshClassManager r0;
        java.lang.Class $r2, $r7;
        java.lang.ClassLoader $r1, $r4;
        java.lang.String r3, $r5;
        java.io.InputStream r6;

        r0 := @this: bsh.BshClassManager;

        r3 := @parameter0: java.lang.String;

        r6 = null;

        $r1 = r0.<bsh.BshClassManager: java.lang.ClassLoader externalClassLoader>;

        if $r1 == null goto label1;

        $r4 = r0.<bsh.BshClassManager: java.lang.ClassLoader externalClassLoader>;

        $r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1);

        r6 = virtualinvoke $r4.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r5);

     label1:
        if r6 != null goto label4;

        $r2 = <bsh.BshClassManager: java.lang.Class class$bsh$Interpreter>;

        if $r2 != null goto label2;

        $r7 = staticinvoke <bsh.BshClassManager: java.lang.Class class$(java.lang.String)>("bsh.Interpreter");

        <bsh.BshClassManager: java.lang.Class class$bsh$Interpreter> = $r7;

        goto label3;

     label2:
        $r7 = <bsh.BshClassManager: java.lang.Class class$bsh$Interpreter>;

     label3:
        r6 = virtualinvoke $r7.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r3);

     label4:
        return r6;
    }

    public void cacheClassInfo(java.lang.String, java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.String r2;
        bsh.BshClassManager r1;
        java.util.Hashtable $r4, $r5;

        r1 := @this: bsh.BshClassManager;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        if r0 == null goto label1;

        $r5 = r1.<bsh.BshClassManager: java.util.Hashtable absoluteClassCache>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

        goto label2;

     label1:
        $r4 = r1.<bsh.BshClassManager: java.util.Hashtable absoluteNonClasses>;

        $r3 = <bsh.BshClassManager: java.lang.Object NOVALUE>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r3);

     label2:
        return;
    }

    public void cacheResolvedMethod(java.lang.Class, java.lang.Class[], java.lang.reflect.Method)
    {
        bsh.BshClassManager$SignatureKey $r0;
        bsh.BshClassManager r5;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12;
        int $i0;
        java.lang.String $r3, $r13;
        java.lang.reflect.Method r2;
        java.util.Hashtable $r6, $r7;
        boolean $z0, $z1;
        java.lang.Class[] r4;
        java.lang.Class r1;

        r5 := @this: bsh.BshClassManager;

        r1 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.reflect.Method;

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cacheResolvedMethod putting: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r13);

     label1:
        $r0 = new bsh.BshClassManager$SignatureKey;

        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        specialinvoke $r0.<bsh.BshClassManager$SignatureKey: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(r1, $r3, r4);

        $i0 = virtualinvoke r2.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 == 0 goto label2;

        $r7 = r5.<bsh.BshClassManager: java.util.Hashtable resolvedStaticMethods>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r2);

        goto label3;

     label2:
        $r6 = r5.<bsh.BshClassManager: java.util.Hashtable resolvedObjectMethods>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r2);

     label3:
        return;
    }

    protected java.lang.reflect.Method getResolvedMethod(java.lang.Class, java.lang.String, java.lang.Class[], boolean)
    {
        bsh.BshClassManager$SignatureKey $r0;
        bsh.BshClassManager r4;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17;
        java.lang.String r2, $r12, $r18;
        java.lang.reflect.Method r21;
        java.util.Hashtable $r5, $r19;
        boolean z0, $z1;
        java.lang.Class[] r3;
        java.lang.Class r1;
        java.lang.Object $r6, $r20;

        r4 := @this: bsh.BshClassManager;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        z0 := @parameter3: boolean;

        $r0 = new bsh.BshClassManager$SignatureKey;

        specialinvoke $r0.<bsh.BshClassManager$SignatureKey: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(r1, r2, r3);

        $r5 = r4.<bsh.BshClassManager: java.util.Hashtable resolvedStaticMethods>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        r21 = (java.lang.reflect.Method) $r6;

        if r21 != null goto label1;

        if z0 != 0 goto label1;

        $r19 = r4.<bsh.BshClassManager: java.util.Hashtable resolvedObjectMethods>;

        $r20 = virtualinvoke $r19.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        r21 = (java.lang.reflect.Method) $r20;

     label1:
        $z1 = <bsh.Interpreter: boolean DEBUG>;

        if $z1 == 0 goto label3;

        if r21 != null goto label2;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getResolvedMethod cache MISS: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r18);

        goto label3;

     label2:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getResolvedMethod cache HIT: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r21);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r12);

     label3:
        return r21;
    }

    protected void clearCaches()
    {
        bsh.BshClassManager r0;
        java.util.Hashtable $r1, $r2, $r3, $r4;

        r0 := @this: bsh.BshClassManager;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<bsh.BshClassManager: java.util.Hashtable absoluteNonClasses> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<bsh.BshClassManager: java.util.Hashtable absoluteClassCache> = $r2;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r0.<bsh.BshClassManager: java.util.Hashtable resolvedObjectMethods> = $r3;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        r0.<bsh.BshClassManager: java.util.Hashtable resolvedStaticMethods> = $r4;

        return;
    }

    public void setClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        bsh.BshClassManager r0;

        r0 := @this: bsh.BshClassManager;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<bsh.BshClassManager: java.lang.ClassLoader externalClassLoader> = r1;

        virtualinvoke r0.<bsh.BshClassManager: void classLoaderChanged()>();

        return;
    }

    public void addClassPath(java.net.URL) throws java.io.IOException
    {
        bsh.BshClassManager r0;
        java.net.URL r1;

        r0 := @this: bsh.BshClassManager;

        r1 := @parameter0: java.net.URL;

        return;
    }

    public void reset()
    {
        bsh.BshClassManager r0;

        r0 := @this: bsh.BshClassManager;

        virtualinvoke r0.<bsh.BshClassManager: void clearCaches()>();

        return;
    }

    public void setClassPath(java.net.URL[]) throws bsh.UtilEvalError
    {
        bsh.UtilEvalError $r0;
        java.net.URL[] r2;
        bsh.BshClassManager r1;

        r1 := @this: bsh.BshClassManager;

        r2 := @parameter0: java.net.URL[];

        $r0 = staticinvoke <bsh.BshClassManager: bsh.UtilEvalError cmUnavailable()>();

        throw $r0;
    }

    public void reloadAllClasses() throws bsh.UtilEvalError
    {
        bsh.UtilEvalError $r0;
        bsh.BshClassManager r1;

        r1 := @this: bsh.BshClassManager;

        $r0 = staticinvoke <bsh.BshClassManager: bsh.UtilEvalError cmUnavailable()>();

        throw $r0;
    }

    public void reloadClasses(java.lang.String[]) throws bsh.UtilEvalError
    {
        bsh.UtilEvalError $r0;
        java.lang.String[] r2;
        bsh.BshClassManager r1;

        r1 := @this: bsh.BshClassManager;

        r2 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <bsh.BshClassManager: bsh.UtilEvalError cmUnavailable()>();

        throw $r0;
    }

    public void reloadPackage(java.lang.String) throws bsh.UtilEvalError
    {
        bsh.UtilEvalError $r0;
        java.lang.String r2;
        bsh.BshClassManager r1;

        r1 := @this: bsh.BshClassManager;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <bsh.BshClassManager: bsh.UtilEvalError cmUnavailable()>();

        throw $r0;
    }

    protected void doSuperImport() throws bsh.UtilEvalError
    {
        bsh.UtilEvalError $r0;
        bsh.BshClassManager r1;

        r1 := @this: bsh.BshClassManager;

        $r0 = staticinvoke <bsh.BshClassManager: bsh.UtilEvalError cmUnavailable()>();

        throw $r0;
    }

    protected boolean hasSuperImport()
    {
        bsh.BshClassManager r0;

        r0 := @this: bsh.BshClassManager;

        return 0;
    }

    protected java.lang.String getClassNameByUnqName(java.lang.String) throws bsh.UtilEvalError
    {
        bsh.UtilEvalError $r0;
        java.lang.String r2;
        bsh.BshClassManager r1;

        r1 := @this: bsh.BshClassManager;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <bsh.BshClassManager: bsh.UtilEvalError cmUnavailable()>();

        throw $r0;
    }

    public void addListener(bsh.BshClassManager$Listener)
    {
        bsh.BshClassManager$Listener r1;
        bsh.BshClassManager r0;

        r0 := @this: bsh.BshClassManager;

        r1 := @parameter0: bsh.BshClassManager$Listener;

        return;
    }

    public void removeListener(bsh.BshClassManager$Listener)
    {
        bsh.BshClassManager$Listener r1;
        bsh.BshClassManager r0;

        r0 := @this: bsh.BshClassManager;

        r1 := @parameter0: bsh.BshClassManager$Listener;

        return;
    }

    public void dump(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;
        bsh.BshClassManager r1;

        r1 := @this: bsh.BshClassManager;

        r0 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("BshClassManager: no class manager.");

        return;
    }

    protected void definingClass(java.lang.String)
    {
        bsh.BshClassManager r2;
        java.lang.StringBuffer $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r20;
        int $i0, $i1, $i3;
        java.lang.String r0, $r1, $r17, $r18, r19;
        java.util.Hashtable $r3, $r6, $r7;
        java.lang.Object $r4, $r5;
        bsh.InterpreterError $r21;

        r2 := @this: bsh.BshClassManager;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <bsh.Name: java.lang.String suffix(java.lang.String,int)>(r0, 1);

        r19 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("$");

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $i1 = $i0 + 1;

        r19 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label1:
        $r3 = r2.<bsh.BshClassManager: java.util.Hashtable definingClassesBaseNames>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r19);

        $r18 = (java.lang.String) $r4;

        if $r18 == null goto label2;

        $r21 = new bsh.InterpreterError;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Defining class problem: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": BeanShell cannot yet simultaneously define two or more ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("dependant classes of the same name.  Attempt to define: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" while defining: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<bsh.InterpreterError: void <init>(java.lang.String)>($r17);

        throw $r21;

     label2:
        $r6 = r2.<bsh.BshClassManager: java.util.Hashtable definingClasses>;

        $r5 = <bsh.BshClassManager: java.lang.Object NOVALUE>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

        $r7 = r2.<bsh.BshClassManager: java.util.Hashtable definingClassesBaseNames>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r0);

        return;
    }

    protected boolean isClassBeingDefined(java.lang.String)
    {
        java.lang.Object $r3;
        java.lang.String r1;
        bsh.BshClassManager r0;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @this: bsh.BshClassManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<bsh.BshClassManager: java.util.Hashtable definingClasses>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected java.lang.String getClassBeingDefined(java.lang.String)
    {
        java.lang.Object $r4;
        java.lang.String r0, $r1, $r5;
        bsh.BshClassManager r2;
        java.util.Hashtable $r3;

        r2 := @this: bsh.BshClassManager;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <bsh.Name: java.lang.String suffix(java.lang.String,int)>(r0, 1);

        $r3 = r2.<bsh.BshClassManager: java.util.Hashtable definingClassesBaseNames>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    protected void doneDefiningClass(java.lang.String)
    {
        java.lang.String r0, $r1;
        bsh.BshClassManager r2;
        java.util.Hashtable $r3, $r4;

        r2 := @this: bsh.BshClassManager;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <bsh.Name: java.lang.String suffix(java.lang.String,int)>(r0, 1);

        $r3 = r2.<bsh.BshClassManager: java.util.Hashtable definingClasses>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r0);

        $r4 = r2.<bsh.BshClassManager: java.util.Hashtable definingClassesBaseNames>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }

    public java.lang.Class defineClass(java.lang.String, byte[])
    {
        byte[] r8;
        bsh.BshClassManager r7;
        java.lang.StringBuffer $r1, $r2, $r4, $r5;
        bsh.InterpreterError $r0;
        java.lang.String r3, $r6;

        r7 := @this: bsh.BshClassManager;

        r3 := @parameter0: java.lang.String;

        r8 := @parameter1: byte[];

        $r0 = new bsh.InterpreterError;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t create class (");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") without class manager package.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<bsh.InterpreterError: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    protected void classLoaderChanged()
    {
        bsh.BshClassManager r0;

        r0 := @this: bsh.BshClassManager;

        return;
    }

    protected static java.lang.Error noClassDefFound(java.lang.String, java.lang.Error)
    {
        java.lang.Error r6;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r8;
        java.lang.String r3, $r7, $r9;
        java.lang.NoClassDefFoundError $r0;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Error;

        $r0 = new java.lang.NoClassDefFoundError;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("A class required by class: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" could not be loaded:\n");

        $r7 = virtualinvoke r6.<java.lang.Error: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r9);

        return $r0;
    }

    protected static bsh.UtilEvalError cmUnavailable()
    {
        bsh.Capabilities$Unavailable $r0;

        $r0 = new bsh.Capabilities$Unavailable;

        specialinvoke $r0.<bsh.Capabilities$Unavailable: void <init>(java.lang.String)>("ClassLoading features unavailable.");

        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <bsh.BshClassManager: java.lang.Object NOVALUE> = $r0;

        return;
    }
}
