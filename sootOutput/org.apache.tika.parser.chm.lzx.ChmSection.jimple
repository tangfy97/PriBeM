public class org.apache.tika.parser.chm.lzx.ChmSection extends java.lang.Object
{
    private byte[] data;
    private int swath;
    private int total;
    private int buffer;

    public void <init>(byte[]) throws org.apache.tika.exception.TikaException
    {
        byte[] r1;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: void assertByteArrayNotNull(byte[])>(r1);

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: void setData(byte[])>(r1);

        return;
    }

    public byte[] reverseByteOrder(byte[]) throws org.apache.tika.exception.TikaException
    {
        byte[] r0;
        org.apache.tika.parser.chm.lzx.ChmSection r1;

        r1 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        r0 := @parameter0: byte[];

        staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: void assertByteArrayNotNull(byte[])>(r0);

        staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: void reverse(byte[])>(r0);

        return r0;
    }

    public int checkBit(int)
    {
        byte $b6;
        org.apache.tika.parser.chm.lzx.ChmSection r0;
        int $i0, $i1, i2, $i3, $i4, $i5;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        i2 := @parameter0: int;

        $i0 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getBuffer()>();

        $i1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getTotal()>();

        $i3 = $i1 - i2;

        $i4 = 1 << $i3;

        $i5 = $i0 & $i4;

        if $i5 != 0 goto label1;

        $b6 = 0;

        goto label2;

     label1:
        $b6 = 1;

     label2:
        return $b6;
    }

    public int getSyncBits(int)
    {
        int i0, $i1;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(i0, i0);

        return $i1;
    }

    public int getDesyncBits(int, int)
    {
        int $i0, $i1, $i2, i3, $i4, i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        i3 := @parameter0: int;

        i7 := @parameter1: int;

     label1:
        $i0 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getTotal()>();

        if $i0 >= 16 goto label2;

        $i16 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getBuffer()>();

        $i17 = $i16 << 16;

        $i18 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int unmarshalUByte()>();

        $i19 = $i17 + $i18;

        $i20 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int unmarshalUByte()>();

        $i21 = $i20 << 8;

        $i22 = $i19 + $i21;

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: void setBuffer(int)>($i22);

        $i23 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getTotal()>();

        $i24 = $i23 + 16;

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: void setTotal(int)>($i24);

        goto label1;

     label2:
        $i1 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getBuffer()>();

        $i2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getTotal()>();

        $i4 = $i2 - i3;

        i5 = $i1 >>> $i4;

        $i6 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getTotal()>();

        $i8 = $i6 - i7;

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: void setTotal(int)>($i8);

        $i9 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getBuffer()>();

        $i10 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getBuffer()>();

        $i11 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getTotal()>();

        $i12 = $i10 >>> $i11;

        $i13 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getTotal()>();

        $i14 = $i12 << $i13;

        $i15 = $i9 - $i14;

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: void setBuffer(int)>($i15);

        return i5;
    }

    public int unmarshalUByte()
    {
        short $s1, $s2;
        byte $b0;
        org.apache.tika.parser.chm.lzx.ChmSection r0;
        int $i3;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        $b0 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte getByte()>();

        $s2 = (short) $b0;

        $s1 = $s2 & 255;

        $i3 = (int) $s1;

        return $i3;
    }

    public byte getByte()
    {
        byte[] $r1, $r2;
        byte $b6;
        org.apache.tika.parser.chm.lzx.ChmSection r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        $i0 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label1;

        $i2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        $i3 = $i2 + 1;

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: void setSwath(int)>($i3);

        $r2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        $i4 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        $i5 = $i4 - 1;

        $b6 = $r2[$i5];

        return $b6;

     label1:
        return 0;
    }

    public int getLeft()
    {
        byte[] $r1;
        org.apache.tika.parser.chm.lzx.ChmSection r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        $i0 = lengthof $r1;

        $i1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public byte[] getData()
    {
        byte[] $r1;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] data>;

        return $r1;
    }

    public java.math.BigInteger getBigInteger(int)
    {
        byte[] $r1, $r2, $r4, $r5, $r6;
        byte $b9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, i12, i13, $i15;
        java.math.BigInteger $r7, $r8;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        i12 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        if $r1 != null goto label1;

        $r7 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r7;

     label1:
        $r2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        $i0 = lengthof $r2;

        $i1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        $i2 = $i0 - $i1;

        if $i2 >= i12 goto label2;

        $r5 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        $i10 = lengthof $r5;

        $i11 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        i12 = $i10 - $i11;

     label2:
        $r6 = newarray (byte)[i12];

        i13 = i12 - 1;

     label3:
        if i13 < 0 goto label4;

        $i5 = i12 - i13;

        $i6 = $i5 - 1;

        $r4 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        $i7 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        $i8 = $i7 + i13;

        $b9 = $r4[$i8];

        $r6[$i6] = $b9;

        $i15 = (int) -1;

        i13 = i13 + $i15;

        goto label3;

     label4:
        $i3 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        $i4 = $i3 + i12;

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: void setSwath(int)>($i4);

        $r8 = new java.math.BigInteger;

        specialinvoke $r8.<java.math.BigInteger: void <init>(byte[])>($r6);

        return $r8;
    }

    public byte[] stringToAsciiBytes(java.lang.String)
    {
        byte[] r2;
        char $c2;
        byte $b3;
        org.apache.tika.parser.chm.lzx.ChmSection r3;
        int $i0, $i1, i4;
        char[] $r1;
        java.lang.String r0;

        r3 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        r2 = newarray (byte)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof $r1;

        if i4 >= $i1 goto label2;

        $c2 = $r1[i4];

        $b3 = (byte) $c2;

        r2[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r2;
    }

    public java.math.BigInteger unmarshalUlong()
    {
        java.math.BigInteger $r1;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: java.math.BigInteger getBigInteger(int)>(8);

        return $r1;
    }

    public long unmarshalUInt()
    {
        java.math.BigInteger $r1;
        long $l0;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: java.math.BigInteger getBigInteger(int)>(4);

        $l0 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        return $l0;
    }

    public int unmarshalInt()
    {
        int $i0;
        java.math.BigInteger $r1;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: java.math.BigInteger getBigInteger(int)>(4);

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        return $i0;
    }

    public byte[] unmarshalBytes(int)
    {
        byte[] r0, $r2, $r3;
        byte $b5;
        org.apache.tika.parser.chm.lzx.ChmSection r1;
        int i0, $i1, $i2, $i3, $i4, i6;

        r1 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r3 = newarray (byte)[1];

        return $r3;

     label1:
        r0 = newarray (byte)[i0];

        i6 = 0;

     label2:
        if i6 >= i0 goto label3;

        $r2 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        $i3 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        $i4 = i6 + $i3;

        $b5 = $r2[$i4];

        r0[i6] = $b5;

        i6 = i6 + 1;

        goto label2;

     label3:
        $i1 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        $i2 = $i1 + i0;

        virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmSection: void setSwath(int)>($i2);

        return r0;
    }

    public java.math.BigInteger getEncint()
    {
        byte[] r0;
        byte $b0, $b1, $b2, $b3, $b4;
        org.apache.tika.parser.chm.lzx.ChmSection r1;
        int $i5;
        java.math.BigInteger $r2, $r4, $r5, r7, $r8, $r9;

        r1 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        r7 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        r0 = newarray (byte)[1];

     label1:
        $b0 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmSection: byte getByte()>();

        $i5 = (int) $b0;

        if $i5 >= 0 goto label2;

        $b3 = $b0 & 127;

        $b4 = (byte) $b3;

        r0[0] = $b4;

        $r5 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(7);

        $r8 = new java.math.BigInteger;

        specialinvoke $r8.<java.math.BigInteger: void <init>(byte[])>(r0);

        r7 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r8);

        goto label1;

     label2:
        $b1 = $b0 & 127;

        $b2 = (byte) $b1;

        r0[0] = $b2;

        $r2 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(7);

        $r9 = new java.math.BigInteger;

        specialinvoke $r9.<java.math.BigInteger: void <init>(byte[])>(r0);

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);

        return $r4;
    }

    public char unmarshalUtfChar()
    {
        byte[] $r1;
        byte $b0, $b1, $b4, $b5, $b7, $b9;
        int $i3, $i6, $i10, $i11, i12, i13, i14, i15, i16, $i17, $i18, $i19, $i20;
        char $c2, $c8;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        i12 = 1;

        $b0 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte getByte()>();

        $i17 = (int) $b0;

        if $i17 >= 0 goto label2;

        i12 = 2;

     label1:
        $i10 = 24 + i12;

        $i18 = (int) $b0;

        $i11 = $i18 << $i10;

        if $i11 >= 0 goto label2;

        i12 = i12 + 1;

        goto label1;

     label2:
        $r1 = newarray (byte)[i12];

        $r1[0] = $b0;

        i13 = 1;

     label3:
        if i13 >= i12 goto label4;

        $b9 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte getByte()>();

        $r1[i13] = $b9;

        i13 = i13 + 1;

        goto label3;

     label4:
        i14 = lengthof $r1;

        if i14 != 1 goto label5;

        $b7 = $r1[0];

        $c8 = (char) $b7;

        return $c8;

     label5:
        $b1 = $r1[0];

        $i19 = (int) $b1;

        i15 = $i19 & 15;

        i16 = 1;

     label6:
        if i16 >= i14 goto label7;

        $i6 = i15 << 6;

        $i3 = i16;

        i16 = i16 + 1;

        $b4 = $r1[$i3];

        $b5 = $b4 & 63;

        $i20 = (int) $b5;

        i15 = $i6 + $i20;

        goto label6;

     label7:
        $c2 = (char) i15;

        return $c2;
    }

    private void setData(byte[])
    {
        byte[] r1;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        r1 := @parameter0: byte[];

        r0.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] data> = r1;

        return;
    }

    public int getSwath()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmSection: int swath>;

        return $i0;
    }

    public void setSwath(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmSection: int swath> = i0;

        return;
    }

    public int getTotal()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmSection: int total>;

        return $i0;
    }

    public void setTotal(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmSection: int total> = i0;

        return;
    }

    private int getBuffer()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmSection: int buffer>;

        return $i0;
    }

    private void setBuffer(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmSection r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmSection;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmSection: int buffer> = i0;

        return;
    }

    public static void main(java.lang.String[]) throws org.apache.tika.exception.TikaException
    {
        byte[] $r0, $r11;
        java.lang.String[] r15;
        java.lang.String $r5, $r7, $r12, $r14;
        java.io.PrintStream $r3, $r9;
        org.apache.tika.parser.chm.lzx.ChmSection $r1;
        java.lang.StringBuilder $r2, $r4, $r6, $r8, $r10, $r13;

        r15 := @parameter0: java.lang.String[];

        $r0 = newarray (byte)[6];

        $r0[0] = 4;

        $r0[1] = 78;

        $r0[2] = -67;

        $r0[3] = 90;

        $r0[4] = 1;

        $r0[5] = -33;

        $r1 = new org.apache.tika.parser.chm.lzx.ChmSection;

        specialinvoke $r1.<org.apache.tika.parser.chm.lzx.ChmSection: void <init>(byte[])>($r0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("before ");

        $r5 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after ");

        $r11 = virtualinvoke $r1.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] reverseByteOrder(byte[])>($r0);

        $r12 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r14);

        return;
    }
}
