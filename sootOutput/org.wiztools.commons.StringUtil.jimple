public final class org.wiztools.commons.StringUtil extends java.lang.Object
{
    public static final java.lang.String[] STRING_ARRAY;

    private void <init>()
    {
        org.wiztools.commons.StringUtil r0;

        r0 := @this: org.wiztools.commons.StringUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isEmpty(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isNotEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.wiztools.commons.StringUtil: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.lang.String getNullStrIfNull(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static java.lang.String implode(java.lang.String, java.lang.String[])
    {
        java.lang.String[] r1;
        int i0, i1, i2, i3;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, r3, r4;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i0 = lengthof r1;

        i2 = 1;

        i1 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        r3 = r1[i3];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        if i2 >= i0 goto label2;

        if r4 == null goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

     label2:
        i2 = i2 + 1;

        i3 = i3 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String implode(java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <org.wiztools.commons.StringUtil: java.lang.String implode(java.lang.String,java.lang.String[])>(null, r0);

        return $r1;
    }

    public static java.lang.String implode(java.lang.String, java.util.Collection)
    {
        java.lang.Object[] $r3;
        java.util.Collection r1;
        java.lang.String[] $r2, $r4;
        java.lang.String r0, $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Collection;

        $r2 = <org.wiztools.commons.StringUtil: java.lang.String[] STRING_ARRAY>;

        $r3 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.String[]) $r3;

        $r5 = staticinvoke <org.wiztools.commons.StringUtil: java.lang.String implode(java.lang.String,java.lang.String[])>(r0, $r4);

        return $r5;
    }

    public static java.lang.String implode(java.util.Collection)
    {
        java.lang.Object[] $r2;
        java.util.Collection r0;
        java.lang.String[] $r1, $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.util.Collection;

        $r1 = <org.wiztools.commons.StringUtil: java.lang.String[] STRING_ARRAY>;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r3 = (java.lang.String[]) $r2;

        $r4 = staticinvoke <org.wiztools.commons.StringUtil: java.lang.String implode(java.lang.String[])>($r3);

        return $r4;
    }

    public static java.util.List explode(java.lang.String, java.lang.String)
    {
        java.util.ArrayList $r5;
        int $i0, $i1, i2, $i4;
        java.lang.String r1, r2, $r3, $r4;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i2);

        $i4 = (int) -1;

        if $i1 == $i4 goto label2;

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i2, $i1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        i2 = $i1 + $i0;

        goto label1;

     label2:
        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(i2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r5;
    }

    public static java.util.List explodeFirst(java.lang.String, java.lang.String)
    {
        java.util.ArrayList $r5;
        int $i0, $i1, $i2, $i4;
        java.lang.String r1, r2, $r3, $r4;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(2);

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(r2);

        $i4 = (int) -1;

        if $i0 == $i4 goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

     label1:
        return $r5;
    }

    public static java.util.List explodeLast(java.lang.String, java.lang.String)
    {
        java.util.ArrayList $r5;
        int $i0, $i1, $i2, $i4;
        java.lang.String r1, r2, $r3, $r4;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(2);

        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>(r2);

        $i4 = (int) -1;

        if $i0 == $i4 goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

     label1:
        return $r5;
    }

    public static java.lang.String capatilizeFirstLetter(java.lang.String)
    {
        int $i0;
        char[] $r1;
        char $c1, $c2;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        $c1 = $r1[0];

        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        $r1[0] = $c2;

     label1:
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r1);

        return $r2;
    }

    public static java.lang.String capatilizeFirstLetterEachWord(java.lang.String)
    {
        int $i0, i7, $i8, $i9;
        java.lang.String r0, $r1, $r3;
        boolean $z0, $z1, z2;
        char $c1, $c2, $c3, $c4, $c5, $c6;
        char[] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        z2 = 0;

        i7 = 0;

     label1:
        $i0 = lengthof $r2;

        if i7 >= $i0 goto label5;

        if z2 != 0 goto label2;

        $c4 = $r2[i7];

        $z1 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c4);

        if $z1 == 0 goto label2;

        $c5 = $r2[i7];

        $c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c5);

        $r2[i7] = $c6;

        z2 = 1;

        goto label4;

     label2:
        $c1 = $r2[i7];

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 != 0 goto label3;

        $c2 = $r2[i7];

        $i8 = (int) $c2;

        if $i8 == 46 goto label3;

        $c3 = $r2[i7];

        $i9 = (int) $c3;

        if $i9 != 39 goto label4;

     label3:
        z2 = 0;

     label4:
        i7 = i7 + 1;

        goto label1;

     label5:
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r2);

        return $r3;
    }

    public static java.lang.String reverseCapitalization(java.lang.String)
    {
        char $c1, $c2, $c3, $c4, $c7;
        int $i0, $i5, i6;
        char[] $r1;
        java.lang.String r0, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i6 = 0;

     label1:
        $i0 = lengthof $r1;

        if i6 >= $i0 goto label5;

        $c1 = $r1[i6];

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c1);

        if $z0 == 0 goto label4;

        $i5 = i6;

        $c2 = $r1[i6];

        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c2);

        if $z1 == 0 goto label2;

        $c4 = $r1[i6];

        $c7 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c4);

        goto label3;

     label2:
        $c3 = $r1[i6];

        $c7 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c3);

     label3:
        $r1[$i5] = $c7;

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[0];

        <org.wiztools.commons.StringUtil: java.lang.String[] STRING_ARRAY> = $r0;

        return;
    }
}
