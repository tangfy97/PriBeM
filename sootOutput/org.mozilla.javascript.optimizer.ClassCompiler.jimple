public class org.mozilla.javascript.optimizer.ClassCompiler extends java.lang.Object
{
    private java.lang.String mainMethodClassName;
    private org.mozilla.javascript.CompilerEnvirons compilerEnv;
    private java.lang.Class targetExtends;
    private java.lang.Class[] targetImplements;

    public void <init>(org.mozilla.javascript.CompilerEnvirons)
    {
        java.lang.IllegalArgumentException $r2;
        org.mozilla.javascript.CompilerEnvirons r1;
        org.mozilla.javascript.optimizer.ClassCompiler r0;

        r0 := @this: org.mozilla.javascript.optimizer.ClassCompiler;

        r1 := @parameter0: org.mozilla.javascript.CompilerEnvirons;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r0.<org.mozilla.javascript.optimizer.ClassCompiler: org.mozilla.javascript.CompilerEnvirons compilerEnv> = r1;

        r0.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.String mainMethodClassName> = "org.mozilla.javascript.optimizer.OptRuntime";

        return;
    }

    public void setMainMethodClass(java.lang.String)
    {
        java.lang.String r1;
        org.mozilla.javascript.optimizer.ClassCompiler r0;

        r0 := @this: org.mozilla.javascript.optimizer.ClassCompiler;

        r1 := @parameter0: java.lang.String;

        r0.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.String mainMethodClassName> = r1;

        return;
    }

    public java.lang.String getMainMethodClass()
    {
        java.lang.String $r1;
        org.mozilla.javascript.optimizer.ClassCompiler r0;

        r0 := @this: org.mozilla.javascript.optimizer.ClassCompiler;

        $r1 = r0.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.String mainMethodClassName>;

        return $r1;
    }

    public org.mozilla.javascript.CompilerEnvirons getCompilerEnv()
    {
        org.mozilla.javascript.CompilerEnvirons $r1;
        org.mozilla.javascript.optimizer.ClassCompiler r0;

        r0 := @this: org.mozilla.javascript.optimizer.ClassCompiler;

        $r1 = r0.<org.mozilla.javascript.optimizer.ClassCompiler: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        return $r1;
    }

    public java.lang.Class getTargetExtends()
    {
        java.lang.Class $r1;
        org.mozilla.javascript.optimizer.ClassCompiler r0;

        r0 := @this: org.mozilla.javascript.optimizer.ClassCompiler;

        $r1 = r0.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.Class targetExtends>;

        return $r1;
    }

    public void setTargetExtends(java.lang.Class)
    {
        java.lang.Class r1;
        org.mozilla.javascript.optimizer.ClassCompiler r0;

        r0 := @this: org.mozilla.javascript.optimizer.ClassCompiler;

        r1 := @parameter0: java.lang.Class;

        r0.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.Class targetExtends> = r1;

        return;
    }

    public java.lang.Class[] getTargetImplements()
    {
        org.mozilla.javascript.optimizer.ClassCompiler r0;
        java.lang.Class[] $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.mozilla.javascript.optimizer.ClassCompiler;

        $r1 = r0.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.Class[] targetImplements>;

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r2 = r0.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.Class[] targetImplements>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.Class[]) $r3;

     label2:
        return $r4;
    }

    public void setTargetImplements(java.lang.Class[])
    {
        org.mozilla.javascript.optimizer.ClassCompiler r0;
        java.lang.Class[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.mozilla.javascript.optimizer.ClassCompiler;

        r1 := @parameter0: java.lang.Class[];

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.Class[]) $r2;

     label2:
        r0.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.Class[] targetImplements> = $r3;

        return;
    }

    protected java.lang.String makeAuxiliaryClassName(java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r0, $r2, $r4;
        org.mozilla.javascript.optimizer.ClassCompiler r6;
        java.lang.String r1, r3, $r5;

        r6 := @this: org.mozilla.javascript.optimizer.ClassCompiler;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.Object[] compileToClassFiles(java.lang.String, java.lang.String, int, java.lang.String)
    {
        byte[] $r15, $r17;
        org.mozilla.javascript.ScriptOrFnNode $r7;
        boolean z0, $z2, $z3;
        org.mozilla.javascript.optimizer.Codegen $r12;
        org.mozilla.javascript.Parser $r0;
        java.lang.Object[] $r18, $r21;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String r5, r6, $r8, r11, $r13, $r20, r23;
        java.lang.Class[] $r10;
        org.mozilla.javascript.ErrorReporter $r4;
        org.mozilla.javascript.CompilerEnvirons $r2, $r3, $r14;
        org.mozilla.javascript.optimizer.ClassCompiler r1;
        org.mozilla.javascript.FunctionNode $r19;
        java.lang.Class $r9, r22;
        org.mozilla.javascript.ObjToIntMap $r16;

        r1 := @this: org.mozilla.javascript.optimizer.ClassCompiler;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r11 := @parameter3: java.lang.String;

        $r0 = new org.mozilla.javascript.Parser;

        $r3 = r1.<org.mozilla.javascript.optimizer.ClassCompiler: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $r2 = r1.<org.mozilla.javascript.optimizer.ClassCompiler: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $r4 = virtualinvoke $r2.<org.mozilla.javascript.CompilerEnvirons: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

        specialinvoke $r0.<org.mozilla.javascript.Parser: void <init>(org.mozilla.javascript.CompilerEnvirons,org.mozilla.javascript.ErrorReporter)>($r3, $r4);

        $r7 = virtualinvoke $r0.<org.mozilla.javascript.Parser: org.mozilla.javascript.ScriptOrFnNode parse(java.lang.String,java.lang.String,int)>(r5, r6, i0);

        $r8 = virtualinvoke $r0.<org.mozilla.javascript.Parser: java.lang.String getEncodedSource()>();

        $r9 = virtualinvoke r1.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.Class getTargetExtends()>();

        r22 = $r9;

        $r10 = virtualinvoke r1.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.Class[] getTargetImplements()>();

        if $r10 != null goto label1;

        if $r9 != null goto label1;

        $z3 = 1;

        $z2 = 1;

        goto label2;

     label1:
        $z3 = 0;

        $z2 = 0;

     label2:
        z0 = $z3;

        if $z2 == 0 goto label3;

        r23 = r11;

        goto label4;

     label3:
        r23 = virtualinvoke r1.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.String makeAuxiliaryClassName(java.lang.String,java.lang.String)>(r11, "1");

     label4:
        $r12 = new org.mozilla.javascript.optimizer.Codegen;

        specialinvoke $r12.<org.mozilla.javascript.optimizer.Codegen: void <init>()>();

        $r13 = r1.<org.mozilla.javascript.optimizer.ClassCompiler: java.lang.String mainMethodClassName>;

        virtualinvoke $r12.<org.mozilla.javascript.optimizer.Codegen: void setMainMethodClass(java.lang.String)>($r13);

        $r14 = r1.<org.mozilla.javascript.optimizer.ClassCompiler: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $r15 = virtualinvoke $r12.<org.mozilla.javascript.optimizer.Codegen: byte[] compileToClassFile(org.mozilla.javascript.CompilerEnvirons,java.lang.String,org.mozilla.javascript.ScriptOrFnNode,java.lang.String,boolean)>($r14, r23, $r7, $r8, 0);

        if z0 == 0 goto label5;

        $r21 = newarray (java.lang.Object)[2];

        $r21[0] = r23;

        $r21[1] = $r15;

        return $r21;

     label5:
        $i1 = virtualinvoke $r7.<org.mozilla.javascript.ScriptOrFnNode: int getFunctionCount()>();

        $r16 = new org.mozilla.javascript.ObjToIntMap;

        specialinvoke $r16.<org.mozilla.javascript.ObjToIntMap: void <init>(int)>($i1);

        i4 = 0;

     label6:
        if i4 == $i1 goto label8;

        $r19 = virtualinvoke $r7.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.FunctionNode getFunctionNode(int)>(i4);

        $r20 = virtualinvoke $r19.<org.mozilla.javascript.FunctionNode: java.lang.String getFunctionName()>();

        if $r20 == null goto label7;

        $i2 = virtualinvoke $r20.<java.lang.String: int length()>();

        if $i2 == 0 goto label7;

        $i3 = virtualinvoke $r19.<org.mozilla.javascript.FunctionNode: int getParamCount()>();

        virtualinvoke $r16.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>($r20, $i3);

     label7:
        i4 = i4 + 1;

        goto label6;

     label8:
        if $r9 != null goto label9;

        r22 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ObjectClass>;

     label9:
        $r17 = staticinvoke <org.mozilla.javascript.JavaAdapter: byte[] createAdapterCode(org.mozilla.javascript.ObjToIntMap,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String)>($r16, r11, r22, $r10, r23);

        $r18 = newarray (java.lang.Object)[4];

        $r18[0] = r11;

        $r18[1] = $r17;

        $r18[2] = r23;

        $r18[3] = $r15;

        return $r18;
    }
}
