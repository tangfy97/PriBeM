class com.mycila.inject.jsr250.Jsr250Module$1 extends java.lang.Object implements com.mycila.inject.jsr250.Jsr250Destroyer
{
    com.google.inject.Injector injector;
    final com.mycila.inject.jsr250.Jsr250Module this$0;

    void <init>(com.mycila.inject.jsr250.Jsr250Module)
    {
        com.mycila.inject.jsr250.Jsr250Module r1;
        com.mycila.inject.jsr250.Jsr250Module$1 r0;

        r0 := @this: com.mycila.inject.jsr250.Jsr250Module$1;

        r1 := @parameter0: com.mycila.inject.jsr250.Jsr250Module;

        r0.<com.mycila.inject.jsr250.Jsr250Module$1: com.mycila.inject.jsr250.Jsr250Module this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void preDestroy()
    {
        com.mycila.inject.jsr250.Jsr250Module$SingletonChecker $r17;
        com.google.inject.Key $r25, $r27;
        com.mycila.inject.jsr250.Jsr250Module$1$1 $r4;
        java.util.Map $r2, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.mycila.inject.internal.guava.collect.SetMultimap $r5;
        java.util.IdentityHashMap $r3, $r8;
        java.util.Collection $r6, $r9, $r13;
        com.google.inject.spi.Dependency r24;
        java.util.Set $r21;
        com.google.inject.Binding $r28, r29, r30;
        com.google.inject.spi.HasDependencies $r20;
        com.mycila.inject.jsr250.Jsr250Module$1 r0;
        int $i0;
        java.util.Iterator $r7, $r10, $r14, $r22;
        com.google.inject.Scope r31;
        com.google.inject.Injector $r1, $r11, $r26;
        com.mycila.inject.jsr250.Jsr250Module $r18;
        java.lang.Object $r15, $r16, $r19, $r23;

        r0 := @this: com.mycila.inject.jsr250.Jsr250Module$1;

        $r1 = r0.<com.mycila.inject.jsr250.Jsr250Module$1: com.google.inject.Injector injector>;

        $r2 = interfaceinvoke $r1.<com.google.inject.Injector: java.util.Map getAllBindings()>();

        $r3 = new java.util.IdentityHashMap;

        specialinvoke $r3.<java.util.IdentityHashMap: void <init>()>();

        $r4 = new com.mycila.inject.jsr250.Jsr250Module$1$1;

        specialinvoke $r4.<com.mycila.inject.jsr250.Jsr250Module$1$1: void <init>(com.mycila.inject.jsr250.Jsr250Module$1)>(r0);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Multimaps: com.mycila.inject.internal.guava.collect.SetMultimap newSetMultimap(java.util.Map,com.mycila.inject.internal.guava.base.Supplier)>($r3, $r4);

        $r6 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r19 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r29 = (com.google.inject.Binding) $r19;

        $z4 = r29 instanceof com.google.inject.spi.HasDependencies;

        if $z4 == 0 goto label04;

        $r20 = (com.google.inject.spi.HasDependencies) r29;

        $r21 = interfaceinvoke $r20.<com.google.inject.spi.HasDependencies: java.util.Set getDependencies()>();

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z5 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label04;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.google.inject.spi.Dependency) $r23;

        $r25 = virtualinvoke r24.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        $z6 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r25);

        if $z6 == 0 goto label03;

        $r26 = r0.<com.mycila.inject.jsr250.Jsr250Module$1: com.google.inject.Injector injector>;

        $r27 = virtualinvoke r24.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        $r28 = interfaceinvoke $r26.<com.google.inject.Injector: com.google.inject.Binding getBinding(com.google.inject.Key)>($r27);

        interfaceinvoke $r5.<com.mycila.inject.internal.guava.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>($r28, r29);

     label03:
        goto label02;

     label04:
        goto label01;

     label05:
        $r8 = new java.util.IdentityHashMap;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        specialinvoke $r8.<java.util.IdentityHashMap: void <init>(int)>($i0);

        $r9 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r16 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r30 = (com.google.inject.Binding) $r16;

        $r17 = new com.mycila.inject.jsr250.Jsr250Module$SingletonChecker;

        $r18 = r0.<com.mycila.inject.jsr250.Jsr250Module$1: com.mycila.inject.jsr250.Jsr250Module this$0>;

        specialinvoke $r17.<com.mycila.inject.jsr250.Jsr250Module$SingletonChecker: void <init>(com.mycila.inject.jsr250.Jsr250Module,com.google.inject.Binding,com.mycila.inject.jsr250.Jsr250Module$1)>($r18, r30, null);

        $z3 = virtualinvoke $r17.<com.mycila.inject.jsr250.Jsr250Module$SingletonChecker: boolean isSingleton()>();

        if $z3 == 0 goto label07;

        specialinvoke r0.<com.mycila.inject.jsr250.Jsr250Module$1: void close(com.google.inject.Binding,java.util.Map,com.mycila.inject.internal.guava.collect.Multimap)>(r30, $r8, $r5);

     label07:
        goto label06;

     label08:
        $r11 = r0.<com.mycila.inject.jsr250.Jsr250Module$1: com.google.inject.Injector injector>;

        $r12 = interfaceinvoke $r11.<com.google.inject.Injector: java.util.Map getScopeBindings()>();

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Collection values()>();

        $r14 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r31 = (com.google.inject.Scope) $r15;

        staticinvoke <com.mycila.inject.jsr250.Jsr250: void preDestroy(java.lang.Object)>(r31);

        goto label09;

     label10:
        return;
    }

    private void close(com.google.inject.Binding, java.util.Map, com.mycila.inject.internal.guava.collect.Multimap)
    {
        com.mycila.inject.jsr250.Jsr250Module$SingletonChecker $r6;
        com.google.inject.spi.ProviderInstanceBinding $r12;
        com.mycila.inject.jsr250.Jsr250Module$1 r7;
        java.util.Map r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r5;
        java.util.Collection $r4;
        com.mycila.inject.internal.guava.collect.Multimap r3;
        com.google.inject.Binding r1, r16;
        java.lang.Exception $r17;
        com.mycila.inject.jsr250.Jsr250Module $r8;
        com.google.inject.Provider $r9, $r13;
        java.lang.Class $r2, $r11, $r14;
        java.lang.Object $r10, $r15;

        r7 := @this: com.mycila.inject.jsr250.Jsr250Module$1;

        r1 := @parameter0: com.google.inject.Binding;

        r0 := @parameter1: java.util.Map;

        r3 := @parameter2: com.mycila.inject.internal.guava.collect.Multimap;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label7;

        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        $r4 = interfaceinvoke r3.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection get(java.lang.Object)>(r1);

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r15 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.google.inject.Binding) $r15;

        specialinvoke r7.<com.mycila.inject.jsr250.Jsr250Module$1: void close(com.google.inject.Binding,java.util.Map,com.mycila.inject.internal.guava.collect.Multimap)>(r16, r0, r3);

        goto label1;

     label2:
        $z2 = r1 instanceof com.google.inject.spi.ProviderInstanceBinding;

        if $z2 == 0 goto label4;

        $r12 = (com.google.inject.spi.ProviderInstanceBinding) r1;

        $r13 = interfaceinvoke $r12.<com.google.inject.spi.ProviderInstanceBinding: com.google.inject.Provider getProviderInstance()>();

        $z5 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r13);

        if $z5 != 0 goto label3;

        staticinvoke <com.mycila.inject.jsr250.Jsr250: void preDestroy(java.lang.Object)>($r13);

        $r14 = <java.lang.Void: java.lang.Class TYPE>;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r14);

     label3:
        goto label5;

     label4:
        $r6 = new com.mycila.inject.jsr250.Jsr250Module$SingletonChecker;

        $r8 = r7.<com.mycila.inject.jsr250.Jsr250Module$1: com.mycila.inject.jsr250.Jsr250Module this$0>;

        specialinvoke $r6.<com.mycila.inject.jsr250.Jsr250Module$SingletonChecker: void <init>(com.mycila.inject.jsr250.Jsr250Module,com.google.inject.Binding,com.mycila.inject.jsr250.Jsr250Module$1)>($r8, r1, null);

        $z3 = virtualinvoke $r6.<com.mycila.inject.jsr250.Jsr250Module$SingletonChecker: boolean isSingleton()>();

        if $z3 == 0 goto label5;

        $r9 = interfaceinvoke r1.<com.google.inject.Binding: com.google.inject.Provider getProvider()>();

        $r10 = interfaceinvoke $r9.<com.google.inject.Provider: java.lang.Object get()>();

        $z4 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r10);

        if $z4 != 0 goto label5;

        staticinvoke <com.mycila.inject.jsr250.Jsr250: void preDestroy(java.lang.Object)>($r10);

        $r11 = <java.lang.Void: java.lang.Class TYPE>;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label5:
        goto label7;

     label6:
        $r17 := @caughtexception;

     label7:
        return;

        catch java.lang.Exception from label2 to label5 with label6;
    }
}
