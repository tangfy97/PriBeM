public class ucar.nc2.dt.radial.Nids2Dataset extends ucar.nc2.dt.radial.RadialDatasetSweepAdapter implements ucar.nc2.dt.TypedDatasetFactoryIF
{
    private ucar.nc2.dataset.NetcdfDataset ds;

    public boolean isMine(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.dt.radial.Nids2Dataset r3;
        java.lang.String $r1, $r2;
        ucar.nc2.dataset.NetcdfDataset r0;
        boolean $z0, $z1;

        r3 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "Conventions", null);

        if null == $r1 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("_Coordinates");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "Format", null);

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Level3/NIDS");

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public ucar.nc2.dt.TypedDataset open(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask, java.lang.StringBuilder) throws java.io.IOException
    {
        ucar.nc2.util.CancelTask r3;
        ucar.nc2.dt.radial.Nids2Dataset $r0, r2;
        java.lang.StringBuilder r4;
        ucar.nc2.dataset.NetcdfDataset r1;

        r2 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r3 := @parameter1: ucar.nc2.util.CancelTask;

        r4 := @parameter2: java.lang.StringBuilder;

        $r0 = new ucar.nc2.dt.radial.Nids2Dataset;

        specialinvoke $r0.<ucar.nc2.dt.radial.Nids2Dataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        return $r0;
    }

    public ucar.nc2.constants.FeatureType getScientificDataType()
    {
        ucar.nc2.constants.FeatureType $r0;
        ucar.nc2.dt.radial.Nids2Dataset r1;

        r1 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        $r0 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        return $r0;
    }

    public void <init>()
    {
        ucar.nc2.dt.radial.Nids2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        specialinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void <init>()>();

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset)
    {
        java.lang.Throwable $r6;
        java.io.PrintStream $r8;
        ucar.nc2.dt.radial.Nids2Dataset r0;
        java.io.IOException $r5;
        ucar.nc2.Attribute $r2;
        java.lang.StringBuffer $r4;
        int $i0;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.String $r11;
        java.lang.Number $r3;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        specialinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds> = r1;

        r0.<ucar.nc2.dt.radial.Nids2Dataset: java.lang.String desc> = "Nids 2 radar dataset";

     label1:
        $r2 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("isRadial");

        $r3 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        if $i0 != 0 goto label2;

        $r4 = r0.<ucar.nc2.dt.radial.Nids2Dataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** Dataset is not a radial data\n");

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Dataset is not a radial data\n");

        throw $r5;

     label2:
        virtualinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset: void setEarthLocation()>();

        virtualinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset: void setTimeUnits()>();

        virtualinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset: void setStartDate()>();

        virtualinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset: void setEndDate()>();

        virtualinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset: void setBoundingBox()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CDM radial dataset failed to open this dataset ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public ucar.unidata.geoloc.EarthLocation getCommonOrigin()
    {
        ucar.unidata.geoloc.EarthLocation $r1;
        ucar.nc2.dt.radial.Nids2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.unidata.geoloc.EarthLocation origin>;

        return $r1;
    }

    public java.lang.String getRadarID()
    {
        ucar.nc2.Attribute $r2, r5;
        ucar.nc2.dt.radial.Nids2Dataset r0;
        java.lang.String $r3;
        ucar.nc2.dataset.NetcdfDataset $r1, $r4;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("ProductStation");

        r5 = $r2;

        if $r2 != null goto label1;

        $r4 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        r5 = virtualinvoke $r4.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("Product_station");

     label1:
        $r3 = virtualinvoke r5.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        return $r3;
    }

    public boolean isStationary()
    {
        ucar.nc2.dt.radial.Nids2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        return 1;
    }

    public java.lang.String getRadarName()
    {
        ucar.nc2.Attribute $r2;
        ucar.nc2.dt.radial.Nids2Dataset r0;
        java.lang.String $r3;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("ProductStationName");

        $r3 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        return $r3;
    }

    public java.lang.String getDataFormat()
    {
        ucar.nc2.dt.radial.Nids2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        return "Level III";
    }

    public boolean isVolume()
    {
        ucar.nc2.dt.radial.Nids2Dataset r0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        return 0;
    }

    protected void setEarthLocation()
    {
        java.lang.Throwable $r14;
        ucar.unidata.geoloc.EarthLocationImpl $r13;
        ucar.nc2.dt.radial.Nids2Dataset r0;
        int $i0;
        java.lang.String $r19;
        java.lang.Number $r8, $r10, $r12;
        double d0, d1, d2;
        java.io.PrintStream $r16;
        java.io.IOException $r7, $r9, $r11;
        ucar.nc2.Attribute $r2, $r4, $r6;
        java.lang.StringBuilder $r15, $r17, $r18;
        ucar.nc2.dataset.NetcdfDataset $r1, $r3, $r5;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        d0 = 0.0;

        d1 = 0.0;

        d2 = 0.0;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("RadarLatitude");

        $r3 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("RadarLongitude");

        $r5 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r6 = virtualinvoke $r5.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("RadarAltitude");

     label1:
        if $r2 == null goto label2;

        $r8 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        d0 = virtualinvoke $r8.<java.lang.Number: double doubleValue()>();

        goto label3;

     label2:
        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Unable to init radar location!\n");

        throw $r7;

     label3:
        if $r4 == null goto label4;

        $r10 = virtualinvoke $r4.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        d1 = virtualinvoke $r10.<java.lang.Number: double doubleValue()>();

        goto label5;

     label4:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Unable to init radar location!\n");

        throw $r9;

     label5:
        if $r6 == null goto label6;

        $r12 = virtualinvoke $r6.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $i0 = virtualinvoke $r12.<java.lang.Number: int intValue()>();

        d2 = (double) $i0;

        goto label7;

     label6:
        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Unable to init radar location!\n");

        throw $r11;

     label7:
        goto label9;

     label8:
        $r14 := @caughtexception;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CDM radial dataset failed to open this dataset ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label9:
        $r13 = new ucar.unidata.geoloc.EarthLocationImpl;

        specialinvoke $r13.<ucar.unidata.geoloc.EarthLocationImpl: void <init>(double,double,double)>(d0, d1, d2);

        r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.unidata.geoloc.EarthLocation origin> = $r13;

        return;

        catch java.lang.Throwable from label1 to label7 with label8;
    }

    protected void setTimeUnits() throws java.lang.Exception
    {
        ucar.nc2.dataset.CoordinateAxis $r3;
        ucar.nc2.constants.AxisType $r1;
        java.lang.StringBuffer $r6;
        ucar.nc2.dt.radial.Nids2Dataset r0;
        ucar.nc2.units.DateUnit $r5;
        java.lang.String $r4;
        ucar.nc2.dataset.NetcdfDataset $r2;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        $r2 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r1 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        $r3 = virtualinvoke $r2.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.dataset.CoordinateAxis findCoordinateAxis(ucar.nc2.constants.AxisType)>($r1);

        if $r3 != null goto label1;

        $r6 = r0.<ucar.nc2.dt.radial.Nids2Dataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** Time Units not Found\n");

        goto label2;

     label1:
        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getUnitsString()>();

        $r5 = new ucar.nc2.units.DateUnit;

        specialinvoke $r5.<ucar.nc2.units.DateUnit: void <init>(java.lang.String)>($r4);

        r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.units.DateUnit dateUnits> = $r5;

     label2:
        return;
    }

    protected void setStartDate()
    {
        java.util.Date $r8, $r9;
        ucar.nc2.dt.radial.Nids2Dataset r0;
        ucar.nc2.units.DateUnit $r7;
        ucar.nc2.dataset.CoordinateAxis $r5;
        ucar.nc2.constants.AxisType $r3;
        java.lang.StringBuffer $r6;
        java.lang.String $r2;
        ucar.nc2.dataset.NetcdfDataset $r1, $r4;
        double $d0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "time_coverage_start", null);

        if $r2 == null goto label1;

        $r9 = staticinvoke <ucar.nc2.units.DateUnit: java.util.Date getStandardOrISO(java.lang.String)>($r2);

        r0.<ucar.nc2.dt.radial.Nids2Dataset: java.util.Date startDate> = $r9;

        return;

     label1:
        $r4 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r3 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        $r5 = virtualinvoke $r4.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.dataset.CoordinateAxis findCoordinateAxis(ucar.nc2.constants.AxisType)>($r3);

        if $r5 == null goto label2;

        $d0 = virtualinvoke $r5.<ucar.nc2.dataset.CoordinateAxis: double getMinValue()>();

        $r7 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.units.DateUnit dateUnits>;

        $r8 = virtualinvoke $r7.<ucar.nc2.units.DateUnit: java.util.Date makeDate(double)>($d0);

        r0.<ucar.nc2.dt.radial.Nids2Dataset: java.util.Date startDate> = $r8;

        return;

     label2:
        $r6 = r0.<ucar.nc2.dt.radial.Nids2Dataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** start_datetime not Found\n");

        return;
    }

    protected void setEndDate()
    {
        java.util.Date $r8, $r9;
        ucar.nc2.dt.radial.Nids2Dataset r0;
        ucar.nc2.units.DateUnit $r7;
        ucar.nc2.dataset.CoordinateAxis $r5;
        ucar.nc2.constants.AxisType $r3;
        java.lang.StringBuffer $r6;
        java.lang.String $r2;
        ucar.nc2.dataset.NetcdfDataset $r1, $r4;
        double $d0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "time_coverage_end", null);

        if $r2 == null goto label1;

        $r9 = staticinvoke <ucar.nc2.units.DateUnit: java.util.Date getStandardOrISO(java.lang.String)>($r2);

        r0.<ucar.nc2.dt.radial.Nids2Dataset: java.util.Date endDate> = $r9;

        goto label2;

     label1:
        $r4 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.dataset.NetcdfDataset ds>;

        $r3 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        $r5 = virtualinvoke $r4.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.dataset.CoordinateAxis findCoordinateAxis(ucar.nc2.constants.AxisType)>($r3);

        if $r5 == null goto label2;

        $d0 = virtualinvoke $r5.<ucar.nc2.dataset.CoordinateAxis: double getMaxValue()>();

        $r7 = r0.<ucar.nc2.dt.radial.Nids2Dataset: ucar.nc2.units.DateUnit dateUnits>;

        $r8 = virtualinvoke $r7.<ucar.nc2.units.DateUnit: java.util.Date makeDate(double)>($d0);

        r0.<ucar.nc2.dt.radial.Nids2Dataset: java.util.Date endDate> = $r8;

        return;

     label2:
        $r6 = r0.<ucar.nc2.dt.radial.Nids2Dataset: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** end_datetime not Found\n");

        return;
    }

    protected void addRadialVariable(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Variable)
    {
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter $r5;
        ucar.nc2.dt.radial.Nids2Dataset r3;
        java.util.List $r4, $r6;
        int $i0;
        ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable $r7, r9;
        ucar.nc2.Variable r0;
        java.lang.String $r1, $r2;
        ucar.nc2.dataset.NetcdfDataset r8;
        boolean $z0;

        r3 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        r8 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r0 := @parameter1: ucar.nc2.Variable;

        r9 = null;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("RAW");

        if $z0 != 0 goto label1;

        if $i0 != 2 goto label1;

        $r5 = new ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter;

        $r6 = virtualinvoke r0.<ucar.nc2.Variable: java.util.List getAttributes()>();

        specialinvoke $r5.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter$MyRadialVariableAdapter: void <init>(ucar.nc2.dt.radial.RadialDatasetSweepAdapter,java.lang.String,java.util.List)>(r3, $r1, $r6);

        $r7 = new ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable;

        specialinvoke $r7.<ucar.nc2.dt.radial.Nids2Dataset$Nids2Variable: void <init>(ucar.nc2.dt.radial.Nids2Dataset,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.VariableSimpleIF,ucar.nc2.Variable,ucar.nc2.dt.radial.Nids2Dataset$1)>(r3, r8, $r5, r0, null);

        r9 = $r7;

     label1:
        if r9 == null goto label2;

        $r4 = r3.<ucar.nc2.dt.radial.Nids2Dataset: java.util.List dataVariables>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r9);

     label2:
        return;
    }

    public void clearDatasetMemory()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r4;
        ucar.nc2.dt.radial.Nids2Dataset r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        $r1 = virtualinvoke r0.<ucar.nc2.dt.radial.Nids2Dataset: java.util.List getDataVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.dt.RadialDatasetSweep$RadialVariable) $r3;

        interfaceinvoke r4.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: void clearVariableMemory()>();

        goto label1;

     label2:
        return;
    }

    protected ucar.nc2.dt.RadialDatasetSweep$RadialVariable makeRadialVariable(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.VariableSimpleIF, ucar.nc2.Variable)
    {
        ucar.nc2.VariableSimpleIF r2;
        ucar.nc2.dt.radial.Nids2Dataset r0;
        ucar.nc2.Variable r3;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.VariableSimpleIF;

        r3 := @parameter2: ucar.nc2.Variable;

        return null;
    }

    public java.lang.String getInfo()
    {
        java.lang.StringBuffer $r3;
        ucar.nc2.dt.radial.Nids2Dataset r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r4, $r5;

        r1 := @this: ucar.nc2.dt.radial.Nids2Dataset;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nids2Dataset\n");

        $r2 = specialinvoke r1.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.lang.String getDetailInfo()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r3 = r1.<ucar.nc2.dt.radial.Nids2Dataset: java.lang.StringBuffer parseInfo>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static void testRadialVariable(ucar.nc2.dt.RadialDatasetSweep$RadialVariable) throws java.io.IOException
    {
        java.io.PrintStream $r2, $r8;
        ucar.nc2.dt.RadialDatasetSweep$Sweep $r6;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r0;
        int $i0;
        float $f0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r9, $r10;
        java.lang.String $r5, $r11;

        r0 := @parameter0: ucar.nc2.dt.RadialDatasetSweep$RadialVariable;

        $i0 = interfaceinvoke r0.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: int getNumSweeps()>();

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** radar Sweep number is: \n");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = interfaceinvoke r0.<ucar.nc2.dt.RadialDatasetSweep$RadialVariable: ucar.nc2.dt.RadialDatasetSweep$Sweep getSweep(int)>(0);

        interfaceinvoke $r6.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float[] readData()>();

        $f0 = interfaceinvoke $r6.<ucar.nc2.dt.RadialDatasetSweep$Sweep: float getGateSize()>();

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** radar Sweep gate is: \n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception, java.io.IOException, java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        ucar.nc2.dt.RadialDatasetSweep r3, r7;
        java.util.Date $r8, $r9;
        java.lang.String[] r14;
        ucar.nc2.dt.TypedDataset $r2, $r6;
        ucar.nc2.dt.RadialDatasetSweep$RadialVariable r11, r13;
        ucar.nc2.VariableSimpleIF $r10, $r12;
        java.lang.StringBuilder $r0, $r4;
        ucar.nc2.constants.FeatureType $r1, $r5;

        r14 := @parameter0: java.lang.String[];

        $r1 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <ucar.nc2.dt.TypedDatasetFactory: ucar.nc2.dt.TypedDataset open(ucar.nc2.constants.FeatureType,java.lang.String,ucar.nc2.util.CancelTask,java.lang.StringBuilder)>($r1, "/home/yuanho/Desktop/TBWI/TBWI.181r0.20080829_1620", null, $r0);

        r3 = (ucar.nc2.dt.RadialDatasetSweep) $r2;

        $r5 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = staticinvoke <ucar.nc2.dt.TypedDatasetFactory: ucar.nc2.dt.TypedDataset open(ucar.nc2.constants.FeatureType,java.lang.String,ucar.nc2.util.CancelTask,java.lang.StringBuilder)>($r5, "/home/yuanho/Desktop/TBWI/TBWI.78ohp.20080829_1619", null, $r4);

        r7 = (ucar.nc2.dt.RadialDatasetSweep) $r6;

        $r8 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.util.Date getStartDate()>();

        virtualinvoke $r8.<java.util.Date: java.lang.String toString()>();

        $r9 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.util.Date getEndDate()>();

        virtualinvoke $r9.<java.util.Date: java.lang.String toString()>();

        interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.lang.String getRadarID()>();

        interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.lang.String getRadarName()>();

        interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: java.lang.String getRadarID()>();

        $r10 = interfaceinvoke r3.<ucar.nc2.dt.RadialDatasetSweep: ucar.nc2.VariableSimpleIF getDataVariable(java.lang.String)>("BaseReflectivity");

        r11 = (ucar.nc2.dt.RadialDatasetSweep$RadialVariable) $r10;

        staticinvoke <ucar.nc2.dt.radial.Nids2Dataset: void testRadialVariable(ucar.nc2.dt.RadialDatasetSweep$RadialVariable)>(r11);

        $r12 = interfaceinvoke r7.<ucar.nc2.dt.RadialDatasetSweep: ucar.nc2.VariableSimpleIF getDataVariable(java.lang.String)>("Precip1hr");

        r13 = (ucar.nc2.dt.RadialDatasetSweep$RadialVariable) $r12;

        staticinvoke <ucar.nc2.dt.radial.Nids2Dataset: void testRadialVariable(ucar.nc2.dt.RadialDatasetSweep$RadialVariable)>(r13);

        return;
    }

    static java.util.Date access$100(ucar.nc2.dt.radial.Nids2Dataset)
    {
        java.util.Date $r1;
        ucar.nc2.dt.radial.Nids2Dataset r0;

        r0 := @parameter0: ucar.nc2.dt.radial.Nids2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset: java.util.Date startDate>;

        return $r1;
    }

    static java.util.Date access$200(ucar.nc2.dt.radial.Nids2Dataset)
    {
        java.util.Date $r1;
        ucar.nc2.dt.radial.Nids2Dataset r0;

        r0 := @parameter0: ucar.nc2.dt.radial.Nids2Dataset;

        $r1 = r0.<ucar.nc2.dt.radial.Nids2Dataset: java.util.Date endDate>;

        return $r1;
    }
}
