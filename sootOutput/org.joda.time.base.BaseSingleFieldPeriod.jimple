public abstract class org.joda.time.base.BaseSingleFieldPeriod extends java.lang.Object implements org.joda.time.ReadablePeriod, java.lang.Comparable, java.io.Serializable
{
    private static final long serialVersionUID;
    private int iPeriod;

    protected static int between(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant, org.joda.time.DurationFieldType)
    {
        org.joda.time.DurationField $r5;
        org.joda.time.Chronology $r3;
        org.joda.time.ReadableInstant r0, r2;
        long $l0, $l1;
        java.lang.IllegalArgumentException $r1;
        org.joda.time.DurationFieldType r4;
        int $i2;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        r4 := @parameter2: org.joda.time.DurationFieldType;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadableInstant objects must not be null");

        throw $r1;

     label2:
        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0);

        $r5 = virtualinvoke r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r3);

        $l0 = interfaceinvoke r2.<org.joda.time.ReadableInstant: long getMillis()>();

        $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>();

        $i2 = virtualinvoke $r5.<org.joda.time.DurationField: int getDifference(long,long)>($l0, $l1);

        return $i2;
    }

    protected static int between(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.ReadablePeriod)
    {
        long $l3, $l4;
        int[] $r7;
        int $i0, $i1, $i2, $i5, i6;
        org.joda.time.DateTimeFieldType $r9, $r10;
        boolean $z0;
        org.joda.time.Chronology $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r1, $r8, $r11, $r12;
        org.joda.time.ReadablePeriod r6;
        org.joda.time.ReadablePartial r0, r2;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r6 := @parameter2: org.joda.time.ReadablePeriod;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not be null");

        throw $r1;

     label2:
        $i0 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>();

        $i1 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int size()>();

        if $i0 == $i1 goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r12;

     label3:
        i6 = 0;

        $i2 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>();

     label4:
        if i6 >= $i2 goto label6;

        $r9 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i6);

        $r10 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i6);

        if $r9 == $r10 goto label5;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r11;

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r0);

        if $z0 != 0 goto label7;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must be contiguous");

        throw $r8;

     label7:
        $r3 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r3);

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $l3 = virtualinvoke $r5.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, 0L);

        $l4 = virtualinvoke $r5.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r2, 0L);

        $r7 = virtualinvoke $r5.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r6, $l3, $l4);

        $i5 = $r7[0];

        return $i5;
    }

    protected static int standardPeriodIn(org.joda.time.ReadablePeriod, long)
    {
        long l1, $l2, $l5, $l6, l7;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r10;
        int $i0, $i3, $i4, i8;
        java.lang.String $r7, $r11;
        boolean $z0;
        org.joda.time.DurationField $r3;
        java.lang.IllegalArgumentException $r4;
        org.joda.time.ReadablePeriod r0;
        org.joda.time.DurationFieldType $r2;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        l1 := @parameter1: long;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        l7 = 0L;

        i8 = 0;

     label2:
        $i0 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>();

        if i8 >= $i0 goto label5;

        $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i8);

        if $i4 == 0 goto label4;

        $r2 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i8);

        $r3 = virtualinvoke $r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r1);

        $z0 = virtualinvoke $r3.<org.joda.time.DurationField: boolean isPrecise()>();

        if $z0 != 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot convert period to duration as ");

        $r7 = virtualinvoke $r3.<org.joda.time.DurationField: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not precise in the period ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label3:
        $l5 = virtualinvoke $r3.<org.joda.time.DurationField: long getUnitMillis()>();

        $l6 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l5, $i4);

        l7 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l7, $l6);

     label4:
        i8 = i8 + 1;

        goto label2;

     label5:
        $l2 = l7 / l1;

        $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2);

        return $i3;
    }

    protected void <init>(int)
    {
        int i0;
        org.joda.time.base.BaseSingleFieldPeriod r0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> = i0;

        return;
    }

    protected int getValue()
    {
        int $i0;
        org.joda.time.base.BaseSingleFieldPeriod r0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>;

        return $i0;
    }

    protected void setValue(int)
    {
        int i0;
        org.joda.time.base.BaseSingleFieldPeriod r0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        i0 := @parameter0: int;

        r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> = i0;

        return;
    }

    public abstract org.joda.time.DurationFieldType getFieldType();

    public abstract org.joda.time.PeriodType getPeriodType();

    public int size()
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        return 1;
    }

    public org.joda.time.DurationFieldType getFieldType(int)
    {
        java.lang.IndexOutOfBoundsException $r2;
        org.joda.time.DurationFieldType $r1;
        int i0;
        org.joda.time.base.BaseSingleFieldPeriod r0;
        java.lang.String $r3;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>();

        return $r1;
    }

    public int getValue(int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        int i0, $i1;
        org.joda.time.base.BaseSingleFieldPeriod r0;
        java.lang.String $r2;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        return $i1;
    }

    public int get(org.joda.time.DurationFieldType)
    {
        org.joda.time.DurationFieldType r0, $r2;
        int $i0;
        org.joda.time.base.BaseSingleFieldPeriod r1;

        r1 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        r0 := @parameter0: org.joda.time.DurationFieldType;

        $r2 = virtualinvoke r1.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>();

        if r0 != $r2 goto label1;

        $i0 = virtualinvoke r1.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        return $i0;

     label1:
        return 0;
    }

    public boolean isSupported(org.joda.time.DurationFieldType)
    {
        org.joda.time.DurationFieldType r0, $r2;
        org.joda.time.base.BaseSingleFieldPeriod r1;
        boolean $z0;

        r1 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        r0 := @parameter0: org.joda.time.DurationFieldType;

        $r2 = virtualinvoke r1.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>();

        if r0 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.joda.time.Period toPeriod()
    {
        org.joda.time.Period $r1, $r2;
        org.joda.time.base.BaseSingleFieldPeriod r0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $r1 = <org.joda.time.Period: org.joda.time.Period ZERO>;

        $r2 = virtualinvoke $r1.<org.joda.time.Period: org.joda.time.Period withFields(org.joda.time.ReadablePeriod)>(r0);

        return $r2;
    }

    public org.joda.time.MutablePeriod toMutablePeriod()
    {
        org.joda.time.base.BaseSingleFieldPeriod r1;
        org.joda.time.MutablePeriod $r0;

        r1 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $r0 = new org.joda.time.MutablePeriod;

        specialinvoke $r0.<org.joda.time.MutablePeriod: void <init>()>();

        virtualinvoke $r0.<org.joda.time.MutablePeriod: void add(org.joda.time.ReadablePeriod)>(r1);

        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.base.BaseSingleFieldPeriod r0;
        org.joda.time.PeriodType $r3, $r4;
        org.joda.time.ReadablePeriod r2;
        int $i0, $i1;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.ReadablePeriod;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.joda.time.ReadablePeriod) r1;

        $r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>();

        $r4 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.PeriodType getPeriodType()>();

        if $r3 != $r4 goto label3;

        $i0 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(0);

        $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        if $i0 != $i1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public int hashCode()
    {
        org.joda.time.DurationFieldType $r1;
        int $i0, $i1, $i2, i3, i4;
        org.joda.time.base.BaseSingleFieldPeriod r0;

        r0 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        $i0 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        i3 = 459 + $i0;

        $i1 = 27 * i3;

        $r1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>();

        $i2 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        i4 = $i1 + $i2;

        return i4;
    }

    public int compareTo(java.lang.Object)
    {
        java.lang.ClassCastException $r14;
        java.lang.StringBuffer $r8, $r9, $r11, $r13;
        int $i0, $i1, $i3;
        java.lang.String $r12;
        org.joda.time.base.BaseSingleFieldPeriod r2, $r4;
        java.lang.Object r0;
        java.lang.Class $r1, $r3, $r7, $r10;

        r2 := @this: org.joda.time.base.BaseSingleFieldPeriod;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r3 goto label1;

        $r14 = new java.lang.ClassCastException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be compared to ");

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.ClassCastException: void <init>(java.lang.String)>($r12);

        throw $r14;

     label1:
        $r4 = (org.joda.time.base.BaseSingleFieldPeriod) r0;

        $i0 = virtualinvoke $r4.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        $i1 = virtualinvoke r2.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>();

        if $i1 <= $i0 goto label2;

        return 1;

     label2:
        if $i1 >= $i0 goto label3;

        $i3 = (int) -1;

        return $i3;

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <org.joda.time.base.BaseSingleFieldPeriod: long serialVersionUID> = 9386874258972L;

        return;
    }
}
