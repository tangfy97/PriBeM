public class org.springframework.util.CompositeIterator extends java.lang.Object implements java.util.Iterator
{
    private java.util.List iterators;
    private boolean inUse;

    public void <init>()
    {
        java.util.LinkedList $r1;
        org.springframework.util.CompositeIterator r0;

        r0 := @this: org.springframework.util.CompositeIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.springframework.util.CompositeIterator: java.util.List iterators> = $r1;

        r0.<org.springframework.util.CompositeIterator: boolean inUse> = 0;

        return;
    }

    public void add(java.util.Iterator)
    {
        java.util.Iterator r1;
        org.springframework.util.CompositeIterator r0;
        java.lang.IllegalArgumentException $r4;
        java.util.List $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.util.CompositeIterator;

        r1 := @parameter0: java.util.Iterator;

        $z0 = r0.<org.springframework.util.CompositeIterator: boolean inUse>;

        if $z0 == 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        staticinvoke <org.springframework.util.Assert: void state(boolean,java.lang.String)>($z2, "You can no longer add iterator to a composite iterator that\'s already in use");

        $r2 = r0.<org.springframework.util.CompositeIterator: java.util.List iterators>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You cannot add the same iterator twice");

        throw $r4;

     label3:
        $r3 = r0.<org.springframework.util.CompositeIterator: java.util.List iterators>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean hasNext()
    {
        java.util.List $r1;
        java.util.Iterator $r2, $r4;
        org.springframework.util.CompositeIterator r0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.CompositeIterator;

        r0.<org.springframework.util.CompositeIterator: boolean inUse> = 1;

        $r1 = r0.<org.springframework.util.CompositeIterator: java.util.List iterators>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Iterator) $r3;

        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;
    }

    public java.lang.Object next()
    {
        java.util.Iterator $r2, r4;
        org.springframework.util.CompositeIterator r0;
        java.util.List $r1;
        java.lang.Object $r3, $r5;
        java.util.NoSuchElementException $r6;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.CompositeIterator;

        r0.<org.springframework.util.CompositeIterator: boolean inUse> = 1;

        $r1 = r0.<org.springframework.util.CompositeIterator: java.util.List iterators>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Iterator) $r3;

        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        return $r5;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Exhaused all iterators");

        throw $r6;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        org.springframework.util.CompositeIterator r1;

        r1 := @this: org.springframework.util.CompositeIterator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Remove is not supported");

        throw $r0;
    }
}
