public class org.eclipse.jdt.internal.compiler.ast.BreakStatement extends org.eclipse.jdt.internal.compiler.ast.BranchStatement
{

    public void <init>(char[], int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.BreakStatement r0;
        int i0, i1;
        char[] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BreakStatement;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BranchStatement: void <init>(char[],int,int)>(r1, i0, i1);

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r23, $r24;
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r6;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r2, r4, $r25, r26, $r27;
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.ast.TryStatement r16;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r5;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r7;
        org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement $r10;
        org.eclipse.jdt.internal.compiler.ast.ASTNode r15;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r8;
        org.eclipse.jdt.internal.compiler.ast.BreakStatement r0;
        int $i0, $i1, $i2, $i3, i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] $r9, $r13, $r14, $r18, $r19, $r20, $r21, $r28;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r11, $r12, $r17;
        char[] $r1, $r3, $r22;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BreakStatement;

        r5 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r7 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: char[] label>;

        if $r1 != null goto label01;

        $r25 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForDefaultBreak()>();

        goto label02;

     label01:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: char[] label>;

        $r25 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext getTargetContextForBreakLabel(char[])>($r3);

     label02:
        r4 = $r25;

        if $r25 != null goto label05;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: char[] label>;

        if $r22 != null goto label03;

        $r24 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidBreak(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r0);

        goto label04;

     label03:
        $r23 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void undefinedLabel(org.eclipse.jdt.internal.compiler.ast.BranchStatement)>(r0);

     label04:
        return r7;

     label05:
        $r6 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i0 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r7);

        r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: int initStateIndex> = $i0;

        $r8 = virtualinvoke $r25.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.codegen.BranchLabel breakLabel()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: org.eclipse.jdt.internal.compiler.codegen.BranchLabel targetLabel> = $r8;

        r26 = r2;

        i4 = 0;

        $r9 = newarray (org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement)[5];

        r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines> = $r9;

     label06:
        $r10 = virtualinvoke r26.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement subroutine()>();

        if $r10 == null goto label08;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines>;

        $i1 = lengthof $r18;

        if i4 != $i1 goto label07;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines>;

        $i3 = i4 * 2;

        $r20 = newarray (org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement)[$i3];

        r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines> = $r20;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, $r20, 0, i4);

     label07:
        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines>;

        $i2 = i4;

        i4 = i4 + 1;

        $r19[$i2] = $r10;

        $z2 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement: boolean isSubRoutineEscaping()>();

        if $z2 == 0 goto label08;

        goto label11;

     label08:
        $r11 = virtualinvoke r7.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        virtualinvoke r26.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordReturnFrom(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r11);

        virtualinvoke r26.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordBreakTo(org.eclipse.jdt.internal.compiler.flow.FlowContext)>(r4);

        $z0 = r26 instanceof org.eclipse.jdt.internal.compiler.flow.InsideSubRoutineFlowContext;

        if $z0 == 0 goto label09;

        r15 = r26.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.ast.ASTNode associatedNode>;

        $z1 = r15 instanceof org.eclipse.jdt.internal.compiler.ast.TryStatement;

        if $z1 == 0 goto label10;

        r16 = (org.eclipse.jdt.internal.compiler.ast.TryStatement) r15;

        $r17 = r16.<org.eclipse.jdt.internal.compiler.ast.TryStatement: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo subRoutineInits>;

        virtualinvoke r7.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo addInitializationsFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r17);

        goto label10;

     label09:
        if r26 != r4 goto label10;

        virtualinvoke r4.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordBreakFrom(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r7);

        goto label11;

     label10:
        $r27 = r26.<org.eclipse.jdt.internal.compiler.flow.FlowContext: org.eclipse.jdt.internal.compiler.flow.FlowContext parent>;

        r26 = $r27;

        if $r27 != null goto label06;

     label11:
        $r28 = r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines>;

        $i5 = lengthof $r28;

        if i4 == $i5 goto label12;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines>;

        $r13 = newarray (org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement)[i4];

        r0.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement[] subroutines> = $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r13, 0, i4);

     label12:
        $r12 = <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo DEAD_END>;

        return $r12;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.BreakStatement r2;
        java.lang.StringBuffer r0, $r1, $r4;
        int i0;
        char[] $r3, $r5;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.BreakStatement;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        $r1 = staticinvoke <org.eclipse.jdt.internal.compiler.ast.BreakStatement: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("break ");

        $r3 = r2.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: char[] label>;

        if $r3 == null goto label1;

        $r5 = r2.<org.eclipse.jdt.internal.compiler.ast.BreakStatement: char[] label>;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r5);

     label1:
        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        return $r4;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.BreakStatement r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.BreakStatement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.BreakStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.BreakStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
