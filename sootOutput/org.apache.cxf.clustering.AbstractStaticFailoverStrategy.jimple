public abstract class org.apache.cxf.clustering.AbstractStaticFailoverStrategy extends java.lang.Object implements org.apache.cxf.clustering.FailoverStrategy
{
    private static final java.util.logging.Logger LOG;
    private java.util.List alternateAddresses;
    private long delayBetweenRetries;

    public void <init>()
    {
        org.apache.cxf.clustering.AbstractStaticFailoverStrategy r0;

        r0 := @this: org.apache.cxf.clustering.AbstractStaticFailoverStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setDelayBetweenRetries(long)
    {
        long l0;
        org.apache.cxf.clustering.AbstractStaticFailoverStrategy r0;

        r0 := @this: org.apache.cxf.clustering.AbstractStaticFailoverStrategy;

        l0 := @parameter0: long;

        r0.<org.apache.cxf.clustering.AbstractStaticFailoverStrategy: long delayBetweenRetries> = l0;

        return;
    }

    public long getDelayBetweenRetries()
    {
        long $l0;
        org.apache.cxf.clustering.AbstractStaticFailoverStrategy r0;

        r0 := @this: org.apache.cxf.clustering.AbstractStaticFailoverStrategy;

        $l0 = r0.<org.apache.cxf.clustering.AbstractStaticFailoverStrategy: long delayBetweenRetries>;

        return $l0;
    }

    public void setAlternateAddresses(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.clustering.AbstractStaticFailoverStrategy r0;

        r0 := @this: org.apache.cxf.clustering.AbstractStaticFailoverStrategy;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.List alternateAddresses> = r1;

        return;
    }

    public java.util.List getAlternateAddresses(org.apache.cxf.message.Exchange)
    {
        java.util.List $r1, $r2;
        org.apache.cxf.clustering.AbstractStaticFailoverStrategy r0;
        org.apache.cxf.message.Exchange r3;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.cxf.clustering.AbstractStaticFailoverStrategy;

        r3 := @parameter0: org.apache.cxf.message.Exchange;

        $r1 = r0.<org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.List alternateAddresses>;

        if $r1 == null goto label1;

        $r4 = new java.util.ArrayList;

        $r2 = r0.<org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.List alternateAddresses>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.lang.String selectAlternateAddress(java.util.List)
    {
        java.util.logging.Logger $r1, $r5;
        java.util.logging.Level $r4;
        java.util.List r0;
        org.apache.cxf.clustering.AbstractStaticFailoverStrategy r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r6;

        r2 := @this: org.apache.cxf.clustering.AbstractStaticFailoverStrategy;

        r0 := @parameter0: java.util.List;

        r6 = null;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r3 = virtualinvoke r2.<org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.lang.Object getNextAlternate(java.util.List)>(r0);

        r6 = (java.lang.String) $r3;

        $r5 = <org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.logging.Logger LOG>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r4, "FAILING_OVER_TO_ADDRESS_OVERRIDE", r6);

        goto label2;

     label1:
        $r1 = <org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.logging.Logger LOG>;

        virtualinvoke $r1.<java.util.logging.Logger: void warning(java.lang.String)>("NO_ALTERNATE_TARGETS_REMAIN");

     label2:
        return r6;
    }

    public java.util.List getAlternateEndpoints(org.apache.cxf.message.Exchange)
    {
        java.util.List $r2;
        org.apache.cxf.clustering.AbstractStaticFailoverStrategy r0;
        org.apache.cxf.message.Exchange r1;

        r0 := @this: org.apache.cxf.clustering.AbstractStaticFailoverStrategy;

        r1 := @parameter0: org.apache.cxf.message.Exchange;

        $r2 = virtualinvoke r0.<org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.List getEndpoints(org.apache.cxf.message.Exchange,boolean)>(r1, 0);

        return $r2;
    }

    public org.apache.cxf.endpoint.Endpoint selectAlternateEndpoint(java.util.List)
    {
        org.apache.cxf.service.model.EndpointInfo $r7, $r9;
        java.lang.Object[] $r4;
        java.util.logging.Logger $r1, $r5;
        java.util.logging.Level $r6;
        java.util.List r0;
        org.apache.cxf.endpoint.Endpoint r11;
        org.apache.cxf.clustering.AbstractStaticFailoverStrategy r2;
        int $i0;
        java.lang.Object $r3;
        javax.xml.namespace.QName $r8;
        java.lang.String $r10;

        r2 := @this: org.apache.cxf.clustering.AbstractStaticFailoverStrategy;

        r0 := @parameter0: java.util.List;

        r11 = null;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r3 = virtualinvoke r2.<org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.lang.Object getNextAlternate(java.util.List)>(r0);

        r11 = (org.apache.cxf.endpoint.Endpoint) $r3;

        $r5 = <org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.logging.Logger LOG>;

        $r6 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r4 = newarray (java.lang.Object)[2];

        $r7 = interfaceinvoke r11.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r8 = virtualinvoke $r7.<org.apache.cxf.service.model.EndpointInfo: javax.xml.namespace.QName getName()>();

        $r4[0] = $r8;

        $r9 = interfaceinvoke r11.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r10 = virtualinvoke $r9.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        $r4[1] = $r10;

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r6, "FAILING_OVER_TO_ALTERNATE_ENDPOINT", $r4);

        goto label2;

     label1:
        $r1 = <org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.logging.Logger LOG>;

        virtualinvoke $r1.<java.util.logging.Logger: void warning(java.lang.String)>("NO_ALTERNATE_TARGETS_REMAIN");

     label2:
        return r11;
    }

    protected java.util.List getEndpoints(org.apache.cxf.message.Exchange, boolean)
    {
        org.apache.cxf.service.Service $r3, $r22;
        java.util.Map $r23;
        boolean $z0, $z1, $z2, z3, $z4;
        java.util.Collection $r12;
        java.util.logging.Logger $r19, $r26;
        java.util.List $r4;
        javax.xml.namespace.QName $r7, $r17, $r21, $r24, $r28;
        java.lang.Object[] $r18;
        org.apache.cxf.binding.Binding $r5;
        org.apache.cxf.service.model.ServiceInfo r11;
        java.util.ArrayList $r8;
        java.util.logging.Level $r20, $r27;
        java.lang.String $r29, $r31;
        org.apache.cxf.service.model.EndpointInfo r15, $r30;
        java.util.Iterator $r9, $r13;
        org.apache.cxf.service.model.BindingInfo $r6, $r16;
        org.apache.cxf.message.Exchange r0;
        org.apache.cxf.endpoint.Endpoint r2, $r32;
        org.apache.cxf.clustering.AbstractStaticFailoverStrategy r33;
        java.lang.Object $r1, $r10, $r14, $r25;

        r33 := @this: org.apache.cxf.clustering.AbstractStaticFailoverStrategy;

        r0 := @parameter0: org.apache.cxf.message.Exchange;

        z3 := @parameter1: boolean;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/endpoint/Endpoint;");

        r2 = (org.apache.cxf.endpoint.Endpoint) $r1;

        $r3 = interfaceinvoke r2.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.Service getService()>();

        $r4 = interfaceinvoke $r3.<org.apache.cxf.service.Service: java.util.List getServiceInfos()>();

        $r5 = interfaceinvoke r2.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.binding.Binding getBinding()>();

        $r6 = interfaceinvoke $r5.<org.apache.cxf.binding.Binding: org.apache.cxf.service.model.BindingInfo getBindingInfo()>();

        $r7 = virtualinvoke $r6.<org.apache.cxf.service.model.BindingInfo: javax.xml.namespace.QName getName()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.cxf.service.model.ServiceInfo) $r10;

        $r12 = virtualinvoke r11.<org.apache.cxf.service.model.ServiceInfo: java.util.Collection getEndpoints()>();

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.cxf.service.model.EndpointInfo) $r14;

        $r16 = virtualinvoke r15.<org.apache.cxf.service.model.EndpointInfo: org.apache.cxf.service.model.BindingInfo getBinding()>();

        $r17 = virtualinvoke $r16.<org.apache.cxf.service.model.BindingInfo: javax.xml.namespace.QName getName()>();

        $z2 = virtualinvoke $r17.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label5;

        if z3 != 0 goto label3;

        $r29 = virtualinvoke r15.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        $r30 = interfaceinvoke r2.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r31 = virtualinvoke $r30.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        $z4 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if $z4 != 0 goto label6;

     label3:
        $r22 = interfaceinvoke r2.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.Service getService()>();

        $r23 = interfaceinvoke $r22.<org.apache.cxf.service.Service: java.util.Map getEndpoints()>();

        $r24 = virtualinvoke r15.<org.apache.cxf.service.model.EndpointInfo: javax.xml.namespace.QName getName()>();

        $r25 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        $r32 = (org.apache.cxf.endpoint.Endpoint) $r25;

        if $r32 == null goto label4;

        $r26 = <org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.logging.Logger LOG>;

        $r27 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r28 = virtualinvoke r15.<org.apache.cxf.service.model.EndpointInfo: javax.xml.namespace.QName getName()>();

        virtualinvoke $r26.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r27, "FAILOVER_CANDIDATE_ACCEPTED", $r28);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r32);

     label4:
        goto label6;

     label5:
        $r19 = <org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.logging.Logger LOG>;

        $r20 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r18 = newarray (java.lang.Object)[2];

        $r21 = virtualinvoke r15.<org.apache.cxf.service.model.EndpointInfo: javax.xml.namespace.QName getName()>();

        $r18[0] = $r21;

        $r18[1] = $r17;

        virtualinvoke $r19.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r20, "FAILOVER_CANDIDATE_REJECTED", $r18);

     label6:
        goto label2;

     label7:
        goto label1;

     label8:
        return $r8;
    }

    protected abstract java.lang.Object getNextAlternate(java.util.List);

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/clustering/AbstractStaticFailoverStrategy;");

        <org.apache.cxf.clustering.AbstractStaticFailoverStrategy: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
