public final class org.wiztools.restclient.util.Util extends java.lang.Object
{
    private static final java.lang.String ENCODE;
    private static final int BUFF_SIZE;

    private void <init>()
    {
        org.wiztools.restclient.util.Util r0;

        r0 := @this: org.wiztools.restclient.util.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String base64encode(java.lang.String)
    {
        byte[] $r2;
        java.nio.charset.Charset $r1;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.wiztools.commons.Charsets: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r3 = staticinvoke <org.wiztools.restclient.util.Util: java.lang.String base64encode(byte[])>($r2);

        return $r3;
    }

    public static java.lang.String base64encode(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>(r0);

        return $r1;
    }

    public static byte[] base64decodeByteArray(java.lang.String) throws org.wiztools.restclient.Base64Exception
    {
        byte[] $r1;
        org.wiztools.restclient.Base64Exception $r2;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r2 = new org.wiztools.restclient.Base64Exception;

        specialinvoke $r2.<org.wiztools.restclient.Base64Exception: void <init>(java.lang.String)>("Provided string is not Base64 encoded");

        throw $r2;

     label1:
        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String base64decode(java.lang.String) throws org.wiztools.restclient.Base64Exception
    {
        byte[] $r1, $r6;
        java.nio.charset.CharacterCodingException $r11;
        java.nio.charset.MalformedInputException $r15;
        java.nio.ByteBuffer $r7;
        java.nio.charset.Charset $r2;
        java.nio.charset.CodingErrorAction $r4, $r5;
        org.wiztools.restclient.Base64Exception $r10, $r12, $r14, $r16;
        int $i0;
        java.lang.String r0, $r9;
        boolean $z0;
        java.nio.CharBuffer $r8;
        java.nio.charset.UnmappableCharacterException $r13;
        java.nio.charset.CharsetDecoder $r3;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r10 = new org.wiztools.restclient.Base64Exception;

        specialinvoke $r10.<org.wiztools.restclient.Base64Exception: void <init>(java.lang.String)>("Provided string is not Base64 encoded");

        throw $r10;

     label1:
        $r1 = staticinvoke <org.wiztools.restclient.util.Util: byte[] base64decodeByteArray(java.lang.String)>(r0);

        $r2 = <org.wiztools.commons.Charsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

     label2:
        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);

        $r5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r5);

        $i0 = lengthof $r1;

        $r6 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r1, $i0);

        $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r6);

        $r8 = virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r7);

        $r9 = virtualinvoke $r8.<java.nio.CharBuffer: java.lang.String toString()>();

     label3:
        return $r9;

     label4:
        $r15 := @caughtexception;

        $r16 = new org.wiztools.restclient.Base64Exception;

        specialinvoke $r16.<org.wiztools.restclient.Base64Exception: void <init>(java.lang.String,java.lang.Throwable)>("Input is malformed", $r15);

        throw $r16;

     label5:
        $r13 := @caughtexception;

        $r14 = new org.wiztools.restclient.Base64Exception;

        specialinvoke $r14.<org.wiztools.restclient.Base64Exception: void <init>(java.lang.String,java.lang.Throwable)>("Unmappable characters found", $r13);

        throw $r14;

     label6:
        $r11 := @caughtexception;

        $r12 = new org.wiztools.restclient.Base64Exception;

        specialinvoke $r12.<org.wiztools.restclient.Base64Exception: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

        catch java.nio.charset.MalformedInputException from label2 to label3 with label4;
        catch java.nio.charset.UnmappableCharacterException from label2 to label3 with label5;
        catch java.nio.charset.CharacterCodingException from label2 to label3 with label6;
    }

    public static java.lang.String getStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.io.PrintWriter $r3;
        java.io.StringWriter $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;
        java.lang.String $r1, $r7, $r9;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer)>($r2);

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.lang.String getHTMLListFromList(java.util.List)
    {
        java.util.Iterator $r2;
        java.util.List r1;
        java.lang.StringBuilder $r0, $r6, $r7;
        java.lang.Object $r4;
        java.lang.String $r3, r5;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<html><ul>");

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<li>");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</li>");

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ul></html>");

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String parameterEncode(org.wiztools.commons.MultiValueMap)
    {
        int $i0, $i1;
        java.lang.String $r4, r6, r10, $r11, $r12;
        boolean $z0, $z1;
        java.util.Iterator $r3, $r8;
        java.util.Collection $r7;
        java.util.Set $r2;
        java.lang.StringBuilder $r0, $r13, $r14, $r15;
        java.lang.Object $r5, $r9;
        org.wiztools.commons.MultiValueMap r1;
        java.io.UnsupportedEncodingException $r16;

        r1 := @parameter0: org.wiztools.commons.MultiValueMap;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r1.<org.wiztools.commons.MultiValueMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

     label2:
        $r7 = interfaceinvoke r1.<org.wiztools.commons.MultiValueMap: java.util.Collection get(java.lang.Object)>(r6);

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $r11 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(r6, "UTF-8");

        $r12 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(r10, "UTF-8");

        $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        goto label3;

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

     label6:
        goto label1;

     label7:
        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        $i1 = $i0 - 1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i1);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

        catch java.io.UnsupportedEncodingException from label2 to label4 with label5;
    }

    public static void createReqResArchive(org.wiztools.restclient.bean.Request, org.wiztools.restclient.bean.Response, java.io.File) throws java.io.IOException, org.wiztools.restclient.XMLException
    {
        java.util.zip.ZipOutputStream $r6;
        java.lang.Throwable $r17;
        byte[] r5;
        java.util.HashMap $r4;
        org.wiztools.restclient.bean.Request r2;
        int $i0;
        java.lang.String r19;
        java.util.zip.ZipEntry $r15;
        boolean $z0, z1;
        java.util.Iterator $r10;
        java.io.FileOutputStream $r7;
        java.util.Set $r9;
        java.io.IOException $r16, $r18, r20, r21;
        java.io.FileInputStream $r14;
        java.io.File $r0, $r1, r8, r13;
        java.lang.Object $r11, $r12;
        org.wiztools.restclient.bean.Response r3;

        r2 := @parameter0: org.wiztools.restclient.bean.Request;

        r3 := @parameter1: org.wiztools.restclient.bean.Response;

        r8 := @parameter2: java.io.File;

        $r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("req-", ".xml");

        $r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("res-", ".xml");

        staticinvoke <org.wiztools.restclient.util.XMLUtil: void writeRequestXML(org.wiztools.restclient.bean.Request,java.io.File)>(r2, $r0);

        staticinvoke <org.wiztools.restclient.util.XMLUtil: void writeResponseXML(org.wiztools.restclient.bean.Response,java.io.File)>(r3, $r1);

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("request.rcq", $r0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("response.rcs", $r1);

        r5 = newarray (byte)[4096];

        $r6 = new java.util.zip.ZipOutputStream;

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r8);

        specialinvoke $r6.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>($r7);

     label01:
        $r9 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r11;

        $r12 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        r13 = (java.io.File) $r12;

        $r14 = new java.io.FileInputStream;

        specialinvoke $r14.<java.io.FileInputStream: void <init>(java.io.File)>(r13);

        $r15 = new java.util.zip.ZipEntry;

        specialinvoke $r15.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(r19);

        virtualinvoke $r6.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r15);

     label03:
        $i0 = virtualinvoke $r14.<java.io.FileInputStream: int read(byte[])>(r5);

        if $i0 <= 0 goto label04;

        virtualinvoke $r6.<java.util.zip.ZipOutputStream: void write(byte[],int,int)>(r5, 0, $i0);

        goto label03;

     label04:
        virtualinvoke $r6.<java.util.zip.ZipOutputStream: void closeEntry()>();

        virtualinvoke $r14.<java.io.FileInputStream: void close()>();

        goto label02;

     label05:
        z1 = 1;

     label06:
        r20 = null;

        if $r6 == null goto label10;

     label07:
        virtualinvoke $r6.<java.util.zip.ZipOutputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r18 := @caughtexception;

        z1 = 0;

        r20 = $r18;

     label10:
        if z1 != 0 goto label11;

        virtualinvoke r8.<java.io.File: boolean delete()>();

     label11:
        virtualinvoke $r0.<java.io.File: boolean delete()>();

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        if r20 == null goto label12;

        throw r20;

     label12:
        goto label21;

     label13:
        $r17 := @caughtexception;

     label14:
        r21 = null;

        if $r6 == null goto label18;

     label15:
        virtualinvoke $r6.<java.util.zip.ZipOutputStream: void close()>();

     label16:
        goto label18;

     label17:
        $r16 := @caughtexception;

        r21 = $r16;

     label18:
        if 0 != 0 goto label19;

        virtualinvoke r8.<java.io.File: boolean delete()>();

     label19:
        virtualinvoke $r0.<java.io.File: boolean delete()>();

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        if r21 == null goto label20;

        throw r21;

     label20:
        throw $r17;

     label21:
        return;

        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label06 with label13;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public static org.wiztools.restclient.bean.ReqResBean getReqResArchive(java.io.File) throws java.io.FileNotFoundException, java.io.IOException, org.wiztools.restclient.XMLException
    {
        java.lang.Throwable $r16, $r17;
        byte[] r7;
        java.io.BufferedInputStream $r20;
        java.util.zip.ZipInputStream $r21;
        org.wiztools.restclient.bean.Request $r15;
        java.io.BufferedOutputStream $r23;
        org.wiztools.restclient.bean.ReqResBean $r18;
        int $i0, $i2;
        java.lang.String $r8, $r12, $r13;
        java.util.zip.ZipEntry $r5;
        boolean $z0, $z1, z2, z3;
        java.io.FileOutputStream $r22;
        java.io.IOException $r24;
        java.io.FileInputStream $r19;
        java.io.File r2, $r9;
        org.wiztools.restclient.bean.Response $r14;

        r2 := @parameter0: java.io.File;

        $r18 = new org.wiztools.restclient.bean.ReqResBean;

        specialinvoke $r18.<org.wiztools.restclient.bean.ReqResBean: void <init>()>();

        $r19 = new java.io.FileInputStream;

        specialinvoke $r19.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        $r21 = new java.util.zip.ZipInputStream;

        $r20 = new java.io.BufferedInputStream;

        specialinvoke $r20.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r19);

        specialinvoke $r21.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r20);

     label01:
        z2 = 0;

        z3 = 0;

     label02:
        $r5 = virtualinvoke $r21.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

        if $r5 == null goto label11;

        r7 = newarray (byte)[4096];

        $r8 = virtualinvoke $r5.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r9 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>($r8, "");

     label03:
        $r22 = new java.io.FileOutputStream;

        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        $r23 = new java.io.BufferedOutputStream;

        specialinvoke $r23.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r22, 4096);

     label04:
        $i0 = virtualinvoke $r21.<java.util.zip.ZipInputStream: int read(byte[],int,int)>(r7, 0, 4096);

        $i2 = (int) -1;

        if $i0 == $i2 goto label05;

        virtualinvoke $r23.<java.io.BufferedOutputStream: void write(byte[],int,int)>(r7, 0, $i0);

        goto label04;

     label05:
        virtualinvoke $r23.<java.io.BufferedOutputStream: void flush()>();

        virtualinvoke $r23.<java.io.BufferedOutputStream: void close()>();

        $r12 = virtualinvoke $r5.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("request.rcq");

        if $z0 == 0 goto label06;

        $r15 = staticinvoke <org.wiztools.restclient.util.XMLUtil: org.wiztools.restclient.bean.Request getRequestFromXMLFile(java.io.File)>($r9);

        virtualinvoke $r18.<org.wiztools.restclient.bean.ReqResBean: void setRequestBean(org.wiztools.restclient.bean.Request)>($r15);

        z2 = 1;

        goto label07;

     label06:
        $r13 = virtualinvoke $r5.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("response.rcs");

        if $z1 == 0 goto label07;

        $r14 = staticinvoke <org.wiztools.restclient.util.XMLUtil: org.wiztools.restclient.bean.Response getResponseFromXMLFile(java.io.File)>($r9);

        virtualinvoke $r18.<org.wiztools.restclient.bean.ReqResBean: void setResponseBean(org.wiztools.restclient.bean.Response)>($r14);

        z3 = 1;

     label07:
        virtualinvoke $r9.<java.io.File: boolean delete()>();

        goto label10;

     label08:
        $r17 := @caughtexception;

     label09:
        virtualinvoke $r9.<java.io.File: boolean delete()>();

        throw $r17;

     label10:
        goto label02;

     label11:
        if z2 == 0 goto label12;

        if z3 != 0 goto label13;

     label12:
        $r24 = new java.io.IOException;

        specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>("Archive does not have request.rcq/response.rcs!");

        throw $r24;

     label13:
        virtualinvoke $r21.<java.util.zip.ZipInputStream: void close()>();

        goto label16;

     label14:
        $r16 := @caughtexception;

     label15:
        virtualinvoke $r21.<java.util.zip.ZipInputStream: void close()>();

        throw $r16;

     label16:
        return $r18;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public static void <clinit>()
    {
        <org.wiztools.restclient.util.Util: int BUFF_SIZE> = 4096;

        <org.wiztools.restclient.util.Util: java.lang.String ENCODE> = "UTF-8";

        return;
    }
}
