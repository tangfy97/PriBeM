public class ucar.unidata.geoloc.projection.FlatEarth extends ucar.unidata.geoloc.ProjectionImpl
{
    private double rotAngle;
    private double lat0;
    private double lon0;
    private double cosRot;
    private double sinRot;
    private ucar.unidata.geoloc.LatLonPointImpl origin;
    private boolean spherical;
    private double radius;

    public ucar.unidata.geoloc.ProjectionImpl constructCopy()
    {
        ucar.unidata.geoloc.projection.FlatEarth $r0, r1;
        double $d0, $d1, $d2;

        r1 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        $r0 = new ucar.unidata.geoloc.projection.FlatEarth;

        $d0 = virtualinvoke r1.<ucar.unidata.geoloc.projection.FlatEarth: double getOriginLat()>();

        $d1 = virtualinvoke r1.<ucar.unidata.geoloc.projection.FlatEarth: double getOriginLon()>();

        $d2 = virtualinvoke r1.<ucar.unidata.geoloc.projection.FlatEarth: double getRotationAngle()>();

        specialinvoke $r0.<ucar.unidata.geoloc.projection.FlatEarth: void <init>(double,double,double)>($d0, $d1, $d2);

        return $r0;
    }

    public void <init>()
    {
        ucar.unidata.geoloc.projection.FlatEarth r0;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        specialinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void <init>(double,double,double)>(0.0, 0.0, 0.0);

        return;
    }

    public void <init>(double, double, double)
    {
        ucar.unidata.geoloc.LatLonPointImpl $r1;
        ucar.unidata.geoloc.projection.FlatEarth r0;
        double $d0, $d1, d2, $d3, d4, $d5, d6, $d7;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        d2 := @parameter0: double;

        d4 := @parameter1: double;

        d6 := @parameter2: double;

        specialinvoke r0.<ucar.unidata.geoloc.ProjectionImpl: void <init>()>();

        r0.<ucar.unidata.geoloc.projection.FlatEarth: boolean spherical> = 0;

        $d0 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d1 = $d0 * 0.001;

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double radius> = $d1;

        $d3 = staticinvoke <java.lang.Math: double toRadians(double)>(d2);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double lat0> = $d3;

        $d5 = staticinvoke <java.lang.Math: double toRadians(double)>(d4);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double lon0> = $d5;

        $d7 = staticinvoke <java.lang.Math: double toRadians(double)>(d6);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double rotAngle> = $d7;

        $r1 = new ucar.unidata.geoloc.LatLonPointImpl;

        specialinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: void <init>(double,double)>(d2, d4);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: ucar.unidata.geoloc.LatLonPointImpl origin> = $r1;

        specialinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void precalculate()>();

        virtualinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void addParameter(java.lang.String,java.lang.String)>("grid_mapping_name", "flat_earth");

        virtualinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void addParameter(java.lang.String,double)>("latitude_of_projection_origin", d2);

        virtualinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void addParameter(java.lang.String,double)>("longitude_of_projection_origin", d4);

        virtualinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void addParameter(java.lang.String,double)>("rotationAngle", d6);

        return;
    }

    public void <init>(double, double)
    {
        ucar.unidata.geoloc.LatLonPointImpl $r1;
        ucar.unidata.geoloc.projection.FlatEarth r0;
        double $d0, $d1, d2, $d3, d4, $d5, $d6, $d7;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        d2 := @parameter0: double;

        d4 := @parameter1: double;

        specialinvoke r0.<ucar.unidata.geoloc.ProjectionImpl: void <init>()>();

        r0.<ucar.unidata.geoloc.projection.FlatEarth: boolean spherical> = 0;

        $d0 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d1 = $d0 * 0.001;

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double radius> = $d1;

        $d3 = staticinvoke <java.lang.Math: double toRadians(double)>(d2);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double lat0> = $d3;

        $d5 = staticinvoke <java.lang.Math: double toRadians(double)>(d4);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double lon0> = $d5;

        $d6 = staticinvoke <java.lang.Math: double toRadians(double)>(0.0);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double rotAngle> = $d6;

        $r1 = new ucar.unidata.geoloc.LatLonPointImpl;

        specialinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: void <init>(double,double)>(d2, d4);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: ucar.unidata.geoloc.LatLonPointImpl origin> = $r1;

        specialinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void precalculate()>();

        virtualinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void addParameter(java.lang.String,java.lang.String)>("grid_mapping_name", "flat_earth");

        virtualinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void addParameter(java.lang.String,double)>("latitude_of_projection_origin", d2);

        virtualinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void addParameter(java.lang.String,double)>("longitude_of_projection_origin", d4);

        $d7 = r0.<ucar.unidata.geoloc.projection.FlatEarth: double rotAngle>;

        virtualinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void addParameter(java.lang.String,double)>("rotationAngle", $d7);

        return;
    }

    private void precalculate()
    {
        ucar.unidata.geoloc.projection.FlatEarth r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        $d0 = r0.<ucar.unidata.geoloc.projection.FlatEarth: double rotAngle>;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot> = $d1;

        $d2 = r0.<ucar.unidata.geoloc.projection.FlatEarth: double rotAngle>;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot> = $d3;

        return;
    }

    public java.lang.Object clone()
    {
        java.lang.Object $r1;
        ucar.unidata.geoloc.LatLonPointImpl $r3;
        ucar.unidata.geoloc.projection.FlatEarth r0, r2;
        double $d0, $d1;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        $r1 = specialinvoke r0.<ucar.unidata.geoloc.ProjectionImpl: java.lang.Object clone()>();

        r2 = (ucar.unidata.geoloc.projection.FlatEarth) $r1;

        $r3 = new ucar.unidata.geoloc.LatLonPointImpl;

        $d0 = virtualinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: double getOriginLat()>();

        $d1 = virtualinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: double getOriginLon()>();

        specialinvoke $r3.<ucar.unidata.geoloc.LatLonPointImpl: void <init>(double,double)>($d0, $d1);

        r2.<ucar.unidata.geoloc.projection.FlatEarth: ucar.unidata.geoloc.LatLonPointImpl origin> = $r3;

        return r2;
    }

    public boolean equals(java.lang.Object)
    {
        byte $b0, $b1, $b2;
        java.lang.Object r0;
        ucar.unidata.geoloc.projection.FlatEarth r1, r2;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r2 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof ucar.unidata.geoloc.projection.FlatEarth;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (ucar.unidata.geoloc.projection.FlatEarth) r0;

        $d0 = virtualinvoke r2.<ucar.unidata.geoloc.projection.FlatEarth: double getOriginLat()>();

        $d1 = virtualinvoke r1.<ucar.unidata.geoloc.projection.FlatEarth: double getOriginLat()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label2;

        $d2 = virtualinvoke r2.<ucar.unidata.geoloc.projection.FlatEarth: double getOriginLon()>();

        $d3 = virtualinvoke r1.<ucar.unidata.geoloc.projection.FlatEarth: double getOriginLon()>();

        $b1 = $d2 cmpl $d3;

        if $b1 != 0 goto label2;

        $d5 = r2.<ucar.unidata.geoloc.projection.FlatEarth: double rotAngle>;

        $d4 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double rotAngle>;

        $b2 = $d5 cmpl $d4;

        if $b2 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public double getOriginLon()
    {
        ucar.unidata.geoloc.LatLonPointImpl $r1;
        ucar.unidata.geoloc.projection.FlatEarth r0;
        double $d0;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        $r1 = r0.<ucar.unidata.geoloc.projection.FlatEarth: ucar.unidata.geoloc.LatLonPointImpl origin>;

        $d0 = virtualinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: double getLongitude()>();

        return $d0;
    }

    public void setOriginLon(double)
    {
        ucar.unidata.geoloc.LatLonPointImpl $r1;
        ucar.unidata.geoloc.projection.FlatEarth r0;
        double d0, $d1;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.unidata.geoloc.projection.FlatEarth: ucar.unidata.geoloc.LatLonPointImpl origin>;

        virtualinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: void setLongitude(double)>(d0);

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d0);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double lon0> = $d1;

        specialinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void precalculate()>();

        return;
    }

    public double getOriginLat()
    {
        ucar.unidata.geoloc.LatLonPointImpl $r1;
        ucar.unidata.geoloc.projection.FlatEarth r0;
        double $d0;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        $r1 = r0.<ucar.unidata.geoloc.projection.FlatEarth: ucar.unidata.geoloc.LatLonPointImpl origin>;

        $d0 = virtualinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: double getLatitude()>();

        return $d0;
    }

    public double getRotationAngle()
    {
        ucar.unidata.geoloc.projection.FlatEarth r0;
        double $d0;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        $d0 = r0.<ucar.unidata.geoloc.projection.FlatEarth: double rotAngle>;

        return $d0;
    }

    public void setOriginLat(double)
    {
        ucar.unidata.geoloc.LatLonPointImpl $r1;
        ucar.unidata.geoloc.projection.FlatEarth r0;
        double d0, $d1;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.unidata.geoloc.projection.FlatEarth: ucar.unidata.geoloc.LatLonPointImpl origin>;

        virtualinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: void setLatitude(double)>(d0);

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d0);

        r0.<ucar.unidata.geoloc.projection.FlatEarth: double lat0> = $d1;

        specialinvoke r0.<ucar.unidata.geoloc.projection.FlatEarth: void precalculate()>();

        return;
    }

    public java.lang.String getProjectionTypeLabel()
    {
        ucar.unidata.geoloc.projection.FlatEarth r0;

        r0 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        return "FlatEarth";
    }

    public java.lang.String paramsToString()
    {
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r7;
        ucar.unidata.geoloc.LatLonPointImpl $r3;
        java.lang.String $r4, $r8;
        ucar.unidata.geoloc.projection.FlatEarth r2;
        double $d0;

        r2 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" origin ");

        $r3 = r2.<ucar.unidata.geoloc.projection.FlatEarth: ucar.unidata.geoloc.LatLonPointImpl origin>;

        $r4 = virtualinvoke $r3.<ucar.unidata.geoloc.LatLonPointImpl: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rotationAngle ");

        $d0 = r2.<ucar.unidata.geoloc.projection.FlatEarth: double rotAngle>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public ucar.unidata.geoloc.ProjectionPoint latLonToProj(ucar.unidata.geoloc.LatLonPoint, ucar.unidata.geoloc.ProjectionPointImpl)
    {
        ucar.unidata.geoloc.ProjectionPointImpl r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, $d14, $d15, $d16, $d17, d18, $d19, $d20, $d21, $d22, d23;
        ucar.unidata.geoloc.LatLonPoint r0;
        ucar.unidata.geoloc.projection.FlatEarth r1;

        r1 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        r0 := @parameter0: ucar.unidata.geoloc.LatLonPoint;

        r2 := @parameter1: ucar.unidata.geoloc.ProjectionPointImpl;

        $d0 = interfaceinvoke r0.<ucar.unidata.geoloc.LatLonPoint: double getLatitude()>();

        $d1 = interfaceinvoke r0.<ucar.unidata.geoloc.LatLonPoint: double getLongitude()>();

        $d2 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d5 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d3 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double lat0>;

        $d4 = $d2 - $d3;

        d6 = $d5 * $d4;

        $d7 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d8 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        $d9 = $d7 * $d8;

        $d10 = staticinvoke <java.lang.Math: double toRadians(double)>($d1);

        $d11 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double lon0>;

        $d12 = $d10 - $d11;

        d13 = $d9 * $d12;

        $d14 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d17 = $d14 * d13;

        $d15 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d16 = $d15 * d6;

        d18 = $d17 - $d16;

        $d19 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d22 = $d19 * d13;

        $d20 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d21 = $d20 * d6;

        d23 = $d22 + $d21;

        virtualinvoke r2.<ucar.unidata.geoloc.ProjectionPointImpl: void setLocation(double,double)>(d18, d23);

        return r2;
    }

    public ucar.unidata.geoloc.LatLonPoint projToLatLon(ucar.unidata.geoloc.ProjectionPoint, ucar.unidata.geoloc.LatLonPointImpl)
    {
        byte $b0;
        ucar.unidata.geoloc.projection.FlatEarth r1;
        int $i1;
        ucar.unidata.geoloc.ProjectionPoint r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, $d10, $d11, d12, $d13, $d14, $d15, $d16, $d17, d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30;
        ucar.unidata.geoloc.LatLonPointImpl r2;

        r1 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        r0 := @parameter0: ucar.unidata.geoloc.ProjectionPoint;

        r2 := @parameter1: ucar.unidata.geoloc.LatLonPointImpl;

        $d0 = interfaceinvoke r0.<ucar.unidata.geoloc.ProjectionPoint: double getX()>();

        $d1 = interfaceinvoke r0.<ucar.unidata.geoloc.ProjectionPoint: double getY()>();

        $d2 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d5 = $d2 * $d0;

        $d3 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d4 = $d3 * $d1;

        d6 = $d5 + $d4;

        $d7 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d8 = neg $d7;

        $d11 = $d8 * $d0;

        $d9 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d10 = $d9 * $d1;

        d12 = $d11 + $d10;

        $d13 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double lat0>;

        $d14 = staticinvoke <java.lang.Math: double toDegrees(double)>($d13);

        $d15 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d16 = d12 / $d15;

        $d17 = staticinvoke <java.lang.Math: double toDegrees(double)>($d16);

        d18 = $d14 + $d17;

        $d19 = staticinvoke <java.lang.Math: double toRadians(double)>(d18);

        $d20 = staticinvoke <java.lang.Math: double cos(double)>($d19);

        $d21 = staticinvoke <java.lang.Math: double abs(double)>($d20);

        $b0 = $d21 cmpg 1.0E-6;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $d29 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double lon0>;

        d30 = staticinvoke <java.lang.Math: double toDegrees(double)>($d29);

        goto label2;

     label1:
        $d22 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double lon0>;

        $d23 = staticinvoke <java.lang.Math: double toDegrees(double)>($d22);

        $d25 = d6 / $d20;

        $d24 = r1.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d26 = $d25 / $d24;

        $d27 = staticinvoke <java.lang.Math: double toDegrees(double)>($d26);

        d30 = $d23 + $d27;

     label2:
        $d28 = staticinvoke <ucar.unidata.geoloc.LatLonPointImpl: double lonNormal(double)>(d30);

        virtualinvoke r2.<ucar.unidata.geoloc.LatLonPointImpl: void setLatitude(double)>(d18);

        virtualinvoke r2.<ucar.unidata.geoloc.LatLonPointImpl: void setLongitude(double)>($d28);

        return r2;
    }

    public float[][] latLonToProj(float[][], float[][], int, int)
    {
        float $f0, $f1, $f2, $f3;
        ucar.unidata.geoloc.projection.FlatEarth r7;
        float[] $r1, r2, r3, r5, r6;
        int i0, i1, i2, i3;
        double d0, $d1, $d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, $d13, $d14, $d15, $d16, d17, $d18, $d19, $d20, $d21, d22, d23;
        float[][] r0, r4;

        r7 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        r0 := @parameter0: float[][];

        r4 := @parameter1: float[][];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = r0[0];

        i0 = lengthof $r1;

        r2 = r0[i1];

        r3 = r0[i2];

        r5 = r4[0];

        r6 = r4[1];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $f0 = r2[i3];

        d23 = (double) $f0;

        $f1 = r3[i3];

        d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d23);

        $d4 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d2 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double lat0>;

        $d3 = $d1 - $d2;

        d5 = $d4 * $d3;

        $d6 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d7 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d8 = $d6 * $d7;

        $d9 = staticinvoke <java.lang.Math: double toRadians(double)>(d0);

        $d10 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double lon0>;

        $d11 = $d9 - $d10;

        d12 = $d8 * $d11;

        $d13 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d16 = $d13 * d12;

        $d14 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d15 = $d14 * d5;

        d17 = $d16 - $d15;

        $d18 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d21 = $d18 * d12;

        $d19 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d20 = $d19 * d5;

        d22 = $d21 + $d20;

        $f2 = (float) d17;

        r5[i3] = $f2;

        $f3 = (float) d22;

        r6[i3] = $f3;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r4;
    }

    public boolean crossSeam(ucar.unidata.geoloc.ProjectionPoint, ucar.unidata.geoloc.ProjectionPoint)
    {
        byte $b0;
        int $i1;
        ucar.unidata.geoloc.projection.FlatEarth r2;
        ucar.unidata.geoloc.ProjectionPoint r0, r1;
        double $d0, $d1, $d2;
        boolean $z0;

        r2 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        r0 := @parameter0: ucar.unidata.geoloc.ProjectionPoint;

        r1 := @parameter1: ucar.unidata.geoloc.ProjectionPoint;

        $d0 = interfaceinvoke r0.<ucar.unidata.geoloc.ProjectionPoint: double getX()>();

        $d1 = interfaceinvoke r1.<ucar.unidata.geoloc.ProjectionPoint: double getX()>();

        $d2 = $d0 * $d1;

        $b0 = $d2 cmpg 0.0;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public float[][] projToLatLon(float[][], float[][])
    {
        byte $b1;
        float $f0, $f1, $f2, $f3;
        ucar.unidata.geoloc.projection.FlatEarth r7;
        float[] $r1, r2, r3, r5, r6;
        int i0, i2, $i3;
        double d0, d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, $d10, $d11, d12, $d13, $d14, $d15, $d16, $d17, d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30;
        float[][] r0, r4;

        r7 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        r0 := @parameter0: float[][];

        r4 := @parameter1: float[][];

        $r1 = r0[0];

        i0 = lengthof $r1;

        r2 = r0[0];

        r3 = r0[1];

        r5 = r4[0];

        r6 = r4[1];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $f0 = r2[i2];

        d0 = (double) $f0;

        $f1 = r3[i2];

        d1 = (double) $f1;

        $d2 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d5 = $d2 * d0;

        $d3 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d4 = $d3 * d1;

        d6 = $d5 + $d4;

        $d7 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d8 = neg $d7;

        $d11 = $d8 * d0;

        $d9 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d10 = $d9 * d1;

        d12 = $d11 + $d10;

        $d13 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double lat0>;

        $d14 = staticinvoke <java.lang.Math: double toDegrees(double)>($d13);

        $d15 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d16 = d12 / $d15;

        $d17 = staticinvoke <java.lang.Math: double toDegrees(double)>($d16);

        d18 = $d14 + $d17;

        $d19 = staticinvoke <java.lang.Math: double toRadians(double)>(d18);

        $d20 = staticinvoke <java.lang.Math: double cos(double)>($d19);

        $d21 = staticinvoke <java.lang.Math: double abs(double)>($d20);

        $b1 = $d21 cmpg 1.0E-6;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label2;

        $d29 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double lon0>;

        d30 = staticinvoke <java.lang.Math: double toDegrees(double)>($d29);

        goto label3;

     label2:
        $d22 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double lon0>;

        $d23 = staticinvoke <java.lang.Math: double toDegrees(double)>($d22);

        $d25 = d6 / $d20;

        $d24 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d26 = $d25 / $d24;

        $d27 = staticinvoke <java.lang.Math: double toDegrees(double)>($d26);

        d30 = $d23 + $d27;

     label3:
        $d28 = staticinvoke <ucar.unidata.geoloc.LatLonPointImpl: double lonNormal(double)>(d30);

        $f2 = (float) d18;

        r5[i2] = $f2;

        $f3 = (float) $d28;

        r6[i2] = $f3;

        i2 = i2 + 1;

        goto label1;

     label4:
        return r4;
    }

    public double[][] latLonToProj(double[][], double[][], int, int)
    {
        double[][] r0, r4;
        ucar.unidata.geoloc.projection.FlatEarth r7;
        double[] $r1, r2, r3, r5, r6;
        int i0, i1, i2, i3;
        double d0, $d1, $d2, $d3, $d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, $d13, $d14, $d15, $d16, d17, $d18, $d19, $d20, $d21, d22, d23;

        r7 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        r0 := @parameter0: double[][];

        r4 := @parameter1: double[][];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = r0[0];

        i0 = lengthof $r1;

        r2 = r0[i1];

        r3 = r0[i2];

        r5 = r4[0];

        r6 = r4[1];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        d23 = r2[i3];

        d0 = r3[i3];

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d23);

        $d4 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d2 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double lat0>;

        $d3 = $d1 - $d2;

        d5 = $d4 * $d3;

        $d6 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d7 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d8 = $d6 * $d7;

        $d9 = staticinvoke <java.lang.Math: double toRadians(double)>(d0);

        $d10 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double lon0>;

        $d11 = $d9 - $d10;

        d12 = $d8 * $d11;

        $d13 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d16 = $d13 * d12;

        $d14 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d15 = $d14 * d5;

        d17 = $d16 - $d15;

        $d18 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d21 = $d18 * d12;

        $d19 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d20 = $d19 * d5;

        d22 = $d21 + $d20;

        r5[i3] = d17;

        r6[i3] = d22;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r4;
    }

    public double[][] projToLatLon(double[][], double[][])
    {
        byte $b1;
        double[][] r0, r4;
        ucar.unidata.geoloc.projection.FlatEarth r7;
        double[] $r1, r2, r3, r5, r6;
        int i0, i2, $i3;
        double d0, d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, $d10, $d11, d12, $d13, $d14, $d15, $d16, $d17, d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30;

        r7 := @this: ucar.unidata.geoloc.projection.FlatEarth;

        r0 := @parameter0: double[][];

        r4 := @parameter1: double[][];

        $r1 = r0[0];

        i0 = lengthof $r1;

        r2 = r0[0];

        r3 = r0[1];

        r5 = r4[0];

        r6 = r4[1];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        d0 = r2[i2];

        d1 = r3[i2];

        $d2 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d5 = $d2 * d0;

        $d3 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d4 = $d3 * d1;

        d6 = $d5 + $d4;

        $d7 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double sinRot>;

        $d8 = neg $d7;

        $d11 = $d8 * d0;

        $d9 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double cosRot>;

        $d10 = $d9 * d1;

        d12 = $d11 + $d10;

        $d13 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double lat0>;

        $d14 = staticinvoke <java.lang.Math: double toDegrees(double)>($d13);

        $d15 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d16 = d12 / $d15;

        $d17 = staticinvoke <java.lang.Math: double toDegrees(double)>($d16);

        d18 = $d14 + $d17;

        $d19 = staticinvoke <java.lang.Math: double toRadians(double)>(d18);

        $d20 = staticinvoke <java.lang.Math: double cos(double)>($d19);

        $d21 = staticinvoke <java.lang.Math: double abs(double)>($d20);

        $b1 = $d21 cmpg 1.0E-6;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label2;

        $d29 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double lon0>;

        d30 = staticinvoke <java.lang.Math: double toDegrees(double)>($d29);

        goto label3;

     label2:
        $d22 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double lon0>;

        $d23 = staticinvoke <java.lang.Math: double toDegrees(double)>($d22);

        $d25 = d6 / $d20;

        $d24 = r7.<ucar.unidata.geoloc.projection.FlatEarth: double radius>;

        $d26 = $d25 / $d24;

        $d27 = staticinvoke <java.lang.Math: double toDegrees(double)>($d26);

        d30 = $d23 + $d27;

     label3:
        $d28 = staticinvoke <ucar.unidata.geoloc.LatLonPointImpl: double lonNormal(double)>(d30);

        r5[i2] = d18;

        r6[i2] = $d28;

        i2 = i2 + 1;

        goto label1;

     label4:
        return r4;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r3, $r9;
        java.lang.String[] r13;
        ucar.unidata.geoloc.LatLonPoint $r7;
        ucar.unidata.geoloc.ProjectionPointImpl $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r8, $r10, $r11;
        java.lang.String $r6, $r12;
        ucar.unidata.geoloc.projection.FlatEarth $r0;

        r13 := @parameter0: java.lang.String[];

        $r0 = new ucar.unidata.geoloc.projection.FlatEarth;

        specialinvoke $r0.<ucar.unidata.geoloc.projection.FlatEarth: void <init>(double,double,double)>(90.0, -100.0, 0.0);

        $r1 = virtualinvoke $r0.<ucar.unidata.geoloc.projection.FlatEarth: ucar.unidata.geoloc.ProjectionPointImpl latLonToProj(double,double)>(89.0, -101.0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("proj point = ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r7 = virtualinvoke $r0.<ucar.unidata.geoloc.projection.FlatEarth: ucar.unidata.geoloc.LatLonPoint projToLatLon(ucar.unidata.geoloc.ProjectionPoint)>($r1);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ll = ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12);

        return;
    }
}
