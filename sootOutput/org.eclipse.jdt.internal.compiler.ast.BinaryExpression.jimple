public class org.eclipse.jdt.internal.compiler.ast.BinaryExpression extends org.eclipse.jdt.internal.compiler.ast.OperatorExpression
{
    public org.eclipse.jdt.internal.compiler.ast.Expression left;
    public org.eclipse.jdt.internal.compiler.ast.Expression right;
    public org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, org.eclipse.jdt.internal.compiler.ast.Expression, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right> = r2;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i1 = i0 << 6;

        $i3 = $i2 | $i1;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits> = $i3;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int sourceStart> = $i4;

        $i5 = r2.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceEnd>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int sourceEnd> = $i5;

        return;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.ast.BinaryExpression)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r2, $r3;
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0, r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: void <init>()>();

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left> = $r2;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right> = $r3;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits> = $i0;

        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int sourceStart>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int sourceStart> = $i1;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int sourceEnd>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int sourceEnd> = $i2;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo $r6, $r10, $r14, $r16, r18;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4, $r5, $r8, $r9, $r12, $r13;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r3;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r1;
        int $i0;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r7, $r11, $r15, $r17;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r18 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        if $i0 != 11 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r14 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, r3, r18);

        $r15 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $r16 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, r3, $r15);

        $r17 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        return $r17;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void checkNPE(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, r3, r18);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, r3, r18);

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: void checkNPE(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, r3, $r7);

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, r3, $r7);

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        return $r11;
    }

    public void computeConstant(org.eclipse.jdt.internal.compiler.lookup.BlockScope, int, int)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r15;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r5, $r8, $r9;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        java.lang.ArithmeticException $r13;
        org.eclipse.jdt.internal.compiler.impl.Constant $r2, $r3, $r4, $r6, $r7, $r10, $r11, $r12, $r14;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r15 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r3 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r2 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r3 == $r2 goto label4;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r7 = $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r6 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r7 == $r6 goto label4;

     label1:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r11 = $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i6 = $i5 & 4032;

        $i7 = $i6 >> 6;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r12 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant computeConstantOperation(org.eclipse.jdt.internal.compiler.impl.Constant,int,int,org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r11, i0, $i7, $r10, i3);

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r12;

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        $r14 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r14;

        goto label5;

     label4:
        $r4 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r4;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i2 = $i1 & 4032;

        $i4 = $i2 >> 6;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void optimizedBooleanConstant(int,int,int)>(i0, $i4, i3);

     label5:
        return;

        catch java.lang.ArithmeticException from label1 to label2 with label3;
    }

    public org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()
    {
        org.eclipse.jdt.internal.compiler.impl.Constant $r1, $r2;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant>;

        if $r1 != null goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant>;

     label2:
        return $r2;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        byte $b30, $b33, $b54, $b57, $b66, $b69;
        org.eclipse.jdt.internal.compiler.impl.Constant $r2, $r3, $r60, $r61, $r63, $r65, $r68, $r70, $r73, $r74, $r76, $r78, $r81, $r83, $r94, $r95, $r97, $r99, $r102, $r104, $r107, $r108, $r110, $r112, $r115, $r117, $r120, $r121, $r123, $r125, $r128, $r130, $r133, $r134, $r136, $r138, $r141, $r143, $r145, $r147, $r148, $r152, $r153, $r157, $r158, $r162, $r163, $r167, $r168, $r172, $r173;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r4;
        long $l29, $l32, $l53, $l56, $l65, $l68;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i55, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i67, $i70, $i71;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r1;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r62, $r64, $r66, $r67, $r69, $r71, $r72, $r75, $r77, $r79, $r80, $r82, $r84, $r93, $r96, $r98, $r100, $r101, $r103, $r105, $r106, $r109, $r111, $r113, $r114, $r116, $r118, $r119, $r122, $r124, $r126, $r127, $r129, $r131, $r132, $r135, $r137, $r139, $r140, $r142, $r144, $r146, $r149, $r150, $r151, $r154, $r155, $r156, $r159, $r160, $r161, $r164, $r165, $r166, $r169, $r170, $r171, $r174, $r175;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r4 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r2 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r3 == $r2 goto label02;

        if z0 == 0 goto label01;

        $r145 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i71 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateConstant(org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r145, $i71);

     label01:
        $i70 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i70);

        return;

     label02:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i2 = $i1 & 4032;

        $i3 = $i2 >> 6;

        tableswitch($i3)
        {
            case 2: goto label34;
            case 3: goto label43;
            case 4: goto label77;
            case 5: goto label79;
            case 6: goto label73;
            case 7: goto label75;
            case 8: goto label52;
            case 9: goto label22;
            case 10: goto label61;
            case 11: goto label81;
            case 12: goto label81;
            case 13: goto label10;
            case 14: goto label03;
            case 15: goto label16;
            case 16: goto label28;
            case 17: goto label65;
            case 18: goto label81;
            case 19: goto label69;
            default: goto label81;
        };

     label03:
        $i14 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i15 = $i14 & 15;

        tableswitch($i15)
        {
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label08;
            case 10: goto label05;
            case 11: goto label04;
            default: goto label09;
        };

     label04:
        $r30 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r29 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateStringConcatenationAppend(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>(r4, $r30, $r29);

        if z0 != 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pop()>();

        goto label81;

     label05:
        $r31 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r31.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r32 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r32.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iadd()>();

        goto label81;

     label06:
        $r37 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r37.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r38 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r38.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ladd()>();

        goto label81;

     label07:
        $r35 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r35.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r36 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r36.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dadd()>();

        goto label81;

     label08:
        $r33 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r34 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r34.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fadd()>();

     label09:
        goto label81;

     label10:
        $i16 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i17 = $i16 & 15;

        tableswitch($i17)
        {
            case 7: goto label12;
            case 8: goto label13;
            case 9: goto label14;
            case 10: goto label11;
            default: goto label15;
        };

     label11:
        $r39 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r39.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r40 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r40.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void isub()>();

        goto label81;

     label12:
        $r45 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r45.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r46 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r46.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lsub()>();

        goto label81;

     label13:
        $r43 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r43.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r44 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r44.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dsub()>();

        goto label81;

     label14:
        $r41 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r41.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r42 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r42.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fsub()>();

     label15:
        goto label81;

     label16:
        $i12 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i13 = $i12 & 15;

        tableswitch($i13)
        {
            case 7: goto label18;
            case 8: goto label19;
            case 9: goto label20;
            case 10: goto label17;
            default: goto label21;
        };

     label17:
        $r21 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r22 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void imul()>();

        goto label81;

     label18:
        $r27 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r27.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r28 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r28.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lmul()>();

        goto label81;

     label19:
        $r25 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r25.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r26 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r26.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dmul()>();

        goto label81;

     label20:
        $r23 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r24 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fmul()>();

     label21:
        goto label81;

     label22:
        $i20 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i21 = $i20 & 15;

        tableswitch($i21)
        {
            case 7: goto label24;
            case 8: goto label25;
            case 9: goto label26;
            case 10: goto label23;
            default: goto label27;
        };

     label23:
        $r51 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r51.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 1);

        $r52 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r52.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void idiv()>();

        if z0 != 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pop()>();

        goto label81;

     label24:
        $r57 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r57.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 1);

        $r58 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r58.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ldiv()>();

        if z0 != 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pop2()>();

        goto label81;

     label25:
        $r55 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r55.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r56 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r56.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ddiv()>();

        goto label81;

     label26:
        $r53 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r53.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r54 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r54.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fdiv()>();

     label27:
        goto label81;

     label28:
        $i10 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i11 = $i10 & 15;

        tableswitch($i11)
        {
            case 7: goto label30;
            case 8: goto label31;
            case 9: goto label32;
            case 10: goto label29;
            default: goto label33;
        };

     label29:
        $r13 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 1);

        $r14 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void irem()>();

        if z0 != 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pop()>();

        goto label81;

     label30:
        $r19 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 1);

        $r20 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lrem()>();

        if z0 != 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pop2()>();

        goto label81;

     label31:
        $r17 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r18 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void drem()>();

        goto label81;

     label32:
        $r15 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r16 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void frem()>();

     label33:
        goto label81;

     label34:
        $i58 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i59 = $i58 & 15;

        tableswitch($i59)
        {
            case 5: goto label41;
            case 6: goto label42;
            case 7: goto label38;
            case 8: goto label42;
            case 9: goto label42;
            case 10: goto label35;
            default: goto label42;
        };

     label35:
        $r119 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r121 = $r119.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r120 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r121 == $r120 goto label36;

        $r127 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r128 = $r127.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i62 = virtualinvoke $r128.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i62 != 10 goto label36;

        $r129 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r130 = $r129.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i63 = virtualinvoke $r130.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i63 != 0 goto label36;

        $r131 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r131.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        goto label81;

     label36:
        $r146 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r147 = $r146.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r148 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r147 == $r148 goto label37;

        $r122 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r123 = $r122.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i60 = virtualinvoke $r123.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i60 != 10 goto label37;

        $r124 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r125 = $r124.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i61 = virtualinvoke $r125.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i61 != 0 goto label37;

        $r126 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r126.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        goto label81;

     label37:
        $r149 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r149.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r150 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r150.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iand()>();

        goto label81;

     label38:
        $r132 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r134 = $r132.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r133 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r134 == $r133 goto label39;

        $r140 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r141 = $r140.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i67 = virtualinvoke $r141.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i67 != 7 goto label39;

        $r142 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r143 = $r142.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $l68 = virtualinvoke $r143.<org.eclipse.jdt.internal.compiler.impl.Constant: long longValue()>();

        $b69 = $l68 cmp 0L;

        if $b69 != 0 goto label39;

        $r144 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r144.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lconst_0()>();

        goto label81;

     label39:
        $r151 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r152 = $r151.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r153 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r152 == $r153 goto label40;

        $r135 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r136 = $r135.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i64 = virtualinvoke $r136.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i64 != 7 goto label40;

        $r137 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r138 = $r137.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $l65 = virtualinvoke $r138.<org.eclipse.jdt.internal.compiler.impl.Constant: long longValue()>();

        $b66 = $l65 cmp 0L;

        if $b66 != 0 goto label40;

        $r139 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r139.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, 0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lconst_0()>();

        goto label81;

     label40:
        $r154 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r154.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r155 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r155.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void land()>();

        goto label81;

     label41:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateLogicalAnd(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

     label42:
        goto label81;

     label43:
        $i46 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i47 = $i46 & 15;

        tableswitch($i47)
        {
            case 5: goto label50;
            case 6: goto label51;
            case 7: goto label47;
            case 8: goto label51;
            case 9: goto label51;
            case 10: goto label44;
            default: goto label51;
        };

     label44:
        $r93 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r95 = $r93.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r94 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r95 == $r94 goto label45;

        $r101 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r102 = $r101.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i50 = virtualinvoke $r102.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i50 != 10 goto label45;

        $r103 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r104 = $r103.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i51 = virtualinvoke $r104.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i51 != 0 goto label45;

        $r105 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r105.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        goto label81;

     label45:
        $r156 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r157 = $r156.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r158 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r157 == $r158 goto label46;

        $r96 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r97 = $r96.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i48 = virtualinvoke $r97.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i48 != 10 goto label46;

        $r98 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r99 = $r98.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i49 = virtualinvoke $r99.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i49 != 0 goto label46;

        $r100 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r100.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        goto label81;

     label46:
        $r159 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r159.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r160 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r160.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ior()>();

        goto label81;

     label47:
        $r106 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r108 = $r106.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r107 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r108 == $r107 goto label48;

        $r114 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r115 = $r114.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i55 = virtualinvoke $r115.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i55 != 7 goto label48;

        $r116 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r117 = $r116.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $l56 = virtualinvoke $r117.<org.eclipse.jdt.internal.compiler.impl.Constant: long longValue()>();

        $b57 = $l56 cmp 0L;

        if $b57 != 0 goto label48;

        $r118 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r118.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        goto label81;

     label48:
        $r161 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r162 = $r161.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r163 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r162 == $r163 goto label49;

        $r109 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r110 = $r109.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i52 = virtualinvoke $r110.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i52 != 7 goto label49;

        $r111 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r112 = $r111.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $l53 = virtualinvoke $r112.<org.eclipse.jdt.internal.compiler.impl.Constant: long longValue()>();

        $b54 = $l53 cmp 0L;

        if $b54 != 0 goto label49;

        $r113 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r113.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        goto label81;

     label49:
        $r164 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r164.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r165 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r165.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lor()>();

        goto label81;

     label50:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateLogicalOr(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

     label51:
        goto label81;

     label52:
        $i22 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i23 = $i22 & 15;

        tableswitch($i23)
        {
            case 5: goto label59;
            case 6: goto label60;
            case 7: goto label56;
            case 8: goto label60;
            case 9: goto label60;
            case 10: goto label53;
            default: goto label60;
        };

     label53:
        $r59 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r61 = $r59.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r60 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r61 == $r60 goto label54;

        $r67 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r68 = $r67.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i26 = virtualinvoke $r68.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i26 != 10 goto label54;

        $r69 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r70 = $r69.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i27 = virtualinvoke $r70.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i27 != 0 goto label54;

        $r71 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r71.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        goto label81;

     label54:
        $r166 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r167 = $r166.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r168 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r167 == $r168 goto label55;

        $r62 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r63 = $r62.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i24 = virtualinvoke $r63.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i24 != 10 goto label55;

        $r64 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r65 = $r64.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i25 = virtualinvoke $r65.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i25 != 0 goto label55;

        $r66 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r66.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        goto label81;

     label55:
        $r169 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r169.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r170 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r170.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ixor()>();

        goto label81;

     label56:
        $r72 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r74 = $r72.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r73 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r74 == $r73 goto label57;

        $r80 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r81 = $r80.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i31 = virtualinvoke $r81.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i31 != 7 goto label57;

        $r82 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r83 = $r82.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $l32 = virtualinvoke $r83.<org.eclipse.jdt.internal.compiler.impl.Constant: long longValue()>();

        $b33 = $l32 cmp 0L;

        if $b33 != 0 goto label57;

        $r84 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r84.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        goto label81;

     label57:
        $r171 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r172 = $r171.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r173 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r172 == $r173 goto label58;

        $r75 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r76 = $r75.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i28 = virtualinvoke $r76.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i28 != 7 goto label58;

        $r77 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r78 = $r77.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $l29 = virtualinvoke $r78.<org.eclipse.jdt.internal.compiler.impl.Constant: long longValue()>();

        $b30 = $l29 cmp 0L;

        if $b30 != 0 goto label58;

        $r79 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r79.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        goto label81;

     label58:
        $r174 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r174.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r175 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r175.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lxor()>();

        goto label81;

     label59:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateLogicalXor(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

     label60:
        goto label81;

     label61:
        $i18 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i19 = $i18 & 15;

        tableswitch($i19)
        {
            case 7: goto label63;
            case 8: goto label64;
            case 9: goto label64;
            case 10: goto label62;
            default: goto label64;
        };

     label62:
        $r47 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r47.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r48 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r48.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ishl()>();

        goto label81;

     label63:
        $r49 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r49.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r50 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r50.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lshl()>();

     label64:
        goto label81;

     label65:
        $i8 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i9 = $i8 & 15;

        tableswitch($i9)
        {
            case 7: goto label67;
            case 8: goto label68;
            case 9: goto label68;
            case 10: goto label66;
            default: goto label68;
        };

     label66:
        $r9 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r10 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ishr()>();

        goto label81;

     label67:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r12 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lshr()>();

     label68:
        goto label81;

     label69:
        $i4 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i5 = $i4 & 15;

        tableswitch($i5)
        {
            case 7: goto label71;
            case 8: goto label72;
            case 9: goto label72;
            case 10: goto label70;
            default: goto label72;
        };

     label70:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r6 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iushr()>();

        goto label81;

     label71:
        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r4, r0, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lushr()>();

     label72:
        goto label81;

     label73:
        $r87 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r87.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedGreaterThan(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r4, r0, null, $r87, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_1()>();

        $i37 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i38 = $i37 & 16;

        if $i38 == 0 goto label74;

        $i39 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i39);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateReturnBytecode(org.eclipse.jdt.internal.compiler.ast.Expression)>(r1);

        virtualinvoke $r87.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        goto label81;

     label74:
        $r88 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r88.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>($r88);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void decrStackSize(int)>(1);

        virtualinvoke $r87.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        virtualinvoke $r88.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        goto label81;

     label75:
        $r85 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r85.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedGreaterThanOrEqual(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r4, r0, null, $r85, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_1()>();

        $i34 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i35 = $i34 & 16;

        if $i35 == 0 goto label76;

        $i36 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i36);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateReturnBytecode(org.eclipse.jdt.internal.compiler.ast.Expression)>(r1);

        virtualinvoke $r85.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        goto label81;

     label76:
        $r86 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r86.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>($r86);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void decrStackSize(int)>(1);

        virtualinvoke $r85.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        virtualinvoke $r86.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        goto label81;

     label77:
        $r91 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r91.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedLessThan(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r4, r0, null, $r91, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_1()>();

        $i43 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i44 = $i43 & 16;

        if $i44 == 0 goto label78;

        $i45 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i45);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateReturnBytecode(org.eclipse.jdt.internal.compiler.ast.Expression)>(r1);

        virtualinvoke $r91.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        goto label81;

     label78:
        $r92 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r92.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>($r92);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void decrStackSize(int)>(1);

        virtualinvoke $r91.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        virtualinvoke $r92.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        goto label81;

     label79:
        $r89 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r89.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedLessThanOrEqual(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r4, r0, null, $r89, z0);

        if z0 == 0 goto label81;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_1()>();

        $i40 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i41 = $i40 & 16;

        if $i41 == 0 goto label80;

        $i42 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i42);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateReturnBytecode(org.eclipse.jdt.internal.compiler.ast.Expression)>(r1);

        virtualinvoke $r89.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        goto label81;

     label80:
        $r90 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r90.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>($r90);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void decrStackSize(int)>(1);

        virtualinvoke $r89.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        virtualinvoke $r90.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

     label81:
        if z0 == 0 goto label82;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i7);

     label82:
        $i6 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i6);

        return;
    }

    public void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r4;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r5, r6;
        org.eclipse.jdt.internal.compiler.impl.Constant $r1, $r2, $r7;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r6 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z0 := @parameter4: boolean;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r2 == $r1 goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i3 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.impl.Constant: int typeID()>();

        if $i3 != 5 goto label1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

        return;

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i1 = $i0 & 4032;

        $i2 = $i1 >> 6;

        tableswitch($i2)
        {
            case 2: goto label6;
            case 3: goto label7;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label4;
            case 7: goto label5;
            case 8: goto label8;
            default: goto label9;
        };

     label2:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedLessThan(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

        return;

     label3:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedLessThanOrEqual(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

        return;

     label4:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedGreaterThan(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

        return;

     label5:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedGreaterThanOrEqual(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

        return;

     label6:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedLogicalAnd(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

        return;

     label7:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedLogicalOr(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

        return;

     label8:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedLogicalXor(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

        return;

     label9:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r3, r4, r5, r6, z0);

        return;
    }

    public void generateOptimizedGreaterThan(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r4, r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r6, $r9, $r12, $r14, $r15, $r17, $r18, $r19;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean z0;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r7, $r8, $r10, $r11, $r13, $r16;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r4 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z0 := @parameter4: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i1 = $i0 & 255;

        i2 = $i1 >> 4;

        if i2 != 10 goto label06;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r8 = $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r7 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r8 == $r7 goto label03;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i4 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i4 != 0 goto label03;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label02;

        if r4 != null goto label01;

        if r5 == null goto label02;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iflt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label02;

     label01:
        if r5 != null goto label02;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label02:
        $i5 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i5);

        return;

     label03:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r11 = $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r10 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r11 == $r10 goto label06;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i3 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i3 != 0 goto label06;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label05;

        if r4 != null goto label04;

        if r5 == null goto label05;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label05;

     label04:
        if r5 != null goto label05;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifle(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label05:
        $i6 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i6);

        return;

     label06:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label18;

        if r4 != null goto label12;

        if r5 == null goto label18;

        tableswitch(i2)
        {
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label08;
            case 10: goto label07;
            default: goto label11;
        };

     label07:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void if_icmpgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label08:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fcmpl()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label09:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lcmp()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label10:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dcmpl()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

     label11:
        $i7 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i7);

        return;

     label12:
        if r5 != null goto label18;

        tableswitch(i2)
        {
            case 7: goto label15;
            case 8: goto label16;
            case 9: goto label14;
            case 10: goto label13;
            default: goto label17;
        };

     label13:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void if_icmple(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label14:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fcmpl()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifle(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label15:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lcmp()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifle(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label16:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dcmpl()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifle(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label17:
        $i8 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i8);

        return;

     label18:
        return;
    }

    public void generateOptimizedGreaterThanOrEqual(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r4, r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r6, $r9, $r12, $r14, $r15, $r17, $r18, $r19;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean z0;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r7, $r8, $r10, $r11, $r13, $r16;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r4 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z0 := @parameter4: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i1 = $i0 & 255;

        i2 = $i1 >> 4;

        if i2 != 10 goto label06;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r8 = $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r7 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r8 == $r7 goto label03;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i4 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i4 != 0 goto label03;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label02;

        if r4 != null goto label01;

        if r5 == null goto label02;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifle(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label02;

     label01:
        if r5 != null goto label02;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label02:
        $i5 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i5);

        return;

     label03:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r11 = $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r10 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r11 == $r10 goto label06;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i3 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i3 != 0 goto label06;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label05;

        if r4 != null goto label04;

        if r5 == null goto label05;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label05;

     label04:
        if r5 != null goto label05;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iflt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label05:
        $i6 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i6);

        return;

     label06:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label18;

        if r4 != null goto label12;

        if r5 == null goto label18;

        tableswitch(i2)
        {
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label08;
            case 10: goto label07;
            default: goto label11;
        };

     label07:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void if_icmpge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label08:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fcmpl()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label09:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lcmp()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label10:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dcmpl()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

     label11:
        $i7 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i7);

        return;

     label12:
        if r5 != null goto label18;

        tableswitch(i2)
        {
            case 7: goto label15;
            case 8: goto label16;
            case 9: goto label14;
            case 10: goto label13;
            default: goto label17;
        };

     label13:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void if_icmplt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label14:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fcmpl()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iflt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label15:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lcmp()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iflt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label16:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dcmpl()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iflt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label17:
        $i8 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i8);

        return;

     label18:
        return;
    }

    public void generateOptimizedLessThan(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r4, r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r6, $r9, $r12, $r14, $r15, $r17, $r18, $r19;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean z0;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r7, $r8, $r10, $r11, $r13, $r16;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r4 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z0 := @parameter4: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i1 = $i0 & 255;

        i2 = $i1 >> 4;

        if i2 != 10 goto label06;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r8 = $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r7 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r8 == $r7 goto label03;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i4 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i4 != 0 goto label03;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label02;

        if r4 != null goto label01;

        if r5 == null goto label02;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label02;

     label01:
        if r5 != null goto label02;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifle(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label02:
        $i5 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i5);

        return;

     label03:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r11 = $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r10 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r11 == $r10 goto label06;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i3 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i3 != 0 goto label06;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label05;

        if r4 != null goto label04;

        if r5 == null goto label05;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iflt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label05;

     label04:
        if r5 != null goto label05;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label05:
        $i6 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i6);

        return;

     label06:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label18;

        if r4 != null goto label12;

        if r5 == null goto label18;

        tableswitch(i2)
        {
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label08;
            case 10: goto label07;
            default: goto label11;
        };

     label07:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void if_icmplt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label08:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fcmpg()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iflt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label09:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lcmp()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iflt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label10:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dcmpg()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iflt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

     label11:
        $i7 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i7);

        return;

     label12:
        if r5 != null goto label18;

        tableswitch(i2)
        {
            case 7: goto label15;
            case 8: goto label16;
            case 9: goto label14;
            case 10: goto label13;
            default: goto label17;
        };

     label13:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void if_icmpge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label14:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fcmpg()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label15:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lcmp()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label16:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dcmpg()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label17:
        $i8 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i8);

        return;

     label18:
        return;
    }

    public void generateOptimizedLessThanOrEqual(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r4, r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r6, $r9, $r12, $r14, $r15, $r17, $r18, $r19;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean z0;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r7, $r8, $r10, $r11, $r13, $r16;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r4 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z0 := @parameter4: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i1 = $i0 & 255;

        i2 = $i1 >> 4;

        if i2 != 10 goto label06;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r8 = $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r7 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r8 == $r7 goto label03;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i4 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i4 != 0 goto label03;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label02;

        if r4 != null goto label01;

        if r5 == null goto label02;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifge(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label02;

     label01:
        if r5 != null goto label02;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iflt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label02:
        $i5 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i5);

        return;

     label03:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r11 = $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r10 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r11 == $r10 goto label06;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i3 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.impl.Constant: int intValue()>();

        if $i3 != 0 goto label06;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label05;

        if r4 != null goto label04;

        if r5 == null goto label05;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifle(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label05;

     label04:
        if r5 != null goto label05;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label05:
        $i6 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i6);

        return;

     label06:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label18;

        if r4 != null goto label12;

        if r5 == null goto label18;

        tableswitch(i2)
        {
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label08;
            case 10: goto label07;
            default: goto label11;
        };

     label07:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void if_icmple(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label08:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fcmpg()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifle(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label09:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lcmp()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifle(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

        goto label11;

     label10:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dcmpg()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifle(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r5);

     label11:
        $i7 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i7);

        return;

     label12:
        if r5 != null goto label18;

        tableswitch(i2)
        {
            case 7: goto label15;
            case 8: goto label16;
            case 9: goto label14;
            case 10: goto label13;
            default: goto label17;
        };

     label13:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void if_icmpgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label14:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void fcmpg()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label15:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lcmp()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

        goto label17;

     label16:
        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dcmpg()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifgt(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r4);

     label17:
        $i8 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i8);

        return;

     label18:
        return;
    }

    public void generateLogicalAnd(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r4, $r5, $r6, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r7, $r8, $r10, $r11;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i1 = $i0 & 15;

        if $i1 != 5 goto label8;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r8 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r7 == $r8 goto label4;

        $z2 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z2 == 0 goto label1;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        goto label3;

     label1:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        if z0 == 0 goto label2;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

     label2:
        $i4 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i4);

     label3:
        return;

     label4:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r11 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r10 == $r11 goto label8;

        $z1 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z1 == 0 goto label5;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        goto label7;

     label5:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        if z0 == 0 goto label6;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

     label6:
        $i3 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i3);

     label7:
        return;

     label8:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label9;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iand()>();

     label9:
        $i2 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i2);

        return;
    }

    public void generateLogicalOr(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r4, $r5, $r6, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r7, $r8, $r10, $r11;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i1 = $i0 & 15;

        if $i1 != 5 goto label8;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r8 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r7 == $r8 goto label4;

        $z2 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z2 == 0 goto label2;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        if z0 == 0 goto label1;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_1()>();

     label1:
        $i4 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i4);

        goto label3;

     label2:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

     label3:
        return;

     label4:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r11 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r10 == $r11 goto label8;

        $z1 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z1 == 0 goto label6;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        if z0 == 0 goto label5;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_1()>();

     label5:
        $i3 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i3);

        goto label7;

     label6:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

     label7:
        return;

     label8:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label9;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ior()>();

     label9:
        $i2 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i2);

        return;
    }

    public void generateLogicalXor(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r4, $r5, $r6, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r7, $r8, $r10, $r11;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i1 = $i0 & 15;

        if $i1 != 5 goto label7;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r8 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r7 == $r8 goto label4;

        $z2 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z2 == 0 goto label2;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        if z0 == 0 goto label1;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_1()>();

     label1:
        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label3;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ixor()>();

        $i4 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i4);

        goto label3;

     label2:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

     label3:
        return;

     label4:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r11 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r10 == $r11 goto label7;

        $z1 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z1 == 0 goto label5;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

        if z0 == 0 goto label6;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_1()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ixor()>();

        $i3 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i3);

        goto label6;

     label5:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, 0);

     label6:
        return;

     label7:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label8;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ixor()>();

     label8:
        $i2 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i2);

        return;
    }

    public void generateOptimizedLogicalAnd(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r6, r7, $r14;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r4, $r5, $r8, $r11, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        int $i0, $i1, $i2, $i3, $i4;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r9, $r10, $r12, $r13;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r7 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r6 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z0 := @parameter4: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i1 = $i0 & 15;

        if $i1 != 5 goto label08;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r10 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r9 == $r10 goto label04;

        $z2 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z2 == 0 goto label01;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        $r22 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, z0);

        goto label03;

     label01:
        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        if z0 == 0 goto label02;

        if r6 == null goto label02;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r6);

     label02:
        $i2 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i2);

     label03:
        return;

     label04:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r13 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r12 == $r13 goto label08;

        $z1 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z1 == 0 goto label05;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, z0);

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        goto label07;

     label05:
        $r14 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r14.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r3);

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, $r14, r6, 0);

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        if z0 == 0 goto label06;

        if r6 == null goto label06;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r6);

     label06:
        $i3 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i3);

     label07:
        return;

     label08:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label10;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iand()>();

        if r6 != null goto label09;

        if r7 == null goto label10;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifne(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r7);

        goto label10;

     label09:
        if r7 != null goto label10;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifeq(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r6);

     label10:
        $i4 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i4);

        return;
    }

    public void generateOptimizedLogicalOr(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r4, $r5, $r8, $r11, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r23;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.impl.Constant $r9, $r10, $r12, $r13;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r6, r7, $r16, $r22;
        int $i0, $i1, $i2, $i3, $i4;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r7 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r6 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z0 := @parameter4: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i1 = $i0 & 15;

        if $i1 != 5 goto label08;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r10 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r9 == $r10 goto label04;

        $z2 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z2 == 0 goto label02;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        $r22 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r22.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r3);

        $r23 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, $r22, 0);

        virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        if z0 == 0 goto label01;

        if r7 == null goto label01;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r7);

     label01:
        $i2 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i2);

        goto label03;

     label02:
        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, z0);

     label03:
        return;

     label04:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r13 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r12 == $r13 goto label08;

        $z1 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z1 == 0 goto label06;

        $r16 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r16.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r3);

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, $r16, 0);

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        if z0 == 0 goto label05;

        if r7 == null goto label05;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r7);

     label05:
        $i3 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i3);

        goto label07;

     label06:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, z0);

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

     label07:
        return;

     label08:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label10;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ior()>();

        if r6 != null goto label09;

        if r7 == null goto label10;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifne(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r7);

        goto label10;

     label09:
        if r7 != null goto label10;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifeq(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r6);

     label10:
        $i4 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i4);

        return;
    }

    public void generateOptimizedLogicalXor(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r6, r7;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r4, $r5, $r8, $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        int $i0, $i1, $i2;
        boolean z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r9, $r10, $r12, $r13;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r7 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r6 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z0 := @parameter4: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i1 = $i0 & 15;

        if $i1 != 5 goto label6;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r10 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r9 == $r10 goto label3;

        $z2 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z2 == 0 goto label1;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        $r21 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r6, r7, z0);

        goto label2;

     label1:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, z0);

     label2:
        return;

     label3:
        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r13 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r12 == $r13 goto label6;

        $z1 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z1 == 0 goto label4;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r6, r7, z0);

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

        goto label5;

     label4:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, z0);

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r2, r3, r7, r6, 0);

     label5:
        return;

     label6:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r3, z0);

        if z0 == 0 goto label8;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ixor()>();

        if r6 != null goto label7;

        if r7 == null goto label8;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifne(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r7);

        goto label8;

     label7:
        if r7 != null goto label8;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ifeq(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r6);

     label8:
        $i2 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i2);

        return;
    }

    public void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, int)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r2;
        org.eclipse.jdt.internal.compiler.impl.Constant $r3, $r4, $r11;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        i3 := @parameter2: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i1 = $i0 & 4032;

        $i2 = $i1 >> 6;

        if $i2 != 14 goto label2;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i5 = $i4 & 15;

        if $i5 != 11 goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r3 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r4 == $r3 goto label1;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateConstant(org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r11, $i12);

        $i13 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        $i14 = $i13 & 15;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokeStringConcatenationAppendForType(int)>($i14);

        goto label3;

     label1:
        i15 = r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i6 = $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i7 = $i6 & 15;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r1, r2, $i7);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i8 = $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i15, $i8);

        i16 = r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i9 = $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i10 = $i9 & 15;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r1, r2, $i10);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i11 = $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i16, $i11);

        goto label3;

     label2:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r1, r2, i3);

     label3:
        return;
    }

    public void generateOptimizedStringConcatenationCreation(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, int)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.ast.Expression $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        java.lang.String $r12;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r2;
        org.eclipse.jdt.internal.compiler.impl.Constant $r3, $r4, $r11;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        i3 := @parameter2: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i1 = $i0 & 4032;

        $i2 = $i1 >> 6;

        if $i2 != 14 goto label2;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i5 = $i4 & 15;

        if $i5 != 11 goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r3 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r4 == $r3 goto label1;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void newStringContatenation()>();

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup()>();

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.impl.Constant: java.lang.String stringValue()>();

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ldc(java.lang.String)>($r12);

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokeStringConcatenationStringConstructor()>();

        goto label3;

     label1:
        i12 = r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i6 = $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i7 = $i6 & 15;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedStringConcatenationCreation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r1, r2, $i7);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i8 = $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i12, $i8);

        i13 = r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i9 = $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i10 = $i9 & 15;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r1, r2, $i10);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i11 = $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i13, $i11);

        goto label3;

     label2:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: void generateOptimizedStringConcatenationCreation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r1, r2, i3);

     label3:
        return;
    }

    public boolean isCompactableOperation()
    {
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        return 1;
    }

    void nonRecursiveResolveTypeUpwards(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        byte $b1;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r2, $r6, $r25, $r31, $r36, $r38, $r43, $r45;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding $r24, $r30;
        org.eclipse.jdt.internal.compiler.impl.Constant $r7, $r9, $r21;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r8;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r4;
        long $l0;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r35, $r37;
        int[][] $r40;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r10, $r22, $r27, $r33;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r3, $r5, $r12, $r13, $r23, $r28, $r29, $r34, $r39, $r42, $r44, $r46;
        int[] $r41;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i2, $i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r11;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r26, $r32;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r4 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        r2 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $z0 = $r3 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z0 == 0 goto label01;

        $r39 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i2 = $r39.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i3 = $i2 | 32;

        $r39.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i3;

     label01:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r4);

        if r2 == null goto label02;

        if $r6 != null goto label03;

     label02:
        $r7 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r7;

        return;

     label03:
        i4 = r2.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        i5 = $r6.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        $r8 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $l0 = $r8.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b1 = $l0 cmp 3211264L;

        $i23 = (int) $b1;

        if $i23 < 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        if $z4 == 0 goto label07;

        $z3 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z3 != 0 goto label06;

        if i5 == 11 goto label06;

        if i5 == 12 goto label06;

        $r37 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        $r38 = virtualinvoke $r37.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding computeBoxingType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r2);

        i4 = $r38.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

     label06:
        $z5 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z5 != 0 goto label07;

        if i4 == 11 goto label07;

        if i4 == 12 goto label07;

        $r35 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        $r36 = virtualinvoke $r35.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding computeBoxingType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r6);

        i5 = $r36.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

     label07:
        if i4 > 15 goto label08;

        if i5 <= 15 goto label11;

     label08:
        if i4 != 11 goto label09;

        i5 = 1;

        goto label11;

     label09:
        if i5 != 11 goto label10;

        i4 = 1;

        goto label11;

     label10:
        $r9 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r9;

        $r10 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidOperator(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0, r2, $r6);

        return;

     label11:
        $i6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i7 = $i6 & 4032;

        $i8 = $i7 >> 6;

        if $i8 != 14 goto label13;

        if i4 != 11 goto label12;

        $r29 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r29.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r4, r2, r2);

        $z2 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isArrayType()>();

        if $z2 == 0 goto label12;

        $r30 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) $r6;

        $r31 = virtualinvoke $r30.<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding elementsType()>();

        $r32 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding CHAR>;

        if $r31 != $r32 goto label12;

        $r33 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r34 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void signalNoImplicitStringConversionForCharArrayExpression(org.eclipse.jdt.internal.compiler.ast.Expression)>($r34);

     label12:
        if i5 != 11 goto label13;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r4, $r6, $r6);

        $z1 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isArrayType()>();

        if $z1 == 0 goto label13;

        $r24 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) r2;

        $r25 = virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding elementsType()>();

        $r26 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding CHAR>;

        if $r25 != $r26 goto label13;

        $r27 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r28 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r27.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void signalNoImplicitStringConversionForCharArrayExpression(org.eclipse.jdt.internal.compiler.ast.Expression)>($r28);

     label13:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i10 = $i9 & 4032;

        $i11 = $i10 >> 6;

        $r40 = <org.eclipse.jdt.internal.compiler.ast.OperatorExpression: int[][] OperatorSignatures>;

        $r41 = $r40[$i11];

        $i12 = i4 << 4;

        $i13 = $i12 + i5;

        $i14 = $r41[$i13];

        $r42 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i15 = $i14 >>> 16;

        $i16 = $i15 & 15;

        $r43 = staticinvoke <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding wellKnownType(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r4, $i16);

        virtualinvoke $r42.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r4, $r43, r2);

        $r44 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i17 = $i14 >>> 8;

        $i18 = $i17 & 15;

        $r45 = staticinvoke <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding wellKnownType(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r4, $i18);

        virtualinvoke $r44.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r4, $r45, $r6);

        $i19 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i20 = $i14 & 15;

        $i21 = $i19 | $i20;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits> = $i21;

        $i22 = $i14 & 15;

        tableswitch($i22)
        {
            case 2: goto label16;
            case 3: goto label15;
            case 4: goto label22;
            case 5: goto label14;
            case 6: goto label22;
            case 7: goto label20;
            case 8: goto label17;
            case 9: goto label18;
            case 10: goto label19;
            case 11: goto label21;
            default: goto label22;
        };

     label14:
        $r18 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding BOOLEAN>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r18;

        goto label23;

     label15:
        $r19 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding BYTE>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r19;

        goto label23;

     label16:
        $r20 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding CHAR>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r20;

        goto label23;

     label17:
        $r16 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding DOUBLE>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r16;

        goto label23;

     label18:
        $r15 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding FLOAT>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r15;

        goto label23;

     label19:
        $r14 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r14;

        goto label23;

     label20:
        $r17 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding LONG>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r17;

        goto label23;

     label21:
        $r11 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding getJavaLangString()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r11;

        goto label23;

     label22:
        $r21 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r21;

        $r22 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidOperator(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0, r2, $r6);

        return;

     label23:
        $r46 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $z6 = $r46 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z6 != 0 goto label24;

        if $z0 == 0 goto label25;

     label24:
        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.CastExpression: void checkNeedForArgumentCasts(org.eclipse.jdt.internal.compiler.lookup.BlockScope,int,int,org.eclipse.jdt.internal.compiler.ast.Expression,int,boolean,org.eclipse.jdt.internal.compiler.ast.Expression,int,boolean)>(r4, $i11, $i14, $r13, i4, $z6, $r12, i5, $z0);

     label25:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void computeConstant(org.eclipse.jdt.internal.compiler.lookup.BlockScope,int,int)>(r4, i4, i5);

        return;
    }

    public void optimizedBooleanConstant(int, int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r4, $r7, $r10, $r13, $r16;
        int i0, i1, i2;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jdt.internal.compiler.impl.Constant $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        tableswitch(i0)
        {
            case 0: goto label03;
            case 1: goto label10;
            case 2: goto label01;
            case 3: goto label08;
            default: goto label14;
        };

     label01:
        if i1 != 5 goto label02;

        if i2 == 5 goto label03;

     label02:
        return;

     label03:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r12 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r11 == $r12 goto label06;

        $z3 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z3 != 0 goto label04;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant> = $r11;

        return;

     label04:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r17 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r18 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r17 == $r18 goto label05;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant> = $r17;

     label05:
        return;

     label06:
        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r14 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r15 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r14 == $r15 goto label07;

        $z2 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z2 != 0 goto label07;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant> = $r14;

     label07:
        return;

     label08:
        if i1 != 5 goto label09;

        if i2 == 5 goto label10;

     label09:
        return;

     label10:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r2 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r3 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r2 == $r3 goto label13;

        $z1 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z1 == 0 goto label11;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant> = $r2;

        return;

     label11:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r9 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r8 == $r9 goto label12;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant> = $r8;

     label12:
        return;

     label13:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r6 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r5 == $r6 goto label14;

        $z0 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z0 == 0 goto label14;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant> = $r5;

     label14:
        return;
    }

    public java.lang.StringBuffer printExpressionNoParenthesis(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r2, $r7;
        java.lang.StringBuffer r1, $r3, $r4, $r6, $r8;
        int i0;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;
        java.lang.String $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(i0, r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: java.lang.String operatorToString()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r1);

        return $r8;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        byte $b1;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r4, $r7, $r26, $r32, $r37, $r39, $r45, $r47, $r48;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding $r25, $r31;
        org.eclipse.jdt.internal.compiler.impl.Constant $r8, $r10, $r22;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r0;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r9;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        long $l0;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r36, $r38;
        int[][] $r42;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r11, $r23, $r28, $r34;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r3, $r5, $r6, $r13, $r14, $r24, $r29, $r30, $r35, $r40, $r41, $r44, $r46;
        int[] $r43;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i2, $i3, $i4, $i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r12;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r27, $r33;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $z0 = $r1 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z0 == 0 goto label01;

        $r41 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i4 = $r41.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i5 = $i4 | 32;

        $r41.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i5;

     label01:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $z1 = $r5 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z1 == 0 goto label02;

        $r40 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i2 = $r40.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i3 = $i2 | 32;

        $r40.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i3;

     label02:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r2);

        if $r4 == null goto label03;

        if $r7 != null goto label04;

     label03:
        $r8 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r8;

        return null;

     label04:
        i6 = $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        i7 = $r7.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        $r9 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $l0 = $r9.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b1 = $l0 cmp 3211264L;

        $i25 = (int) $b1;

        if $i25 < 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        if $z5 == 0 goto label08;

        $z4 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z4 != 0 goto label07;

        if i7 == 11 goto label07;

        if i7 == 12 goto label07;

        $r38 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        $r39 = virtualinvoke $r38.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding computeBoxingType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r4);

        i6 = $r39.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

     label07:
        $z6 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z6 != 0 goto label08;

        if i6 == 11 goto label08;

        if i6 == 12 goto label08;

        $r36 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        $r37 = virtualinvoke $r36.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding computeBoxingType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r7);

        i7 = $r37.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

     label08:
        if i6 > 15 goto label09;

        if i7 <= 15 goto label12;

     label09:
        if i6 != 11 goto label10;

        i7 = 1;

        goto label12;

     label10:
        if i7 != 11 goto label11;

        i6 = 1;

        goto label12;

     label11:
        $r10 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r10;

        $r11 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidOperator(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0, $r4, $r7);

        return null;

     label12:
        $i8 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i9 = $i8 & 4032;

        $i10 = $i9 >> 6;

        if $i10 != 14 goto label14;

        if i6 != 11 goto label13;

        $r30 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r30.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r2, $r4, $r4);

        $z3 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isArrayType()>();

        if $z3 == 0 goto label13;

        $r31 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) $r7;

        $r32 = virtualinvoke $r31.<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding elementsType()>();

        $r33 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding CHAR>;

        if $r32 != $r33 goto label13;

        $r34 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r35 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r34.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void signalNoImplicitStringConversionForCharArrayExpression(org.eclipse.jdt.internal.compiler.ast.Expression)>($r35);

     label13:
        if i7 != 11 goto label14;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r2, $r7, $r7);

        $z2 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isArrayType()>();

        if $z2 == 0 goto label14;

        $r25 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) $r4;

        $r26 = virtualinvoke $r25.<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding elementsType()>();

        $r27 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding CHAR>;

        if $r26 != $r27 goto label14;

        $r28 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r29 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r28.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void signalNoImplicitStringConversionForCharArrayExpression(org.eclipse.jdt.internal.compiler.ast.Expression)>($r29);

     label14:
        $i11 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i12 = $i11 & 4032;

        $i13 = $i12 >> 6;

        $r42 = <org.eclipse.jdt.internal.compiler.ast.OperatorExpression: int[][] OperatorSignatures>;

        $r43 = $r42[$i13];

        $i14 = i6 << 4;

        $i15 = $i14 + i7;

        $i16 = $r43[$i15];

        $r44 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i17 = $i16 >>> 16;

        $i18 = $i17 & 15;

        $r45 = staticinvoke <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding wellKnownType(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i18);

        virtualinvoke $r44.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r2, $r45, $r4);

        $r46 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i19 = $i16 >>> 8;

        $i20 = $i19 & 15;

        $r47 = staticinvoke <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding wellKnownType(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r2, $i20);

        virtualinvoke $r46.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r2, $r47, $r7);

        $i21 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i22 = $i16 & 15;

        $i23 = $i21 | $i22;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits> = $i23;

        $i24 = $i16 & 15;

        tableswitch($i24)
        {
            case 2: goto label17;
            case 3: goto label16;
            case 4: goto label23;
            case 5: goto label15;
            case 6: goto label23;
            case 7: goto label21;
            case 8: goto label18;
            case 9: goto label19;
            case 10: goto label20;
            case 11: goto label22;
            default: goto label23;
        };

     label15:
        $r19 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding BOOLEAN>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r19;

        goto label24;

     label16:
        $r20 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding BYTE>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r20;

        goto label24;

     label17:
        $r21 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding CHAR>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r21;

        goto label24;

     label18:
        $r17 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding DOUBLE>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r17;

        goto label24;

     label19:
        $r16 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding FLOAT>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r16;

        goto label24;

     label20:
        $r15 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r15;

        goto label24;

     label21:
        $r18 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding LONG>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r18;

        goto label24;

     label22:
        $r12 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding getJavaLangString()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r12;

        goto label24;

     label23:
        $r22 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r22;

        $r23 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void invalidOperator(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0, $r4, $r7);

        return null;

     label24:
        if $z0 != 0 goto label25;

        if $z1 == 0 goto label26;

     label25:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.CastExpression: void checkNeedForArgumentCasts(org.eclipse.jdt.internal.compiler.lookup.BlockScope,int,int,org.eclipse.jdt.internal.compiler.ast.Expression,int,boolean,org.eclipse.jdt.internal.compiler.ast.Expression,int,boolean)>(r2, $i13, $i16, $r14, i6, $z0, $r13, i7, $z1);

     label26:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void computeConstant(org.eclipse.jdt.internal.compiler.lookup.BlockScope,int,int)>(r2, i6, i7);

        $r48 = r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r48;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.BinaryExpression;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
