final class kodkod.engine.TrivialProof extends kodkod.engine.Proof
{
    private java.util.Map coreRoots;
    private kodkod.engine.fol2sat.RecordFilter coreFilter;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/TrivialProof;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.TrivialProof: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(kodkod.engine.fol2sat.TranslationLog)
    {
        kodkod.engine.fol2sat.TranslationLog r1;
        kodkod.engine.TrivialProof r0;

        r0 := @this: kodkod.engine.TrivialProof;

        r1 := @parameter0: kodkod.engine.fol2sat.TranslationLog;

        specialinvoke r0.<kodkod.engine.Proof: void <init>(kodkod.engine.fol2sat.TranslationLog)>(r1);

        r0.<kodkod.engine.TrivialProof: kodkod.engine.fol2sat.RecordFilter coreFilter> = null;

        r0.<kodkod.engine.TrivialProof: java.util.Map coreRoots> = null;

        return;
    }

    public final java.util.Iterator core()
    {
        java.util.Iterator $r4;
        kodkod.engine.fol2sat.TranslationLog $r2;
        kodkod.engine.fol2sat.RecordFilter $r1, $r3;
        kodkod.engine.TrivialProof r0;
        kodkod.engine.TrivialProof$1 $r5;

        r0 := @this: kodkod.engine.TrivialProof;

        $r1 = r0.<kodkod.engine.TrivialProof: kodkod.engine.fol2sat.RecordFilter coreFilter>;

        if $r1 != null goto label1;

        $r5 = new kodkod.engine.TrivialProof$1;

        specialinvoke $r5.<kodkod.engine.TrivialProof$1: void <init>(kodkod.engine.TrivialProof)>(r0);

        r0.<kodkod.engine.TrivialProof: kodkod.engine.fol2sat.RecordFilter coreFilter> = $r5;

     label1:
        $r2 = virtualinvoke r0.<kodkod.engine.TrivialProof: kodkod.engine.fol2sat.TranslationLog log()>();

        $r3 = r0.<kodkod.engine.TrivialProof: kodkod.engine.fol2sat.RecordFilter coreFilter>;

        $r4 = virtualinvoke $r2.<kodkod.engine.fol2sat.TranslationLog: java.util.Iterator replay(kodkod.engine.fol2sat.RecordFilter)>($r3);

        return $r4;
    }

    public final java.util.Map highLevelCore()
    {
        kodkod.engine.fol2sat.TranslationLog $r4;
        java.util.LinkedHashMap $r6;
        java.util.Map $r1, $r2, $r10, $r13, $r14;
        kodkod.engine.fol2sat.TranslationRecord r8;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        kodkod.ast.Formula $r9, $r11;
        java.util.Set $r5;
        kodkod.ast.Node $r12;
        java.lang.Object $r7;
        kodkod.engine.TrivialProof r0;

        r0 := @this: kodkod.engine.TrivialProof;

        $r1 = r0.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        if $r1 != null goto label3;

        $r3 = virtualinvoke r0.<kodkod.engine.TrivialProof: java.util.Iterator core()>();

        $r4 = virtualinvoke r0.<kodkod.engine.TrivialProof: kodkod.engine.fol2sat.TranslationLog log()>();

        $r5 = virtualinvoke $r4.<kodkod.engine.fol2sat.TranslationLog: java.util.Set roots()>();

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        r0.<kodkod.engine.TrivialProof: java.util.Map coreRoots> = $r6;

        goto label2;

     label1:
        $r7 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kodkod.engine.fol2sat.TranslationRecord) $r7;

        $r9 = virtualinvoke r8.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        $r10 = r0.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        $r11 = virtualinvoke r8.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        $r12 = virtualinvoke r8.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Node node()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r13 = r0.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        $r14 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r13);

        r0.<kodkod.engine.TrivialProof: java.util.Map coreRoots> = $r14;

     label3:
        $r2 = r0.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        return $r2;
    }

    public void minimize(kodkod.engine.satlab.ReductionStrategy)
    {
        java.util.Map $r26, $r29, $r32, $r33, $r34, $r35, $r37, $r48;
        java.util.Set $r4, $r14, $r38;
        kodkod.engine.fol2sat.TranslationLog $r3;
        java.lang.AssertionError $r36;
        java.util.LinkedHashMap $r0, $r1, $r25;
        kodkod.engine.fol2sat.TranslationRecord r50;
        kodkod.engine.satlab.ReductionStrategy r49;
        java.util.Map$Entry r52;
        kodkod.ast.Formula $r7, $r8, $r10, $r12, $r20, r22, r24, $r44;
        kodkod.engine.TrivialProof r2;
        int[] $r18, $r42, r51;
        kodkod.util.ints.TreeSequence $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Iterator $r5, $r15, $r39;
        kodkod.ast.Node $r11, $r28, $r31, $r47;
        java.lang.Object $r6, $r9, $r16, $r17, $r19, $r21, $r23, $r27, $r30, $r40, $r41, $r43, $r45, $r46;

        r2 := @this: kodkod.engine.TrivialProof;

        r49 := @parameter0: kodkod.engine.satlab.ReductionStrategy;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r3 = virtualinvoke r2.<kodkod.engine.TrivialProof: kodkod.engine.fol2sat.TranslationLog log()>();

        $r4 = virtualinvoke $r3.<kodkod.engine.fol2sat.TranslationLog: java.util.Set roots()>();

        $r5 = virtualinvoke r2.<kodkod.engine.TrivialProof: java.util.Iterator core()>();

        goto label03;

     label01:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r50 = (kodkod.engine.fol2sat.TranslationRecord) $r6;

        $r7 = virtualinvoke r50.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z0 == 0 goto label03;

        $r8 = virtualinvoke r50.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        $r9 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r51 = (int[]) $r9;

        if r51 != null goto label02;

        r51 = newarray (int)[1];

        $r12 = virtualinvoke r50.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r51);

     label02:
        $i0 = virtualinvoke r50.<kodkod.engine.fol2sat.TranslationRecord: int literal()>();

        r51[0] = $i0;

        $r10 = virtualinvoke r50.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Formula translated()>();

        $r11 = virtualinvoke r50.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Node node()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label03:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label01;

        $r13 = new kodkod.util.ints.TreeSequence;

        specialinvoke $r13.<kodkod.util.ints.TreeSequence: void <init>()>();

        $r14 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

        goto label07;

     label04:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r52 = (java.util.Map$Entry) $r16;

        $r17 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = (int[]) $r17;

        i1 = $r18[0];

        if i1 != -2147483647 goto label05;

        $r43 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r44 = (kodkod.ast.Formula) $r43;

        $r45 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r46 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r45);

        $r47 = (kodkod.ast.Node) $r46;

        $r48 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r44, $r47);

        r2.<kodkod.engine.TrivialProof: java.util.Map coreRoots> = $r48;

        goto label08;

     label05:
        $i2 = neg i1;

        $z2 = interfaceinvoke $r13.<kodkod.util.ints.SparseSequence: boolean containsIndex(int)>($i2);

        if $z2 == 0 goto label06;

        $i3 = neg i1;

        $r21 = interfaceinvoke $r13.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>($i3);

        r22 = (kodkod.ast.Formula) $r21;

        $r23 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        r24 = (kodkod.ast.Formula) $r23;

        $r25 = new java.util.LinkedHashMap;

        specialinvoke $r25.<java.util.LinkedHashMap: void <init>(int)>(3);

        r2.<kodkod.engine.TrivialProof: java.util.Map coreRoots> = $r25;

        $r26 = r2.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        $r27 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r22);

        $r28 = (kodkod.ast.Node) $r27;

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r22, $r28);

        $r29 = r2.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        $r30 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r24);

        $r31 = (kodkod.ast.Node) $r30;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, $r31);

        $r32 = r2.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        $r33 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r32);

        r2.<kodkod.engine.TrivialProof: java.util.Map coreRoots> = $r33;

        goto label08;

     label06:
        $r19 = interfaceinvoke r52.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (kodkod.ast.Formula) $r19;

        interfaceinvoke $r13.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>(i1, $r20);

     label07:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label04;

     label08:
        r2.<kodkod.engine.TrivialProof: kodkod.engine.fol2sat.RecordFilter coreFilter> = null;

        $z4 = <kodkod.engine.TrivialProof: boolean $assertionsDisabled>;

        if $z4 != 0 goto label10;

        $r34 = r2.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        $i4 = interfaceinvoke $r34.<java.util.Map: int size()>();

        if $i4 != 1 goto label09;

        $r37 = r2.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        $r38 = interfaceinvoke $r37.<java.util.Map: java.util.Set keySet()>();

        $r39 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();

        $r40 = interfaceinvoke $r39.<java.util.Iterator: java.lang.Object next()>();

        $r41 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40);

        $r42 = (int[]) $r41;

        $i6 = $r42[0];

        if $i6 == -2147483647 goto label10;

     label09:
        $r35 = r2.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        $i5 = interfaceinvoke $r35.<java.util.Map: int size()>();

        if $i5 == 2 goto label10;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label10:
        return;
    }

    static java.util.Map access$0(kodkod.engine.TrivialProof)
    {
        kodkod.engine.TrivialProof r0;
        java.util.Map $r1;

        r0 := @parameter0: kodkod.engine.TrivialProof;

        $r1 = r0.<kodkod.engine.TrivialProof: java.util.Map coreRoots>;

        return $r1;
    }
}
