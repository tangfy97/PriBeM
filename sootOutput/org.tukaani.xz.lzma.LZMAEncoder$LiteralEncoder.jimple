class org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder extends org.tukaani.xz.lzma.LZMACoder$LiteralCoder
{
    org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders;
    static final boolean $assertionsDisabled;
    private final org.tukaani.xz.lzma.LZMAEncoder this$0;

    void <init>(org.tukaani.xz.lzma.LZMAEncoder, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder r0;
        org.tukaani.xz.lzma.LZMAEncoder r1;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder $r4;
        int i0, i1, $i2, $i3, $i4, i5;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] $r2, $r3, $r5;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        r1 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0> = r1;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMACoder$LiteralCoder: void <init>(org.tukaani.xz.lzma.LZMACoder,int,int)>(r1, i0, i1);

        $i2 = i0 + i1;

        $i3 = 1 << $i2;

        $r2 = newarray (org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder)[$i3];

        r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders> = $r2;

        i5 = 0;

     label1:
        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $i4 = lengthof $r3;

        if i5 >= $i4 goto label2;

        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r4 = new org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        specialinvoke $r4.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: void <init>(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder,org.tukaani.xz.lzma.LZMAEncoder$1)>(r0, null);

        $r5[i5] = $r4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    void reset()
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder $r3;
        int $i0, i1;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] $r1, $r2;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        i1 = 0;

     label1:
        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r3 = $r2[i1];

        virtualinvoke $r3.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: void reset()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void encodeInit()
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder $r2;
        org.tukaani.xz.lzma.LZMAEncoder $r3;
        int $i0;
        java.lang.AssertionError $r4;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] $r1;
        boolean $z0;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        $z0 = <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i0 = $r3.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        if $i0 >= 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r2 = $r1[0];

        virtualinvoke $r2.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: void encode()>();

        return;
    }

    void encode()
    {
        java.lang.AssertionError $r10;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] $r7;
        org.tukaani.xz.lz.LZEncoder $r3, $r5;
        boolean $z0;
        org.tukaani.xz.lzma.LZMAEncoder $r1, $r2, $r4, $r6, $r9;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder $r8;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        $z0 = <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r9 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i7 = $r9.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        if $i7 >= 0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r3 = $r1.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i0 = $r2.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i1 = 1 + $i0;

        $i2 = virtualinvoke $r3.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>($i1);

        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r5 = $r4.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $i3 = virtualinvoke $r5.<org.tukaani.xz.lz.LZEncoder: int getPos()>();

        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i4 = $r6.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i5 = $i3 - $i4;

        $i6 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getSubcoderIndex(int,int)>($i2, $i5);

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r8 = $r7[$i6];

        virtualinvoke $r8.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: void encode()>();

        return;
    }

    int getPrice(int, int, int, int, org.tukaani.xz.lzma.State)
    {
        short[][] $r3;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder r0;
        org.tukaani.xz.lzma.State r2;
        short $s4;
        int $i0, i1, $i2, $i3, $i5, i6, $i7, i8, i9, $i10, $i11, $i12;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] $r6, $r8;
        boolean $z0;
        org.tukaani.xz.lzma.LZMAEncoder $r1, $r4;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder $r7, $r9;
        short[] $r5;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        i8 := @parameter0: int;

        i9 := @parameter1: int;

        i6 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: org.tukaani.xz.lzma.State;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r3 = $r1.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isMatch>;

        $i0 = virtualinvoke r2.<org.tukaani.xz.lzma.State: int get()>();

        $r5 = $r3[$i0];

        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i2 = $r4.<org.tukaani.xz.lzma.LZMAEncoder: int posMask>;

        $i3 = i1 & $i2;

        $s4 = $r5[$i3];

        $i12 = (int) $s4;

        $i5 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i12, 0);

        $i7 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getSubcoderIndex(int,int)>(i6, i1);

        $z0 = virtualinvoke r2.<org.tukaani.xz.lzma.State: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r9 = $r8[$i7];

        $i11 = virtualinvoke $r9.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: int getNormalPrice(int)>(i8);

        goto label2;

     label1:
        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r7 = $r6[$i7];

        $i11 = virtualinvoke $r7.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: int getMatchedPrice(int,int)>(i8, i9);

     label2:
        $i10 = $i5 + $i11;

        return $i10;
    }

    static org.tukaani.xz.lzma.LZMAEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)
    {
        org.tukaani.xz.lzma.LZMAEncoder $r1;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder r0;

        r0 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.tukaani.xz.lzma.LZMAEncoder: java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoder>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.lzma.LZMAEncoder");

        <org.tukaani.xz.lzma.LZMAEncoder: java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoder> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.lzma.LZMAEncoder: java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoder>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
