public class com.mycila.inject.internal.cglib.proxy.MethodProxy extends java.lang.Object
{
    private com.mycila.inject.internal.cglib.core.Signature sig1;
    private com.mycila.inject.internal.cglib.core.Signature sig2;
    private com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo createInfo;
    private final java.lang.Object initLock;
    private volatile com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo fastClassInfo;

    public static com.mycila.inject.internal.cglib.proxy.MethodProxy create(java.lang.Class, java.lang.Class, java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo $r6;
        com.mycila.inject.internal.cglib.core.Signature $r1, $r4;
        com.mycila.inject.internal.cglib.proxy.MethodProxy $r0;
        java.lang.Class r7, r8;
        java.lang.String r2, r3, r5;

        r7 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r0 = new com.mycila.inject.internal.cglib.proxy.MethodProxy;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: void <init>()>();

        $r1 = new com.mycila.inject.internal.cglib.core.Signature;

        specialinvoke $r1.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        $r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.core.Signature sig1> = $r1;

        $r4 = new com.mycila.inject.internal.cglib.core.Signature;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,java.lang.String)>(r5, r3);

        $r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.core.Signature sig2> = $r4;

        $r6 = new com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo;

        specialinvoke $r6.<com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo: void <init>(java.lang.Class,java.lang.Class)>(r7, r8);

        $r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo createInfo> = $r6;

        return $r0;
    }

    private void init()
    {
        java.lang.Throwable $r14;
        com.mycila.inject.internal.cglib.proxy.MethodProxy r0;
        com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo $r1, $r3, $r5;
        int $i0, $i1;
        com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo r4;
        com.mycila.inject.internal.cglib.core.Signature $r10, $r12;
        com.mycila.inject.internal.cglib.reflect.FastClass $r7, $r9, $r11, $r13;
        java.lang.Object $r2;
        java.lang.Class $r6, $r8;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MethodProxy;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo fastClassInfo>;

        if $r1 != null goto label6;

        $r2 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: java.lang.Object initLock>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo fastClassInfo>;

        if $r3 != null goto label2;

        r4 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo createInfo>;

        $r5 = new com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: void <init>(com.mycila.inject.internal.cglib.proxy.MethodProxy$1)>(null);

        $r6 = r4.<com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo: java.lang.Class c1>;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.reflect.FastClass helper(com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo,java.lang.Class)>(r4, $r6);

        $r5.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: com.mycila.inject.internal.cglib.reflect.FastClass f1> = $r7;

        $r8 = r4.<com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo: java.lang.Class c2>;

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.reflect.FastClass helper(com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo,java.lang.Class)>(r4, $r8);

        $r5.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: com.mycila.inject.internal.cglib.reflect.FastClass f2> = $r9;

        $r11 = $r5.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: com.mycila.inject.internal.cglib.reflect.FastClass f1>;

        $r10 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.core.Signature sig1>;

        $i0 = virtualinvoke $r11.<com.mycila.inject.internal.cglib.reflect.FastClass: int getIndex(com.mycila.inject.internal.cglib.core.Signature)>($r10);

        $r5.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: int i1> = $i0;

        $r13 = $r5.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: com.mycila.inject.internal.cglib.reflect.FastClass f2>;

        $r12 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.core.Signature sig2>;

        $i1 = virtualinvoke $r13.<com.mycila.inject.internal.cglib.reflect.FastClass: int getIndex(com.mycila.inject.internal.cglib.core.Signature)>($r12);

        $r5.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: int i2> = $i1;

        r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo fastClassInfo> = $r5;

        r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo createInfo> = null;

     label2:
        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r14;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static com.mycila.inject.internal.cglib.reflect.FastClass helper(com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo, java.lang.Class)
    {
        com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo r2;
        com.mycila.inject.internal.cglib.core.GeneratorStrategy $r6;
        com.mycila.inject.internal.cglib.reflect.FastClass $r7;
        com.mycila.inject.internal.cglib.reflect.FastClass$Generator $r0;
        java.lang.Class r1, $r3;
        java.lang.ClassLoader $r4;
        com.mycila.inject.internal.cglib.core.NamingPolicy $r5;
        boolean $z0;

        r2 := @parameter0: com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo;

        r1 := @parameter1: java.lang.Class;

        $r0 = new com.mycila.inject.internal.cglib.reflect.FastClass$Generator;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: void setType(java.lang.Class)>(r1);

        $r3 = r2.<com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo: java.lang.Class c2>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: void setClassLoader(java.lang.ClassLoader)>($r4);

        $r5 = r2.<com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo: com.mycila.inject.internal.cglib.core.NamingPolicy namingPolicy>;

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: void setNamingPolicy(com.mycila.inject.internal.cglib.core.NamingPolicy)>($r5);

        $r6 = r2.<com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo: com.mycila.inject.internal.cglib.core.GeneratorStrategy strategy>;

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: void setStrategy(com.mycila.inject.internal.cglib.core.GeneratorStrategy)>($r6);

        $z0 = r2.<com.mycila.inject.internal.cglib.proxy.MethodProxy$CreateInfo: boolean attemptLoad>;

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: void setAttemptLoad(boolean)>($z0);

        $r7 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.reflect.FastClass$Generator: com.mycila.inject.internal.cglib.reflect.FastClass create()>();

        return $r7;
    }

    private void <init>()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.cglib.proxy.MethodProxy r0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MethodProxy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: java.lang.Object initLock> = $r1;

        return;
    }

    public com.mycila.inject.internal.cglib.core.Signature getSignature()
    {
        com.mycila.inject.internal.cglib.proxy.MethodProxy r0;
        com.mycila.inject.internal.cglib.core.Signature $r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MethodProxy;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.core.Signature sig1>;

        return $r1;
    }

    public java.lang.String getSuperName()
    {
        com.mycila.inject.internal.cglib.proxy.MethodProxy r0;
        java.lang.String $r2;
        com.mycila.inject.internal.cglib.core.Signature $r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MethodProxy;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.core.Signature sig2>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        return $r2;
    }

    public int getSuperIndex()
    {
        int $i0;
        com.mycila.inject.internal.cglib.proxy.MethodProxy r0;
        com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo $r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MethodProxy;

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: void init()>();

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo fastClassInfo>;

        $i0 = $r1.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: int i2>;

        return $i0;
    }

    com.mycila.inject.internal.cglib.reflect.FastClass getFastClass()
    {
        com.mycila.inject.internal.cglib.proxy.MethodProxy r0;
        com.mycila.inject.internal.cglib.reflect.FastClass $r2;
        com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo $r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MethodProxy;

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: void init()>();

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo fastClassInfo>;

        $r2 = $r1.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: com.mycila.inject.internal.cglib.reflect.FastClass f1>;

        return $r2;
    }

    com.mycila.inject.internal.cglib.reflect.FastClass getSuperFastClass()
    {
        com.mycila.inject.internal.cglib.proxy.MethodProxy r0;
        com.mycila.inject.internal.cglib.reflect.FastClass $r2;
        com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo $r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MethodProxy;

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: void init()>();

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo fastClassInfo>;

        $r2 = $r1.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: com.mycila.inject.internal.cglib.reflect.FastClass f2>;

        return $r2;
    }

    public static com.mycila.inject.internal.cglib.proxy.MethodProxy find(java.lang.Class, com.mycila.inject.internal.cglib.core.Signature)
    {
        java.lang.Object[] $r3;
        java.lang.NoSuchMethodException $r11;
        com.mycila.inject.internal.cglib.proxy.MethodProxy $r6;
        java.lang.StringBuffer $r13, $r14, $r15, $r16;
        java.lang.String $r17;
        java.lang.reflect.Method $r2;
        java.lang.IllegalAccessException $r9;
        com.mycila.inject.internal.cglib.core.Signature r4;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r8, $r10;
        java.lang.Class[] $r1;
        java.lang.IllegalArgumentException $r12;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.Class r0;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

     label1:
        $r1 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.Class[] FIND_PROXY_TYPES>;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("CGLIB$findMethodProxy", $r1);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r4;

        $r5 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        $r6 = (com.mycila.inject.internal.cglib.proxy.MethodProxy) $r5;

     label2:
        return $r6;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not use a MethodInterceptor");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label4:
        $r9 := @caughtexception;

        $r10 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label5:
        $r7 := @caughtexception;

        $r8 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Throwable $r14;
        java.lang.Object[] r2;
        com.mycila.inject.internal.cglib.proxy.MethodProxy r0;
        com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo $r6, r15;
        java.lang.StringBuffer $r8, $r9, $r11;
        int $i0, $i1;
        java.lang.String $r12;
        com.mycila.inject.internal.cglib.core.Signature $r10;
        com.mycila.inject.internal.cglib.reflect.FastClass $r3;
        java.lang.IllegalArgumentException $r5, $r7;
        java.lang.reflect.InvocationTargetException $r13;
        java.lang.Object r1, $r4;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MethodProxy;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

     label1:
        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: void init()>();

        r15 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo fastClassInfo>;

        $r3 = r15.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: com.mycila.inject.internal.cglib.reflect.FastClass f1>;

        $i0 = r15.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: int i1>;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.cglib.reflect.FastClass: java.lang.Object invoke(int,java.lang.Object,java.lang.Object[])>($i0, r1, r2);

     label2:
        return $r4;

     label3:
        $r13 := @caughtexception;

        $r14 = virtualinvoke $r13.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r14;

     label4:
        $r5 := @caughtexception;

        $r6 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo fastClassInfo>;

        $i1 = $r6.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: int i1>;

        if $i1 >= 0 goto label5;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Protected method: ");

        $r10 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.core.Signature sig1>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label5:
        throw $r5;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
    }

    public java.lang.Object invokeSuper(java.lang.Object, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Throwable $r6;
        java.lang.Object[] r2;
        com.mycila.inject.internal.cglib.proxy.MethodProxy r0;
        com.mycila.inject.internal.cglib.reflect.FastClass $r3;
        com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo r7;
        java.lang.reflect.InvocationTargetException $r5;
        int $i0;
        java.lang.Object r1, $r4;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MethodProxy;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

     label1:
        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: void init()>();

        r7 = r0.<com.mycila.inject.internal.cglib.proxy.MethodProxy: com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo fastClassInfo>;

        $r3 = r7.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: com.mycila.inject.internal.cglib.reflect.FastClass f2>;

        $i0 = r7.<com.mycila.inject.internal.cglib.proxy.MethodProxy$FastClassInfo: int i2>;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.cglib.reflect.FastClass: java.lang.Object invoke(int,java.lang.Object,java.lang.Object[])>($i0, r1, r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r6;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }
}
