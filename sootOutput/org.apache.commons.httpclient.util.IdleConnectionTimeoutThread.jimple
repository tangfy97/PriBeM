public class org.apache.commons.httpclient.util.IdleConnectionTimeoutThread extends java.lang.Thread
{
    private java.util.List connectionManagers;
    private boolean shutdown;
    private long timeoutInterval;
    private long connectionTimeout;

    public void <init>()
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: java.util.List connectionManagers> = $r1;

        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown> = 0;

        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long timeoutInterval> = 1000L;

        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long connectionTimeout> = 3000L;

        virtualinvoke r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: void setDaemon(boolean)>(1);

        return;
    }

    public synchronized void addConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)
    {
        java.lang.IllegalStateException $r3;
        java.util.List $r2;
        org.apache.commons.httpclient.HttpConnectionManager r1;
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        $z0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IdleConnectionTimeoutThread has been shutdown");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: java.util.List connectionManagers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public synchronized void removeConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)
    {
        java.lang.IllegalStateException $r3;
        java.util.List $r2;
        org.apache.commons.httpclient.HttpConnectionManager r1;
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        $z0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IdleConnectionTimeoutThread has been shutdown");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: java.util.List connectionManagers>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    protected void handleCloseIdleConnections(org.apache.commons.httpclient.HttpConnectionManager)
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r1;
        long $l0;
        org.apache.commons.httpclient.HttpConnectionManager r0;

        r1 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        r0 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        $l0 = r1.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long connectionTimeout>;

        interfaceinvoke r0.<org.apache.commons.httpclient.HttpConnectionManager: void closeIdleConnections(long)>($l0);

        return;
    }

    public synchronized void run()
    {
        java.util.Iterator $r3;
        long $l0;
        java.util.List $r1, $r2;
        org.apache.commons.httpclient.HttpConnectionManager r6;
        java.lang.InterruptedException $r5;
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

     label1:
        $z0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown>;

        if $z0 != 0 goto label7;

        $r2 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: java.util.List connectionManagers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.httpclient.HttpConnectionManager) $r4;

        virtualinvoke r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: void handleCloseIdleConnections(org.apache.commons.httpclient.HttpConnectionManager)>(r6);

        goto label2;

     label3:
        $l0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long timeoutInterval>;

        virtualinvoke r0.<java.lang.Object: void wait(long)>($l0);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        goto label1;

     label7:
        $r1 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: java.util.List connectionManagers>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    public synchronized void shutdown()
    {
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    public synchronized void setConnectionTimeout(long)
    {
        java.lang.IllegalStateException $r1;
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        long l0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        l0 := @parameter0: long;

        $z0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IdleConnectionTimeoutThread has been shutdown");

        throw $r1;

     label1:
        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long connectionTimeout> = l0;

        return;
    }

    public synchronized void setTimeoutInterval(long)
    {
        java.lang.IllegalStateException $r1;
        org.apache.commons.httpclient.util.IdleConnectionTimeoutThread r0;
        long l0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.util.IdleConnectionTimeoutThread;

        l0 := @parameter0: long;

        $z0 = r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: boolean shutdown>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IdleConnectionTimeoutThread has been shutdown");

        throw $r1;

     label1:
        r0.<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: long timeoutInterval> = l0;

        return;
    }
}
