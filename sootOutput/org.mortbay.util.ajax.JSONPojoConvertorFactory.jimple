public class org.mortbay.util.ajax.JSONPojoConvertorFactory extends java.lang.Object implements org.mortbay.util.ajax.JSON$Convertor
{
    private final org.mortbay.util.ajax.JSON _json;
    private final boolean _fromJSON;
    static java.lang.Class class$org$mortbay$util$ajax$JSON;
    static java.lang.Class class$java$lang$Object;

    public void <init>(org.mortbay.util.ajax.JSON)
    {
        org.mortbay.util.ajax.JSONPojoConvertorFactory r0;
        java.lang.IllegalArgumentException $r2;
        org.mortbay.util.ajax.JSON r1;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertorFactory;

        r1 := @parameter0: org.mortbay.util.ajax.JSON;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mortbay.util.ajax.JSONPojoConvertorFactory: org.mortbay.util.ajax.JSON _json> = r1;

        r0.<org.mortbay.util.ajax.JSONPojoConvertorFactory: boolean _fromJSON> = 1;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public void <init>(org.mortbay.util.ajax.JSON, boolean)
    {
        org.mortbay.util.ajax.JSONPojoConvertorFactory r0;
        java.lang.IllegalArgumentException $r2;
        org.mortbay.util.ajax.JSON r1;
        boolean z0;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertorFactory;

        r1 := @parameter0: org.mortbay.util.ajax.JSON;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mortbay.util.ajax.JSONPojoConvertorFactory: org.mortbay.util.ajax.JSON _json> = r1;

        r0.<org.mortbay.util.ajax.JSONPojoConvertorFactory: boolean _fromJSON> = z0;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public void toJSON(java.lang.Object, org.mortbay.util.ajax.JSON$Output)
    {
        org.mortbay.util.ajax.JSONPojoConvertor $r12;
        org.mortbay.util.ajax.JSON $r4, $r13;
        org.mortbay.util.ajax.JSON$Output r6;
        java.lang.String $r2, $r7;
        boolean $z0;
        org.mortbay.util.ajax.JSONPojoConvertorFactory r3;
        org.mortbay.util.ajax.JSON$Convertor $r5, r15;
        java.lang.Object r0;
        java.lang.Class $r1, $r8, $r9, $r10, $r11, $r16, $r17;
        java.lang.ClassNotFoundException $r14;

        r3 := @this: org.mortbay.util.ajax.JSONPojoConvertorFactory;

        r0 := @parameter0: java.lang.Object;

        r6 := @parameter1: org.mortbay.util.ajax.JSON$Output;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = r3.<org.mortbay.util.ajax.JSONPojoConvertorFactory: org.mortbay.util.ajax.JSON _json>;

        $r5 = virtualinvoke $r4.<org.mortbay.util.ajax.JSON: org.mortbay.util.ajax.JSON$Convertor getConvertorFor(java.lang.String)>($r2);

        r15 = $r5;

        if $r5 != null goto label06;

     label01:
        $r10 = <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$org$mortbay$util$ajax$JSON>;

        if $r10 != null goto label02;

        $r16 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$(java.lang.String)>("org.mortbay.util.ajax.JSON");

        <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$org$mortbay$util$ajax$JSON> = $r16;

        goto label03;

     label02:
        $r16 = <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$org$mortbay$util$ajax$JSON>;

     label03:
        $r11 = staticinvoke <org.mortbay.util.Loader: java.lang.Class loadClass(java.lang.Class,java.lang.String)>($r16, $r2);

        $r12 = new org.mortbay.util.ajax.JSONPojoConvertor;

        $z0 = r3.<org.mortbay.util.ajax.JSONPojoConvertorFactory: boolean _fromJSON>;

        specialinvoke $r12.<org.mortbay.util.ajax.JSONPojoConvertor: void <init>(java.lang.Class,boolean)>($r11, $z0);

        r15 = $r12;

        $r13 = r3.<org.mortbay.util.ajax.JSONPojoConvertorFactory: org.mortbay.util.ajax.JSON _json>;

        virtualinvoke $r13.<org.mortbay.util.ajax.JSON: void addConvertorFor(java.lang.String,org.mortbay.util.ajax.JSON$Convertor)>($r2, $r12);

     label04:
        goto label06;

     label05:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.ClassNotFoundException: void printStackTrace()>();

     label06:
        if r15 == null goto label09;

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$java$lang$Object>;

        if $r9 != null goto label07;

        $r17 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$java$lang$Object> = $r17;

        goto label08;

     label07:
        $r17 = <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$java$lang$Object>;

     label08:
        if $r8 == $r17 goto label09;

        interfaceinvoke r15.<org.mortbay.util.ajax.JSON$Convertor: void toJSON(java.lang.Object,org.mortbay.util.ajax.JSON$Output)>(r0, r6);

        goto label10;

     label09:
        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r6.<org.mortbay.util.ajax.JSON$Output: void add(java.lang.Object)>($r7);

     label10:
        return;

        catch java.lang.ClassNotFoundException from label01 to label04 with label05;
    }

    public java.lang.Object fromJSON(java.util.Map)
    {
        org.mortbay.util.ajax.JSONPojoConvertor $r11;
        org.mortbay.util.ajax.JSON $r4, $r12;
        java.util.Map r0;
        java.lang.String r2, $r7;
        boolean $z0;
        org.mortbay.util.ajax.JSONPojoConvertorFactory r3;
        org.mortbay.util.ajax.JSON$Convertor $r5, r14;
        java.lang.Object $r1, $r8;
        java.lang.Class $r6, $r9, $r10, $r15, $r16;
        java.lang.ClassNotFoundException $r13;

        r3 := @this: org.mortbay.util.ajax.JSONPojoConvertorFactory;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("class");

        r2 = (java.lang.String) $r1;

        if r2 == null goto label9;

        $r4 = r3.<org.mortbay.util.ajax.JSONPojoConvertorFactory: org.mortbay.util.ajax.JSON _json>;

        $r5 = virtualinvoke $r4.<org.mortbay.util.ajax.JSON: org.mortbay.util.ajax.JSON$Convertor getConvertorFor(java.lang.String)>(r2);

        r14 = $r5;

        if $r5 != null goto label6;

     label1:
        $r9 = <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$org$mortbay$util$ajax$JSON>;

        if $r9 != null goto label2;

        $r15 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$(java.lang.String)>("org.mortbay.util.ajax.JSON");

        <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$org$mortbay$util$ajax$JSON> = $r15;

        goto label3;

     label2:
        $r15 = <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$org$mortbay$util$ajax$JSON>;

     label3:
        $r10 = staticinvoke <org.mortbay.util.Loader: java.lang.Class loadClass(java.lang.Class,java.lang.String)>($r15, r2);

        $r11 = new org.mortbay.util.ajax.JSONPojoConvertor;

        specialinvoke $r11.<org.mortbay.util.ajax.JSONPojoConvertor: void <init>(java.lang.Class)>($r10);

        r14 = $r11;

        $r12 = r3.<org.mortbay.util.ajax.JSONPojoConvertorFactory: org.mortbay.util.ajax.JSON _json>;

        virtualinvoke $r12.<org.mortbay.util.ajax.JSON: void addConvertorFor(java.lang.String,org.mortbay.util.ajax.JSON$Convertor)>(r2, $r11);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.ClassNotFoundException: void printStackTrace()>();

     label6:
        if r14 == null goto label9;

        $r6 = <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$java$lang$Object>;

        if $r6 != null goto label7;

        $r16 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$java$lang$Object> = $r16;

        goto label8;

     label7:
        $r16 = <org.mortbay.util.ajax.JSONPojoConvertorFactory: java.lang.Class class$java$lang$Object>;

     label8:
        $r7 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label9;

        $r8 = interfaceinvoke r14.<org.mortbay.util.ajax.JSON$Convertor: java.lang.Object fromJSON(java.util.Map)>(r0);

        return $r8;

     label9:
        return r0;

        catch java.lang.ClassNotFoundException from label1 to label4 with label5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
