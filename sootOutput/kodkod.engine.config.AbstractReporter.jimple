public abstract class kodkod.engine.config.AbstractReporter extends java.lang.Object implements kodkod.engine.config.Reporter
{

    protected void <init>()
    {
        kodkod.engine.config.AbstractReporter r0;

        r0 := @this: kodkod.engine.config.AbstractReporter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void detectingSymmetries(kodkod.instance.Bounds)
    {
        kodkod.engine.config.AbstractReporter r0;
        kodkod.instance.Bounds r1;

        r0 := @this: kodkod.engine.config.AbstractReporter;

        r1 := @parameter0: kodkod.instance.Bounds;

        return;
    }

    public void detectedSymmetries(java.util.Set)
    {
        kodkod.engine.config.AbstractReporter r0;
        java.util.Set r1;

        r0 := @this: kodkod.engine.config.AbstractReporter;

        r1 := @parameter0: java.util.Set;

        return;
    }

    public void generatingSBP()
    {
        kodkod.engine.config.AbstractReporter r0;

        r0 := @this: kodkod.engine.config.AbstractReporter;

        return;
    }

    public void flattening(kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.config.AbstractReporter r0;
        kodkod.engine.bool.BooleanFormula r1;

        r0 := @this: kodkod.engine.config.AbstractReporter;

        r1 := @parameter0: kodkod.engine.bool.BooleanFormula;

        return;
    }

    public void skolemizing(kodkod.ast.Decl, kodkod.ast.Relation, java.util.List)
    {
        kodkod.engine.config.AbstractReporter r0;
        java.util.List r3;
        kodkod.ast.Decl r1;
        kodkod.ast.Relation r2;

        r0 := @this: kodkod.engine.config.AbstractReporter;

        r1 := @parameter0: kodkod.ast.Decl;

        r2 := @parameter1: kodkod.ast.Relation;

        r3 := @parameter2: java.util.List;

        return;
    }

    public void solvingCNF(int, int, int)
    {
        kodkod.engine.config.AbstractReporter r0;
        int i0, i1, i2;

        r0 := @this: kodkod.engine.config.AbstractReporter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }

    public void optimizingBoundsAndFormula()
    {
        kodkod.engine.config.AbstractReporter r0;

        r0 := @this: kodkod.engine.config.AbstractReporter;

        return;
    }

    public void translatingToBoolean(kodkod.ast.Formula, kodkod.instance.Bounds)
    {
        kodkod.engine.config.AbstractReporter r0;
        kodkod.instance.Bounds r2;
        kodkod.ast.Formula r1;

        r0 := @this: kodkod.engine.config.AbstractReporter;

        r1 := @parameter0: kodkod.ast.Formula;

        r2 := @parameter1: kodkod.instance.Bounds;

        return;
    }

    public void translatingToCNF(kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.config.AbstractReporter r0;
        kodkod.engine.bool.BooleanFormula r1;

        r0 := @this: kodkod.engine.config.AbstractReporter;

        r1 := @parameter0: kodkod.engine.bool.BooleanFormula;

        return;
    }
}
