public abstract class org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.util.UpdateMap
{
    protected final java.util.List updates;
    protected static final java.util.Comparator comparator;
    static final boolean $assertionsDisabled;

    public int changeSize()
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.String getChangeKey(int)
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate $r3;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r0;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r2;

        $r4 = $r3.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        return $r4;
    }

    public java.lang.String getOldValue(int)
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate $r3;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r0;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r2;

        $r4 = $r3.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String oldValue>;

        return $r4;
    }

    public java.lang.String getNewValue(int)
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate $r3;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r0;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r2;

        $r4 = $r3.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String newValue>;

        return $r4;
    }

    public void <init>()
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r0;
        java.util.List $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates> = $r1;

        return;
    }

    public transient void <init>(java.lang.String[])
    {
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r0;
        java.lang.StringBuilder $r9, $r10, $r14;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate $r12, $r17;
        java.lang.String[] r1;
        java.lang.AssertionError $r7;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, i11;
        java.lang.String $r13, $r15, $r16, $r18, $r19, $r20;
        java.lang.IllegalArgumentException $r8;
        java.lang.Object $r5, $r6, $r11;
        java.util.Comparator $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        $i1 = $i0 % 3;

        if $i1 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Triples must come in groups of three");

        $r2 = new java.util.ArrayList;

        $i2 = lengthof r1;

        $i3 = $i2 / 3;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i3);

        i9 = 0;

     label3:
        $i10 = lengthof r1;

        if i9 >= $i10 goto label4;

        $r16 = r1[i9];

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r16, "Null key");

        $r17 = new org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate;

        $r20 = r1[i9];

        $i7 = i9 + 1;

        $r19 = r1[$i7];

        $i8 = i9 + 2;

        $r18 = r1[$i8];

        specialinvoke $r17.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r20, $r19, $r18);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        i9 = i9 + 3;

        goto label3;

     label4:
        $r3 = <org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.Comparator comparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r2, $r3);

        i11 = 1;

     label5:
        $i4 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i11 >= $i4 goto label8;

        $r4 = <org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.Comparator comparator>;

        $i5 = i11 - 1;

        $r5 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r6 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i11);

        $i6 = interfaceinvoke $r4.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $i6 != 0 goto label6;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate key: ");

        $r11 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i11);

        $r12 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r11;

        $r13 = $r12.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label6:
        $z0 = <org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        if $i6 < 0 goto label7;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label7:
        i11 = i11 + 1;

        goto label5;

     label8:
        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates> = $r2;

        return;
    }

    public void <init>(java.util.Map)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r0;
        java.lang.String[] $r2;
        java.util.Map r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        r1 := @parameter0: java.util.Map;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.lang.String[] tripletsFromMap(java.util.Map)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: void <init>(java.lang.String[])>($r2);

        return;
    }

    private static java.lang.String[] tripletsFromMap(java.util.Map)
    {
        java.lang.String[] r1;
        java.util.Map r0;
        int $i0, $i1, i2, i3, i4;
        java.lang.String $r7, $r11, $r15;
        boolean $z0;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.waveprotocol.wave.model.util.Pair $r9, $r13;
        java.lang.Object $r4, $r6, $r8, $r10, $r12, $r14;

        r0 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        $i1 = $i0 * 3;

        r1 = newarray (java.lang.String)[$i1];

        i2 = 0;

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        i3 = i2 + 1;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        r1[i2] = $r7;

        i4 = i3 + 1;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (org.waveprotocol.wave.model.util.Pair) $r8;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.util.Pair: java.lang.Object getFirst()>();

        $r11 = (java.lang.String) $r10;

        r1[i3] = $r11;

        i2 = i4 + 1;

        $r12 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (org.waveprotocol.wave.model.util.Pair) $r12;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.util.Pair: java.lang.Object getSecond()>();

        $r15 = (java.lang.String) $r14;

        r1[i4] = $r15;

        goto label1;

     label2:
        return r1;
    }

    protected void <init>(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r0;
        java.util.List r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates> = r1;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap exclude(java.util.Collection)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate r6;
        java.util.Collection r7;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r1, $r4;
        java.util.ArrayList $r0;
        java.util.List $r2;
        java.lang.Object $r5;
        java.lang.String $r8;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        r7 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r5;

        $r8 = r6.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        $z1 = interfaceinvoke r7.<java.util.Collection: boolean contains(java.lang.Object)>($r8);

        if $z1 != 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

     label2:
        goto label1;

     label3:
        $r4 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap createFromList(java.util.List)>($r0);

        return $r4;
    }

    public org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap composeWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.document.operation.util.UpdateMap r4;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r1, $r5, $r7;
        java.util.List $r2, $r27;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r23;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate r10, $r14, $r28, r29, $r30, $r31;
        java.util.ArrayList $r0;
        int $i0;
        java.lang.String $r12, $r13, $r15, $r16, $r17, $r24;
        java.util.Iterator $r3, $r6;
        java.lang.Object $r8, $r9, $r18, $r25, $r26;
        java.util.Comparator $r11;

        r1 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.util.UpdateMap;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label01;

        $r26 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r28 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r26;

        goto label02;

     label01:
        $r28 = null;

     label02:
        r29 = $r28;

        $r5 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap) r4;

        $r27 = $r5.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates>;

        $r6 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r9;

     label04:
        if r29 == null goto label13;

        $r11 = <org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.Comparator comparator>;

        $i0 = interfaceinvoke $r11.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r10, r29);

        if $i0 >= 0 goto label05;

        goto label13;

     label05:
        if $i0 <= 0 goto label08;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r29);

        $z4 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label06;

        $r25 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r30 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r25;

        goto label07;

     label06:
        $r30 = null;

     label07:
        r29 = $r30;

        goto label12;

     label08:
        $r13 = r29.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String newValue>;

        $r12 = r10.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String oldValue>;

        $z2 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: boolean areEqual(java.lang.Object,java.lang.Object)>($r13, $r12);

        if $z2 != 0 goto label09;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched old value: attempt to update ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r24);

     label09:
        $r14 = new org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate;

        $r17 = r10.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        $r16 = r29.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String oldValue>;

        $r15 = r10.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String newValue>;

        specialinvoke $r14.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r17, $r16, $r15);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r14);

        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r18 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r31 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r18;

        goto label11;

     label10:
        $r31 = null;

     label11:
        r29 = $r31;

        goto label03;

     label12:
        goto label04;

     label13:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label03;

     label14:
        if r29 == null goto label16;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r29);

     label15:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label15;

     label16:
        $r7 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap createFromList(java.util.List)>($r0);

        return $r7;
    }

    protected abstract org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap createFromList(java.util.List);

    private boolean areEqual(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r2;
        java.lang.Object r0, r1;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    public java.lang.String toString()
    {
        java.util.List $r3;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap r2;
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.String $r5;

        r2 := @this: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updates: ");

        $r3 = r2.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.List updates>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static void checkUpdatesSorted(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate r3, r16;
        java.lang.AssertionError $r15;
        int $i0;
        java.lang.String $r4, $r5, $r8, $r11, $r13, $r14;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        java.util.List r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12;

        r0 := @parameter0: java.util.List;

        r16 = null;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r2;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "Null attribute update");

        $z1 = <org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r14 = r3.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        if $r14 != null goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label2:
        if r16 == null goto label3;

        $r5 = r16.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        $r4 = r3.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        $i0 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r4);

        if $i0 < 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute keys not strictly monotonic: ");

        $r8 = r16.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = r3.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r13);

     label3:
        r16 = r3;

        goto label1;

     label4:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$1 $r1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/operation/util/ImmutableUpdateMap;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$1: void <init>()>();

        <org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: java.util.Comparator comparator> = $r1;

        return;
    }
}
