final class org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta extends org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage
{
    private final org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta delta;

    void <init>(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r1;
        int $i2;
        long $l0, $l1, $l3, $l4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $l0 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $l1 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $i2 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: int size()>();

        $l3 = (long) $i2;

        $l4 = $l1 + $l3;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: void <init>(long,long)>($l0, $l4);

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta delta> = r1;

        return;
    }

    void deliverTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta delta>;

        interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver: void onDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>($r2);

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta r2;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r5;
        long $l0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r7, $r8;
        java.lang.String $r6, $r9;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ServerDelta(");

        $l0 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta: long startVersion()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta delta>;

        $r6 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl: java.lang.String access$000(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta r0;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$ServerDelta;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) r1;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: int compareTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>($r2);

        return $i0;
    }
}
