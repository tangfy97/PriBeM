public abstract class org.springframework.aop.interceptor.ExposeBeanNameAdvisors extends java.lang.Object
{
    private static final java.lang.String BEAN_NAME_ATTRIBUTE;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r3, $r5;

        $r0 = new java.lang.StringBuilder;

        $r1 = class "Lorg/springframework/aop/interceptor/ExposeBeanNameAdvisors;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".BEAN_NAME");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.springframework.aop.interceptor.ExposeBeanNameAdvisors: java.lang.String BEAN_NAME_ATTRIBUTE> = $r5;

        return;
    }

    public void <init>()
    {
        org.springframework.aop.interceptor.ExposeBeanNameAdvisors r0;

        r0 := @this: org.springframework.aop.interceptor.ExposeBeanNameAdvisors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getBeanName() throws java.lang.IllegalStateException
    {
        org.aopalliance.intercept.MethodInvocation $r0;
        java.lang.String $r1;

        $r0 = staticinvoke <org.springframework.aop.interceptor.ExposeInvocationInterceptor: org.aopalliance.intercept.MethodInvocation currentInvocation()>();

        $r1 = staticinvoke <org.springframework.aop.interceptor.ExposeBeanNameAdvisors: java.lang.String getBeanName(org.aopalliance.intercept.MethodInvocation)>($r0);

        return $r1;
    }

    public static java.lang.String getBeanName(org.aopalliance.intercept.MethodInvocation) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r5;
        java.lang.IllegalArgumentException $r9;
        org.aopalliance.intercept.MethodInvocation r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r7, $r10, $r11;
        java.lang.String $r2, r4, $r8, $r12;
        org.springframework.aop.ProxyMethodInvocation r1;
        boolean $z0;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $z0 = r0 instanceof org.springframework.aop.ProxyMethodInvocation;

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("MethodInvocation is not a Spring ProxyMethodInvocation: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label1:
        r1 = (org.springframework.aop.ProxyMethodInvocation) r0;

        $r2 = <org.springframework.aop.interceptor.ExposeBeanNameAdvisors: java.lang.String BEAN_NAME_ATTRIBUTE>;

        $r3 = interfaceinvoke r1.<org.springframework.aop.ProxyMethodInvocation: java.lang.Object getUserAttribute(java.lang.String)>($r2);

        r4 = (java.lang.String) $r3;

        if r4 != null goto label2;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot get bean name; not set on MethodInvocation: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label2:
        return r4;
    }

    public static org.springframework.aop.Advisor createAdvisorWithoutIntroduction(java.lang.String)
    {
        org.springframework.aop.support.DefaultPointcutAdvisor $r0;
        java.lang.String r2;
        org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameInterceptor $r1;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.springframework.aop.support.DefaultPointcutAdvisor;

        $r1 = new org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameInterceptor;

        specialinvoke $r1.<org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameInterceptor: void <init>(java.lang.String)>(r2);

        specialinvoke $r0.<org.springframework.aop.support.DefaultPointcutAdvisor: void <init>(org.aopalliance.aop.Advice)>($r1);

        return $r0;
    }

    public static org.springframework.aop.Advisor createAdvisorIntroducingNamedBean(java.lang.String)
    {
        org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameIntroduction $r1;
        java.lang.String r2;
        org.springframework.aop.support.DefaultIntroductionAdvisor $r0;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.springframework.aop.support.DefaultIntroductionAdvisor;

        $r1 = new org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameIntroduction;

        specialinvoke $r1.<org.springframework.aop.interceptor.ExposeBeanNameAdvisors$ExposeBeanNameIntroduction: void <init>(java.lang.String)>(r2);

        specialinvoke $r0.<org.springframework.aop.support.DefaultIntroductionAdvisor: void <init>(org.aopalliance.aop.Advice)>($r1);

        return $r0;
    }

    static java.lang.String access$0()
    {
        java.lang.String $r0;

        $r0 = <org.springframework.aop.interceptor.ExposeBeanNameAdvisors: java.lang.String BEAN_NAME_ATTRIBUTE>;

        return $r0;
    }
}
