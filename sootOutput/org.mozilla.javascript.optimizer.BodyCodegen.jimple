class org.mozilla.javascript.optimizer.BodyCodegen extends java.lang.Object
{
    private static final int JAVASCRIPT_EXCEPTION;
    private static final int EVALUATOR_EXCEPTION;
    private static final int ECMAERROR_EXCEPTION;
    org.mozilla.classfile.ClassFileWriter cfw;
    org.mozilla.javascript.optimizer.Codegen codegen;
    org.mozilla.javascript.CompilerEnvirons compilerEnv;
    org.mozilla.javascript.ScriptOrFnNode scriptOrFn;
    private org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent;
    private boolean isTopLevel;
    private static final int MAX_LOCALS;
    private boolean[] locals;
    private short firstFreeLocal;
    private short localsMax;
    private int itsLineNumber;
    private boolean hasVarsInRegs;
    private short[] varRegisters;
    private boolean inDirectCallFunction;
    private boolean itsForcedObjectParameters;
    private int enterAreaStartLabel;
    private int epilogueLabel;
    private short variableObjectLocal;
    private short popvLocal;
    private short contextLocal;
    private short argsLocal;
    private short thisObjLocal;
    private short funObjLocal;
    private short itsZeroArgArray;
    private short itsOneArgArray;
    private short scriptRegexpLocal;

    void <init>()
    {
        org.mozilla.javascript.optimizer.BodyCodegen r0;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void generateBodyCode()
    {
        short $s0, $s2;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r11;
        int $i1, $i3;
        org.mozilla.javascript.ScriptOrFnNode $r1, $r5, $r10;
        java.lang.String $r4, $r7;
        org.mozilla.javascript.optimizer.Codegen $r2, $r6;
        org.mozilla.javascript.optimizer.OptFunctionNode $r8;
        org.mozilla.classfile.ClassFileWriter $r3, $r9;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void initBodyGeneration()>();

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $r4 = virtualinvoke $r2.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getBodyMethodName(org.mozilla.javascript.ScriptOrFnNode)>($r1);

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $r7 = virtualinvoke $r6.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getBodyMethodSignature(org.mozilla.javascript.ScriptOrFnNode)>($r5);

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>($r4, $r7, 10);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generatePrologue()>();

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        if $r8 == null goto label1;

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        r11 = virtualinvoke $r10.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.Node getLastChild()>();

        goto label2;

     label1:
        r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

     label2:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateStatement(org.mozilla.javascript.Node)>(r11);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateEpilogue()>();

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short localsMax>;

        $i3 = (int) $s0;

        $i1 = $i3 + 1;

        $s2 = (short) $i1;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>($s2);

        return;
    }

    private void initBodyGeneration()
    {
        short $s3, $s5, $s7, $s9, $s11;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int $i0, $i1, $i13, $i15;
        org.mozilla.javascript.ScriptOrFnNode $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.mozilla.javascript.optimizer.Codegen $r1;
        org.mozilla.javascript.optimizer.OptFunctionNode $r7, $r8, $r10, $r13;
        org.mozilla.javascript.ScriptOrFnNode[] $r2;
        boolean[] $r14;
        org.mozilla.javascript.FunctionNode $r9, $r11;
        short[] $r12;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r2 = $r1.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $r3 = $r2[0];

        if $r4 != $r3 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean isTopLevel> = $z3;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters> = null;

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $i0 = virtualinvoke $r5.<org.mozilla.javascript.ScriptOrFnNode: int getType()>();

        if $i0 != 105 goto label6;

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $r7 = staticinvoke <org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode)>($r6);

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent> = $r7;

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $r9 = $r8.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $z0 = virtualinvoke $r9.<org.mozilla.javascript.FunctionNode: boolean requiresActivation()>();

        if $z0 != 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs> = $z4;

        $z1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs>;

        if $z1 == 0 goto label5;

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $r11 = $r10.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i1 = virtualinvoke $r11.<org.mozilla.javascript.FunctionNode: int getParamAndVarCount()>();

        if $i1 == 0 goto label5;

        $r12 = newarray (short)[$i1];

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters> = $r12;

     label5:
        $r13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $z5 = virtualinvoke $r13.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isTargetOfDirectCall()>();

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean inDirectCallFunction> = $z5;

        $z6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean inDirectCallFunction>;

        if $z6 == 0 goto label7;

        $z2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs>;

        if $z2 != 0 goto label7;

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        goto label7;

     label6:
        r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent> = null;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs> = 0;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean inDirectCallFunction> = 0;

     label7:
        $r14 = newarray (boolean)[256];

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean[] locals> = $r14;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short funObjLocal> = 0;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal> = 1;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal> = 2;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short thisObjLocal> = 3;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short localsMax> = 4;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal> = 4;

        $s3 = (short) -1;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short popvLocal> = $s3;

        $s5 = (short) -1;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short argsLocal> = $s5;

        $s7 = (short) -1;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short itsZeroArgArray> = $s7;

        $s9 = (short) -1;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short itsOneArgArray> = $s9;

        $s11 = (short) -1;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short scriptRegexpLocal> = $s11;

        $i13 = (int) -1;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: int epilogueLabel> = $i13;

        $i15 = (int) -1;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: int enterAreaStartLabel> = $i15;

        return;
    }

    private void generatePrologue()
    {
        org.mozilla.javascript.ScriptOrFnNode $r10, $r22, $r26, $r35, $r65, $r66, $r76;
        short $s0, $s1, $s2, $s3, $s8, $s9, $s10, $s11, $s12, $s13, $s15, $s17, $s19, $s20, $s21, $s22, $s23, $s24, $s26, $s28, $s29, $s30, $s31, $s33, $s34, $s36, $s37, $s38, $s39, $s40, $s41, $s43, $s46, $s47, $s49, s52, $s53, $s55, $s56, s59, s61;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.FunctionNode $r28, $r41, $r75, $r90, $r92;
        int $i4, $i5, $i6, $i7, $i14, $i16, $i18, $i25, $i27, $i32, $i35, $i42, $i44, $i45, $i48, i50, i51, $i54, $i57, $i58, i60, i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i96, $i97, $i98;
        java.lang.String $r42, r44, $r93, r94;
        org.mozilla.javascript.optimizer.OptFunctionNode $r1, $r12, $r13, $r14, $r27, $r36, $r40, $r43, $r74, $r77, $r87, $r88, $r89, $r91;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        org.mozilla.javascript.optimizer.Codegen $r68;
        org.mozilla.classfile.ClassFileWriter $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r29, $r30, $r31, $r32, $r33, $r34, $r37, $r38, $r45, $r46, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r67, $r69, $r71, $r72, $r73, $r79, $r80, $r81, $r82, $r83, $r84, $r85;
        short[] $r47, $r48, $r78, $r86;
        org.mozilla.javascript.CompilerEnvirons $r11, $r39, $r70;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        $z0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean inDirectCallFunction>;

        if $z0 == 0 goto label05;

        $r76 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $i42 = virtualinvoke $r76.<org.mozilla.javascript.ScriptOrFnNode: int getParamCount()>();

        $s43 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $i63 = (int) $s43;

        if $i63 == 4 goto label01;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label01:
        i50 = 0;

     label02:
        if i50 == $i42 goto label03;

        $r86 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        $s46 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $r86[i50] = $s46;

        $s47 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $i64 = (int) $s47;

        $i48 = $i64 + 3;

        $s49 = (short) $i48;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal> = $s49;

        i50 = i50 + 1;

        goto label02;

     label03:
        $r77 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $z12 = virtualinvoke $r77.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean getParameterNumberContext()>();

        if $z12 != 0 goto label05;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean itsForcedObjectParameters> = 1;

        i51 = 0;

     label04:
        if i51 == $i42 goto label05;

        $r78 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        s52 = $r78[i51];

        $r79 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i65 = (int) s52;

        virtualinvoke $r79.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i65);

        $r80 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r80.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Void", "TYPE", "Ljava/lang/Class;");

        $r81 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i44 = virtualinvoke $r81.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r82 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r82.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(166, $i44);

        $r83 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i66 = (int) s52;

        $i45 = $i66 + 1;

        virtualinvoke $r83.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i45);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

        $r84 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i67 = (int) s52;

        virtualinvoke $r84.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i67);

        $r85 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r85.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i44);

        i51 = i51 + 1;

        goto label04;

     label05:
        $r87 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        if $r87 == null goto label07;

        $z9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean inDirectCallFunction>;

        if $z9 != 0 goto label07;

        $r70 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $z10 = virtualinvoke $r70.<org.mozilla.javascript.CompilerEnvirons: boolean isUseDynamicScope()>();

        if $z10 == 0 goto label06;

        $r74 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $r75 = $r74.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $z11 = virtualinvoke $r75.<org.mozilla.javascript.FunctionNode: boolean getIgnoreDynamicScope()>();

        if $z11 == 0 goto label07;

     label06:
        $r71 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s40 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short funObjLocal>;

        $i68 = (int) $s40;

        virtualinvoke $r71.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i68);

        $r72 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r72.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(185, "org/mozilla/javascript/Scriptable", "getParentScope", "()Lorg/mozilla/javascript/Scriptable;");

        $r73 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s41 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i69 = (int) $s41;

        virtualinvoke $r73.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i69);

     label07:
        $s53 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $i70 = (int) $s53;

        $i54 = $i70 + 1;

        $s55 = (short) $i54;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal> = $s55;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short argsLocal> = $s53;

        $s56 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short localsMax> = $s56;

        $r88 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        if $r88 != null goto label08;

        $r65 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $i35 = virtualinvoke $r65.<org.mozilla.javascript.ScriptOrFnNode: int getRegexpCount()>();

        if $i35 == 0 goto label08;

        $s36 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short scriptRegexpLocal> = $s36;

        $r68 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r67 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r66 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $s38 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $s37 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i71 = (int) $s38;

        $i72 = (int) $s37;

        virtualinvoke $r68.<org.mozilla.javascript.optimizer.Codegen: void pushRegExpArray(org.mozilla.classfile.ClassFileWriter,org.mozilla.javascript.ScriptOrFnNode,int,int)>($r67, $r66, $i71, $i72);

        $r69 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s39 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short scriptRegexpLocal>;

        $i73 = (int) $s39;

        virtualinvoke $r69.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i73);

     label08:
        $z13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs>;

        if $z13 == 0 goto label22;

        $r35 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $i25 = virtualinvoke $r35.<org.mozilla.javascript.ScriptOrFnNode: int getParamCount()>();

        if $i25 <= 0 goto label09;

        $z8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean inDirectCallFunction>;

        if $z8 != 0 goto label09;

        $r56 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s31 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short argsLocal>;

        $i74 = (int) $s31;

        virtualinvoke $r56.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i74);

        $r57 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r57.<org.mozilla.classfile.ClassFileWriter: void add(int)>(190);

        $r58 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r58.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i25);

        $r59 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i32 = virtualinvoke $r59.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r60 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r60.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(162, $i32);

        $r61 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s33 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short argsLocal>;

        $i75 = (int) $s33;

        virtualinvoke $r61.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i75);

        $r62 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r62.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i25);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("padArguments", "([Ljava/lang/Object;I)[Ljava/lang/Object;");

        $r63 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s34 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short argsLocal>;

        $i76 = (int) $s34;

        virtualinvoke $r63.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i76);

        $r64 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r64.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i32);

     label09:
        $r89 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $r90 = $r89.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i57 = virtualinvoke $r90.<org.mozilla.javascript.FunctionNode: int getParamCount()>();

        $r91 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $r92 = $r91.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i58 = virtualinvoke $r92.<org.mozilla.javascript.FunctionNode: int getParamAndVarCount()>();

        s59 = -1;

        i60 = 0;

     label10:
        if i60 == $i58 goto label21;

        s61 = -1;

        if i60 >= $i57 goto label11;

        $z7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean inDirectCallFunction>;

        if $z7 != 0 goto label15;

        $s29 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        s61 = $s29;

        $r52 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s30 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short argsLocal>;

        $i77 = (int) $s30;

        virtualinvoke $r52.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i77);

        $r53 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r53.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i60);

        $r54 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r54.<org.mozilla.classfile.ClassFileWriter: void add(int)>(50);

        $r55 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i78 = (int) $s29;

        virtualinvoke $r55.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i78);

        goto label15;

     label11:
        $r36 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $z4 = virtualinvoke $r36.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isNumberVar(int)>(i60);

        if $z4 == 0 goto label12;

        $s28 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordPairLocal()>();

        s61 = $s28;

        $r50 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r50.<org.mozilla.classfile.ClassFileWriter: void addPush(double)>(0.0);

        $r51 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i79 = (int) $s28;

        virtualinvoke $r51.<org.mozilla.classfile.ClassFileWriter: void addDStore(int)>($i79);

        goto label15;

     label12:
        $s26 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        s61 = $s26;

        $i81 = (int) -1;

        if s59 != $i81 goto label13;

        $r49 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void pushUndefined(org.mozilla.classfile.ClassFileWriter)>($r49);

        s59 = $s26;

        goto label14;

     label13:
        $r37 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r37.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(s59);

     label14:
        $r38 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i82 = (int) $s26;

        virtualinvoke $r38.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i82);

     label15:
        if s61 < 0 goto label16;

        $r48 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        $r48[i60] = s61;

     label16:
        $r39 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $z5 = virtualinvoke $r39.<org.mozilla.javascript.CompilerEnvirons: boolean isGenerateDebugInfo()>();

        if $z5 == 0 goto label20;

        $r40 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $r41 = $r40.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $r42 = virtualinvoke $r41.<org.mozilla.javascript.FunctionNode: java.lang.String getParamOrVarName(int)>(i60);

        $r43 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $z6 = virtualinvoke $r43.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isNumberVar(int)>(i60);

        if $z6 == 0 goto label17;

        $r93 = "D";

        goto label18;

     label17:
        $r93 = "Ljava/lang/Object;";

     label18:
        r44 = $r93;

        $r45 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i27 = virtualinvoke $r45.<org.mozilla.classfile.ClassFileWriter: int getCurrentCodeOffset()>();

        if s61 >= 0 goto label19;

        $r47 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        s61 = $r47[i60];

     label19:
        $r46 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r46.<org.mozilla.classfile.ClassFileWriter: void addVariableDescriptor(java.lang.String,java.lang.String,int,int)>($r42, r44, $i27, s61);

     label20:
        i60 = i60 + 1;

        goto label10;

     label21:
        return;

     label22:
        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        if $r1 == null goto label23;

        r94 = "activation";

        $r29 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s19 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short funObjLocal>;

        $i83 = (int) $s19;

        virtualinvoke $r29.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i83);

        $r30 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s20 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i84 = (int) $s20;

        virtualinvoke $r30.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i84);

        $r31 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s21 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short argsLocal>;

        $i85 = (int) $s21;

        virtualinvoke $r31.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i85);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("createFunctionActivation", "(Lorg/mozilla/javascript/NativeFunction;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;)Lorg/mozilla/javascript/Scriptable;");

        $r32 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s22 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i86 = (int) $s22;

        virtualinvoke $r32.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i86);

        $r33 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s23 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i87 = (int) $s23;

        virtualinvoke $r33.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i87);

        $r34 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s24 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i88 = (int) $s24;

        virtualinvoke $r34.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i88);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("enterActivationFunction", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)V");

        goto label24;

     label23:
        r94 = "global";

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short funObjLocal>;

        $i89 = (int) $s0;

        virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i89);

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short thisObjLocal>;

        $i90 = (int) $s1;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i90);

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i91 = (int) $s2;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i91);

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i92 = (int) $s3;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i92);

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(0);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("initScript", "(Lorg/mozilla/javascript/NativeFunction;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Z)V");

     label24:
        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i4 = virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: int enterAreaStartLabel> = $i4;

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i5 = virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: int epilogueLabel> = $i5;

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int enterAreaStartLabel>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i6);

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $i7 = virtualinvoke $r10.<org.mozilla.javascript.ScriptOrFnNode: int getFunctionCount()>();

        i62 = 0;

     label25:
        if i62 == $i7 goto label27;

        $r26 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $r27 = staticinvoke <org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode,int)>($r26, i62);

        $r28 = $r27.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i18 = virtualinvoke $r28.<org.mozilla.javascript.FunctionNode: int getFunctionType()>();

        if $i18 != 1 goto label26;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void visitFunction(org.mozilla.javascript.optimizer.OptFunctionNode,int)>($r27, 1);

     label26:
        i62 = i62 + 1;

        goto label25;

     label27:
        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $z1 = virtualinvoke $r11.<org.mozilla.javascript.CompilerEnvirons: boolean isGenerateDebugInfo()>();

        if $z1 == 0 goto label28;

        $r25 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r24 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i16 = virtualinvoke $r24.<org.mozilla.classfile.ClassFileWriter: int getCurrentCodeOffset()>();

        $s17 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i93 = (int) $s17;

        virtualinvoke $r25.<org.mozilla.classfile.ClassFileWriter: void addVariableDescriptor(java.lang.String,java.lang.String,int,int)>(r94, "Lorg/mozilla/javascript/Scriptable;", $i16, $i93);

     label28:
        $r12 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        if $r12 != null goto label29;

        $s12 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short popvLocal> = $s12;

        $r20 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void pushUndefined(org.mozilla.classfile.ClassFileWriter)>($r20);

        $r21 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short popvLocal>;

        $i94 = (int) $s13;

        virtualinvoke $r21.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i94);

        $r22 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $i14 = virtualinvoke $r22.<org.mozilla.javascript.ScriptOrFnNode: int getEndLineno()>();

        $i96 = (int) -1;

        if $i14 == $i96 goto label31;

        $r23 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s15 = (short) $i14;

        virtualinvoke $r23.<org.mozilla.classfile.ClassFileWriter: void addLineNumberEntry(short)>($s15);

        goto label31;

     label29:
        $r13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $z2 = $r13.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean itsContainsCalls0>;

        if $z2 == 0 goto label30;

        $s10 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short itsZeroArgArray> = $s10;

        $r18 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r18.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "org/mozilla/javascript/ScriptRuntime", "emptyArgs", "[Ljava/lang/Object;");

        $r19 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short itsZeroArgArray>;

        $i97 = (int) $s11;

        virtualinvoke $r19.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i97);

     label30:
        $r14 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $z3 = $r14.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean itsContainsCalls1>;

        if $z3 == 0 goto label31;

        $s8 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short itsOneArgArray> = $s8;

        $r15 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r15.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(1);

        $r16 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r16.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String)>(189, "java/lang/Object");

        $r17 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short itsOneArgArray>;

        $i98 = (int) $s9;

        virtualinvoke $r17.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i98);

     label31:
        return;
    }

    private void generateEpilogue()
    {
        short $s2, $s5;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i9, $i10, $i11, $i12;
        boolean $z0;
        org.mozilla.javascript.optimizer.OptFunctionNode $r2;
        org.mozilla.classfile.ClassFileWriter $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        $z0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs>;

        if $z0 == 0 goto label2;

        $i6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int epilogueLabel>;

        $i9 = (int) -1;

        if $i6 == $i9 goto label1;

        $r13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int epilogueLabel>;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i7);

     label1:
        $r12 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        return;

     label2:
        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int epilogueLabel>;

        virtualinvoke $r1.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i0);

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        if $r2 != null goto label3;

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short popvLocal>;

        $i10 = (int) $s5;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i10);

        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        goto label4;

     label3:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateActivationExit()>();

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i1 = virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void markHandler(int)>($i1);

        $s2 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i11 = (int) $s2;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i11);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateActivationExit()>();

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i12 = (int) $s2;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i12);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void releaseWordLocal(short)>($s2);

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int)>(191);

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int enterAreaStartLabel>;

        $i3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int epilogueLabel>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void addExceptionHandler(int,int,int,java.lang.String)>($i4, $i3, $i1, null);

     label4:
        return;
    }

    private void generateActivationExit()
    {
        short $s0;
        org.mozilla.javascript.optimizer.OptFunctionNode $r1;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int $i1;
        java.lang.RuntimeException $r2;
        org.mozilla.classfile.ClassFileWriter $r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        if $r1 == null goto label1;

        $z0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs>;

        if $z0 == 0 goto label2;

     label1:
        $r2 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r2;

     label2:
        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i1 = (int) $s0;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i1);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("exitActivationFunction", "(Lorg/mozilla/javascript/Context;)V");

        return;
    }

    private void generateStatement(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r1, $r2, $r6, $r20, r51;
        org.mozilla.javascript.ScriptOrFnNode $r11, $r32;
        short $s1, $s2, $s3, $s4, $s5, $s9, $s10, $s13, $s17, $s18, $s21, $s22, $s25, $s26, $s27, $s28, $s29;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        java.lang.String $r19, $r34;
        org.mozilla.javascript.optimizer.OptFunctionNode $r12;
        java.lang.RuntimeException $r14, $r42, $r43, $r50;
        org.mozilla.javascript.FunctionNode $r13;
        org.mozilla.javascript.Node$Jump $r10, $r15, $r38;
        boolean $z0, $z1;
        org.mozilla.classfile.ClassFileWriter $r3, $r4, $r5, $r7, $r8, $r9, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r35, $r36, $r37, $r39, $r40, $r41, $r44, $r45, $r46, $r47, $r48, $r49;
        int $i0, $i6, $i7, $i8, $i11, $i12, $i14, $i15, $i16, $i19, $i20, $i23, $i24, $i30, $i31, $i32, $i33, $i34, $i35, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i45, $i47, $i48, $i49, $i50, $i51;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: org.mozilla.javascript.Node;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void updateLineNumber(org.mozilla.javascript.Node)>(r1);

        $i0 = virtualinvoke r1.<org.mozilla.javascript.Node: int getType()>();

        $r2 = virtualinvoke r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        r51 = $r2;

        lookupswitch($i0)
        {
            case 2: goto label21;
            case 3: goto label22;
            case 4: goto label13;
            case 5: goto label32;
            case 6: goto label32;
            case 7: goto label32;
            case 49: goto label11;
            case 50: goto label12;
            case 56: goto label08;
            case 57: goto label23;
            case 58: goto label23;
            case 62: goto label13;
            case 77: goto label07;
            case 105: goto label05;
            case 110: goto label20;
            case 119: goto label01;
            case 121: goto label33;
            case 124: goto label01;
            case 125: goto label01;
            case 126: goto label01;
            case 127: goto label31;
            case 128: goto label01;
            case 129: goto label26;
            case 130: goto label29;
            case 131: goto label32;
            case 132: goto label01;
            case 137: goto label02;
            default: goto label36;
        };

     label01:
        if r51 == null goto label37;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateStatement(org.mozilla.javascript.Node)>(r51);

        r51 = virtualinvoke r51.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label01;

     label02:
        $s1 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        $i31 = (int) $s1;

        virtualinvoke r1.<org.mozilla.javascript.Node: void putIntProp(int,int)>(2, $i31);

     label03:
        if r51 == null goto label04;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateStatement(org.mozilla.javascript.Node)>(r51);

        r51 = virtualinvoke r51.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label03;

     label04:
        $s2 = (short) $s1;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void releaseWordLocal(short)>($s2);

        virtualinvoke r1.<org.mozilla.javascript.Node: void removeProp(int)>(2);

        goto label37;

     label05:
        $i11 = virtualinvoke r1.<org.mozilla.javascript.Node: int getExistingIntProp(int)>(1);

        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $r12 = staticinvoke <org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode,int)>($r11, $i11);

        $r13 = $r12.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i12 = virtualinvoke $r13.<org.mozilla.javascript.FunctionNode: int getFunctionType()>();

        if $i12 != 3 goto label06;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void visitFunction(org.mozilla.javascript.optimizer.OptFunctionNode,int)>($r12, $i12);

        goto label37;

     label06:
        if $i12 == 1 goto label37;

        $r14 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r14;

     label07:
        $r15 = (org.mozilla.javascript.Node$Jump) r1;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void visitTryCatchFinally(org.mozilla.javascript.Node$Jump,org.mozilla.javascript.Node)>($r15, $r2);

        goto label37;

     label08:
        $i15 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: int getLocalBlockRegister(org.mozilla.javascript.Node)>(r1);

        $i16 = virtualinvoke r1.<org.mozilla.javascript.Node: int getExistingIntProp(int)>(14);

        $r19 = virtualinvoke $r2.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $r20 = virtualinvoke $r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r20, r1);

        if $i16 != 0 goto label09;

        $r26 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r26.<org.mozilla.classfile.ClassFileWriter: void add(int)>(1);

        goto label10;

     label09:
        $r21 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r21.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i15);

     label10:
        $r22 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r22.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r19);

        $r23 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s17 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i32 = (int) $s17;

        virtualinvoke $r23.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i32);

        $r24 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s18 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i33 = (int) $s18;

        virtualinvoke $r24.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i33);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("newCatchScope", "(Ljava/lang/Throwable;Lorg/mozilla/javascript/Scriptable;Ljava/lang/String;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Lorg/mozilla/javascript/Scriptable;");

        $r25 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r25.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i15);

        goto label37;

     label11:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r1);

        $r29 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r29.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String)>(187, "org/mozilla/javascript/JavaScriptException");

        $r30 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r30.<org.mozilla.classfile.ClassFileWriter: void add(int)>(90);

        $r31 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r31.<org.mozilla.classfile.ClassFileWriter: void add(int)>(95);

        $r33 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r32 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $r34 = virtualinvoke $r32.<org.mozilla.javascript.ScriptOrFnNode: java.lang.String getSourceName()>();

        virtualinvoke $r33.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r34);

        $r35 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i20 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int itsLineNumber>;

        virtualinvoke $r35.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i20);

        $r36 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r36.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(183, "org/mozilla/javascript/JavaScriptException", "<init>", "(Ljava/lang/Object;Ljava/lang/String;I)V");

        $r37 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r37.<org.mozilla.classfile.ClassFileWriter: void add(int)>(191);

        goto label37;

     label12:
        $r27 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i19 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: int getLocalBlockRegister(org.mozilla.javascript.Node)>(r1);

        virtualinvoke $r27.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i19);

        $r28 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r28.<org.mozilla.classfile.ClassFileWriter: void add(int)>(191);

        goto label37;

     label13:
        if $r2 == null goto label14;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r1);

        goto label17;

     label14:
        if $i0 != 4 goto label15;

        $r44 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void pushUndefined(org.mozilla.classfile.ClassFileWriter)>($r44);

        goto label17;

     label15:
        $s21 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short popvLocal>;

        $i34 = (int) $s21;

        if $i34 >= 0 goto label16;

        $r43 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r43;

     label16:
        $r39 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s22 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short popvLocal>;

        $i35 = (int) $s22;

        virtualinvoke $r39.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i35);

     label17:
        $i30 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int epilogueLabel>;

        $i37 = (int) -1;

        if $i30 != $i37 goto label19;

        $z0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs>;

        if $z0 != 0 goto label18;

        $r42 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r42;

     label18:
        $r41 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i24 = virtualinvoke $r41.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: int epilogueLabel> = $i24;

     label19:
        $r40 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i23 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int epilogueLabel>;

        virtualinvoke $r40.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i23);

        goto label37;

     label20:
        $r10 = (org.mozilla.javascript.Node$Jump) r1;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void visitSwitch(org.mozilla.javascript.Node$Jump,org.mozilla.javascript.Node)>($r10, $r2);

        goto label37;

     label21:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r1);

        $r47 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s27 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i38 = (int) $s27;

        virtualinvoke $r47.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i38);

        $r48 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s28 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i39 = (int) $s28;

        virtualinvoke $r48.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i39);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("enterWith", "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Lorg/mozilla/javascript/Scriptable;");

        $r49 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s29 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i40 = (int) $s29;

        virtualinvoke $r49.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i40);

        goto label37;

     label22:
        $r45 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s25 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i41 = (int) $s25;

        virtualinvoke $r45.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i41);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("leaveWith", "(Lorg/mozilla/javascript/Scriptable;)Lorg/mozilla/javascript/Scriptable;");

        $r46 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s26 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i42 = (int) $s26;

        virtualinvoke $r46.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i42);

        goto label37;

     label23:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r1);

        $r16 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i43 = (int) $s13;

        virtualinvoke $r16.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i43);

        $r17 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        if $i0 != 58 goto label24;

        $z1 = 1;

        goto label25;

     label24:
        $z1 = 0;

     label25:
        virtualinvoke $r17.<org.mozilla.classfile.ClassFileWriter: void addPush(boolean)>($z1);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("enumInit", "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;Z)Ljava/lang/Object;");

        $r18 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i14 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: int getLocalBlockRegister(org.mozilla.javascript.Node)>(r1);

        virtualinvoke $r18.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i14);

        goto label37;

     label26:
        $i6 = virtualinvoke $r2.<org.mozilla.javascript.Node: int getType()>();

        if $i6 != 55 goto label27;

        $r6 = virtualinvoke $r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void visitSetVar(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean)>($r2, $r6, 0);

        goto label37;

     label27:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r1);

        $i45 = (int) -1;

        $i7 = virtualinvoke r1.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i45);

        $i47 = (int) -1;

        if $i7 == $i47 goto label28;

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void add(int)>(88);

        goto label37;

     label28:
        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void add(int)>(87);

        goto label37;

     label29:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r1);

        $s3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short popvLocal>;

        $i48 = (int) $s3;

        if $i48 >= 0 goto label30;

        $s5 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short popvLocal> = $s5;

     label30:
        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short popvLocal>;

        $i49 = (int) $s4;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i49);

        goto label37;

     label31:
        $i8 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: int getTargetLabel(org.mozilla.javascript.Node)>(r1);

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i8);

        goto label37;

     label32:
        $r38 = (org.mozilla.javascript.Node$Jump) r1;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void visitGOTO(org.mozilla.javascript.Node$Jump,int,org.mozilla.javascript.Node)>($r38, $i0, $r2);

        goto label37;

     label33:
        $s9 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i50 = (int) $s9;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i50);

     label34:
        if r51 == null goto label35;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateStatement(org.mozilla.javascript.Node)>(r51);

        r51 = virtualinvoke r51.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label34;

     label35:
        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i51 = (int) $s9;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(169, $i51);

        $s10 = (short) $s9;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void releaseWordLocal(short)>($s10);

        goto label37;

     label36:
        $r50 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r50;

     label37:
        return;
    }

    private void generateExpression(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        byte $b47;
        org.mozilla.javascript.ScriptOrFnNode $r6;
        short $s7, $s10, $s11, $s12, $s13, $s14, $s15, $s16, $s17, $s18, $s19, $s20, $s21, $s23, $s25, $s26, $s28, $s29, $s30, $s32, $s33, $s34, $s36, $s42;
        org.mozilla.javascript.optimizer.BodyCodegen r2;
        java.lang.StringBuffer $r104, $r105, $r114;
        org.mozilla.javascript.FunctionNode $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i22, $i24, $i27, $i31, $i35, $i37, $i38, $i39, $i40, $i41, $i43, $i44, $i45, $i46, i48, $i49, $i50, $i51, $i53, $i55, $i56, $i57, $i58, $i59, $i61, $i63, $i65, $i66, $i68, $i70, $i72, $i73, $i75, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91;
        java.lang.Object $r36, $r80;
        org.mozilla.javascript.Node r0, $r1, r10, $r15, $r18, $r19, $r28, $r39, $r42, $r76, $r78, $r95, r107, r109;
        java.lang.String $r54, $r58, $r68, $r75, $r106, r110, r111, r112;
        org.mozilla.javascript.optimizer.OptFunctionNode $r5, $r7, $r55, r108;
        java.lang.RuntimeException $r9, $r32, $r115;
        org.mozilla.javascript.optimizer.Codegen $r57, $r70;
        org.mozilla.classfile.ClassFileWriter $r3, $r4, $r11, $r12, $r13, $r14, $r16, $r17, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r33, $r34, $r35, $r37, $r38, $r40, $r41, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r56, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r69, $r71, $r72, $r73, $r74, $r77, $r79, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r96, $r97, $r98, $r99, $r100, $r101, $r113;
        double $d0;

        r2 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r10 := @parameter1: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        r107 = $r1;

        tableswitch($i0)
        {
            case 8: goto label64;
            case 9: goto label49;
            case 10: goto label49;
            case 11: goto label49;
            case 12: goto label57;
            case 13: goto label57;
            case 14: goto label56;
            case 15: goto label56;
            case 16: goto label56;
            case 17: goto label56;
            case 18: goto label49;
            case 19: goto label49;
            case 20: goto label49;
            case 21: goto label39;
            case 22: goto label45;
            case 23: goto label44;
            case 24: goto label46;
            case 25: goto label46;
            case 26: goto label29;
            case 27: goto label30;
            case 28: goto label50;
            case 29: goto label50;
            case 30: goto label06;
            case 31: goto label70;
            case 32: goto label32;
            case 33: goto label58;
            case 34: goto label65;
            case 35: goto label59;
            case 36: goto label66;
            case 37: goto label06;
            case 38: goto label05;
            case 39: goto label11;
            case 40: goto label13;
            case 41: goto label16;
            case 42: goto label14;
            case 43: goto label18;
            case 44: goto label17;
            case 45: goto label57;
            case 46: goto label57;
            case 47: goto label19;
            case 48: goto label71;
            case 49: goto label87;
            case 50: goto label87;
            case 51: goto label56;
            case 52: goto label56;
            case 53: goto label73;
            case 54: goto label62;
            case 55: goto label63;
            case 56: goto label87;
            case 57: goto label87;
            case 58: goto label87;
            case 59: goto label25;
            case 60: goto label25;
            case 61: goto label15;
            case 62: goto label87;
            case 63: goto label27;
            case 64: goto label28;
            case 65: goto label61;
            case 66: goto label67;
            case 67: goto label69;
            case 68: goto label10;
            case 69: goto label74;
            case 70: goto label86;
            case 71: goto label84;
            case 72: goto label85;
            case 73: goto label75;
            case 74: goto label75;
            case 75: goto label75;
            case 76: goto label75;
            case 77: goto label87;
            case 78: goto label87;
            case 79: goto label87;
            case 80: goto label87;
            case 81: goto label87;
            case 82: goto label87;
            case 83: goto label87;
            case 84: goto label87;
            case 85: goto label22;
            case 86: goto label87;
            case 87: goto label87;
            case 88: goto label87;
            case 89: goto label87;
            case 90: goto label87;
            case 91: goto label87;
            case 92: goto label87;
            case 93: goto label87;
            case 94: goto label87;
            case 95: goto label87;
            case 96: goto label87;
            case 97: goto label87;
            case 98: goto label38;
            case 99: goto label87;
            case 100: goto label35;
            case 101: goto label35;
            case 102: goto label34;
            case 103: goto label34;
            case 104: goto label87;
            case 105: goto label02;
            case 106: goto label87;
            case 107: goto label87;
            case 108: goto label87;
            case 109: goto label87;
            case 110: goto label87;
            case 111: goto label87;
            case 112: goto label87;
            case 113: goto label87;
            case 114: goto label87;
            case 115: goto label87;
            case 116: goto label87;
            case 117: goto label87;
            case 118: goto label87;
            case 119: goto label87;
            case 120: goto label87;
            case 121: goto label87;
            case 122: goto label31;
            case 123: goto label87;
            case 124: goto label87;
            case 125: goto label87;
            case 126: goto label87;
            case 127: goto label87;
            case 128: goto label87;
            case 129: goto label87;
            case 130: goto label87;
            case 131: goto label87;
            case 132: goto label87;
            case 133: goto label33;
            case 134: goto label01;
            case 135: goto label65;
            case 136: goto label66;
            case 137: goto label87;
            case 138: goto label67;
            case 139: goto label87;
            case 140: goto label87;
            case 141: goto label87;
            case 142: goto label83;
            case 143: goto label87;
            case 144: goto label87;
            case 145: goto label53;
            case 146: goto label52;
            default: goto label87;
        };

     label01:
        goto label88;

     label02:
        $r5 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        if $r5 != null goto label03;

        $i4 = virtualinvoke r10.<org.mozilla.javascript.Node: int getType()>();

        if $i4 == 132 goto label88;

     label03:
        $i2 = virtualinvoke r0.<org.mozilla.javascript.Node: int getExistingIntProp(int)>(1);

        $r6 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $r7 = staticinvoke <org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode,int)>($r6, $i2);

        $r8 = $r7.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i3 = virtualinvoke $r8.<org.mozilla.javascript.FunctionNode: int getFunctionType()>();

        if $i3 == 2 goto label04;

        $r9 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r9;

     label04:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitFunction(org.mozilla.javascript.optimizer.OptFunctionNode,int)>($r7, $i3);

        goto label88;

     label05:
        $r72 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s32 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i49 = (int) $s32;

        virtualinvoke $r72.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i49);

        $r73 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s33 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i50 = (int) $s33;

        virtualinvoke $r73.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i50);

        $r74 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r75 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.String getString()>();

        virtualinvoke $r74.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r75);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("name", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Ljava/lang/String;)Ljava/lang/Object;");

        goto label88;

     label06:
        $i37 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(10, 0);

        if $i37 != 0 goto label09;

        $r80 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.Object getProp(int)>(9);

        r108 = (org.mozilla.javascript.optimizer.OptFunctionNode) $r80;

        if r108 == null goto label07;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitOptimizedCall(org.mozilla.javascript.Node,org.mozilla.javascript.optimizer.OptFunctionNode,int,org.mozilla.javascript.Node)>(r0, r108, $i0, $r1);

        goto label88;

     label07:
        if $i0 != 37 goto label08;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitStandardCall(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $r1);

        goto label88;

     label08:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitStandardNew(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $r1);

        goto label88;

     label09:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitSpecialCall(org.mozilla.javascript.Node,int,int,org.mozilla.javascript.Node)>(r0, $i0, $i37, $r1);

        goto label88;

     label10:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateFunctionAndThisObj(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r39 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateCallArgArray(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean)>(r0, $r39, 0);

        $r40 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s17 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i51 = (int) $s17;

        virtualinvoke $r40.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i51);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("callRef", "(Lorg/mozilla/javascript/Callable;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Lorg/mozilla/javascript/Ref;");

        goto label88;

     label11:
        $d0 = virtualinvoke r0.<org.mozilla.javascript.Node: double getDouble()>();

        $i53 = (int) -1;

        $i31 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i53);

        $i55 = (int) -1;

        if $i31 == $i55 goto label12;

        $r71 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r71.<org.mozilla.classfile.ClassFileWriter: void addPush(double)>($d0);

        goto label88;

     label12:
        $r70 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r69 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r70.<org.mozilla.javascript.optimizer.Codegen: void pushNumberAsObject(org.mozilla.classfile.ClassFileWriter,double)>($r69, $d0);

        goto label88;

     label13:
        $r67 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r68 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.String getString()>();

        virtualinvoke $r67.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r68);

        goto label88;

     label14:
        $r65 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s30 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short thisObjLocal>;

        $i56 = (int) $s30;

        virtualinvoke $r65.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i56);

        goto label88;

     label15:
        $r47 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r47.<org.mozilla.classfile.ClassFileWriter: void add(int)>(42);

        goto label88;

     label16:
        $r66 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r66.<org.mozilla.classfile.ClassFileWriter: void add(int)>(1);

        goto label88;

     label17:
        $r63 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r63.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Boolean", "TRUE", "Ljava/lang/Boolean;");

        goto label88;

     label18:
        $r64 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r64.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Boolean", "FALSE", "Ljava/lang/Boolean;");

        goto label88;

     label19:
        $i27 = virtualinvoke r0.<org.mozilla.javascript.Node: int getExistingIntProp(int)>(4);

        $r55 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        if $r55 != null goto label20;

        $r62 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s29 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short scriptRegexpLocal>;

        $i57 = (int) $s29;

        virtualinvoke $r62.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i57);

        goto label21;

     label20:
        $r56 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s28 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short funObjLocal>;

        $i58 = (int) $s28;

        virtualinvoke $r56.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i58);

        $r59 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r57 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r58 = $r57.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        virtualinvoke $r59.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r58, "_re", "[Ljava/lang/Object;");

     label21:
        $r60 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r60.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i27);

        $r61 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r61.<org.mozilla.classfile.ClassFileWriter: void add(int)>(50);

        goto label88;

     label22:
        r109 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

     label23:
        if r109 == null goto label24;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r107, r0);

        $r27 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r27.<org.mozilla.classfile.ClassFileWriter: void add(int)>(87);

        r107 = r109;

        r109 = virtualinvoke r109.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label23;

     label24:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r107, r0);

        goto label88;

     label25:
        $i22 = specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: int getLocalBlockRegister(org.mozilla.javascript.Node)>(r0);

        $r48 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r48.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i22);

        if $i0 != 59 goto label26;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("enumNext", "(Ljava/lang/Object;)Ljava/lang/Boolean;");

        goto label88;

     label26:
        $r49 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s23 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i59 = (int) $s23;

        virtualinvoke $r49.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i59);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("enumId", "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label88;

     label27:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitArrayLiteral(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $r1);

        goto label88;

     label28:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitObjectLiteral(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $r1);

        goto label88;

     label29:
        $r85 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i38 = virtualinvoke $r85.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r86 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i39 = virtualinvoke $r86.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r87 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i40 = virtualinvoke $r87.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateIfJump(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>($r1, r0, $i38, $i39);

        $r88 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r88.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i38);

        $r89 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r89.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Boolean", "FALSE", "Ljava/lang/Boolean;");

        $r90 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r90.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i40);

        $r91 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r91.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i39);

        $r92 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r92.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Boolean", "TRUE", "Ljava/lang/Boolean;");

        $r93 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r93.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i40);

        $r94 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i61 = (int) -1;

        virtualinvoke $r94.<org.mozilla.classfile.ClassFileWriter: void adjustStackTop(int)>($i61);

        goto label88;

     label30:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toInt32", "(Ljava/lang/Object;)I");

        $r82 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i63 = (int) -1;

        virtualinvoke $r82.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i63);

        $r83 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r83.<org.mozilla.classfile.ClassFileWriter: void add(int)>(130);

        $r84 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r84.<org.mozilla.classfile.ClassFileWriter: void add(int)>(135);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

        goto label88;

     label31:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r3 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void add(int)>(87);

        $r4 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void pushUndefined(org.mozilla.classfile.ClassFileWriter)>($r4);

        goto label88;

     label32:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("typeof", "(Ljava/lang/Object;)Ljava/lang/String;");

        goto label88;

     label33:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitTypeofname(org.mozilla.javascript.Node)>(r0);

        goto label88;

     label34:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitIncDec(org.mozilla.javascript.Node)>(r0);

        goto label88;

     label35:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r11 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toBoolean", "(Ljava/lang/Object;)Z");

        $r12 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i5 = virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        if $i0 != 101 goto label36;

        $r17 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r17.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(153, $i5);

        goto label37;

     label36:
        $r13 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(154, $i5);

     label37:
        $r14 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void add(int)>(87);

        $r15 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r15, r0);

        $r16 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r16.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i5);

        goto label88;

     label38:
        $r18 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $r19 = virtualinvoke $r18.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toBoolean", "(Ljava/lang/Object;)Z");

        $r20 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i6 = virtualinvoke $r20.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r21 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r21.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(153, $i6);

        $r22 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s7 = virtualinvoke $r22.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r18, r0);

        $r23 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i8 = virtualinvoke $r23.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r24 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r24.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i8);

        $r25 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r25.<org.mozilla.classfile.ClassFileWriter: void markLabel(int,short)>($i6, $s7);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r19, r0);

        $r26 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r26.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i8);

        goto label88;

     label39:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r95 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r95, r0);

        $i65 = (int) -1;

        $i41 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i65);

        tableswitch($i41)
        {
            case 0: goto label40;
            case 1: goto label41;
            case 2: goto label42;
            default: goto label43;
        };

     label40:
        $r96 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r96.<org.mozilla.classfile.ClassFileWriter: void add(int)>(99);

        goto label88;

     label41:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addOptRuntimeInvoke(java.lang.String,java.lang.String)>("add", "(DLjava/lang/Object;)Ljava/lang/Object;");

        goto label88;

     label42:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addOptRuntimeInvoke(java.lang.String,java.lang.String)>("add", "(Ljava/lang/Object;D)Ljava/lang/Object;");

        goto label88;

     label43:
        $r97 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s42 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i66 = (int) $s42;

        virtualinvoke $r97.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i66);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("add", "(Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label88;

     label44:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitArithmetic(org.mozilla.javascript.Node,int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, 107, $r1, r10);

        goto label88;

     label45:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitArithmetic(org.mozilla.javascript.Node,int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, 103, $r1, r10);

        goto label88;

     label46:
        if $i0 != 24 goto label47;

        $b47 = 111;

        goto label48;

     label47:
        $b47 = 115;

     label48:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitArithmetic(org.mozilla.javascript.Node,int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $b47, $r1, r10);

        goto label88;

     label49:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitBitOp(org.mozilla.javascript.Node,int,org.mozilla.javascript.Node)>(r0, $i0, $r1);

        goto label88;

     label50:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addObjectToDouble()>();

        if $i0 != 29 goto label51;

        $r81 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r81.<org.mozilla.classfile.ClassFileWriter: void add(int)>(119);

     label51:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

        goto label88;

     label52:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addObjectToDouble()>();

        goto label88;

     label53:
        $i68 = (int) -1;

        i48 = $i68;

        $i1 = virtualinvoke $r1.<org.mozilla.javascript.Node: int getType()>();

        if $i1 != 39 goto label54;

        $i70 = (int) -1;

        i48 = virtualinvoke $r1.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i70);

     label54:
        $i72 = (int) -1;

        if i48 == $i72 goto label55;

        virtualinvoke $r1.<org.mozilla.javascript.Node: void removeProp(int)>(8);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        virtualinvoke $r1.<org.mozilla.javascript.Node: void putIntProp(int,int)>(8, i48);

        goto label88;

     label55:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

        goto label88;

     label56:
        $r98 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i43 = virtualinvoke $r98.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r99 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i44 = virtualinvoke $r99.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitIfJumpRelOp(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>(r0, $r1, $i43, $i44);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addJumpedBooleanWrap(int,int)>($i43, $i44);

        goto label88;

     label57:
        $r100 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i45 = virtualinvoke $r100.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r101 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i46 = virtualinvoke $r101.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitIfJumpEqOp(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>(r0, $r1, $i45, $i46);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addJumpedBooleanWrap(int,int)>($i45, $i46);

        goto label88;

     label58:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitGetProp(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $r1);

        goto label88;

     label59:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r76 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r76, r0);

        $r77 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s34 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i73 = (int) $s34;

        virtualinvoke $r77.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i73);

        $i75 = (int) -1;

        $i35 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i75);

        $i77 = (int) -1;

        if $i35 == $i77 goto label60;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getObjectIndex", "(Ljava/lang/Object;DLorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label88;

     label60:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getObjectElem", "(Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label88;

     label61:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r46 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s21 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i78 = (int) $s21;

        virtualinvoke $r46.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i78);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("refGet", "(Lorg/mozilla/javascript/Ref;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label88;

     label62:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitGetVar(org.mozilla.javascript.Node)>(r0);

        goto label88;

     label63:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitSetVar(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean)>(r0, $r1, 1);

        goto label88;

     label64:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitSetName(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $r1);

        goto label88;

     label65:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitSetProp(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($i0, r0, $r1);

        goto label88;

     label66:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitSetElem(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($i0, r0, $r1);

        goto label88;

     label67:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r42 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        if $i0 != 138 goto label68;

        $r44 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r44.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r45 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s20 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i79 = (int) $s20;

        virtualinvoke $r45.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i79);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("refGet", "(Lorg/mozilla/javascript/Ref;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

     label68:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r42, r0);

        $r43 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s19 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i80 = (int) $s19;

        virtualinvoke $r43.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i80);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("refSet", "(Lorg/mozilla/javascript/Ref;Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label88;

     label69:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r41 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s18 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i81 = (int) $s18;

        virtualinvoke $r41.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i81);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("refDel", "(Lorg/mozilla/javascript/Ref;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label88;

     label70:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r78 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r78, r0);

        $r79 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s36 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i82 = (int) $s36;

        virtualinvoke $r79.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i82);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("delete", "(Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label88;

     label71:
        if r107 == null goto label72;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r107, r0);

        r107 = virtualinvoke r107.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label71;

     label72:
        $r51 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s25 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i83 = (int) $s25;

        virtualinvoke $r51.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i83);

        $r52 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s26 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i84 = (int) $s26;

        virtualinvoke $r52.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i84);

        $r53 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r54 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.String getString()>();

        virtualinvoke $r53.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r54);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("bind", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Ljava/lang/String;)Lorg/mozilla/javascript/Scriptable;");

        goto label88;

     label73:
        $r50 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i24 = specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: int getLocalBlockRegister(org.mozilla.javascript.Node)>(r0);

        virtualinvoke $r50.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i24);

        goto label88;

     label74:
        $r36 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.Object getProp(int)>(17);

        r110 = (java.lang.String) $r36;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r37 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r37.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>(r110);

        $r38 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s16 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i85 = (int) $s16;

        virtualinvoke $r38.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i85);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("specialRef", "(Ljava/lang/Object;Ljava/lang/String;Lorg/mozilla/javascript/Context;)Lorg/mozilla/javascript/Ref;");

        goto label88;

     label75:
        $i9 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(16, 0);

     label76:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r107, r0);

        $r28 = virtualinvoke r107.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        r107 = $r28;

        if $r28 != null goto label76;

        $r29 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s10 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i86 = (int) $s10;

        virtualinvoke $r29.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i86);

        tableswitch($i0)
        {
            case 73: goto label77;
            case 74: goto label78;
            case 75: goto label79;
            case 76: goto label80;
            default: goto label81;
        };

     label77:
        r111 = "memberRef";

        r112 = "(Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;I)Lorg/mozilla/javascript/Ref;";

        goto label82;

     label78:
        r111 = "memberRef";

        r112 = "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;I)Lorg/mozilla/javascript/Ref;";

        goto label82;

     label79:
        r111 = "nameRef";

        r112 = "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;I)Lorg/mozilla/javascript/Ref;";

        $r31 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s12 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i87 = (int) $s12;

        virtualinvoke $r31.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i87);

        goto label82;

     label80:
        r111 = "nameRef";

        r112 = "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;I)Lorg/mozilla/javascript/Ref;";

        $r30 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s11 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i88 = (int) $s11;

        virtualinvoke $r30.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i88);

        goto label82;

     label81:
        $r32 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r32;

     label82:
        $r113 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r113.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i9);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>(r111, r112);

        goto label88;

     label83:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitDotQuery(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $r1);

        goto label88;

     label84:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r34 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s14 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i89 = (int) $s14;

        virtualinvoke $r34.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i89);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("escapeAttributeValue", "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/String;");

        goto label88;

     label85:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r33 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s13 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i90 = (int) $s13;

        virtualinvoke $r33.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i90);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("escapeTextValue", "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/String;");

        goto label88;

     label86:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r0);

        $r35 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s15 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i91 = (int) $s15;

        virtualinvoke $r35.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i91);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("setDefaultNamespace", "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label88;

     label87:
        $r115 = new java.lang.RuntimeException;

        $r114 = new java.lang.StringBuffer;

        specialinvoke $r114.<java.lang.StringBuffer: void <init>()>();

        $r104 = virtualinvoke $r114.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected node type ");

        $r105 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r106 = virtualinvoke $r105.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r115.<java.lang.RuntimeException: void <init>(java.lang.String)>($r106);

        throw $r115;

     label88:
        return;
    }

    private void generateIfJump(org.mozilla.javascript.Node, org.mozilla.javascript.Node, int, int)
    {
        org.mozilla.classfile.ClassFileWriter $r3, $r4, $r7, $r8;
        org.mozilla.javascript.optimizer.BodyCodegen r2;
        org.mozilla.javascript.Node r0, $r1, $r5, r6;
        int $i0, $i1, i2, i3;

        r2 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r6 := @parameter1: org.mozilla.javascript.Node;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        lookupswitch($i0)
        {
            case 12: goto label6;
            case 13: goto label6;
            case 14: goto label5;
            case 15: goto label5;
            case 16: goto label5;
            case 17: goto label5;
            case 26: goto label1;
            case 45: goto label6;
            case 46: goto label6;
            case 51: goto label5;
            case 52: goto label5;
            case 100: goto label2;
            case 101: goto label2;
            default: goto label7;
        };

     label1:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateIfJump(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>($r1, r0, i3, i2);

        goto label8;

     label2:
        $r3 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i1 = virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        if $i0 != 101 goto label3;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateIfJump(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>($r1, r0, $i1, i3);

        goto label4;

     label3:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateIfJump(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>($r1, r0, i2, $i1);

     label4:
        $r4 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i1);

        $r5 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateIfJump(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>($r5, r0, i2, i3);

        goto label8;

     label5:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitIfJumpRelOp(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>(r0, $r1, i2, i3);

        goto label8;

     label6:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void visitIfJumpEqOp(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>(r0, $r1, i2, i3);

        goto label8;

     label7:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, r6);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toBoolean", "(Ljava/lang/Object;)Z");

        $r7 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(154, i2);

        $r8 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, i3);

     label8:
        return;
    }

    private void visitFunction(org.mozilla.javascript.optimizer.OptFunctionNode, int)
    {
        boolean $z0, $z1;
        org.mozilla.javascript.optimizer.Codegen $r3, $r4, $r11, $r16, $r17, $r21, $r22, $r31, $r32, $r37, $r41;
        org.mozilla.classfile.ClassFileWriter $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r20, $r25, $r26, $r27, $r28, $r29, $r30, $r35, $r36, $r38, $r43, $r44;
        short $s1, $s2, $s5, $s6;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int $i0, $i3, i4, $i7, $i8, $i9, $i10;
        java.lang.String $r5, $r12, $r18, $r19, $r23, $r24, $r33, $r34, $r39, $r40, $r42;
        org.mozilla.javascript.optimizer.OptFunctionNode r1;
        org.mozilla.javascript.FunctionNode $r2;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        i4 := @parameter1: int;

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r2 = r1.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i0 = virtualinvoke $r3.<org.mozilla.javascript.optimizer.Codegen: int getIndex(org.mozilla.javascript.ScriptOrFnNode)>($r2);

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r5 = $r4.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String)>(187, $r5);

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i7 = (int) $s1;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i7);

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i8 = (int) $s2;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i8);

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i0);

        $r13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r12 = $r11.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(183, $r12, "<init>", "(Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Context;I)V");

        $r14 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $z0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean isTopLevel>;

        if $z0 == 0 goto label1;

        $r44 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r44.<org.mozilla.classfile.ClassFileWriter: void add(int)>(42);

        goto label2;

     label1:
        $r15 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r15.<org.mozilla.classfile.ClassFileWriter: void add(int)>(42);

        $r20 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r16 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r19 = $r16.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        $r17 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r18 = $r17.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassSignature>;

        virtualinvoke $r20.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r19, "_dcp", $r18);

     label2:
        $r25 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r21 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r24 = $r21.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        $r22 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r23 = $r22.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassSignature>;

        virtualinvoke $r25.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(181, $r24, "_dcp", $r23);

        $i3 = virtualinvoke r1.<org.mozilla.javascript.optimizer.OptFunctionNode: int getDirectTargetIndex()>();

        if $i3 < 0 goto label5;

        $r29 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r29.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $z1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean isTopLevel>;

        if $z1 == 0 goto label3;

        $r43 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r43.<org.mozilla.classfile.ClassFileWriter: void add(int)>(42);

        goto label4;

     label3:
        $r30 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r30.<org.mozilla.classfile.ClassFileWriter: void add(int)>(42);

        $r35 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r31 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r34 = $r31.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        $r32 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r33 = $r32.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassSignature>;

        virtualinvoke $r35.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r34, "_dcp", $r33);

     label4:
        $r36 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r36.<org.mozilla.classfile.ClassFileWriter: void add(int)>(95);

        $r38 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r37 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r39 = $r37.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        $r40 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.String getDirectTargetFieldName(int)>($i3);

        $r41 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r42 = $r41.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassSignature>;

        virtualinvoke $r38.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(181, $r39, $r40, $r42);

     label5:
        if i4 != 2 goto label6;

        return;

     label6:
        $r26 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r26.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i4);

        $r27 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i9 = (int) $s5;

        virtualinvoke $r27.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i9);

        $r28 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i10 = (int) $s6;

        virtualinvoke $r28.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i10);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addOptRuntimeInvoke(java.lang.String,java.lang.String)>("initFunction", "(Lorg/mozilla/javascript/NativeFunction;ILorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Context;)V");

        return;
    }

    private int getTargetLabel(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.optimizer.BodyCodegen r1;
        org.mozilla.javascript.Node r0;
        int $i0, $i1, i2, $i4;
        org.mozilla.classfile.ClassFileWriter $r2;

        r1 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int labelId()>();

        i2 = $i0;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $r2 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i1 = virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        i2 = $i1;

        virtualinvoke r0.<org.mozilla.javascript.Node: void labelId(int)>($i1);

     label1:
        return i2;
    }

    private void visitGOTO(org.mozilla.javascript.Node$Jump, int, org.mozilla.javascript.Node)
    {
        java.lang.RuntimeException $r6;
        org.mozilla.classfile.ClassFileWriter $r4, $r5;
        org.mozilla.javascript.optimizer.BodyCodegen r3;
        org.mozilla.javascript.Node r1, r2;
        int i0, $i1, $i2;
        org.mozilla.javascript.Node$Jump r0;

        r3 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node$Jump;

        i0 := @parameter1: int;

        r2 := @parameter2: org.mozilla.javascript.Node;

        r1 = r0.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target>;

        if i0 == 6 goto label1;

        if i0 != 7 goto label5;

     label1:
        if r2 != null goto label2;

        $r6 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r6;

     label2:
        $i1 = specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: int getTargetLabel(org.mozilla.javascript.Node)>(r1);

        $r4 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i2 = virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        if i0 != 6 goto label3;

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateIfJump(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>(r2, r0, $i1, $i2);

        goto label4;

     label3:
        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateIfJump(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int)>(r2, r0, $i2, $i1);

     label4:
        $r5 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i2);

        goto label7;

     label5:
        if i0 != 131 goto label6;

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addGoto(org.mozilla.javascript.Node,int)>(r1, 168);

        goto label7;

     label6:
        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addGoto(org.mozilla.javascript.Node,int)>(r1, 167);

     label7:
        return;
    }

    private void visitArrayLiteral(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        short $s1, $s2;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int[] r15;
        org.mozilla.javascript.Node r1, r13, r14;
        int $i0, i3, i4, $i5, $i6;
        java.lang.String $r4;
        org.mozilla.classfile.ClassFileWriter $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Object $r2;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: org.mozilla.javascript.Node;

        r13 := @parameter1: org.mozilla.javascript.Node;

        i3 = 0;

        r14 = r13;

     label1:
        if r14 == null goto label2;

        i3 = i3 + 1;

        r14 = virtualinvoke r14.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label1;

     label2:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addNewObjectArray(int)>(i3);

        i4 = 0;

     label3:
        if i4 == i3 goto label4;

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i4);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r13, r1);

        $r12 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void add(int)>(83);

        r13 = virtualinvoke r13.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        i4 = i4 + 1;

        goto label3;

     label4:
        $r2 = virtualinvoke r1.<org.mozilla.javascript.Node: java.lang.Object getProp(int)>(11);

        r15 = (int[]) $r2;

        if r15 != null goto label5;

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int)>(1);

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void add(int)>(3);

        goto label6;

     label5:
        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r4 = staticinvoke <org.mozilla.javascript.optimizer.OptRuntime: java.lang.String encodeIntArray(int[])>(r15);

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r4);

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i0 = lengthof r15;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i0);

     label6:
        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i5 = (int) $s1;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i5);

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i6 = (int) $s2;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i6);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addOptRuntimeInvoke(java.lang.String,java.lang.String)>("newArrayLiteral", "([Ljava/lang/Object;Ljava/lang/String;ILorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Lorg/mozilla/javascript/Scriptable;");

        return;
    }

    private void visitObjectLiteral(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        java.lang.Object[] r2;
        java.lang.Integer $r12;
        short $s1, $s2;
        org.mozilla.javascript.optimizer.BodyCodegen r3;
        org.mozilla.javascript.Node r0, r17;
        int i0, $i3, i4, i5, $i6, $i7;
        java.lang.String $r15;
        boolean $z0;
        org.mozilla.classfile.ClassFileWriter $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r16;
        java.lang.Object $r1, r11;

        r3 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r17 := @parameter1: org.mozilla.javascript.Node;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.Object getProp(int)>(12);

        r2 = (java.lang.Object[]) $r1;

        i0 = lengthof r2;

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addNewObjectArray(int)>(i0);

        i4 = 0;

     label1:
        if i4 == i0 goto label4;

        $r9 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r10 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i4);

        r11 = r2[i4];

        $z0 = r11 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r16 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r15 = (java.lang.String) r11;

        virtualinvoke $r16.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r15);

        goto label3;

     label2:
        $r13 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r12 = (java.lang.Integer) r11;

        $i3 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i3);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("wrapInt", "(I)Ljava/lang/Integer;");

     label3:
        $r14 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void add(int)>(83);

        i4 = i4 + 1;

        goto label1;

     label4:
        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addNewObjectArray(int)>(i0);

        i5 = 0;

     label5:
        if i5 == i0 goto label6;

        $r6 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r7 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i5);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r17, r0);

        $r8 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int)>(83);

        r17 = virtualinvoke r17.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        i5 = i5 + 1;

        goto label5;

     label6:
        $r4 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s1 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i6 = (int) $s1;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i6);

        $r5 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i7 = (int) $s2;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i7);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("newObjectLiteral", "([Ljava/lang/Object;[Ljava/lang/Object;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Lorg/mozilla/javascript/Scriptable;");

        return;
    }

    private void visitSpecialCall(org.mozilla.javascript.Node, int, int, org.mozilla.javascript.Node)
    {
        short $s0, $s2, $s3, $s6, $s7;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r2, $r3, r14;
        int i1, i4, $i5, $i8, $i9, $i10, $i11, $i12;
        org.mozilla.javascript.ScriptOrFnNode $r7;
        java.lang.String $r8, r15, r16, $r17;
        org.mozilla.classfile.ClassFileWriter $r1, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r2 := @parameter0: org.mozilla.javascript.Node;

        i1 := @parameter1: int;

        i4 := @parameter2: int;

        r14 := @parameter3: org.mozilla.javascript.Node;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i8 = (int) $s0;

        virtualinvoke $r1.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i8);

        if i1 != 30 goto label1;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r14, r2);

        goto label2;

     label1:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateFunctionAndThisObj(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r14, r2);

     label2:
        $r3 = virtualinvoke r14.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateCallArgArray(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean)>(r2, $r3, 0);

        if i1 != 30 goto label3;

        r15 = "newObjectSpecial";

        r16 = "(Lorg/mozilla/javascript/Context;Ljava/lang/Object;[Ljava/lang/Object;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Scriptable;I)Ljava/lang/Object;";

        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i9 = (int) $s6;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i9);

        $r12 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short thisObjLocal>;

        $i10 = (int) $s7;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i10);

        $r13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i4);

        goto label6;

     label3:
        r15 = "callSpecial";

        r16 = "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Callable;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Scriptable;ILjava/lang/String;I)Ljava/lang/Object;";

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i11 = (int) $s2;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i11);

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short thisObjLocal>;

        $i12 = (int) $s3;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i12);

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i4);

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn>;

        $r8 = virtualinvoke $r7.<org.mozilla.javascript.ScriptOrFnNode: java.lang.String getSourceName()>();

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        if $r8 != null goto label4;

        $r17 = "";

        goto label5;

     label4:
        $r17 = $r8;

     label5:
        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r17);

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int itsLineNumber>;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i5);

     label6:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addOptRuntimeInvoke(java.lang.String,java.lang.String)>(r15, r16);

        return;
    }

    private void visitStandardCall(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        short $s3, $s4;
        org.mozilla.javascript.optimizer.BodyCodegen r3;
        org.mozilla.javascript.Node r0, r1, $r2, $r4, $r7, $r8, r16;
        int $i0, $i1, i2, $i5, $i6;
        java.lang.String $r5, $r9, $r11, r14, r15;
        java.lang.RuntimeException $r13;
        org.mozilla.classfile.ClassFileWriter $r6, $r10, $r12, $r17, $r18;

        r3 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r1 := @parameter1: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i0 == 37 goto label01;

        $r13 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r13;

     label01:
        $r2 = virtualinvoke r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i1 = virtualinvoke r1.<org.mozilla.javascript.Node: int getType()>();

        if $r2 != null goto label04;

        if $i1 != 38 goto label02;

        $r11 = virtualinvoke r1.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $r12 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r11);

        r14 = "callName0";

        r15 = "(Ljava/lang/String;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;";

        goto label10;

     label02:
        if $i1 != 33 goto label03;

        $r7 = virtualinvoke r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r7, r0);

        $r8 = virtualinvoke $r7.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $r9 = virtualinvoke $r8.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $r10 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r9);

        r14 = "callProp0";

        r15 = "(Ljava/lang/Object;Ljava/lang/String;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;";

        goto label10;

     label03:
        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateFunctionAndThisObj(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r1, r0);

        r14 = "call0";

        r15 = "(Lorg/mozilla/javascript/Callable;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;";

        goto label10;

     label04:
        if $i1 != 38 goto label05;

        $r5 = virtualinvoke r1.<org.mozilla.javascript.Node: java.lang.String getString()>();

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateCallArgArray(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean)>(r0, $r2, 0);

        $r6 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r5);

        r14 = "callName";

        r15 = "([Ljava/lang/Object;Ljava/lang/String;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;";

        goto label10;

     label05:
        i2 = 0;

        r16 = $r2;

     label06:
        if r16 == null goto label07;

        i2 = i2 + 1;

        r16 = virtualinvoke r16.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label06;

     label07:
        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateFunctionAndThisObj(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r1, r0);

        if i2 != 1 goto label08;

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r0);

        r14 = "call1";

        r15 = "(Lorg/mozilla/javascript/Callable;Lorg/mozilla/javascript/Scriptable;Ljava/lang/Object;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;";

        goto label10;

     label08:
        if i2 != 2 goto label09;

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r0);

        $r4 = virtualinvoke $r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r4, r0);

        r14 = "call2";

        r15 = "(Lorg/mozilla/javascript/Callable;Lorg/mozilla/javascript/Scriptable;Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;";

        goto label10;

     label09:
        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateCallArgArray(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean)>(r0, $r2, 0);

        r14 = "callN";

        r15 = "(Lorg/mozilla/javascript/Callable;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;";

     label10:
        $r17 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s3 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i5 = (int) $s3;

        virtualinvoke $r17.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i5);

        $r18 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s4 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i6 = (int) $s4;

        virtualinvoke $r18.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i6);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addOptRuntimeInvoke(java.lang.String,java.lang.String)>(r14, r15);

        return;
    }

    private void visitStandardNew(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        java.lang.RuntimeException $r6;
        org.mozilla.classfile.ClassFileWriter $r4, $r5;
        short $s1, $s2;
        org.mozilla.javascript.optimizer.BodyCodegen r3;
        org.mozilla.javascript.Node r0, r1, $r2;
        int $i0, $i3, $i4;

        r3 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r1 := @parameter1: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i0 == 30 goto label1;

        $r6 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r6;

     label1:
        $r2 = virtualinvoke r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r1, r0);

        $r4 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s1 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i3 = (int) $s1;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i3);

        $r5 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i4 = (int) $s2;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i4);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateCallArgArray(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean)>(r0, $r2, 0);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("newObject", "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;)Lorg/mozilla/javascript/Scriptable;");

        return;
    }

    private void visitOptimizedCall(org.mozilla.javascript.Node, org.mozilla.javascript.optimizer.OptFunctionNode, int, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r1, r3, r58;
        short $s1, $s5, $s6, $s7, $s8, $s12, $s13, s14;
        org.mozilla.javascript.optimizer.BodyCodegen r2;
        java.lang.String $r10, $r11, $r15, $r16, $r18, $r36, $r39, $r59;
        org.mozilla.javascript.optimizer.OptFunctionNode r6;
        org.mozilla.javascript.FunctionNode $r33, $r37, $r48;
        boolean $z0, $z1;
        org.mozilla.javascript.optimizer.Codegen $r8, $r9, $r13, $r17, $r32, $r34, $r38, $r49;
        org.mozilla.classfile.ClassFileWriter $r4, $r5, $r7, $r12, $r14, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r35, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57;
        int i0, $i2, $i3, $i4, $i9, $i10, $i11, $i15, $i16, $i17, $i18, $i20, $i21, $i22;
        org.mozilla.javascript.CompilerEnvirons $r25;

        r2 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r3 := @parameter0: org.mozilla.javascript.Node;

        r6 := @parameter1: org.mozilla.javascript.optimizer.OptFunctionNode;

        i0 := @parameter2: int;

        r0 := @parameter3: org.mozilla.javascript.Node;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        s14 = 0;

        if i0 != 30 goto label01;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, r3);

        goto label02;

     label01:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateFunctionAndThisObj(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, r3);

        $s1 = specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        s14 = $s1;

        $r4 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i15 = (int) $s1;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i15);

     label02:
        $r5 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i2 = virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $i3 = virtualinvoke r6.<org.mozilla.javascript.optimizer.OptFunctionNode: int getDirectTargetIndex()>();

        $z0 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: boolean isTopLevel>;

        if $z0 == 0 goto label03;

        $r57 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r57.<org.mozilla.classfile.ClassFileWriter: void add(int)>(42);

        goto label04;

     label03:
        $r7 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void add(int)>(42);

        $r12 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r8 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r11 = $r8.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        $r9 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r10 = $r9.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassSignature>;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r11, "_dcp", $r10);

     label04:
        $r14 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r13 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r15 = $r13.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        $r16 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.String getDirectTargetFieldName(int)>($i3);

        $r17 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r18 = $r17.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassSignature>;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r15, $r16, $r18);

        $r19 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r19.<org.mozilla.classfile.ClassFileWriter: void add(int)>(92);

        $r20 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i4 = virtualinvoke $r20.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r21 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r21.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(166, $i4);

        $r22 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s5 = virtualinvoke $r22.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        $r23 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r23.<org.mozilla.classfile.ClassFileWriter: void add(int)>(95);

        $r24 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r24.<org.mozilla.classfile.ClassFileWriter: void add(int)>(87);

        $r25 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $z1 = virtualinvoke $r25.<org.mozilla.javascript.CompilerEnvirons: boolean isUseDynamicScope()>();

        if $z1 == 0 goto label05;

        $r55 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s12 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i16 = (int) $s12;

        virtualinvoke $r55.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i16);

        $r56 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s13 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i17 = (int) $s13;

        virtualinvoke $r56.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i17);

        goto label06;

     label05:
        $r26 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r26.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r27 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r27.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(185, "org/mozilla/javascript/Scriptable", "getParentScope", "()Lorg/mozilla/javascript/Scriptable;");

        $r28 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s6 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i18 = (int) $s6;

        virtualinvoke $r28.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i18);

        $r29 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r29.<org.mozilla.classfile.ClassFileWriter: void add(int)>(95);

     label06:
        if i0 != 30 goto label07;

        $r54 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r54.<org.mozilla.classfile.ClassFileWriter: void add(int)>(1);

        goto label08;

     label07:
        $r30 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r30.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(s14);

     label08:
        r58 = $r1;

     label09:
        if r58 == null goto label13;

        $i9 = specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: int nodeIsDirectCallParameter(org.mozilla.javascript.Node)>(r58);

        if $i9 < 0 goto label10;

        $r52 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r52.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i9);

        $r53 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i11 = $i9 + 1;

        virtualinvoke $r53.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i11);

        goto label12;

     label10:
        $i20 = (int) -1;

        $i10 = virtualinvoke r58.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i20);

        if $i10 != 0 goto label11;

        $r51 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r51.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Void", "TYPE", "Ljava/lang/Class;");

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r58, r3);

        goto label12;

     label11:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r58, r3);

        $r50 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r50.<org.mozilla.classfile.ClassFileWriter: void addPush(double)>(0.0);

     label12:
        r58 = virtualinvoke r58.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label09;

     label13:
        $r31 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r31.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "org/mozilla/javascript/ScriptRuntime", "emptyArgs", "[Ljava/lang/Object;");

        $r35 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r32 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r36 = $r32.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        if i0 != 30 goto label14;

        $r49 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r48 = r6.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $r59 = virtualinvoke $r49.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getDirectCtorName(org.mozilla.javascript.ScriptOrFnNode)>($r48);

        goto label15;

     label14:
        $r34 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r33 = r6.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $r59 = virtualinvoke $r34.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getBodyMethodName(org.mozilla.javascript.ScriptOrFnNode)>($r33);

     label15:
        $r38 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen>;

        $r37 = r6.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $r39 = virtualinvoke $r38.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getBodyMethodSignature(org.mozilla.javascript.ScriptOrFnNode)>($r37);

        virtualinvoke $r35.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, $r36, $r59, $r39);

        $r40 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r40.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i2);

        $r41 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r41.<org.mozilla.classfile.ClassFileWriter: void markLabel(int,short)>($i4, $s5);

        $r42 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r42.<org.mozilla.classfile.ClassFileWriter: void add(int)>(87);

        $r43 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s7 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i21 = (int) $s7;

        virtualinvoke $r43.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i21);

        $r44 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s8 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i22 = (int) $s8;

        virtualinvoke $r44.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i22);

        if i0 == 30 goto label16;

        $r47 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r47.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(s14);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void releaseWordLocal(short)>(s14);

     label16:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateCallArgArray(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean)>(r3, $r1, 1);

        if i0 != 30 goto label17;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("newObject", "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;)Lorg/mozilla/javascript/Scriptable;");

        goto label18;

     label17:
        $r45 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r45.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(185, "org/mozilla/javascript/Callable", "call", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;)Ljava/lang/Object;");

     label18:
        $r46 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r46.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i2);

        return;
    }

    private void generateCallArgArray(org.mozilla.javascript.Node, org.mozilla.javascript.Node, boolean)
    {
        short $s2, $s3;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r3, r5, r6;
        int $i0, $i1, i4, i5, $i6, $i7, $i9;
        boolean z0;
        org.mozilla.classfile.ClassFileWriter $r1, $r2, $r4, $r7;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r3 := @parameter0: org.mozilla.javascript.Node;

        r5 := @parameter1: org.mozilla.javascript.Node;

        z0 := @parameter2: boolean;

        i4 = 0;

        r6 = r5;

     label1:
        if r6 == null goto label2;

        i4 = i4 + 1;

        r6 = virtualinvoke r6.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label1;

     label2:
        if i4 != 1 goto label3;

        $s2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short itsOneArgArray>;

        $i6 = (int) $s2;

        if $i6 < 0 goto label3;

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short itsOneArgArray>;

        $i7 = (int) $s3;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i7);

        goto label4;

     label3:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addNewObjectArray(int)>(i4);

     label4:
        i5 = 0;

     label5:
        if i5 == i4 goto label9;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i5);

        if z0 != 0 goto label6;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r5, r3);

        goto label8;

     label6:
        $i0 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: int nodeIsDirectCallParameter(org.mozilla.javascript.Node)>(r5);

        if $i0 < 0 goto label7;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void dcpLoadAsObject(int)>($i0);

        goto label8;

     label7:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r5, r3);

        $i9 = (int) -1;

        $i1 = virtualinvoke r5.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i9);

        if $i1 != 0 goto label8;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

     label8:
        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void add(int)>(83);

        r5 = virtualinvoke r5.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        i5 = i5 + 1;

        goto label5;

     label9:
        return;
    }

    private void generateFunctionAndThisObj(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r6, $r7, r13;
        org.mozilla.classfile.ClassFileWriter $r3, $r4, $r5, $r8, $r11, $r12, $r14, $r15;
        short $s2, $s3, $s5, $s6, $s7, $s8;
        org.mozilla.javascript.optimizer.BodyCodegen r2;
        int $i0, $i1, $i4, $i9, $i11, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.String $r1, $r10;
        java.lang.RuntimeException $r9;

        r2 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r13 := @parameter1: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        $i1 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i1)
        {
            case 33: goto label1;
            case 35: goto label1;
            case 38: goto label4;
            default: goto label5;
        };

     label1:
        $r6 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r6, r0);

        $r7 = virtualinvoke $r6.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        if $i0 != 33 goto label2;

        $r10 = virtualinvoke $r7.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $r11 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r10);

        $r12 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s6 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i9 = (int) $s6;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i9);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getPropFunctionAndThis", "(Ljava/lang/Object;Ljava/lang/String;Lorg/mozilla/javascript/Context;)Lorg/mozilla/javascript/Callable;");

        goto label6;

     label2:
        $i11 = (int) -1;

        $i4 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i11);

        $i13 = (int) -1;

        if $i4 == $i13 goto label3;

        $r9 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r9;

     label3:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r7, r0);

        $r8 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s5 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i14 = (int) $s5;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i14);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getElemFunctionAndThis", "(Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Lorg/mozilla/javascript/Callable;");

        goto label6;

     label4:
        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $r3 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r1);

        $r4 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i15 = (int) $s2;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i15);

        $r5 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s3 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i16 = (int) $s3;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i16);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getNameFunctionAndThis", "(Ljava/lang/String;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Lorg/mozilla/javascript/Callable;");

        goto label6;

     label5:
        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, r13);

        $r14 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s7 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i17 = (int) $s7;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i17);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getValueFunctionAndThis", "(Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Lorg/mozilla/javascript/Callable;");

     label6:
        $r15 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s8 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i18 = (int) $s8;

        virtualinvoke $r15.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i18);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("lastStoredScriptable", "(Lorg/mozilla/javascript/Context;)Lorg/mozilla/javascript/Scriptable;");

        return;
    }

    private void updateLineNumber(org.mozilla.javascript.Node)
    {
        org.mozilla.classfile.ClassFileWriter $r2;
        short $s3;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r1;
        int $i0, $i1, $i2, $i5;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r1.<org.mozilla.javascript.Node: int getLineno()>();

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: int itsLineNumber> = $i0;

        $i1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int itsLineNumber>;

        $i5 = (int) -1;

        if $i1 != $i5 goto label1;

        return;

     label1:
        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: int itsLineNumber>;

        $s3 = (short) $i2;

        virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: void addLineNumberEntry(short)>($s3);

        return;
    }

    private void visitTryCatchFinally(org.mozilla.javascript.Node$Jump, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r6, $r7, r20;
        org.mozilla.classfile.ClassFileWriter $r1, $r2, $r3, $r4, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        short $s0, $s1, $s6;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12;
        org.mozilla.javascript.Node$Jump r5;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r5 := @parameter0: org.mozilla.javascript.Node$Jump;

        r20 := @parameter1: org.mozilla.javascript.Node;

        $s0 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i9 = (int) $s1;

        virtualinvoke $r1.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i9);

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i10 = (int) $s0;

        virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i10);

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i2 = virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void markLabel(int,short)>($i2, 1);

     label1:
        if r20 == null goto label2;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateStatement(org.mozilla.javascript.Node)>(r20);

        r20 = virtualinvoke r20.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label1;

     label2:
        r6 = r5.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target>;

        $r7 = virtualinvoke r5.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node getFinally()>();

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i3 = virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i3);

        $i4 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: int getLocalBlockRegister(org.mozilla.javascript.Node)>(r5);

        if r6 == null goto label3;

        $i8 = virtualinvoke r6.<org.mozilla.javascript.Node: int labelId()>();

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateCatchBlock(int,short,int,int,int)>(0, $s0, $i8, $i2, $i4);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateCatchBlock(int,short,int,int,int)>(1, $s0, $i8, $i2, $i4);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateCatchBlock(int,short,int,int,int)>(2, $s0, $i8, $i2, $i4);

     label3:
        if $r7 == null goto label4;

        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i5 = virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r12 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void markHandler(int)>($i5);

        $r13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i4);

        $r14 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i11 = (int) $s0;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i11);

        $r15 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i12 = (int) $s6;

        virtualinvoke $r15.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i12);

        $i7 = virtualinvoke $r7.<org.mozilla.javascript.Node: int labelId()>();

        $r16 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r16.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(168, $i7);

        $r17 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r17.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i4);

        $r18 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r18.<org.mozilla.classfile.ClassFileWriter: void add(int)>(191);

        $r19 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r19.<org.mozilla.classfile.ClassFileWriter: void addExceptionHandler(int,int,int,java.lang.String)>($i2, $i7, $i5, null);

     label4:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void releaseWordLocal(short)>($s0);

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i3);

        return;
    }

    private void generateCatchBlock(int, short, int, int, int)
    {
        short s2, $s3;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int $i0, i1, i4, i5, i6, $i7, $i8;
        java.lang.String r6;
        org.mozilla.classfile.ClassFileWriter $r1, $r2, $r3, $r4, $r5, $r7, $r8;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        i4 := @parameter0: int;

        s2 := @parameter1: short;

        i6 := @parameter2: int;

        i5 := @parameter3: int;

        i1 := @parameter4: int;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i0 = virtualinvoke $r1.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: void markHandler(int)>($i0);

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>(i1);

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i7 = (int) s2;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i7);

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i8 = (int) $s3;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i8);

        if i4 != 0 goto label1;

        r6 = "org/mozilla/javascript/JavaScriptException";

        goto label4;

     label1:
        if i4 != 1 goto label2;

        r6 = "org/mozilla/javascript/EvaluatorException";

        goto label4;

     label2:
        if i4 == 2 goto label3;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label3:
        r6 = "org/mozilla/javascript/EcmaError";

     label4:
        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void addExceptionHandler(int,int,int,java.lang.String)>(i5, i6, $i0, r6);

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, i6);

        return;
    }

    private void visitSwitch(org.mozilla.javascript.Node$Jump, org.mozilla.javascript.Node)
    {
        java.lang.RuntimeException $r9;
        org.mozilla.classfile.ClassFileWriter $r3, $r6;
        short $s0;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r1, $r4, $r5, $r7, $r8;
        int $i1, $i2, $i3;
        org.mozilla.javascript.Node$Jump r2, r10;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r2 := @parameter0: org.mozilla.javascript.Node$Jump;

        r1 := @parameter1: org.mozilla.javascript.Node;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r1, r2);

        $s0 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: short getNewWordLocal()>();

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i2 = (int) $s0;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i2);

        $r4 = virtualinvoke r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        r10 = (org.mozilla.javascript.Node$Jump) $r4;

     label1:
        if r10 == null goto label3;

        $i1 = virtualinvoke r10.<org.mozilla.javascript.Node$Jump: int getType()>();

        if $i1 == 111 goto label2;

        $r9 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r9;

     label2:
        $r5 = virtualinvoke r10.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r5, r10);

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i3 = (int) $s0;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i3);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("shallowEq", "(Ljava/lang/Object;Ljava/lang/Object;)Z");

        $r7 = r10.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target>;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addGoto(org.mozilla.javascript.Node,int)>($r7, 154);

        $r8 = virtualinvoke r10.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node getNext()>();

        r10 = (org.mozilla.javascript.Node$Jump) $r8;

        goto label1;

     label3:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void releaseWordLocal(short)>($s0);

        return;
    }

    private void visitTypeofname(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0;
        boolean $z0, $z1, $z2;
        org.mozilla.classfile.ClassFileWriter $r3, $r4, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        short[] $r8, $r10;
        short $s0, $s2, s3, $s5;
        org.mozilla.javascript.optimizer.BodyCodegen r2;
        int $i1, $i4, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r1;
        org.mozilla.javascript.optimizer.OptFunctionNode $r5, $r7;
        org.mozilla.javascript.FunctionNode $r6;

        r2 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $z0 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs>;

        if $z0 == 0 goto label4;

        $r5 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $r6 = $r5.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i1 = virtualinvoke $r6.<org.mozilla.javascript.FunctionNode: int getParamOrVarIndex(java.lang.String)>($r1);

        if $i1 < 0 goto label4;

        $r7 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $z1 = virtualinvoke $r7.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isNumberVar(int)>($i1);

        if $z1 == 0 goto label1;

        $r22 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r22.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>("number");

        goto label3;

     label1:
        $z2 = specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: boolean varIsDirectCallParameter(int)>($i1);

        if $z2 == 0 goto label2;

        $r10 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        s3 = $r10[$i1];

        $r11 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i7 = (int) s3;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i7);

        $r12 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Void", "TYPE", "Ljava/lang/Class;");

        $r13 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i4 = virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r14 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(165, $i4);

        $r15 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s5 = virtualinvoke $r15.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        $r16 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i8 = (int) s3;

        virtualinvoke $r16.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i8);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("typeof", "(Ljava/lang/Object;)Ljava/lang/String;");

        $r17 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i6 = virtualinvoke $r17.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r18 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r18.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i6);

        $r19 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r19.<org.mozilla.classfile.ClassFileWriter: void markLabel(int,short)>($i4, $s5);

        $r20 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r20.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>("number");

        $r21 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r21.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i6);

        goto label3;

     label2:
        $r9 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r8 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        $s2 = $r8[$i1];

        $i9 = (int) $s2;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i9);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("typeof", "(Ljava/lang/Object;)Ljava/lang/String;");

     label3:
        return;

     label4:
        $r3 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s0 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i10 = (int) $s0;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i10);

        $r4 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r1);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("typeofName", "(Lorg/mozilla/javascript/Scriptable;Ljava/lang/String;)Ljava/lang/String;");

        return;
    }

    private void visitIncDec(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r1, $r2, $r28, $r29, $r32, $r33;
        short $s2, $s7, $s11, $s12, $s13, $s14;
        org.mozilla.javascript.optimizer.BodyCodegen r3;
        java.lang.String $r26;
        org.mozilla.javascript.optimizer.OptFunctionNode $r6, $r15;
        boolean $z0, z2, z4, $z5, $z6, $z7, $z8;
        org.mozilla.classfile.ClassFileWriter $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r27, $r30, $r31, $r34, $r35;
        short[] $r7, $r16;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;

        r3 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getExistingIntProp(int)>(13);

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $i1 = virtualinvoke $r1.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i1)
        {
            case 33: goto label17;
            case 35: goto label18;
            case 38: goto label16;
            case 54: goto label01;
            case 65: goto label19;
            default: goto label20;
        };

     label01:
        $z0 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs>;

        if $z0 != 0 goto label02;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label02:
        $i16 = (int) -1;

        $i3 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i16);

        $i18 = (int) -1;

        if $i3 == $i18 goto label09;

        $i8 = $i0 & 2;

        if $i8 == 0 goto label03;

        $z8 = 1;

        $z7 = 1;

        goto label04;

     label03:
        $z8 = 0;

        $z7 = 0;

     label04:
        z2 = $z8;

        $r15 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $i9 = virtualinvoke $r15.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>($r1);

        $r16 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        $s11 = $r16[$i9];

        $r17 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i19 = (int) $s11;

        virtualinvoke $r17.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i19);

        if $z7 == 0 goto label05;

        $r23 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r23.<org.mozilla.classfile.ClassFileWriter: void add(int)>(92);

     label05:
        $r18 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r18.<org.mozilla.classfile.ClassFileWriter: void addPush(double)>(1.0);

        $i10 = $i0 & 1;

        if $i10 != 0 goto label06;

        $r22 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r22.<org.mozilla.classfile.ClassFileWriter: void add(int)>(99);

        goto label07;

     label06:
        $r19 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r19.<org.mozilla.classfile.ClassFileWriter: void add(int)>(103);

     label07:
        if z2 != 0 goto label08;

        $r21 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r21.<org.mozilla.classfile.ClassFileWriter: void add(int)>(92);

     label08:
        $r20 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i20 = (int) $s11;

        virtualinvoke $r20.<org.mozilla.classfile.ClassFileWriter: void addDStore(int)>($i20);

        goto label21;

     label09:
        $i4 = $i0 & 2;

        if $i4 == 0 goto label10;

        $z6 = 1;

        $z5 = 1;

        goto label11;

     label10:
        $z6 = 0;

        $z5 = 0;

     label11:
        z4 = $z6;

        $r6 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $i5 = virtualinvoke $r6.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>($r1);

        $r7 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        $s7 = $r7[$i5];

        $r8 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i21 = (int) $s7;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i21);

        if $z5 == 0 goto label12;

        $r14 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

     label12:
        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addObjectToDouble()>();

        $r9 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void addPush(double)>(1.0);

        $i6 = $i0 & 1;

        if $i6 != 0 goto label13;

        $r13 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void add(int)>(99);

        goto label14;

     label13:
        $r10 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void add(int)>(103);

     label14:
        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

        if z4 != 0 goto label15;

        $r12 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

     label15:
        $r11 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i22 = (int) $s7;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i22);

        goto label21;

     label16:
        $r24 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s12 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i23 = (int) $s12;

        virtualinvoke $r24.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i23);

        $r25 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $r26 = virtualinvoke $r1.<org.mozilla.javascript.Node: java.lang.String getString()>();

        virtualinvoke $r25.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r26);

        $r27 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r27.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i0);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("nameIncrDecr", "(Lorg/mozilla/javascript/Scriptable;Ljava/lang/String;I)Ljava/lang/Object;");

        goto label21;

     label17:
        $r32 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r32, r0);

        $r33 = virtualinvoke $r32.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r33, r0);

        $r34 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s14 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i24 = (int) $s14;

        virtualinvoke $r34.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i24);

        $r35 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r35.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i0);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("propIncrDecr", "(Ljava/lang/Object;Ljava/lang/String;Lorg/mozilla/javascript/Context;I)Ljava/lang/Object;");

        goto label21;

     label18:
        $r28 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r28, r0);

        $r29 = virtualinvoke $r28.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r29, r0);

        $r30 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s13 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i25 = (int) $s13;

        virtualinvoke $r30.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i25);

        $r31 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r31.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i0);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("elemIncrDecr", "(Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;I)Ljava/lang/Object;");

        goto label21;

     label19:
        $r2 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r0);

        $r4 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i26 = (int) $s2;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i26);

        $r5 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i0);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("refIncrDecr", "(Lorg/mozilla/javascript/Ref;Lorg/mozilla/javascript/Context;I)Ljava/lang/Object;");

        goto label21;

     label20:
        staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

     label21:
        return;
    }

    private static boolean isArithmeticNode(org.mozilla.javascript.Node)
    {
        int $i0;
        org.mozilla.javascript.Node r0;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i0 == 22 goto label1;

        if $i0 == 25 goto label1;

        if $i0 == 24 goto label1;

        if $i0 != 23 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private void visitArithmetic(org.mozilla.javascript.Node, int, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.optimizer.BodyCodegen r2;
        org.mozilla.javascript.Node r0, r1, r3, $r4, $r5, $r7;
        int $i0, i1, $i3, $i5;
        boolean $z0, $z1, $z2;
        org.mozilla.classfile.ClassFileWriter $r6, $r8;

        r2 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        i1 := @parameter1: int;

        r3 := @parameter2: org.mozilla.javascript.Node;

        r1 := @parameter3: org.mozilla.javascript.Node;

        $i3 = (int) -1;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i3);

        $i5 = (int) -1;

        if $i0 == $i5 goto label1;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r3, r0);

        $r7 = virtualinvoke r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r7, r0);

        $r8 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int)>(i1);

        goto label4;

     label1:
        $z0 = staticinvoke <org.mozilla.javascript.optimizer.BodyCodegen: boolean isArithmeticNode(org.mozilla.javascript.Node)>(r1);

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r3, r0);

        $z1 = staticinvoke <org.mozilla.javascript.optimizer.BodyCodegen: boolean isArithmeticNode(org.mozilla.javascript.Node)>(r3);

        if $z1 != 0 goto label2;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addObjectToDouble()>();

     label2:
        $r4 = virtualinvoke r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r4, r0);

        $r5 = virtualinvoke r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $z2 = staticinvoke <org.mozilla.javascript.optimizer.BodyCodegen: boolean isArithmeticNode(org.mozilla.javascript.Node)>($r5);

        if $z2 != 0 goto label3;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addObjectToDouble()>();

     label3:
        $r6 = r2.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void add(int)>(i1);

        if $z0 != 0 goto label4;

        specialinvoke r2.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

     label4:
        return;
    }

    private void visitBitOp(org.mozilla.javascript.Node, int, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.optimizer.BodyCodegen r1;
        org.mozilla.javascript.Node r0, r2, $r3, $r10, $r11;
        int $i0, i1, $i3, $i5, $i7;
        java.lang.RuntimeException $r9;
        org.mozilla.classfile.ClassFileWriter $r4, $r5, $r6, $r7, $r8, $r12, $r13, $r14, $r15, $r16;

        r1 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        i1 := @parameter1: int;

        r2 := @parameter2: org.mozilla.javascript.Node;

        $i3 = (int) -1;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i3);

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r2, r0);

        if i1 != 20 goto label01;

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toUint32", "(Ljava/lang/Object;)J");

        $r11 = virtualinvoke r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r11, r0);

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toInt32", "(Ljava/lang/Object;)I");

        $r12 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(31);

        $r13 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void add(int)>(126);

        $r14 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void add(int)>(125);

        $r15 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r15.<org.mozilla.classfile.ClassFileWriter: void add(int)>(138);

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

        return;

     label01:
        $i5 = (int) -1;

        if $i0 != $i5 goto label02;

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toInt32", "(Ljava/lang/Object;)I");

        $r10 = virtualinvoke r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r10, r0);

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toInt32", "(Ljava/lang/Object;)I");

        goto label03;

     label02:
        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toInt32", "(D)I");

        $r3 = virtualinvoke r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r3, r0);

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toInt32", "(D)I");

     label03:
        tableswitch(i1)
        {
            case 9: goto label04;
            case 10: goto label05;
            case 11: goto label06;
            case 12: goto label09;
            case 13: goto label09;
            case 14: goto label09;
            case 15: goto label09;
            case 16: goto label09;
            case 17: goto label09;
            case 18: goto label08;
            case 19: goto label07;
            default: goto label09;
        };

     label04:
        $r8 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int)>(128);

        goto label10;

     label05:
        $r7 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void add(int)>(130);

        goto label10;

     label06:
        $r6 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void add(int)>(126);

        goto label10;

     label07:
        $r4 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void add(int)>(122);

        goto label10;

     label08:
        $r5 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void add(int)>(120);

        goto label10;

     label09:
        $r9 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r9;

     label10:
        $r16 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r16.<org.mozilla.classfile.ClassFileWriter: void add(int)>(135);

        $i7 = (int) -1;

        if $i0 != $i7 goto label11;

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

     label11:
        return;
    }

    private int nodeIsDirectCallParameter(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode $r2, $r3;
        short $s2;
        org.mozilla.javascript.optimizer.BodyCodegen r1;
        org.mozilla.javascript.Node r0;
        int $i0, $i1, $i3, $i5;
        short[] $r4;
        boolean $z0, $z1, $z2;

        r1 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i0 != 54 goto label1;

        $z0 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: boolean inDirectCallFunction>;

        if $z0 == 0 goto label1;

        $z1 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: boolean itsForcedObjectParameters>;

        if $z1 != 0 goto label1;

        $r2 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $i1 = virtualinvoke $r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r0);

        $r3 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $z2 = virtualinvoke $r3.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isParameter(int)>($i1);

        if $z2 == 0 goto label1;

        $r4 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        $s2 = $r4[$i1];

        $i3 = (int) $s2;

        return $i3;

     label1:
        $i5 = (int) -1;

        return $i5;
    }

    private boolean varIsDirectCallParameter(int)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode $r1;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int i0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $z0 = virtualinvoke $r1.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isParameter(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean inDirectCallFunction>;

        if $z1 == 0 goto label1;

        $z2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean itsForcedObjectParameters>;

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private void genSimpleCompare(int, int, int)
    {
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int i0, i1, i2, $i4, $i6;
        java.lang.RuntimeException $r10, $r11;
        org.mozilla.classfile.ClassFileWriter $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $i4 = (int) -1;

        if i0 != $i4 goto label1;

        $r11 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r11;

     label1:
        tableswitch(i1)
        {
            case 14: goto label4;
            case 15: goto label2;
            case 16: goto label5;
            case 17: goto label3;
            default: goto label6;
        };

     label2:
        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void add(int)>(152);

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(158, i0);

        goto label7;

     label3:
        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(151);

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(156, i0);

        goto label7;

     label4:
        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int)>(152);

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(155, i0);

        goto label7;

     label5:
        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void add(int)>(151);

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(157, i0);

        goto label7;

     label6:
        $r10 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r10;

     label7:
        $i6 = (int) -1;

        if i2 == $i6 goto label8;

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, i2);

     label8:
        return;
    }

    private void visitIfJumpRelOp(org.mozilla.javascript.Node, org.mozilla.javascript.Node, int, int)
    {
        org.mozilla.javascript.Node r1, r2, $r3;
        org.mozilla.classfile.ClassFileWriter $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        short $s3, $s7, $s10, $s13;
        org.mozilla.javascript.optimizer.BodyCodegen r4;
        int i0, i1, $i2, $i4, $i5, $i6, $i8, $i9, $i11, $i12, $i15, $i17, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i31, $i32, $i33, $i34;
        java.lang.String $r31, $r32;
        java.lang.RuntimeException $r0, $r29, $r30;

        r4 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: org.mozilla.javascript.Node;

        r2 := @parameter1: org.mozilla.javascript.Node;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i15 = (int) -1;

        if i0 == $i15 goto label01;

        $i17 = (int) -1;

        if i1 != $i17 goto label02;

     label01:
        $r0 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r0;

     label02:
        $i2 = virtualinvoke r1.<org.mozilla.javascript.Node: int getType()>();

        $r3 = virtualinvoke r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        if $i2 == 52 goto label03;

        if $i2 != 51 goto label06;

     label03:
        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r2, r1);

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r3, r1);

        $r5 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s3 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i18 = (int) $s3;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i18);

        if $i2 != 52 goto label04;

        $r31 = "instanceOf";

        goto label05;

     label04:
        $r31 = "in";

     label05:
        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>($r31, "(Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Z");

        $r6 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(154, i0);

        $r7 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, i1);

        return;

     label06:
        $i20 = (int) -1;

        $i4 = virtualinvoke r1.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i20);

        $i5 = specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: int nodeIsDirectCallParameter(org.mozilla.javascript.Node)>(r2);

        $i6 = specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: int nodeIsDirectCallParameter(org.mozilla.javascript.Node)>($r3);

        $i22 = (int) -1;

        if $i4 == $i22 goto label13;

        if $i4 == 2 goto label07;

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r2, r1);

        goto label09;

     label07:
        $i24 = (int) -1;

        if $i5 == $i24 goto label08;

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void dcpLoadAsNumber(int)>($i5);

        goto label09;

     label08:
        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r2, r1);

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void addObjectToDouble()>();

     label09:
        if $i4 == 1 goto label10;

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r3, r1);

        goto label12;

     label10:
        $i26 = (int) -1;

        if $i6 == $i26 goto label11;

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void dcpLoadAsNumber(int)>($i6);

        goto label12;

     label11:
        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r3, r1);

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void addObjectToDouble()>();

     label12:
        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void genSimpleCompare(int,int,int)>($i2, i0, i1);

        goto label23;

     label13:
        $i28 = (int) -1;

        if $i5 == $i28 goto label16;

        $i30 = (int) -1;

        if $i6 == $i30 goto label16;

        $r11 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s7 = virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        $r12 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i8 = virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r13 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i5);

        $r14 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Void", "TYPE", "Ljava/lang/Class;");

        $r15 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r15.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(166, $i8);

        $r16 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i9 = $i5 + 1;

        virtualinvoke $r16.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i9);

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void dcpLoadAsNumber(int)>($i6);

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void genSimpleCompare(int,int,int)>($i2, i0, i1);

        $r17 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s10 = virtualinvoke $r17.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        $i31 = (int) $s7;

        $i32 = (int) $s10;

        if $i31 == $i32 goto label14;

        $r30 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r30;

     label14:
        $r18 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r18.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i8);

        $r19 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i11 = virtualinvoke $r19.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r20 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r20.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i6);

        $r21 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r21.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Void", "TYPE", "Ljava/lang/Class;");

        $r22 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r22.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(166, $i11);

        $r23 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r23.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i5);

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void addObjectToDouble()>();

        $r24 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i12 = $i6 + 1;

        virtualinvoke $r24.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i12);

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void genSimpleCompare(int,int,int)>($i2, i0, i1);

        $r25 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s13 = virtualinvoke $r25.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        $i33 = (int) $s7;

        $i34 = (int) $s13;

        if $i33 == $i34 goto label15;

        $r29 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r29;

     label15:
        $r26 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r26.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i11);

        $r27 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r27.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i5);

        $r28 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r28.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i6);

        goto label17;

     label16:
        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r2, r1);

        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r3, r1);

     label17:
        if $i2 == 17 goto label18;

        if $i2 != 16 goto label19;

     label18:
        $r8 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int)>(95);

     label19:
        if $i2 == 14 goto label20;

        if $i2 != 16 goto label21;

     label20:
        $r32 = "cmp_LT";

        goto label22;

     label21:
        $r32 = "cmp_LE";

     label22:
        specialinvoke r4.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>($r32, "(Ljava/lang/Object;Ljava/lang/Object;)Z");

        $r9 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(154, i0);

        $r10 = r4.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, i1);

     label23:
        return;
    }

    private void visitIfJumpEqOp(org.mozilla.javascript.Node, org.mozilla.javascript.Node, int, int)
    {
        org.mozilla.javascript.Node r3, $r4, $r18, r30;
        org.mozilla.classfile.ClassFileWriter $r2, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r33, $r34, $r35;
        short $s0, $s5, $s14, s16, $s17;
        org.mozilla.javascript.optimizer.BodyCodegen r1;
        int $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i15, $i19, $i21, $i23, $i24, $i25;
        java.lang.String r32;
        double $d0;
        java.lang.RuntimeException $r0, $r6, $r16, $r17;

        r1 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r3 := @parameter0: org.mozilla.javascript.Node;

        r30 := @parameter1: org.mozilla.javascript.Node;

        i12 := @parameter2: int;

        i13 := @parameter3: int;

        $i19 = (int) -1;

        if i12 == $i19 goto label01;

        $i21 = (int) -1;

        if i13 != $i21 goto label02;

     label01:
        $r0 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r0;

     label02:
        $r2 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s0 = virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        $i1 = virtualinvoke r3.<org.mozilla.javascript.Node: int getType()>();

        $r4 = virtualinvoke r30.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i2 = virtualinvoke r30.<org.mozilla.javascript.Node: int getType()>();

        if $i2 == 41 goto label03;

        $i6 = virtualinvoke $r4.<org.mozilla.javascript.Node: int getType()>();

        if $i6 != 41 goto label12;

     label03:
        $i3 = virtualinvoke r30.<org.mozilla.javascript.Node: int getType()>();

        if $i3 != 41 goto label04;

        r30 = $r4;

     label04:
        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r30, r3);

        if $i1 == 45 goto label05;

        if $i1 != 46 goto label08;

     label05:
        if $i1 != 45 goto label06;

        $s14 = 198;

        goto label07;

     label06:
        $s14 = 199;

     label07:
        $r5 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>($s14, i12);

        goto label11;

     label08:
        if $i1 == 12 goto label10;

        if $i1 == 13 goto label09;

        $r16 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r16;

     label09:
        i15 = i12;

        i12 = i13;

        i13 = i15;

     label10:
        $r7 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r8 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i4 = virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r9 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(199, $i4);

        $r10 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s5 = virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        $r11 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void add(int)>(87);

        $r12 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, i12);

        $r13 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void markLabel(int,short)>($i4, $s5);

        $r14 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void pushUndefined(org.mozilla.classfile.ClassFileWriter)>($r14);

        $r15 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r15.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(165, i12);

     label11:
        $r31 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r31.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, i13);

        goto label22;

     label12:
        $i7 = specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: int nodeIsDirectCallParameter(org.mozilla.javascript.Node)>(r30);

        $i23 = (int) -1;

        if $i7 == $i23 goto label15;

        $i8 = virtualinvoke $r4.<org.mozilla.javascript.Node: int getType()>();

        if $i8 != 145 goto label15;

        $r18 = virtualinvoke $r4.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $i9 = virtualinvoke $r18.<org.mozilla.javascript.Node: int getType()>();

        if $i9 != 39 goto label15;

        $r19 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r19.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i7);

        $r20 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r20.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Void", "TYPE", "Ljava/lang/Class;");

        $r21 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i10 = virtualinvoke $r21.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r22 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r22.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(166, $i10);

        $r23 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i11 = $i7 + 1;

        virtualinvoke $r23.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i11);

        $r24 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $d0 = virtualinvoke $r18.<org.mozilla.javascript.Node: double getDouble()>();

        virtualinvoke $r24.<org.mozilla.classfile.ClassFileWriter: void addPush(double)>($d0);

        $r25 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r25.<org.mozilla.classfile.ClassFileWriter: void add(int)>(151);

        if $i1 != 12 goto label13;

        $r29 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r29.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(153, i12);

        goto label14;

     label13:
        $r26 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r26.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(154, i12);

     label14:
        $r27 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r27.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, i13);

        $r28 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r28.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i10);

     label15:
        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r30, r3);

        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r4, r3);

        lookupswitch($i1)
        {
            case 12: goto label16;
            case 13: goto label17;
            case 45: goto label18;
            case 46: goto label19;
            default: goto label20;
        };

     label16:
        r32 = "eq";

        s16 = 154;

        goto label21;

     label17:
        r32 = "eq";

        s16 = 153;

        goto label21;

     label18:
        r32 = "shallowEq";

        s16 = 154;

        goto label21;

     label19:
        r32 = "shallowEq";

        s16 = 153;

        goto label21;

     label20:
        $r17 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r17;

     label21:
        specialinvoke r1.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>(r32, "(Ljava/lang/Object;Ljava/lang/Object;)Z");

        $r33 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r33.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(s16, i12);

        $r34 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r34.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, i13);

     label22:
        $r35 = r1.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s17 = virtualinvoke $r35.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        $i24 = (int) $s0;

        $i25 = (int) $s17;

        if $i24 == $i25 goto label23;

        $r6 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r6;

     label23:
        return;
    }

    private void visitSetName(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.classfile.ClassFileWriter $r4, $r5, $r6;
        short $s0, $s1;
        org.mozilla.javascript.optimizer.BodyCodegen r3;
        org.mozilla.javascript.Node r0, $r1, r7;
        int $i2, $i3;
        java.lang.String $r2;

        r3 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r7 := @parameter1: org.mozilla.javascript.Node;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.Node: java.lang.String getString()>();

     label1:
        if r7 == null goto label2;

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r7, r0);

        r7 = virtualinvoke r7.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label1;

     label2:
        $r4 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s0 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i2 = (int) $s0;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i2);

        $r5 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s1 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i3 = (int) $s1;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i3);

        $r6 = r3.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r2);

        specialinvoke r3.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("setName", "(Lorg/mozilla/javascript/Scriptable;Ljava/lang/Object;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Ljava/lang/String;)Ljava/lang/Object;");

        return;
    }

    private void visitGetVar(org.mozilla.javascript.Node)
    {
        short $s2;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r1;
        int $i0, $i1, $i4, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1, $z2;
        org.mozilla.javascript.optimizer.OptFunctionNode $r2, $r4;
        org.mozilla.classfile.ClassFileWriter $r5, $r6;
        short[] $r3;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: org.mozilla.javascript.Node;

        $z0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs>;

        if $z0 != 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r1);

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        $s2 = $r3[$i0];

        $z1 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean varIsDirectCallParameter(int)>($i0);

        if $z1 == 0 goto label3;

        $i4 = (int) -1;

        $i1 = virtualinvoke r1.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i4);

        $i6 = (int) -1;

        if $i1 == $i6 goto label2;

        $i7 = (int) $s2;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void dcpLoadAsNumber(int)>($i7);

        goto label5;

     label2:
        $i8 = (int) $s2;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void dcpLoadAsObject(int)>($i8);

        goto label5;

     label3:
        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $z2 = virtualinvoke $r4.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isNumberVar(int)>($i0);

        if $z2 == 0 goto label4;

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i9 = (int) $s2;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i9);

        goto label5;

     label4:
        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i10 = (int) $s2;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i10);

     label5:
        return;
    }

    private void visitSetVar(org.mozilla.javascript.Node, org.mozilla.javascript.Node, boolean)
    {
        org.mozilla.javascript.Node r1, r3, $r4;
        boolean $z0, $z1, z2, $z4, $z5;
        org.mozilla.classfile.ClassFileWriter $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        short[] $r5;
        short $s4, $s6;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int $i0, $i1, $i2, $i3, $i5, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.mozilla.javascript.optimizer.OptFunctionNode $r2;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: org.mozilla.javascript.Node;

        r3 := @parameter1: org.mozilla.javascript.Node;

        z2 := @parameter2: boolean;

        $z0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean hasVarsInRegs>;

        if $z0 != 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent>;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r1);

        $r4 = virtualinvoke r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r4, r1);

        $i8 = (int) -1;

        $i1 = virtualinvoke r1.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i8);

        $i10 = (int) -1;

        if $i1 == $i10 goto label2;

        $z5 = 1;

        $z4 = 1;

        goto label3;

     label2:
        $z5 = 0;

        $z4 = 0;

     label3:
        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short[] varRegisters>;

        $s6 = $r5[$i0];

        $z1 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean varIsDirectCallParameter(int)>($i0);

        if $z1 == 0 goto label7;

        if $z4 == 0 goto label5;

        if z2 == 0 goto label4;

        $r23 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r23.<org.mozilla.classfile.ClassFileWriter: void add(int)>(92);

     label4:
        $r12 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i11 = (int) $s6;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i11);

        $r13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Void", "TYPE", "Ljava/lang/Class;");

        $r14 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i2 = virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r15 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i3 = virtualinvoke $r15.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r16 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r16.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(165, $i2);

        $r17 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s4 = virtualinvoke $r17.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

        $r18 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i12 = (int) $s6;

        virtualinvoke $r18.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i12);

        $r19 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r19.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i3);

        $r20 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r20.<org.mozilla.classfile.ClassFileWriter: void markLabel(int,short)>($i2, $s4);

        $r21 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i13 = (int) $s6;

        $i5 = $i13 + 1;

        virtualinvoke $r21.<org.mozilla.classfile.ClassFileWriter: void addDStore(int)>($i5);

        $r22 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r22.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i3);

        goto label9;

     label5:
        if z2 == 0 goto label6;

        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

     label6:
        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i14 = (int) $s6;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i14);

        goto label9;

     label7:
        if $z5 == 0 goto label8;

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i15 = (int) $s6;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void addDStore(int)>($i15);

        if z2 == 0 goto label9;

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i16 = (int) $s6;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i16);

        goto label9;

     label8:
        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i17 = (int) $s6;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i17);

        if z2 == 0 goto label9;

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i18 = (int) $s6;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i18);

     label9:
        return;
    }

    private void visitGetProp(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.classfile.ClassFileWriter $r4, $r5;
        short $s1, $s3;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r1, r2, $r3;
        int $i0, $i2, $i4, $i5;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r2 := @parameter0: org.mozilla.javascript.Node;

        r1 := @parameter1: org.mozilla.javascript.Node;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r1, r2);

        $r3 = virtualinvoke r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r3, r2);

        $i0 = virtualinvoke r1.<org.mozilla.javascript.Node: int getType()>();

        if $i0 != 42 goto label1;

        $i2 = virtualinvoke $r3.<org.mozilla.javascript.Node: int getType()>();

        if $i2 != 40 goto label1;

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i4 = (int) $s3;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i4);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getObjectProp", "(Lorg/mozilla/javascript/Scriptable;Ljava/lang/String;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label2;

     label1:
        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i5 = (int) $s1;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i5);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getObjectProp", "(Ljava/lang/Object;Ljava/lang/String;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

     label2:
        return;
    }

    private void visitSetProp(int, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        short $s2, $s4, $s5;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r1, $r2, $r3, r8;
        int i0, $i1, $i3, $i6, $i7, $i8;
        org.mozilla.classfile.ClassFileWriter $r4, $r5, $r6, $r7, $r9;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Node;

        r8 := @parameter2: org.mozilla.javascript.Node;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r8, r1);

        $r2 = virtualinvoke r8.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        if i0 != 135 goto label1;

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

     label1:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r1);

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        if i0 != 135 goto label3;

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void add(int)>(90);

        $i1 = virtualinvoke r8.<org.mozilla.javascript.Node: int getType()>();

        if $i1 != 42 goto label2;

        $i3 = virtualinvoke $r2.<org.mozilla.javascript.Node: int getType()>();

        if $i3 != 40 goto label2;

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i6 = (int) $s4;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i6);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getObjectProp", "(Lorg/mozilla/javascript/Scriptable;Ljava/lang/String;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label3;

     label2:
        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i7 = (int) $s2;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i7);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getObjectProp", "(Ljava/lang/Object;Ljava/lang/String;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

     label3:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r3, r1);

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i8 = (int) $s5;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i8);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("setObjectProp", "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        return;
    }

    private void visitSetElem(int, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        short $s2, $s3, $s4;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r1, $r2, $r3, r9;
        int i0, $i1, $i6, $i8, $i9, $i10, $i11;
        boolean z0, $z2, $z3;
        org.mozilla.classfile.ClassFileWriter $r4, $r5, $r6, $r7, $r8, $r10;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Node;

        r9 := @parameter2: org.mozilla.javascript.Node;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r9, r1);

        $r2 = virtualinvoke r9.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        if i0 != 136 goto label1;

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

     label1:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r2, r1);

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i6 = (int) -1;

        $i1 = virtualinvoke r1.<org.mozilla.javascript.Node: int getIntProp(int,int)>(8, $i6);

        $i8 = (int) -1;

        if $i1 == $i8 goto label2;

        $z3 = 1;

        $z2 = 1;

        goto label3;

     label2:
        $z3 = 0;

        $z2 = 0;

     label3:
        z0 = $z2;

        if i0 != 136 goto label5;

        if $z3 == 0 goto label4;

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void add(int)>(93);

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i9 = (int) $s3;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i9);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addOptRuntimeInvoke(java.lang.String,java.lang.String)>("getObjectIndex", "(Ljava/lang/Object;DLorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label5;

     label4:
        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void add(int)>(90);

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i10 = (int) $s2;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i10);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("getObjectElem", "(Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

     label5:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r3, r1);

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short contextLocal>;

        $i11 = (int) $s4;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i11);

        if z0 == 0 goto label6;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("setObjectIndex", "(Ljava/lang/Object;DLjava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

        goto label7;

     label6:
        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("setObjectElem", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");

     label7:
        return;
    }

    private void visitDotQuery(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        short $s0, $s1, $s3, $s4, $s5;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r1, r2, $r9;
        int $i2, $i6, $i7, $i8, $i9, $i10;
        org.mozilla.classfile.ClassFileWriter $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: org.mozilla.javascript.Node;

        r2 := @parameter1: org.mozilla.javascript.Node;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void updateLineNumber(org.mozilla.javascript.Node)>(r1);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r2, r1);

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i6 = (int) $s0;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i6);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("enterDotQuery", "(Ljava/lang/Object;Lorg/mozilla/javascript/Scriptable;)Lorg/mozilla/javascript/Scriptable;");

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i7 = (int) $s1;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i7);

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void add(int)>(1);

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i2 = virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i2);

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int)>(87);

        $r9 = virtualinvoke r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r9, r1);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toBoolean", "(Ljava/lang/Object;)Z");

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i8 = (int) $s3;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i8);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("updateDotQuery", "(ZLorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;");

        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r12 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r12.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(198, $i2);

        $r13 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i9 = (int) $s4;

        virtualinvoke $r13.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i9);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("leaveDotQuery", "(Lorg/mozilla/javascript/Scriptable;)Lorg/mozilla/javascript/Scriptable;");

        $r14 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short variableObjectLocal>;

        $i10 = (int) $s5;

        virtualinvoke $r14.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>($i10);

        return;
    }

    private int getLocalBlockRegister(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.optimizer.BodyCodegen r3;
        org.mozilla.javascript.Node r0, r2;
        int $i0;
        java.lang.Object $r1;

        r3 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.Object getProp(int)>(3);

        r2 = (org.mozilla.javascript.Node) $r1;

        $i0 = virtualinvoke r2.<org.mozilla.javascript.Node: int getExistingIntProp(int)>(2);

        return $i0;
    }

    private void dcpLoadAsNumber(int)
    {
        short $s2;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int i0, $i1, $i3, $i4;
        org.mozilla.classfile.ClassFileWriter $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r1.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(i0);

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Void", "TYPE", "Ljava/lang/Class;");

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i1 = virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(165, $i1);

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(i0);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addObjectToDouble()>();

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i3 = virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i3);

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void markLabel(int,short)>($i1, $s2);

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i4 = i0 + 1;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i4);

        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i3);

        return;
    }

    private void dcpLoadAsObject(int)
    {
        short $s2;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int i0, $i1, $i3, $i4;
        org.mozilla.classfile.ClassFileWriter $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r1.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(i0);

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Void", "TYPE", "Ljava/lang/Class;");

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i1 = virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(165, $i1);

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(i0);

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i3 = virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i3);

        $r9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r9.<org.mozilla.classfile.ClassFileWriter: void markLabel(int,short)>($i1, $s2);

        $r10 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i4 = i0 + 1;

        virtualinvoke $r10.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i4);

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addDoubleWrap()>();

        $r11 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r11.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i3);

        return;
    }

    private void addGoto(org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        org.mozilla.javascript.Node r1;
        int $i0, i1;
        org.mozilla.classfile.ClassFileWriter $r2;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: org.mozilla.javascript.Node;

        i1 := @parameter1: int;

        $i0 = specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: int getTargetLabel(org.mozilla.javascript.Node)>(r1);

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(i1, $i0);

        return;
    }

    private void addObjectToDouble()
    {
        org.mozilla.javascript.optimizer.BodyCodegen r0;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addScriptRuntimeInvoke(java.lang.String,java.lang.String)>("toNumber", "(Ljava/lang/Object;)D");

        return;
    }

    private void addNewObjectArray(int)
    {
        org.mozilla.classfile.ClassFileWriter $r1, $r2, $r3, $r4;
        short $s1, $s2;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int i0, $i3, $i4;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        i0 := @parameter0: int;

        if i0 != 0 goto label2;

        $s1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short itsZeroArgArray>;

        $i3 = (int) $s1;

        if $i3 < 0 goto label1;

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $s2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short itsZeroArgArray>;

        $i4 = (int) $s2;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i4);

        goto label3;

     label1:
        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "org/mozilla/javascript/ScriptRuntime", "emptyArgs", "[Ljava/lang/Object;");

        goto label3;

     label2:
        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r1.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i0);

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String)>(189, "java/lang/Object");

     label3:
        return;
    }

    private void addScriptRuntimeInvoke(java.lang.String, java.lang.String)
    {
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        java.lang.String r1, r2;
        org.mozilla.classfile.ClassFileWriter $r3;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, "org.mozilla.javascript.ScriptRuntime", r1, r2);

        return;
    }

    private void addOptRuntimeInvoke(java.lang.String, java.lang.String)
    {
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        java.lang.String r1, r2;
        org.mozilla.classfile.ClassFileWriter $r3;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, "org/mozilla/javascript/optimizer/OptRuntime", r1, r2);

        return;
    }

    private void addJumpedBooleanWrap(int, int)
    {
        org.mozilla.classfile.ClassFileWriter $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int i0, $i1, i2, $i4;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r1.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>(i0);

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i1 = virtualinvoke $r2.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r3.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Boolean", "FALSE", "Ljava/lang/Boolean;");

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r4.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i1);

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>(i2);

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r6.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Boolean", "TRUE", "Ljava/lang/Boolean;");

        $r7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        virtualinvoke $r7.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i1);

        $r8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw>;

        $i4 = (int) -1;

        virtualinvoke $r8.<org.mozilla.classfile.ClassFileWriter: void adjustStackTop(int)>($i4);

        return;
    }

    private void addDoubleWrap()
    {
        org.mozilla.javascript.optimizer.BodyCodegen r0;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        specialinvoke r0.<org.mozilla.javascript.optimizer.BodyCodegen: void addOptRuntimeInvoke(java.lang.String,java.lang.String)>("wrapDouble", "(D)Ljava/lang/Double;");

        return;
    }

    private short getNewWordPairLocal()
    {
        boolean $z0, $z1, $z2;
        short $s3, $s4, $s5, $s6, $s7, $s8, s9;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int $i0, $i1, $i2, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        org.mozilla.javascript.EvaluatorException $r3;
        boolean[] $r1, $r2, $r4, $r5, $r6;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        s9 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

     label1:
        $i11 = (int) s9;

        if $i11 < 255 goto label2;

        goto label4;

     label2:
        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean[] locals>;

        $i12 = (int) s9;

        $z0 = $r1[$i12];

        if $z0 != 0 goto label3;

        $r2 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean[] locals>;

        $i13 = (int) s9;

        $i1 = $i13 + 1;

        $z1 = $r2[$i1];

        if $z1 != 0 goto label3;

        goto label4;

     label3:
        $i14 = (int) s9;

        $i0 = $i14 + 1;

        s9 = (short) $i0;

        goto label1;

     label4:
        $i15 = (int) s9;

        if $i15 >= 255 goto label9;

        $r4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean[] locals>;

        $i16 = (int) s9;

        $r4[$i16] = 1;

        $r5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean[] locals>;

        $i17 = (int) s9;

        $i2 = $i17 + 1;

        $r5[$i2] = 1;

        $s3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $i18 = (int) s9;

        $i19 = (int) $s3;

        if $i18 != $i19 goto label8;

        $s4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $i20 = (int) $s4;

        i10 = $i20 + 2;

     label5:
        if i10 >= 256 goto label9;

        $r6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean[] locals>;

        $z2 = $r6[i10];

        if $z2 != 0 goto label7;

        $s5 = (short) i10;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal> = $s5;

        $s7 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short localsMax>;

        $s6 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $i21 = (int) $s7;

        $i22 = (int) $s6;

        if $i21 >= $i22 goto label6;

        $s8 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short localsMax> = $s8;

     label6:
        return s9;

     label7:
        i10 = i10 + 1;

        goto label5;

     label8:
        return s9;

     label9:
        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>("Program too complex (out of locals)");

        throw $r3;
    }

    private short getNewWordLocal()
    {
        short s0, $s1, $s2, $s3, $s4, $s5;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        int i6, $i7, $i8, $i9, $i10;
        boolean $z0;
        org.mozilla.javascript.EvaluatorException $r2;
        boolean[] $r1, $r3;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        s0 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean[] locals>;

        $i7 = (int) s0;

        $r1[$i7] = 1;

        $s1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $i8 = (int) $s1;

        i6 = $i8 + 1;

     label1:
        if i6 >= 256 goto label4;

        $r3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean[] locals>;

        $z0 = $r3[i6];

        if $z0 != 0 goto label3;

        $s2 = (short) i6;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal> = $s2;

        $s4 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short localsMax>;

        $s3 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $i9 = (int) $s4;

        $i10 = (int) $s3;

        if $i9 >= $i10 goto label2;

        $s5 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short localsMax> = $s5;

     label2:
        return s0;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $r2 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>("Program too complex (out of locals)");

        throw $r2;
    }

    private void releaseWordLocal(short)
    {
        short s0, $s1;
        org.mozilla.javascript.optimizer.BodyCodegen r0;
        boolean[] $r1;
        int $i2, $i3, $i4;

        r0 := @this: org.mozilla.javascript.optimizer.BodyCodegen;

        s0 := @parameter0: short;

        $s1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal>;

        $i2 = (int) s0;

        $i3 = (int) $s1;

        if $i2 >= $i3 goto label1;

        r0.<org.mozilla.javascript.optimizer.BodyCodegen: short firstFreeLocal> = s0;

     label1:
        $r1 = r0.<org.mozilla.javascript.optimizer.BodyCodegen: boolean[] locals>;

        $i4 = (int) s0;

        $r1[$i4] = 0;

        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.optimizer.BodyCodegen: int MAX_LOCALS> = 256;

        <org.mozilla.javascript.optimizer.BodyCodegen: int ECMAERROR_EXCEPTION> = 2;

        <org.mozilla.javascript.optimizer.BodyCodegen: int EVALUATOR_EXCEPTION> = 1;

        <org.mozilla.javascript.optimizer.BodyCodegen: int JAVASCRIPT_EXCEPTION> = 0;

        return;
    }
}
