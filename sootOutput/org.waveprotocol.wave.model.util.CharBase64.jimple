public final class org.waveprotocol.wave.model.util.CharBase64 extends java.lang.Object
{
    public static final boolean ENCODE;
    public static final boolean DECODE;
    private static final char PADDING_CHAR;
    private static final char NEW_LINE;
    public static final char[] ALPHABET;
    public static final char[] WEBSAFE_ALPHABET;
    private static final byte[] DECODABET;
    private static final byte[] WEBSAFE_DECODABET;
    private static final byte WHITE_SPACE_ENC;
    private static final byte EQUALS_SIGN_ENC;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.waveprotocol.wave.model.util.CharBase64 r0;

        r0 := @this: org.waveprotocol.wave.model.util.CharBase64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final char[] getAlphabet()
    {
        int $i0, $i1;
        char[] $r0, r1, $r2, $r3;

        $r0 = <org.waveprotocol.wave.model.util.CharBase64: char[] ALPHABET>;

        $i0 = lengthof $r0;

        r1 = newarray (char)[$i0];

        $r3 = <org.waveprotocol.wave.model.util.CharBase64: char[] ALPHABET>;

        $r2 = <org.waveprotocol.wave.model.util.CharBase64: char[] ALPHABET>;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i1);

        return r1;
    }

    public static final char[] getWebSafeAlphabet()
    {
        int $i0, $i1;
        char[] $r0, r1, $r2, $r3;

        $r0 = <org.waveprotocol.wave.model.util.CharBase64: char[] WEBSAFE_ALPHABET>;

        $i0 = lengthof $r0;

        r1 = newarray (char)[$i0];

        $r3 = <org.waveprotocol.wave.model.util.CharBase64: char[] WEBSAFE_ALPHABET>;

        $r2 = <org.waveprotocol.wave.model.util.CharBase64: char[] WEBSAFE_ALPHABET>;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i1);

        return r1;
    }

    private static char[] encode3to4(byte[], int, int, char[], int, char[])
    {
        byte[] r2;
        byte $b37, $b41, $b43;
        int i0, $i1, i2, $i3, $i5, $i6, $i8, $i9, $i10, $i12, $i13, $i15, $i16, $i18, $i19, $i21, $i22, $i23, $i25, $i26, $i27, $i29, $i30, $i32, $i33, $i34, i35, $i36, $i38, $i39, $i40, $i42, $i44, $i45, $i46, $i47, $i48, $i49, $i50;
        char $c4, $c7, $c11, $c14, $c17, $c20, $c24, $c28, $c31;
        char[] r0, r1;

        r2 := @parameter0: byte[];

        i35 := @parameter1: int;

        i0 := @parameter2: int;

        r0 := @parameter3: char[];

        i2 := @parameter4: int;

        r1 := @parameter5: char[];

        if i0 <= 0 goto label01;

        $b43 = r2[i35];

        $i48 = (int) $b43;

        $i44 = $i48 << 24;

        $i45 = $i44 >>> 8;

        goto label02;

     label01:
        $i45 = 0;

     label02:
        if i0 <= 1 goto label03;

        $i40 = i35 + 1;

        $b41 = r2[$i40];

        $i49 = (int) $b41;

        $i42 = $i49 << 24;

        $i46 = $i42 >>> 16;

        goto label04;

     label03:
        $i46 = 0;

     label04:
        $i1 = $i45 | $i46;

        if i0 <= 2 goto label05;

        $i36 = i35 + 2;

        $b37 = r2[$i36];

        $i50 = (int) $b37;

        $i38 = $i50 << 24;

        $i47 = $i38 >>> 24;

        goto label06;

     label05:
        $i47 = 0;

     label06:
        $i39 = $i1 | $i47;

        tableswitch(i0)
        {
            case 1: goto label09;
            case 2: goto label08;
            case 3: goto label07;
            default: goto label10;
        };

     label07:
        $i3 = $i39 >>> 18;

        $c4 = r1[$i3];

        r0[i2] = $c4;

        $i8 = i2 + 1;

        $i5 = $i39 >>> 12;

        $i6 = $i5 & 63;

        $c7 = r1[$i6];

        r0[$i8] = $c7;

        $i12 = i2 + 2;

        $i9 = $i39 >>> 6;

        $i10 = $i9 & 63;

        $c11 = r1[$i10];

        r0[$i12] = $c11;

        $i15 = i2 + 3;

        $i13 = $i39 & 63;

        $c14 = r1[$i13];

        r0[$i15] = $c14;

        return r0;

     label08:
        $i16 = $i39 >>> 18;

        $c17 = r1[$i16];

        r0[i2] = $c17;

        $i21 = i2 + 1;

        $i18 = $i39 >>> 12;

        $i19 = $i18 & 63;

        $c20 = r1[$i19];

        r0[$i21] = $c20;

        $i25 = i2 + 2;

        $i22 = $i39 >>> 6;

        $i23 = $i22 & 63;

        $c24 = r1[$i23];

        r0[$i25] = $c24;

        $i26 = i2 + 3;

        r0[$i26] = 61;

        return r0;

     label09:
        $i27 = $i39 >>> 18;

        $c28 = r1[$i27];

        r0[i2] = $c28;

        $i32 = i2 + 1;

        $i29 = $i39 >>> 12;

        $i30 = $i29 & 63;

        $c31 = r1[$i30];

        r0[$i32] = $c31;

        $i33 = i2 + 2;

        r0[$i33] = 61;

        $i34 = i2 + 3;

        r0[$i34] = 61;

        return r0;

     label10:
        return r0;
    }

    public static java.lang.String encode(byte[])
    {
        byte[] r0;
        int $i0;
        char[] $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = <org.waveprotocol.wave.model.util.CharBase64: char[] ALPHABET>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: java.lang.String encode(byte[],int,int,char[],boolean)>(r0, 0, $i0, $r1, 1);

        return $r2;
    }

    public static java.lang.String encodeWebSafe(byte[], boolean)
    {
        byte[] r0;
        int $i0;
        char[] $r1;
        java.lang.String $r2;
        boolean z0;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $i0 = lengthof r0;

        $r1 = <org.waveprotocol.wave.model.util.CharBase64: char[] WEBSAFE_ALPHABET>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: java.lang.String encode(byte[],int,int,char[],boolean)>(r0, 0, $i0, $r1, z0);

        return $r2;
    }

    public static java.lang.String encode(byte[], int, int, char[], boolean)
    {
        byte[] r0;
        char $c3;
        int i0, i1, $i2, i4, $i5, $i7;
        char[] r1, $r2;
        java.lang.String $r4;
        boolean z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: char[];

        z0 := @parameter4: boolean;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: char[] encode(byte[],int,int,char[],int)>(r0, i0, i1, r1, 2147483647);

        i4 = lengthof $r2;

     label1:
        if z0 != 0 goto label3;

        if i4 <= 0 goto label3;

        $i2 = i4 - 1;

        $c3 = $r2[$i2];

        $i5 = (int) $c3;

        if $i5 == 61 goto label2;

        goto label3;

     label2:
        $i7 = (int) -1;

        i4 = i4 + $i7;

        goto label1;

     label3:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r2, 0, i4);

        return $r4;
    }

    public static char[] encode(byte[], int, int, char[], int)
    {
        byte[] r2;
        byte $b14, $b18, $b24;
        boolean $z0;
        java.lang.AssertionError $r4;
        int i0, $i1, i2, i3, i4, $i5, $i6, i7, $i8, i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, i28, $i29, $i31, $i32, $i34, $i35, $i36, $i38, $i39, $i41, $i42, i43, i44, i45, i46, $i47, $i48, $i49;
        char $c30, $c33, $c37, $c40;
        char[] r0, r3;

        r2 := @parameter0: byte[];

        i9 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: char[];

        i4 := @parameter4: int;

        $i1 = i0 + 2;

        i2 = $i1 / 3;

        i3 = i2 * 4;

        $i5 = i3 / i4;

        $i6 = i3 + $i5;

        r0 = newarray (char)[$i6];

        i43 = 0;

        i44 = 0;

        i7 = i0 - 2;

        i45 = 0;

     label1:
        if i43 >= i7 goto label3;

        $i13 = i43 + i9;

        $b14 = r2[$i13];

        $i47 = (int) $b14;

        $i15 = $i47 << 24;

        $i21 = $i15 >>> 8;

        $i16 = i43 + 1;

        $i17 = $i16 + i9;

        $b18 = r2[$i17];

        $i48 = (int) $b18;

        $i19 = $i48 << 24;

        $i20 = $i19 >>> 16;

        $i27 = $i21 | $i20;

        $i22 = i43 + 2;

        $i23 = $i22 + i9;

        $b24 = r2[$i23];

        $i49 = (int) $b24;

        $i25 = $i49 << 24;

        $i26 = $i25 >>> 24;

        i28 = $i27 | $i26;

        $i29 = i28 >>> 18;

        $c30 = r3[$i29];

        r0[i44] = $c30;

        $i34 = i44 + 1;

        $i31 = i28 >>> 12;

        $i32 = $i31 & 63;

        $c33 = r3[$i32];

        r0[$i34] = $c33;

        $i38 = i44 + 2;

        $i35 = i28 >>> 6;

        $i36 = $i35 & 63;

        $c37 = r3[$i36];

        r0[$i38] = $c37;

        $i41 = i44 + 3;

        $i39 = i28 & 63;

        $c40 = r3[$i39];

        r0[$i41] = $c40;

        i45 = i45 + 4;

        if i45 != i4 goto label2;

        $i42 = i44 + 4;

        r0[$i42] = 10;

        i44 = i44 + 1;

        i45 = 0;

     label2:
        i43 = i43 + 3;

        i44 = i44 + 4;

        goto label1;

     label3:
        if i43 >= i0 goto label5;

        $i11 = i43 + i9;

        $i10 = i0 - i43;

        staticinvoke <org.waveprotocol.wave.model.util.CharBase64: char[] encode3to4(byte[],int,int,char[],int,char[])>(r2, $i11, $i10, r0, i44, r3);

        i46 = i45 + 4;

        if i46 != i4 goto label4;

        $i12 = i44 + 4;

        r0[$i12] = 10;

        i44 = i44 + 1;

     label4:
        i44 = i44 + 4;

     label5:
        $z0 = <org.waveprotocol.wave.model.util.CharBase64: boolean $assertionsDisabled>;

        if $z0 != 0 goto label6;

        $i8 = lengthof r0;

        if i44 == $i8 goto label6;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label6:
        return r0;
    }

    private static int decode4to3(char[], int, byte[], int, byte[])
    {
        byte[] r1, r2;
        byte $b6, $b10, $b16, $b22, $b28, $b30, $b32, $b35, $b39, $b45, $b50, $b52, $b55, $b59, $b64;
        char[] r0;
        int i0, $i1, $i3, $i7, $i8, $i11, $i12, $i13, $i14, $i17, $i18, $i19, $i20, $i23, $i24, $i25, i26, $i27, $i29, $i31, $i33, $i36, $i37, $i40, $i41, $i42, $i43, $i46, $i47, $i48, $i49, $i51, $i53, $i56, $i57, $i60, $i61, $i62, $i63, i65, i66, i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87;
        char $c2, $c4, $c5, $c9, $c15, $c21, $c34, $c38, $c44, $c54, $c58;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        i26 := @parameter3: int;

        r1 := @parameter4: byte[];

        $i1 = i0 + 2;

        $c2 = r0[$i1];

        $i68 = (int) $c2;

        if $i68 != 61 goto label1;

        $c54 = r0[i0];

        $i69 = (int) $c54;

        $b55 = r1[$i69];

        $i70 = (int) $b55;

        $i56 = $i70 << 24;

        $i62 = $i56 >>> 6;

        $i57 = i0 + 1;

        $c58 = r0[$i57];

        $i71 = (int) $c58;

        $b59 = r1[$i71];

        $i72 = (int) $b59;

        $i60 = $i72 << 24;

        $i61 = $i60 >>> 12;

        i65 = $i62 | $i61;

        $i63 = i65 >>> 16;

        $b64 = (byte) $i63;

        r2[i26] = $b64;

        return 1;

     label1:
        $i3 = i0 + 3;

        $c4 = r0[$i3];

        $i73 = (int) $c4;

        if $i73 != 61 goto label2;

        $c34 = r0[i0];

        $i74 = (int) $c34;

        $b35 = r1[$i74];

        $i75 = (int) $b35;

        $i36 = $i75 << 24;

        $i42 = $i36 >>> 6;

        $i37 = i0 + 1;

        $c38 = r0[$i37];

        $i76 = (int) $c38;

        $b39 = r1[$i76];

        $i77 = (int) $b39;

        $i40 = $i77 << 24;

        $i41 = $i40 >>> 12;

        $i48 = $i42 | $i41;

        $i43 = i0 + 2;

        $c44 = r0[$i43];

        $i78 = (int) $c44;

        $b45 = r1[$i78];

        $i79 = (int) $b45;

        $i46 = $i79 << 24;

        $i47 = $i46 >>> 18;

        i66 = $i48 | $i47;

        $i49 = i66 >>> 16;

        $b50 = (byte) $i49;

        r2[i26] = $b50;

        $i53 = i26 + 1;

        $i51 = i66 >>> 8;

        $b52 = (byte) $i51;

        r2[$i53] = $b52;

        return 2;

     label2:
        $c5 = r0[i0];

        $i80 = (int) $c5;

        $b6 = r1[$i80];

        $i81 = (int) $b6;

        $i7 = $i81 << 24;

        $i13 = $i7 >>> 6;

        $i8 = i0 + 1;

        $c9 = r0[$i8];

        $i82 = (int) $c9;

        $b10 = r1[$i82];

        $i83 = (int) $b10;

        $i11 = $i83 << 24;

        $i12 = $i11 >>> 12;

        $i19 = $i13 | $i12;

        $i14 = i0 + 2;

        $c15 = r0[$i14];

        $i84 = (int) $c15;

        $b16 = r1[$i84];

        $i85 = (int) $b16;

        $i17 = $i85 << 24;

        $i18 = $i17 >>> 18;

        $i25 = $i19 | $i18;

        $i20 = i0 + 3;

        $c21 = r0[$i20];

        $i86 = (int) $c21;

        $b22 = r1[$i86];

        $i87 = (int) $b22;

        $i23 = $i87 << 24;

        $i24 = $i23 >>> 24;

        i67 = $i25 | $i24;

        $i27 = i67 >> 16;

        $b28 = (byte) $i27;

        r2[i26] = $b28;

        $i31 = i26 + 1;

        $i29 = i67 >> 8;

        $b30 = (byte) $i29;

        r2[$i31] = $b30;

        $i33 = i26 + 2;

        $b32 = (byte) i67;

        r2[$i33] = $b32;

        return 3;
    }

    public static byte[] decode(java.lang.String) throws org.waveprotocol.wave.model.util.Base64DecoderException
    {
        byte[] $r2;
        int $i0;
        char[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: byte[] decode(char[],int,int)>($r1, 0, $i0);

        return $r2;
    }

    public static byte[] decodeWebSafe(java.lang.String) throws org.waveprotocol.wave.model.util.Base64DecoderException
    {
        byte[] $r2;
        int $i0;
        char[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: byte[] decodeWebSafe(char[],int,int)>($r1, 0, $i0);

        return $r2;
    }

    public static byte[] decode(char[]) throws org.waveprotocol.wave.model.util.Base64DecoderException
    {
        int $i0;
        char[] r0;
        byte[] $r1;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: byte[] decode(char[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static byte[] decodeWebSafe(char[]) throws org.waveprotocol.wave.model.util.Base64DecoderException
    {
        int $i0;
        char[] r0;
        byte[] $r1;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: byte[] decodeWebSafe(char[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static byte[] decode(char[], int, int) throws org.waveprotocol.wave.model.util.Base64DecoderException
    {
        byte[] $r1, $r2;
        int i0, i1;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.waveprotocol.wave.model.util.CharBase64: byte[] DECODABET>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: byte[] decode(char[],int,int,byte[])>(r0, i0, i1, $r1);

        return $r2;
    }

    public static byte[] decodeWebSafe(char[], int, int) throws org.waveprotocol.wave.model.util.Base64DecoderException
    {
        byte[] $r1, $r2;
        int i0, i1;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <org.waveprotocol.wave.model.util.CharBase64: byte[] WEBSAFE_DECODABET>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: byte[] decode(char[],int,int,byte[])>(r0, i0, i1, $r1);

        return $r2;
    }

    public static byte[] decode(char[], int, int, byte[]) throws org.waveprotocol.wave.model.util.Base64DecoderException
    {
        byte[] r0, r2, $r3;
        byte b23;
        java.lang.StringBuilder $r6, $r7, $r12, $r13, $r18, $r19, $r23, $r24, $r25, $r26, $r27, $r29, $r31, $r34, $r36;
        java.lang.String $r8, $r14, $r20, $r28;
        char[] r1, r9;
        boolean z0, z1, z2;
        org.waveprotocol.wave.model.util.Base64DecoderException $r30, $r32, $r33, $r35, $r37;
        int i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i9, $i10, $i11, $i12, $i16, i18, i19, i20, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i33, $i34, $i35, $i36;
        char $c8, $c13, $c14, c15, $c17, c21, c22;

        r9 := @parameter0: char[];

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: byte[];

        $i1 = i0 * 3;

        i2 = $i1 / 4;

        $i3 = 2 + i2;

        r0 = newarray (byte)[$i3];

        i18 = 0;

        r1 = newarray (char)[4];

        i19 = 0;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        i20 = 0;

     label01:
        if i20 >= i0 goto label09;

        $i7 = i20 + i6;

        c21 = r9[$i7];

        $c8 = c21 & 127;

        c22 = (char) $c8;

        $i24 = (int) c22;

        b23 = r2[$i24];

        $i25 = (int) c22;

        $i26 = (int) c21;

        if $i25 != $i26 goto label02;

        $i27 = (int) b23;

        $i29 = (int) -5;

        if $i27 >= $i29 goto label02;

        $r30 = new org.waveprotocol.wave.model.util.Base64DecoderException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad Base64 input character at ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i16 = i20 + i6;

        $c17 = r9[$i16];

        $i30 = (int) $c17;

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(decimal)");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.waveprotocol.wave.model.util.Base64DecoderException: void <init>(java.lang.String)>($r28);

        throw $r30;

     label02:
        $i31 = (int) b23;

        $i33 = (int) -1;

        if $i31 < $i33 goto label08;

        $i34 = (int) c22;

        if $i34 != 61 goto label06;

        if z2 == 0 goto label03;

        goto label08;

     label03:
        if i20 >= 2 goto label04;

        $r32 = new org.waveprotocol.wave.model.util.Base64DecoderException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid padding char found in position ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.waveprotocol.wave.model.util.Base64DecoderException: void <init>(java.lang.String)>($r20);

        throw $r32;

     label04:
        z0 = 1;

        z2 = 1;

        z1 = 1;

        $i11 = i0 - 1;

        $i12 = $i11 + i6;

        $c13 = r9[$i12];

        $c14 = $c13 & 127;

        c15 = (char) $c14;

        $i35 = (int) c15;

        if $i35 == 61 goto label05;

        $i36 = (int) c15;

        if $i36 == 10 goto label05;

        $r33 = new org.waveprotocol.wave.model.util.Base64DecoderException;

        specialinvoke $r33.<org.waveprotocol.wave.model.util.Base64DecoderException: void <init>(java.lang.String)>("encoded value has invalid trailing char");

        throw $r33;

     label05:
        goto label08;

     label06:
        if z1 == 0 goto label07;

        $r35 = new org.waveprotocol.wave.model.util.Base64DecoderException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data found after trailing padding char at index ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<org.waveprotocol.wave.model.util.Base64DecoderException: void <init>(java.lang.String)>($r14);

        throw $r35;

     label07:
        $i9 = i19;

        i19 = i19 + 1;

        r1[$i9] = c22;

        if i19 != 4 goto label08;

        $i10 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: int decode4to3(char[],int,byte[],int,byte[])>(r1, 0, r0, i18, r2);

        i18 = i18 + $i10;

        i19 = 0;

     label08:
        i20 = i20 + 1;

        goto label01;

     label09:
        if i19 == 0 goto label11;

        if i19 != 1 goto label10;

        $r37 = new org.waveprotocol.wave.model.util.Base64DecoderException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("single trailing character at offset ");

        $i5 = i0 - 1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<org.waveprotocol.wave.model.util.Base64DecoderException: void <init>(java.lang.String)>($r8);

        throw $r37;

     label10:
        r1[i19] = 61;

        $i4 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: int decode4to3(char[],int,byte[],int,byte[])>(r1, 0, r0, i18, r2);

        i18 = i18 + $i4;

     label11:
        $r3 = newarray (byte)[i18];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r3, 0, i18);

        return $r3;
    }

    static void <clinit>()
    {
        byte[] $r5, $r6;
        char[] $r2, $r4;
        java.lang.Class $r0;
        java.lang.String $r1, $r3;
        boolean $z0, $z1;

        <org.waveprotocol.wave.model.util.CharBase64: byte EQUALS_SIGN_ENC> = -1;

        <org.waveprotocol.wave.model.util.CharBase64: byte WHITE_SPACE_ENC> = -5;

        <org.waveprotocol.wave.model.util.CharBase64: char NEW_LINE> = 10;

        <org.waveprotocol.wave.model.util.CharBase64: char PADDING_CHAR> = 61;

        <org.waveprotocol.wave.model.util.CharBase64: boolean DECODE> = 0;

        <org.waveprotocol.wave.model.util.CharBase64: boolean ENCODE> = 1;

        $r0 = class "Lorg/waveprotocol/wave/model/util/CharBase64;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.util.CharBase64: boolean $assertionsDisabled> = $z1;

        $r1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        <org.waveprotocol.wave.model.util.CharBase64: char[] ALPHABET> = $r2;

        $r3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        <org.waveprotocol.wave.model.util.CharBase64: char[] WEBSAFE_ALPHABET> = $r4;

        $r5 = newarray (byte)[128];

        $r5[0] = -9;

        $r5[1] = -9;

        $r5[2] = -9;

        $r5[3] = -9;

        $r5[4] = -9;

        $r5[5] = -9;

        $r5[6] = -9;

        $r5[7] = -9;

        $r5[8] = -9;

        $r5[9] = -5;

        $r5[10] = -5;

        $r5[11] = -9;

        $r5[12] = -9;

        $r5[13] = -5;

        $r5[14] = -9;

        $r5[15] = -9;

        $r5[16] = -9;

        $r5[17] = -9;

        $r5[18] = -9;

        $r5[19] = -9;

        $r5[20] = -9;

        $r5[21] = -9;

        $r5[22] = -9;

        $r5[23] = -9;

        $r5[24] = -9;

        $r5[25] = -9;

        $r5[26] = -9;

        $r5[27] = -9;

        $r5[28] = -9;

        $r5[29] = -9;

        $r5[30] = -9;

        $r5[31] = -9;

        $r5[32] = -5;

        $r5[33] = -9;

        $r5[34] = -9;

        $r5[35] = -9;

        $r5[36] = -9;

        $r5[37] = -9;

        $r5[38] = -9;

        $r5[39] = -9;

        $r5[40] = -9;

        $r5[41] = -9;

        $r5[42] = -9;

        $r5[43] = 62;

        $r5[44] = -9;

        $r5[45] = -9;

        $r5[46] = -9;

        $r5[47] = 63;

        $r5[48] = 52;

        $r5[49] = 53;

        $r5[50] = 54;

        $r5[51] = 55;

        $r5[52] = 56;

        $r5[53] = 57;

        $r5[54] = 58;

        $r5[55] = 59;

        $r5[56] = 60;

        $r5[57] = 61;

        $r5[58] = -9;

        $r5[59] = -9;

        $r5[60] = -9;

        $r5[61] = -1;

        $r5[62] = -9;

        $r5[63] = -9;

        $r5[64] = -9;

        $r5[65] = 0;

        $r5[66] = 1;

        $r5[67] = 2;

        $r5[68] = 3;

        $r5[69] = 4;

        $r5[70] = 5;

        $r5[71] = 6;

        $r5[72] = 7;

        $r5[73] = 8;

        $r5[74] = 9;

        $r5[75] = 10;

        $r5[76] = 11;

        $r5[77] = 12;

        $r5[78] = 13;

        $r5[79] = 14;

        $r5[80] = 15;

        $r5[81] = 16;

        $r5[82] = 17;

        $r5[83] = 18;

        $r5[84] = 19;

        $r5[85] = 20;

        $r5[86] = 21;

        $r5[87] = 22;

        $r5[88] = 23;

        $r5[89] = 24;

        $r5[90] = 25;

        $r5[91] = -9;

        $r5[92] = -9;

        $r5[93] = -9;

        $r5[94] = -9;

        $r5[95] = -9;

        $r5[96] = -9;

        $r5[97] = 26;

        $r5[98] = 27;

        $r5[99] = 28;

        $r5[100] = 29;

        $r5[101] = 30;

        $r5[102] = 31;

        $r5[103] = 32;

        $r5[104] = 33;

        $r5[105] = 34;

        $r5[106] = 35;

        $r5[107] = 36;

        $r5[108] = 37;

        $r5[109] = 38;

        $r5[110] = 39;

        $r5[111] = 40;

        $r5[112] = 41;

        $r5[113] = 42;

        $r5[114] = 43;

        $r5[115] = 44;

        $r5[116] = 45;

        $r5[117] = 46;

        $r5[118] = 47;

        $r5[119] = 48;

        $r5[120] = 49;

        $r5[121] = 50;

        $r5[122] = 51;

        $r5[123] = -9;

        $r5[124] = -9;

        $r5[125] = -9;

        $r5[126] = -9;

        $r5[127] = -9;

        <org.waveprotocol.wave.model.util.CharBase64: byte[] DECODABET> = $r5;

        $r6 = newarray (byte)[128];

        $r6[0] = -9;

        $r6[1] = -9;

        $r6[2] = -9;

        $r6[3] = -9;

        $r6[4] = -9;

        $r6[5] = -9;

        $r6[6] = -9;

        $r6[7] = -9;

        $r6[8] = -9;

        $r6[9] = -5;

        $r6[10] = -5;

        $r6[11] = -9;

        $r6[12] = -9;

        $r6[13] = -5;

        $r6[14] = -9;

        $r6[15] = -9;

        $r6[16] = -9;

        $r6[17] = -9;

        $r6[18] = -9;

        $r6[19] = -9;

        $r6[20] = -9;

        $r6[21] = -9;

        $r6[22] = -9;

        $r6[23] = -9;

        $r6[24] = -9;

        $r6[25] = -9;

        $r6[26] = -9;

        $r6[27] = -9;

        $r6[28] = -9;

        $r6[29] = -9;

        $r6[30] = -9;

        $r6[31] = -9;

        $r6[32] = -5;

        $r6[33] = -9;

        $r6[34] = -9;

        $r6[35] = -9;

        $r6[36] = -9;

        $r6[37] = -9;

        $r6[38] = -9;

        $r6[39] = -9;

        $r6[40] = -9;

        $r6[41] = -9;

        $r6[42] = -9;

        $r6[43] = -9;

        $r6[44] = -9;

        $r6[45] = 62;

        $r6[46] = -9;

        $r6[47] = -9;

        $r6[48] = 52;

        $r6[49] = 53;

        $r6[50] = 54;

        $r6[51] = 55;

        $r6[52] = 56;

        $r6[53] = 57;

        $r6[54] = 58;

        $r6[55] = 59;

        $r6[56] = 60;

        $r6[57] = 61;

        $r6[58] = -9;

        $r6[59] = -9;

        $r6[60] = -9;

        $r6[61] = -1;

        $r6[62] = -9;

        $r6[63] = -9;

        $r6[64] = -9;

        $r6[65] = 0;

        $r6[66] = 1;

        $r6[67] = 2;

        $r6[68] = 3;

        $r6[69] = 4;

        $r6[70] = 5;

        $r6[71] = 6;

        $r6[72] = 7;

        $r6[73] = 8;

        $r6[74] = 9;

        $r6[75] = 10;

        $r6[76] = 11;

        $r6[77] = 12;

        $r6[78] = 13;

        $r6[79] = 14;

        $r6[80] = 15;

        $r6[81] = 16;

        $r6[82] = 17;

        $r6[83] = 18;

        $r6[84] = 19;

        $r6[85] = 20;

        $r6[86] = 21;

        $r6[87] = 22;

        $r6[88] = 23;

        $r6[89] = 24;

        $r6[90] = 25;

        $r6[91] = -9;

        $r6[92] = -9;

        $r6[93] = -9;

        $r6[94] = -9;

        $r6[95] = 63;

        $r6[96] = -9;

        $r6[97] = 26;

        $r6[98] = 27;

        $r6[99] = 28;

        $r6[100] = 29;

        $r6[101] = 30;

        $r6[102] = 31;

        $r6[103] = 32;

        $r6[104] = 33;

        $r6[105] = 34;

        $r6[106] = 35;

        $r6[107] = 36;

        $r6[108] = 37;

        $r6[109] = 38;

        $r6[110] = 39;

        $r6[111] = 40;

        $r6[112] = 41;

        $r6[113] = 42;

        $r6[114] = 43;

        $r6[115] = 44;

        $r6[116] = 45;

        $r6[117] = 46;

        $r6[118] = 47;

        $r6[119] = 48;

        $r6[120] = 49;

        $r6[121] = 50;

        $r6[122] = 51;

        $r6[123] = -9;

        $r6[124] = -9;

        $r6[125] = -9;

        $r6[126] = -9;

        $r6[127] = -9;

        <org.waveprotocol.wave.model.util.CharBase64: byte[] WEBSAFE_DECODABET> = $r6;

        return;
    }
}
