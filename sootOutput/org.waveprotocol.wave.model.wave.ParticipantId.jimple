public final class org.waveprotocol.wave.model.wave.ParticipantId extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.lang.String DOMAIN_PREFIX;
    private final java.lang.String address;

    public void <init>(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        java.lang.String $r1, r2;

        r0 := @this: org.waveprotocol.wave.model.wave.ParticipantId;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "Non-null address expected");

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String normalize(java.lang.String)>(r2);

        r0.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String address> = $r1;

        return;
    }

    private static java.lang.String normalize(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        return $r1;
    }

    private static void validate(java.lang.String) throws org.waveprotocol.wave.model.wave.InvalidParticipantAddress
    {
        org.waveprotocol.wave.model.wave.InvalidParticipantAddress $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Expected non-null address");

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("@");

        if $i0 >= 0 goto label1;

        $r3 = new org.waveprotocol.wave.model.wave.InvalidParticipantAddress;

        specialinvoke $r3.<org.waveprotocol.wave.model.wave.InvalidParticipantAddress: void <init>(java.lang.String,java.lang.String)>(r0, "Missing domain prefix: @");

        throw $r3;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        if $i0 < $i2 goto label2;

        $r2 = new org.waveprotocol.wave.model.wave.InvalidParticipantAddress;

        specialinvoke $r2.<org.waveprotocol.wave.model.wave.InvalidParticipantAddress: void <init>(java.lang.String,java.lang.String)>(r0, "Missing domain");

        throw $r2;

     label2:
        $i3 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>("@");

        if $i0 == $i3 goto label3;

        $r1 = new org.waveprotocol.wave.model.wave.InvalidParticipantAddress;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.InvalidParticipantAddress: void <init>(java.lang.String,java.lang.String)>(r0, "Multiple domain prefixes: @");

        throw $r1;

     label3:
        return;
    }

    public java.lang.String getAddress()
    {
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String address>;

        return $r1;
    }

    public java.lang.String getDomain()
    {
        int $i0, $i1;
        java.lang.String[] $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        java.lang.String $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String address>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("@");

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        $r3 = $r2[$i1];

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1, r2;
        java.lang.String $r3, $r4;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.wave.ParticipantId;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.model.wave.ParticipantId;

        if $z0 == 0 goto label2;

        r2 = (org.waveprotocol.wave.model.wave.ParticipantId) r0;

        $r4 = r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String address>;

        $r3 = r2.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String address>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String address>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        return $r1;
    }

    public static org.waveprotocol.wave.model.wave.ParticipantId of(java.lang.String) throws org.waveprotocol.wave.model.wave.InvalidParticipantAddress
    {
        java.lang.String r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: void validate(java.lang.String)>(r0);

        $r1 = new org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.wave.ParticipantId ofUnsafe(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.InvalidParticipantAddress $r2;
        java.lang.String r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId of(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch org.waveprotocol.wave.model.wave.InvalidParticipantAddress from label1 to label2 with label3;
    }

    public int compareTo(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.String[] $r2, $r5;
        org.waveprotocol.wave.model.wave.ParticipantId r0, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r1, $r4, $r6, $r7;

        r0 := @this: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String address>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("@");

        $r4 = r3.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String address>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("@");

        $i1 = lengthof $r2;

        $i0 = lengthof $r5;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        i7 = 0;

     label1:
        if i7 >= $i2 goto label3;

        $r7 = $r2[i7];

        $r6 = $r5[i7];

        $i6 = virtualinvoke $r7.<java.lang.String: int compareTo(java.lang.String)>($r6);

        if $i6 == 0 goto label2;

        return $i6;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $i4 = lengthof $r2;

        $i3 = lengthof $r5;

        $i5 = $i4 - $i3;

        return $i5;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.ParticipantId r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.ParticipantId;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.ParticipantId) r1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ParticipantId: int compareTo(org.waveprotocol.wave.model.wave.ParticipantId)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String DOMAIN_PREFIX> = "@";

        <org.waveprotocol.wave.model.wave.ParticipantId: long serialVersionUID> = -1465142562958113670L;

        return;
    }
}
