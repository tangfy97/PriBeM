public class com.mongodb.RawDBObject extends java.lang.Object implements com.mongodb.DBObject
{
    static boolean DEBUG;
    final java.nio.ByteBuffer _buf;
    final int _offset;
    final int _end;
    private static final byte[] _cStrBuf;

    void <init>(java.nio.ByteBuffer)
    {
        com.mongodb.RawDBObject r0;
        int $i0, $i1;
        java.nio.ByteBuffer r1, $r2;

        r0 := @this: com.mongodb.RawDBObject;

        r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<com.mongodb.RawDBObject: void <init>(java.nio.ByteBuffer,int)>(r1, 0);

        $i0 = r0.<com.mongodb.RawDBObject: int _end>;

        $r2 = r0.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int limit()>();

        staticinvoke <com.mongodb.util.MyAsserts: void assertEquals(int,int)>($i0, $i1);

        return;
    }

    void <init>(java.nio.ByteBuffer, int)
    {
        com.mongodb.RawDBObject r0;
        int i0, $i1, $i2;
        java.nio.ByteBuffer r1, $r2;

        r0 := @this: com.mongodb.RawDBObject;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf> = r1;

        r0.<com.mongodb.RawDBObject: int _offset> = i0;

        $r2 = r0.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $i1 = r0.<com.mongodb.RawDBObject: int _offset>;

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt(int)>($i1);

        r0.<com.mongodb.RawDBObject: int _end> = $i2;

        return;
    }

    public java.lang.Object get(java.lang.String)
    {
        com.mongodb.RawDBObject r0;
        java.lang.Object $r3;
        java.lang.String r1;
        com.mongodb.RawDBObject$Element $r2;

        r0 := @this: com.mongodb.RawDBObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.mongodb.RawDBObject: com.mongodb.RawDBObject$Element findElement(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<com.mongodb.RawDBObject$Element: java.lang.Object getObject()>();

        return $r3;
    }

    public java.util.Map toMap()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r0;
        com.mongodb.RawDBObject r1;
        java.lang.Object $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r1 := @this: com.mongodb.RawDBObject;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<com.mongodb.RawDBObject: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r1.<com.mongodb.RawDBObject: java.lang.Object get(java.lang.String)>($r8);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r9);

        goto label1;

     label2:
        return $r0;
    }

    public java.lang.Object put(java.lang.String, java.lang.Object)
    {
        com.mongodb.RawDBObject r1;
        java.lang.Object r3;
        java.lang.RuntimeException $r0;
        java.lang.String r2;

        r1 := @this: com.mongodb.RawDBObject;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("read only");

        throw $r0;
    }

    public void putAll(org.bson.BSONObject)
    {
        org.bson.BSONObject r2;
        java.lang.RuntimeException $r0;
        com.mongodb.RawDBObject r1;

        r1 := @this: com.mongodb.RawDBObject;

        r2 := @parameter0: org.bson.BSONObject;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("read only");

        throw $r0;
    }

    public void putAll(java.util.Map)
    {
        java.lang.RuntimeException $r0;
        com.mongodb.RawDBObject r1;
        java.util.Map r2;

        r1 := @this: com.mongodb.RawDBObject;

        r2 := @parameter0: java.util.Map;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("read only");

        throw $r0;
    }

    public java.lang.Object removeField(java.lang.String)
    {
        java.lang.RuntimeException $r0;
        java.lang.String r2;
        com.mongodb.RawDBObject r1;

        r1 := @this: com.mongodb.RawDBObject;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("read only");

        throw $r0;
    }

    public boolean containsKey(java.lang.String)
    {
        java.lang.String r1;
        com.mongodb.RawDBObject r0;
        boolean $z0;

        r0 := @this: com.mongodb.RawDBObject;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.mongodb.RawDBObject: boolean containsField(java.lang.String)>(r1);

        return $z0;
    }

    public boolean containsField(java.lang.String)
    {
        com.mongodb.RawDBObject r0;
        java.lang.String r1;
        com.mongodb.RawDBObject$Element $r2;
        boolean $z0;

        r0 := @this: com.mongodb.RawDBObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.mongodb.RawDBObject: com.mongodb.RawDBObject$Element findElement(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Set keySet()
    {
        java.util.HashSet $r0;
        com.mongodb.RawDBObject$ElementIter $r1;
        com.mongodb.RawDBObject r2;
        java.lang.String $r4;
        boolean $z0, $z1;
        com.mongodb.RawDBObject$Element $r3;

        r2 := @this: com.mongodb.RawDBObject;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r1 = new com.mongodb.RawDBObject$ElementIter;

        specialinvoke $r1.<com.mongodb.RawDBObject$ElementIter: void <init>(com.mongodb.RawDBObject)>(r2);

     label1:
        $z0 = virtualinvoke $r1.<com.mongodb.RawDBObject$ElementIter: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r1.<com.mongodb.RawDBObject$ElementIter: com.mongodb.RawDBObject$Element next()>();

        $z1 = virtualinvoke $r3.<com.mongodb.RawDBObject$Element: boolean eoo()>();

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        $r4 = virtualinvoke $r3.<com.mongodb.RawDBObject$Element: java.lang.String fieldName()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r4);

        goto label1;

     label3:
        return $r0;
    }

    java.lang.String _readCStr(int)
    {
        int i0;
        java.lang.String $r1;
        com.mongodb.RawDBObject r0;

        r0 := @this: com.mongodb.RawDBObject;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.mongodb.RawDBObject: java.lang.String _readCStr(int,int[])>(i0, null);

        return $r1;
    }

    java.lang.String _readCStr(int, int[])
    {
        byte[] $r0, $r5, $r6, $r25, $r31;
        java.nio.ByteBuffer $r2, $r4, $r7, $r19, $r20;
        byte $b2, $b6, $b12;
        int[] r3;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r22, $r23, $r26, $r27;
        java.lang.Throwable $r29;
        com.mongodb.RawDBObject r1;
        int i0, $i1, $i3, $i4, $i5, $i7, $i8, $i9, i10, $i11, i14, i15;
        java.lang.String $r18, $r24, $r28, $r30;
        char $c13;
        java.lang.IllegalArgumentException $r9, $r21;

        r1 := @this: com.mongodb.RawDBObject;

        i0 := @parameter0: int;

        r3 := @parameter1: int[];

        $r0 = <com.mongodb.RawDBObject: byte[] _cStrBuf>;

        entermonitor $r0;

     label01:
        i14 = 0;

     label02:
        $r2 = r1.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $i1 = i14 + i0;

        $b2 = virtualinvoke $r2.<java.nio.ByteBuffer: byte get(int)>($i1);

        if $b2 == 0 goto label07;

        $r5 = <com.mongodb.RawDBObject: byte[] _cStrBuf>;

        $r4 = r1.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $i5 = i14 + i0;

        $b6 = virtualinvoke $r4.<java.nio.ByteBuffer: byte get(int)>($i5);

        $r5[i14] = $b6;

        i14 = i14 + 1;

        $r6 = <com.mongodb.RawDBObject: byte[] _cStrBuf>;

        $i7 = lengthof $r6;

        if i14 < $i7 goto label03;

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c string too big for RawDBObject.  so far[");

        $r24 = new java.lang.String;

        $r25 = <com.mongodb.RawDBObject: byte[] _cStrBuf>;

        specialinvoke $r24.<java.lang.String: void <init>(byte[])>($r25);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label03:
        $i8 = i14 + i0;

        $r7 = r1.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $i9 = virtualinvoke $r7.<java.nio.ByteBuffer: int limit()>();

        if $i8 < $i9 goto label02;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        i15 = 0;

     label04:
        if i15 >= 10 goto label06;

        i10 = i0 + i15;

        $r19 = r1.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $i11 = virtualinvoke $r19.<java.nio.ByteBuffer: int limit()>();

        if i10 < $i11 goto label05;

        goto label06;

     label05:
        $r20 = r1.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $b12 = virtualinvoke $r20.<java.nio.ByteBuffer: byte get(int)>(i10);

        $c13 = (char) $b12;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13);

        i15 = i15 + 1;

        goto label04;

     label06:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t find end of cstring.  start:");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pos: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r9;

     label07:
        if r3 == null goto label08;

        $i3 = lengthof r3;

        if $i3 <= 0 goto label08;

        $i4 = i0 + i14;

        r3[0] = $i4;

     label08:
        $r30 = new java.lang.String;

        $r31 = <com.mongodb.RawDBObject: byte[] _cStrBuf>;

        specialinvoke $r30.<java.lang.String: void <init>(byte[],int,int)>($r31, 0, i14);

        exitmonitor $r0;

     label09:
        return $r30;

     label10:
        $r29 := @caughtexception;

        exitmonitor $r0;

     label11:
        throw $r29;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    java.lang.String _readJavaString(int)
    {
        byte[] r2;
        java.nio.ByteBuffer $r1, $r3, $r4, $r5, $r6;
        com.mongodb.RawDBObject r0;
        int i0, $i1, i2, $i3, $i4, $i5;
        java.lang.String $r7, $r9;
        java.io.UnsupportedEncodingException $r8;

        r0 := @this: com.mongodb.RawDBObject;

        i0 := @parameter0: int;

        $r1 = r0.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int getInt(int)>(i0);

        i2 = $i1 - 1;

        r2 = newarray (byte)[i2];

        $r3 = r0.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $i3 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        $r4 = r0.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $i4 = i0 + 4;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

        $r5 = r0.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $i5 = lengthof r2;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r2, 0, $i5);

        $r6 = r0.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i3);

     label1:
        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(byte[],java.lang.String)>(r2, "UTF-8");

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>(byte[])>(r2);

        return $r9;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    int _cStrLength(int)
    {
        byte $b1;
        com.mongodb.RawDBObject r0;
        int i0, $i2, $i3, i4;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.mongodb.RawDBObject;

        i0 := @parameter0: int;

        i4 = i0;

     label1:
        $r1 = r0.<com.mongodb.RawDBObject: java.nio.ByteBuffer _buf>;

        $b1 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get(int)>(i4);

        if $b1 == 0 goto label2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $i2 = i4 - i0;

        $i3 = 1 + $i2;

        return $i3;
    }

    com.mongodb.RawDBObject$Element findElement(java.lang.String)
    {
        com.mongodb.RawDBObject$ElementIter $r0;
        com.mongodb.RawDBObject r1;
        java.lang.String $r3, r4;
        boolean $z0, $z1;
        com.mongodb.RawDBObject$Element $r2;

        r1 := @this: com.mongodb.RawDBObject;

        r4 := @parameter0: java.lang.String;

        $r0 = new com.mongodb.RawDBObject$ElementIter;

        specialinvoke $r0.<com.mongodb.RawDBObject$ElementIter: void <init>(com.mongodb.RawDBObject)>(r1);

     label1:
        $z0 = virtualinvoke $r0.<com.mongodb.RawDBObject$ElementIter: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke $r0.<com.mongodb.RawDBObject$ElementIter: com.mongodb.RawDBObject$Element next()>();

        $r3 = virtualinvoke $r2.<com.mongodb.RawDBObject$Element: java.lang.String fieldName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        return $r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public boolean isPartialObject()
    {
        com.mongodb.RawDBObject r0;

        r0 := @this: com.mongodb.RawDBObject;

        return 0;
    }

    public void markAsPartialObject()
    {
        java.lang.RuntimeException $r0;
        com.mongodb.RawDBObject r1;

        r1 := @this: com.mongodb.RawDBObject;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("RawDBObject can\'t be a partial object");

        throw $r0;
    }

    public java.lang.String toString()
    {
        com.mongodb.RawDBObject r0;

        r0 := @this: com.mongodb.RawDBObject;

        return "Object";
    }

    static void <clinit>()
    {
        byte[] $r0;
        boolean $z0;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("DEBUG.DBJSO");

        <com.mongodb.RawDBObject: boolean DEBUG> = $z0;

        $r0 = newarray (byte)[1024];

        <com.mongodb.RawDBObject: byte[] _cStrBuf> = $r0;

        return;
    }
}
