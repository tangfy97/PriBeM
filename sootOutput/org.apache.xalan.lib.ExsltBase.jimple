public abstract class org.apache.xalan.lib.ExsltBase extends java.lang.Object
{

    public void <init>()
    {
        org.apache.xalan.lib.ExsltBase r0;

        r0 := @this: org.apache.xalan.lib.ExsltBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static java.lang.String toString(org.w3c.dom.Node)
    {
        org.w3c.dom.NodeList $r2;
        java.lang.StringBuffer $r3;
        org.w3c.dom.Node r0, $r4;
        org.apache.xml.dtm.ref.DTMNodeProxy $r7;
        int $i0, i1;
        java.lang.String $r1, $r5, $r6, $r8;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Node;

        $z0 = r0 instanceof org.apache.xml.dtm.ref.DTMNodeProxy;

        if $z0 == 0 goto label1;

        $r7 = (org.apache.xml.dtm.ref.DTMNodeProxy) r0;

        $r8 = virtualinvoke $r7.<org.apache.xml.dtm.ref.DTMNodeProxy: java.lang.String getStringValue()>();

        return $r8;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        if $r1 != null goto label4;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

        goto label3;

     label2:
        $r4 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $r5 = staticinvoke <org.apache.xalan.lib.ExsltBase: java.lang.String toString(org.w3c.dom.Node)>($r4);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        i1 = i1 + 1;

     label3:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i0 goto label2;

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;

     label4:
        return $r1;
    }

    protected static double toNumber(org.w3c.dom.Node)
    {
        java.lang.Double $r2;
        org.w3c.dom.Node r0;
        java.lang.NumberFormatException $r3;
        java.lang.String $r1;
        double d0;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = staticinvoke <org.apache.xalan.lib.ExsltBase: java.lang.String toString(org.w3c.dom.Node)>(r0);

     label1:
        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r1);

        d0 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        d0 = #NaN;

     label4:
        return d0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
}
