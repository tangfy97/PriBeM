public class org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory extends org.apache.lucene.analysis.util.TokenFilterFactory implements org.apache.lucene.analysis.util.ResourceLoaderAware
{
    private final boolean ignoreCase;
    private final boolean enablePositionIncrements;
    private final java.lang.String wordFiles;
    private org.apache.lucene.analysis.util.CharArraySet words;

    public void <init>(java.util.Map)
    {
        java.lang.IllegalArgumentException $r3;
        java.util.Map r1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r2, $r7;
        org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.lucene.analysis.util.TokenFilterFactory: void <init>(java.util.Map)>(r1);

        virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: void assureMatchVersion()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: java.lang.String get(java.util.Map,java.lang.String)>(r1, "words");

        r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: java.lang.String wordFiles> = $r2;

        $z0 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "ignoreCase", 0);

        r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: boolean ignoreCase> = $z0;

        $z1 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: boolean getBoolean(java.util.Map,java.lang.String,boolean)>(r1, "enablePositionIncrements", 0);

        r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: boolean enablePositionIncrements> = $z1;

        $z2 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown parameters: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return;
    }

    public void inform(org.apache.lucene.analysis.util.ResourceLoader) throws java.io.IOException
    {
        org.apache.lucene.analysis.util.ResourceLoader r2;
        org.apache.lucene.analysis.util.CharArraySet $r4;
        java.lang.String $r1, $r3;
        org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory;

        r2 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: java.lang.String wordFiles>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: java.lang.String wordFiles>;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: boolean ignoreCase>;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: org.apache.lucene.analysis.util.CharArraySet getWordSet(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String,boolean)>(r2, $r3, $z0);

        r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: org.apache.lucene.analysis.util.CharArraySet words> = $r4;

     label1:
        return;
    }

    public boolean isEnablePositionIncrements()
    {
        org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: boolean enablePositionIncrements>;

        return $z0;
    }

    public boolean isIgnoreCase()
    {
        org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: boolean ignoreCase>;

        return $z0;
    }

    public org.apache.lucene.analysis.util.CharArraySet getWords()
    {
        org.apache.lucene.analysis.util.CharArraySet $r1;
        org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory r0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: org.apache.lucene.analysis.util.CharArraySet words>;

        return $r1;
    }

    public org.apache.lucene.analysis.TokenStream create(org.apache.lucene.analysis.TokenStream)
    {
        org.apache.lucene.analysis.TokenStream r2, $r4;
        org.apache.lucene.analysis.util.CharArraySet $r1, $r3;
        org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory r0;
        org.apache.lucene.analysis.miscellaneous.KeepWordFilter $r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory;

        r2 := @parameter0: org.apache.lucene.analysis.TokenStream;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: org.apache.lucene.analysis.util.CharArraySet words>;

        if $r1 != null goto label1;

        $r4 = r2;

        goto label2;

     label1:
        $r5 = new org.apache.lucene.analysis.miscellaneous.KeepWordFilter;

        $r4 = $r5;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: boolean enablePositionIncrements>;

        $r3 = r0.<org.apache.lucene.analysis.miscellaneous.KeepWordFilterFactory: org.apache.lucene.analysis.util.CharArraySet words>;

        specialinvoke $r5.<org.apache.lucene.analysis.miscellaneous.KeepWordFilter: void <init>(boolean,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.util.CharArraySet)>($z0, r2, $r3);

     label2:
        return $r4;
    }
}
