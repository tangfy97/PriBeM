public class org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil extends java.lang.Object
{
    public static final int NO_FLAG;
    public static final int LBRACE_MISSING;
    public static final int IGNORE;

    public void <init>()
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean containsErrorInSignature(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)
    {
        int $i0, $i1, $i2, $i3, $i4;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int sourceEnd>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart>;

        if $i2 == $i1 goto label1;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyEnd>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceEnd>;

        if $i4 == $i3 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static int[][] computeDietRange(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[])
    {
        int[][] $r1, $r3;
        int $i0;
        org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult $r2;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] r0;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r1 = newmultiarray (int)[3][0];

        return $r1;

     label2:
        $r2 = new org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult;

        specialinvoke $r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: void <init>()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil: void computeDietRange0(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[],org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult)>(r0, $r2);

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: int[][] getRanges()>();

        return $r3;
    }

    private static void computeDietRange0(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[], org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult r6;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] $r7;
        byte $b23;
        org.eclipse.jdt.internal.compiler.ast.FieldDeclaration $r4, $r5;
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration $r1, $r3, $r8, $r10;
        org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] r0, r2, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i24, i25, $i26;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] $r11;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r12;
        org.eclipse.jdt.internal.compiler.ast.Initializer r13;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[];

        r6 := @parameter1: org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult;

        i20 = 0;

        goto label15;

     label01:
        $r1 = r0[i20];

        r2 = $r1.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        if r2 == null goto label02;

        $i19 = lengthof r2;

        if $i19 <= 0 goto label02;

        $r8 = r0[i20];

        $r9 = $r8.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] memberTypes>;

        staticinvoke <org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil: void computeDietRange0(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration[],org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult)>($r9, r6);

     label02:
        $r10 = r0[i20];

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods>;

        if $r11 == null goto label09;

        i21 = lengthof $r11;

        i22 = 0;

        goto label08;

     label03:
        r12 = $r11[i22];

        $z1 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil: boolean containsIgnoredBody(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)>(r12);

        if $z1 == 0 goto label07;

        $z2 = staticinvoke <org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil: boolean containsErrorInSignature(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)>(r12);

        if $z2 == 0 goto label04;

        $i15 = r12.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bits>;

        $i16 = $i15 | 32;

        r12.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bits> = $i16;

        $i18 = r12.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceStart>;

        $i17 = r12.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int declarationSourceEnd>;

        virtualinvoke r6.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: void addInterval(int,int,int)>($i18, $i17, 2);

        goto label07;

     label04:
        $i10 = r12.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int sourceEnd>;

        $i12 = $i10 + 1;

        $i11 = r12.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart>;

        if $i12 != $i11 goto label05;

        $b23 = 1;

        goto label06;

     label05:
        $b23 = 0;

     label06:
        $i14 = r12.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyStart>;

        $i13 = r12.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int bodyEnd>;

        virtualinvoke r6.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: void addInterval(int,int,int)>($i14, $i13, $b23);

     label07:
        i22 = i22 + 1;

     label08:
        if i22 < i21 goto label03;

     label09:
        $r3 = r0[i20];

        $r7 = $r3.<org.eclipse.jdt.internal.compiler.ast.TypeDeclaration: org.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields>;

        if $r7 == null goto label14;

        i24 = lengthof $r7;

        i25 = 0;

        goto label13;

     label10:
        $r4 = $r7[i25];

        $z0 = $r4 instanceof org.eclipse.jdt.internal.compiler.ast.Initializer;

        if $z0 == 0 goto label12;

        $r5 = $r7[i25];

        r13 = (org.eclipse.jdt.internal.compiler.ast.Initializer) $r5;

        $i1 = r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        $i0 = r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bodyEnd>;

        if $i1 != $i0 goto label11;

        $i5 = r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceStart>;

        $i4 = r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        if $i5 == $i4 goto label11;

        $i6 = r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bits>;

        $i7 = $i6 | 32;

        r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bits> = $i7;

        $i9 = r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceStart>;

        $i8 = r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int declarationSourceEnd>;

        virtualinvoke r6.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: void addInterval(int,int,int)>($i9, $i8, 2);

        goto label12;

     label11:
        $i3 = r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bodyStart>;

        $i2 = r13.<org.eclipse.jdt.internal.compiler.ast.Initializer: int bodyEnd>;

        virtualinvoke r6.<org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil$RangeResult: void addInterval(int,int)>($i3, $i2);

     label12:
        i25 = i25 + 1;

     label13:
        if i25 < i24 goto label10;

     label14:
        i20 = i20 + 1;

     label15:
        $i26 = lengthof r0;

        if i20 < $i26 goto label01;

        return;
    }

    public static boolean containsIgnoredBody(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration)
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isDefaultConstructor()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: boolean isClinit()>();

        if $z1 != 0 goto label1;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration: int modifiers>;

        $i1 = $i0 & 16777216;

        if $i1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil: int IGNORE> = 2;

        <org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil: int LBRACE_MISSING> = 1;

        <org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil: int NO_FLAG> = 0;

        return;
    }
}
