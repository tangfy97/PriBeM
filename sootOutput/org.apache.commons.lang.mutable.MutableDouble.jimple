public class org.apache.commons.lang.mutable.MutableDouble extends java.lang.Number implements java.lang.Comparable, org.apache.commons.lang.mutable.Mutable
{
    private static final long serialVersionUID;
    private double value;

    public void <init>()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        return;
    }

    public void <init>(double)
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        double d0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<org.apache.commons.lang.mutable.MutableDouble: double value> = d0;

        return;
    }

    public void <init>(java.lang.Number)
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        java.lang.Number r1;
        double $d0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        r1 := @parameter0: java.lang.Number;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        r0.<org.apache.commons.lang.mutable.MutableDouble: double value> = $d0;

        return;
    }

    public java.lang.Object getValue()
    {
        org.apache.commons.lang.mutable.MutableDouble r1;
        java.lang.Double $r0;
        double $d0;

        r1 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $r0 = new java.lang.Double;

        $d0 = r1.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>($d0);

        return $r0;
    }

    public void setValue(double)
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        double d0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        d0 := @parameter0: double;

        r0.<org.apache.commons.lang.mutable.MutableDouble: double value> = d0;

        return;
    }

    public void setValue(java.lang.Object)
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        java.lang.Object r1;
        java.lang.Number $r2;
        double $d0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Number) r1;

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        virtualinvoke r0.<org.apache.commons.lang.mutable.MutableDouble: void setValue(double)>($d0);

        return;
    }

    public int intValue()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $i0 = (int) $d0;

        return $i0;
    }

    public long longValue()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        long $l0;
        double $d0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $l0 = (long) $d0;

        return $l0;
    }

    public float floatValue()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        float $f0;
        double $d0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $f0 = (float) $d0;

        return $f0;
    }

    public double doubleValue()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        double $d0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        return $d0;
    }

    public boolean isNaN()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        return $z0;
    }

    public boolean isInfinite()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        return $z0;
    }

    public java.lang.Double toDouble()
    {
        org.apache.commons.lang.mutable.MutableDouble r1;
        java.lang.Double $r0;
        double $d0;

        r1 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $r0 = new java.lang.Double;

        $d0 = virtualinvoke r1.<org.apache.commons.lang.mutable.MutableDouble: double doubleValue()>();

        specialinvoke $r0.<java.lang.Double: void <init>(double)>($d0);

        return $r0;
    }

    public void increment()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $d1 = $d0 + 1.0;

        r0.<org.apache.commons.lang.mutable.MutableDouble: double value> = $d1;

        return;
    }

    public void decrement()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $d1 = $d0 - 1.0;

        r0.<org.apache.commons.lang.mutable.MutableDouble: double value> = $d1;

        return;
    }

    public void add(double)
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $d2 = $d1 + d0;

        r0.<org.apache.commons.lang.mutable.MutableDouble: double value> = $d2;

        return;
    }

    public void add(java.lang.Number)
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        java.lang.Number r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        r1 := @parameter0: java.lang.Number;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $d2 = $d0 + $d1;

        r0.<org.apache.commons.lang.mutable.MutableDouble: double value> = $d2;

        return;
    }

    public void subtract(double)
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $d2 = $d1 - d0;

        r0.<org.apache.commons.lang.mutable.MutableDouble: double value> = $d2;

        return;
    }

    public void subtract(java.lang.Number)
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        java.lang.Number r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        r1 := @parameter0: java.lang.Number;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $d2 = $d0 - $d1;

        r0.<org.apache.commons.lang.mutable.MutableDouble: double value> = $d2;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        long $l0, $l1;
        byte $b2;
        org.apache.commons.lang.mutable.MutableDouble $r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1;
        double $d0, $d1;

        r2 := @this: org.apache.commons.lang.mutable.MutableDouble;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.commons.lang.mutable.MutableDouble;

        if $z0 == 0 goto label1;

        $r1 = (org.apache.commons.lang.mutable.MutableDouble) r0;

        $d0 = $r1.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int hashCode()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        int $i3;
        long $l0, $l1, $l2;
        double $d0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l1 = $l0 >>> 32;

        $l2 = $l0 ^ $l1;

        $i3 = (int) $l2;

        return $i3;
    }

    public int compareTo(java.lang.Object)
    {
        org.apache.commons.lang.mutable.MutableDouble r1, r2;
        int $i0;
        java.lang.Object r0;
        double d0, $d1;

        r2 := @this: org.apache.commons.lang.mutable.MutableDouble;

        r0 := @parameter0: java.lang.Object;

        r1 = (org.apache.commons.lang.mutable.MutableDouble) r0;

        d0 = r1.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $d1 = r2.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $i0 = staticinvoke <org.apache.commons.lang.math.NumberUtils: int compare(double,double)>($d1, d0);

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang.mutable.MutableDouble r0;
        java.lang.String $r1;
        double $d0;

        r0 := @this: org.apache.commons.lang.mutable.MutableDouble;

        $d0 = r0.<org.apache.commons.lang.mutable.MutableDouble: double value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d0);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang.mutable.MutableDouble: long serialVersionUID> = 1587163916L;

        return;
    }
}
