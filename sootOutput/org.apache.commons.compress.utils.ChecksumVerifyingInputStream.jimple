public class org.apache.commons.compress.utils.ChecksumVerifyingInputStream extends java.io.InputStream
{
    private final java.io.InputStream in;
    private long bytesRemaining;
    private final long expectedChecksum;
    private final java.util.zip.Checksum checksum;

    public void <init>(java.util.zip.Checksum, java.io.InputStream, long, long)
    {
        java.util.zip.Checksum r1;
        org.apache.commons.compress.utils.ChecksumVerifyingInputStream r0;
        long l0, l1;
        java.io.InputStream r2;

        r0 := @this: org.apache.commons.compress.utils.ChecksumVerifyingInputStream;

        r1 := @parameter0: java.util.zip.Checksum;

        r2 := @parameter1: java.io.InputStream;

        l1 := @parameter2: long;

        l0 := @parameter3: long;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: java.util.zip.Checksum checksum> = r1;

        r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: java.io.InputStream in> = r2;

        r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long expectedChecksum> = l0;

        r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long bytesRemaining> = l1;

        return;
    }

    public int read() throws java.io.IOException
    {
        long $l0, $l3, $l5, $l6, $l8, $l9;
        java.util.zip.Checksum $r2, $r4;
        byte $b1, $b4, $b7;
        int $i2, $i10, $i12;
        org.apache.commons.compress.utils.ChecksumVerifyingInputStream r0;
        java.io.IOException $r5;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.utils.ChecksumVerifyingInputStream;

        $l0 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long bytesRemaining>;

        $b1 = $l0 cmp 0L;

        $i10 = (int) $b1;

        if $i10 > 0 goto label1;

        $i12 = (int) -1;

        return $i12;

     label1:
        $r1 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        if $i2 < 0 goto label2;

        $r4 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: java.util.zip.Checksum checksum>;

        interfaceinvoke $r4.<java.util.zip.Checksum: void update(int)>($i2);

        $l8 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long bytesRemaining>;

        $l9 = $l8 - 1L;

        r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long bytesRemaining> = $l9;

     label2:
        $l3 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long bytesRemaining>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label3;

        $l5 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long expectedChecksum>;

        $r2 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: java.util.zip.Checksum checksum>;

        $l6 = interfaceinvoke $r2.<java.util.zip.Checksum: long getValue()>();

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label3;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Checksum verification failed");

        throw $r5;

     label3:
        return $i2;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r1;
        org.apache.commons.compress.utils.ChecksumVerifyingInputStream r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.compress.utils.ChecksumVerifyingInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        long $l3, $l5, $l6, $l8, $l9, $l10;
        java.util.zip.Checksum $r3, $r5;
        byte $b4, $b7;
        int i0, i1, $i2, $i11;
        org.apache.commons.compress.utils.ChecksumVerifyingInputStream r0;
        java.io.IOException $r6;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.utils.ChecksumVerifyingInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if $i2 < 0 goto label1;

        $r5 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: java.util.zip.Checksum checksum>;

        interfaceinvoke $r5.<java.util.zip.Checksum: void update(byte[],int,int)>(r1, i0, $i2);

        $l9 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long bytesRemaining>;

        $l8 = (long) $i2;

        $l10 = $l9 - $l8;

        r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long bytesRemaining> = $l10;

     label1:
        $l3 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long bytesRemaining>;

        $b4 = $l3 cmp 0L;

        $i11 = (int) $b4;

        if $i11 > 0 goto label2;

        $l5 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: long expectedChecksum>;

        $r3 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: java.util.zip.Checksum checksum>;

        $l6 = interfaceinvoke $r3.<java.util.zip.Checksum: long getValue()>();

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label2;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Checksum verification failed");

        throw $r6;

     label2:
        return $i2;
    }

    public long skip(long) throws java.io.IOException
    {
        int $i0;
        long l1;
        org.apache.commons.compress.utils.ChecksumVerifyingInputStream r0;

        r0 := @this: org.apache.commons.compress.utils.ChecksumVerifyingInputStream;

        l1 := @parameter0: long;

        $i0 = virtualinvoke r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: int read()>();

        if $i0 < 0 goto label1;

        return 1L;

     label1:
        return 0L;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.utils.ChecksumVerifyingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.utils.ChecksumVerifyingInputStream;

        $r1 = r0.<org.apache.commons.compress.utils.ChecksumVerifyingInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }
}
