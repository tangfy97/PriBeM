public class org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream implements org.apache.commons.compress.archivers.cpio.CpioConstants
{
    private boolean closed;
    private org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry;
    private long entryBytesRead;
    private boolean entryEOF;
    private final byte[] tmpbuf;
    private long crc;
    private final java.io.InputStream in;
    private final byte[] TWO_BYTES_BUF;
    private final byte[] FOUR_BYTES_BUF;
    private final byte[] SIX_BYTES_BUF;
    private final int blockSize;
    private final org.apache.commons.compress.archivers.zip.ZipEncoding encoding;

    public void <init>(java.io.InputStream)
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void <init>(java.io.InputStream,int,java.lang.String)>(r1, 512, "US-ASCII");

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String)
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        java.lang.String r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void <init>(java.io.InputStream,int,java.lang.String)>(r1, 512, r2);

        return;
    }

    public void <init>(java.io.InputStream, int)
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        int i0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void <init>(java.io.InputStream,int,java.lang.String)>(r1, i0, "US-ASCII");

        return;
    }

    public void <init>(java.io.InputStream, int, java.lang.String)
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        byte[] $r1, $r2, $r3, $r4;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r7;
        int i0;
        java.lang.String r6;
        java.io.InputStream r5;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        r5 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.ArchiveInputStream: void <init>()>();

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean closed> = 0;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long entryBytesRead> = 0L;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean entryEOF> = 0;

        $r1 = newarray (byte)[4096];

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] tmpbuf> = $r1;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long crc> = 0L;

        $r2 = newarray (byte)[2];

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] TWO_BYTES_BUF> = $r2;

        $r3 = newarray (byte)[4];

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] FOUR_BYTES_BUF> = $r3;

        $r4 = newarray (byte)[6];

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] SIX_BYTES_BUF> = $r4;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: java.io.InputStream in> = r5;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int blockSize> = i0;

        $r7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>(r6);

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding> = $r7;

        return;
    }

    public int available() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void ensureOpen()>();

        $z0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean entryEOF>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        boolean $z0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean closed>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean closed> = 1;

     label1:
        return;
    }

    private void closeEntry() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        long $l0;
        byte $b1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

     label1:
        $l0 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long skip(long)>(2147483647L);

        $b1 = $l0 cmp 2147483647L;

        if $b1 != 0 goto label2;

        goto label1;

     label2:
        return;
    }

    private void ensureOpen() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        java.io.IOException $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r1;

     label1:
        return;
    }

    public org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry() throws java.io.IOException
    {
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        byte $b2, $b4;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry $r1, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19;
        long $l1, $l3, $l8;
        int $i0, $i5, $i6, $i7;
        java.lang.String $r13, $r20, $r28;
        java.io.IOException $r14;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void ensureOpen()>();

        $r1 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        if $r1 == null goto label1;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void closeEntry()>();

     label1:
        $r3 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] TWO_BYTES_BUF>;

        $r2 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] TWO_BYTES_BUF>;

        $i0 = lengthof $r2;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int readFully(byte[],int,int)>($r3, 0, $i0);

        $r4 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] TWO_BYTES_BUF>;

        $l1 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioUtil: long byteArray2long(byte[],boolean)>($r4, 0);

        $b2 = $l1 cmp 29127L;

        if $b2 != 0 goto label2;

        $r26 = specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)>(0);

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry> = $r26;

        goto label7;

     label2:
        $r5 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] TWO_BYTES_BUF>;

        $l3 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioUtil: long byteArray2long(byte[],boolean)>($r5, 1);

        $b4 = $l3 cmp 29127L;

        if $b4 != 0 goto label3;

        $r25 = specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean)>(1);

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry> = $r25;

        goto label7;

     label3:
        $r8 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] TWO_BYTES_BUF>;

        $r7 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] SIX_BYTES_BUF>;

        $r6 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] TWO_BYTES_BUF>;

        $i5 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, 0, $i5);

        $r11 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] SIX_BYTES_BUF>;

        $r9 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] TWO_BYTES_BUF>;

        $i7 = lengthof $r9;

        $r10 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] FOUR_BYTES_BUF>;

        $i6 = lengthof $r10;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int readFully(byte[],int,int)>($r11, $i7, $i6);

        $r12 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] SIX_BYTES_BUF>;

        $r13 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: java.lang.String toAsciiString(byte[])>($r12);

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("070701");

        if $z0 == 0 goto label4;

        $r24 = specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)>(0);

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry> = $r24;

        goto label7;

     label4:
        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("070702");

        if $z1 == 0 goto label5;

        $r23 = specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean)>(1);

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry> = $r23;

        goto label7;

     label5:
        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("070707");

        if $z2 == 0 goto label6;

        $r21 = specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry()>();

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry> = $r21;

        goto label7;

     label6:
        $r14 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown magic [");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Occured at byte: ");

        $l8 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long getBytesRead()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label7:
        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long entryBytesRead> = 0L;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean entryEOF> = 0;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long crc> = 0L;

        $r27 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $r28 = virtualinvoke $r27.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: java.lang.String getName()>();

        $z3 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>("TRAILER!!!");

        if $z3 == 0 goto label8;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean entryEOF> = 1;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void skipRemainderOfLastBlock()>();

        return null;

     label8:
        $r22 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        return $r22;
    }

    private void skip(int) throws java.io.IOException
    {
        int i0;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        byte[] $r1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $r1 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] FOUR_BYTES_BUF>;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int readFully(byte[],int,int)>($r1, 0, i0);

     label1:
        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        java.lang.IndexOutOfBoundsException $r15;
        byte $b6, $b18, $b27;
        boolean $z0;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.StringBuilder $r11, $r12, $r16;
        long $l4, $l5, $l7, $l8, $l9, $l10, $l11, $l15, $l16, $l17, $l20, $l21, $l22, $l25, $l26, $l28;
        short $s14, $s19, $s24, $s38;
        int i0, i1, $i2, $i3, i12, $i13, $i23, i29, $i31, $i32, $i34, $i36, $i37;
        java.lang.String $r13;
        java.io.IOException $r17;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void ensureOpen()>();

        if i0 < 0 goto label01;

        if i1 < 0 goto label01;

        $i2 = lengthof r1;

        $i3 = $i2 - i1;

        if i0 <= $i3 goto label02;

     label01:
        $r15 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r15.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r15;

     label02:
        if i1 != 0 goto label03;

        return 0;

     label03:
        $r2 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        if $r2 == null goto label04;

        $z0 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean entryEOF>;

        if $z0 == 0 goto label05;

     label04:
        $i31 = (int) -1;

        return $i31;

     label05:
        $l4 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long entryBytesRead>;

        $r3 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $l5 = virtualinvoke $r3.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getSize()>();

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label07;

        $r6 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $i23 = virtualinvoke $r6.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: int getDataPadCount()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void skip(int)>($i23);

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean entryEOF> = 1;

        $r7 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $s24 = virtualinvoke $r7.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: short getFormat()>();

        $i32 = (int) $s24;

        if $i32 != 2 goto label06;

        $l25 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long crc>;

        $r8 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $l26 = virtualinvoke $r8.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getChksum()>();

        $b27 = $l25 cmp $l26;

        if $b27 == 0 goto label06;

        $r17 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CRC Error. Occured at byte: ");

        $l28 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long getBytesRead()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l28);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r17;

     label06:
        $i34 = (int) -1;

        return $i34;

     label07:
        $l7 = (long) i1;

        $r4 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $l8 = virtualinvoke $r4.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: long getSize()>();

        $l9 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long entryBytesRead>;

        $l10 = $l8 - $l9;

        $l11 = staticinvoke <java.lang.Math: long min(long,long)>($l7, $l10);

        i12 = (int) $l11;

        if i12 >= 0 goto label08;

        $i36 = (int) -1;

        return $i36;

     label08:
        $i13 = specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int readFully(byte[],int,int)>(r1, i0, i12);

        $r5 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry>;

        $s14 = virtualinvoke $r5.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: short getFormat()>();

        $i37 = (int) $s14;

        if $i37 != 2 goto label10;

        i29 = 0;

     label09:
        if i29 >= $i13 goto label10;

        $l21 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long crc>;

        $b18 = r1[i29];

        $s38 = (short) $b18;

        $s19 = $s38 & 255;

        $l20 = (long) $s19;

        $l22 = $l21 + $l20;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long crc> = $l22;

        i29 = i29 + 1;

        goto label09;

     label10:
        $l16 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long entryBytesRead>;

        $l15 = (long) $i13;

        $l17 = $l16 + $l15;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long entryBytesRead> = $l17;

        return $i13;
    }

    private final int readFully(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        java.io.EOFException $r3;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: java.io.InputStream in>;

        $i2 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[],int,int)>($r2, r1, i0, i1);

        virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void count(int)>($i2);

        if $i2 >= i1 goto label1;

        $r3 = new java.io.EOFException;

        specialinvoke $r3.<java.io.EOFException: void <init>()>();

        throw $r3;

     label1:
        return $i2;
    }

    private long readBinaryLong(int, boolean) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r1;
        byte[] r0;
        int i0, $i1;
        long $l2;
        boolean z0;

        r1 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r0 = newarray (byte)[i0];

        $i1 = lengthof r0;

        specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int readFully(byte[],int,int)>(r0, 0, $i1);

        $l2 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioUtil: long byteArray2long(byte[],boolean)>(r0, z0);

        return $l2;
    }

    private long readAsciiLong(int, int) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r1;
        byte[] r0;
        int i0, $i1, i2;
        long $l3;
        java.lang.String $r2;

        r1 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        r0 = newarray (byte)[i0];

        $i1 = lengthof r0;

        specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int readFully(byte[],int,int)>(r0, 0, $i1);

        $r2 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: java.lang.String toAsciiString(byte[])>(r0);

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r2, i2);

        return $l3;
    }

    private org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readNewEntry(boolean) throws java.io.IOException
    {
        byte $b3, $b17;
        boolean z0, $z1;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r1;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry $r0, $r10, r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        long $l0, $l1, $l2, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l16, $l19;
        int $i15, $i18;
        java.lang.String $r2, $r9;
        java.io.IOException $r3;

        r1 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;

        specialinvoke $r10.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void <init>(short)>(2);

        r11 = $r10;

        goto label2;

     label1:
        $r0 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;

        specialinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void <init>(short)>(1);

        r11 = $r0;

     label2:
        $l0 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setInode(long)>($l0);

        $l1 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        $l2 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioUtil: long fileType(long)>($l1);

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setMode(long)>($l1);

     label3:
        $l4 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setUID(long)>($l4);

        $l5 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setGID(long)>($l5);

        $l6 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setNumberOfLinks(long)>($l6);

        $l7 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setTime(long)>($l7);

        $l8 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setSize(long)>($l8);

        $l9 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setDeviceMaj(long)>($l9);

        $l10 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setDeviceMin(long)>($l10);

        $l11 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setRemoteDeviceMaj(long)>($l11);

        $l12 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setRemoteDeviceMin(long)>($l12);

        $l13 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        $l14 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(8, 16);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setChksum(long)>($l14);

        $i15 = (int) $l13;

        $r2 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: java.lang.String readCString(int)>($i15);

        virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setName(java.lang.String)>($r2);

        $l16 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioUtil: long fileType(long)>($l1);

        $b17 = $l16 cmp 0L;

        if $b17 != 0 goto label4;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("TRAILER!!!");

        if $z1 != 0 goto label4;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mode 0 only allowed in the trailer. Found entry name: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Occured at byte: ");

        $l19 = virtualinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long getBytesRead()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l19);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label4:
        $i18 = virtualinvoke r11.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: int getHeaderPadCount()>();

        specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void skip(int)>($i18);

        return r11;
    }

    private org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldAsciiEntry() throws java.io.IOException
    {
        long $l0, $l1, $l2, $l3, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l13, $l15;
        byte $b4, $b14;
        int $i12;
        java.lang.String $r2, $r9;
        boolean $z0;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r1;
        java.io.IOException $r3;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry $r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r1 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        $r0 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;

        specialinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void <init>(short)>(4);

        $l0 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(6, 8);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setDevice(long)>($l0);

        $l1 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(6, 8);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setInode(long)>($l1);

        $l2 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(6, 8);

        $l3 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioUtil: long fileType(long)>($l2);

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setMode(long)>($l2);

     label1:
        $l5 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(6, 8);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setUID(long)>($l5);

        $l6 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(6, 8);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setGID(long)>($l6);

        $l7 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(6, 8);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setNumberOfLinks(long)>($l7);

        $l8 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(6, 8);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setRemoteDevice(long)>($l8);

        $l9 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(11, 8);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setTime(long)>($l9);

        $l10 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(6, 8);

        $l11 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readAsciiLong(int,int)>(11, 8);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setSize(long)>($l11);

        $i12 = (int) $l10;

        $r2 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: java.lang.String readCString(int)>($i12);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setName(java.lang.String)>($r2);

        $l13 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioUtil: long fileType(long)>($l2);

        $b14 = $l13 cmp 0L;

        if $b14 != 0 goto label2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("TRAILER!!!");

        if $z0 != 0 goto label2;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mode 0 only allowed in the trailer. Found entry: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Occured at byte: ");

        $l15 = virtualinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long getBytesRead()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l15);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        return $r0;
    }

    private org.apache.commons.compress.archivers.cpio.CpioArchiveEntry readOldBinaryEntry(boolean) throws java.io.IOException
    {
        long $l0, $l1, $l2, $l3, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l13, $l16;
        byte $b4, $b14;
        int $i12, $i15;
        java.lang.String $r2, $r9;
        boolean z0, $z1;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r1;
        java.io.IOException $r3;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry $r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r1 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        z0 := @parameter0: boolean;

        $r0 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;

        specialinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void <init>(short)>(8);

        $l0 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readBinaryLong(int,boolean)>(2, z0);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setDevice(long)>($l0);

        $l1 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readBinaryLong(int,boolean)>(2, z0);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setInode(long)>($l1);

        $l2 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readBinaryLong(int,boolean)>(2, z0);

        $l3 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioUtil: long fileType(long)>($l2);

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setMode(long)>($l2);

     label1:
        $l5 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readBinaryLong(int,boolean)>(2, z0);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setUID(long)>($l5);

        $l6 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readBinaryLong(int,boolean)>(2, z0);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setGID(long)>($l6);

        $l7 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readBinaryLong(int,boolean)>(2, z0);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setNumberOfLinks(long)>($l7);

        $l8 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readBinaryLong(int,boolean)>(2, z0);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setRemoteDevice(long)>($l8);

        $l9 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readBinaryLong(int,boolean)>(4, z0);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setTime(long)>($l9);

        $l10 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readBinaryLong(int,boolean)>(2, z0);

        $l11 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long readBinaryLong(int,boolean)>(4, z0);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setSize(long)>($l11);

        $i12 = (int) $l10;

        $r2 = specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: java.lang.String readCString(int)>($i12);

        virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: void setName(java.lang.String)>($r2);

        $l13 = staticinvoke <org.apache.commons.compress.archivers.cpio.CpioUtil: long fileType(long)>($l2);

        $b14 = $l13 cmp 0L;

        if $b14 != 0 goto label2;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("TRAILER!!!");

        if $z1 != 0 goto label2;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mode 0 only allowed in the trailer. Found entry: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Occured at byte: ");

        $l16 = virtualinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long getBytesRead()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l16);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        $i15 = virtualinvoke $r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveEntry: int getHeaderPadCount()>();

        specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void skip(int)>($i15);

        return $r0;
    }

    private java.lang.String readCString(int) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r1;
        byte[] r0;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r3;
        int i0, $i1, $i2;
        java.lang.String $r4;
        java.io.InputStream $r2;

        r1 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        i0 := @parameter0: int;

        $i1 = i0 - 1;

        r0 = newarray (byte)[$i1];

        $i2 = lengthof r0;

        specialinvoke r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int readFully(byte[],int,int)>(r0, 0, $i2);

        $r2 = r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: int read()>();

        $r3 = r1.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.lang.String decode(byte[])>(r0);

        return $r4;
    }

    public long skip(long) throws java.io.IOException
    {
        byte[] $r1, $r2, $r3;
        long l0, $l2, $l4;
        byte $b1;
        int i3, $i5, $i6, i7, i8, $i9, $i11;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i9 = (int) $b1;

        if $i9 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("negative skip length");

        throw $r5;

     label1:
        specialinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: void ensureOpen()>();

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>(l0, 2147483647L);

        i3 = (int) $l2;

        i7 = 0;

     label2:
        if i7 >= i3 goto label5;

        i8 = i3 - i7;

        $r1 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] tmpbuf>;

        $i5 = lengthof $r1;

        if i8 <= $i5 goto label3;

        $r3 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] tmpbuf>;

        i8 = lengthof $r3;

     label3:
        $r2 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: byte[] tmpbuf>;

        $i6 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int read(byte[],int,int)>($r2, 0, i8);

        $i11 = (int) -1;

        if $i6 != $i11 goto label4;

        r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: boolean entryEOF> = 1;

        goto label5;

     label4:
        i7 = i7 + $i6;

        goto label2;

     label5:
        $l4 = (long) i7;

        return $l4;
    }

    public org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry $r1;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry getNextCPIOEntry()>();

        return $r1;
    }

    private void skipRemainderOfLastBlock() throws java.io.IOException
    {
        long $l0, $l2, l3, $l6, $l8, $l9, $l10, $l12, l13;
        byte $b4, $b11, $b14;
        int $i1, $i5, $i7, $i15, $i16;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;

        $l0 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long getBytesRead()>();

        $i1 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int blockSize>;

        $l2 = (long) $i1;

        l3 = $l0 % $l2;

        $b4 = l3 cmp 0L;

        if $b4 != 0 goto label1;

        $l12 = 0L;

        goto label2;

     label1:
        $i5 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int blockSize>;

        $l6 = (long) $i5;

        $l12 = $l6 - l3;

     label2:
        l13 = $l12;

     label3:
        $b14 = l13 cmp 0L;

        $i15 = (int) $b14;

        if $i15 <= 0 goto label5;

        $i7 = r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: int blockSize>;

        $l8 = (long) $i7;

        $l9 = $l8 - l3;

        $l10 = virtualinvoke r0.<org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream: long skip(long)>($l9);

        $b11 = $l10 cmp 0L;

        $i16 = (int) $b11;

        if $i16 > 0 goto label4;

        goto label5;

     label4:
        l13 = l13 - $l10;

        goto label3;

     label5:
        return;
    }

    public static boolean matches(byte[], int)
    {
        byte[] r0;
        short $s12, $s14, $s16, $s19;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b13;
        int i0, $i15, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 >= 6 goto label01;

        return 0;

     label01:
        $b1 = r0[0];

        $i15 = (int) $b1;

        if $i15 != 113 goto label02;

        $b13 = r0[1];

        $s16 = (short) $b13;

        $s14 = $s16 & 255;

        $i17 = (int) $s14;

        if $i17 != 199 goto label02;

        return 1;

     label02:
        $b2 = r0[1];

        $i18 = (int) $b2;

        if $i18 != 113 goto label03;

        $b11 = r0[0];

        $s19 = (short) $b11;

        $s12 = $s19 & 255;

        $i20 = (int) $s12;

        if $i20 != 199 goto label03;

        return 1;

     label03:
        $b3 = r0[0];

        $i21 = (int) $b3;

        if $i21 == 48 goto label04;

        return 0;

     label04:
        $b4 = r0[1];

        $i22 = (int) $b4;

        if $i22 == 55 goto label05;

        return 0;

     label05:
        $b5 = r0[2];

        $i23 = (int) $b5;

        if $i23 == 48 goto label06;

        return 0;

     label06:
        $b6 = r0[3];

        $i24 = (int) $b6;

        if $i24 == 55 goto label07;

        return 0;

     label07:
        $b7 = r0[4];

        $i25 = (int) $b7;

        if $i25 == 48 goto label08;

        return 0;

     label08:
        $b8 = r0[5];

        $i26 = (int) $b8;

        if $i26 != 49 goto label09;

        return 1;

     label09:
        $b9 = r0[5];

        $i27 = (int) $b9;

        if $i27 != 50 goto label10;

        return 1;

     label10:
        $b10 = r0[5];

        $i28 = (int) $b10;

        if $i28 != 55 goto label11;

        return 1;

     label11:
        return 0;
    }
}
