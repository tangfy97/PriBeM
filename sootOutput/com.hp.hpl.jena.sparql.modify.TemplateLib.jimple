public class com.hp.hpl.jena.sparql.modify.TemplateLib extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.modify.TemplateLib r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.TemplateLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Iterator template(java.util.List, com.hp.hpl.jena.graph.Node, java.util.Iterator)
    {
        java.util.List $r1, r4;
        java.util.Iterator r2, $r3;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;

        r4 := @parameter0: java.util.List;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: java.util.Iterator;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: java.util.List remapDefaultGraph(java.util.List,com.hp.hpl.jena.graph.Node)>(r4, r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: java.util.Iterator calcQuads(java.util.List,java.util.Iterator)>($r1, r2);

        return $r3;
    }

    protected static java.util.List remapDefaultGraph(java.util.List, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.modify.TemplateLib$1 $r1;
        java.util.List r2;
        com.hp.hpl.jena.graph.Node r0;

        r2 := @parameter0: java.util.List;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label1;

        $r1 = new com.hp.hpl.jena.sparql.modify.TemplateLib$1;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.modify.TemplateLib$1: void <init>(com.hp.hpl.jena.graph.Node)>(r0);

        r2 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List map(java.util.List,org.apache.jena.atlas.iterator.Transform)>(r2, $r1);

     label1:
        return r2;
    }

    public static java.util.Iterator calcTriples(java.util.List, java.util.Iterator)
    {
        java.util.List r2;
        java.util.Iterator r0, $r3;
        com.hp.hpl.jena.sparql.modify.TemplateLib$2 $r1;

        r2 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.Iterator;

        $r1 = new com.hp.hpl.jena.sparql.modify.TemplateLib$2;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.modify.TemplateLib$2: void <init>(java.util.List)>(r2);

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator mapMany(java.util.Iterator,org.apache.jena.atlas.iterator.Transform)>(r0, $r1);

        return $r3;
    }

    public static java.util.Iterator calcQuads(java.util.List, java.util.Iterator)
    {
        java.util.List r2;
        java.util.Iterator r0, $r3;
        com.hp.hpl.jena.sparql.modify.TemplateLib$3 $r1;

        r2 := @parameter0: java.util.List;

        r0 := @parameter1: java.util.Iterator;

        $r1 = new com.hp.hpl.jena.sparql.modify.TemplateLib$3;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.modify.TemplateLib$3: void <init>(java.util.List)>(r2);

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator mapMany(java.util.Iterator,org.apache.jena.atlas.iterator.Transform)>(r0, $r1);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.core.Quad subst(com.hp.hpl.jena.sparql.core.Quad, com.hp.hpl.jena.sparql.engine.binding.Binding, java.util.Map)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, r7, r8, r9, r10;
        java.util.Map r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.hp.hpl.jena.sparql.core.Quad r0, r11, $r12, $r13;
        com.hp.hpl.jena.sparql.engine.binding.Binding r6;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        r6 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r5 := @parameter2: java.util.Map;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        r7 = $r1;

        r8 = $r2;

        r9 = $r3;

        r10 = $r4;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 != 0 goto label01;

        $z4 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)>($r1);

        if $z4 == 0 goto label02;

     label01:
        r7 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: com.hp.hpl.jena.graph.Node newBlank(com.hp.hpl.jena.graph.Node,java.util.Map)>($r1, r5);

     label02:
        $z5 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z5 != 0 goto label03;

        $z3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)>($r2);

        if $z3 == 0 goto label04;

     label03:
        r8 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: com.hp.hpl.jena.graph.Node newBlank(com.hp.hpl.jena.graph.Node,java.util.Map)>($r2, r5);

     label04:
        $z6 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z6 != 0 goto label05;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)>($r3);

        if $z2 == 0 goto label06;

     label05:
        r9 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: com.hp.hpl.jena.graph.Node newBlank(com.hp.hpl.jena.graph.Node,java.util.Map)>($r3, r5);

     label06:
        $z7 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z7 != 0 goto label07;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)>($r4);

        if $z1 == 0 goto label08;

     label07:
        r10 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: com.hp.hpl.jena.graph.Node newBlank(com.hp.hpl.jena.graph.Node,java.util.Map)>($r4, r5);

     label08:
        r11 = r0;

        if r8 != $r2 goto label09;

        if r9 != $r3 goto label09;

        if r10 != $r4 goto label09;

        if r7 == $r1 goto label10;

     label09:
        $r12 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r7, r8, r9, r10);

        r11 = $r12;

     label10:
        $r13 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.sparql.core.Quad substitute(com.hp.hpl.jena.sparql.core.Quad,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r11, r6);

        return $r13;
    }

    public static com.hp.hpl.jena.graph.Triple subst(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.sparql.engine.binding.Binding, java.util.Map)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, r6, r7, r8;
        java.util.Map r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.graph.Triple r0, r9, $r10, $r11;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r5 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r4 := @parameter2: java.util.Map;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        r6 = $r1;

        r7 = $r2;

        r8 = $r3;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 != 0 goto label1;

        $z3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)>($r1);

        if $z3 == 0 goto label2;

     label1:
        r6 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: com.hp.hpl.jena.graph.Node newBlank(com.hp.hpl.jena.graph.Node,java.util.Map)>($r1, r4);

     label2:
        $z4 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z4 != 0 goto label3;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)>($r2);

        if $z2 == 0 goto label4;

     label3:
        r7 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: com.hp.hpl.jena.graph.Node newBlank(com.hp.hpl.jena.graph.Node,java.util.Map)>($r2, r4);

     label4:
        $z5 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z5 != 0 goto label5;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isBlankNodeVar(com.hp.hpl.jena.graph.Node)>($r3);

        if $z1 == 0 goto label6;

     label5:
        r8 = staticinvoke <com.hp.hpl.jena.sparql.modify.TemplateLib: com.hp.hpl.jena.graph.Node newBlank(com.hp.hpl.jena.graph.Node,java.util.Map)>($r3, r4);

     label6:
        r9 = r0;

        if r6 != $r1 goto label7;

        if r7 != $r2 goto label7;

        if r8 == $r3 goto label8;

     label7:
        $r10 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r10.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r6, r7, r8);

        r9 = $r10;

     label8:
        $r11 = staticinvoke <com.hp.hpl.jena.sparql.core.Substitute: com.hp.hpl.jena.graph.Triple substitute(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r9, r5);

        return $r11;
    }

    private static com.hp.hpl.jena.graph.Node newBlank(com.hp.hpl.jena.graph.Node, java.util.Map)
    {
        java.util.Map r0;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.Node r1, $r3, $r4;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: java.util.Map;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r3 = (com.hp.hpl.jena.graph.Node) $r2;

        return $r3;
    }
}
