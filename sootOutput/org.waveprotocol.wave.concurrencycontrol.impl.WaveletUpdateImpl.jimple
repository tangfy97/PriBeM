public class org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.WaveletUpdate
{
    private org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl delta;
    private org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl resultingVersion;
    private java.lang.Long applicationTimpstamp;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>(r1);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)
    {
        org.waveprotocol.wave.federation.ProtocolWaveletDelta $r2;
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate r1;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: org.waveprotocol.wave.federation.ProtocolWaveletDelta getDelta()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: void setDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r2);

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: org.waveprotocol.wave.federation.ProtocolHashedVersion getResultingVersion()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: void setResultingVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r3);

        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: long getApplicationTimpstamp()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: void setApplicationTimpstamp(long)>($l0);

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl getDelta()
    {
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl delta>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r2);

        return $r0;
    }

    public void setDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r1;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletDelta;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl delta> = $r1;

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getResultingVersion()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl resultingVersion>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r2);

        return $r0;
    }

    public void setResultingVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl resultingVersion> = $r1;

        return;
    }

    public long getApplicationTimpstamp()
    {
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;
        java.lang.Long $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: java.lang.Long applicationTimpstamp>;

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public void setApplicationTimpstamp(long)
    {
        long l0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;
        java.lang.Long $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: java.lang.Long applicationTimpstamp> = $r1;

        return;
    }

    protected void reset()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl delta> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl resultingVersion> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: java.lang.Long applicationTimpstamp> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r1;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate $r2;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.WaveletUpdate;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.WaveletUpdate) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.WaveletUpdateUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate,org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.WaveletUpdateUtil: int getHashCode(org.waveprotocol.wave.concurrencycontrol.WaveletUpdate)>(r0);

        return $i0;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getResultingVersion()
    {
        org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolHashedVersionImpl getResultingVersion()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolWaveletDelta getDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl r0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletUpdateImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl getDelta()>();

        return $r1;
    }
}
