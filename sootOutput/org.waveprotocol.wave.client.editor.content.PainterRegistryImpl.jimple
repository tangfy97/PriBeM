public final class org.waveprotocol.wave.client.editor.content.PainterRegistryImpl extends java.lang.Object implements org.waveprotocol.wave.client.editor.content.PainterRegistry
{
    private static final org.waveprotocol.wave.model.util.DataDomain paintDataDomain;
    private final org.waveprotocol.wave.model.util.ChainedData data;
    private final java.lang.String paintTagName;
    private final java.lang.String boundaryTagName;
    private final org.waveprotocol.wave.client.editor.content.AnnotationPainter painter;

    public void <init>(java.lang.String, java.lang.String, org.waveprotocol.wave.client.editor.content.AnnotationPainter)
    {
        org.waveprotocol.wave.model.util.DataDomain $r3;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter r1;
        java.lang.String r4, r5;
        org.waveprotocol.wave.model.util.ChainedData $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r1 := @parameter2: org.waveprotocol.wave.client.editor.content.AnnotationPainter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Null painter");

        $r2 = new org.waveprotocol.wave.model.util.ChainedData;

        $r3 = <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.DataDomain paintDataDomain>;

        specialinvoke $r2.<org.waveprotocol.wave.model.util.ChainedData: void <init>(org.waveprotocol.wave.model.util.DataDomain)>($r3);

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data> = $r2;

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.client.editor.content.AnnotationPainter painter> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: java.lang.String paintTagName> = r4;

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: java.lang.String boundaryTagName> = r5;

        return;
    }

    private void <init>(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl)
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0, r1;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter $r6;
        java.lang.String $r4, $r5;
        org.waveprotocol.wave.model.util.ChainedData $r2, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Use the other constructor for the root");

        $r2 = new org.waveprotocol.wave.model.util.ChainedData;

        $r3 = r1.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data>;

        specialinvoke $r2.<org.waveprotocol.wave.model.util.ChainedData: void <init>(org.waveprotocol.wave.model.util.ChainedData)>($r3);

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data> = $r2;

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: java.lang.String getPaintTagName()>();

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: java.lang.String paintTagName> = $r4;

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: java.lang.String getBoundaryTagName()>();

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: java.lang.String boundaryTagName> = $r5;

        $r6 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.client.editor.content.AnnotationPainter getPainter()>();

        r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.client.editor.content.AnnotationPainter painter> = $r6;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.PainterRegistry createExtension()
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl $r0, r1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        $r0 = new org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: void <init>(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl)>(r1);

        return $r0;
    }

    public java.lang.String getPaintTagName()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: java.lang.String paintTagName>;

        return $r1;
    }

    public java.lang.String getBoundaryTagName()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: java.lang.String boundaryTagName>;

        return $r1;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet getKeys()
    {
        org.waveprotocol.wave.model.util.StringSet $r4;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData $r3;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object inspect()>();

        $r3 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: org.waveprotocol.wave.model.util.StringSet access$000(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>($r3);

        return $r4;
    }

    public java.util.Set getPaintFunctions()
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;
        java.util.Set $r4;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData $r3;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object inspect()>();

        $r3 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set access$100(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>($r3);

        return $r4;
    }

    public java.util.Set getBoundaryFunctions()
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;
        java.util.Set $r4;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData $r3;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object inspect()>();

        $r3 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set access$200(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>($r3);

        return $r4;
    }

    public org.waveprotocol.wave.client.editor.content.AnnotationPainter getPainter()
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter $r1;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.client.editor.content.AnnotationPainter painter>;

        return $r1;
    }

    public void registerBoundaryFunction(org.waveprotocol.wave.model.util.ReadableStringSet, org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction)
    {
        org.waveprotocol.wave.model.util.StringSet $r4;
        java.util.Set $r6;
        org.waveprotocol.wave.model.util.ReadableStringSet r5;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction r7;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData r3;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        r5 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        r7 := @parameter1: org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object modify()>();

        r3 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: org.waveprotocol.wave.model.util.StringSet access$000(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringSet: void addAll(org.waveprotocol.wave.model.util.ReadableStringSet)>(r5);

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set access$200(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r3);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r7);

        return;
    }

    public void registerPaintFunction(org.waveprotocol.wave.model.util.ReadableStringSet, org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction)
    {
        org.waveprotocol.wave.model.util.StringSet $r4;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction r7;
        java.util.Set $r6;
        org.waveprotocol.wave.model.util.ReadableStringSet r5;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData r3;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        r5 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        r7 := @parameter1: org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object modify()>();

        r3 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: org.waveprotocol.wave.model.util.StringSet access$000(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringSet: void addAll(org.waveprotocol.wave.model.util.ReadableStringSet)>(r5);

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: java.util.Set access$100(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>(r3);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r7);

        return;
    }

    public void unregisterBoundaryFunction(org.waveprotocol.wave.model.util.ReadableStringSet, org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r5;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction r6;
        org.waveprotocol.wave.model.util.StringSet $r4;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData $r3;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        r5 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        r6 := @parameter1: org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object modify()>();

        $r3 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: org.waveprotocol.wave.model.util.StringSet access$000(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>($r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringSet: void removeAll(org.waveprotocol.wave.model.util.ReadableStringSet)>(r5);

        return;
    }

    public void unregisterPaintFunction(org.waveprotocol.wave.model.util.ReadableStringSet, org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r5;
        org.waveprotocol.wave.model.util.StringSet $r4;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction r6;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData $r3;
        org.waveprotocol.wave.model.util.ChainedData $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        r5 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringSet;

        r6 := @parameter1: org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: java.lang.Object modify()>();

        $r3 = (org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData: org.waveprotocol.wave.model.util.StringSet access$000(org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$PaintData)>($r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringSet: void removeAll(org.waveprotocol.wave.model.util.ReadableStringSet)>(r5);

        return;
    }

    public double debugGetVersion()
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;
        org.waveprotocol.wave.model.util.ChainedData $r1;
        double $d0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data>;

        $d0 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: double debugGetVersion()>();

        return $d0;
    }

    public double debugGetKnownParentVersion()
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl r0;
        org.waveprotocol.wave.model.util.ChainedData $r1;
        double $d0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.PainterRegistryImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.ChainedData data>;

        $d0 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.ChainedData: double debugGetKnownParentVersion()>();

        return $d0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1 $r0;

        $r0 = new org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.content.PainterRegistryImpl$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.PainterRegistryImpl: org.waveprotocol.wave.model.util.DataDomain paintDataDomain> = $r0;

        return;
    }
}
