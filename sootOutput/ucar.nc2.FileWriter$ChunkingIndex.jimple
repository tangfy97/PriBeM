public class ucar.nc2.FileWriter$ChunkingIndex extends ucar.ma2.Index
{

    public void <init>(int[])
    {
        ucar.nc2.FileWriter$ChunkingIndex r0;
        int[] r1;

        r0 := @this: ucar.nc2.FileWriter$ChunkingIndex;

        r1 := @parameter0: int[];

        specialinvoke r0.<ucar.ma2.Index: void <init>(int[])>(r1);

        return;
    }

    public int[] computeChunkShape(long)
    {
        long l2, $l4, $l5;
        int[] r1, $r2, $r3, $r4;
        int $i0, $i1, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15;
        ucar.nc2.FileWriter$ChunkingIndex r0;

        r0 := @this: ucar.nc2.FileWriter$ChunkingIndex;

        l2 := @parameter0: long;

        $i0 = r0.<ucar.nc2.FileWriter$ChunkingIndex: int rank>;

        r1 = newarray (int)[$i0];

        i14 = 0;

     label1:
        $i1 = r0.<ucar.nc2.FileWriter$ChunkingIndex: int rank>;

        if i14 >= $i1 goto label4;

        $r2 = r0.<ucar.nc2.FileWriter$ChunkingIndex: int[] stride>;

        $i3 = $r2[i14];

        $l4 = (long) $i3;

        $l5 = l2 / $l4;

        $i6 = (int) $l5;

        r1[i14] = $i6;

        $i13 = i14;

        $i7 = r1[i14];

        if $i7 != 0 goto label2;

        $i15 = 1;

        goto label3;

     label2:
        $i15 = r1[i14];

     label3:
        r1[$i13] = $i15;

        $i11 = r1[i14];

        $r3 = r0.<ucar.nc2.FileWriter$ChunkingIndex: int[] shape>;

        $i9 = $r3[i14];

        $r4 = r0.<ucar.nc2.FileWriter$ChunkingIndex: int[] current>;

        $i8 = $r4[i14];

        $i10 = $i9 - $i8;

        $i12 = staticinvoke <java.lang.Math: int min(int,int)>($i11, $i10);

        r1[i14] = $i12;

        i14 = i14 + 1;

        goto label1;

     label4:
        return r1;
    }
}
