public class org.springframework.beans.factory.xml.XmlBeanDefinitionReader extends org.springframework.beans.factory.support.AbstractBeanDefinitionReader
{
    public static final int VALIDATION_NONE;
    public static final int VALIDATION_AUTO;
    public static final int VALIDATION_DTD;
    public static final int VALIDATION_XSD;
    private static final org.springframework.core.Constants constants;
    private int validationMode;
    private boolean namespaceAware;
    private java.lang.Class documentReaderClass;
    private org.springframework.beans.factory.parsing.ProblemReporter problemReporter;
    private org.springframework.beans.factory.parsing.ReaderEventListener eventListener;
    private org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor;
    private org.springframework.beans.factory.xml.NamespaceHandlerResolver namespaceHandlerResolver;
    private org.springframework.beans.factory.xml.DocumentLoader documentLoader;
    private org.xml.sax.EntityResolver entityResolver;
    private org.xml.sax.ErrorHandler errorHandler;
    private final org.springframework.util.xml.XmlValidationModeDetector validationModeDetector;
    private final java.lang.ThreadLocal resourcesCurrentlyBeingLoaded;

    static void <clinit>()
    {
        org.springframework.core.Constants $r0;

        <org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int VALIDATION_XSD> = 3;

        <org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int VALIDATION_DTD> = 2;

        <org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int VALIDATION_AUTO> = 1;

        <org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int VALIDATION_NONE> = 0;

        $r0 = new org.springframework.core.Constants;

        specialinvoke $r0.<org.springframework.core.Constants: void <init>(java.lang.Class)>(class "Lorg/springframework/beans/factory/xml/XmlBeanDefinitionReader;");

        <org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.core.Constants constants> = $r0;

        return;
    }

    public void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)
    {
        org.springframework.beans.factory.xml.DefaultDocumentLoader $r5;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r1;
        org.springframework.util.xml.XmlValidationModeDetector $r8;
        org.springframework.util.xml.SimpleSaxErrorHandler $r6;
        org.springframework.core.NamedThreadLocal $r9;
        org.springframework.beans.factory.parsing.FailFastProblemReporter $r2;
        org.springframework.beans.factory.parsing.EmptyReaderEventListener $r3;
        org.springframework.beans.factory.parsing.NullSourceExtractor $r4;
        org.apache.commons.logging.Log $r7;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>(r1);

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int validationMode> = 1;

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: boolean namespaceAware> = 0;

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: java.lang.Class documentReaderClass> = class "Lorg/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader;";

        $r2 = new org.springframework.beans.factory.parsing.FailFastProblemReporter;

        specialinvoke $r2.<org.springframework.beans.factory.parsing.FailFastProblemReporter: void <init>()>();

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.parsing.ProblemReporter problemReporter> = $r2;

        $r3 = new org.springframework.beans.factory.parsing.EmptyReaderEventListener;

        specialinvoke $r3.<org.springframework.beans.factory.parsing.EmptyReaderEventListener: void <init>()>();

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.parsing.ReaderEventListener eventListener> = $r3;

        $r4 = new org.springframework.beans.factory.parsing.NullSourceExtractor;

        specialinvoke $r4.<org.springframework.beans.factory.parsing.NullSourceExtractor: void <init>()>();

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor> = $r4;

        $r5 = new org.springframework.beans.factory.xml.DefaultDocumentLoader;

        specialinvoke $r5.<org.springframework.beans.factory.xml.DefaultDocumentLoader: void <init>()>();

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.xml.DocumentLoader documentLoader> = $r5;

        $r6 = new org.springframework.util.xml.SimpleSaxErrorHandler;

        $r7 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        specialinvoke $r6.<org.springframework.util.xml.SimpleSaxErrorHandler: void <init>(org.apache.commons.logging.Log)>($r7);

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.xml.sax.ErrorHandler errorHandler> = $r6;

        $r8 = new org.springframework.util.xml.XmlValidationModeDetector;

        specialinvoke $r8.<org.springframework.util.xml.XmlValidationModeDetector: void <init>()>();

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.util.xml.XmlValidationModeDetector validationModeDetector> = $r8;

        $r9 = new org.springframework.core.NamedThreadLocal;

        specialinvoke $r9.<org.springframework.core.NamedThreadLocal: void <init>(java.lang.String)>("XML bean definition resources currently being loaded");

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: java.lang.ThreadLocal resourcesCurrentlyBeingLoaded> = $r9;

        return;
    }

    public void setValidating(boolean)
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        byte $b0;
        boolean z0, $z1;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int validationMode> = $b0;

        if z0 == 0 goto label3;

        $z1 = 0;

        goto label4;

     label3:
        $z1 = 1;

     label4:
        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: boolean namespaceAware> = $z1;

        return;
    }

    public void setValidationModeName(java.lang.String)
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        int $i0;
        org.springframework.core.Constants $r2;
        java.lang.String r1;
        java.lang.Number $r3;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.core.Constants constants>;

        $r3 = virtualinvoke $r2.<org.springframework.core.Constants: java.lang.Number asNumber(java.lang.String)>(r1);

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: void setValidationMode(int)>($i0);

        return;
    }

    public void setValidationMode(int)
    {
        int i0;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        i0 := @parameter0: int;

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int validationMode> = i0;

        return;
    }

    public int getValidationMode()
    {
        int $i0;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        $i0 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int validationMode>;

        return $i0;
    }

    public void setNamespaceAware(boolean)
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: boolean namespaceAware> = z0;

        return;
    }

    public boolean isNamespaceAware()
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        $z0 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: boolean namespaceAware>;

        return $z0;
    }

    public void setProblemReporter(org.springframework.beans.factory.parsing.ProblemReporter)
    {
        org.springframework.beans.factory.parsing.FailFastProblemReporter $r3;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        org.springframework.beans.factory.parsing.ProblemReporter r1, $r2;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.springframework.beans.factory.parsing.ProblemReporter;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.beans.factory.parsing.FailFastProblemReporter;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.beans.factory.parsing.FailFastProblemReporter: void <init>()>();

     label2:
        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.parsing.ProblemReporter problemReporter> = $r2;

        return;
    }

    public void setEventListener(org.springframework.beans.factory.parsing.ReaderEventListener)
    {
        org.springframework.beans.factory.parsing.EmptyReaderEventListener $r3;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        org.springframework.beans.factory.parsing.ReaderEventListener r1, $r2;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.springframework.beans.factory.parsing.ReaderEventListener;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.beans.factory.parsing.EmptyReaderEventListener;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.beans.factory.parsing.EmptyReaderEventListener: void <init>()>();

     label2:
        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.parsing.ReaderEventListener eventListener> = $r2;

        return;
    }

    public void setSourceExtractor(org.springframework.beans.factory.parsing.SourceExtractor)
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        org.springframework.beans.factory.parsing.NullSourceExtractor $r3;
        org.springframework.beans.factory.parsing.SourceExtractor r1, $r2;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.springframework.beans.factory.parsing.SourceExtractor;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.beans.factory.parsing.NullSourceExtractor;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.beans.factory.parsing.NullSourceExtractor: void <init>()>();

     label2:
        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor> = $r2;

        return;
    }

    public void setNamespaceHandlerResolver(org.springframework.beans.factory.xml.NamespaceHandlerResolver)
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        org.springframework.beans.factory.xml.NamespaceHandlerResolver r1;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.springframework.beans.factory.xml.NamespaceHandlerResolver;

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.xml.NamespaceHandlerResolver namespaceHandlerResolver> = r1;

        return;
    }

    public void setDocumentLoader(org.springframework.beans.factory.xml.DocumentLoader)
    {
        org.springframework.beans.factory.xml.DefaultDocumentLoader $r3;
        org.springframework.beans.factory.xml.DocumentLoader r1, $r2;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.springframework.beans.factory.xml.DocumentLoader;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.beans.factory.xml.DefaultDocumentLoader;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.beans.factory.xml.DefaultDocumentLoader: void <init>()>();

     label2:
        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.xml.DocumentLoader documentLoader> = $r2;

        return;
    }

    public void setEntityResolver(org.xml.sax.EntityResolver)
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        org.xml.sax.EntityResolver r1;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.xml.sax.EntityResolver;

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.xml.sax.EntityResolver entityResolver> = r1;

        return;
    }

    protected org.xml.sax.EntityResolver getEntityResolver()
    {
        org.springframework.core.io.ResourceLoader $r2;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        org.springframework.beans.factory.xml.DelegatingEntityResolver $r3;
        org.springframework.beans.factory.xml.ResourceEntityResolver $r5;
        java.lang.ClassLoader $r4;
        org.xml.sax.EntityResolver $r1, $r6;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        $r1 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.xml.sax.EntityResolver entityResolver>;

        if $r1 != null goto label2;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.core.io.ResourceLoader getResourceLoader()>();

        if $r2 == null goto label1;

        $r5 = new org.springframework.beans.factory.xml.ResourceEntityResolver;

        specialinvoke $r5.<org.springframework.beans.factory.xml.ResourceEntityResolver: void <init>(org.springframework.core.io.ResourceLoader)>($r2);

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.xml.sax.EntityResolver entityResolver> = $r5;

        goto label2;

     label1:
        $r3 = new org.springframework.beans.factory.xml.DelegatingEntityResolver;

        $r4 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: java.lang.ClassLoader getBeanClassLoader()>();

        specialinvoke $r3.<org.springframework.beans.factory.xml.DelegatingEntityResolver: void <init>(java.lang.ClassLoader)>($r4);

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.xml.sax.EntityResolver entityResolver> = $r3;

     label2:
        $r6 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.xml.sax.EntityResolver entityResolver>;

        return $r6;
    }

    public void setErrorHandler(org.xml.sax.ErrorHandler)
    {
        org.xml.sax.ErrorHandler r1;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.xml.sax.ErrorHandler;

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.xml.sax.ErrorHandler errorHandler> = r1;

        return;
    }

    public void setDocumentReaderClass(java.lang.Class)
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r3;
        java.lang.Class r0, $r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r3 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r2 = class "Lorg/springframework/beans/factory/xml/BeanDefinitionDocumentReader;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("documentReaderClass must be an implementation of the BeanDefinitionDocumentReader interface");

        throw $r1;

     label2:
        r3.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: java.lang.Class documentReaderClass> = r0;

        return;
    }

    public int loadBeanDefinitions(org.springframework.core.io.Resource) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        org.springframework.core.io.support.EncodedResource $r1;
        int $i0;
        org.springframework.core.io.Resource r2;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r2 := @parameter0: org.springframework.core.io.Resource;

        $r1 = new org.springframework.core.io.support.EncodedResource;

        specialinvoke $r1.<org.springframework.core.io.support.EncodedResource: void <init>(org.springframework.core.io.Resource)>(r2);

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource)>($r1);

        return $i0;
    }

    public int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        boolean $z0, $z1, $z2, $z3;
        org.springframework.core.io.Resource $r5, $r9, $r21, $r30;
        java.lang.ThreadLocal $r3, $r10, $r18, $r26;
        java.util.Set $r24, r34;
        java.lang.StringBuilder $r13, $r14, $r15, $r19, $r22, $r29, $r31;
        java.lang.Throwable $r25, $r33;
        java.util.HashSet $r17;
        org.springframework.core.io.support.EncodedResource r0;
        int $i0;
        java.lang.String $r8, $r11, $r16, $r23, $r32;
        org.xml.sax.InputSource $r7;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r1;
        java.io.IOException $r27;
        org.springframework.beans.factory.BeanDefinitionStoreException $r12, $r28;
        org.apache.commons.logging.Log $r2, $r20;
        java.lang.Object $r4;
        java.io.InputStream $r6;

        r1 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r0 := @parameter0: org.springframework.core.io.support.EncodedResource;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "EncodedResource must not be null");

        $r2 = r1.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label01;

        $r20 = r1.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loading XML bean definitions from ");

        $r21 = virtualinvoke r0.<org.springframework.core.io.support.EncodedResource: org.springframework.core.io.Resource getResource()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r23);

     label01:
        $r3 = r1.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: java.lang.ThreadLocal resourcesCurrentlyBeingLoaded>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r24 = (java.util.Set) $r4;

        r34 = $r24;

        if $r24 != null goto label02;

        $r17 = new java.util.HashSet;

        specialinvoke $r17.<java.util.HashSet: void <init>(int)>(4);

        r34 = $r17;

        $r18 = r1.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: java.lang.ThreadLocal resourcesCurrentlyBeingLoaded>;

        virtualinvoke $r18.<java.lang.ThreadLocal: void set(java.lang.Object)>($r17);

     label02:
        $z1 = interfaceinvoke r34.<java.util.Set: boolean add(java.lang.Object)>(r0);

        if $z1 != 0 goto label03;

        $r12 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Detected cyclic loading of ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - check your import definitions!");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label03:
        $r5 = virtualinvoke r0.<org.springframework.core.io.support.EncodedResource: org.springframework.core.io.Resource getResource()>();

        $r6 = interfaceinvoke $r5.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

     label04:
        $r7 = new org.xml.sax.InputSource;

        specialinvoke $r7.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r6);

        $r8 = virtualinvoke r0.<org.springframework.core.io.support.EncodedResource: java.lang.String getEncoding()>();

        if $r8 == null goto label05;

        $r11 = virtualinvoke r0.<org.springframework.core.io.support.EncodedResource: java.lang.String getEncoding()>();

        virtualinvoke $r7.<org.xml.sax.InputSource: void setEncoding(java.lang.String)>($r11);

     label05:
        $r9 = virtualinvoke r0.<org.springframework.core.io.support.EncodedResource: org.springframework.core.io.Resource getResource()>();

        $i0 = virtualinvoke r1.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int doLoadBeanDefinitions(org.xml.sax.InputSource,org.springframework.core.io.Resource)>($r7, $r9);

     label06:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label07:
        interfaceinvoke r34.<java.util.Set: boolean remove(java.lang.Object)>(r0);

        $z2 = interfaceinvoke r34.<java.util.Set: boolean isEmpty()>();

        if $z2 == 0 goto label08;

        $r10 = r1.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: java.lang.ThreadLocal resourcesCurrentlyBeingLoaded>;

        virtualinvoke $r10.<java.lang.ThreadLocal: void remove()>();

     label08:
        return $i0;

     label09:
        $r33 := @caughtexception;

        virtualinvoke $r6.<java.io.InputStream: void close()>();

        throw $r33;

     label10:
        $r27 := @caughtexception;

        $r28 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("IOException parsing XML document from ");

        $r30 = virtualinvoke r0.<org.springframework.core.io.support.EncodedResource: org.springframework.core.io.Resource getResource()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.Throwable)>($r32, $r27);

        throw $r28;

     label11:
        $r25 := @caughtexception;

        interfaceinvoke r34.<java.util.Set: boolean remove(java.lang.Object)>(r0);

        $z3 = interfaceinvoke r34.<java.util.Set: boolean isEmpty()>();

        if $z3 == 0 goto label12;

        $r26 = r1.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: java.lang.ThreadLocal resourcesCurrentlyBeingLoaded>;

        virtualinvoke $r26.<java.lang.ThreadLocal: void remove()>();

     label12:
        throw $r25;

        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.io.IOException from label03 to label07 with label10;
        catch java.io.IOException from label09 to label10 with label10;
        catch java.lang.Throwable from label03 to label07 with label11;
        catch java.lang.Throwable from label09 to label11 with label11;
    }

    public int loadBeanDefinitions(org.xml.sax.InputSource) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        int $i0;
        org.xml.sax.InputSource r1;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.xml.sax.InputSource;

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int loadBeanDefinitions(org.xml.sax.InputSource,java.lang.String)>(r1, "resource loaded through SAX InputSource");

        return $i0;
    }

    public int loadBeanDefinitions(org.xml.sax.InputSource, java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.xml.sax.InputSource r1;
        org.springframework.core.io.DescriptiveResource $r2;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        int $i0;
        java.lang.String r3;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.xml.sax.InputSource;

        r3 := @parameter1: java.lang.String;

        $r2 = new org.springframework.core.io.DescriptiveResource;

        specialinvoke $r2.<org.springframework.core.io.DescriptiveResource: void <init>(java.lang.String)>(r3);

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int doLoadBeanDefinitions(org.xml.sax.InputSource,org.springframework.core.io.Resource)>(r1, $r2);

        return $i0;
    }

    protected int doLoadBeanDefinitions(org.xml.sax.InputSource, org.springframework.core.io.Resource) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.xml.sax.ErrorHandler $r5;
        org.w3c.dom.Document $r6;
        org.xml.sax.EntityResolver $r4;
        org.springframework.core.io.Resource r1;
        boolean $z0;
        org.xml.sax.SAXException $r25;
        java.lang.StringBuilder $r10, $r11, $r16, $r17, $r22, $r23, $r28, $r29, $r30, $r35, $r36, $r37, $r38, $r39;
        java.lang.Throwable $r7;
        org.springframework.beans.factory.xml.DocumentLoader $r3;
        int $i0, $i1, $i2;
        java.lang.String $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r31, $r34, $r40;
        org.xml.sax.InputSource r2;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        java.io.IOException $r13;
        org.springframework.beans.factory.BeanDefinitionStoreException $r8, $r14, $r20, $r41;
        org.xml.sax.SAXParseException $r32;
        javax.xml.parsers.ParserConfigurationException $r19;
        org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException $r26, $r33;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r2 := @parameter0: org.xml.sax.InputSource;

        r1 := @parameter1: org.springframework.core.io.Resource;

     label1:
        $i0 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int getValidationModeForResource(org.springframework.core.io.Resource)>(r1);

        $r3 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.xml.DocumentLoader documentLoader>;

        $r4 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.xml.sax.EntityResolver getEntityResolver()>();

        $r5 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.xml.sax.ErrorHandler errorHandler>;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: boolean isNamespaceAware()>();

        $r6 = interfaceinvoke $r3.<org.springframework.beans.factory.xml.DocumentLoader: org.w3c.dom.Document loadDocument(org.xml.sax.InputSource,org.xml.sax.EntityResolver,org.xml.sax.ErrorHandler,int,boolean)>(r2, $r4, $r5, $i0, $z0);

        $i1 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int registerBeanDefinitions(org.w3c.dom.Document,org.springframework.core.io.Resource)>($r6, r1);

     label2:
        return $i1;

     label3:
        $r41 := @caughtexception;

        throw $r41;

     label4:
        $r32 := @caughtexception;

        $r33 = new org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException;

        $r34 = interfaceinvoke r1.<org.springframework.core.io.Resource: java.lang.String getDescription()>();

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Line ");

        $i2 = virtualinvoke $r32.<org.xml.sax.SAXParseException: int getLineNumber()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in XML document from ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is invalid");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,org.xml.sax.SAXException)>($r34, $r40, $r32);

        throw $r33;

     label5:
        $r25 := @caughtexception;

        $r26 = new org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException;

        $r27 = interfaceinvoke r1.<org.springframework.core.io.Resource: java.lang.String getDescription()>();

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("XML document from ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is invalid");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,org.xml.sax.SAXException)>($r27, $r31, $r25);

        throw $r26;

     label6:
        $r19 := @caughtexception;

        $r20 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r21 = interfaceinvoke r1.<org.springframework.core.io.Resource: java.lang.String getDescription()>();

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Parser configuration exception parsing XML from ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>($r21, $r24, $r19);

        throw $r20;

     label7:
        $r13 := @caughtexception;

        $r14 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r15 = interfaceinvoke r1.<org.springframework.core.io.Resource: java.lang.String getDescription()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("IOException parsing XML document from ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>($r15, $r18, $r13);

        throw $r14;

     label8:
        $r7 := @caughtexception;

        $r8 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r9 = interfaceinvoke r1.<org.springframework.core.io.Resource: java.lang.String getDescription()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected exception parsing XML document from ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, $r12, $r7);

        throw $r8;

        catch org.springframework.beans.factory.BeanDefinitionStoreException from label1 to label2 with label3;
        catch org.xml.sax.SAXParseException from label1 to label2 with label4;
        catch org.xml.sax.SAXException from label1 to label2 with label5;
        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label6;
        catch java.io.IOException from label1 to label2 with label7;
        catch java.lang.Throwable from label1 to label2 with label8;
    }

    protected int getValidationModeForResource(org.springframework.core.io.Resource)
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        int $i0, $i1;
        org.springframework.core.io.Resource r1;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r1 := @parameter0: org.springframework.core.io.Resource;

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int getValidationMode()>();

        if $i0 == 1 goto label1;

        return $i0;

     label1:
        $i1 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: int detectValidationMode(org.springframework.core.io.Resource)>(r1);

        if $i1 == 1 goto label2;

        return $i1;

     label2:
        return 3;
    }

    protected int detectValidationMode(org.springframework.core.io.Resource)
    {
        int $i0;
        java.lang.String $r11, $r17, $r25;
        org.springframework.core.io.Resource r0;
        boolean $z0;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r2;
        java.io.IOException $r12, $r18;
        org.springframework.beans.factory.BeanDefinitionStoreException $r4, $r13, $r19;
        org.springframework.util.xml.XmlValidationModeDetector $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r24;
        java.io.InputStream $r1;

        r2 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r0 := @parameter0: org.springframework.core.io.Resource;

        $z0 = interfaceinvoke r0.<org.springframework.core.io.Resource: boolean isOpen()>();

        if $z0 == 0 goto label1;

        $r4 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Passed-in Resource [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] contains an open stream: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot determine validation mode automatically. Either pass in a Resource ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("that is able to create fresh streams, or explicitly specify the validationMode ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("on your XmlBeanDefinitionReader instance.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label1:
        $r1 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

     label2:
        goto label4;

     label3:
        $r18 := @caughtexception;

        $r19 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to determine validation mode for [");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: cannot open InputStream. ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did you attempt to load directly from a SAX InputSource without specifying the ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("validationMode on your XmlBeanDefinitionReader instance?");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r18);

        throw $r19;

     label4:
        $r3 = r2.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.util.xml.XmlValidationModeDetector validationModeDetector>;

        $i0 = virtualinvoke $r3.<org.springframework.util.xml.XmlValidationModeDetector: int detectValidationMode(java.io.InputStream)>($r1);

     label5:
        return $i0;

     label6:
        $r12 := @caughtexception;

        $r13 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to determine validation mode for [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: an error occurred whilst reading from the InputStream.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r12);

        throw $r13;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public int registerBeanDefinitions(org.w3c.dom.Document, org.springframework.core.io.Resource) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        org.springframework.beans.factory.xml.XmlReaderContext $r5;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r2, $r6;
        org.w3c.dom.Document r3;
        int $i0, $i1, $i2;
        org.springframework.beans.factory.xml.BeanDefinitionDocumentReader $r1;
        org.springframework.core.io.Resource r4;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r3 := @parameter0: org.w3c.dom.Document;

        r4 := @parameter1: org.springframework.core.io.Resource;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.xml.BeanDefinitionDocumentReader createBeanDefinitionDocumentReader()>();

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        $i0 = interfaceinvoke $r2.<org.springframework.beans.factory.support.BeanDefinitionRegistry: int getBeanDefinitionCount()>();

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.xml.XmlReaderContext createReaderContext(org.springframework.core.io.Resource)>(r4);

        interfaceinvoke $r1.<org.springframework.beans.factory.xml.BeanDefinitionDocumentReader: void registerBeanDefinitions(org.w3c.dom.Document,org.springframework.beans.factory.xml.XmlReaderContext)>(r3, $r5);

        $r6 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        $i1 = interfaceinvoke $r6.<org.springframework.beans.factory.support.BeanDefinitionRegistry: int getBeanDefinitionCount()>();

        $i2 = $i1 - $i0;

        return $i2;
    }

    protected org.springframework.beans.factory.xml.BeanDefinitionDocumentReader createBeanDefinitionDocumentReader()
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        java.lang.Class $r1, $r2;
        java.lang.Object $r3, $r4;
        org.springframework.beans.factory.xml.BeanDefinitionDocumentReader $r5;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        $r2 = class "Lorg/springframework/beans/factory/xml/BeanDefinitionDocumentReader;";

        $r1 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: java.lang.Class documentReaderClass>;

        $r3 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.Class)>($r1);

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r3);

        $r5 = (org.springframework.beans.factory.xml.BeanDefinitionDocumentReader) $r4;

        return $r5;
    }

    protected org.springframework.beans.factory.xml.XmlReaderContext createReaderContext(org.springframework.core.io.Resource)
    {
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r0;
        org.springframework.beans.factory.xml.NamespaceHandlerResolver $r1, $r4, $r8;
        org.springframework.beans.factory.parsing.SourceExtractor $r5;
        org.springframework.beans.factory.xml.XmlReaderContext $r2;
        org.springframework.beans.factory.parsing.ReaderEventListener $r6;
        org.springframework.beans.factory.parsing.ProblemReporter $r7;
        org.springframework.core.io.Resource r3;

        r0 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        r3 := @parameter0: org.springframework.core.io.Resource;

        $r1 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.xml.NamespaceHandlerResolver namespaceHandlerResolver>;

        if $r1 != null goto label1;

        $r8 = virtualinvoke r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.xml.NamespaceHandlerResolver createDefaultNamespaceHandlerResolver()>();

        r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.xml.NamespaceHandlerResolver namespaceHandlerResolver> = $r8;

     label1:
        $r2 = new org.springframework.beans.factory.xml.XmlReaderContext;

        $r7 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.parsing.ProblemReporter problemReporter>;

        $r6 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.parsing.ReaderEventListener eventListener>;

        $r5 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor>;

        $r4 = r0.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.beans.factory.xml.NamespaceHandlerResolver namespaceHandlerResolver>;

        specialinvoke $r2.<org.springframework.beans.factory.xml.XmlReaderContext: void <init>(org.springframework.core.io.Resource,org.springframework.beans.factory.parsing.ProblemReporter,org.springframework.beans.factory.parsing.ReaderEventListener,org.springframework.beans.factory.parsing.SourceExtractor,org.springframework.beans.factory.xml.XmlBeanDefinitionReader,org.springframework.beans.factory.xml.NamespaceHandlerResolver)>(r3, $r7, $r6, $r5, r0, $r4);

        return $r2;
    }

    protected org.springframework.beans.factory.xml.NamespaceHandlerResolver createDefaultNamespaceHandlerResolver()
    {
        org.springframework.core.io.ResourceLoader $r2;
        org.springframework.beans.factory.xml.XmlBeanDefinitionReader r1;
        org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver $r0;
        java.lang.ClassLoader $r3;

        r1 := @this: org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

        $r0 = new org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver;

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.xml.XmlBeanDefinitionReader: org.springframework.core.io.ResourceLoader getResourceLoader()>();

        $r3 = interfaceinvoke $r2.<org.springframework.core.io.ResourceLoader: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: void <init>(java.lang.ClassLoader)>($r3);

        return $r0;
    }
}
