public class org.springframework.expression.spel.ast.OperatorBetween extends org.springframework.expression.spel.ast.Operator
{

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.OperatorBetween r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;

        r0 := @this: org.springframework.expression.spel.ast.OperatorBetween;

        i0 := @parameter0: int;

        r1 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.Operator: void <init>(java.lang.String,int,org.springframework.expression.spel.ast.SpelNodeImpl[])>("between", i0, r1);

        return;
    }

    public org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r8, $r17;
        java.lang.Object[] $r10;
        org.springframework.expression.spel.support.BooleanTypedValue $r18;
        int $i0, $i1, $i2, $i3, $i4;
        org.springframework.expression.TypedValue $r3, $r6;
        boolean $z0, $z1;
        org.springframework.expression.spel.ast.OperatorBetween r0;
        org.springframework.expression.spel.SpelMessage $r11;
        java.util.List $r12, r13;
        org.springframework.expression.TypeComparator $r16;
        org.springframework.expression.spel.ExpressionState r2;
        java.lang.Object $r4, $r7, $r14, $r15;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r5, $r9;

        r0 := @this: org.springframework.expression.spel.ast.OperatorBetween;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorBetween: org.springframework.expression.spel.ast.SpelNodeImpl getLeftOperand()>();

        $r3 = virtualinvoke $r1.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        $r4 = virtualinvoke $r3.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r5 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorBetween: org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()>();

        $r6 = virtualinvoke $r5.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        $r7 = virtualinvoke $r6.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z0 = $r7 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r12 = (java.util.List) $r7;

        $i1 = interfaceinvoke $r12.<java.util.List: int size()>();

        if $i1 == 2 goto label2;

     label1:
        $r8 = new org.springframework.expression.spel.SpelEvaluationException;

        $r9 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorBetween: org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()>();

        $i0 = virtualinvoke $r9.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        $r11 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage BETWEEN_RIGHT_OPERAND_MUST_BE_TWO_ELEMENT_LIST>;

        $r10 = newarray (java.lang.Object)[0];

        specialinvoke $r8.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i0, $r11, $r10);

        throw $r8;

     label2:
        r13 = (java.util.List) $r7;

        $r14 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(1);

        $r16 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypeComparator getTypeComparator()>();

     label3:
        $i2 = interfaceinvoke $r16.<org.springframework.expression.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r14);

        if $i2 < 0 goto label4;

        $i3 = interfaceinvoke $r16.<org.springframework.expression.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r15);

        if $i3 > 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $r18 = staticinvoke <org.springframework.expression.spel.support.BooleanTypedValue: org.springframework.expression.spel.support.BooleanTypedValue forValue(boolean)>($z1);

     label6:
        return $r18;

     label7:
        $r17 := @caughtexception;

        $i4 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorBetween: int getStartPosition()>();

        virtualinvoke $r17.<org.springframework.expression.spel.SpelEvaluationException: void setPosition(int)>($i4);

        throw $r17;

        catch org.springframework.expression.spel.SpelEvaluationException from label3 to label6 with label7;
    }

    public volatile org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ast.OperatorBetween r0;
        org.springframework.expression.spel.ExpressionState r1;
        org.springframework.expression.spel.support.BooleanTypedValue $r2;

        r0 := @this: org.springframework.expression.spel.ast.OperatorBetween;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r2 = virtualinvoke r0.<org.springframework.expression.spel.ast.OperatorBetween: org.springframework.expression.spel.support.BooleanTypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r1);

        return $r2;
    }
}
