public class org.springframework.beans.NotWritablePropertyException extends org.springframework.beans.InvalidPropertyException
{
    private java.lang.String[] possibleMatches;

    public void <init>(java.lang.Class, java.lang.String)
    {
        java.lang.Class r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        org.springframework.beans.NotWritablePropertyException r0;
        java.lang.String r2, $r7;

        r0 := @this: org.springframework.beans.NotWritablePropertyException;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean property \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not writable or has an invalid setter method: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Does the return type of the getter match the parameter type of the setter?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.springframework.beans.InvalidPropertyException: void <init>(java.lang.Class,java.lang.String,java.lang.String)>(r1, r2, $r7);

        r0.<org.springframework.beans.NotWritablePropertyException: java.lang.String[] possibleMatches> = null;

        return;
    }

    public void <init>(java.lang.Class, java.lang.String, java.lang.String)
    {
        java.lang.Class r1;
        org.springframework.beans.NotWritablePropertyException r0;
        java.lang.String r2, r3;

        r0 := @this: org.springframework.beans.NotWritablePropertyException;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.springframework.beans.InvalidPropertyException: void <init>(java.lang.Class,java.lang.String,java.lang.String)>(r1, r2, r3);

        r0.<org.springframework.beans.NotWritablePropertyException: java.lang.String[] possibleMatches> = null;

        return;
    }

    public void <init>(java.lang.Class, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r4;
        java.lang.Class r1;
        org.springframework.beans.NotWritablePropertyException r0;
        java.lang.String r2, r3;

        r0 := @this: org.springframework.beans.NotWritablePropertyException;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Throwable;

        specialinvoke r0.<org.springframework.beans.InvalidPropertyException: void <init>(java.lang.Class,java.lang.String,java.lang.String,java.lang.Throwable)>(r1, r2, r3, r4);

        r0.<org.springframework.beans.NotWritablePropertyException: java.lang.String[] possibleMatches> = null;

        return;
    }

    public void <init>(java.lang.Class, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.Class r1;
        java.lang.String[] r4;
        org.springframework.beans.NotWritablePropertyException r0;
        java.lang.String r2, r3;

        r0 := @this: org.springframework.beans.NotWritablePropertyException;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        specialinvoke r0.<org.springframework.beans.InvalidPropertyException: void <init>(java.lang.Class,java.lang.String,java.lang.String)>(r1, r2, r3);

        r0.<org.springframework.beans.NotWritablePropertyException: java.lang.String[] possibleMatches> = null;

        r0.<org.springframework.beans.NotWritablePropertyException: java.lang.String[] possibleMatches> = r4;

        return;
    }

    public java.lang.String[] getPossibleMatches()
    {
        java.lang.String[] $r1;
        org.springframework.beans.NotWritablePropertyException r0;

        r0 := @this: org.springframework.beans.NotWritablePropertyException;

        $r1 = r0.<org.springframework.beans.NotWritablePropertyException: java.lang.String[] possibleMatches>;

        return $r1;
    }
}
