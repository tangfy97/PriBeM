public class org.apache.xmlbeans.impl.schema.StscComplexTypeResolver extends java.lang.Object
{
    private static final int MODEL_GROUP_CODE;
    private static org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] particleCodes;
    private static java.util.Map particleCodeMap;
    private static final int ATTRIBUTE_CODE;
    private static final int ATTRIBUTE_GROUP_CODE;
    private static final int ANY_ATTRIBUTE_CODE;
    private static org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] attributeCodes;
    private static java.util.Map attributeCodeMap;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$schema$StscComplexTypeResolver;

    public void <init>()
    {
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.xmlbeans.impl.xb.xsdschema.Group getContentModel(org.apache.xmlbeans.impl.xb.xsdschema.ComplexType)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.All $r1, $r8;
        org.apache.xmlbeans.impl.xb.xsdschema.GroupRef $r4, $r5;
        org.apache.xmlbeans.impl.xb.xsdschema.ComplexType r0;
        org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup $r2, $r3, $r6, $r7;

        r0 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.ComplexType;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.All getAll()>();

        if $r1 == null goto label1;

        $r8 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.All getAll()>();

        return $r8;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getSequence()>();

        if $r2 == null goto label2;

        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getSequence()>();

        return $r7;

     label2:
        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getChoice()>();

        if $r3 == null goto label3;

        $r6 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getChoice()>();

        return $r6;

     label3:
        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.GroupRef getGroup()>();

        if $r4 == null goto label4;

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.GroupRef getGroup()>();

        return $r5;

     label4:
        return null;
    }

    public static org.apache.xmlbeans.impl.xb.xsdschema.Group getContentModel(org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.All $r1, $r8;
        org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType r0;
        org.apache.xmlbeans.impl.xb.xsdschema.GroupRef $r4, $r5;
        org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup $r2, $r3, $r6, $r7;

        r0 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: org.apache.xmlbeans.impl.xb.xsdschema.All getAll()>();

        if $r1 == null goto label1;

        $r8 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: org.apache.xmlbeans.impl.xb.xsdschema.All getAll()>();

        return $r8;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getSequence()>();

        if $r2 == null goto label2;

        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getSequence()>();

        return $r7;

     label2:
        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getChoice()>();

        if $r3 == null goto label3;

        $r6 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getChoice()>();

        return $r6;

     label3:
        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: org.apache.xmlbeans.impl.xb.xsdschema.GroupRef getGroup()>();

        if $r4 == null goto label4;

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: org.apache.xmlbeans.impl.xb.xsdschema.GroupRef getGroup()>();

        return $r5;

     label4:
        return null;
    }

    public static org.apache.xmlbeans.impl.xb.xsdschema.Group getContentModel(org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.All $r1, $r8;
        org.apache.xmlbeans.impl.xb.xsdschema.GroupRef $r4, $r5;
        org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType r0;
        org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup $r2, $r3, $r6, $r7;

        r0 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.impl.xb.xsdschema.All getAll()>();

        if $r1 == null goto label1;

        $r8 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.impl.xb.xsdschema.All getAll()>();

        return $r8;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getSequence()>();

        if $r2 == null goto label2;

        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getSequence()>();

        return $r7;

     label2:
        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getChoice()>();

        if $r3 == null goto label3;

        $r6 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.impl.xb.xsdschema.ExplicitGroup getChoice()>();

        return $r6;

     label3:
        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.impl.xb.xsdschema.GroupRef getGroup()>();

        if $r4 == null goto label4;

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.impl.xb.xsdschema.GroupRef getGroup()>();

        return $r5;

     label4:
        return null;
    }

    static org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema(org.apache.xmlbeans.XmlObject)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema r4;
        java.lang.Throwable $r5;
        org.apache.xmlbeans.XmlCursor $r0;
        org.apache.xmlbeans.XmlObject $r1, r6;
        org.apache.xmlbeans.SchemaType $r2, $r3;
        boolean $z0, $z1;

        r6 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r0 = interfaceinvoke r6.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlCursor newCursor()>();

     label1:
        $z0 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlCursor: boolean toParent()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke $r0.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType schemaType()>();

        $r3 = <org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: org.apache.xmlbeans.SchemaType type>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        r4 = (org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema) $r1;

     label2:
        interfaceinvoke $r0.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        return r4;

     label3:
        interfaceinvoke $r0.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        interfaceinvoke $r0.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        throw $r5;

     label6:
        return null;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void resolveComplexType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.impl.schema.StscState $r3;
        org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType $r11, $r12, $r15;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, z17, z18, z19, z20, z21, $z22, $z23, $z24, $z25, $z26, $z27;
        org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType $r5, $r8, $r28;
        org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema $r4;
        java.util.List $r18, $r19, $r20, $r21;
        org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType $r6, $r7, $r9, $r10;
        org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType $r13, $r14, $r16, $r17;
        org.apache.xmlbeans.impl.xb.xsdschema.Group $r27;
        int $i0, $i1;
        org.apache.xmlbeans.XmlObject $r1;
        org.apache.xmlbeans.impl.xb.xsdschema.ComplexType r2;
        org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent $r24;
        org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent $r25, r26;
        java.lang.Object r22, r23;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        r2 = (org.apache.xmlbeans.impl.xb.xsdschema.ComplexType) $r1;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema getSchema(org.apache.xmlbeans.XmlObject)>(r2);

        $z0 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: boolean isSetAbstract()>();

        if $z0 == 0 goto label01;

        $z15 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: boolean getAbstract()>();

        goto label02;

     label01:
        $z15 = 0;

     label02:
        z1 = $z15;

        z16 = 0;

        z17 = 0;

        z18 = 0;

        z19 = 0;

        r22 = null;

        $z2 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: boolean isSetFinal()>();

        if $z2 == 0 goto label03;

        r22 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: java.lang.Object getFinal()>();

        goto label04;

     label03:
        if $r4 == null goto label04;

        $z14 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: boolean isSetFinalDefault()>();

        if $z14 == 0 goto label04;

        r22 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.Object getFinalDefault()>();

     label04:
        if r22 == null goto label07;

        $z9 = r22 instanceof java.lang.String;

        if $z9 == 0 goto label05;

        $z13 = virtualinvoke r22.<java.lang.Object: boolean equals(java.lang.Object)>("#all");

        if $z13 == 0 goto label05;

        z19 = 1;

        z18 = 1;

        z17 = 1;

        z16 = 1;

        goto label07;

     label05:
        $z10 = r22 instanceof java.util.List;

        if $z10 == 0 goto label07;

        $r20 = (java.util.List) r22;

        $z11 = interfaceinvoke $r20.<java.util.List: boolean contains(java.lang.Object)>("extension");

        if $z11 == 0 goto label06;

        z16 = 1;

     label06:
        $r21 = (java.util.List) r22;

        $z12 = interfaceinvoke $r21.<java.util.List: boolean contains(java.lang.Object)>("restriction");

        if $z12 == 0 goto label07;

        z17 = 1;

     label07:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setAbstractFinal(boolean,boolean,boolean,boolean,boolean)>(z1, z16, z17, z18, z19);

        z20 = 0;

        z21 = 0;

        r23 = null;

        $z22 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: boolean isSetBlock()>();

        if $z22 == 0 goto label08;

        r23 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: java.lang.Object getBlock()>();

        goto label09;

     label08:
        if $r4 == null goto label09;

        $z8 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: boolean isSetBlockDefault()>();

        if $z8 == 0 goto label09;

        r23 = interfaceinvoke $r4.<org.apache.xmlbeans.impl.xb.xsdschema.SchemaDocument$Schema: java.lang.Object getBlockDefault()>();

     label09:
        if r23 == null goto label12;

        $z3 = r23 instanceof java.lang.String;

        if $z3 == 0 goto label10;

        $z7 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>("#all");

        if $z7 == 0 goto label10;

        z21 = 1;

        z20 = 1;

        goto label12;

     label10:
        $z4 = r23 instanceof java.util.List;

        if $z4 == 0 goto label12;

        $r18 = (java.util.List) r23;

        $z5 = interfaceinvoke $r18.<java.util.List: boolean contains(java.lang.Object)>("extension");

        if $z5 == 0 goto label11;

        z20 = 1;

     label11:
        $r19 = (java.util.List) r23;

        $z6 = interfaceinvoke $r19.<java.util.List: boolean contains(java.lang.Object)>("restriction");

        if $z6 == 0 goto label12;

        z21 = 1;

     label12:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBlock(boolean,boolean)>(z20, z21);

        $r24 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent getComplexContent()>();

        $r25 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent getSimpleContent()>();

        r26 = $r25;

        $r27 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.xb.xsdschema.Group getContentModel(org.apache.xmlbeans.impl.xb.xsdschema.ComplexType)>(r2);

        if $r24 == null goto label13;

        $z23 = 1;

        goto label14;

     label13:
        $z23 = 0;

     label14:
        if $r25 == null goto label15;

        $z24 = 1;

        goto label16;

     label15:
        $z24 = 0;

     label16:
        $i0 = $z23 + $z24;

        if $r27 == null goto label17;

        $z25 = 1;

        goto label18;

     label17:
        $z25 = 0;

     label18:
        $i1 = $i0 + $z25;

        if $i1 <= 1 goto label19;

        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("A complex type must define either a content model, or a simpleContent or complexContent derivation: more than one found.", 26, r2);

        if $r24 == null goto label19;

        if $r25 == null goto label19;

        r26 = null;

     label19:
        if $r24 == null goto label26;

        $r11 = interfaceinvoke $r24.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent: org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType getExtension()>();

        if $r11 == null goto label20;

        $r16 = interfaceinvoke $r24.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent: org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType getRestriction()>();

        if $r16 == null goto label20;

        $r17 = interfaceinvoke $r24.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent: org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType getRestriction()>();

        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Restriction conflicts with extension", 26, $r17);

     label20:
        $z26 = interfaceinvoke $r24.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent: boolean isSetMixed()>();

        if $z26 == 0 goto label21;

        $z27 = interfaceinvoke $r24.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent: boolean getMixed()>();

        goto label22;

     label21:
        $z27 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: boolean getMixed()>();

     label22:
        $r12 = interfaceinvoke $r24.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent: org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType getExtension()>();

        if $r12 == null goto label23;

        $r15 = interfaceinvoke $r24.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent: org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType getExtension()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void resolveCcExtension(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType,boolean)>(r0, $r15, $z27);

        goto label25;

     label23:
        $r13 = interfaceinvoke $r24.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent: org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType getRestriction()>();

        if $r13 == null goto label24;

        $r14 = interfaceinvoke $r24.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexContentDocument$ComplexContent: org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType getRestriction()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void resolveCcRestriction(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType,boolean)>(r0, $r14, $z27);

        goto label25;

     label24:
        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Missing restriction or extension", 27, $r24);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void resolveErrorType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

     label25:
        return;

     label26:
        if r26 == null goto label31;

        $r5 = interfaceinvoke r26.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent: org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType getExtension()>();

        if $r5 == null goto label27;

        $r9 = interfaceinvoke r26.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent: org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType getRestriction()>();

        if $r9 == null goto label27;

        $r10 = interfaceinvoke r26.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent: org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType getRestriction()>();

        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Restriction conflicts with extension", 26, $r10);

     label27:
        $r28 = interfaceinvoke r26.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent: org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType getExtension()>();

        if $r28 == null goto label28;

        $r8 = interfaceinvoke r26.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent: org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType getExtension()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void resolveScExtension(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType)>(r0, $r8);

        goto label30;

     label28:
        $r6 = interfaceinvoke r26.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent: org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType getRestriction()>();

        if $r6 == null goto label29;

        $r7 = interfaceinvoke r26.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleContentDocument$SimpleContent: org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType getRestriction()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void resolveScRestriction(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType)>(r0, $r7);

        goto label30;

     label29:
        virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Missing restriction or extension", 27, r26);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void resolveErrorType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

     label30:
        return;

     label31:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void resolveBasicComplexType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        return;
    }

    static void resolveErrorType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1;
        java.lang.RuntimeException $r0;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("This type of error recovery not yet implemented.");

        throw $r0;
    }

    private static org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        org.apache.xmlbeans.SchemaType$Ref $r5;
        int $i0, i1;
        org.apache.xmlbeans.SchemaType$Ref[] r1;
        java.lang.Object $r3;
        org.apache.xmlbeans.SchemaType $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (org.apache.xmlbeans.SchemaType$Ref)[$i0];

        i1 = 0;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.xmlbeans.SchemaType) $r3;

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        r1[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    static void resolveBasicComplexType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl $r16;
        org.apache.xmlbeans.SchemaParticle $r10;
        org.apache.xmlbeans.QNameSet $r26, $r27;
        org.apache.xmlbeans.impl.schema.StscState $r11, $r13, $r14;
        byte $b2;
        java.util.Map $r20, $r21;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1, $r22, $r24;
        boolean z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Object[] $r15;
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult $r18, $r19;
        java.util.ArrayList $r0;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl $r12;
        java.util.LinkedHashMap $r7;
        org.apache.xmlbeans.impl.xb.xsdschema.Group $r6;
        org.apache.xmlbeans.SchemaType$Ref $r23;
        int $i0, $i1, $i3, $i4;
        org.apache.xmlbeans.XmlObject $r2;
        java.lang.String $r4, $r5, $r8, $r9, $r17;
        org.apache.xmlbeans.impl.xb.xsdschema.ComplexType r3;
        org.apache.xmlbeans.SchemaType$Ref[] $r25;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        r3 = (org.apache.xmlbeans.impl.xb.xsdschema.ComplexType) $r2;

        $r4 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r5 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        if $r5 == null goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        z0 = $z5;

        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.xb.xsdschema.Group getContentModel(org.apache.xmlbeans.impl.xb.xsdschema.ComplexType)>(r3);

        $z1 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z1 == 0 goto label3;

        $r14 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = "<complexType>";

        virtualinvoke $r14.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.5a", $r15, r3);

     label3:
        $i0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int translateParticleCode(org.apache.xmlbeans.impl.xb.xsdschema.Group)>($r6);

        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        $r8 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getElemFormDefault()>();

        $r9 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        $r10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaParticle translateContentModel(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlObject,java.lang.String,boolean,java.lang.String,java.lang.String,int,java.util.List,java.util.Map,boolean,org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup)>(r1, $r6, $r4, z0, $r8, $r9, $i0, $r0, $r7, 0, null);

        if $r10 == null goto label4;

        $i1 = interfaceinvoke $r10.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i1 != 1 goto label4;

        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        z2 = $z6;

        $r16 = new org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        specialinvoke $r16.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void <init>()>();

        $r17 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void translateAttributeModel(org.apache.xmlbeans.XmlObject,java.lang.String,boolean,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType,java.util.Set,org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl,org.apache.xmlbeans.SchemaType,boolean,org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl)>(r3, $r4, z0, $r17, $r0, r1, null, $r16, null, 1, null);

        $r18 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeEltWildcards(org.apache.xmlbeans.SchemaParticle)>($r10);

        $r19 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeAttrWildcards(org.apache.xmlbeans.SchemaAttributeModel)>($r16);

        if $r10 == null goto label6;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void buildStateMachine(org.apache.xmlbeans.SchemaParticle)>($r10);

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $z3 = virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.StscState: boolean noUpa()>();

        if $z3 != 0 goto label6;

        $r12 = (org.apache.xmlbeans.impl.schema.SchemaParticleImpl) $r10;

        $z4 = virtualinvoke $r12.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean isDeterministic()>();

        if $z4 != 0 goto label6;

        $r13 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r13.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-nonambig", null, $r6);

     label6:
        $r20 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildContentPropertyModelByQName(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaType)>($r10, r1);

        $r21 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildAttributePropertyModelByQName(org.apache.xmlbeans.SchemaAttributeModel,org.apache.xmlbeans.SchemaType)>($r16, r1);

        $z7 = interfaceinvoke r3.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexType: boolean getMixed()>();

        if $z7 == 0 goto label7;

        $b2 = 4;

        goto label9;

     label7:
        if $r10 != null goto label8;

        $b2 = 1;

        goto label9;

     label8:
        $b2 = 3;

     label9:
        $r22 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_TYPE>;

        $r23 = virtualinvoke $r22.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r23);

        $r24 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_TYPE>;

        $i3 = virtualinvoke $r24.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i4 = $i3 + 1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i4);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDerivationType(int)>(2);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setComplexTypeVariety(int)>($b2);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setContentModel(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaAttributeModel,java.util.Map,java.util.Map,boolean)>($r10, $r16, $r20, $r21, z2);

        $r25 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r0);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setAnonymousTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r25);

        $r26 = $r18.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: org.apache.xmlbeans.QNameSet typedWildcards>;

        $z8 = $r18.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: boolean hasWildcards>;

        $r27 = $r19.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: org.apache.xmlbeans.QNameSet typedWildcards>;

        $z9 = $r19.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: boolean hasWildcards>;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setWildcardSummary(org.apache.xmlbeans.QNameSet,boolean,org.apache.xmlbeans.QNameSet,boolean)>($r26, $z8, $r27, $z9);

        return;
    }

    static void resolveCcRestriction(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType, boolean)
    {
        org.apache.xmlbeans.QNameSet $r49, $r50;
        byte $b2;
        java.util.Map $r44, $r45;
        javax.xml.namespace.QName $r5, $r6, $r19, $r21, $r24, $r26, $r29, $r30, $r32, $r34;
        java.lang.Object[] $r18, $r31;
        org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType r4;
        java.util.ArrayList $r37;
        java.util.LinkedHashMap $r39;
        org.apache.xmlbeans.impl.xb.xsdschema.Group $r38;
        java.lang.String $r2, $r3, $r7, $r10, $r20, $r22, $r27, $r33, $r35, $r40, $r41;
        org.apache.xmlbeans.SchemaType$Ref[] $r48;
        org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl $r8, $r16, r43;
        org.apache.xmlbeans.XmlQName $r23, $r25;
        org.apache.xmlbeans.SchemaParticle $r42;
        org.apache.xmlbeans.impl.schema.StscState $r0, $r13, $r15;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1, $r17, $r28, r36, $r47;
        boolean z0, $z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult $r11, $r12;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl $r14;
        org.apache.xmlbeans.SchemaType$Ref $r46;
        int $i0, $i1, $i3, $i4;
        org.apache.xmlbeans.SchemaAttributeModel $r9;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r4 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType;

        z3 := @parameter2: boolean;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        if $r3 == null goto label01;

        $z9 = 1;

        goto label02;

     label01:
        $z9 = 0;

     label02:
        z0 = $z9;

        $r5 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: javax.xml.namespace.QName getBase()>();

        if $r5 != null goto label03;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("A complexContent must define a base type", 28, r4);

        r36 = null;

        goto label06;

     label03:
        $z1 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z1 == 0 goto label04;

        $r26 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: javax.xml.namespace.QName getBase()>();

        $r27 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        $r28 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findRedefinedGlobalType(javax.xml.namespace.QName,java.lang.String,org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r26, $r27, r1);

        r36 = $r28;

        if $r28 == null goto label05;

        $r29 = interfaceinvoke $r28.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r30 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $z8 = virtualinvoke $r29.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r30);

        if $z8 != 0 goto label05;

        $r31 = newarray (java.lang.Object)[3];

        $r31[0] = "<complexType>";

        $r32 = interfaceinvoke $r28.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r33 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r32);

        $r31[1] = $r33;

        $r34 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r35 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r34);

        $r31[2] = $r35;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.5b", $r31, r4);

        goto label05;

     label04:
        $r6 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: javax.xml.namespace.QName getBase()>();

        $r7 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        r36 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findGlobalType(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r6, $r7, $r2);

     label05:
        if r36 != null goto label06;

        $r24 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: javax.xml.namespace.QName getBase()>();

        $r25 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>($r24, 0, $r25, 1);

     label06:
        if r36 != null goto label07;

        r36 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_TYPE>;

     label07:
        if r36 == null goto label08;

        $z7 = interfaceinvoke r36.<org.apache.xmlbeans.SchemaType: boolean finalRestriction()>();

        if $z7 == 0 goto label08;

        $r18 = newarray (java.lang.Object)[2];

        $r19 = interfaceinvoke r36.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r20 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r19);

        $r18[0] = $r20;

        $r21 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r22 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r21);

        $r18[1] = $r22;

        $r23 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.1", $r18, $r23);

     label08:
        if r36 == null goto label09;

        $r17 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r36;

        $z6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r17);

        if $z6 != 0 goto label09;

        r36 = null;

     label09:
        $r37 = new java.util.ArrayList;

        specialinvoke $r37.<java.util.ArrayList: void <init>()>();

        $r38 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.xb.xsdschema.Group getContentModel(org.apache.xmlbeans.impl.xb.xsdschema.ComplexRestrictionType)>(r4);

        $i1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int translateParticleCode(org.apache.xmlbeans.impl.xb.xsdschema.Group)>($r38);

        $r39 = new java.util.LinkedHashMap;

        specialinvoke $r39.<java.util.LinkedHashMap: void <init>()>();

        $r40 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getElemFormDefault()>();

        $r41 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        $r42 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaParticle translateContentModel(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlObject,java.lang.String,boolean,java.lang.String,java.lang.String,int,java.util.List,java.util.Map,boolean,org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup)>(r1, $r38, $r2, z0, $r40, $r41, $i1, $r37, $r39, 0, null);

        if $r42 == null goto label10;

        $i0 = interfaceinvoke $r42.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i0 != 1 goto label10;

        $z10 = 1;

        goto label11;

     label10:
        $z10 = 0;

     label11:
        z2 = $z10;

        if r36 != null goto label12;

        $r16 = new org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        specialinvoke $r16.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void <init>()>();

        r43 = $r16;

        goto label13;

     label12:
        $r8 = new org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        $r9 = interfaceinvoke r36.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        specialinvoke $r8.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void <init>(org.apache.xmlbeans.SchemaAttributeModel)>($r9);

        r43 = $r8;

     label13:
        $r10 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void translateAttributeModel(org.apache.xmlbeans.XmlObject,java.lang.String,boolean,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType,java.util.Set,org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl,org.apache.xmlbeans.SchemaType,boolean,org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl)>(r4, $r2, z0, $r10, $r37, r1, null, r43, r36, 0, null);

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeEltWildcards(org.apache.xmlbeans.SchemaParticle)>($r42);

        $r12 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeAttrWildcards(org.apache.xmlbeans.SchemaAttributeModel)>(r43);

        if $r42 == null goto label14;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void buildStateMachine(org.apache.xmlbeans.SchemaParticle)>($r42);

        $r13 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $z4 = virtualinvoke $r13.<org.apache.xmlbeans.impl.schema.StscState: boolean noUpa()>();

        if $z4 != 0 goto label14;

        $r14 = (org.apache.xmlbeans.impl.schema.SchemaParticleImpl) $r42;

        $z5 = virtualinvoke $r14.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean isDeterministic()>();

        if $z5 != 0 goto label14;

        $r15 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r15.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-nonambig", null, $r38);

     label14:
        $r44 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildContentPropertyModelByQName(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaType)>($r42, r1);

        $r45 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildAttributePropertyModelByQName(org.apache.xmlbeans.SchemaAttributeModel,org.apache.xmlbeans.SchemaType)>(r43, r1);

        if z3 == 0 goto label15;

        $b2 = 4;

        goto label17;

     label15:
        if $r42 != null goto label16;

        $b2 = 1;

        goto label17;

     label16:
        $b2 = 3;

     label17:
        $r46 = interfaceinvoke r36.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r46);

        $r47 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r36;

        $i3 = virtualinvoke $r47.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i4 = $i3 + 1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i4);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDerivationType(int)>(1);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setComplexTypeVariety(int)>($b2);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setContentModel(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaAttributeModel,java.util.Map,java.util.Map,boolean)>($r42, r43, $r44, $r45, z2);

        $r48 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r37);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setAnonymousTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r48);

        $r49 = $r11.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: org.apache.xmlbeans.QNameSet typedWildcards>;

        $z11 = $r11.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: boolean hasWildcards>;

        $r50 = $r12.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: org.apache.xmlbeans.QNameSet typedWildcards>;

        $z12 = $r12.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: boolean hasWildcards>;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setWildcardSummary(org.apache.xmlbeans.QNameSet,boolean,org.apache.xmlbeans.QNameSet,boolean)>($r49, $z11, $r50, $z12);

        return;
    }

    static java.util.Map extractElementModel(org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.SchemaProperty[] $r2;
        java.util.HashMap $r0;
        org.apache.xmlbeans.SchemaProperty $r3, $r4, $r6;
        int $i0, i1;
        javax.xml.namespace.QName $r5;
        org.apache.xmlbeans.SchemaType r1, $r7;
        boolean $z0;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        if r1 == null goto label4;

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaProperty[] getProperties()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label4;

        $r3 = $r2[i1];

        $z0 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: boolean isAttribute()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r4 = $r2[i1];

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        $r6 = $r2[i1];

        $r7 = interfaceinvoke $r6.<org.apache.xmlbeans.SchemaProperty: org.apache.xmlbeans.SchemaType getType()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return $r0;
    }

    static void resolveCcExtension(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType, boolean)
    {
        org.apache.xmlbeans.QNameSet $r20, $r21;
        byte b9, $b10;
        org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType r4;
        java.util.Map $r10, $r65, $r66;
        org.apache.xmlbeans.SchemaType $r22, r57;
        javax.xml.namespace.QName $r5, $r6, $r31, $r35, $r37, $r41, $r45, $r47, $r50, $r51, $r53, $r55;
        java.lang.Object[] $r30, $r34, $r40, $r52;
        java.util.ArrayList $r9;
        org.apache.xmlbeans.impl.xb.xsdschema.Group $r11;
        java.lang.String $r2, $r3, $r7, $r14, $r32, $r36, $r38, $r42, $r48, $r54, $r56, $r59, $r60;
        org.apache.xmlbeans.SchemaType$Ref[] $r19;
        org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl $r12, $r27, r64;
        org.apache.xmlbeans.XmlQName $r28, $r29, $r33, $r39, $r43, $r46;
        org.apache.xmlbeans.SchemaParticle r8, $r58, $r61, r62, $r63;
        org.apache.xmlbeans.impl.schema.StscState $r0, $r24, $r26;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1, $r18, $r44, $r49;
        boolean z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, $z13, $z14, $z15, $z16;
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult $r15, $r16;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl $r25;
        org.apache.xmlbeans.SchemaType$Ref $r17, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.xmlbeans.SchemaAttributeModel $r13;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r4 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType;

        z12 := @parameter2: boolean;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        if $r3 == null goto label01;

        $z13 = 1;

        goto label02;

     label01:
        $z13 = 0;

     label02:
        z0 = $z13;

        $r5 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: javax.xml.namespace.QName getBase()>();

        if $r5 != null goto label03;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("A complexContent must define a base type", 28, r4);

        r57 = null;

        goto label06;

     label03:
        $z1 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z1 == 0 goto label04;

        $r47 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: javax.xml.namespace.QName getBase()>();

        $r48 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        $r49 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findRedefinedGlobalType(javax.xml.namespace.QName,java.lang.String,org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r47, $r48, r1);

        r57 = $r49;

        if $r49 == null goto label05;

        $r50 = interfaceinvoke $r49.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r51 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $z11 = virtualinvoke $r50.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r51);

        if $z11 != 0 goto label05;

        $r52 = newarray (java.lang.Object)[3];

        $r52[0] = "<complexType>";

        $r53 = interfaceinvoke $r49.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r54 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r53);

        $r52[1] = $r54;

        $r55 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r56 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r55);

        $r52[2] = $r56;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.5b", $r52, r4);

        goto label05;

     label04:
        $r6 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: javax.xml.namespace.QName getBase()>();

        $r7 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        r57 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findGlobalType(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r6, $r7, $r2);

     label05:
        if r57 != null goto label06;

        $r45 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: javax.xml.namespace.QName getBase()>();

        $r46 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>($r45, 0, $r46, 1);

     label06:
        if r57 == null goto label07;

        $r44 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r57;

        $z10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r44);

        if $z10 != 0 goto label07;

        r57 = null;

     label07:
        if r57 == null goto label08;

        $z9 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z9 == 0 goto label08;

        $r40 = newarray (java.lang.Object)[1];

        $r41 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r42 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r41);

        $r40[0] = $r42;

        $r43 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void recover(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-ct.1", $r40, $r43);

        r57 = null;

     label08:
        if r57 == null goto label09;

        $z8 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: boolean finalExtension()>();

        if $z8 == 0 goto label09;

        $r34 = newarray (java.lang.Object)[2];

        $r35 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r36 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r35);

        $r34[0] = $r36;

        $r37 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r38 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r37);

        $r34[1] = $r38;

        $r39 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-ct-extends.1.1", $r34, $r39);

     label09:
        if r57 != null goto label10;

        $r58 = null;

        goto label11;

     label10:
        $r58 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaParticle getContentModel()>();

     label11:
        r8 = $r58;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map extractElementModel(org.apache.xmlbeans.SchemaType)>(r57);

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.xb.xsdschema.Group getContentModel(org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType)>(r4);

        if r57 == null goto label13;

        $i7 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i7 != 2 goto label13;

        if $r11 == null goto label12;

        $r30 = newarray (java.lang.Object)[1];

        $r31 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r32 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r31);

        $r30[0] = $r32;

        $r33 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void recover(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-ct-extends.1.4.1", $r30, $r33);

        r57 = null;

        goto label13;

     label12:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void resolveScExtensionPart2(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType,java.lang.String,boolean)>(r1, r57, r4, $r2, z0);

        return;

     label13:
        $r59 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getElemFormDefault()>();

        $r60 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        $i8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int translateParticleCode(org.apache.xmlbeans.impl.xb.xsdschema.Group)>($r11);

        $r61 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaParticle translateContentModel(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlObject,java.lang.String,boolean,java.lang.String,java.lang.String,int,java.util.List,java.util.Map,boolean,org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup)>(r1, $r11, $r2, z0, $r59, $r60, $i8, $r9, $r10, 0, null);

        r62 = $r61;

        if $r61 != null goto label16;

        if z12 != 0 goto label16;

        if r57 == null goto label14;

        $i6 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i6 != 4 goto label14;

        $z14 = 1;

        goto label15;

     label14:
        $z14 = 0;

     label15:
        z12 = $z14;

     label16:
        if r57 == null goto label19;

        $i4 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i4 == 1 goto label19;

        $i5 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i5 != 4 goto label17;

        $z15 = 1;

        goto label18;

     label17:
        $z15 = 0;

     label18:
        if $z15 == z12 goto label19;

        $r29 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-ct-extends.1.4.2.2", null, $r29);

     label19:
        if r57 == null goto label20;

        $z7 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: boolean hasAllContent()>();

        if $z7 == 0 goto label20;

        if $r61 == null goto label20;

        $r28 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Cannot extend a type with \'all\' content model", 42, $r28);

        r62 = null;

     label20:
        $r63 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaParticle extendContentModel(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlObject)>(r8, r62, r4);

        if $r63 == null goto label21;

        $i3 = interfaceinvoke $r63.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i3 != 1 goto label21;

        $z16 = 1;

        goto label22;

     label21:
        $z16 = 0;

     label22:
        z2 = $z16;

        if r57 != null goto label23;

        $r27 = new org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        specialinvoke $r27.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void <init>()>();

        r64 = $r27;

        goto label24;

     label23:
        $r12 = new org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        $r13 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        specialinvoke $r12.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void <init>(org.apache.xmlbeans.SchemaAttributeModel)>($r13);

        r64 = $r12;

     label24:
        $r14 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void translateAttributeModel(org.apache.xmlbeans.XmlObject,java.lang.String,boolean,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType,java.util.Set,org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl,org.apache.xmlbeans.SchemaType,boolean,org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl)>(r4, $r2, z0, $r14, $r9, r1, null, r64, r57, 1, null);

        $r15 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeEltWildcards(org.apache.xmlbeans.SchemaParticle)>($r63);

        $r16 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeAttrWildcards(org.apache.xmlbeans.SchemaAttributeModel)>(r64);

        if $r63 == null goto label25;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void buildStateMachine(org.apache.xmlbeans.SchemaParticle)>($r63);

        $r24 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $z5 = virtualinvoke $r24.<org.apache.xmlbeans.impl.schema.StscState: boolean noUpa()>();

        if $z5 != 0 goto label25;

        $r25 = (org.apache.xmlbeans.impl.schema.SchemaParticleImpl) $r63;

        $z6 = virtualinvoke $r25.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean isDeterministic()>();

        if $z6 != 0 goto label25;

        $r26 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r26.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-nonambig", null, $r11);

     label25:
        $r65 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildContentPropertyModelByQName(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaType)>($r63, r1);

        $r66 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildAttributePropertyModelByQName(org.apache.xmlbeans.SchemaAttributeModel,org.apache.xmlbeans.SchemaType)>(r64, r1);

        if $r63 != null goto label26;

        if r57 == null goto label26;

        $i2 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i2 != 2 goto label26;

        b9 = 2;

        $r22 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getContentBasedOnType()>();

        $r23 = interfaceinvoke $r22.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setContentBasedOnTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r23);

        goto label30;

     label26:
        if z12 == 0 goto label27;

        $b10 = 4;

        goto label29;

     label27:
        if $r63 != null goto label28;

        $b10 = 1;

        goto label29;

     label28:
        $b10 = 3;

     label29:
        b9 = $b10;

     label30:
        if r57 != null goto label31;

        r57 = <org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.SchemaType type>;

     label31:
        $r17 = interfaceinvoke r57.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r17);

        $r18 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r57;

        $i0 = virtualinvoke $r18.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i1 = $i0 + 1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i1);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDerivationType(int)>(2);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setComplexTypeVariety(int)>(b9);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setContentModel(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaAttributeModel,java.util.Map,java.util.Map,boolean)>($r63, r64, $r65, $r66, z2);

        $r19 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r9);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setAnonymousTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r19);

        $r21 = $r15.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: org.apache.xmlbeans.QNameSet typedWildcards>;

        $z4 = $r15.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: boolean hasWildcards>;

        $r20 = $r16.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: org.apache.xmlbeans.QNameSet typedWildcards>;

        $z3 = $r16.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: boolean hasWildcards>;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setWildcardSummary(org.apache.xmlbeans.QNameSet,boolean,org.apache.xmlbeans.QNameSet,boolean)>($r21, $z4, $r20, $z3);

        return;
    }

    static void resolveScRestriction(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType)
    {
        org.apache.xmlbeans.SchemaType[] $r25;
        org.apache.xmlbeans.QNameSet $r19, $r20;
        java.util.Map $r14;
        org.apache.xmlbeans.SchemaType $r21, $r22, $r23;
        javax.xml.namespace.QName $r7, $r8, $r30, $r32, $r36, $r39, $r41, $r44, $r45, $r47, $r49;
        org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType $r6, $r51;
        org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType r5;
        java.lang.Object[] $r29, $r35, $r46;
        java.util.ArrayList $r4;
        java.lang.String $r2, $r3, $r9, $r12, $r31, $r33, $r37, $r42, $r48, $r50, $r52, $r53;
        org.apache.xmlbeans.SchemaType$Ref[] $r18, $r27;
        org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl $r10, $r28, r57;
        org.apache.xmlbeans.XmlQName $r34, $r40;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1, $r16, $r38, $r43, r54, r55, $r56, $r59;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8;
        java.util.List $r26;
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult $r13;
        org.apache.xmlbeans.SchemaType$Ref $r15, $r17, $r24, $r58;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.xmlbeans.SchemaAttributeModel $r11;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r5 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType;

        r54 = null;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        if $r3 == null goto label01;

        $z8 = 1;

        $z7 = 1;

        goto label02;

     label01:
        $z8 = 0;

        $z7 = 0;

     label02:
        z0 = $z8;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType: org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType getSimpleType()>();

        if $r6 == null goto label03;

        $r51 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType: org.apache.xmlbeans.impl.xb.xsdschema.LocalSimpleType getSimpleType()>();

        $r52 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getElemFormDefault()>();

        $r53 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        r54 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.impl.schema.SchemaTypeImpl translateAnonymousSimpleType(org.apache.xmlbeans.impl.xb.xsdschema.SimpleType,java.lang.String,boolean,java.lang.String,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType)>($r51, $r2, $z7, $r52, $r53, $r4, r1);

     label03:
        $r7 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType: javax.xml.namespace.QName getBase()>();

        if $r7 != null goto label04;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("A simpleContent restriction must define a base type", 28, r5);

        r55 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        goto label07;

     label04:
        $z1 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z1 == 0 goto label05;

        $r41 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType: javax.xml.namespace.QName getBase()>();

        $r42 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        $r43 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findRedefinedGlobalType(javax.xml.namespace.QName,java.lang.String,org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r41, $r42, r1);

        r55 = $r43;

        if $r43 == null goto label06;

        $r44 = interfaceinvoke $r43.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r45 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $z5 = virtualinvoke $r44.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r45);

        if $z5 != 0 goto label06;

        $r46 = newarray (java.lang.Object)[3];

        $r46[0] = "<simpleType>";

        $r47 = interfaceinvoke $r43.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r48 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r47);

        $r46[1] = $r48;

        $r49 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r50 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r49);

        $r46[2] = $r50;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.5b", $r46, r5);

        goto label06;

     label05:
        $r8 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType: javax.xml.namespace.QName getBase()>();

        $r9 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        r55 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findGlobalType(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r8, $r9, $r2);

     label06:
        if r55 != null goto label07;

        $r39 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType: javax.xml.namespace.QName getBase()>();

        $r40 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>($r39, 0, $r40, 1);

        r55 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

     label07:
        $r56 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r55;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r56);

        if r54 == null goto label08;

        $r38 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r54;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r38);

        goto label09;

     label08:
        r54 = r55;

     label09:
        $z2 = interfaceinvoke r55.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z2 == 0 goto label10;

        $r35 = newarray (java.lang.Object)[1];

        $r36 = interfaceinvoke r55.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r37 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r36);

        $r35[0] = $r37;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void recover(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("ct-props-correct.2", $r35, r5);

        r55 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        goto label11;

     label10:
        $i0 = interfaceinvoke r55.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i0 == 2 goto label11;

        if r54 != null goto label11;

        r55 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

     label11:
        if r55 == null goto label12;

        $z4 = interfaceinvoke r55.<org.apache.xmlbeans.SchemaType: boolean finalRestriction()>();

        if $z4 == 0 goto label12;

        $r29 = newarray (java.lang.Object)[2];

        $r30 = interfaceinvoke r55.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r31 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r30);

        $r29[0] = $r31;

        $r32 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r33 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r32);

        $r29[1] = $r33;

        $r34 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleRestrictionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.1", $r29, $r34);

     label12:
        if r55 != null goto label13;

        $r28 = new org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        specialinvoke $r28.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void <init>()>();

        r57 = $r28;

        goto label14;

     label13:
        $r10 = new org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        $r11 = interfaceinvoke r55.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        specialinvoke $r10.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void <init>(org.apache.xmlbeans.SchemaAttributeModel)>($r11);

        r57 = $r10;

     label14:
        $r12 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void translateAttributeModel(org.apache.xmlbeans.XmlObject,java.lang.String,boolean,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType,java.util.Set,org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl,org.apache.xmlbeans.SchemaType,boolean,org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl)>(r5, $r2, z0, $r12, $r4, r1, null, r57, r55, 0, null);

        $r13 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeAttrWildcards(org.apache.xmlbeans.SchemaAttributeModel)>(r57);

        $r14 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildAttributePropertyModelByQName(org.apache.xmlbeans.SchemaAttributeModel,org.apache.xmlbeans.SchemaType)>(r57, r1);

        $r15 = interfaceinvoke r55.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r15);

        $r16 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r55;

        $i1 = virtualinvoke $r16.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i2 = $i1 + 1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i2);

        $r17 = interfaceinvoke r54.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setContentBasedOnTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r17);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDerivationType(int)>(1);

        $r18 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r4);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setAnonymousTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r18);

        $r20 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        $r19 = $r13.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: org.apache.xmlbeans.QNameSet typedWildcards>;

        $z3 = $r13.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: boolean hasWildcards>;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setWildcardSummary(org.apache.xmlbeans.QNameSet,boolean,org.apache.xmlbeans.QNameSet,boolean)>($r20, 0, $r19, $z3);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setComplexTypeVariety(int)>(2);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setContentModel(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaAttributeModel,java.util.Map,java.util.Map,boolean)>(null, r57, null, $r14, 0);

        $i3 = interfaceinvoke r54.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setSimpleTypeVariety(int)>($i3);

        $r21 = interfaceinvoke r54.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        if $r21 != null goto label15;

        $r58 = null;

        goto label16;

     label15:
        $r22 = interfaceinvoke r54.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $r58 = interfaceinvoke $r22.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

     label16:
        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setPrimitiveTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r58);

        $i4 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        lookupswitch($i4)
        {
            case 2: goto label18;
            case 3: goto label17;
            default: goto label19;
        };

     label17:
        $r23 = interfaceinvoke r54.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getListItemType()>();

        $r24 = interfaceinvoke $r23.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setListItemTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r24);

        goto label19;

     label18:
        $r25 = interfaceinvoke r54.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getUnionMemberTypes()>();

        $r26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r25);

        $r27 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r26);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUnionMemberTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r27);

     label19:
        $r59 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r54;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveFacets(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.XmlObject,org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r1, r5, $r59);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveFundamentalFacets(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r1);

        return;
    }

    static void resolveScExtension(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType)
    {
        org.apache.xmlbeans.XmlQName $r13, $r18;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1, $r21, r29, $r30;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType r4;
        javax.xml.namespace.QName $r5, $r6, $r9, $r11, $r15, $r17, $r19, $r22, $r23, $r25, $r27;
        java.lang.Object[] $r8, $r14, $r24;
        int $i0;
        java.lang.String $r2, $r3, $r7, $r10, $r12, $r16, $r20, $r26, $r28;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r4 := @parameter1: org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r3 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        if $r3 == null goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        $r5 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType: javax.xml.namespace.QName getBase()>();

        if $r5 != null goto label3;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("A simpleContent extension must define a base type", 28, r4);

        r29 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

        goto label6;

     label3:
        $z1 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isRedefinition()>();

        if $z1 == 0 goto label4;

        $r19 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType: javax.xml.namespace.QName getBase()>();

        $r20 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        $r21 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findRedefinedGlobalType(javax.xml.namespace.QName,java.lang.String,org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r19, $r20, r1);

        r29 = $r21;

        if $r21 == null goto label5;

        $r22 = interfaceinvoke $r21.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r23 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $z3 = virtualinvoke $r22.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r23);

        if $z3 != 0 goto label5;

        $r24 = newarray (java.lang.Object)[3];

        $r24[0] = "<simpleType>";

        $r25 = interfaceinvoke $r21.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r26 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r25);

        $r24[1] = $r26;

        $r27 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r28 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r27);

        $r24[2] = $r28;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.5b", $r24, r4);

        goto label5;

     label4:
        $r6 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType: javax.xml.namespace.QName getBase()>();

        $r7 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        r29 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findGlobalType(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r6, $r7, $r2);

     label5:
        if r29 != null goto label6;

        $r17 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType: javax.xml.namespace.QName getBase()>();

        $r18 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>($r17, 0, $r18, 1);

        r29 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

     label6:
        $r30 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r29;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r30);

        $z5 = interfaceinvoke r29.<org.apache.xmlbeans.SchemaType: boolean isSimpleType()>();

        if $z5 != 0 goto label7;

        $i0 = interfaceinvoke r29.<org.apache.xmlbeans.SchemaType: int getContentType()>();

        if $i0 == 2 goto label7;

        $r14 = newarray (java.lang.Object)[1];

        $r15 = interfaceinvoke r29.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r16 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r15);

        $r14[0] = $r16;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-ct.2", $r14, r4);

        r29 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_SIMPLE>;

     label7:
        if r29 == null goto label8;

        $z2 = interfaceinvoke r29.<org.apache.xmlbeans.SchemaType: boolean finalExtension()>();

        if $z2 == 0 goto label8;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = interfaceinvoke r29.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r10 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r9);

        $r8[0] = $r10;

        $r11 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getName()>();

        $r12 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r11);

        $r8[1] = $r12;

        $r13 = interfaceinvoke r4.<org.apache.xmlbeans.impl.xb.xsdschema.SimpleExtensionType: org.apache.xmlbeans.XmlQName xgetBase()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-ct-extends.1.1", $r8, $r13);

     label8:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void resolveScExtensionPart2(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType,java.lang.String,boolean)>(r1, r29, r4, $r2, z0);

        return;
    }

    static void resolveScExtensionPart2(org.apache.xmlbeans.impl.schema.SchemaTypeImpl, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType, java.lang.String, boolean)
    {
        org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl $r1;
        org.apache.xmlbeans.SchemaType[] $r20;
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult $r8;
        java.util.ArrayList $r0;
        org.apache.xmlbeans.QNameSet $r14, $r15;
        org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType r4;
        java.util.Map $r9;
        org.apache.xmlbeans.SchemaType$Ref $r10, $r12, $r19, $r23;
        int $i0, $i1, $i2, $i3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r6, $r11, $r24;
        java.lang.String r5, $r7;
        org.apache.xmlbeans.SchemaType r2, $r16, $r17, $r18;
        boolean z0, $z1;
        java.util.List $r21;
        org.apache.xmlbeans.SchemaType$Ref[] $r13, $r22;
        org.apache.xmlbeans.SchemaAttributeModel $r3;

        r6 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        r2 := @parameter1: org.apache.xmlbeans.SchemaType;

        r4 := @parameter2: org.apache.xmlbeans.impl.xb.xsdschema.ExtensionType;

        r5 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

        specialinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void <init>(org.apache.xmlbeans.SchemaAttributeModel)>($r3);

        $r7 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getAttFormDefault()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void translateAttributeModel(org.apache.xmlbeans.XmlObject,java.lang.String,boolean,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType,java.util.Set,org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl,org.apache.xmlbeans.SchemaType,boolean,org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl)>(r4, r5, z0, $r7, $r0, r6, null, $r1, r2, 1, null);

        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeAttrWildcards(org.apache.xmlbeans.SchemaAttributeModel)>($r1);

        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildAttributePropertyModelByQName(org.apache.xmlbeans.SchemaAttributeModel,org.apache.xmlbeans.SchemaType)>($r1, r6);

        $r10 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r10);

        $r11 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r2;

        $i0 = virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i1 = $i0 + 1;

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i1);

        $r12 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setContentBasedOnTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r12);

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDerivationType(int)>(2);

        $r13 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r0);

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setAnonymousTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r13);

        $r15 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        $r14 = $r8.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: org.apache.xmlbeans.QNameSet typedWildcards>;

        $z1 = $r8.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: boolean hasWildcards>;

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setWildcardSummary(org.apache.xmlbeans.QNameSet,boolean,org.apache.xmlbeans.QNameSet,boolean)>($r15, 0, $r14, $z1);

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setComplexTypeVariety(int)>(2);

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setContentModel(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaAttributeModel,java.util.Map,java.util.Map,boolean)>(null, $r1, null, $r9, 0);

        $i2 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: int getSimpleVariety()>();

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setSimpleTypeVariety(int)>($i2);

        $r16 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        if $r16 != null goto label1;

        $r23 = null;

        goto label2;

     label1:
        $r17 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $r23 = interfaceinvoke $r17.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

     label2:
        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setPrimitiveTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r23);

        $i3 = virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getSimpleVariety()>();

        lookupswitch($i3)
        {
            case 2: goto label4;
            case 3: goto label3;
            default: goto label5;
        };

     label3:
        $r18 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getListItemType()>();

        $r19 = interfaceinvoke $r18.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setListItemTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r19);

        goto label5;

     label4:
        $r20 = interfaceinvoke r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getUnionMemberTypes()>();

        $r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r20);

        $r22 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r21);

        virtualinvoke r6.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setUnionMemberTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r22);

     label5:
        $r24 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r2;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveFacets(org.apache.xmlbeans.impl.schema.SchemaTypeImpl,org.apache.xmlbeans.XmlObject,org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r6, null, $r24);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveFundamentalFacets(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r6);

        return;
    }

    static org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeAttrWildcards(org.apache.xmlbeans.SchemaAttributeModel)
    {
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult $r1, $r3, $r5;
        org.apache.xmlbeans.QNameSet $r2, $r4, $r6;
        int $i0, $i1;
        org.apache.xmlbeans.SchemaAttributeModel r0;

        r0 := @parameter0: org.apache.xmlbeans.SchemaAttributeModel;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaAttributeModel: int getWildcardProcess()>();

        if $i0 != 0 goto label1;

        $r5 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult;

        $r6 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        specialinvoke $r5.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: void <init>(org.apache.xmlbeans.QNameSet,boolean)>($r6, 0);

        return $r5;

     label1:
        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaAttributeModel: int getWildcardProcess()>();

        if $i1 != 3 goto label2;

        $r3 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult;

        $r4 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        specialinvoke $r3.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: void <init>(org.apache.xmlbeans.QNameSet,boolean)>($r4, 1);

        return $r3;

     label2:
        $r1 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult;

        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        specialinvoke $r1.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: void <init>(org.apache.xmlbeans.QNameSet,boolean)>($r2, 1);

        return $r1;
    }

    static org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeEltWildcards(org.apache.xmlbeans.SchemaParticle)
    {
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult $r1, $r3, $r6, $r8, $r10;
        org.apache.xmlbeans.SchemaParticle r0, $r5;
        org.apache.xmlbeans.QNameSet $r4, $r7, $r9, $r11, $r12;
        int $i0, $i1, $i2, i3;
        boolean $z0, z1;
        org.apache.xmlbeans.QNameSetBuilder $r2;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        if r0 != null goto label1;

        $r10 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult;

        $r11 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        specialinvoke $r10.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: void <init>(org.apache.xmlbeans.QNameSet,boolean)>($r11, 0);

        return $r10;

     label1:
        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label8;
            case 5: goto label5;
            default: goto label8;
        };

     label2:
        $r2 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        z1 = 0;

        i3 = 0;

     label3:
        $i2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int countOfParticleChild()>();

        if i3 >= $i2 goto label4;

        $r5 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(i3);

        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult summarizeEltWildcards(org.apache.xmlbeans.SchemaParticle)>($r5);

        $r7 = $r6.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: org.apache.xmlbeans.QNameSet typedWildcards>;

        virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r7);

        $z0 = $r6.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: boolean hasWildcards>;

        z1 = z1 | $z0;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r3 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult;

        $r4 = virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: org.apache.xmlbeans.QNameSet toQNameSet()>();

        specialinvoke $r3.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: void <init>(org.apache.xmlbeans.QNameSet,boolean)>($r4, z1);

        return $r3;

     label5:
        $r1 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult;

        $i1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getWildcardProcess()>();

        if $i1 != 3 goto label6;

        $r12 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        goto label7;

     label6:
        $r12 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

     label7:
        specialinvoke $r1.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: void <init>(org.apache.xmlbeans.QNameSet,boolean)>($r12, 1);

        return $r1;

     label8:
        $r8 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult;

        $r9 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        specialinvoke $r8.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$WildcardResult: void <init>(org.apache.xmlbeans.QNameSet,boolean)>($r9, 0);

        return $r8;
    }

    static void translateAttributeModel(org.apache.xmlbeans.XmlObject, java.lang.String, boolean, java.lang.String, java.util.List, org.apache.xmlbeans.SchemaType, java.util.Set, org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl, org.apache.xmlbeans.SchemaType, boolean, org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl)
    {
        org.apache.xmlbeans.impl.schema.SchemaLocalAttributeImpl $r39;
        org.apache.xmlbeans.QNameSet $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r55;
        org.apache.xmlbeans.SchemaType r1, r24, $r42;
        java.util.Set r69;
        javax.xml.namespace.QName $r5, $r18, $r27, $r32, $r33, $r35, $r40, $r41, $r44, $r46, $r48, $r50, $r52, $r56, $r58, $r60, $r63, $r65;
        java.lang.Object[] $r16, $r26, $r34, $r43, $r49, $r57, $r62;
        org.apache.xmlbeans.XmlCursor $r3;
        java.lang.String r8, $r20, $r22, $r25, $r28, $r36, r38, $r45, $r51, $r53, $r59, $r61, $r64, $r66, $r72, r74, $r77, $r79, r80;
        org.apache.xmlbeans.impl.xb.xsdschema.Wildcard r73;
        org.apache.xmlbeans.impl.xb.xsdschema.Attribute r71;
        org.apache.xmlbeans.impl.xb.xsdschema.AttributeGroupRef r76;
        org.apache.xmlbeans.impl.xb.xsdschema.Attribute$Use $r54;
        org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl r4;
        org.apache.xmlbeans.XmlQName $r30;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10, z11, $z12, $z13, z14, z15;
        org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl r19, $r31, r78, r81;
        org.apache.xmlbeans.SchemaLocalAttribute $r47;
        java.util.List r23;
        org.apache.xmlbeans.impl.xb.xsdschema.NamespaceList $r7;
        java.util.HashSet $r68;
        org.apache.xmlbeans.XmlNCName $r67;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.xmlbeans.XmlObject r2, $r6, $r17, $r21, $r29, $r37;
        org.apache.xmlbeans.impl.xb.xsdschema.Wildcard$ProcessContents $r75;
        org.apache.xmlbeans.SchemaAttributeModel r70;

        r2 := @parameter0: org.apache.xmlbeans.XmlObject;

        r8 := @parameter1: java.lang.String;

        z8 := @parameter2: boolean;

        r38 := @parameter3: java.lang.String;

        r23 := @parameter4: java.util.List;

        r24 := @parameter5: org.apache.xmlbeans.SchemaType;

        r69 := @parameter6: java.util.Set;

        r4 := @parameter7: org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        r1 := @parameter8: org.apache.xmlbeans.SchemaType;

        z0 := @parameter9: boolean;

        r19 := @parameter10: org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        if r69 != null goto label01;

        $r68 = new java.util.HashSet;

        specialinvoke $r68.<java.util.HashSet: void <init>()>();

        r69 = $r68;

     label01:
        z9 = 0;

        z15 = 0;

        z14 = 0;

        z10 = 0;

        r70 = null;

        if r1 == null goto label02;

        r70 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaAttributeModel getAttributeModel()>();

     label02:
        $r3 = interfaceinvoke r2.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlCursor newCursor()>();

        z11 = interfaceinvoke $r3.<org.apache.xmlbeans.XmlCursor: boolean toFirstChild()>();

     label03:
        if z11 == 0 goto label37;

        $r5 = interfaceinvoke $r3.<org.apache.xmlbeans.XmlCursor: javax.xml.namespace.QName getName()>();

        $i0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int translateAttributeCode(javax.xml.namespace.QName)>($r5);

        tableswitch($i0)
        {
            case 100: goto label04;
            case 101: goto label21;
            case 102: goto label13;
            default: goto label36;
        };

     label04:
        $r37 = interfaceinvoke $r3.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        r71 = (org.apache.xmlbeans.impl.xb.xsdschema.Attribute) $r37;

        $r39 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.impl.schema.SchemaLocalAttributeImpl translateAttribute(org.apache.xmlbeans.impl.xb.xsdschema.Attribute,java.lang.String,java.lang.String,boolean,java.util.List,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.SchemaAttributeModel,boolean)>(r71, r8, r38, z8, r23, r24, r70, 1);

        if $r39 != null goto label05;

        goto label36;

     label05:
        $r40 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $z4 = interfaceinvoke r69.<java.util.Set: boolean contains(java.lang.Object)>($r40);

        if $z4 == 0 goto label06;

        $r62 = newarray (java.lang.Object)[2];

        $r63 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r64 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r63);

        $r62[0] = $r64;

        $r65 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r66 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r65);

        $r62[1] = $r66;

        $r67 = interfaceinvoke r71.<org.apache.xmlbeans.impl.xb.xsdschema.Attribute: org.apache.xmlbeans.XmlNCName xgetName()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("ct-props-correct.4", $r62, $r67);

        goto label36;

     label06:
        $r41 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        interfaceinvoke r69.<java.util.Set: boolean add(java.lang.Object)>($r41);

        if r70 == null goto label10;

        $r46 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r47 = interfaceinvoke r70.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.SchemaLocalAttribute getAttribute(javax.xml.namespace.QName)>($r46);

        if $r47 != null goto label07;

        if z0 != 0 goto label10;

        $r55 = interfaceinvoke r70.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        $r56 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $z7 = virtualinvoke $r55.<org.apache.xmlbeans.QNameSet: boolean contains(javax.xml.namespace.QName)>($r56);

        if $z7 != 0 goto label10;

        $r57 = newarray (java.lang.Object)[2];

        $r58 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r59 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r58);

        $r57[0] = $r59;

        $r60 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r61 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r60);

        $r57[1] = $r61;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.2.2", $r57, r71);

        goto label10;

     label07:
        if z0 == 0 goto label08;

        $i5 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: int getUse()>();

        if $i5 != 1 goto label10;

        $r54 = interfaceinvoke r71.<org.apache.xmlbeans.impl.xb.xsdschema.Attribute: org.apache.xmlbeans.impl.xb.xsdschema.Attribute$Use xgetUse()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("An extension cannot prohibit an attribute from the base type; use restriction instead.", 37, $r54);

        goto label10;

     label08:
        $i2 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: int getUse()>();

        if $i2 == 3 goto label10;

        $i3 = interfaceinvoke $r47.<org.apache.xmlbeans.SchemaLocalAttribute: int getUse()>();

        if $i3 != 3 goto label09;

        $r49 = newarray (java.lang.Object)[2];

        $r50 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r51 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r50);

        $r49[0] = $r51;

        $r52 = interfaceinvoke r24.<org.apache.xmlbeans.SchemaType: javax.xml.namespace.QName getName()>();

        $r53 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r52);

        $r49[1] = $r53;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.2.1.1", $r49, r71);

     label09:
        $i4 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: int getUse()>();

        if $i4 != 1 goto label10;

        $r48 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void removeProhibitedAttribute(javax.xml.namespace.QName)>($r48);

     label10:
        $i6 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: int getUse()>();

        if $i6 == 1 goto label11;

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void addAttribute(org.apache.xmlbeans.SchemaLocalAttribute)>($r39);

        goto label12;

     label11:
        $r42 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: org.apache.xmlbeans.SchemaType getType()>();

        if r23 == null goto label12;

        $z6 = interfaceinvoke r23.<java.util.List: boolean contains(java.lang.Object)>($r42);

        if $z6 == 0 goto label12;

        interfaceinvoke r23.<java.util.List: boolean remove(java.lang.Object)>($r42);

     label12:
        $r72 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: java.lang.String getDefaultText()>();

        if $r72 == null goto label36;

        $z5 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: boolean isFixed()>();

        if $z5 != 0 goto label36;

        $i1 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: int getUse()>();

        if $i1 == 2 goto label36;

        $r43 = newarray (java.lang.Object)[1];

        $r44 = interfaceinvoke $r39.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r45 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r44);

        $r43[0] = $r45;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-attribute.2", $r43, r71);

        goto label36;

     label13:
        $r6 = interfaceinvoke $r3.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        r73 = (org.apache.xmlbeans.impl.xb.xsdschema.Wildcard) $r6;

        if z15 == 0 goto label14;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Only one attribute wildcard allowed", 38, r73);

        goto label36;

     label14:
        z9 = 1;

        z15 = 1;

        z14 = 1;

        $r7 = interfaceinvoke r73.<org.apache.xmlbeans.impl.xb.xsdschema.Wildcard: org.apache.xmlbeans.impl.xb.xsdschema.NamespaceList xgetNamespace()>();

        if $r7 != null goto label15;

        r74 = "##any";

        goto label16;

     label15:
        r74 = interfaceinvoke $r7.<org.apache.xmlbeans.impl.xb.xsdschema.NamespaceList: java.lang.String getStringValue()>();

     label16:
        $r9 = staticinvoke <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet forWildcardNamespaceString(java.lang.String,java.lang.String)>(r74, r8);

        if r70 == null goto label18;

        if z0 != 0 goto label18;

        $r14 = interfaceinvoke r70.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        if $r14 != null goto label17;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.4.1", null, r73);

        goto label36;

     label17:
        $r15 = interfaceinvoke r70.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        $z1 = virtualinvoke $r15.<org.apache.xmlbeans.QNameSet: boolean containsAll(org.apache.xmlbeans.QNameSetSpecification)>($r9);

        if $z1 != 0 goto label18;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r74;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("derivation-ok-restriction.4.2", $r16, r73);

        goto label36;

     label18:
        $r75 = interfaceinvoke r73.<org.apache.xmlbeans.impl.xb.xsdschema.Wildcard: org.apache.xmlbeans.impl.xb.xsdschema.Wildcard$ProcessContents xgetProcessContents()>();

        $i7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int translateWildcardProcess(org.apache.xmlbeans.impl.xb.xsdschema.Wildcard$ProcessContents)>($r75);

        $i8 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: int getWildcardProcess()>();

        if $i8 != 0 goto label19;

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void setWildcardSet(org.apache.xmlbeans.QNameSet)>($r9);

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void setWildcardProcess(int)>($i7);

        goto label36;

     label19:
        if z0 == 0 goto label20;

        $r12 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        $r13 = virtualinvoke $r9.<org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet union(org.apache.xmlbeans.QNameSetSpecification)>($r12);

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void setWildcardSet(org.apache.xmlbeans.QNameSet)>($r13);

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void setWildcardProcess(int)>($i7);

        goto label36;

     label20:
        $r10 = virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        $r11 = virtualinvoke $r9.<org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet intersect(org.apache.xmlbeans.QNameSetSpecification)>($r10);

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void setWildcardSet(org.apache.xmlbeans.QNameSet)>($r11);

        goto label36;

     label21:
        $r17 = interfaceinvoke $r3.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        r76 = (org.apache.xmlbeans.impl.xb.xsdschema.AttributeGroupRef) $r17;

        $r18 = interfaceinvoke r76.<org.apache.xmlbeans.impl.xb.xsdschema.AttributeGroupRef: javax.xml.namespace.QName getRef()>();

        if $r18 != null goto label22;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Attribute group reference must have a ref attribute", 39, r76);

        goto label36;

     label22:
        if r19 == null goto label26;

        if z8 == 0 goto label23;

        $r77 = r8;

        goto label24;

     label23:
        $r77 = null;

     label24:
        $r31 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl findRedefinedAttributeGroup(javax.xml.namespace.QName,java.lang.String,org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl)>($r18, $r77, r19);

        r78 = $r31;

        if $r31 == null goto label29;

        $r32 = virtualinvoke r19.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: javax.xml.namespace.QName getName()>();

        $r33 = virtualinvoke $r31.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: javax.xml.namespace.QName getName()>();

        $z3 = virtualinvoke $r32.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r33);

        if $z3 == 0 goto label29;

        if z10 == 0 goto label25;

        $r34 = newarray (java.lang.Object)[1];

        $r35 = virtualinvoke r19.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: javax.xml.namespace.QName getName()>();

        $r36 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r35);

        $r34[0] = $r36;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.7.1", $r34, r76);

     label25:
        z10 = 1;

        goto label29;

     label26:
        if z8 == 0 goto label27;

        $r79 = r8;

        goto label28;

     label27:
        $r79 = null;

     label28:
        r78 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl findAttributeGroup(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r18, $r79, r8);

     label29:
        if r78 != null goto label30;

        $r30 = interfaceinvoke r76.<org.apache.xmlbeans.impl.xb.xsdschema.AttributeGroupRef: org.apache.xmlbeans.XmlQName xgetRef()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>($r18, 4, $r30, 1);

        goto label36;

     label30:
        $z2 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: boolean isProcessing(java.lang.Object)>(r78);

        if $z2 == 0 goto label31;

        $r26 = newarray (java.lang.Object)[1];

        $r27 = virtualinvoke r78.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: javax.xml.namespace.QName getName()>();

        $r28 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r27);

        $r26[0] = $r28;

        $r29 = virtualinvoke r78.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-attribute_group.3", $r26, $r29);

        goto label36;

     label31:
        r80 = r8;

        $r20 = virtualinvoke r78.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: java.lang.String getTargetNamespace()>();

        if $r20 == null goto label34;

        r80 = virtualinvoke r78.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: java.lang.String getTargetNamespace()>();

        $r25 = virtualinvoke r78.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: java.lang.String getChameleonNamespace()>();

        if $r25 == null goto label32;

        $z12 = 1;

        goto label33;

     label32:
        $z12 = 0;

     label33:
        z8 = $z12;

     label34:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void startProcessing(java.lang.Object)>(r78);

        r81 = null;

        $z13 = virtualinvoke r78.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: boolean isRedefinition()>();

        if $z13 == 0 goto label35;

        r81 = r78;

     label35:
        $r21 = virtualinvoke r78.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        $r22 = virtualinvoke r78.<org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl: java.lang.String getFormDefault()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void translateAttributeModel(org.apache.xmlbeans.XmlObject,java.lang.String,boolean,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType,java.util.Set,org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl,org.apache.xmlbeans.SchemaType,boolean,org.apache.xmlbeans.impl.schema.SchemaAttributeGroupImpl)>($r21, r80, z8, $r22, r23, r24, r69, r4, r1, z0, r81);

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void finishProcessing(java.lang.Object)>(r78);

        goto label36;

     label36:
        z11 = interfaceinvoke $r3.<org.apache.xmlbeans.XmlCursor: boolean toNextSibling()>();

        goto label03;

     label37:
        if z0 != 0 goto label38;

        if z14 != 0 goto label38;

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void setWildcardSet(org.apache.xmlbeans.QNameSet)>(null);

        virtualinvoke r4.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void setWildcardProcess(int)>(0);

     label38:
        return;
    }

    static org.apache.xmlbeans.SchemaParticle extendContentModel(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlObject)
    {
        java.lang.Object[] $r7;
        org.apache.xmlbeans.SchemaParticle[] $r6, $r8, $r9;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl $r2;
        java.util.ArrayList $r3;
        org.apache.xmlbeans.SchemaParticle r0, r1, $r11;
        int $i0;
        java.math.BigInteger $r4, $r5;
        org.apache.xmlbeans.XmlObject r10;

        r1 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r0 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        r10 := @parameter2: org.apache.xmlbeans.XmlObject;

        if r0 != null goto label1;

        return r1;

     label1:
        if r1 != null goto label2;

        return r0;

     label2:
        $r2 = new org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        specialinvoke $r2.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void <init>()>();

        virtualinvoke $r2.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setParticleType(int)>(3);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void addMinusPointlessParticles(java.util.List,org.apache.xmlbeans.SchemaParticle,int)>($r3, r1, 3);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void addMinusPointlessParticles(java.util.List,org.apache.xmlbeans.SchemaParticle,int)>($r3, r0, 3);

        $r4 = <java.math.BigInteger: java.math.BigInteger ONE>;

        virtualinvoke $r2.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setMinOccurs(java.math.BigInteger)>($r4);

        $r5 = <java.math.BigInteger: java.math.BigInteger ONE>;

        virtualinvoke $r2.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setMaxOccurs(java.math.BigInteger)>($r5);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r6 = newarray (org.apache.xmlbeans.SchemaParticle)[$i0];

        $r7 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.apache.xmlbeans.SchemaParticle[]) $r7;

        $r9 = (org.apache.xmlbeans.SchemaParticle[]) $r8;

        virtualinvoke $r2.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setParticleChildren(org.apache.xmlbeans.SchemaParticle[])>($r9);

        $r11 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaParticle filterPointlessParticlesAndVerifyAllParticles(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlObject)>($r2, r10);

        return $r11;
    }

    static java.math.BigInteger extractMinOccurs(org.apache.xmlbeans.XmlNonNegativeInteger)
    {
        java.math.BigInteger $r1, $r2, $r3;
        org.apache.xmlbeans.XmlNonNegativeInteger r0;

        r0 := @parameter0: org.apache.xmlbeans.XmlNonNegativeInteger;

        if r0 != null goto label1;

        $r3 = <java.math.BigInteger: java.math.BigInteger ONE>;

        return $r3;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.XmlNonNegativeInteger: java.math.BigInteger getBigIntegerValue()>();

        if $r1 != null goto label2;

        $r2 = <java.math.BigInteger: java.math.BigInteger ONE>;

        return $r2;

     label2:
        return $r1;
    }

    static java.math.BigInteger extractMaxOccurs(org.apache.xmlbeans.impl.xb.xsdschema.AllNNI)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.AllNNI r0;
        org.apache.xmlbeans.XmlInteger $r3;
        int $i0;
        java.math.BigInteger $r4, $r5;
        org.apache.xmlbeans.SchemaType $r1, $r2;

        r0 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.AllNNI;

        if r0 != null goto label1;

        $r5 = <java.math.BigInteger: java.math.BigInteger ONE>;

        return $r5;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.AllNNI: org.apache.xmlbeans.SchemaType instanceType()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i0 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        if $i0 != 11 goto label2;

        $r3 = (org.apache.xmlbeans.XmlInteger) r0;

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.XmlInteger: java.math.BigInteger getBigIntegerValue()>();

        return $r4;

     label2:
        return null;
    }

    static org.apache.xmlbeans.SchemaParticle translateContentModel(org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.XmlObject, java.lang.String, boolean, java.lang.String, java.lang.String, int, java.util.List, java.util.Map, boolean, org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup)
    {
        org.apache.xmlbeans.QNameSet r95;
        java.util.Map r17;
        java.math.BigInteger $r3, $r5, $r20, $r57, $r61, r92, r93;
        org.apache.xmlbeans.SchemaType r14, $r21, $r77, $r82, r94;
        javax.xml.namespace.QName $r13, $r24, $r30, $r38, $r44, $r47, $r54, $r56, $r59, $r63, $r75, $r79, $r81;
        org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl $r72;
        org.apache.xmlbeans.XmlNonNegativeInteger $r2, $r69, $r73;
        java.lang.Object[] $r10, $r46, $r58, $r62, $r78;
        org.apache.xmlbeans.XmlCursor $r7, $r26;
        java.lang.AssertionError $r23, $r84;
        java.util.ArrayList $r8;
        org.apache.xmlbeans.impl.xb.xsdschema.Group $r50, r96;
        java.lang.StringBuffer $r28, $r29, $r32, $r33, $r36, $r37, $r40, $r41;
        java.lang.String $r27, $r31, $r34, $r39, $r42, $r48, $r60, $r64, $r67, $r80, r86, r87, r88, $r97, $r98, $r99;
        org.apache.xmlbeans.impl.xb.xsdschema.AllNNI $r4, $r70, $r74;
        java.lang.IllegalStateException $r22;
        org.apache.xmlbeans.impl.xb.xsdschema.AnyDocument$Any $r71;
        org.apache.xmlbeans.XmlQName $r51;
        org.apache.xmlbeans.SchemaParticle $r6, $r18;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, z10, z11, z12, $z13, z14;
        org.apache.xmlbeans.SchemaParticle[] $r9, $r11, $r12;
        java.util.List r16;
        org.apache.xmlbeans.impl.xb.xsdschema.NamespaceList $r66;
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup $r19, r89;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl $r1, $r65, r91;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.apache.xmlbeans.XmlObject $r15, $r25, $r35, $r43, $r45, $r49, r85;
        org.apache.xmlbeans.impl.xb.xsdschema.Wildcard$ProcessContents $r68;
        org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl $r52, $r53, $r55, r90;
        java.lang.Object $r76;
        org.apache.xmlbeans.impl.xb.xsdschema.LocalElement $r83;

        r14 := @parameter0: org.apache.xmlbeans.SchemaType;

        r85 := @parameter1: org.apache.xmlbeans.XmlObject;

        r86 := @parameter2: java.lang.String;

        z10 := @parameter3: boolean;

        r87 := @parameter4: java.lang.String;

        r88 := @parameter5: java.lang.String;

        i7 := @parameter6: int;

        r16 := @parameter7: java.util.List;

        r17 := @parameter8: java.util.Map;

        z8 := @parameter9: boolean;

        r89 := @parameter10: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup;

        if r85 == null goto label01;

        if i7 != 0 goto label02;

     label01:
        return null;

     label02:
        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $z0 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        if i7 != 0 goto label03;

        $r84 = new java.lang.AssertionError;

        specialinvoke $r84.<java.lang.AssertionError: void <init>()>();

        throw $r84;

     label03:
        z11 = 0;

        r90 = null;

        if i7 != 4 goto label08;

        if z8 != 0 goto label04;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Must be a sequence, choice or all here", 32, r85);

     label04:
        $r83 = (org.apache.xmlbeans.impl.xb.xsdschema.LocalElement) r85;

        $r72 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl translateElement(org.apache.xmlbeans.impl.xb.xsdschema.Element,java.lang.String,boolean,java.lang.String,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType)>($r83, r86, z10, r87, r88, r16, r14);

        r91 = $r72;

        if $r72 != null goto label05;

        return null;

     label05:
        $r73 = interfaceinvoke $r83.<org.apache.xmlbeans.impl.xb.xsdschema.LocalElement: org.apache.xmlbeans.XmlNonNegativeInteger xgetMinOccurs()>();

        r92 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.math.BigInteger extractMinOccurs(org.apache.xmlbeans.XmlNonNegativeInteger)>($r73);

        $r74 = interfaceinvoke $r83.<org.apache.xmlbeans.impl.xb.xsdschema.LocalElement: org.apache.xmlbeans.impl.xb.xsdschema.AllNNI xgetMaxOccurs()>();

        r93 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.math.BigInteger extractMaxOccurs(org.apache.xmlbeans.impl.xb.xsdschema.AllNNI)>($r74);

        $r75 = virtualinvoke $r72.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: javax.xml.namespace.QName getName()>();

        $r76 = interfaceinvoke r17.<java.util.Map: java.lang.Object get(java.lang.Object)>($r75);

        r94 = (org.apache.xmlbeans.SchemaType) $r76;

        if r94 != null goto label06;

        $r81 = virtualinvoke $r72.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: javax.xml.namespace.QName getName()>();

        $r82 = virtualinvoke $r72.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType getType()>();

        interfaceinvoke r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r81, $r82);

        goto label07;

     label06:
        $r77 = virtualinvoke $r72.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType getType()>();

        $z9 = virtualinvoke $r77.<java.lang.Object: boolean equals(java.lang.Object)>(r94);

        if $z9 != 0 goto label07;

        $r78 = newarray (java.lang.Object)[1];

        $r79 = virtualinvoke $r72.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: javax.xml.namespace.QName getName()>();

        $r80 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r79);

        $r78[0] = $r80;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-element-consistent", $r78, r85);

        return null;

     label07:
        goto label37;

     label08:
        if i7 != 5 goto label12;

        if z8 != 0 goto label09;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Must be a sequence, choice or all here", 32, r85);

     label09:
        $r71 = (org.apache.xmlbeans.impl.xb.xsdschema.AnyDocument$Any) r85;

        $r65 = new org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        specialinvoke $r65.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void <init>()>();

        r91 = $r65;

        virtualinvoke $r65.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setParticleType(int)>(5);

        $r66 = interfaceinvoke $r71.<org.apache.xmlbeans.impl.xb.xsdschema.AnyDocument$Any: org.apache.xmlbeans.impl.xb.xsdschema.NamespaceList xgetNamespace()>();

        if $r66 != null goto label10;

        r95 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet ALL>;

        goto label11;

     label10:
        $r67 = interfaceinvoke $r66.<org.apache.xmlbeans.impl.xb.xsdschema.NamespaceList: java.lang.String getStringValue()>();

        r95 = staticinvoke <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet forWildcardNamespaceString(java.lang.String,java.lang.String)>($r67, r86);

     label11:
        virtualinvoke $r65.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setWildcardSet(org.apache.xmlbeans.QNameSet)>(r95);

        $r68 = interfaceinvoke $r71.<org.apache.xmlbeans.impl.xb.xsdschema.AnyDocument$Any: org.apache.xmlbeans.impl.xb.xsdschema.Wildcard$ProcessContents xgetProcessContents()>();

        $i6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int translateWildcardProcess(org.apache.xmlbeans.impl.xb.xsdschema.Wildcard$ProcessContents)>($r68);

        virtualinvoke $r65.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setWildcardProcess(int)>($i6);

        $r69 = interfaceinvoke $r71.<org.apache.xmlbeans.impl.xb.xsdschema.AnyDocument$Any: org.apache.xmlbeans.XmlNonNegativeInteger xgetMinOccurs()>();

        r92 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.math.BigInteger extractMinOccurs(org.apache.xmlbeans.XmlNonNegativeInteger)>($r69);

        $r70 = interfaceinvoke $r71.<org.apache.xmlbeans.impl.xb.xsdschema.AnyDocument$Any: org.apache.xmlbeans.impl.xb.xsdschema.AllNNI xgetMaxOccurs()>();

        r93 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.math.BigInteger extractMaxOccurs(org.apache.xmlbeans.impl.xb.xsdschema.AllNNI)>($r70);

        goto label37;

     label12:
        r96 = (org.apache.xmlbeans.impl.xb.xsdschema.Group) r85;

        $r1 = new org.apache.xmlbeans.impl.schema.SchemaParticleImpl;

        specialinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void <init>()>();

        r91 = $r1;

        $r2 = interfaceinvoke r96.<org.apache.xmlbeans.impl.xb.xsdschema.Group: org.apache.xmlbeans.XmlNonNegativeInteger xgetMinOccurs()>();

        $r3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.math.BigInteger extractMinOccurs(org.apache.xmlbeans.XmlNonNegativeInteger)>($r2);

        r92 = $r3;

        $r4 = interfaceinvoke r96.<org.apache.xmlbeans.impl.xb.xsdschema.Group: org.apache.xmlbeans.impl.xb.xsdschema.AllNNI xgetMaxOccurs()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.math.BigInteger extractMaxOccurs(org.apache.xmlbeans.impl.xb.xsdschema.AllNNI)>($r4);

        r93 = $r5;

        if i7 != 100 goto label33;

        $r24 = interfaceinvoke r96.<org.apache.xmlbeans.impl.xb.xsdschema.Group: javax.xml.namespace.QName getRef()>();

        if $r24 != null goto label13;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Group reference must have a ref attribute", 33, r85);

        return null;

     label13:
        if r89 == null goto label19;

        if z10 == 0 goto label14;

        $r97 = r86;

        goto label15;

     label14:
        $r97 = null;

     label15:
        $r52 = virtualinvoke r89.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup: org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl getGroup()>();

        $r53 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl findRedefinedModelGroup(javax.xml.namespace.QName,java.lang.String,org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl)>($r24, $r97, $r52);

        r90 = $r53;

        if $r53 == null goto label22;

        $r54 = virtualinvoke $r53.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: javax.xml.namespace.QName getName()>();

        $r55 = virtualinvoke r89.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup: org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl getGroup()>();

        $r56 = virtualinvoke $r55.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: javax.xml.namespace.QName getName()>();

        $z4 = virtualinvoke $r54.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r56);

        if $z4 == 0 goto label22;

        $z5 = virtualinvoke r89.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup: boolean isSeenRedefinition()>();

        if $z5 == 0 goto label16;

        $r62 = newarray (java.lang.Object)[1];

        $r63 = virtualinvoke $r53.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: javax.xml.namespace.QName getName()>();

        $r64 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r63);

        $r62[0] = $r64;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.6.1.1", $r62, r85);

     label16:
        $r57 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z6 = virtualinvoke $r57.<java.math.BigInteger: boolean equals(java.lang.Object)>($r5);

        if $z6 == 0 goto label17;

        $r61 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z7 = virtualinvoke $r61.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z7 != 0 goto label18;

     label17:
        $r58 = newarray (java.lang.Object)[1];

        $r59 = virtualinvoke $r53.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: javax.xml.namespace.QName getName()>();

        $r60 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r59);

        $r58[0] = $r60;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("src-redefine.6.1.2", $r58, r85);

     label18:
        virtualinvoke r89.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup: void setSeenRedefinition(boolean)>(1);

        goto label22;

     label19:
        if z10 == 0 goto label20;

        $r98 = r86;

        goto label21;

     label20:
        $r98 = null;

     label21:
        r90 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl findModelGroup(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r24, $r98, r86);

     label22:
        if r90 != null goto label23;

        $r50 = (org.apache.xmlbeans.impl.xb.xsdschema.Group) r85;

        $r51 = interfaceinvoke $r50.<org.apache.xmlbeans.impl.xb.xsdschema.Group: org.apache.xmlbeans.XmlQName xgetRef()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>($r24, 6, $r51, 1);

        return null;

     label23:
        $z3 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: boolean isProcessing(java.lang.Object)>(r90);

        if $z3 == 0 goto label24;

        $r46 = newarray (java.lang.Object)[1];

        $r47 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: javax.xml.namespace.QName getName()>();

        $r48 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r47);

        $r46[0] = $r48;

        $r49 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("mg-props-correct.2", $r46, $r49);

        return null;

     label24:
        $r25 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        $r26 = interfaceinvoke $r25.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlCursor newCursor()>();

        z12 = interfaceinvoke $r26.<org.apache.xmlbeans.XmlCursor: boolean toFirstChild()>();

     label25:
        if z12 == 0 goto label27;

        $r44 = interfaceinvoke $r26.<org.apache.xmlbeans.XmlCursor: javax.xml.namespace.QName getName()>();

        $i5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int translateParticleCode(javax.xml.namespace.QName)>($r44);

        i7 = $i5;

        if $i5 == 0 goto label26;

        $r45 = interfaceinvoke $r26.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        r85 = (org.apache.xmlbeans.impl.xb.xsdschema.Group) $r45;

        goto label27;

     label26:
        z12 = interfaceinvoke $r26.<org.apache.xmlbeans.XmlCursor: boolean toNextSibling()>();

        goto label25;

     label27:
        if i7 != 0 goto label28;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Model group ");

        $r38 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: javax.xml.namespace.QName getName()>();

        $r39 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r38);

        $r40 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is empty");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        $r43 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r42, 32, $r43);

        return null;

     label28:
        if i7 == 1 goto label29;

        if i7 == 3 goto label29;

        if i7 == 2 goto label29;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Model group ");

        $r30 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: javax.xml.namespace.QName getName()>();

        $r31 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r30);

        $r32 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a sequence, all, or choice");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        $r35 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>($r34, 32, $r35);

     label29:
        $r99 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: java.lang.String getTargetNamespace()>();

        if $r99 == null goto label30;

        r86 = $r99;

     label30:
        r87 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: java.lang.String getElemFormDefault()>();

        r88 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: java.lang.String getAttFormDefault()>();

        $r27 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: java.lang.String getChameleonNamespace()>();

        if $r27 == null goto label31;

        $z13 = 1;

        goto label32;

     label31:
        $z13 = 0;

     label32:
        z10 = $z13;

     label33:
        tableswitch(i7)
        {
            case 1: goto label34;
            case 2: goto label34;
            case 3: goto label34;
            default: goto label35;
        };

     label34:
        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setParticleType(int)>(i7);

        z11 = 1;

        goto label37;

     label35:
        $z2 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: boolean $assertionsDisabled>;

        if $z2 != 0 goto label36;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label36:
        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>()>();

        throw $r22;

     label37:
        if r93 == null goto label38;

        $i4 = virtualinvoke r92.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r93);

        if $i4 <= 0 goto label38;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("p-props-correct.2.1", null, r85);

        r93 = r92;

     label38:
        if r93 == null goto label39;

        $r20 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $i3 = virtualinvoke r93.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r20);

        if $i3 >= 0 goto label39;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void warning(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("p-props-correct.2.2", null, r85);

        $r21 = virtualinvoke r91.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaType getType()>();

        interfaceinvoke r16.<java.util.List: boolean remove(java.lang.Object)>($r21);

        return null;

     label39:
        virtualinvoke r91.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setMinOccurs(java.math.BigInteger)>(r92);

        virtualinvoke r91.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setMaxOccurs(java.math.BigInteger)>(r93);

        if r90 == null goto label40;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void startProcessing(java.lang.Object)>(r90);

        r89 = null;

        $z1 = virtualinvoke r90.<org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl: boolean isRedefinition()>();

        if $z1 == 0 goto label40;

        $r19 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup;

        specialinvoke $r19.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup: void <init>(org.apache.xmlbeans.impl.schema.SchemaModelGroupImpl)>(r90);

        r89 = $r19;

     label40:
        if z11 == 0 goto label45;

        $r7 = interfaceinvoke r85.<org.apache.xmlbeans.XmlObject: org.apache.xmlbeans.XmlCursor newCursor()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        z14 = interfaceinvoke $r7.<org.apache.xmlbeans.XmlCursor: boolean toFirstChild()>();

     label41:
        if z14 == 0 goto label44;

        $r13 = interfaceinvoke $r7.<org.apache.xmlbeans.XmlCursor: javax.xml.namespace.QName getName()>();

        $i1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int translateParticleCode(javax.xml.namespace.QName)>($r13);

        if $i1 != 0 goto label42;

        goto label43;

     label42:
        $r15 = interfaceinvoke $r7.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlObject getObject()>();

        $r18 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaParticle translateContentModel(org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.XmlObject,java.lang.String,boolean,java.lang.String,java.lang.String,int,java.util.List,java.util.Map,boolean,org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$RedefinitionForGroup)>(r14, $r15, r86, z10, r87, r88, $i1, r16, r17, 1, r89);

        $i2 = virtualinvoke r91.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int getParticleType()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void addMinusPointlessParticles(java.util.List,org.apache.xmlbeans.SchemaParticle,int)>($r8, $r18, $i2);

     label43:
        z14 = interfaceinvoke $r7.<org.apache.xmlbeans.XmlCursor: boolean toNextSibling()>();

        goto label41;

     label44:
        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $r9 = newarray (org.apache.xmlbeans.SchemaParticle)[$i0];

        $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (org.apache.xmlbeans.SchemaParticle[]) $r10;

        $r12 = (org.apache.xmlbeans.SchemaParticle[]) $r11;

        virtualinvoke r91.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setParticleChildren(org.apache.xmlbeans.SchemaParticle[])>($r12);

        interfaceinvoke $r7.<org.apache.xmlbeans.XmlCursor: void dispose()>();

     label45:
        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaParticle filterPointlessParticlesAndVerifyAllParticles(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.XmlObject)>(r91, r85);

        if r90 == null goto label46;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void finishProcessing(java.lang.Object)>(r90);

     label46:
        return $r6;
    }

    static int translateWildcardProcess(org.apache.xmlbeans.impl.xb.xsdschema.Wildcard$ProcessContents)
    {
        java.lang.String $r1, $r2, $r3;
        org.apache.xmlbeans.impl.xb.xsdschema.Wildcard$ProcessContents r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.Wildcard$ProcessContents;

        if r0 != null goto label1;

        return 1;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.Wildcard$ProcessContents: java.lang.String getStringValue()>();

        $r2 = "lax";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 2;

     label2:
        $r3 = "skip";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label3;

        return 3;

     label3:
        return 1;
    }

    static org.apache.xmlbeans.SchemaParticle filterPointlessParticlesAndVerifyAllParticles(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.XmlObject)
    {
        java.lang.IllegalStateException $r18;
        org.apache.xmlbeans.SchemaParticle r0, $r3, $r13, $r17;
        org.apache.xmlbeans.impl.schema.StscState $r8, $r10, $r21;
        java.math.BigInteger $r1, $r5, $r6, $r7, $r9, $r11, $r12, $r14, $r15, $r20;
        boolean $z0, z1, $z2, $z3, $z5, $z6;
        org.apache.xmlbeans.SchemaParticle[] $r2, $r16;
        java.lang.AssertionError $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13;
        org.apache.xmlbeans.XmlObject r4;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r4 := @parameter1: org.apache.xmlbeans.XmlObject;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r1 == null goto label01;

        $r20 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $i10 = virtualinvoke $r20.<java.math.BigInteger: int signum()>();

        if $i10 != 0 goto label01;

        return null;

     label01:
        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label04;
            case 3: goto label02;
            case 4: goto label06;
            case 5: goto label06;
            default: goto label07;
        };

     label02:
        $r16 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $i8 = lengthof $r16;

        if $i8 != 0 goto label03;

        return null;

     label03:
        $z2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: boolean isSingleton()>();

        if $z2 == 0 goto label09;

        $i9 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int countOfParticleChild()>();

        if $i9 != 1 goto label09;

        $r17 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(0);

        return $r17;

     label04:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $i1 = lengthof $r2;

        if $i1 != 0 goto label05;

        $r14 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r15 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i7 = virtualinvoke $r14.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r15);

        if $i7 != 0 goto label05;

        return null;

     label05:
        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: boolean isSingleton()>();

        if $z0 == 0 goto label09;

        $i6 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int countOfParticleChild()>();

        if $i6 != 1 goto label09;

        $r13 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(0);

        return $r13;

     label06:
        return r0;

     label07:
        $z3 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: boolean $assertionsDisabled>;

        if $z3 != 0 goto label08;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label08:
        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>()>();

        throw $r18;

     label09:
        $i11 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i11 != 1 goto label10;

        $z6 = 1;

        $z5 = 1;

        goto label11;

     label10:
        $z6 = 0;

        $z5 = 0;

     label11:
        z1 = $z5;

        if $z6 == 0 goto label13;

        $r9 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r9 == null goto label12;

        $r11 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r12 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $i5 = virtualinvoke $r11.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r12);

        if $i5 <= 0 goto label13;

     label12:
        $r10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r10.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-all-limited.1.2a", null, r4);

     label13:
        i12 = 0;

     label14:
        $i13 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int countOfParticleChild()>();

        if i12 >= $i13 goto label18;

        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle getParticleChild(int)>(i12);

        $i2 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i2 != 1 goto label15;

        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-all-limited.1.2b", null, r4);

        goto label17;

     label15:
        if z1 == 0 goto label17;

        $i3 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i3 != 4 goto label16;

        $r5 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r5 == null goto label16;

        $r6 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r7 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $i4 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i4 <= 0 goto label17;

     label16:
        $r21 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r21.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("cos-all-limited.2", null, r4);

     label17:
        i12 = i12 + 1;

        goto label14;

     label18:
        return r0;
    }

    static void addMinusPointlessParticles(java.util.List, org.apache.xmlbeans.SchemaParticle, int)
    {
        org.apache.xmlbeans.SchemaParticle[] $r2, $r4;
        org.apache.xmlbeans.SchemaParticle r0;
        java.util.List r1, $r3, $r5;
        int $i0, i1;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: org.apache.xmlbeans.SchemaParticle;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        return;

     label1:
        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label2;
            default: goto label4;
        };

     label2:
        if i1 != 3 goto label4;

        $z0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: boolean isSingleton()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return;

     label3:
        if i1 != 2 goto label4;

        $z1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: boolean isSingleton()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return;

     label4:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    static java.util.Map buildAttributePropertyModelByQName(org.apache.xmlbeans.SchemaAttributeModel, org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.SchemaLocalAttribute $r3, $r6;
        java.util.LinkedHashMap $r0;
        org.apache.xmlbeans.SchemaLocalAttribute[] $r2;
        org.apache.xmlbeans.SchemaProperty $r7;
        int $i0, i1;
        org.apache.xmlbeans.SchemaAttributeModel r1;
        javax.xml.namespace.QName $r4;
        org.apache.xmlbeans.SchemaType r5;

        r1 := @parameter0: org.apache.xmlbeans.SchemaAttributeModel;

        r5 := @parameter1: org.apache.xmlbeans.SchemaType;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaAttributeModel: org.apache.xmlbeans.SchemaLocalAttribute[] getAttributes()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = $r2[i1];

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaLocalAttribute: javax.xml.namespace.QName getName()>();

        $r6 = $r2[i1];

        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaProperty buildUseProperty(org.apache.xmlbeans.SchemaField,org.apache.xmlbeans.SchemaType)>($r6, r5);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    static java.util.Map buildContentPropertyModelByQName(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.SchemaType)
    {
        java.lang.IllegalStateException $r28;
        org.apache.xmlbeans.SchemaParticle r0, $r14;
        org.apache.xmlbeans.SchemaProperty r32, r34;
        java.util.Map $r15, $r30, r31;
        java.math.BigInteger $r3, $r4, $r8, $r9, $r10, $r11, $r12, $r25, r35, $r36;
        org.apache.xmlbeans.SchemaType r13, $r21, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, z8, z9;
        org.apache.xmlbeans.SchemaParticle[] $r2;
        java.util.Collection $r5, $r16;
        org.apache.xmlbeans.impl.schema.SchemaPropertyImpl $r26, r33, $r37, $r38;
        javax.xml.namespace.QName $r19, $r24;
        java.lang.AssertionError $r23, $r29;
        java.util.LinkedHashMap $r1;
        int $i0, $i1, i2;
        org.apache.xmlbeans.SchemaLocalElement $r27;
        java.util.Iterator $r6, $r17;
        java.lang.Object $r7, $r18, $r20;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r13 := @parameter1: org.apache.xmlbeans.SchemaType;

        if r0 != null goto label01;

        $r30 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        return $r30;

     label01:
        z6 = 0;

        z9 = 0;

        z8 = 0;

        r31 = null;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label02;
            case 4: goto label04;
            case 5: goto label05;
            default: goto label06;
        };

     label02:
        z6 = 1;

        z9 = 1;

        z8 = 1;

        goto label08;

     label03:
        z6 = 0;

        z9 = 0;

        z8 = 0;

        goto label08;

     label04:
        $r27 = (org.apache.xmlbeans.SchemaLocalElement) r0;

        r31 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildElementPropertyModel(org.apache.xmlbeans.SchemaLocalElement,org.apache.xmlbeans.SchemaType)>($r27, r13);

        goto label08;

     label05:
        r31 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        goto label08;

     label06:
        $z5 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: boolean $assertionsDisabled>;

        if $z5 != 0 goto label07;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label07:
        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>()>();

        throw $r28;

     label08:
        if r31 != null goto label21;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r31 = $r1;

        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i2 = 0;

     label09:
        $i1 = lengthof $r2;

        if i2 >= $i1 goto label15;

        $r14 = $r2[i2];

        $r15 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildContentPropertyModelByQName(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaType)>($r14, r13);

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Collection values()>();

        $r17 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z7 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label14;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r32 = (org.apache.xmlbeans.SchemaProperty) $r18;

        $r19 = interfaceinvoke r32.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        $r20 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        r33 = (org.apache.xmlbeans.impl.schema.SchemaPropertyImpl) $r20;

        if r33 != null goto label12;

        if z9 != 0 goto label11;

        $r26 = (org.apache.xmlbeans.impl.schema.SchemaPropertyImpl) r32;

        $r25 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        virtualinvoke $r26.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setMinOccurs(java.math.BigInteger)>($r25);

     label11:
        $r24 = interfaceinvoke r32.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r32);

        goto label10;

     label12:
        $z3 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: boolean $assertionsDisabled>;

        if $z3 != 0 goto label13;

        $r21 = virtualinvoke r33.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: org.apache.xmlbeans.SchemaType getType()>();

        $r22 = interfaceinvoke r32.<org.apache.xmlbeans.SchemaProperty: org.apache.xmlbeans.SchemaType getType()>();

        $z4 = virtualinvoke $r21.<java.lang.Object: boolean equals(java.lang.Object)>($r22);

        if $z4 != 0 goto label13;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label13:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void mergeProperties(org.apache.xmlbeans.impl.schema.SchemaPropertyImpl,org.apache.xmlbeans.SchemaProperty,boolean)>(r33, r32, z8);

        goto label10;

     label14:
        i2 = i2 + 1;

        goto label09;

     label15:
        $r3 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        $r5 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label16:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r34 = (org.apache.xmlbeans.SchemaProperty) $r7;

        $r8 = interfaceinvoke r34.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMinOccurs()>();

        $r9 = interfaceinvoke r34.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMaxOccurs()>();

        r35 = $r9;

        $r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        if $r4 == null goto label17;

        $r12 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $z2 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label17;

        r35 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        goto label20;

     label17:
        if $r9 == null goto label20;

        $r11 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $z1 = virtualinvoke $r9.<java.math.BigInteger: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label20;

        if $r4 != null goto label18;

        $r36 = null;

        goto label19;

     label18:
        $r36 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

     label19:
        r35 = $r36;

     label20:
        $r37 = (org.apache.xmlbeans.impl.schema.SchemaPropertyImpl) r34;

        virtualinvoke $r37.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setMinOccurs(java.math.BigInteger)>($r10);

        $r38 = (org.apache.xmlbeans.impl.schema.SchemaPropertyImpl) r34;

        virtualinvoke $r38.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setMaxOccurs(java.math.BigInteger)>(r35);

        goto label16;

     label21:
        return r31;
    }

    static java.util.Map buildElementPropertyModel(org.apache.xmlbeans.SchemaLocalElement, org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.SchemaProperty $r3;
        org.apache.xmlbeans.SchemaLocalElement r1;
        java.util.HashMap $r0;
        javax.xml.namespace.QName $r4;
        org.apache.xmlbeans.SchemaType r2;

        r1 := @parameter0: org.apache.xmlbeans.SchemaLocalElement;

        r2 := @parameter1: org.apache.xmlbeans.SchemaType;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(1);

        $r3 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaProperty buildUseProperty(org.apache.xmlbeans.SchemaField,org.apache.xmlbeans.SchemaType)>(r1, r2);

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaProperty: javax.xml.namespace.QName getName()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        return $r0;
    }

    static org.apache.xmlbeans.SchemaProperty buildUseProperty(org.apache.xmlbeans.SchemaField, org.apache.xmlbeans.SchemaType)
    {
        org.apache.xmlbeans.SchemaField r1;
        org.apache.xmlbeans.QNameSet $r11;
        byte $b0, $b1, $b2;
        org.apache.xmlbeans.SchemaType$Ref $r4, $r6;
        java.math.BigInteger $r8, $r9;
        java.lang.String $r7;
        org.apache.xmlbeans.SchemaType r3, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xmlbeans.impl.schema.SchemaPropertyImpl $r0;
        javax.xml.namespace.QName $r2;
        org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl r10;

        r1 := @parameter0: org.apache.xmlbeans.SchemaField;

        r3 := @parameter1: org.apache.xmlbeans.SchemaType;

        $r0 = new org.apache.xmlbeans.impl.schema.SchemaPropertyImpl;

        specialinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void <init>()>();

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaField: javax.xml.namespace.QName getName()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setName(javax.xml.namespace.QName)>($r2);

        $r4 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setContainerTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r4);

        $r5 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaField: org.apache.xmlbeans.SchemaType getType()>();

        $r6 = interfaceinvoke $r5.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r6);

        $z0 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaField: boolean isAttribute()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setAttribute(boolean)>($z0);

        $z1 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaField: boolean isDefault()>();

        if $z1 == 0 goto label1;

        $b0 = 2;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setDefault(int)>($b0);

        $z2 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaField: boolean isFixed()>();

        if $z2 == 0 goto label3;

        $b1 = 2;

        goto label4;

     label3:
        $b1 = 0;

     label4:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setFixed(int)>($b1);

        $z3 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaField: boolean isNillable()>();

        if $z3 == 0 goto label5;

        $b2 = 2;

        goto label6;

     label5:
        $b2 = 0;

     label6:
        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setNillable(int)>($b2);

        $r7 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaField: java.lang.String getDefaultText()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setDefaultText(java.lang.String)>($r7);

        $r8 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaField: java.math.BigInteger getMinOccurs()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setMinOccurs(java.math.BigInteger)>($r8);

        $r9 = interfaceinvoke r1.<org.apache.xmlbeans.SchemaField: java.math.BigInteger getMaxOccurs()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setMaxOccurs(java.math.BigInteger)>($r9);

        $z4 = r1 instanceof org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl;

        if $z4 == 0 goto label7;

        r10 = (org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl) r1;

        $r11 = virtualinvoke r10.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: org.apache.xmlbeans.QNameSet acceptedStartNames()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setAcceptedNames(org.apache.xmlbeans.QNameSet)>($r11);

     label7:
        return $r0;
    }

    static void mergeProperties(org.apache.xmlbeans.impl.schema.SchemaPropertyImpl, org.apache.xmlbeans.SchemaProperty, boolean)
    {
        org.apache.xmlbeans.SchemaProperty r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.math.BigInteger $r1, $r2, $r4, $r9, $r10, $r11, $r12, $r13, r14, r15, $r16, $r17;
        java.lang.String $r5, $r6, $r7, $r8;
        boolean z0, $z1;
        org.apache.xmlbeans.impl.schema.SchemaPropertyImpl r0;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaPropertyImpl;

        r3 := @parameter1: org.apache.xmlbeans.SchemaProperty;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.math.BigInteger getMinOccurs()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.math.BigInteger getMaxOccurs()>();

        r14 = $r2;

        if z0 == 0 goto label03;

        $r11 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMinOccurs()>();

        r15 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r11);

        if $r2 == null goto label06;

        $r12 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMaxOccurs()>();

        if $r12 != null goto label01;

        $r16 = null;

        goto label02;

     label01:
        $r13 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMaxOccurs()>();

        $r16 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r13);

     label02:
        r14 = $r16;

        goto label06;

     label03:
        $r4 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMinOccurs()>();

        r15 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)>($r4);

        if $r2 == null goto label06;

        $r9 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMaxOccurs()>();

        if $r9 != null goto label04;

        $r17 = null;

        goto label05;

     label04:
        $r10 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: java.math.BigInteger getMaxOccurs()>();

        $r17 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>($r10);

     label05:
        r14 = $r17;

     label06:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setMinOccurs(java.math.BigInteger)>(r15);

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setMaxOccurs(java.math.BigInteger)>(r14);

        $i4 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: int hasNillable()>();

        $i5 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: int hasNillable()>();

        if $i4 == $i5 goto label07;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setNillable(int)>(1);

     label07:
        $i0 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: int hasDefault()>();

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: int hasDefault()>();

        if $i0 == $i1 goto label08;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setDefault(int)>(1);

     label08:
        $i2 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: int hasFixed()>();

        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: int hasFixed()>();

        if $i2 == $i3 goto label09;

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setFixed(int)>(1);

     label09:
        $r5 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.lang.String getDefaultText()>();

        if $r5 == null goto label11;

        $r6 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: java.lang.String getDefaultText()>();

        if $r6 == null goto label10;

        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: java.lang.String getDefaultText()>();

        $r8 = interfaceinvoke r3.<org.apache.xmlbeans.SchemaProperty: java.lang.String getDefaultText()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label11;

     label10:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaPropertyImpl: void setDefaultText(java.lang.String)>(null);

     label11:
        return;
    }

    static org.apache.xmlbeans.SchemaParticle[] ensureStateMachine(org.apache.xmlbeans.SchemaParticle[])
    {
        org.apache.xmlbeans.SchemaParticle $r1;
        org.apache.xmlbeans.SchemaParticle[] r0;
        int $i0, i1;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r1 = r0[i1];

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void buildStateMachine(org.apache.xmlbeans.SchemaParticle)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    static void buildStateMachine(org.apache.xmlbeans.SchemaParticle)
    {
        org.apache.xmlbeans.QNameSet $r5, $r6, $r7, $r8, $r15, $r19, $r23, $r25, $r27, $r34, $r41, $r48, $r51, $r53, $r56;
        java.math.BigInteger $r4, $r13, $r57, $r58;
        javax.xml.namespace.QName $r14;
        java.lang.IllegalStateException $r45;
        org.apache.xmlbeans.SchemaParticle r0, $r18, $r20, $r21, $r24, $r26, $r28, $r30, $r33, $r35, $r37, $r40, $r42, $r44, $r46, $r47, $r49, $r52, $r54;
        boolean $z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, z15, $z16, z17, $z18, $z19, $z20, $z21, z22, z23, z24, z25, z26, z27, z28, z29, z30, z31, z32;
        org.apache.xmlbeans.SchemaParticle[] $r16, $r17, $r31, $r32, $r38, $r39;
        org.apache.xmlbeans.QNameSetBuilder $r2, $r3, $r10, $r12;
        java.util.HashMap $r9, $r11;
        org.apache.xmlbeans.impl.schema.SchemaParticleImpl r1, $r22, $r29, $r36, $r43, $r50, $r55;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, $i16, i17, i18, i19, i20, $i21, i22, i23, i24, $i25;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        if r0 != null goto label01;

        return;

     label01:
        r1 = (org.apache.xmlbeans.impl.schema.SchemaParticleImpl) r0;

        $z0 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean hasTransitionNotes()>();

        if $z0 == 0 goto label02;

        return;

     label02:
        $r2 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        $r3 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        z15 = 1;

        z28 = 1;

        z27 = 1;

        z26 = 1;

        z25 = 1;

        z24 = 1;

        z23 = 1;

        z22 = 1;

        $r4 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger getMinOccurs()>();

        $i0 = virtualinvoke $r4.<java.math.BigInteger: int signum()>();

        if $i0 != 0 goto label03;

        $z16 = 1;

        goto label04;

     label03:
        $z16 = 0;

     label04:
        z17 = $z16;

        $i1 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: int getParticleType()>();

        tableswitch($i1)
        {
            case 1: goto label33;
            case 2: goto label23;
            case 3: goto label08;
            case 4: goto label05;
            case 5: goto label07;
            default: goto label43;
        };

     label05:
        $z4 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean hasTransitionRules()>();

        if $z4 == 0 goto label06;

        $r15 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet acceptedStartNames()>();

        virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r15);

        goto label44;

     label06:
        $r14 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: javax.xml.namespace.QName getName()>();

        virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: void add(javax.xml.namespace.QName)>($r14);

        goto label44;

     label07:
        $r5 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r5);

        goto label44;

     label08:
        $r16 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $r17 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaParticle[] ensureStateMachine(org.apache.xmlbeans.SchemaParticle[])>($r16);

        z17 = 1;

        z29 = 1;

        i13 = 0;

     label09:
        if z29 == 0 goto label11;

        $i8 = lengthof $r17;

        if i13 >= $i8 goto label11;

        $r30 = $r17[i13];

        $z8 = interfaceinvoke $r30.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z8 != 0 goto label10;

        z17 = 0;

        z29 = 0;

     label10:
        i13 = i13 + 1;

        goto label09;

     label11:
        i14 = 0;

     label12:
        if z23 == 0 goto label14;

        $i7 = lengthof $r17;

        if i14 >= $i7 goto label14;

        $r28 = $r17[i14];

        $r29 = (org.apache.xmlbeans.impl.schema.SchemaParticleImpl) $r28;

        $z7 = virtualinvoke $r29.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean isDeterministic()>();

        if $z7 != 0 goto label13;

        z15 = 0;

        z28 = 0;

        z24 = 0;

        z23 = 0;

     label13:
        i14 = i14 + 1;

        goto label12;

     label14:
        i15 = 1;

     label15:
        $i16 = lengthof $r17;

        if i15 >= $i16 goto label19;

        $i6 = i15 - 1;

        $r21 = $r17[$i6];

        $r22 = (org.apache.xmlbeans.impl.schema.SchemaParticleImpl) $r21;

        $r23 = virtualinvoke $r22.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet getExcludeNextSet()>();

        virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r23);

        if z24 == 0 goto label16;

        $r26 = $r17[i15];

        $r27 = interfaceinvoke $r26.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet acceptedStartNames()>();

        $z6 = virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: boolean isDisjoint(org.apache.xmlbeans.QNameSetSpecification)>($r27);

        if $z6 != 0 goto label16;

        z15 = 0;

        z28 = 0;

        z24 = 0;

     label16:
        $r46 = $r17[i15];

        $z18 = interfaceinvoke $r46.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z18 == 0 goto label17;

        $r24 = $r17[i15];

        $r25 = interfaceinvoke $r24.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet acceptedStartNames()>();

        virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r25);

        goto label18;

     label17:
        virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void clear()>();

     label18:
        i15 = i15 + 1;

        goto label15;

     label19:
        i17 = 0;

     label20:
        $i5 = lengthof $r17;

        if i17 >= $i5 goto label22;

        $r18 = $r17[i17];

        $r19 = interfaceinvoke $r18.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet acceptedStartNames()>();

        virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r19);

        $r20 = $r17[i17];

        $z5 = interfaceinvoke $r20.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z5 != 0 goto label21;

        goto label22;

     label21:
        i17 = i17 + 1;

        goto label20;

     label22:
        goto label44;

     label23:
        $r31 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $r32 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaParticle[] ensureStateMachine(org.apache.xmlbeans.SchemaParticle[])>($r31);

        z17 = 0;

        z32 = 0;

        i18 = 0;

     label24:
        if z32 != 0 goto label26;

        $i10 = lengthof $r32;

        if i18 >= $i10 goto label26;

        $r37 = $r32[i18];

        $z11 = interfaceinvoke $r37.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z11 == 0 goto label25;

        z17 = 1;

        z32 = 1;

     label25:
        i18 = i18 + 1;

        goto label24;

     label26:
        i19 = 0;

     label27:
        if z25 == 0 goto label29;

        $i9 = lengthof $r32;

        if i19 >= $i9 goto label29;

        $r35 = $r32[i19];

        $r36 = (org.apache.xmlbeans.impl.schema.SchemaParticleImpl) $r35;

        $z10 = virtualinvoke $r36.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean isDeterministic()>();

        if $z10 != 0 goto label28;

        z15 = 0;

        z28 = 0;

        z27 = 0;

        z25 = 0;

     label28:
        i19 = i19 + 1;

        goto label27;

     label29:
        i20 = 0;

     label30:
        $i21 = lengthof $r32;

        if i20 >= $i21 goto label32;

        if z27 == 0 goto label31;

        $r33 = $r32[i20];

        $r34 = interfaceinvoke $r33.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet acceptedStartNames()>();

        $z9 = virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: boolean isDisjoint(org.apache.xmlbeans.QNameSetSpecification)>($r34);

        if $z9 != 0 goto label31;

        z15 = 0;

        z28 = 0;

        z27 = 0;

     label31:
        $r47 = $r32[i20];

        $r48 = interfaceinvoke $r47.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet acceptedStartNames()>();

        virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r48);

        $r49 = $r32[i20];

        $r50 = (org.apache.xmlbeans.impl.schema.SchemaParticleImpl) $r49;

        $r51 = virtualinvoke $r50.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet getExcludeNextSet()>();

        virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r51);

        i20 = i20 + 1;

        goto label30;

     label32:
        goto label44;

     label33:
        $r38 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $r39 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.SchemaParticle[] ensureStateMachine(org.apache.xmlbeans.SchemaParticle[])>($r38);

        z17 = 1;

        z31 = 1;

        z30 = 1;

        i22 = 0;

     label34:
        if z30 != 0 goto label36;

        $i12 = lengthof $r39;

        if i22 >= $i12 goto label36;

        $r44 = $r39[i22];

        $z14 = interfaceinvoke $r44.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z14 != 0 goto label35;

        z17 = 0;

        z31 = 0;

        z30 = 0;

     label35:
        i22 = i22 + 1;

        goto label34;

     label36:
        i23 = 0;

     label37:
        if z22 == 0 goto label39;

        $i11 = lengthof $r39;

        if i23 >= $i11 goto label39;

        $r42 = $r39[i23];

        $r43 = (org.apache.xmlbeans.impl.schema.SchemaParticleImpl) $r42;

        $z13 = virtualinvoke $r43.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: boolean isDeterministic()>();

        if $z13 != 0 goto label38;

        z15 = 0;

        z28 = 0;

        z26 = 0;

        z22 = 0;

     label38:
        i23 = i23 + 1;

        goto label37;

     label39:
        i24 = 0;

     label40:
        $i25 = lengthof $r39;

        if i24 >= $i25 goto label42;

        if z26 == 0 goto label41;

        $r40 = $r39[i24];

        $r41 = interfaceinvoke $r40.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet acceptedStartNames()>();

        $z12 = virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: boolean isDisjoint(org.apache.xmlbeans.QNameSetSpecification)>($r41);

        if $z12 != 0 goto label41;

        z15 = 0;

        z28 = 0;

        z26 = 0;

     label41:
        $r52 = $r39[i24];

        $r53 = interfaceinvoke $r52.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet acceptedStartNames()>();

        virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r53);

        $r54 = $r39[i24];

        $r55 = (org.apache.xmlbeans.impl.schema.SchemaParticleImpl) $r54;

        $r56 = virtualinvoke $r55.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: org.apache.xmlbeans.QNameSet getExcludeNextSet()>();

        virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r56);

        i24 = i24 + 1;

        goto label40;

     label42:
        if z31 == 0 goto label44;

        virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r2);

        goto label44;

     label43:
        $r45 = new java.lang.IllegalStateException;

        specialinvoke $r45.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unrecognized schema particle");

        throw $r45;

     label44:
        $r57 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger getMinOccurs()>();

        $r58 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: java.math.BigInteger getMaxOccurs()>();

        if $r58 == null goto label45;

        $r13 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $i4 = virtualinvoke $r58.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r13);

        if $i4 <= 0 goto label46;

     label45:
        $z19 = 1;

        goto label47;

     label46:
        $z19 = 0;

     label47:
        z1 = $z19;

        if $r58 == null goto label48;

        $i3 = virtualinvoke $r57.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r58);

        if $i3 >= 0 goto label49;

     label48:
        $z20 = 1;

        goto label50;

     label49:
        $z20 = 0;

     label50:
        z2 = $z20;

        if z1 == 0 goto label51;

        if z28 == 0 goto label51;

        $z3 = virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: boolean isDisjoint(org.apache.xmlbeans.QNameSetSpecification)>($r2);

        if $z3 != 0 goto label51;

        $r8 = virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: org.apache.xmlbeans.QNameSet intersect(org.apache.xmlbeans.QNameSetSpecification)>($r2);

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r10.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void particlesMatchingStart(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetSpecification,java.util.Map,org.apache.xmlbeans.QNameSetBuilder)>(r1, $r8, $r9, $r10);

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        $r12 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r12.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void particlesMatchingAfter(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetSpecification,java.util.Map,org.apache.xmlbeans.QNameSetBuilder,boolean)>(r1, $r8, $r11, $r12, 1);

        z15 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: boolean afterMapSubsumedByStartMap(java.util.Map,java.util.Map)>($r9, $r11);

     label51:
        if z2 == 0 goto label52;

        virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r2);

     label52:
        if z17 != 0 goto label53;

        $i2 = virtualinvoke $r57.<java.math.BigInteger: int signum()>();

        if $i2 != 0 goto label54;

     label53:
        $z21 = 1;

        goto label55;

     label54:
        $z21 = 0;

     label55:
        $r6 = virtualinvoke $r2.<org.apache.xmlbeans.QNameSetBuilder: org.apache.xmlbeans.QNameSet toQNameSet()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setTransitionRules(org.apache.xmlbeans.QNameSet,boolean)>($r6, $z21);

        $r7 = virtualinvoke $r3.<org.apache.xmlbeans.QNameSetBuilder: org.apache.xmlbeans.QNameSet toQNameSet()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaParticleImpl: void setTransitionNotes(org.apache.xmlbeans.QNameSet,boolean)>($r7, z15);

        return;
    }

    private static boolean afterMapSubsumedByStartMap(java.util.Map, java.util.Map)
    {
        org.apache.xmlbeans.SchemaParticle r5;
        org.apache.xmlbeans.QNameSet r7, r9;
        java.util.Map r0, r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Object $r4, $r6, $r8;

        r1 := @parameter0: java.util.Map;

        r0 := @parameter1: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Map: int size()>();

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.xmlbeans.SchemaParticle) $r4;

        $i2 = interfaceinvoke r5.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        if $i2 != 5 goto label4;

        $z3 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z3 == 0 goto label4;

        $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r7 = (org.apache.xmlbeans.QNameSet) $r6;

        $r8 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r9 = (org.apache.xmlbeans.QNameSet) $r8;

        $z4 = virtualinvoke r7.<org.apache.xmlbeans.QNameSet: boolean containsAll(org.apache.xmlbeans.QNameSetSpecification)>(r9);

        if $z4 != 0 goto label4;

        return 0;

     label4:
        interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r5);

        $z5 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z5 == 0 goto label5;

        return 1;

     label5:
        goto label3;

     label6:
        $z2 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        return $z2;
    }

    private static void particlesMatchingStart(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.QNameSetSpecification, java.util.Map, org.apache.xmlbeans.QNameSetBuilder)
    {
        org.apache.xmlbeans.SchemaParticle r0, $r11, $r14, $r15, $r16, $r18;
        org.apache.xmlbeans.QNameSet $r2, $r4, $r5, $r7;
        java.util.Map r3;
        int $i0, $i1, $i2, $i3, i4, i5;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xmlbeans.SchemaParticle[] $r10, $r17;
        org.apache.xmlbeans.QNameSetBuilder r6, $r12, $r13;
        org.apache.xmlbeans.QNameSetSpecification r1;
        javax.xml.namespace.QName $r8, $r9;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r1 := @parameter1: org.apache.xmlbeans.QNameSetSpecification;

        r3 := @parameter2: java.util.Map;

        r6 := @parameter3: org.apache.xmlbeans.QNameSetBuilder;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label05;
            case 2: goto label05;
            case 3: goto label08;
            case 4: goto label01;
            case 5: goto label03;
            default: goto label15;
        };

     label01:
        $r8 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        $z1 = interfaceinvoke r1.<org.apache.xmlbeans.QNameSetSpecification: boolean contains(javax.xml.namespace.QName)>($r8);

        if $z1 != 0 goto label02;

        return;

     label02:
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, null);

        $r9 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: javax.xml.namespace.QName getName()>();

        virtualinvoke r6.<org.apache.xmlbeans.QNameSetBuilder: void add(javax.xml.namespace.QName)>($r9);

        return;

     label03:
        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        $z0 = interfaceinvoke r1.<org.apache.xmlbeans.QNameSetSpecification: boolean isDisjoint(org.apache.xmlbeans.QNameSetSpecification)>($r2);

        if $z0 == 0 goto label04;

        return;

     label04:
        $r4 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        $r5 = virtualinvoke $r4.<org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet intersect(org.apache.xmlbeans.QNameSetSpecification)>(r1);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.QNameSet getWildcardSet()>();

        virtualinvoke r6.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r7);

        return;

     label05:
        $r17 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i4 = 0;

     label06:
        $i3 = lengthof $r17;

        if i4 >= $i3 goto label07;

        $r18 = $r17[i4];

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void particlesMatchingStart(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetSpecification,java.util.Map,org.apache.xmlbeans.QNameSetBuilder)>($r18, r1, r3, r6);

        i4 = i4 + 1;

        goto label06;

     label07:
        return;

     label08:
        $r10 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $i1 = lengthof $r10;

        if $i1 != 0 goto label09;

        return;

     label09:
        $r11 = $r10[0];

        $z2 = interfaceinvoke $r11.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z2 != 0 goto label10;

        $r16 = $r10[0];

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void particlesMatchingStart(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetSpecification,java.util.Map,org.apache.xmlbeans.QNameSetBuilder)>($r16, r1, r3, r6);

        return;

     label10:
        $r12 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r12.<org.apache.xmlbeans.QNameSetBuilder: void <init>(org.apache.xmlbeans.QNameSetSpecification)>(r1);

        $r13 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r13.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        i5 = 0;

     label11:
        $i2 = lengthof $r10;

        if i5 >= $i2 goto label14;

        $r14 = $r10[i5];

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void particlesMatchingStart(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetSpecification,java.util.Map,org.apache.xmlbeans.QNameSetBuilder)>($r14, $r12, r3, $r13);

        virtualinvoke r6.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r13);

        $r15 = $r10[i5];

        $z3 = interfaceinvoke $r15.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z3 != 0 goto label12;

        return;

     label12:
        virtualinvoke $r12.<org.apache.xmlbeans.QNameSetBuilder: void removeAll(org.apache.xmlbeans.QNameSetSpecification)>($r13);

        $z4 = virtualinvoke $r12.<org.apache.xmlbeans.QNameSetBuilder: boolean isEmpty()>();

        if $z4 == 0 goto label13;

        return;

     label13:
        virtualinvoke $r13.<org.apache.xmlbeans.QNameSetBuilder: void clear()>();

        i5 = i5 + 1;

        goto label11;

     label14:
        return;

     label15:
        return;
    }

    private static void particlesMatchingAfter(org.apache.xmlbeans.SchemaParticle, org.apache.xmlbeans.QNameSetSpecification, java.util.Map, org.apache.xmlbeans.QNameSetBuilder, boolean)
    {
        org.apache.xmlbeans.SchemaParticle r0, $r2, $r10, $r11, $r12, $r14;
        java.util.Map r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i10;
        java.math.BigInteger $r6, $r7;
        boolean $z0, z1, $z2, $z3, $z4;
        org.apache.xmlbeans.SchemaParticle[] $r1, $r13;
        org.apache.xmlbeans.QNameSetBuilder r9, $r15, $r16;
        org.apache.xmlbeans.QNameSetSpecification r4;

        r0 := @parameter0: org.apache.xmlbeans.SchemaParticle;

        r4 := @parameter1: org.apache.xmlbeans.QNameSetSpecification;

        r8 := @parameter2: java.util.Map;

        r9 := @parameter3: org.apache.xmlbeans.QNameSetBuilder;

        z1 := @parameter4: boolean;

        $i0 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: int getParticleType()>();

        tableswitch($i0)
        {
            case 1: goto label01;
            case 2: goto label01;
            case 3: goto label04;
            default: goto label11;
        };

     label01:
        $r13 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        i7 = 0;

     label02:
        $i6 = lengthof $r13;

        if i7 >= $i6 goto label03;

        $r14 = $r13[i7];

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void particlesMatchingAfter(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetSpecification,java.util.Map,org.apache.xmlbeans.QNameSetBuilder,boolean)>($r14, r4, r8, r9, 0);

        i7 = i7 + 1;

        goto label02;

     label03:
        goto label11;

     label04:
        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: org.apache.xmlbeans.SchemaParticle[] getParticleChildren()>();

        $i1 = lengthof $r1;

        if $i1 != 0 goto label05;

        goto label11;

     label05:
        $i2 = lengthof $r1;

        $i3 = $i2 - 1;

        $r2 = $r1[$i3];

        $z0 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z0 != 0 goto label06;

        $r12 = $r1[0];

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void particlesMatchingAfter(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetSpecification,java.util.Map,org.apache.xmlbeans.QNameSetBuilder,boolean)>($r12, r4, r8, r9, 0);

        goto label11;

     label06:
        $r15 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r15.<org.apache.xmlbeans.QNameSetBuilder: void <init>(org.apache.xmlbeans.QNameSetSpecification)>(r4);

        $r16 = new org.apache.xmlbeans.QNameSetBuilder;

        specialinvoke $r16.<org.apache.xmlbeans.QNameSetBuilder: void <init>()>();

        $i4 = lengthof $r1;

        i8 = $i4 - 1;

     label07:
        if i8 < 0 goto label10;

        $r10 = $r1[i8];

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void particlesMatchingAfter(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetSpecification,java.util.Map,org.apache.xmlbeans.QNameSetBuilder,boolean)>($r10, $r15, r8, $r16, 0);

        virtualinvoke r9.<org.apache.xmlbeans.QNameSetBuilder: void addAll(org.apache.xmlbeans.QNameSetSpecification)>($r16);

        $r11 = $r1[i8];

        $z2 = interfaceinvoke $r11.<org.apache.xmlbeans.SchemaParticle: boolean isSkippable()>();

        if $z2 != 0 goto label08;

        goto label11;

     label08:
        virtualinvoke $r15.<org.apache.xmlbeans.QNameSetBuilder: void removeAll(org.apache.xmlbeans.QNameSetSpecification)>($r16);

        $z3 = virtualinvoke $r15.<org.apache.xmlbeans.QNameSetBuilder: boolean isEmpty()>();

        if $z3 == 0 goto label09;

        goto label11;

     label09:
        virtualinvoke $r16.<org.apache.xmlbeans.QNameSetBuilder: void clear()>();

        $i10 = (int) -1;

        i8 = i8 + $i10;

        goto label07;

     label10:
        goto label11;

     label11:
        if z1 != 0 goto label15;

        $r6 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMinOccurs()>();

        $r7 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaParticle: java.math.BigInteger getMaxOccurs()>();

        if $r7 == null goto label12;

        $i5 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i5 >= 0 goto label13;

     label12:
        $z4 = 1;

        goto label14;

     label13:
        $z4 = 0;

     label14:
        if $z4 == 0 goto label15;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void particlesMatchingStart(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.QNameSetSpecification,java.util.Map,org.apache.xmlbeans.QNameSetBuilder)>(r0, r4, r8, r9);

     label15:
        return;
    }

    private static java.util.Map buildParticleCodeMap()
    {
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] $r1, $r2, $r5;
        java.util.HashMap $r0;
        java.lang.Integer $r4;
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry $r3, $r6;
        int $i0, $i1, i2;
        javax.xml.namespace.QName $r7;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i2 = 0;

     label1:
        $r1 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] particleCodes>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $r2 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] particleCodes>;

        $r3 = $r2[i2];

        $r7 = $r3.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: javax.xml.namespace.QName name>;

        $r4 = new java.lang.Integer;

        $r5 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] particleCodes>;

        $r6 = $r5[i2];

        $i1 = $r6.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: int code>;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static int translateParticleCode(org.apache.xmlbeans.impl.xb.xsdschema.Group)
    {
        org.apache.xmlbeans.impl.xb.xsdschema.Group r0;
        org.apache.xmlbeans.XmlCursor $r1;
        int $i0;
        javax.xml.namespace.QName $r2;

        r0 := @parameter0: org.apache.xmlbeans.impl.xb.xsdschema.Group;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.xb.xsdschema.Group: org.apache.xmlbeans.XmlCursor newCursor()>();

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.XmlCursor: javax.xml.namespace.QName getName()>();

        $i0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int translateParticleCode(javax.xml.namespace.QName)>($r2);

        return $i0;
    }

    private static int translateParticleCode(javax.xml.namespace.QName)
    {
        java.util.Map $r1;
        int $i0;
        java.lang.Object $r2;
        javax.xml.namespace.QName r0;
        java.lang.Integer r3;

        r0 := @parameter0: javax.xml.namespace.QName;

        $r1 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map particleCodeMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.Integer) $r2;

        if r3 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    private static java.util.Map buildAttributeCodeMap()
    {
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] $r1, $r2, $r5;
        java.util.HashMap $r0;
        java.lang.Integer $r4;
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry $r3, $r6;
        int $i0, $i1, i2;
        javax.xml.namespace.QName $r7;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i2 = 0;

     label1:
        $r1 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] attributeCodes>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $r2 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] attributeCodes>;

        $r3 = $r2[i2];

        $r7 = $r3.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: javax.xml.namespace.QName name>;

        $r4 = new java.lang.Integer;

        $r5 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] attributeCodes>;

        $r6 = $r5[i2];

        $i1 = $r6.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: int code>;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    static int translateAttributeCode(javax.xml.namespace.QName)
    {
        java.util.Map $r1;
        int $i0;
        java.lang.Object $r2;
        javax.xml.namespace.QName r0;
        java.lang.Integer r3;

        r0 := @parameter0: javax.xml.namespace.QName;

        $r1 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map attributeCodeMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.Integer) $r2;

        if r3 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry $r2, $r4, $r6, $r8, $r10, $r12, $r16, $r18, $r20;
        java.util.Map $r14, $r22;
        boolean $z0, $z1;
        org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] $r1, $r15;
        java.lang.Class $r0, $r23;
        javax.xml.namespace.QName $r3, $r5, $r7, $r9, $r11, $r13, $r17, $r19, $r21;

        <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int ANY_ATTRIBUTE_CODE> = 102;

        <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int ATTRIBUTE_GROUP_CODE> = 101;

        <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int ATTRIBUTE_CODE> = 100;

        <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: int MODEL_GROUP_CODE> = 100;

        $r0 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscComplexTypeResolver>;

        if $r0 != null goto label1;

        $r23 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.schema.StscComplexTypeResolver");

        <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscComplexTypeResolver> = $r23;

        goto label2;

     label1:
        $r23 = <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscComplexTypeResolver>;

     label2:
        $z0 = virtualinvoke $r23.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry)[6];

        $r2 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry;

        $r3 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("all", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r2.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r3, 1);

        $r1[0] = $r2;

        $r4 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry;

        $r5 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("sequence", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r4.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r5, 3);

        $r1[1] = $r4;

        $r6 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry;

        $r7 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("choice", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r6.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r7, 2);

        $r1[2] = $r6;

        $r8 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("element", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r8.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r9, 4);

        $r1[3] = $r8;

        $r10 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry;

        $r11 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("any", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r10.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r11, 5);

        $r1[4] = $r10;

        $r12 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry;

        $r13 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("group", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r12.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r13, 100);

        $r1[5] = $r12;

        <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] particleCodes> = $r1;

        $r14 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildParticleCodeMap()>();

        <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map particleCodeMap> = $r14;

        $r15 = newarray (org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry)[3];

        $r16 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry;

        $r17 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("attribute", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r16.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r17, 100);

        $r15[0] = $r16;

        $r18 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry;

        $r19 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("attributeGroup", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r18.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r19, 101);

        $r15[1] = $r18;

        $r20 = new org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry;

        $r21 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: javax.xml.namespace.QName forLNS(java.lang.String,java.lang.String)>("anyAttribute", "http://www.w3.org/2001/XMLSchema");

        specialinvoke $r20.<org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry: void <init>(javax.xml.namespace.QName,int)>($r21, 102);

        $r15[2] = $r20;

        <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: org.apache.xmlbeans.impl.schema.StscComplexTypeResolver$CodeForNameEntry[] attributeCodes> = $r15;

        $r22 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildAttributeCodeMap()>();

        <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map attributeCodeMap> = $r22;

        return;
    }
}
