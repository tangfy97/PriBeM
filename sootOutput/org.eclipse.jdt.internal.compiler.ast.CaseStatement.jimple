public class org.eclipse.jdt.internal.compiler.ast.CaseStatement extends org.eclipse.jdt.internal.compiler.ast.Statement
{
    public org.eclipse.jdt.internal.compiler.ast.Expression constantExpression;
    public org.eclipse.jdt.internal.compiler.codegen.CaseLabel targetLabel;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r1;
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CaseStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Statement: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: int sourceEnd> = i0;

        r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: int sourceStart> = i1;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r6;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r10;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r2;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement r0;
        org.eclipse.jdt.internal.compiler.impl.Constant $r4, $r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r3, $r8, $r11, $r12;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r7;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r9;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CaseStatement;

        r6 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r7 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r2 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        if $r1 == null goto label2;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $r5 = $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r4 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r5 != $r4 goto label1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $r9 = $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $z0 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isEnum()>();

        if $z0 != 0 goto label1;

        $r10 = virtualinvoke r6.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void caseExpressionMustBeConstant(org.eclipse.jdt.internal.compiler.ast.Expression)>($r11);

     label1:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r6, r7, r2);

     label2:
        return r2;
    }

    public java.lang.StringBuffer printStatement(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r2, $r3;
        java.lang.StringBuffer r0, $r4, $r5;
        int i0;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.CaseStatement;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuffer;

        staticinvoke <org.eclipse.jdt.internal.compiler.ast.CaseStatement: java.lang.StringBuffer printIndent(int,java.lang.StringBuffer)>(i0, r0);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        if $r2 != null goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("default : ");

        goto label2;

     label1:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("case ");

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r0);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

     label2:
        $r5 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        return $r5;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r1;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement r0;
        org.eclipse.jdt.internal.compiler.codegen.CaseLabel $r2;
        int $i0, $i1, i2, $i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CaseStatement;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: int bits>;

        $i1 = $i0 & -2147483648;

        if $i1 != 0 goto label1;

        return;

     label1:
        i2 = r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.codegen.CaseLabel targetLabel>;

        virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.codegen.CaseLabel: void place()>();

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: int sourceStart>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i2, $i3);

        return;
    }

    public void resolve(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CaseStatement;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        return;
    }

    public org.eclipse.jdt.internal.compiler.impl.Constant resolveCase(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.internal.compiler.ast.SwitchStatement)
    {
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding $r15, $r35;
        byte $b10;
        org.eclipse.jdt.internal.compiler.ast.NameReference r14;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r5, $r25, $r34;
        org.eclipse.jdt.internal.compiler.impl.Constant $r6, $r9, $r21, $r31, $r36, $r40;
        org.eclipse.jdt.internal.compiler.ast.SingleNameReference $r29;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r22;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r0;
        long $l9;
        org.eclipse.jdt.internal.compiler.ast.SwitchStatement r3;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r24;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r16, $r17, $r18, $r32, $r37;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2, $r7, $r8, $r10, $r11, $r12, $r13, $r19, $r20, $r23, $r26, $r27, $r33, $r38, $r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement r1, $r30;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r28;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.CaseStatement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r5 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.ast.SwitchStatement;

        r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.ast.CaseStatement enclosingCase> = r1;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        if $r2 != null goto label02;

        $r30 = r3.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase>;

        if $r30 == null goto label01;

        $r32 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r32.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void duplicateDefaultCase(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r1);

     label01:
        r3.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement defaultCase> = r1;

        $r31 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        return $r31;

     label02:
        $r4 = r3.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.CaseStatement[] cases>;

        $i0 = r3.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount>;

        $i1 = $i0 + 1;

        r3.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: int caseCount> = $i1;

        $r4[$i0] = r1;

        if r5 == null goto label03;

        $z9 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isEnum()>();

        if $z9 == 0 goto label03;

        $r26 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $z10 = $r26 instanceof org.eclipse.jdt.internal.compiler.ast.SingleNameReference;

        if $z10 == 0 goto label03;

        $r27 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $r29 = (org.eclipse.jdt.internal.compiler.ast.SingleNameReference) $r27;

        $r28 = (org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding) r5;

        virtualinvoke $r29.<org.eclipse.jdt.internal.compiler.ast.SingleNameReference: void setActualReceiverType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)>($r28);

     label03:
        $r33 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $r34 = virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0);

        if $r34 == null goto label04;

        if r5 != null goto label05;

     label04:
        $r6 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        return $r6;

     label05:
        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $z0 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: boolean isConstantValueOfTypeAssignableToType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r34, r5);

        if $z0 != 0 goto label06;

        $z4 = virtualinvoke $r34.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isCompatibleWith(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r5);

        if $z4 == 0 goto label11;

     label06:
        $z1 = virtualinvoke $r34.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isEnum()>();

        if $z1 == 0 goto label10;

        $r10 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $i2 = $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i3 = $i2 & 534773760;

        $i4 = $i3 >> 21;

        if $i4 == 0 goto label07;

        $r18 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r19 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void enumConstantsCannotBeSurroundedByParenthesis(org.eclipse.jdt.internal.compiler.ast.Expression)>($r19);

     label07:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $z2 = $r11 instanceof org.eclipse.jdt.internal.compiler.ast.NameReference;

        if $z2 == 0 goto label13;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $i5 = $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i6 = $i5 & 7;

        if $i6 != 1 goto label13;

        $r13 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        r14 = (org.eclipse.jdt.internal.compiler.ast.NameReference) $r13;

        $r15 = virtualinvoke r14.<org.eclipse.jdt.internal.compiler.ast.NameReference: org.eclipse.jdt.internal.compiler.lookup.FieldBinding fieldBinding()>();

        $i7 = $r15.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: int modifiers>;

        $i8 = $i7 & 16384;

        if $i8 != 0 goto label08;

        $r17 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void enumSwitchCannotTargetField(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>(r14, $r15);

        goto label09;

     label08:
        $z3 = r14 instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference;

        if $z3 == 0 goto label09;

        $r16 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void cannotUseQualifiedEnumConstantInCaseLabel(org.eclipse.jdt.internal.compiler.ast.Reference,org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>(r14, $r15);

     label09:
        $r35 = virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: org.eclipse.jdt.internal.compiler.lookup.FieldBinding original()>();

        $i11 = $r35.<org.eclipse.jdt.internal.compiler.lookup.FieldBinding: int id>;

        $i12 = $i11 + 1;

        $r36 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.IntConstant: org.eclipse.jdt.internal.compiler.impl.Constant fromValue(int)>($i12);

        return $r36;

     label10:
        $r8 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $r9 = $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        return $r9;

     label11:
        $z5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: boolean isBoxingCompatibleWith(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r34, r5);

        if $z5 != 0 goto label12;

        $z6 = virtualinvoke $r34.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z6 == 0 goto label13;

        $r22 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions()>();

        $l9 = $r22.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long sourceLevel>;

        $b10 = $l9 cmp 3211264L;

        $i13 = (int) $b10;

        if $i13 < 0 goto label13;

        $z7 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z7 != 0 goto label13;

        $r23 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $r24 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        $r25 = virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding computeBoxingType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r5);

        $z8 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.ast.Expression: boolean isConstantValueOfTypeAssignableToType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r34, $r25);

        if $z8 == 0 goto label13;

     label12:
        $r20 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $r21 = $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        return $r21;

     label13:
        $r37 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r38 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        $r39 = r3.<org.eclipse.jdt.internal.compiler.ast.SwitchStatement: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r37.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void typeMismatchError(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r34, r5, $r38, $r39);

        $r40 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        return $r40;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4;
        org.eclipse.jdt.internal.compiler.ast.CaseStatement r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.CaseStatement;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.CaseStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        if $r3 == null goto label1;

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.CaseStatement: org.eclipse.jdt.internal.compiler.ast.Expression constantExpression>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.CaseStatement,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
