public abstract class com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker extends com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker
{
    protected final com.google.gxp.compiler.base.Template template;

    protected void <init>(java.lang.Appendable, com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.Template)
    {
        com.google.gxp.compiler.alerts.AlertSink r2;
        java.lang.Appendable r1;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker r0;
        java.lang.Object $r4;
        com.google.gxp.compiler.base.Template r3, $r5;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: com.google.gxp.compiler.alerts.AlertSink;

        r3 := @parameter2: com.google.gxp.compiler.base.Template;

        specialinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink)>(r1, r2);

        $r4 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r5 = (com.google.gxp.compiler.base.Template) $r4;

        r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template> = $r5;

        return;
    }

    protected abstract void appendClass();

    public void run()
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.base.Template $r1;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: void appendHeader(com.google.gxp.compiler.base.Root)>($r1);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: void appendClass()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: void appendFooter()>();

        return;
    }

    protected java.lang.String getWriteMethodSignature(boolean, boolean)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker r0;
        java.lang.String $r1;
        boolean z0, z1;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(java.lang.String,boolean,boolean)>("Appendable*", z0, z1);

        return $r1;
    }

    protected java.lang.String getWriteMethodSignature(java.lang.String, boolean, boolean)
    {
        java.lang.Object[] $r4;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r14;
        java.lang.Iterable $r10, $r11;
        com.google.gxp.com.google.common.base.Function $r9;
        java.lang.String r5, $r6, $r7, $r12, $r15;
        boolean z0, z1, $z2;
        com.google.gxp.compiler.base.Template $r1, $r13, $r16, $r18, $r20;
        java.util.Set $r8;
        java.util.List r2, $r17, $r19, $r21;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker r0;
        java.lang.StringBuilder $r3;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker;

        r5 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r20 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r21 = virtualinvoke $r20.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        goto label2;

     label1:
        $r1 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r21 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

     label2:
        r2 = $r21;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label4;

        $r16 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r17 = virtualinvoke $r16.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        $z2 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r18 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r19 = virtualinvoke $r18.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: void appendCppFormalTypeParameters(java.lang.StringBuilder,boolean,java.util.List)>($r3, 1, $r19);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label3:
        if z1 != 0 goto label4;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("static ");

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("void ");

        if z1 == 0 goto label5;

        $r13 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r14 = virtualinvoke $r13.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r15 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: java.lang.String getQualifiedClassName(com.google.gxp.compiler.base.TemplateName)>($r14);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

     label5:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Write(");

        $r6 = <com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: java.lang.String GXP_SIG>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r6, $r4);

        $r8 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r7);

        $r9 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToCallName>;

        $r10 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>(r2, $r9);

        $r11 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r8, $r10);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r3, ", ", $r11);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    protected java.lang.String getGetGxpClosureMethodSignature(boolean, boolean)
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r8;
        com.google.gxp.compiler.schema.Schema $r18;
        java.lang.Iterable $r5;
        com.google.gxp.com.google.common.base.Function $r4;
        java.lang.String $r6, $r9, $r19;
        com.google.gxp.compiler.base.ContentType $r16;
        boolean z0, z1, $z2;
        com.google.gxp.compiler.base.Template $r1, $r7, $r10, $r12, $r14, $r17;
        java.util.List r2, $r11, $r13, $r15;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker r0;
        java.lang.StringBuilder $r3;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker;

        z1 := @parameter0: boolean;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r14 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r15 = virtualinvoke $r14.<com.google.gxp.compiler.base.Template: java.util.List getAllParameters()>();

        goto label2;

     label1:
        $r1 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r15 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: java.util.List getParameters()>();

     label2:
        r2 = $r15;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label4;

        $r10 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r11 = virtualinvoke $r10.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        $z2 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r12 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r13 = virtualinvoke $r12.<com.google.gxp.compiler.base.Template: java.util.List getFormalTypeParameters()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: void appendCppFormalTypeParameters(java.lang.StringBuilder,boolean,java.util.List)>($r3, 1, $r13);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label3:
        if z1 != 0 goto label4;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("static ");

     label4:
        $r16 = new com.google.gxp.compiler.base.ContentType;

        $r17 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r18 = virtualinvoke $r17.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.schema.Schema getSchema()>();

        specialinvoke $r16.<com.google.gxp.compiler.base.ContentType: void <init>(com.google.gxp.compiler.schema.Schema)>($r18);

        $r19 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: java.lang.String toCppType(com.google.gxp.compiler.base.Type)>($r16);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        if z1 == 0 goto label5;

        $r7 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r8 = virtualinvoke $r7.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r9 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: java.lang.String getQualifiedClassName(com.google.gxp.compiler.base.TemplateName)>($r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

     label5:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GetGxpClosure(");

        $r4 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: com.google.gxp.com.google.common.base.Function parameterToCallName>;

        $r5 = staticinvoke <com.google.gxp.com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.gxp.com.google.common.base.Function)>(r2, $r4);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>($r3, ", ", $r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
