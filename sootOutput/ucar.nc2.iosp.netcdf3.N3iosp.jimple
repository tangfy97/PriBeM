public abstract class ucar.nc2.iosp.netcdf3.N3iosp extends ucar.nc2.iosp.AbstractIOServiceProvider implements ucar.nc2.iosp.IOServiceProviderWriter
{
    private static org.slf4j.Logger log;
    public static final byte NC_FILL_BYTE;
    public static final char NC_FILL_CHAR;
    public static final short NC_FILL_SHORT;
    public static final int NC_FILL_INT;
    public static final long NC_FILL_LONG;
    public static final float NC_FILL_FLOAT;
    public static final double NC_FILL_DOUBLE;
    public static final java.lang.String FillValue;
    public static final long MAX_VARSIZE;
    public static final int MAX_NUMRECS;
    private static boolean syncExtendOnly;
    private static final java.util.regex.Pattern objectNamePattern;
    protected ucar.nc2.NetcdfFile ncfile;
    protected boolean readonly;
    protected ucar.nc2.iosp.netcdf3.N3header header;
    protected long lastModified;
    protected boolean debug;
    protected boolean debugSize;
    protected boolean debugSPIO;
    protected boolean debugRecord;
    protected boolean debugSync;
    protected boolean showHeaderBytes;
    protected boolean useRecordStructure;
    protected boolean fill;
    protected java.util.HashMap dimHash;

    public void <init>()
    {
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        java.util.HashMap $r1;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        specialinvoke r0.<ucar.nc2.iosp.AbstractIOServiceProvider: void <init>()>();

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean debug> = 0;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean debugSize> = 0;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean debugSPIO> = 0;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean debugRecord> = 0;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean debugSync> = 0;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean showHeaderBytes> = 0;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean fill> = 1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(50);

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: java.util.HashMap dimHash> = $r1;

        return;
    }

    public static void setProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("syncExtendOnly");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        <ucar.nc2.iosp.netcdf3.N3iosp: boolean syncExtendOnly> = $z1;

     label1:
        return;
    }

    public static java.lang.String makeValidNetcdfObjectName(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, i5, $i6, $i7, $i9;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1;
        char $c4;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r5;

        r1 := @parameter0: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

     label1:
        $i0 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label3;

        $c4 = virtualinvoke $r5.<java.lang.StringBuilder: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c4);

        if $z0 != 0 goto label3;

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z1 != 0 goto label3;

        $i7 = (int) $c4;

        if $i7 != 95 goto label2;

        goto label3;

     label2:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(0);

        goto label1;

     label3:
        i5 = 1;

     label4:
        $i6 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        if i5 >= $i6 goto label8;

        $i2 = virtualinvoke $r5.<java.lang.StringBuilder: int codePointAt(int)>(i5);

        if $i2 < 0 goto label5;

        if $i2 < 32 goto label6;

     label5:
        if $i2 != 127 goto label7;

     label6:
        $i3 = i5 + 1;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i5, $i3);

        $i9 = (int) -1;

        i5 = i5 + $i9;

     label7:
        i5 = i5 + 1;

        goto label4;

     label8:
        $i1 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        if $i1 != 0 goto label9;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal name");

        throw $r6;

     label9:
        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String makeValidNetcdfObjectNameOld(java.lang.String)
    {
        int $i0, $i2, i4, $i5, $i6, $i7, $i8, $i9, $i11;
        java.lang.String r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        char $c1, $c3;
        java.lang.StringBuilder $r3;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

     label01:
        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label04;

        $c3 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c3);

        if $z1 != 0 goto label04;

        $i6 = (int) $c3;

        if $i6 != 95 goto label02;

        goto label04;

     label02:
        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c3);

        if $z2 == 0 goto label03;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 78);

        goto label04;

     label03:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(0);

        goto label01;

     label04:
        i4 = 1;

     label05:
        $i5 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if i4 >= $i5 goto label11;

        $c1 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(i4);

        $i7 = (int) $c1;

        if $i7 != 32 goto label06;

        virtualinvoke $r3.<java.lang.StringBuilder: void setCharAt(int,char)>(i4, 95);

        goto label10;

     label06:
        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z0 != 0 goto label07;

        $i8 = (int) $c1;

        if $i8 == 45 goto label07;

        $i9 = (int) $c1;

        if $i9 != 95 goto label08;

     label07:
        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        if $z3 != 0 goto label10;

        $i2 = i4 + 1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i4, $i2);

        $i11 = (int) -1;

        i4 = i4 + $i11;

     label10:
        i4 = i4 + 1;

        goto label05;

     label11:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static boolean isValidNetcdf3ObjectName(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <ucar.nc2.iosp.netcdf3.N3iosp: java.util.regex.Pattern objectNamePattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public static java.util.regex.Pattern getValidNetcdf3ObjectNamePattern()
    {
        java.util.regex.Pattern $r0;

        $r0 = <ucar.nc2.iosp.netcdf3.N3iosp: java.util.regex.Pattern objectNamePattern>;

        return $r0;
    }

    public static java.lang.String createValidNetcdf3ObjectName(java.lang.String)
    {
        int $i0, $i2, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17;
        java.lang.String r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        char $c1, $c3;
        java.lang.StringBuilder $r3;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

     label01:
        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label04;

        $c3 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c3);

        if $z1 != 0 goto label04;

        $i6 = (int) $c3;

        if $i6 != 95 goto label02;

        goto label04;

     label02:
        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c3);

        if $z2 == 0 goto label03;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 78);

        goto label04;

     label03:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(0);

        goto label01;

     label04:
        i4 = 1;

     label05:
        $i5 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if i4 >= $i5 goto label11;

        $c1 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(i4);

        $i7 = (int) $c1;

        if $i7 != 32 goto label06;

        virtualinvoke $r3.<java.lang.StringBuilder: void setCharAt(int,char)>(i4, 95);

        goto label10;

     label06:
        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z0 != 0 goto label07;

        $i8 = (int) $c1;

        if $i8 == 45 goto label07;

        $i9 = (int) $c1;

        if $i9 == 95 goto label07;

        $i10 = (int) $c1;

        if $i10 == 64 goto label07;

        $i11 = (int) $c1;

        if $i11 == 58 goto label07;

        $i12 = (int) $c1;

        if $i12 == 40 goto label07;

        $i13 = (int) $c1;

        if $i13 == 41 goto label07;

        $i14 = (int) $c1;

        if $i14 == 43 goto label07;

        $i15 = (int) $c1;

        if $i15 != 46 goto label08;

     label07:
        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        if $z3 != 0 goto label10;

        $i2 = i4 + 1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i4, $i2);

        $i17 = (int) -1;

        i4 = i4 + $i17;

     label10:
        i4 = i4 + 1;

        goto label05;

     label11:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public boolean isValidFile(ucar.unidata.io.RandomAccessFile) throws java.io.IOException
    {
        ucar.nc2.iosp.netcdf3.N3iosp r1;
        ucar.unidata.io.RandomAccessFile r0;
        boolean $z0;

        r1 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

        $z0 = staticinvoke <ucar.nc2.iosp.netcdf3.N3header: boolean isValidFile(ucar.unidata.io.RandomAccessFile)>(r0);

        return $z0;
    }

    public java.lang.String getDetailInfo()
    {
        ucar.unidata.io.RandomAccessFile $r2, $r4, $r7;
        java.lang.Object[] $r3, $r6;
        long $l0, $l1;
        java.util.Formatter $r0;
        ucar.nc2.iosp.netcdf3.N3header $r10;
        ucar.nc2.iosp.netcdf3.N3iosp r1;
        java.lang.Long $r8;
        java.lang.String $r5, $r9, $r11, $r13;
        double $d0, d1;
        java.io.IOException $r12;

        r1 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

     label1:
        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        $r2 = r1.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $l0 = virtualinvoke $r2.<ucar.unidata.io.RandomAccessFile: long length()>();

        $d0 = (double) $l0;

        d1 = $d0 / 1000000.0;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = r1.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r5 = virtualinvoke $r4.<ucar.unidata.io.RandomAccessFile: java.lang.String getLocation()>();

        $r3[0] = $r5;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" raf = %s%n", $r3);

        $r6 = newarray (java.lang.Object)[2];

        $r7 = r1.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $l1 = virtualinvoke $r7.<ucar.unidata.io.RandomAccessFile: long length()>();

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r6[0] = $r8;

        $r9 = staticinvoke <ucar.unidata.util.Format: java.lang.String dfrac(double,int)>(d1, 3);

        $r6[1] = $r9;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" size= %d (%s Mb)%n%n", $r6);

        $r10 = r1.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        virtualinvoke $r10.<ucar.nc2.iosp.netcdf3.N3header: void showDetail(java.util.Formatter)>($r0);

        $r11 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        $r13 = virtualinvoke $r12.<java.io.IOException: java.lang.String getMessage()>();

        return $r13;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void open(ucar.unidata.io.RandomAccessFile, ucar.nc2.NetcdfFile, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r1;
        long $l0;
        java.io.File $r4;
        ucar.nc2.iosp.netcdf3.N3header $r6, $r7;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        ucar.nc2.util.CancelTask r5;
        ucar.nc2.NetcdfFile r2;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r2 := @parameter1: ucar.nc2.NetcdfFile;

        r5 := @parameter2: ucar.nc2.util.CancelTask;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf> = r1;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.NetcdfFile ncfile> = r2;

        $r3 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: java.lang.String getLocation()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z0 != 0 goto label1;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r3);

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        $l0 = virtualinvoke $r4.<java.io.File: long lastModified()>();

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: long lastModified> = $l0;

     label1:
        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void order(int)>(0);

        $r6 = new ucar.nc2.iosp.netcdf3.N3header;

        specialinvoke $r6.<ucar.nc2.iosp.netcdf3.N3header: void <init>()>();

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header> = $r6;

        $r7 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        virtualinvoke $r7.<ucar.nc2.iosp.netcdf3.N3header: void read(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile,java.util.Formatter)>(r1, r2, null);

        virtualinvoke r0.<ucar.nc2.iosp.netcdf3.N3iosp: void _open(ucar.unidata.io.RandomAccessFile)>(r1);

        virtualinvoke r2.<ucar.nc2.NetcdfFile: void finish()>();

        return;
    }

    public void setFill(boolean)
    {
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        boolean z0;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        z0 := @parameter0: boolean;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean fill> = z0;

        return;
    }

    public ucar.ma2.Array readData(ucar.nc2.Variable, ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r7;
        ucar.nc2.iosp.Layout $r18;
        long $l0, $l2, $l3, $l5;
        ucar.nc2.iosp.LayoutRegularSegmented $r20;
        ucar.nc2.Structure $r16;
        ucar.nc2.iosp.netcdf3.N3header $r5;
        ucar.nc2.iosp.netcdf3.N3iosp r4;
        byte $b4;
        int[] $r6, $r10, $r13, $r15;
        int $i1, $i6;
        ucar.nc2.Variable r0;
        boolean $z0, $z1;
        ucar.nc2.iosp.netcdf3.N3header$Vinfo r2;
        ucar.nc2.iosp.LayoutRegular $r19;
        ucar.ma2.DataType $r3;
        ucar.ma2.Array $r11, $r14, $r17;
        java.lang.Object $r1, $r8;
        java.lang.Class $r9, $r12;

        r4 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r0 := @parameter0: ucar.nc2.Variable;

        r7 := @parameter1: ucar.ma2.Section;

        $z0 = r0 instanceof ucar.nc2.Structure;

        if $z0 == 0 goto label1;

        $r16 = (ucar.nc2.Structure) r0;

        $r17 = specialinvoke r4.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.ma2.Array readRecordData(ucar.nc2.Structure,ucar.ma2.Section)>($r16, r7);

        return $r17;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r2 = (ucar.nc2.iosp.netcdf3.N3header$Vinfo) $r1;

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $z1 = virtualinvoke r0.<ucar.nc2.Variable: boolean isUnlimited()>();

        if $z1 != 0 goto label2;

        $r19 = new ucar.nc2.iosp.LayoutRegular;

        $r18 = $r19;

        $l5 = r2.<ucar.nc2.iosp.netcdf3.N3header$Vinfo: long begin>;

        $i6 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r15 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r19.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>($l5, $i6, $r15, r7);

        goto label3;

     label2:
        $r20 = new ucar.nc2.iosp.LayoutRegularSegmented;

        $r18 = $r20;

        $l0 = r2.<ucar.nc2.iosp.netcdf3.N3header$Vinfo: long begin>;

        $i1 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r5 = r4.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l2 = $r5.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $r6 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r20.<ucar.nc2.iosp.LayoutRegularSegmented: void <init>(long,int,long,int[],ucar.ma2.Section)>($l0, $i1, $l2, $r6, r7);

     label3:
        $l3 = interfaceinvoke $r18.<ucar.nc2.iosp.Layout: long getTotalNelems()>();

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label4;

        $r12 = virtualinvoke $r3.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r13 = virtualinvoke r7.<ucar.ma2.Section: int[] getShape()>();

        $r14 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r12, $r13);

        return $r14;

     label4:
        $r8 = virtualinvoke r4.<ucar.nc2.iosp.netcdf3.N3iosp: java.lang.Object readData(ucar.nc2.iosp.Layout,ucar.ma2.DataType)>($r18, $r3);

        $r9 = virtualinvoke $r3.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r10 = virtualinvoke r7.<ucar.ma2.Section: int[] getShape()>();

        $r11 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r9, $r10, $r8);

        return $r11;
    }

    private ucar.ma2.Array readRecordData(ucar.nc2.Structure, ucar.ma2.Section) throws java.io.IOException
    {
        byte[] $r13;
        ucar.ma2.StructureMembers$Member r39;
        ucar.nc2.iosp.netcdf3.N3iosp r6;
        byte $b1, $b5;
        ucar.ma2.StructureMembers $r3;
        java.lang.StringBuilder $r26, $r27, $r31, $r33, $r34, $r35, $r46, $r49;
        ucar.ma2.Section r0;
        long $l0, $l2, $l3, $l4, $l6, $l10, $l11, $l12, $l13, $l14, $l17, $l18, $l19, $l20, $l24, $l25, $l26, $l27, $l30, $l31, $l32, $l33, $l34;
        ucar.nc2.Structure r2;
        ucar.nc2.iosp.netcdf3.N3header $r7, $r8, $r9, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r32, $r43;
        java.lang.String $r28, $r36, $r40;
        ucar.unidata.io.RandomAccessFile $r16, $r20, $r23;
        java.nio.ByteBuffer $r12;
        ucar.ma2.ArrayStructureBB $r48;
        int[] $r11;
        boolean $z0, $z1;
        ucar.ma2.Range $r1;
        java.util.List $r4;
        int $i7, $i8, $i9, $i15, $i16, $i21, $i22, $i23, $i28, $i29, $i35, i36, i37, $i38, $i39;
        ucar.nc2.Variable $r41;
        java.io.PrintStream $r25;
        ucar.nc2.iosp.netcdf3.N3header$Vinfo r44;
        java.util.Iterator $r5;
        java.lang.IllegalArgumentException $r45, $r47;
        java.lang.Object $r38, $r42;

        r6 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r2 := @parameter0: ucar.nc2.Structure;

        r0 := @parameter1: ucar.ma2.Section;

        $r1 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(0);

        $r3 = virtualinvoke r2.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        $r4 = virtualinvoke $r3.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r38 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r39 = (ucar.ma2.StructureMembers$Member) $r38;

        $r40 = virtualinvoke r39.<ucar.ma2.StructureMembers$Member: java.lang.String getName()>();

        $r41 = virtualinvoke r2.<ucar.nc2.Structure: ucar.nc2.Variable findVariable(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r44 = (ucar.nc2.iosp.netcdf3.N3header$Vinfo) $r42;

        $l33 = r44.<ucar.nc2.iosp.netcdf3.N3header$Vinfo: long begin>;

        $r43 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l32 = $r43.<ucar.nc2.iosp.netcdf3.N3header: long recStart>;

        $l34 = $l33 - $l32;

        $i35 = (int) $l34;

        virtualinvoke r39.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>($i35);

        goto label1;

     label2:
        $r7 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l0 = $r7.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $b1 = $l0 cmp 2147483647L;

        $i38 = (int) $b1;

        if $i38 <= 0 goto label3;

        $r45 = new java.lang.IllegalArgumentException;

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cant read records when recsize > 2147483647");

        throw $r45;

     label3:
        $l2 = virtualinvoke r0.<ucar.ma2.Section: long computeSize()>();

        $r8 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l3 = $r8.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l4 = $l2 * $l3;

        $b5 = $l4 cmp 2147483647L;

        $i39 = (int) $b5;

        if $i39 <= 0 goto label4;

        $r47 = new java.lang.IllegalArgumentException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too large read: nrecs * recsize= ");

        $r32 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l30 = $r32.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l31 = $l2 * $l30;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l31);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes exceeds ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2147483647);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r47;

     label4:
        $r9 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l6 = $r9.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $i7 = (int) $l6;

        virtualinvoke $r3.<ucar.ma2.StructureMembers: void setStructureSize(int)>($i7);

        $r48 = new ucar.ma2.ArrayStructureBB;

        $r11 = newarray (int)[1];

        $i8 = virtualinvoke $r1.<ucar.ma2.Range: int length()>();

        $r11[0] = $i8;

        specialinvoke $r48.<ucar.ma2.ArrayStructureBB: void <init>(ucar.ma2.StructureMembers,int[])>($r3, $r11);

        $r12 = virtualinvoke $r48.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer getByteBuffer()>();

        $r13 = virtualinvoke $r12.<java.nio.ByteBuffer: byte[] array()>();

        i36 = 0;

        i37 = virtualinvoke $r1.<ucar.ma2.Range: int first()>();

     label5:
        $i9 = virtualinvoke $r1.<ucar.ma2.Range: int last()>();

        if i37 > $i9 goto label9;

        $z1 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: boolean debugRecord>;

        if $z1 == 0 goto label6;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" read record ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i37);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r28);

     label6:
        $r16 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r14 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l13 = $r14.<ucar.nc2.iosp.netcdf3.N3header: long recStart>;

        $l11 = (long) i37;

        $r15 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l10 = $r15.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l12 = $l11 * $l10;

        $l14 = $l13 + $l12;

        virtualinvoke $r16.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l14);

        $r17 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $i15 = $r17.<ucar.nc2.iosp.netcdf3.N3header: int numrecs>;

        $i16 = $i15 - 1;

        if i37 == $i16 goto label7;

        $r23 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $l25 = (long) i36;

        $r21 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l24 = $r21.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l26 = $l25 * $l24;

        $i29 = (int) $l26;

        $r22 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l27 = $r22.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $i28 = (int) $l27;

        virtualinvoke $r23.<ucar.unidata.io.RandomAccessFile: void readFully(byte[],int,int)>($r13, $i29, $i28);

        goto label8;

     label7:
        $r20 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $l18 = (long) i36;

        $r18 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l17 = $r18.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l19 = $l18 * $l17;

        $i22 = (int) $l19;

        $r19 = r6.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l20 = $r19.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $i21 = (int) $l20;

        virtualinvoke $r20.<ucar.unidata.io.RandomAccessFile: int read(byte[],int,int)>($r13, $i22, $i21);

     label8:
        i36 = i36 + 1;

        $i23 = virtualinvoke $r1.<ucar.ma2.Range: int stride()>();

        i37 = i37 + $i23;

        goto label5;

     label9:
        return $r48;
    }

    private ucar.ma2.Array readRecordDataSubset(ucar.nc2.Structure, ucar.ma2.Section) throws java.io.IOException
    {
        ucar.ma2.Section r0;
        long $l1, $l2, $l3;
        ucar.nc2.Structure r2;
        ucar.ma2.StructureMembers$Member r7;
        ucar.nc2.iosp.netcdf3.N3header $r13;
        ucar.nc2.iosp.netcdf3.N3iosp r12;
        int[] $r14, r15, $r16;
        int $i0, $i4, i5, $i6;
        ucar.nc2.Variable $r9;
        java.lang.String $r8;
        boolean $z0;
        ucar.ma2.Range $r1;
        ucar.nc2.iosp.netcdf3.N3header$Vinfo r11;
        java.util.Iterator $r5;
        ucar.ma2.IndexIterator $r19;
        ucar.ma2.DataType $r17;
        ucar.ma2.Array $r18;
        java.util.List $r4;
        ucar.ma2.StructureMembers $r3;
        java.lang.Object $r6, $r10;

        r12 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r2 := @parameter0: ucar.nc2.Structure;

        r0 := @parameter1: ucar.ma2.Section;

        $r1 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(0);

        $i0 = virtualinvoke $r1.<ucar.ma2.Range: int length()>();

        $r3 = virtualinvoke r2.<ucar.nc2.Structure: ucar.ma2.StructureMembers makeStructureMembers()>();

        $r4 = virtualinvoke $r3.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (ucar.ma2.StructureMembers$Member) $r6;

        $r8 = virtualinvoke r7.<ucar.ma2.StructureMembers$Member: java.lang.String getName()>();

        $r9 = virtualinvoke r2.<ucar.nc2.Structure: ucar.nc2.Variable findVariable(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r11 = (ucar.nc2.iosp.netcdf3.N3header$Vinfo) $r10;

        $l2 = r11.<ucar.nc2.iosp.netcdf3.N3header$Vinfo: long begin>;

        $r13 = r12.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l1 = $r13.<ucar.nc2.iosp.netcdf3.N3header: long recStart>;

        $l3 = $l2 - $l1;

        $i4 = (int) $l3;

        virtualinvoke r7.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>($i4);

        $r14 = virtualinvoke r7.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        i5 = lengthof $r14;

        $i6 = i5 + 1;

        r15 = newarray (int)[$i6];

        r15[0] = $i0;

        $r16 = virtualinvoke r7.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, r15, 1, i5);

        $r17 = virtualinvoke r7.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r18 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(ucar.ma2.DataType,int[])>($r17, r15);

        virtualinvoke r7.<ucar.ma2.StructureMembers$Member: void setDataArray(ucar.ma2.Array)>($r18);

        $r19 = virtualinvoke $r18.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        virtualinvoke r7.<ucar.ma2.StructureMembers$Member: void setDataObject(java.lang.Object)>($r19);

        goto label1;

     label2:
        return null;
    }

    public ucar.ma2.Array readNestedData(ucar.nc2.Variable, ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r10;
        long $l4, $l6;
        ucar.nc2.iosp.LayoutRegularSegmented $r8;
        ucar.nc2.iosp.netcdf3.N3header $r6, $r9;
        ucar.nc2.iosp.netcdf3.N3iosp r5;
        int[] r4, $r7, $r13;
        int $i0, $i1, $i2, $i3, $i5;
        ucar.nc2.Variable r0;
        ucar.nc2.iosp.netcdf3.N3header$Vinfo r2;
        ucar.ma2.DataType $r3;
        ucar.ma2.Array $r14;
        java.lang.Object $r1, $r11;
        java.lang.Class $r12;

        r5 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r0 := @parameter0: ucar.nc2.Variable;

        r10 := @parameter1: ucar.ma2.Section;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r2 = (ucar.nc2.iosp.netcdf3.N3header$Vinfo) $r1;

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $i0 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        $i1 = $i0 + 1;

        r4 = newarray (int)[$i1];

        $r6 = r5.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $i2 = $r6.<ucar.nc2.iosp.netcdf3.N3header: int numrecs>;

        r4[0] = $i2;

        $r7 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        $i3 = virtualinvoke r0.<ucar.nc2.Variable: int getRank()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r4, 1, $i3);

        $r8 = new ucar.nc2.iosp.LayoutRegularSegmented;

        $l4 = r2.<ucar.nc2.iosp.netcdf3.N3header$Vinfo: long begin>;

        $i5 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r9 = r5.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l6 = $r9.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        specialinvoke $r8.<ucar.nc2.iosp.LayoutRegularSegmented: void <init>(long,int,long,int[],ucar.ma2.Section)>($l4, $i5, $l6, r4, r10);

        $r11 = virtualinvoke r5.<ucar.nc2.iosp.netcdf3.N3iosp: java.lang.Object readData(ucar.nc2.iosp.Layout,ucar.ma2.DataType)>($r8, $r3);

        $r12 = virtualinvoke $r3.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r13 = virtualinvoke r10.<ucar.ma2.Section: int[] getShape()>();

        $r14 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r12, $r13, $r11);

        return $r14;
    }

    public long readToByteChannel(ucar.nc2.Variable, ucar.ma2.Section, java.nio.channels.WritableByteChannel) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r7;
        ucar.nc2.iosp.Layout $r11;
        long $l0, $l2, $l3, $l4, $l6;
        ucar.nc2.iosp.LayoutRegularSegmented $r13;
        ucar.nc2.Structure $r10;
        ucar.nc2.iosp.netcdf3.N3header $r5;
        ucar.nc2.iosp.netcdf3.N3iosp r4;
        int[] $r6, $r9;
        int $i1, $i5;
        ucar.nc2.Variable r0;
        boolean $z0, $z1;
        ucar.nc2.iosp.netcdf3.N3header$Vinfo r2;
        ucar.nc2.iosp.LayoutRegular $r12;
        ucar.ma2.DataType $r3;
        java.nio.channels.WritableByteChannel r8;
        java.lang.Object $r1;

        r4 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r0 := @parameter0: ucar.nc2.Variable;

        r7 := @parameter1: ucar.ma2.Section;

        r8 := @parameter2: java.nio.channels.WritableByteChannel;

        $z0 = r0 instanceof ucar.nc2.Structure;

        if $z0 == 0 goto label1;

        $r10 = (ucar.nc2.Structure) r0;

        $l6 = specialinvoke r4.<ucar.nc2.iosp.netcdf3.N3iosp: long readRecordData(ucar.nc2.Structure,ucar.ma2.Section,java.nio.channels.WritableByteChannel)>($r10, r7, r8);

        return $l6;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r2 = (ucar.nc2.iosp.netcdf3.N3header$Vinfo) $r1;

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $z1 = virtualinvoke r0.<ucar.nc2.Variable: boolean isUnlimited()>();

        if $z1 != 0 goto label2;

        $r12 = new ucar.nc2.iosp.LayoutRegular;

        $r11 = $r12;

        $l4 = r2.<ucar.nc2.iosp.netcdf3.N3header$Vinfo: long begin>;

        $i5 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r9 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r12.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>($l4, $i5, $r9, r7);

        goto label3;

     label2:
        $r13 = new ucar.nc2.iosp.LayoutRegularSegmented;

        $r11 = $r13;

        $l0 = r2.<ucar.nc2.iosp.netcdf3.N3header$Vinfo: long begin>;

        $i1 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r5 = r4.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l2 = $r5.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $r6 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r13.<ucar.nc2.iosp.LayoutRegularSegmented: void <init>(long,int,long,int[],ucar.ma2.Section)>($l0, $i1, $l2, $r6, r7);

     label3:
        $l3 = virtualinvoke r4.<ucar.nc2.iosp.netcdf3.N3iosp: long readData(ucar.nc2.iosp.Layout,ucar.ma2.DataType,java.nio.channels.WritableByteChannel)>($r11, $r3, r8);

        return $l3;
    }

    private long readRecordData(ucar.nc2.Structure, ucar.ma2.Section, java.nio.channels.WritableByteChannel) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.unidata.io.RandomAccessFile $r5, $r10, $r19;
        ucar.nc2.iosp.netcdf3.N3iosp r2;
        boolean $z0;
        ucar.ma2.Range $r1;
        java.lang.StringBuilder $r11, $r13, $r14;
        ucar.ma2.Section r0;
        long $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, l26;
        ucar.nc2.Structure r20;
        ucar.nc2.iosp.netcdf3.N3header $r3, $r4, $r7, $r8, $r9, $r16, $r17, $r18;
        int $i0, $i1, $i14, $i15, $i16, i27;
        java.lang.String $r15;
        java.io.PrintStream $r12;
        java.nio.channels.WritableByteChannel r6;

        r2 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r20 := @parameter0: ucar.nc2.Structure;

        r0 := @parameter1: ucar.ma2.Section;

        r6 := @parameter2: java.nio.channels.WritableByteChannel;

        l26 = 0L;

        $r1 = virtualinvoke r0.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(0);

        $i0 = virtualinvoke $r1.<ucar.ma2.Range: int stride()>();

        if $i0 != 1 goto label1;

        $i15 = virtualinvoke $r1.<ucar.ma2.Range: int first()>();

        $i16 = virtualinvoke $r1.<ucar.ma2.Range: int length()>();

        $r19 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r16 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l20 = $r16.<ucar.nc2.iosp.netcdf3.N3header: long recStart>;

        $l18 = (long) $i15;

        $r17 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l17 = $r17.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l19 = $l18 * $l17;

        $l24 = $l20 + $l19;

        $l22 = (long) $i16;

        $r18 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l21 = $r18.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l23 = $l22 * $l21;

        $l25 = virtualinvoke $r19.<ucar.unidata.io.RandomAccessFile: long readToByteChannel(java.nio.channels.WritableByteChannel,long,long)>(r6, $l24, $l23);

        return $l25;

     label1:
        i27 = virtualinvoke $r1.<ucar.ma2.Range: int first()>();

     label2:
        $i1 = virtualinvoke $r1.<ucar.ma2.Range: int last()>();

        if i27 > $i1 goto label4;

        $z0 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: boolean debugRecord>;

        if $z0 == 0 goto label3;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" read record ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i27);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label3:
        $r5 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r3 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l5 = $r3.<ucar.nc2.iosp.netcdf3.N3header: long recStart>;

        $l3 = (long) i27;

        $r4 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l2 = $r4.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l4 = $l3 * $l2;

        $l6 = $l5 + $l4;

        virtualinvoke $r5.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l6);

        $r10 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r7 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l10 = $r7.<ucar.nc2.iosp.netcdf3.N3header: long recStart>;

        $l8 = (long) i27;

        $r8 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l7 = $r8.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l9 = $l8 * $l7;

        $l12 = $l10 + $l9;

        $r9 = r2.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l11 = $r9.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l13 = virtualinvoke $r10.<ucar.unidata.io.RandomAccessFile: long readToByteChannel(java.nio.channels.WritableByteChannel,long,long)>(r6, $l12, $l11);

        l26 = l26 + $l13;

        $i14 = virtualinvoke $r1.<ucar.ma2.Range: int stride()>();

        i27 = i27 + $i14;

        goto label2;

     label4:
        return l26;
    }

    protected static char[] convertByteToCharUTF(byte[])
    {
        byte[] r1;
        java.nio.charset.Charset $r0;
        java.nio.CharBuffer $r3;
        char[] $r4;
        java.nio.ByteBuffer $r2;

        r1 := @parameter0: byte[];

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        $r3 = virtualinvoke $r0.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r2);

        $r4 = virtualinvoke $r3.<java.nio.CharBuffer: char[] array()>();

        return $r4;
    }

    protected static byte[] convertCharToByteUTF(char[])
    {
        byte[] $r4;
        java.nio.charset.Charset $r0;
        java.nio.CharBuffer $r2;
        char[] r1;
        java.nio.ByteBuffer $r3;

        r1 := @parameter0: char[];

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1);

        $r3 = virtualinvoke $r0.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r2);

        $r4 = virtualinvoke $r3.<java.nio.ByteBuffer: byte[] array()>();

        return $r4;
    }

    public void create(java.lang.String, ucar.nc2.NetcdfFile, int, long, boolean) throws java.io.IOException
    {
        java.io.RandomAccessFile $r10;
        ucar.unidata.io.RandomAccessFile $r4, $r6, $r8, $r9, $r11;
        long l0;
        ucar.nc2.iosp.netcdf3.N3header $r7, $r12;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        byte $b1;
        int i2, $i3;
        java.lang.String r3;
        boolean z0, $z1;
        ucar.nc2.NetcdfFile r1;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: ucar.nc2.NetcdfFile;

        i2 := @parameter2: int;

        l0 := @parameter3: long;

        z0 := @parameter4: boolean;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.NetcdfFile ncfile> = r1;

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean readonly> = 0;

        virtualinvoke r1.<ucar.nc2.NetcdfFile: void finish()>();

        $r11 = new ucar.unidata.io.RandomAccessFile;

        specialinvoke $r11.<ucar.unidata.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r3, "rw");

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf> = $r11;

        $r4 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke $r4.<ucar.unidata.io.RandomAccessFile: void order(int)>(0);

        $b1 = l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label1;

        $r9 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r10 = virtualinvoke $r9.<ucar.unidata.io.RandomAccessFile: java.io.RandomAccessFile getRandomAccessFile()>();

        virtualinvoke $r10.<java.io.RandomAccessFile: void setLength(long)>(l0);

     label1:
        $r12 = new ucar.nc2.iosp.netcdf3.N3header;

        specialinvoke $r12.<ucar.nc2.iosp.netcdf3.N3header: void <init>()>();

        r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header> = $r12;

        $r7 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $r6 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke $r7.<ucar.nc2.iosp.netcdf3.N3header: void create(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile,int,boolean,java.util.Formatter)>($r6, r1, i2, z0, null);

        $r8 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke r0.<ucar.nc2.iosp.netcdf3.N3iosp: void _create(ucar.unidata.io.RandomAccessFile)>($r8);

        $z1 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean fill>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<ucar.nc2.iosp.netcdf3.N3iosp: void fillNonRecordVariables()>();

     label2:
        return;
    }

    public boolean rewriteHeader(boolean) throws java.io.IOException
    {
        ucar.nc2.iosp.netcdf3.N3header $r1;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        boolean z0, $z1;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        z0 := @parameter0: boolean;

        $r1 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $z1 = virtualinvoke $r1.<ucar.nc2.iosp.netcdf3.N3header: boolean rewriteHeader(boolean,java.util.Formatter)>(z0, null);

        return $z1;
    }

    public void writeData(ucar.nc2.Variable, ucar.ma2.Section, ucar.ma2.Array) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r7;
        ucar.nc2.iosp.Layout $r12;
        long $l0, $l2, $l3;
        ucar.nc2.iosp.LayoutRegularSegmented $r14;
        ucar.nc2.Structure $r10;
        ucar.nc2.iosp.netcdf3.N3header $r5;
        ucar.nc2.iosp.netcdf3.N3iosp r4;
        int[] $r6, $r9;
        int $i1, $i4, $i5, $i6;
        ucar.nc2.Variable r0;
        boolean $z0, $z1, $z2;
        ucar.ma2.Range $r11;
        ucar.nc2.iosp.netcdf3.N3header$Vinfo r2;
        ucar.nc2.iosp.LayoutRegular $r13;
        ucar.ma2.DataType $r3;
        ucar.ma2.Array r8;
        java.lang.Object $r1;

        r4 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r0 := @parameter0: ucar.nc2.Variable;

        r7 := @parameter1: ucar.ma2.Section;

        r8 := @parameter2: ucar.ma2.Array;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r2 = (ucar.nc2.iosp.netcdf3.N3header$Vinfo) $r1;

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean isUnlimited()>();

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke r7.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(0);

        $i5 = virtualinvoke $r11.<ucar.ma2.Range: int last()>();

        $i6 = $i5 + 1;

        virtualinvoke r4.<ucar.nc2.iosp.netcdf3.N3iosp: void setNumrecs(int)>($i6);

     label1:
        $z1 = r0 instanceof ucar.nc2.Structure;

        if $z1 == 0 goto label2;

        $r10 = (ucar.nc2.Structure) r0;

        specialinvoke r4.<ucar.nc2.iosp.netcdf3.N3iosp: void writeRecordData(ucar.nc2.Structure,ucar.ma2.Section,ucar.ma2.Array)>($r10, r7, r8);

        goto label5;

     label2:
        $z2 = virtualinvoke r0.<ucar.nc2.Variable: boolean isUnlimited()>();

        if $z2 != 0 goto label3;

        $r13 = new ucar.nc2.iosp.LayoutRegular;

        $r12 = $r13;

        $l3 = r2.<ucar.nc2.iosp.netcdf3.N3header$Vinfo: long begin>;

        $i4 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r9 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r13.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>($l3, $i4, $r9, r7);

        goto label4;

     label3:
        $r14 = new ucar.nc2.iosp.LayoutRegularSegmented;

        $r12 = $r14;

        $l0 = r2.<ucar.nc2.iosp.netcdf3.N3header$Vinfo: long begin>;

        $i1 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $r5 = r4.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l2 = $r5.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $r6 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r14.<ucar.nc2.iosp.LayoutRegularSegmented: void <init>(long,int,long,int[],ucar.ma2.Section)>($l0, $i1, $l2, $r6, r7);

     label4:
        virtualinvoke r4.<ucar.nc2.iosp.netcdf3.N3iosp: void writeData(ucar.ma2.Array,ucar.nc2.iosp.Layout,ucar.ma2.DataType)>(r8, $r12, $r3);

     label5:
        return;
    }

    private void writeRecordData(ucar.nc2.Structure, ucar.ma2.Section, ucar.ma2.Array) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.StructureMembers$Member $r11;
        ucar.nc2.iosp.netcdf3.N3iosp r14;
        int[] $r17;
        boolean $z0, $z1;
        ucar.ma2.Range $r6;
        ucar.ma2.DataType $r20;
        java.util.List $r3;
        ucar.ma2.StructureMembers $r4;
        ucar.ma2.Section r5, $r18;
        long $l2, $l3, $l4, $l5, l6;
        ucar.nc2.Structure r2;
        ucar.nc2.iosp.netcdf3.N3header $r15;
        int $i0, $i1, $i7, i8, i9;
        ucar.nc2.Variable r9;
        java.lang.String $r10;
        ucar.nc2.iosp.netcdf3.N3header$Vinfo r13;
        java.util.Iterator $r7;
        ucar.nc2.iosp.LayoutRegular $r16;
        java.lang.IllegalArgumentException $r21;
        ucar.ma2.Array r0, $r19;
        java.lang.Object $r8, $r12;

        r14 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r2 := @parameter0: ucar.nc2.Structure;

        r5 := @parameter1: ucar.ma2.Section;

        r0 := @parameter2: ucar.ma2.Array;

        $z0 = r0 instanceof ucar.ma2.ArrayStructure;

        if $z0 != 0 goto label1;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("writeRecordData: data must be ArrayStructure");

        throw $r21;

     label1:
        r1 = (ucar.ma2.ArrayStructure) r0;

        $r3 = virtualinvoke r2.<ucar.nc2.Structure: java.util.List getVariables()>();

        $r4 = virtualinvoke r1.<ucar.ma2.ArrayStructure: ucar.ma2.StructureMembers getStructureMembers()>();

        $r6 = virtualinvoke r5.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(0);

        i8 = 0;

        i9 = virtualinvoke $r6.<ucar.ma2.Range: int first()>();

     label2:
        $i0 = virtualinvoke $r6.<ucar.ma2.Range: int last()>();

        if i9 > $i0 goto label6;

        $r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (ucar.nc2.Variable) $r8;

        $r10 = virtualinvoke r9.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r11 = virtualinvoke $r4.<ucar.ma2.StructureMembers: ucar.ma2.StructureMembers$Member findMember(java.lang.String)>($r10);

        if null != $r11 goto label4;

        goto label3;

     label4:
        $r12 = virtualinvoke r9.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r13 = (ucar.nc2.iosp.netcdf3.N3header$Vinfo) $r12;

        $l5 = r13.<ucar.nc2.iosp.netcdf3.N3header$Vinfo: long begin>;

        $l3 = (long) i9;

        $r15 = r14.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l2 = $r15.<ucar.nc2.iosp.netcdf3.N3header: long recsize>;

        $l4 = $l3 * $l2;

        l6 = $l5 + $l4;

        $r16 = new ucar.nc2.iosp.LayoutRegular;

        $i7 = virtualinvoke r9.<ucar.nc2.Variable: int getElementSize()>();

        $r17 = virtualinvoke r9.<ucar.nc2.Variable: int[] getShape()>();

        $r18 = virtualinvoke r9.<ucar.nc2.Variable: ucar.ma2.Section getShapeAsSection()>();

        specialinvoke $r16.<ucar.nc2.iosp.LayoutRegular: void <init>(long,int,int[],ucar.ma2.Section)>(l6, $i7, $r17, $r18);

        $r19 = virtualinvoke r1.<ucar.ma2.ArrayStructure: ucar.ma2.Array getArray(int,ucar.ma2.StructureMembers$Member)>(i8, $r11);

        $r20 = virtualinvoke r9.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        virtualinvoke r14.<ucar.nc2.iosp.netcdf3.N3iosp: void writeData(ucar.ma2.Array,ucar.nc2.iosp.Layout,ucar.ma2.DataType)>($r19, $r16, $r20);

        goto label3;

     label5:
        i8 = i8 + 1;

        $i1 = virtualinvoke $r6.<ucar.ma2.Range: int stride()>();

        i9 = i9 + $i1;

        goto label2;

     label6:
        return;
    }

    protected void setNumrecs(int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.unidata.io.RandomAccessFile $r11;
        long $l3;
        ucar.nc2.iosp.netcdf3.N3header $r1, $r2, $r3, $r10;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        int i0, $i1, i2;
        ucar.nc2.Variable r20;
        java.lang.String $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.PrintStream $r15;
        java.util.Iterator $r6, $r9;
        java.util.List $r5, $r8;
        java.lang.Object $r12, $r13;
        java.lang.StringBuilder $r14, $r16, $r17;
        ucar.nc2.Dimension r19;
        ucar.nc2.NetcdfFile $r4, $r7;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $i1 = $r1.<ucar.nc2.iosp.netcdf3.N3header: int numrecs>;

        if i0 > $i1 goto label01;

        return;

     label01:
        $r2 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        i2 = $r2.<ucar.nc2.iosp.netcdf3.N3header: int numrecs>;

        $z0 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean debugSize>;

        if $z0 == 0 goto label02;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extend records to = ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label02:
        $r3 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        virtualinvoke $r3.<ucar.nc2.iosp.netcdf3.N3header: void setNumrecs(int)>(i0);

        $r4 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.NetcdfFile ncfile>;

        $r5 = virtualinvoke $r4.<ucar.nc2.NetcdfFile: java.util.List getDimensions()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label05;

        $r13 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r19 = (ucar.nc2.Dimension) $r13;

        $z4 = virtualinvoke r19.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z4 == 0 goto label04;

        virtualinvoke r19.<ucar.nc2.Dimension: void setLength(int)>(i0);

     label04:
        goto label03;

     label05:
        $r7 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.NetcdfFile ncfile>;

        $r8 = virtualinvoke $r7.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r12 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r20 = (ucar.nc2.Variable) $r12;

        $z3 = virtualinvoke r20.<ucar.nc2.Variable: boolean isUnlimited()>();

        if $z3 == 0 goto label07;

        virtualinvoke r20.<ucar.nc2.Variable: void resetShape()>();

        virtualinvoke r20.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>(null, 0);

     label07:
        goto label06;

     label08:
        $z2 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean fill>;

        if $z2 == 0 goto label09;

        virtualinvoke r0.<ucar.nc2.iosp.netcdf3.N3iosp: void fillRecordVariables(int,int)>(i2, i0);

        goto label10;

     label09:
        $r11 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r10 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l3 = virtualinvoke $r10.<ucar.nc2.iosp.netcdf3.N3header: long calcFileSize()>();

        virtualinvoke $r11.<ucar.unidata.io.RandomAccessFile: void setMinLength(long)>($l3);

     label10:
        return;
    }

    public void updateAttribute(ucar.nc2.Variable, ucar.nc2.Attribute) throws java.io.IOException
    {
        ucar.nc2.iosp.netcdf3.N3header $r3;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        ucar.nc2.Attribute r2;
        ucar.nc2.Variable r1;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r1 := @parameter0: ucar.nc2.Variable;

        r2 := @parameter1: ucar.nc2.Attribute;

        $r3 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        virtualinvoke $r3.<ucar.nc2.iosp.netcdf3.N3header: void updateAttribute(ucar.nc2.Variable,ucar.nc2.Attribute)>(r1, r2);

        return;
    }

    protected void fillNonRecordVariables() throws java.io.IOException
    {
        java.util.Iterator $r3;
        ucar.ma2.Section $r6;
        ucar.ma2.Array $r7;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        java.util.List $r2;
        ucar.ma2.InvalidRangeException $r8;
        java.lang.Object $r4;
        ucar.nc2.Variable r5;
        ucar.nc2.NetcdfFile $r1;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        $r1 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.NetcdfFile ncfile>;

        $r2 = virtualinvoke $r1.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.Variable) $r4;

        $z0 = virtualinvoke r5.<ucar.nc2.Variable: boolean isUnlimited()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r6 = virtualinvoke r5.<ucar.nc2.Variable: ucar.ma2.Section getShapeAsSection()>();

        $r7 = specialinvoke r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.ma2.Array makeConstantArray(ucar.nc2.Variable)>(r5);

        virtualinvoke r0.<ucar.nc2.iosp.netcdf3.N3iosp: void writeData(ucar.nc2.Variable,ucar.ma2.Section,ucar.ma2.Array)>(r5, $r6, $r7);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        virtualinvoke $r8.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

     label5:
        goto label1;

     label6:
        return;

        catch ucar.ma2.InvalidRangeException from label2 to label3 with label4;
    }

    protected void fillRecordVariables(int, int) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section $r7;
        ucar.nc2.iosp.netcdf3.N3iosp r1;
        int i0, i1, i2;
        ucar.nc2.Variable r6;
        boolean $z0, $z1, $z2;
        ucar.ma2.Range $r0;
        java.util.Iterator $r4;
        ucar.ma2.Array $r9;
        java.util.List $r3, $r8;
        java.lang.Object $r5;
        ucar.nc2.NetcdfFile $r2;

        r1 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0;

     label1:
        if i2 >= i1 goto label5;

        $r0 = new ucar.ma2.Range;

        specialinvoke $r0.<ucar.ma2.Range: void <init>(int,int)>(i2, i2);

        $r2 = r1.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.NetcdfFile ncfile>;

        $r3 = virtualinvoke $r2.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.nc2.Variable) $r5;

        $z0 = virtualinvoke r6.<ucar.nc2.Variable: boolean isUnlimited()>();

        if $z0 == 0 goto label2;

        $z1 = r6 instanceof ucar.nc2.Structure;

        if $z1 == 0 goto label3;

        goto label2;

     label3:
        $r7 = new ucar.ma2.Section;

        $r8 = virtualinvoke r6.<ucar.nc2.Variable: java.util.List getRanges()>();

        specialinvoke $r7.<ucar.ma2.Section: void <init>(java.util.List)>($r8);

        virtualinvoke $r7.<ucar.ma2.Section: ucar.ma2.Section setRange(int,ucar.ma2.Range)>(0, $r0);

        $r9 = specialinvoke r1.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.ma2.Array makeConstantArray(ucar.nc2.Variable)>(r6);

        virtualinvoke r1.<ucar.nc2.iosp.netcdf3.N3iosp: void writeData(ucar.nc2.Variable,ucar.ma2.Section,ucar.ma2.Array)>(r6, $r7, $r9);

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return;
    }

    private ucar.ma2.Array makeConstantArray(ucar.nc2.Variable)
    {
        byte[] r23;
        ucar.nc2.iosp.netcdf3.N3iosp r17;
        byte $b3;
        int[] r21, $r25;
        ucar.ma2.DataType $r1;
        ucar.nc2.Attribute $r3;
        float $f0;
        short[] r22;
        double[] r19;
        float[] r20;
        short $s2;
        int $i0, $i1;
        ucar.nc2.Variable r0;
        java.lang.String $r10, $r11;
        java.lang.Number $r12, $r13, $r14, $r15, $r16;
        double $d0;
        char $c4;
        ucar.ma2.Array $r26;
        char[] r24;
        java.lang.Class $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.Object r18, $r27, $r28, $r29, $r30, $r31, $r32;

        r17 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r0 := @parameter0: ucar.nc2.Variable;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r2 = virtualinvoke $r1.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("_FillValue");

        r18 = null;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        if $r2 != $r4 goto label03;

        r19 = newarray (double)[1];

        if $r3 != null goto label01;

        $d0 = 9.969209968386869E36;

        goto label02;

     label01:
        $r16 = virtualinvoke $r3.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d0 = virtualinvoke $r16.<java.lang.Number: double doubleValue()>();

     label02:
        r19[0] = $d0;

        $r27 = (java.lang.Object) r19;

        r18 = $r27;

        goto label18;

     label03:
        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        if $r2 != $r5 goto label06;

        r20 = newarray (float)[1];

        if $r3 != null goto label04;

        $f0 = 9.96921E36F;

        goto label05;

     label04:
        $r15 = virtualinvoke $r3.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $f0 = virtualinvoke $r15.<java.lang.Number: float floatValue()>();

     label05:
        r20[0] = $f0;

        $r28 = (java.lang.Object) r20;

        r18 = $r28;

        goto label18;

     label06:
        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r2 != $r6 goto label09;

        r21 = newarray (int)[1];

        if $r3 != null goto label07;

        $i1 = -2147483647;

        goto label08;

     label07:
        $r14 = virtualinvoke $r3.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $i1 = virtualinvoke $r14.<java.lang.Number: int intValue()>();

     label08:
        r21[0] = $i1;

        $r29 = (java.lang.Object) r21;

        r18 = $r29;

        goto label18;

     label09:
        $r7 = <java.lang.Short: java.lang.Class TYPE>;

        if $r2 != $r7 goto label12;

        r22 = newarray (short)[1];

        if $r3 != null goto label10;

        $s2 = -32767;

        goto label11;

     label10:
        $r13 = virtualinvoke $r3.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $s2 = virtualinvoke $r13.<java.lang.Number: short shortValue()>();

     label11:
        r22[0] = $s2;

        $r30 = (java.lang.Object) r22;

        r18 = $r30;

        goto label18;

     label12:
        $r8 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r2 != $r8 goto label15;

        r23 = newarray (byte)[1];

        if $r3 != null goto label13;

        $b3 = -127;

        goto label14;

     label13:
        $r12 = virtualinvoke $r3.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $b3 = virtualinvoke $r12.<java.lang.Number: byte byteValue()>();

     label14:
        r23[0] = $b3;

        $r31 = (java.lang.Object) r23;

        r18 = $r31;

        goto label18;

     label15:
        $r9 = <java.lang.Character: java.lang.Class TYPE>;

        if $r2 != $r9 goto label18;

        r24 = newarray (char)[1];

        if $r3 == null goto label16;

        $r10 = virtualinvoke $r3.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i0 <= 0 goto label16;

        $r11 = virtualinvoke $r3.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $c4 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(0);

        goto label17;

     label16:
        $c4 = 0;

     label17:
        r24[0] = $c4;

        $r32 = (java.lang.Object) r24;

        r18 = $r32;

     label18:
        $r25 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        $r26 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factoryConstant(java.lang.Class,int[],java.lang.Object)>($r2, $r25, r18);

        return $r26;
    }

    public boolean syncExtend() throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile $r6;
        ucar.nc2.iosp.netcdf3.N3header $r1, $r10;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        int $i0;
        java.lang.String $r7, $r12;
        boolean $z0, $z1;
        org.slf4j.Logger $r2, $r4;
        java.lang.StringBuilder $r3, $r5, $r8, $r9, $r11;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        $r1 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $z0 = virtualinvoke $r1.<ucar.nc2.iosp.netcdf3.N3header: boolean synchNumrecs()>();

        if $z0 == 0 goto label1;

        $r2 = <ucar.nc2.iosp.netcdf3.N3iosp: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r4 = <ucar.nc2.iosp.netcdf3.N3iosp: org.slf4j.Logger log>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" N3iosp syncExtend ");

        $r6 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r7 = virtualinvoke $r6.<ucar.unidata.io.RandomAccessFile: java.lang.String getLocation()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numrecs =");

        $r10 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $i0 = $r10.<ucar.nc2.iosp.netcdf3.N3header: int numrecs>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

     label1:
        return $z0;
    }

    public boolean sync() throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile $r2, $r7, $r12;
        long $l0, $l2, $l3, $l5;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        byte $b1, $b4;
        java.lang.String $r3, $r13, $r19;
        boolean $z0, $z1, $z2, $z3;
        org.slf4j.Logger $r8, $r10;
        java.io.IOException $r4;
        java.io.File $r1;
        java.lang.StringBuilder $r9, $r11, $r14, $r15, $r16, $r17, $r18;
        ucar.nc2.NetcdfFile $r5, $r6;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        $z0 = <ucar.nc2.iosp.netcdf3.N3iosp: boolean syncExtendOnly>;

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r0.<ucar.nc2.iosp.netcdf3.N3iosp: boolean syncExtend()>();

        return $z3;

     label1:
        $l0 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: long lastModified>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        return 0;

     label2:
        $r1 = new java.io.File;

        $r2 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r3 = virtualinvoke $r2.<ucar.unidata.io.RandomAccessFile: java.lang.String getLocation()>();

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r3);

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label5;

        $l2 = virtualinvoke $r1.<java.io.File: long lastModified()>();

        $l3 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: long lastModified>;

        $b4 = $l2 cmp $l3;

        if $b4 != 0 goto label3;

        return 0;

     label3:
        $r5 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.NetcdfFile ncfile>;

        virtualinvoke $r5.<ucar.nc2.NetcdfFile: void empty()>();

        $r7 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r6 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.NetcdfFile ncfile>;

        virtualinvoke r0.<ucar.nc2.iosp.netcdf3.N3iosp: void open(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile,ucar.nc2.util.CancelTask)>($r7, $r6, null);

        $r8 = <ucar.nc2.iosp.netcdf3.N3iosp: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label4;

        $r10 = <ucar.nc2.iosp.netcdf3.N3iosp: org.slf4j.Logger log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" N3iosp resynced ");

        $r12 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        $r13 = virtualinvoke $r12.<ucar.unidata.io.RandomAccessFile: java.lang.String getLocation()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" currentModified=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastModified= ");

        $l5 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: long lastModified>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r19);

     label4:
        return 1;

     label5:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("File does not exist");

        throw $r4;
    }

    public void flush() throws java.io.IOException
    {
        ucar.nc2.iosp.netcdf3.N3header $r2;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        ucar.unidata.io.RandomAccessFile $r1, $r3;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        $r1 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke $r1.<ucar.unidata.io.RandomAccessFile: void flush()>();

        $r2 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        virtualinvoke $r2.<ucar.nc2.iosp.netcdf3.N3header: void writeNumrecs()>();

        $r3 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke $r3.<ucar.unidata.io.RandomAccessFile: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        ucar.nc2.iosp.netcdf3.N3header $r2;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        ucar.unidata.io.RandomAccessFile $r1, $r3, $r4;
        long $l0;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        $r1 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $l0 = virtualinvoke $r2.<ucar.nc2.iosp.netcdf3.N3header: long calcFileSize()>();

        $r3 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke $r3.<ucar.unidata.io.RandomAccessFile: void setMinLength(long)>($l0);

        $r4 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke $r4.<ucar.unidata.io.RandomAccessFile: void close()>();

     label1:
        r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.unidata.io.RandomAccessFile raf> = null;

        return;
    }

    public java.lang.String toStringDebug(java.lang.Object)
    {
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        java.lang.Object r1;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r1 := @parameter0: java.lang.Object;

        return null;
    }

    public java.lang.Object sendIospMessage(java.lang.Object)
    {
        ucar.nc2.iosp.netcdf3.N3header $r1, $r4, $r6;
        ucar.nc2.iosp.netcdf3.N3iosp r0;
        java.lang.Boolean $r5, $r7;
        java.lang.Object r2, $r3;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        if null != $r1 goto label1;

        return null;

     label1:
        if r2 != "AddRecordStructure" goto label2;

        $r6 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $z1 = virtualinvoke $r6.<ucar.nc2.iosp.netcdf3.N3header: boolean makeRecordStructure()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r7;

     label2:
        if r2 != "RemoveRecordStructure" goto label3;

        $r4 = r0.<ucar.nc2.iosp.netcdf3.N3iosp: ucar.nc2.iosp.netcdf3.N3header header>;

        $z0 = virtualinvoke $r4.<ucar.nc2.iosp.netcdf3.N3header: boolean removeRecordStructure()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r5;

     label3:
        $r3 = specialinvoke r0.<ucar.nc2.iosp.AbstractIOServiceProvider: java.lang.Object sendIospMessage(java.lang.Object)>(r2);

        return $r3;
    }

    public java.lang.String getFileTypeId()
    {
        ucar.nc2.iosp.netcdf3.N3iosp r0;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        return "netCDF";
    }

    public java.lang.String getFileTypeDescription()
    {
        ucar.nc2.iosp.netcdf3.N3iosp r0;

        r0 := @this: ucar.nc2.iosp.netcdf3.N3iosp;

        return "NetCDF classic format";
    }

    protected abstract java.lang.Object readData(ucar.nc2.iosp.Layout, ucar.ma2.DataType) throws java.io.IOException;

    protected abstract long readData(ucar.nc2.iosp.Layout, ucar.ma2.DataType, java.nio.channels.WritableByteChannel) throws java.io.IOException;

    protected abstract void writeData(ucar.ma2.Array, ucar.nc2.iosp.Layout, ucar.ma2.DataType) throws java.io.IOException;

    protected abstract void _open(ucar.unidata.io.RandomAccessFile) throws java.io.IOException;

    protected abstract void _create(ucar.unidata.io.RandomAccessFile) throws java.io.IOException;

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.util.regex.Pattern $r1;

        <ucar.nc2.iosp.netcdf3.N3iosp: int MAX_NUMRECS> = 2147483647;

        <ucar.nc2.iosp.netcdf3.N3iosp: long MAX_VARSIZE> = 4294967292L;

        <ucar.nc2.iosp.netcdf3.N3iosp: java.lang.String FillValue> = "_FillValue";

        <ucar.nc2.iosp.netcdf3.N3iosp: double NC_FILL_DOUBLE> = 9.969209968386869E36;

        <ucar.nc2.iosp.netcdf3.N3iosp: float NC_FILL_FLOAT> = 9.96921E36F;

        <ucar.nc2.iosp.netcdf3.N3iosp: long NC_FILL_LONG> = -9223372036854775806L;

        <ucar.nc2.iosp.netcdf3.N3iosp: int NC_FILL_INT> = -2147483647;

        <ucar.nc2.iosp.netcdf3.N3iosp: short NC_FILL_SHORT> = -32767;

        <ucar.nc2.iosp.netcdf3.N3iosp: char NC_FILL_CHAR> = 0;

        <ucar.nc2.iosp.netcdf3.N3iosp: byte NC_FILL_BYTE> = -127;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/iosp/netcdf3/N3iosp;");

        <ucar.nc2.iosp.netcdf3.N3iosp: org.slf4j.Logger log> = $r0;

        <ucar.nc2.iosp.netcdf3.N3iosp: boolean syncExtendOnly> = 0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[a-zA-Z0-9_][a-zA-Z0-9_@\\:\\(\\)\\.\\-\\+]*");

        <ucar.nc2.iosp.netcdf3.N3iosp: java.util.regex.Pattern objectNamePattern> = $r1;

        return;
    }
}
