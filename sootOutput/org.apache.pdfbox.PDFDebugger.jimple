public class org.apache.pdfbox.PDFDebugger extends javax.swing.JFrame
{
    private java.io.File currentDir;
    private org.apache.pdfbox.pdmodel.PDDocument document;
    private static final java.lang.String NONSEQ;
    private static final java.lang.String PASSWORD;
    private static boolean useNonSeqParser;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel documentPanel;

    public void <init>()
    {
        org.apache.pdfbox.PDFDebugger r0;
        java.io.File $r1;
        javax.swing.JPanel $r2;

        r0 := @this: org.apache.pdfbox.PDFDebugger;

        specialinvoke r0.<javax.swing.JFrame: void <init>()>();

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(".");

        r0.<org.apache.pdfbox.PDFDebugger: java.io.File currentDir> = $r1;

        r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document> = null;

        $r2 = new javax.swing.JPanel;

        specialinvoke $r2.<javax.swing.JPanel: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JPanel documentPanel> = $r2;

        specialinvoke r0.<org.apache.pdfbox.PDFDebugger: void initComponents()>();

        return;
    }

    private void initComponents()
    {
        org.apache.pdfbox.PDFDebugger r0;
        javax.swing.JPanel $r41;
        javax.swing.JSplitPane $r1, $r33, $r39, $r43;
        javax.swing.JTextPane $r5, $r36;
        java.awt.Container $r42;
        javax.swing.border.BevelBorder $r24;
        javax.swing.JScrollPane $r2, $r4, $r25, $r27, $r31, $r32, $r35, $r37, $r38, $r40;
        javax.swing.JMenuBar $r6, $r59, $r80;
        javax.swing.JMenu $r7, $r12, $r17, $r44, $r50, $r57, $r58, $r60, $r63, $r66, $r69, $r72, $r73, $r76, $r79;
        org.apache.pdfbox.PDFDebugger$4 $r54;
        org.apache.pdfbox.PDFDebugger$1 $r23;
        org.apache.pdfbox.pdfviewer.PDFTreeCellRenderer $r20;
        org.apache.pdfbox.PDFDebugger$3 $r47;
        org.apache.pdfbox.PDFDebugger$2 $r28;
        java.awt.Dimension $r26, $r34, $r82;
        java.awt.Toolkit $r81;
        javax.swing.JMenuItem $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r18, $r19, $r45, $r46, $r48, $r49, $r51, $r52, $r53, $r55, $r56, $r61, $r62, $r64, $r65, $r67, $r68, $r70, $r71, $r74, $r75, $r77, $r78;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        javax.swing.JTree $r3, $r21, $r22, $r29, $r30;

        r0 := @this: org.apache.pdfbox.PDFDebugger;

        $r1 = new javax.swing.JSplitPane;

        specialinvoke $r1.<javax.swing.JSplitPane: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JSplitPane jSplitPane1> = $r1;

        $r2 = new javax.swing.JScrollPane;

        specialinvoke $r2.<javax.swing.JScrollPane: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JScrollPane jScrollPane1> = $r2;

        $r3 = new javax.swing.JTree;

        specialinvoke $r3.<javax.swing.JTree: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTree jTree1> = $r3;

        $r4 = new javax.swing.JScrollPane;

        specialinvoke $r4.<javax.swing.JScrollPane: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JScrollPane jScrollPane2> = $r4;

        $r5 = new javax.swing.JTextPane;

        specialinvoke $r5.<javax.swing.JTextPane: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTextPane jTextPane1> = $r5;

        $r6 = new javax.swing.JMenuBar;

        specialinvoke $r6.<javax.swing.JMenuBar: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuBar menuBar> = $r6;

        $r7 = new javax.swing.JMenu;

        specialinvoke $r7.<javax.swing.JMenu: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu fileMenu> = $r7;

        $r8 = new javax.swing.JMenuItem;

        specialinvoke $r8.<javax.swing.JMenuItem: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem openMenuItem> = $r8;

        $r9 = new javax.swing.JMenuItem;

        specialinvoke $r9.<javax.swing.JMenuItem: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem saveMenuItem> = $r9;

        $r10 = new javax.swing.JMenuItem;

        specialinvoke $r10.<javax.swing.JMenuItem: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem saveAsMenuItem> = $r10;

        $r11 = new javax.swing.JMenuItem;

        specialinvoke $r11.<javax.swing.JMenuItem: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem exitMenuItem> = $r11;

        $r12 = new javax.swing.JMenu;

        specialinvoke $r12.<javax.swing.JMenu: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu editMenu> = $r12;

        $r13 = new javax.swing.JMenuItem;

        specialinvoke $r13.<javax.swing.JMenuItem: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem cutMenuItem> = $r13;

        $r14 = new javax.swing.JMenuItem;

        specialinvoke $r14.<javax.swing.JMenuItem: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem copyMenuItem> = $r14;

        $r15 = new javax.swing.JMenuItem;

        specialinvoke $r15.<javax.swing.JMenuItem: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem pasteMenuItem> = $r15;

        $r16 = new javax.swing.JMenuItem;

        specialinvoke $r16.<javax.swing.JMenuItem: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem deleteMenuItem> = $r16;

        $r17 = new javax.swing.JMenu;

        specialinvoke $r17.<javax.swing.JMenu: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu helpMenu> = $r17;

        $r18 = new javax.swing.JMenuItem;

        specialinvoke $r18.<javax.swing.JMenuItem: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem contentsMenuItem> = $r18;

        $r19 = new javax.swing.JMenuItem;

        specialinvoke $r19.<javax.swing.JMenuItem: void <init>()>();

        r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem aboutMenuItem> = $r19;

        $r21 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTree jTree1>;

        $r20 = new org.apache.pdfbox.pdfviewer.PDFTreeCellRenderer;

        specialinvoke $r20.<org.apache.pdfbox.pdfviewer.PDFTreeCellRenderer: void <init>()>();

        virtualinvoke $r21.<javax.swing.JTree: void setCellRenderer(javax.swing.tree.TreeCellRenderer)>($r20);

        $r22 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTree jTree1>;

        virtualinvoke $r22.<javax.swing.JTree: void setModel(javax.swing.tree.TreeModel)>(null);

        virtualinvoke r0.<org.apache.pdfbox.PDFDebugger: void setTitle(java.lang.String)>("PDFBox - PDF Viewer");

        $r23 = new org.apache.pdfbox.PDFDebugger$1;

        specialinvoke $r23.<org.apache.pdfbox.PDFDebugger$1: void <init>(org.apache.pdfbox.PDFDebugger)>(r0);

        virtualinvoke r0.<org.apache.pdfbox.PDFDebugger: void addWindowListener(java.awt.event.WindowListener)>($r23);

        $r25 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JScrollPane jScrollPane1>;

        $r24 = new javax.swing.border.BevelBorder;

        specialinvoke $r24.<javax.swing.border.BevelBorder: void <init>(int)>(0);

        virtualinvoke $r25.<javax.swing.JScrollPane: void setBorder(javax.swing.border.Border)>($r24);

        $r27 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JScrollPane jScrollPane1>;

        $r26 = new java.awt.Dimension;

        specialinvoke $r26.<java.awt.Dimension: void <init>(int,int)>(300, 500);

        virtualinvoke $r27.<javax.swing.JScrollPane: void setPreferredSize(java.awt.Dimension)>($r26);

        $r29 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTree jTree1>;

        $r28 = new org.apache.pdfbox.PDFDebugger$2;

        specialinvoke $r28.<org.apache.pdfbox.PDFDebugger$2: void <init>(org.apache.pdfbox.PDFDebugger)>(r0);

        virtualinvoke $r29.<javax.swing.JTree: void addTreeSelectionListener(javax.swing.event.TreeSelectionListener)>($r28);

        $r31 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JScrollPane jScrollPane1>;

        $r30 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTree jTree1>;

        virtualinvoke $r31.<javax.swing.JScrollPane: void setViewportView(java.awt.Component)>($r30);

        $r33 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JSplitPane jSplitPane1>;

        $r32 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JScrollPane jScrollPane2>;

        virtualinvoke $r33.<javax.swing.JSplitPane: void setRightComponent(java.awt.Component)>($r32);

        $r35 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JScrollPane jScrollPane2>;

        $r34 = new java.awt.Dimension;

        specialinvoke $r34.<java.awt.Dimension: void <init>(int,int)>(300, 500);

        virtualinvoke $r35.<javax.swing.JScrollPane: void setPreferredSize(java.awt.Dimension)>($r34);

        $r37 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JScrollPane jScrollPane2>;

        $r36 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTextPane jTextPane1>;

        virtualinvoke $r37.<javax.swing.JScrollPane: void setViewportView(java.awt.Component)>($r36);

        $r39 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JSplitPane jSplitPane1>;

        $r38 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JScrollPane jScrollPane1>;

        virtualinvoke $r39.<javax.swing.JSplitPane: void setLeftComponent(java.awt.Component)>($r38);

        $r40 = new javax.swing.JScrollPane;

        specialinvoke $r40.<javax.swing.JScrollPane: void <init>()>();

        $r41 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JPanel documentPanel>;

        virtualinvoke $r40.<javax.swing.JScrollPane: void setViewportView(java.awt.Component)>($r41);

        $r42 = virtualinvoke r0.<org.apache.pdfbox.PDFDebugger: java.awt.Container getContentPane()>();

        $r43 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JSplitPane jSplitPane1>;

        virtualinvoke $r42.<java.awt.Container: void add(java.awt.Component,java.lang.Object)>($r43, "Center");

        $r44 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu fileMenu>;

        virtualinvoke $r44.<javax.swing.JMenu: void setText(java.lang.String)>("File");

        $r45 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem openMenuItem>;

        virtualinvoke $r45.<javax.swing.JMenuItem: void setText(java.lang.String)>("Open");

        $r46 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem openMenuItem>;

        virtualinvoke $r46.<javax.swing.JMenuItem: void setToolTipText(java.lang.String)>("Open PDF file");

        $r48 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem openMenuItem>;

        $r47 = new org.apache.pdfbox.PDFDebugger$3;

        specialinvoke $r47.<org.apache.pdfbox.PDFDebugger$3: void <init>(org.apache.pdfbox.PDFDebugger)>(r0);

        virtualinvoke $r48.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>($r47);

        $r50 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu fileMenu>;

        $r49 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem openMenuItem>;

        virtualinvoke $r50.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r49);

        $r51 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem saveMenuItem>;

        virtualinvoke $r51.<javax.swing.JMenuItem: void setText(java.lang.String)>("Save");

        $r52 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem saveAsMenuItem>;

        virtualinvoke $r52.<javax.swing.JMenuItem: void setText(java.lang.String)>("Save As ...");

        $r53 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem exitMenuItem>;

        virtualinvoke $r53.<javax.swing.JMenuItem: void setText(java.lang.String)>("Exit");

        $r55 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem exitMenuItem>;

        $r54 = new org.apache.pdfbox.PDFDebugger$4;

        specialinvoke $r54.<org.apache.pdfbox.PDFDebugger$4: void <init>(org.apache.pdfbox.PDFDebugger)>(r0);

        virtualinvoke $r55.<javax.swing.JMenuItem: void addActionListener(java.awt.event.ActionListener)>($r54);

        $r57 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu fileMenu>;

        $r56 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem exitMenuItem>;

        virtualinvoke $r57.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r56);

        $r59 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuBar menuBar>;

        $r58 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu fileMenu>;

        virtualinvoke $r59.<javax.swing.JMenuBar: javax.swing.JMenu add(javax.swing.JMenu)>($r58);

        $r60 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu editMenu>;

        virtualinvoke $r60.<javax.swing.JMenu: void setText(java.lang.String)>("Edit");

        $r61 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem cutMenuItem>;

        virtualinvoke $r61.<javax.swing.JMenuItem: void setText(java.lang.String)>("Cut");

        $r63 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu editMenu>;

        $r62 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem cutMenuItem>;

        virtualinvoke $r63.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r62);

        $r64 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem copyMenuItem>;

        virtualinvoke $r64.<javax.swing.JMenuItem: void setText(java.lang.String)>("Copy");

        $r66 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu editMenu>;

        $r65 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem copyMenuItem>;

        virtualinvoke $r66.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r65);

        $r67 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem pasteMenuItem>;

        virtualinvoke $r67.<javax.swing.JMenuItem: void setText(java.lang.String)>("Paste");

        $r69 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu editMenu>;

        $r68 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem pasteMenuItem>;

        virtualinvoke $r69.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r68);

        $r70 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem deleteMenuItem>;

        virtualinvoke $r70.<javax.swing.JMenuItem: void setText(java.lang.String)>("Delete");

        $r72 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu editMenu>;

        $r71 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem deleteMenuItem>;

        virtualinvoke $r72.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r71);

        $r73 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu helpMenu>;

        virtualinvoke $r73.<javax.swing.JMenu: void setText(java.lang.String)>("Help");

        $r74 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem contentsMenuItem>;

        virtualinvoke $r74.<javax.swing.JMenuItem: void setText(java.lang.String)>("Contents");

        $r76 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu helpMenu>;

        $r75 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem contentsMenuItem>;

        virtualinvoke $r76.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r75);

        $r77 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem aboutMenuItem>;

        virtualinvoke $r77.<javax.swing.JMenuItem: void setText(java.lang.String)>("About");

        $r79 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenu helpMenu>;

        $r78 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuItem aboutMenuItem>;

        virtualinvoke $r79.<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>($r78);

        $r80 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JMenuBar menuBar>;

        virtualinvoke r0.<org.apache.pdfbox.PDFDebugger: void setJMenuBar(javax.swing.JMenuBar)>($r80);

        $r81 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r82 = virtualinvoke $r81.<java.awt.Toolkit: java.awt.Dimension getScreenSize()>();

        $i0 = $r82.<java.awt.Dimension: int width>;

        $i1 = $i0 - 700;

        $i5 = $i1 / 2;

        $i2 = $r82.<java.awt.Dimension: int height>;

        $i3 = $i2 - 600;

        $i4 = $i3 / 2;

        virtualinvoke r0.<org.apache.pdfbox.PDFDebugger: void setBounds(int,int,int,int)>($i5, $i4, 700, 600);

        return;
    }

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent)
    {
        java.lang.String[] $r4;
        java.awt.event.ActionEvent r10;
        org.apache.pdfbox.PDFDebugger r1;
        java.io.File $r2, $r5, $r7, $r8;
        java.lang.Exception $r9;
        org.apache.pdfbox.util.ExtensionFileFilter $r3;
        int $i0;
        javax.swing.JFileChooser $r0;
        java.lang.String $r6;

        r1 := @this: org.apache.pdfbox.PDFDebugger;

        r10 := @parameter0: java.awt.event.ActionEvent;

        $r0 = new javax.swing.JFileChooser;

        specialinvoke $r0.<javax.swing.JFileChooser: void <init>()>();

        $r2 = r1.<org.apache.pdfbox.PDFDebugger: java.io.File currentDir>;

        virtualinvoke $r0.<javax.swing.JFileChooser: void setCurrentDirectory(java.io.File)>($r2);

        $r3 = new org.apache.pdfbox.util.ExtensionFileFilter;

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "pdf";

        $r4[1] = "PDF";

        specialinvoke $r3.<org.apache.pdfbox.util.ExtensionFileFilter: void <init>(java.lang.String[],java.lang.String)>($r4, "PDF Files");

        virtualinvoke $r0.<javax.swing.JFileChooser: void setFileFilter(javax.swing.filechooser.FileFilter)>($r3);

        $i0 = virtualinvoke $r0.<javax.swing.JFileChooser: int showOpenDialog(java.awt.Component)>(r1);

        if $i0 != 0 goto label4;

        $r5 = virtualinvoke $r0.<javax.swing.JFileChooser: java.io.File getSelectedFile()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getPath()>();

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        r1.<org.apache.pdfbox.PDFDebugger: java.io.File currentDir> = $r8;

     label1:
        specialinvoke r1.<org.apache.pdfbox.PDFDebugger: void readPDFFile(java.lang.String,java.lang.String)>($r6, "");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent)
    {
        javax.swing.tree.TreePath $r2;
        javax.swing.JTree $r1;
        org.apache.pdfbox.PDFDebugger r0;
        java.lang.Exception $r7;
        javax.swing.event.TreeSelectionEvent r8;
        javax.swing.JTextPane $r5, $r6;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.pdfbox.PDFDebugger;

        r8 := @parameter0: javax.swing.event.TreeSelectionEvent;

        $r1 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTree jTree1>;

        $r2 = virtualinvoke $r1.<javax.swing.JTree: javax.swing.tree.TreePath getSelectionPath()>();

        if $r2 == null goto label5;

     label1:
        $r3 = virtualinvoke $r2.<javax.swing.tree.TreePath: java.lang.Object getLastPathComponent()>();

        $r4 = specialinvoke r0.<org.apache.pdfbox.PDFDebugger: java.lang.String convertToString(java.lang.Object)>($r3);

        if $r4 == null goto label2;

        $r6 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTextPane jTextPane1>;

        virtualinvoke $r6.<javax.swing.JTextPane: void setText(java.lang.String)>($r4);

        goto label3;

     label2:
        $r5 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTextPane jTextPane1>;

        virtualinvoke $r5.<javax.swing.JTextPane: void setText(java.lang.String)>("");

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    private java.lang.String convertToString(java.lang.Object)
    {
        byte[] r8;
        org.apache.pdfbox.pdfviewer.MapEntry $r4;
        org.apache.pdfbox.cos.COSFloat $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.pdfbox.cos.COSBoolean $r29;
        org.apache.pdfbox.PDFDebugger r1;
        float $f0;
        java.lang.StringBuilder $r10, $r13, $r15, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r34, $r35, $r36, $r37, $r38;
        java.io.ByteArrayOutputStream $r39;
        org.apache.pdfbox.pdfviewer.ArrayEntry $r2;
        org.apache.pdfbox.cos.COSString $r11;
        org.apache.pdfbox.cos.COSInteger $r21;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r12, $r17, r32;
        org.apache.pdfbox.cos.COSStream r33;
        org.apache.pdfbox.cos.COSName $r16;
        java.io.IOException $r31;
        java.lang.Object r0, $r3, $r5;
        java.io.InputStream $r6;

        r1 := @this: org.apache.pdfbox.PDFDebugger;

        r0 := @parameter0: java.lang.Object;

        r32 = null;

        $z0 = r0 instanceof org.apache.pdfbox.cos.COSBoolean;

        if $z0 == 0 goto label01;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r29 = (org.apache.pdfbox.cos.COSBoolean) r0;

        $z9 = virtualinvoke $r29.<org.apache.pdfbox.cos.COSBoolean: boolean getValue()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label14;

     label01:
        $z1 = r0 instanceof org.apache.pdfbox.cos.COSFloat;

        if $z1 == 0 goto label02;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r25 = (org.apache.pdfbox.cos.COSFloat) r0;

        $f0 = virtualinvoke $r25.<org.apache.pdfbox.cos.COSFloat: float floatValue()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        r32 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label14;

     label02:
        $z2 = r0 instanceof org.apache.pdfbox.cos.COSNull;

        if $z2 == 0 goto label03;

        r32 = "null";

        goto label14;

     label03:
        $z3 = r0 instanceof org.apache.pdfbox.cos.COSInteger;

        if $z3 == 0 goto label04;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r21 = (org.apache.pdfbox.cos.COSInteger) r0;

        $i2 = virtualinvoke $r21.<org.apache.pdfbox.cos.COSInteger: int intValue()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r32 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label14;

     label04:
        $z4 = r0 instanceof org.apache.pdfbox.cos.COSName;

        if $z4 == 0 goto label05;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r16 = (org.apache.pdfbox.cos.COSName) r0;

        $r17 = virtualinvoke $r16.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r32 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label14;

     label05:
        $z5 = r0 instanceof org.apache.pdfbox.cos.COSString;

        if $z5 == 0 goto label06;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r11 = (org.apache.pdfbox.cos.COSString) r0;

        $r12 = virtualinvoke $r11.<org.apache.pdfbox.cos.COSString: java.lang.String getString()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r32 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label14;

     label06:
        $z6 = r0 instanceof org.apache.pdfbox.cos.COSStream;

        if $z6 == 0 goto label12;

     label07:
        r33 = (org.apache.pdfbox.cos.COSStream) r0;

        $r6 = virtualinvoke r33.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getUnfilteredStream()>();

        $r39 = new java.io.ByteArrayOutputStream;

        specialinvoke $r39.<java.io.ByteArrayOutputStream: void <init>()>();

        r8 = newarray (byte)[1024];

     label08:
        $i0 = lengthof r8;

        $i1 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>(r8, 0, $i0);

        $i4 = (int) -1;

        if $i1 == $i4 goto label09;

        virtualinvoke $r39.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r8, 0, $i1);

        goto label08;

     label09:
        r32 = virtualinvoke $r39.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

     label10:
        goto label14;

     label11:
        $r31 := @caughtexception;

        virtualinvoke $r31.<java.io.IOException: void printStackTrace()>();

        goto label14;

     label12:
        $z7 = r0 instanceof org.apache.pdfbox.pdfviewer.MapEntry;

        if $z7 == 0 goto label13;

        $r4 = (org.apache.pdfbox.pdfviewer.MapEntry) r0;

        $r5 = virtualinvoke $r4.<org.apache.pdfbox.pdfviewer.MapEntry: java.lang.Object getValue()>();

        r32 = specialinvoke r1.<org.apache.pdfbox.PDFDebugger: java.lang.String convertToString(java.lang.Object)>($r5);

        goto label14;

     label13:
        $z8 = r0 instanceof org.apache.pdfbox.pdfviewer.ArrayEntry;

        if $z8 == 0 goto label14;

        $r2 = (org.apache.pdfbox.pdfviewer.ArrayEntry) r0;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdfviewer.ArrayEntry: java.lang.Object getValue()>();

        r32 = specialinvoke r1.<org.apache.pdfbox.PDFDebugger: java.lang.String convertToString(java.lang.Object)>($r3);

     label14:
        return r32;

        catch java.io.IOException from label07 to label10 with label11;
    }

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent)
    {
        org.apache.pdfbox.pdmodel.PDDocument $r1, $r2;
        java.io.IOException $r3;
        java.awt.event.ActionEvent r4;
        org.apache.pdfbox.PDFDebugger r0;

        r0 := @this: org.apache.pdfbox.PDFDebugger;

        r4 := @parameter0: java.awt.event.ActionEvent;

        $r1 = r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document>;

        if $r1 == null goto label4;

     label1:
        $r2 = r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document>;

        virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.io.IOException: void printStackTrace()>();

     label4:
        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void exitForm(java.awt.event.WindowEvent)
    {
        org.apache.pdfbox.pdmodel.PDDocument $r1, $r2;
        java.io.IOException $r3;
        org.apache.pdfbox.PDFDebugger r0;
        java.awt.event.WindowEvent r4;

        r0 := @this: org.apache.pdfbox.PDFDebugger;

        r4 := @parameter0: java.awt.event.WindowEvent;

        $r1 = r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document>;

        if $r1 == null goto label4;

     label1:
        $r2 = r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document>;

        virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.io.IOException: void printStackTrace()>();

     label4:
        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r2;
        org.apache.pdfbox.PDFDebugger $r1;
        int $i0, $i1, i2;
        java.lang.String $r0, $r3, r4, r5, $r6;
        boolean $z0, $z1;

        r2 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <javax.swing.UIManager: java.lang.String getSystemLookAndFeelClassName()>();

        staticinvoke <javax.swing.UIManager: void setLookAndFeel(java.lang.String)>($r0);

        $r1 = new org.apache.pdfbox.PDFDebugger;

        specialinvoke $r1.<org.apache.pdfbox.PDFDebugger: void <init>()>();

        r4 = null;

        r5 = "";

        i2 = 0;

     label1:
        $i0 = lengthof r2;

        if i2 >= $i0 goto label6;

        $r3 = r2[i2];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-password");

        if $z0 == 0 goto label3;

        i2 = i2 + 1;

        $i1 = lengthof r2;

        if i2 < $i1 goto label2;

        staticinvoke <org.apache.pdfbox.PDFDebugger: void usage()>();

     label2:
        r5 = r2[i2];

     label3:
        $r6 = r2[i2];

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("-nonSeq");

        if $z1 == 0 goto label4;

        <org.apache.pdfbox.PDFDebugger: boolean useNonSeqParser> = 1;

        goto label5;

     label4:
        r4 = r2[i2];

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        if r4 == null goto label7;

        specialinvoke $r1.<org.apache.pdfbox.PDFDebugger: void readPDFFile(java.lang.String,java.lang.String)>(r4, r5);

     label7:
        virtualinvoke $r1.<org.apache.pdfbox.PDFDebugger: void setVisible(boolean)>(1);

        return;
    }

    private void readPDFFile(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.apache.pdfbox.pdmodel.PDDocument $r1, $r6, $r13;
        javax.swing.JTree $r7;
        org.apache.pdfbox.PDFDebugger r0;
        java.io.File $r2;
        org.apache.pdfbox.pdfviewer.PDFTreeModel $r5;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String r3, r4, $r10, $r12;

        r0 := @this: org.apache.pdfbox.PDFDebugger;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document>;

        if $r1 == null goto label1;

        $r13 = r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document>;

        virtualinvoke $r13.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label1:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r3);

        specialinvoke r0.<org.apache.pdfbox.PDFDebugger: void parseDocument(java.io.File,java.lang.String)>($r2, r4);

        $r5 = new org.apache.pdfbox.pdfviewer.PDFTreeModel;

        $r6 = r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document>;

        specialinvoke $r5.<org.apache.pdfbox.pdfviewer.PDFTreeModel: void <init>(org.apache.pdfbox.pdmodel.PDDocument)>($r6);

        $r7 = r0.<org.apache.pdfbox.PDFDebugger: javax.swing.JTree jTree1>;

        virtualinvoke $r7.<javax.swing.JTree: void setModel(javax.swing.tree.TreeModel)>($r5);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PDFBox - ");

        $r10 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.pdfbox.PDFDebugger: void setTitle(java.lang.String)>($r12);

        return;
    }

    private void parseDocument(java.io.File, java.lang.String) throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.PDDocument $r2, $r3, $r5, $r6;
        org.apache.pdfbox.exceptions.CryptographyException $r7;
        org.apache.pdfbox.PDFDebugger r0;
        java.io.File r1;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.PDFDebugger;

        r1 := @parameter0: java.io.File;

        r4 := @parameter1: java.lang.String;

        $z0 = <org.apache.pdfbox.PDFDebugger: boolean useNonSeqParser>;

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument loadNonSeq(java.io.File,org.apache.pdfbox.io.RandomAccess,java.lang.String)>(r1, null, r4);

        r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document> = $r6;

        goto label5;

     label1:
        $r2 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File)>(r1);

        r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document> = $r2;

        $r3 = r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document>;

        $z1 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>();

        if $z1 == 0 goto label5;

     label2:
        $r5 = r0.<org.apache.pdfbox.PDFDebugger: org.apache.pdfbox.pdmodel.PDDocument document>;

        virtualinvoke $r5.<org.apache.pdfbox.pdmodel.PDDocument: void decrypt(java.lang.String)>(r4);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        virtualinvoke $r7.<org.apache.pdfbox.exceptions.CryptographyException: void printStackTrace()>();

     label5:
        return;

        catch org.apache.pdfbox.exceptions.CryptographyException from label2 to label3 with label4;
    }

    private static void usage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("usage: java -jar pdfbox-app-x.y.z.jar PDFDebugger [OPTIONS] <input-file>\n  -password <password>      Password to decrypt the document\n  -nonSeq                   Enables the new non-sequential parser\n  <input-file>              The PDF document to be loaded\n");

        return;
    }

    static void access$000(org.apache.pdfbox.PDFDebugger, java.awt.event.WindowEvent)
    {
        org.apache.pdfbox.PDFDebugger r0;
        java.awt.event.WindowEvent r1;

        r0 := @parameter0: org.apache.pdfbox.PDFDebugger;

        r1 := @parameter1: java.awt.event.WindowEvent;

        specialinvoke r0.<org.apache.pdfbox.PDFDebugger: void exitForm(java.awt.event.WindowEvent)>(r1);

        return;
    }

    static void access$100(org.apache.pdfbox.PDFDebugger, javax.swing.event.TreeSelectionEvent)
    {
        org.apache.pdfbox.PDFDebugger r0;
        javax.swing.event.TreeSelectionEvent r1;

        r0 := @parameter0: org.apache.pdfbox.PDFDebugger;

        r1 := @parameter1: javax.swing.event.TreeSelectionEvent;

        specialinvoke r0.<org.apache.pdfbox.PDFDebugger: void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent)>(r1);

        return;
    }

    static void access$200(org.apache.pdfbox.PDFDebugger, java.awt.event.ActionEvent)
    {
        java.awt.event.ActionEvent r1;
        org.apache.pdfbox.PDFDebugger r0;

        r0 := @parameter0: org.apache.pdfbox.PDFDebugger;

        r1 := @parameter1: java.awt.event.ActionEvent;

        specialinvoke r0.<org.apache.pdfbox.PDFDebugger: void openMenuItemActionPerformed(java.awt.event.ActionEvent)>(r1);

        return;
    }

    static void access$300(org.apache.pdfbox.PDFDebugger, java.awt.event.ActionEvent)
    {
        java.awt.event.ActionEvent r1;
        org.apache.pdfbox.PDFDebugger r0;

        r0 := @parameter0: org.apache.pdfbox.PDFDebugger;

        r1 := @parameter1: java.awt.event.ActionEvent;

        specialinvoke r0.<org.apache.pdfbox.PDFDebugger: void exitMenuItemActionPerformed(java.awt.event.ActionEvent)>(r1);

        return;
    }

    static void <clinit>()
    {
        <org.apache.pdfbox.PDFDebugger: java.lang.String PASSWORD> = "-password";

        <org.apache.pdfbox.PDFDebugger: java.lang.String NONSEQ> = "-nonSeq";

        <org.apache.pdfbox.PDFDebugger: boolean useNonSeqParser> = 0;

        return;
    }
}
