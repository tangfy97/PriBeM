final class org.mozilla.javascript.IRFactory extends java.lang.Object
{
    private org.mozilla.javascript.Parser parser;
    private static final int LOOP_DO_WHILE;
    private static final int LOOP_WHILE;
    private static final int LOOP_FOR;
    private static final int ALWAYS_TRUE_BOOLEAN;
    private static final int ALWAYS_FALSE_BOOLEAN;

    void <init>(org.mozilla.javascript.Parser)
    {
        org.mozilla.javascript.IRFactory r0;
        org.mozilla.javascript.Parser r1;

        r0 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Parser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser> = r1;

        return;
    }

    org.mozilla.javascript.ScriptOrFnNode createScript()
    {
        org.mozilla.javascript.IRFactory r1;
        org.mozilla.javascript.ScriptOrFnNode $r0;

        r1 := @this: org.mozilla.javascript.IRFactory;

        $r0 = new org.mozilla.javascript.ScriptOrFnNode;

        specialinvoke $r0.<org.mozilla.javascript.ScriptOrFnNode: void <init>(int)>(132);

        return $r0;
    }

    void initScript(org.mozilla.javascript.ScriptOrFnNode, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r1;
        org.mozilla.javascript.IRFactory r3;
        org.mozilla.javascript.ScriptOrFnNode r2;

        r3 := @this: org.mozilla.javascript.IRFactory;

        r2 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        r0 := @parameter1: org.mozilla.javascript.Node;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        if $r1 == null goto label1;

        virtualinvoke r2.<org.mozilla.javascript.ScriptOrFnNode: void addChildrenToBack(org.mozilla.javascript.Node)>($r1);

     label1:
        return;
    }

    org.mozilla.javascript.Node createLeaf(int)
    {
        int i0;
        org.mozilla.javascript.IRFactory r1;
        org.mozilla.javascript.Node $r0;

        r1 := @this: org.mozilla.javascript.IRFactory;

        i0 := @parameter0: int;

        $r0 = new org.mozilla.javascript.Node;

        specialinvoke $r0.<org.mozilla.javascript.Node: void <init>(int)>(i0);

        return $r0;
    }

    org.mozilla.javascript.Node createLeaf(int, int)
    {
        org.mozilla.javascript.Node $r0;
        int i0, i1;
        org.mozilla.javascript.IRFactory r1;

        r1 := @this: org.mozilla.javascript.IRFactory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new org.mozilla.javascript.Node;

        specialinvoke $r0.<org.mozilla.javascript.Node: void <init>(int,int)>(i0, i1);

        return $r0;
    }

    org.mozilla.javascript.Node createSwitch(org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r1, $r2;
        int i0;
        org.mozilla.javascript.IRFactory r3;
        org.mozilla.javascript.Node$Jump $r0;

        r3 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        i0 := @parameter1: int;

        $r0 = new org.mozilla.javascript.Node$Jump;

        specialinvoke $r0.<org.mozilla.javascript.Node$Jump: void <init>(int,org.mozilla.javascript.Node,int)>(110, r1, i0);

        $r2 = new org.mozilla.javascript.Node;

        specialinvoke $r2.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(125, $r0);

        return $r2;
    }

    void addSwitchCase(org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        java.lang.RuntimeException $r7, $r8;
        org.mozilla.javascript.Node r0, $r1, $r3, r4, r5;
        int $i0, $i1;
        org.mozilla.javascript.IRFactory r9;
        org.mozilla.javascript.Node$Jump r2, $r6;

        r9 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r4 := @parameter1: org.mozilla.javascript.Node;

        r5 := @parameter2: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i0 == 125 goto label1;

        $r8 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r8;

     label1:
        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        r2 = (org.mozilla.javascript.Node$Jump) $r1;

        $i1 = virtualinvoke r2.<org.mozilla.javascript.Node$Jump: int getType()>();

        if $i1 == 110 goto label2;

        $r7 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r7;

     label2:
        $r3 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        if r4 == null goto label3;

        $r6 = new org.mozilla.javascript.Node$Jump;

        specialinvoke $r6.<org.mozilla.javascript.Node$Jump: void <init>(int,org.mozilla.javascript.Node)>(111, r4);

        $r6.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target> = $r3;

        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r6);

        goto label4;

     label3:
        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void setDefault(org.mozilla.javascript.Node)>($r3);

     label4:
        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r3);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>(r5);

        return;
    }

    void closeSwitch(org.mozilla.javascript.Node)
    {
        java.lang.RuntimeException $r7, $r8;
        org.mozilla.javascript.Node r0, $r1, $r3, $r4, r9;
        int $i0, $i1;
        org.mozilla.javascript.IRFactory r5;
        org.mozilla.javascript.Node$Jump r2, $r6;

        r5 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i0 == 125 goto label1;

        $r8 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r8;

     label1:
        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        r2 = (org.mozilla.javascript.Node$Jump) $r1;

        $i1 = virtualinvoke r2.<org.mozilla.javascript.Node$Jump: int getType()>();

        if $i1 == 110 goto label2;

        $r7 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r7;

     label2:
        $r3 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        r2.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target> = $r3;

        $r4 = virtualinvoke r2.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node getDefault()>();

        r9 = $r4;

        if $r4 != null goto label3;

        r9 = $r3;

     label3:
        $r6 = specialinvoke r5.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node$Jump makeJump(int,org.mozilla.javascript.Node)>(5, r9);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildAfter(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r6, r2);

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r3);

        return;
    }

    org.mozilla.javascript.Node createVariables(int)
    {
        int i0;
        org.mozilla.javascript.IRFactory r1;
        org.mozilla.javascript.Node $r0;

        r1 := @this: org.mozilla.javascript.IRFactory;

        i0 := @parameter0: int;

        $r0 = new org.mozilla.javascript.Node;

        specialinvoke $r0.<org.mozilla.javascript.Node: void <init>(int,int)>(118, i0);

        return $r0;
    }

    org.mozilla.javascript.Node createExprStatement(org.mozilla.javascript.Node, int)
    {
        short s1;
        org.mozilla.javascript.Node $r2, r3;
        org.mozilla.javascript.IRFactory r0;
        int i0;
        org.mozilla.javascript.Parser $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.IRFactory;

        r3 := @parameter0: org.mozilla.javascript.Node;

        i0 := @parameter1: int;

        $r1 = r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        $z0 = virtualinvoke $r1.<org.mozilla.javascript.Parser: boolean insideFunction()>();

        if $z0 == 0 goto label1;

        s1 = 129;

        goto label2;

     label1:
        s1 = 130;

     label2:
        $r2 = new org.mozilla.javascript.Node;

        specialinvoke $r2.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,int)>(s1, r3, i0);

        return $r2;
    }

    org.mozilla.javascript.Node createExprStatementNoReturn(org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node $r0, r1;
        int i0;
        org.mozilla.javascript.IRFactory r2;

        r2 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        i0 := @parameter1: int;

        $r0 = new org.mozilla.javascript.Node;

        specialinvoke $r0.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,int)>(129, r1, i0);

        return $r0;
    }

    org.mozilla.javascript.Node createDefaultNamespace(org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r1, $r2, $r3;
        org.mozilla.javascript.IRFactory r0;
        int i0;

        r0 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        i0 := @parameter1: int;

        specialinvoke r0.<org.mozilla.javascript.IRFactory: void setRequiresActivation()>();

        $r2 = virtualinvoke r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createUnary(int,org.mozilla.javascript.Node)>(70, r1);

        $r3 = virtualinvoke r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createExprStatement(org.mozilla.javascript.Node,int)>($r2, i0);

        return $r3;
    }

    org.mozilla.javascript.Node createName(java.lang.String)
    {
        org.mozilla.javascript.IRFactory r0;
        java.lang.String r1;
        org.mozilla.javascript.Node $r2;

        r0 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.mozilla.javascript.IRFactory: void checkActivationName(java.lang.String,int)>(r1, 38);

        $r2 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newString(int,java.lang.String)>(38, r1);

        return $r2;
    }

    org.mozilla.javascript.Node createString(java.lang.String)
    {
        org.mozilla.javascript.IRFactory r2;
        java.lang.String r0;
        org.mozilla.javascript.Node $r1;

        r2 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newString(java.lang.String)>(r0);

        return $r1;
    }

    org.mozilla.javascript.Node createNumber(double)
    {
        org.mozilla.javascript.IRFactory r1;
        org.mozilla.javascript.Node $r0;
        double d0;

        r1 := @this: org.mozilla.javascript.IRFactory;

        d0 := @parameter0: double;

        $r0 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newNumber(double)>(d0);

        return $r0;
    }

    org.mozilla.javascript.Node createCatch(java.lang.String, org.mozilla.javascript.Node, org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node $r0, $r3, r4, $r5, r6;
        org.mozilla.javascript.IRFactory r1;
        int i0;
        java.lang.String r2;

        r1 := @this: org.mozilla.javascript.IRFactory;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: org.mozilla.javascript.Node;

        r4 := @parameter2: org.mozilla.javascript.Node;

        i0 := @parameter3: int;

        if r6 != null goto label1;

        $r5 = new org.mozilla.javascript.Node;

        specialinvoke $r5.<org.mozilla.javascript.Node: void <init>(int)>(124);

        r6 = $r5;

     label1:
        $r0 = new org.mozilla.javascript.Node;

        $r3 = virtualinvoke r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createName(java.lang.String)>(r2);

        specialinvoke $r0.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,int)>(120, $r3, r6, r4, i0);

        return $r0;
    }

    org.mozilla.javascript.Node createThrow(org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node $r0, r1;
        int i0;
        org.mozilla.javascript.IRFactory r2;

        r2 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        i0 := @parameter1: int;

        $r0 = new org.mozilla.javascript.Node;

        specialinvoke $r0.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,int)>(49, r1, i0);

        return $r0;
    }

    org.mozilla.javascript.Node createReturn(org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r0, $r2;
        int i0;
        org.mozilla.javascript.IRFactory r1;

        r1 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r2 = new org.mozilla.javascript.Node;

        specialinvoke $r2.<org.mozilla.javascript.Node: void <init>(int,int)>(4, i0);

        goto label2;

     label1:
        $r2 = new org.mozilla.javascript.Node;

        specialinvoke $r2.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,int)>(4, r0, i0);

     label2:
        return $r2;
    }

    org.mozilla.javascript.Node createLabel(int)
    {
        int i0;
        org.mozilla.javascript.IRFactory r1;
        org.mozilla.javascript.Node$Jump $r0;

        r1 := @this: org.mozilla.javascript.IRFactory;

        i0 := @parameter0: int;

        $r0 = new org.mozilla.javascript.Node$Jump;

        specialinvoke $r0.<org.mozilla.javascript.Node$Jump: void <init>(int,int)>(126, i0);

        return $r0;
    }

    org.mozilla.javascript.Node getLabelLoop(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0;
        org.mozilla.javascript.IRFactory r3;
        org.mozilla.javascript.Node$Jump $r1, $r2;

        r3 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $r1 = (org.mozilla.javascript.Node$Jump) r0;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node$Jump getLoop()>();

        return $r2;
    }

    org.mozilla.javascript.Node createLabeledStatement(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r2, $r3, r4;
        org.mozilla.javascript.IRFactory r5;
        org.mozilla.javascript.Node$Jump r1;

        r5 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r4 := @parameter1: org.mozilla.javascript.Node;

        r1 = (org.mozilla.javascript.Node$Jump) r0;

        $r2 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        $r3 = new org.mozilla.javascript.Node;

        specialinvoke $r3.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(125, r1, r4, $r2);

        r1.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target> = $r2;

        return $r3;
    }

    org.mozilla.javascript.Node createBreak(org.mozilla.javascript.Node, int)
    {
        java.lang.RuntimeException $r2;
        org.mozilla.javascript.Node r1, $r3, $r4;
        int i0, $i1, $i2;
        org.mozilla.javascript.IRFactory r5;
        org.mozilla.javascript.Node$Jump $r0, r6;

        r5 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        i0 := @parameter1: int;

        $r0 = new org.mozilla.javascript.Node$Jump;

        specialinvoke $r0.<org.mozilla.javascript.Node$Jump: void <init>(int,int)>(116, i0);

        $i1 = virtualinvoke r1.<org.mozilla.javascript.Node: int getType()>();

        if $i1 == 128 goto label1;

        if $i1 != 126 goto label2;

     label1:
        r6 = (org.mozilla.javascript.Node$Jump) r1;

        goto label4;

     label2:
        if $i1 != 125 goto label3;

        $r3 = virtualinvoke r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $i2 = virtualinvoke $r3.<org.mozilla.javascript.Node: int getType()>();

        if $i2 != 110 goto label3;

        $r4 = virtualinvoke r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        r6 = (org.mozilla.javascript.Node$Jump) $r4;

        goto label4;

     label3:
        $r2 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r2;

     label4:
        virtualinvoke $r0.<org.mozilla.javascript.Node$Jump: void setJumpStatement(org.mozilla.javascript.Node$Jump)>(r6);

        return $r0;
    }

    org.mozilla.javascript.Node createContinue(org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r0;
        int $i0, i1;
        org.mozilla.javascript.IRFactory r3;
        org.mozilla.javascript.Node$Jump $r1, $r2;

        r3 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i0 == 128 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $r1 = new org.mozilla.javascript.Node$Jump;

        specialinvoke $r1.<org.mozilla.javascript.Node$Jump: void <init>(int,int)>(117, i1);

        $r2 = (org.mozilla.javascript.Node$Jump) r0;

        virtualinvoke $r1.<org.mozilla.javascript.Node$Jump: void setJumpStatement(org.mozilla.javascript.Node$Jump)>($r2);

        return $r1;
    }

    org.mozilla.javascript.Node createBlock(int)
    {
        int i0;
        org.mozilla.javascript.IRFactory r1;
        org.mozilla.javascript.Node $r0;

        r1 := @this: org.mozilla.javascript.IRFactory;

        i0 := @parameter0: int;

        $r0 = new org.mozilla.javascript.Node;

        specialinvoke $r0.<org.mozilla.javascript.Node: void <init>(int,int)>(125, i0);

        return $r0;
    }

    org.mozilla.javascript.FunctionNode createFunction(java.lang.String)
    {
        org.mozilla.javascript.FunctionNode $r0;
        org.mozilla.javascript.IRFactory r2;
        java.lang.String r1;

        r2 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.mozilla.javascript.FunctionNode;

        specialinvoke $r0.<org.mozilla.javascript.FunctionNode: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    org.mozilla.javascript.Node initFunction(org.mozilla.javascript.FunctionNode, int, org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r1, $r2, $r4, $r5, $r6, $r7, $r11, $r13;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r3, $r9, $r12;
        boolean $z0;
        org.mozilla.javascript.FunctionNode r0, $r8;
        org.mozilla.javascript.IRFactory r10;

        r10 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.FunctionNode;

        i2 := @parameter1: int;

        r1 := @parameter2: org.mozilla.javascript.Node;

        i0 := @parameter3: int;

        r0.<org.mozilla.javascript.FunctionNode: int itsFunctionType> = i0;

        virtualinvoke r0.<org.mozilla.javascript.FunctionNode: void addChildToBack(org.mozilla.javascript.Node)>(r1);

        $i1 = virtualinvoke r0.<org.mozilla.javascript.FunctionNode: int getFunctionCount()>();

        if $i1 == 0 goto label3;

        r0.<org.mozilla.javascript.FunctionNode: boolean itsNeedsActivation> = 1;

        i7 = 0;

     label1:
        if i7 == $i1 goto label3;

        $r8 = virtualinvoke r0.<org.mozilla.javascript.FunctionNode: org.mozilla.javascript.FunctionNode getFunctionNode(int)>(i7);

        $i5 = virtualinvoke $r8.<org.mozilla.javascript.FunctionNode: int getFunctionType()>();

        if $i5 != 3 goto label2;

        $r9 = virtualinvoke $r8.<org.mozilla.javascript.FunctionNode: java.lang.String getFunctionName()>();

        if $r9 == null goto label2;

        $i6 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i6 == 0 goto label2;

        virtualinvoke r0.<org.mozilla.javascript.FunctionNode: void removeParamOrVar(java.lang.String)>($r9);

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        if i0 != 2 goto label4;

        $r3 = virtualinvoke r0.<org.mozilla.javascript.FunctionNode: java.lang.String getFunctionName()>();

        if $r3 == null goto label4;

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i4 == 0 goto label4;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.FunctionNode: boolean hasParamOrVar(java.lang.String)>($r3);

        if $z0 != 0 goto label4;

        virtualinvoke r0.<org.mozilla.javascript.FunctionNode: void addVar(java.lang.String)>($r3);

        $r4 = new org.mozilla.javascript.Node;

        $r5 = new org.mozilla.javascript.Node;

        $r6 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newString(int,java.lang.String)>(48, $r3);

        $r7 = new org.mozilla.javascript.Node;

        specialinvoke $r7.<org.mozilla.javascript.Node: void <init>(int)>(61);

        specialinvoke $r5.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(8, $r6, $r7);

        specialinvoke $r4.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(129, $r5);

        virtualinvoke r1.<org.mozilla.javascript.Node: void addChildrenToFront(org.mozilla.javascript.Node)>($r4);

     label4:
        $r11 = virtualinvoke r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getLastChild()>();

        if $r11 == null goto label5;

        $i3 = virtualinvoke $r11.<org.mozilla.javascript.Node: int getType()>();

        if $i3 == 4 goto label6;

     label5:
        $r2 = new org.mozilla.javascript.Node;

        specialinvoke $r2.<org.mozilla.javascript.Node: void <init>(int)>(4);

        virtualinvoke r1.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r2);

     label6:
        $r12 = virtualinvoke r0.<org.mozilla.javascript.FunctionNode: java.lang.String getFunctionName()>();

        $r13 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newString(int,java.lang.String)>(105, $r12);

        virtualinvoke $r13.<org.mozilla.javascript.Node: void putIntProp(int,int)>(1, i2);

        return $r13;
    }

    void addChildToBack(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.IRFactory r2;
        org.mozilla.javascript.Node r0, r1;

        r2 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r1 := @parameter1: org.mozilla.javascript.Node;

        virtualinvoke r0.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>(r1);

        return;
    }

    org.mozilla.javascript.Node createLoopNode(org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r1;
        int i0;
        org.mozilla.javascript.IRFactory r3;
        org.mozilla.javascript.Node$Jump $r0, $r2;

        r3 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        i0 := @parameter1: int;

        $r0 = new org.mozilla.javascript.Node$Jump;

        specialinvoke $r0.<org.mozilla.javascript.Node$Jump: void <init>(int,int)>(128, i0);

        if r1 == null goto label1;

        $r2 = (org.mozilla.javascript.Node$Jump) r1;

        virtualinvoke $r2.<org.mozilla.javascript.Node$Jump: void setLoop(org.mozilla.javascript.Node$Jump)>($r0);

     label1:
        return $r0;
    }

    org.mozilla.javascript.Node createWhile(org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r1, r2, r3, $r5;
        org.mozilla.javascript.IRFactory r0;
        org.mozilla.javascript.Node$Jump $r4;

        r0 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        r3 := @parameter1: org.mozilla.javascript.Node;

        r2 := @parameter2: org.mozilla.javascript.Node;

        $r4 = (org.mozilla.javascript.Node$Jump) r1;

        $r5 = specialinvoke r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createLoop(org.mozilla.javascript.Node$Jump,int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r4, 1, r2, r3, null, null);

        return $r5;
    }

    org.mozilla.javascript.Node createDoWhile(org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r1, r2, r3, $r5;
        org.mozilla.javascript.IRFactory r0;
        org.mozilla.javascript.Node$Jump $r4;

        r0 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        r2 := @parameter1: org.mozilla.javascript.Node;

        r3 := @parameter2: org.mozilla.javascript.Node;

        $r4 = (org.mozilla.javascript.Node$Jump) r1;

        $r5 = specialinvoke r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createLoop(org.mozilla.javascript.Node$Jump,int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r4, 0, r2, r3, null, null);

        return $r5;
    }

    org.mozilla.javascript.Node createFor(org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r1, r2, r3, r4, r5, $r7;
        org.mozilla.javascript.IRFactory r0;
        org.mozilla.javascript.Node$Jump $r6;

        r0 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        r4 := @parameter1: org.mozilla.javascript.Node;

        r3 := @parameter2: org.mozilla.javascript.Node;

        r5 := @parameter3: org.mozilla.javascript.Node;

        r2 := @parameter4: org.mozilla.javascript.Node;

        $r6 = (org.mozilla.javascript.Node$Jump) r1;

        $r7 = specialinvoke r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createLoop(org.mozilla.javascript.Node$Jump,int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r6, 2, r2, r3, r4, r5);

        return $r7;
    }

    private org.mozilla.javascript.Node createLoop(org.mozilla.javascript.Node$Jump, int, org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node $r0, $r1, r3, $r4, $r7, $r8, $r9, r10, r11, r12, $r14, r15, $r16;
        int i0, $i1, $i2, $i3, $i4, $i5;
        org.mozilla.javascript.IRFactory r5;
        org.mozilla.javascript.Node$Jump r2, $r6, $r13;

        r5 := @this: org.mozilla.javascript.IRFactory;

        r2 := @parameter0: org.mozilla.javascript.Node$Jump;

        i0 := @parameter1: int;

        r3 := @parameter2: org.mozilla.javascript.Node;

        r10 := @parameter3: org.mozilla.javascript.Node;

        r11 := @parameter4: org.mozilla.javascript.Node;

        r12 := @parameter5: org.mozilla.javascript.Node;

        $r0 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        $r1 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        if i0 != 2 goto label1;

        $i4 = virtualinvoke r10.<org.mozilla.javascript.Node: int getType()>();

        if $i4 != 124 goto label1;

        $r9 = new org.mozilla.javascript.Node;

        specialinvoke $r9.<org.mozilla.javascript.Node: void <init>(int)>(44);

        r10 = $r9;

     label1:
        $r13 = new org.mozilla.javascript.Node$Jump;

        specialinvoke $r13.<org.mozilla.javascript.Node$Jump: void <init>(int,org.mozilla.javascript.Node)>(6, r10);

        $r13.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target> = $r0;

        $r14 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r0);

        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildrenToBack(org.mozilla.javascript.Node)>(r3);

        if i0 == 1 goto label2;

        if i0 != 2 goto label3;

     label2:
        $r4 = new org.mozilla.javascript.Node;

        $i1 = virtualinvoke r2.<org.mozilla.javascript.Node$Jump: int getLineno()>();

        specialinvoke $r4.<org.mozilla.javascript.Node: void <init>(int,int)>(124, $i1);

        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildrenToBack(org.mozilla.javascript.Node)>($r4);

     label3:
        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r1);

        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r13);

        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r14);

        r2.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target> = $r14;

        r15 = $r1;

        if i0 == 1 goto label4;

        if i0 != 2 goto label8;

     label4:
        $r6 = specialinvoke r5.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node$Jump makeJump(int,org.mozilla.javascript.Node)>(5, $r1);

        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildToFront(org.mozilla.javascript.Node)>($r6);

        if i0 != 2 goto label8;

        $i2 = virtualinvoke r11.<org.mozilla.javascript.Node: int getType()>();

        if $i2 == 124 goto label6;

        $i3 = virtualinvoke r11.<org.mozilla.javascript.Node: int getType()>();

        if $i3 == 118 goto label5;

        $r8 = new org.mozilla.javascript.Node;

        specialinvoke $r8.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(129, r11);

        r11 = $r8;

     label5:
        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildToFront(org.mozilla.javascript.Node)>(r11);

     label6:
        $r16 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildAfter(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r16, r3);

        $i5 = virtualinvoke r12.<org.mozilla.javascript.Node: int getType()>();

        if $i5 == 124 goto label7;

        $r7 = new org.mozilla.javascript.Node;

        specialinvoke $r7.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(129, r12);

        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void addChildAfter(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r7, $r16);

     label7:
        r15 = $r16;

     label8:
        virtualinvoke r2.<org.mozilla.javascript.Node$Jump: void setContinue(org.mozilla.javascript.Node)>(r15);

        return r2;
    }

    org.mozilla.javascript.Node createForIn(org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node, boolean)
    {
        byte $b1;
        org.mozilla.javascript.Node r0, $r2, $r3, $r4, r5, $r6, $r7, $r8, $r9, $r10, r11, $r12, $r14, $r15, r18, r19;
        int $i0;
        java.lang.String $r16;
        boolean z0;
        org.mozilla.javascript.IRFactory r1;
        org.mozilla.javascript.Parser $r13, $r17;

        r1 := @this: org.mozilla.javascript.IRFactory;

        r18 := @parameter0: org.mozilla.javascript.Node;

        r0 := @parameter1: org.mozilla.javascript.Node;

        r5 := @parameter2: org.mozilla.javascript.Node;

        r11 := @parameter3: org.mozilla.javascript.Node;

        z0 := @parameter4: boolean;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i0 != 118 goto label2;

        $r14 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getLastChild()>();

        $r15 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        if $r15 == $r14 goto label1;

        $r17 = r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        virtualinvoke $r17.<org.mozilla.javascript.Parser: java.lang.RuntimeException reportError(java.lang.String)>("msg.mult.index");

     label1:
        $r16 = virtualinvoke $r14.<org.mozilla.javascript.Node: java.lang.String getString()>();

        r19 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newString(int,java.lang.String)>(38, $r16);

        goto label3;

     label2:
        $r2 = specialinvoke r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node makeReference(org.mozilla.javascript.Node)>(r0);

        r19 = $r2;

        if $r2 != null goto label3;

        $r13 = r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        virtualinvoke $r13.<org.mozilla.javascript.Parser: java.lang.RuntimeException reportError(java.lang.String)>("msg.bad.for.in.lhs");

        return r5;

     label3:
        $r3 = new org.mozilla.javascript.Node;

        specialinvoke $r3.<org.mozilla.javascript.Node: void <init>(int)>(137);

        if z0 == 0 goto label4;

        $b1 = 58;

        goto label5;

     label4:
        $b1 = 57;

     label5:
        $r4 = new org.mozilla.javascript.Node;

        specialinvoke $r4.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>($b1, r5);

        virtualinvoke $r4.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(3, $r3);

        $r6 = new org.mozilla.javascript.Node;

        specialinvoke $r6.<org.mozilla.javascript.Node: void <init>(int)>(59);

        virtualinvoke $r6.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(3, $r3);

        $r7 = new org.mozilla.javascript.Node;

        specialinvoke $r7.<org.mozilla.javascript.Node: void <init>(int)>(60);

        virtualinvoke $r7.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(3, $r3);

        $r8 = new org.mozilla.javascript.Node;

        specialinvoke $r8.<org.mozilla.javascript.Node: void <init>(int)>(125);

        $r9 = specialinvoke r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node simpleAssignment(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r19, $r7);

        $r10 = new org.mozilla.javascript.Node;

        specialinvoke $r10.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(129, $r9);

        virtualinvoke $r8.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r10);

        virtualinvoke $r8.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>(r11);

        $r12 = virtualinvoke r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createWhile(org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r18, $r6, $r8);

        virtualinvoke $r12.<org.mozilla.javascript.Node: void addChildToFront(org.mozilla.javascript.Node)>($r4);

        if $i0 != 118 goto label6;

        virtualinvoke $r12.<org.mozilla.javascript.Node: void addChildToFront(org.mozilla.javascript.Node)>(r0);

     label6:
        virtualinvoke $r3.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r12);

        return $r3;
    }

    org.mozilla.javascript.Node createTryCatchFinally(org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r0, r1, r2, $r3, $r5, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, r25, r26;
        boolean z0, $z1, $z2, $z4, z5, $z6, $z7;
        int i0, $i1, $i2, $i3, $i4, i5;
        org.mozilla.javascript.IRFactory r6;
        org.mozilla.javascript.Node$Jump $r4, $r7, $r9, $r12, $r20;

        r6 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        r2 := @parameter1: org.mozilla.javascript.Node;

        r0 := @parameter2: org.mozilla.javascript.Node;

        i0 := @parameter3: int;

        if r0 == null goto label02;

        $i3 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i3 != 125 goto label01;

        $z2 = virtualinvoke r0.<org.mozilla.javascript.Node: boolean hasChildren()>();

        if $z2 == 0 goto label02;

     label01:
        $z7 = 1;

        $z6 = 1;

        goto label03;

     label02:
        $z7 = 0;

        $z6 = 0;

     label03:
        z0 = $z6;

        $i4 = virtualinvoke r1.<org.mozilla.javascript.Node: int getType()>();

        if $i4 != 125 goto label04;

        $z1 = virtualinvoke r1.<org.mozilla.javascript.Node: boolean hasChildren()>();

        if $z1 != 0 goto label04;

        if $z7 != 0 goto label04;

        return r1;

     label04:
        $z4 = virtualinvoke r2.<org.mozilla.javascript.Node: boolean hasChildren()>();

        if z0 != 0 goto label05;

        if $z4 != 0 goto label05;

        return r1;

     label05:
        $r3 = new org.mozilla.javascript.Node;

        specialinvoke $r3.<org.mozilla.javascript.Node: void <init>(int)>(137);

        $r4 = new org.mozilla.javascript.Node$Jump;

        specialinvoke $r4.<org.mozilla.javascript.Node$Jump: void <init>(int,org.mozilla.javascript.Node,int)>(77, r1, i0);

        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void putProp(int,java.lang.Object)>(3, $r3);

        if $z4 == 0 goto label11;

        $r11 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        $r12 = specialinvoke r6.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node$Jump makeJump(int,org.mozilla.javascript.Node)>(5, $r11);

        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r12);

        $r13 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        $r4.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target> = $r13;

        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r13);

        $r14 = new org.mozilla.javascript.Node;

        specialinvoke $r14.<org.mozilla.javascript.Node: void <init>(int)>(137);

        r25 = virtualinvoke r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        z5 = 0;

        i5 = 0;

     label06:
        if r25 == null goto label09;

        $i1 = virtualinvoke r25.<org.mozilla.javascript.Node: int getLineno()>();

        $r16 = virtualinvoke r25.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r17 = virtualinvoke $r16.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $r18 = virtualinvoke $r17.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        virtualinvoke r25.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r16);

        virtualinvoke r25.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r17);

        virtualinvoke r25.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r18);

        $r19 = new org.mozilla.javascript.Node;

        specialinvoke $r19.<org.mozilla.javascript.Node: void <init>(int)>(3);

        virtualinvoke $r18.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r19);

        $r20 = specialinvoke r6.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node$Jump makeJump(int,org.mozilla.javascript.Node)>(5, $r11);

        virtualinvoke $r18.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r20);

        $i2 = virtualinvoke $r17.<org.mozilla.javascript.Node: int getType()>();

        if $i2 != 124 goto label07;

        r26 = $r18;

        z5 = 1;

        goto label08;

     label07:
        r26 = virtualinvoke r6.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createIf(org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,int)>($r17, $r18, null, $i1);

     label08:
        $r21 = new org.mozilla.javascript.Node;

        $r22 = virtualinvoke r6.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createUseLocal(org.mozilla.javascript.Node)>($r3);

        specialinvoke $r21.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(56, $r16, $r22);

        virtualinvoke $r21.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(3, $r14);

        virtualinvoke $r21.<org.mozilla.javascript.Node: void putIntProp(int,int)>(14, i5);

        virtualinvoke $r14.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r21);

        $r23 = virtualinvoke r6.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createUseLocal(org.mozilla.javascript.Node)>($r14);

        $r24 = virtualinvoke r6.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createWith(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int)>($r23, r26, $i1);

        virtualinvoke $r14.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r24);

        r25 = virtualinvoke r25.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        i5 = i5 + 1;

        goto label06;

     label09:
        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r14);

        if z5 != 0 goto label10;

        $r15 = new org.mozilla.javascript.Node;

        specialinvoke $r15.<org.mozilla.javascript.Node: void <init>(int)>(50);

        virtualinvoke $r15.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(3, $r3);

        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r15);

     label10:
        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r11);

     label11:
        if z0 == 0 goto label12;

        $r5 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void setFinally(org.mozilla.javascript.Node)>($r5);

        $r7 = specialinvoke r6.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node$Jump makeJump(int,org.mozilla.javascript.Node)>(131, $r5);

        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r7);

        $r8 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        $r9 = specialinvoke r6.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node$Jump makeJump(int,org.mozilla.javascript.Node)>(5, $r8);

        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r9);

        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r5);

        $r10 = new org.mozilla.javascript.Node;

        specialinvoke $r10.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(121, r0);

        virtualinvoke $r10.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(3, $r3);

        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r10);

        virtualinvoke $r4.<org.mozilla.javascript.Node$Jump: void addChildToBack(org.mozilla.javascript.Node)>($r8);

     label12:
        virtualinvoke $r3.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r4);

        return $r3;
    }

    org.mozilla.javascript.Node createWith(org.mozilla.javascript.Node, org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node $r1, $r2, r3, $r4, r5, $r6;
        org.mozilla.javascript.IRFactory r0;
        int i0;

        r0 := @this: org.mozilla.javascript.IRFactory;

        r3 := @parameter0: org.mozilla.javascript.Node;

        r5 := @parameter1: org.mozilla.javascript.Node;

        i0 := @parameter2: int;

        specialinvoke r0.<org.mozilla.javascript.IRFactory: void setRequiresActivation()>();

        $r1 = new org.mozilla.javascript.Node;

        specialinvoke $r1.<org.mozilla.javascript.Node: void <init>(int,int)>(125, i0);

        $r2 = new org.mozilla.javascript.Node;

        specialinvoke $r2.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(2, r3);

        virtualinvoke $r1.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r2);

        $r4 = new org.mozilla.javascript.Node;

        specialinvoke $r4.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,int)>(119, r5, i0);

        virtualinvoke $r1.<org.mozilla.javascript.Node: void addChildrenToBack(org.mozilla.javascript.Node)>($r4);

        $r6 = new org.mozilla.javascript.Node;

        specialinvoke $r6.<org.mozilla.javascript.Node: void <init>(int)>(3);

        virtualinvoke $r1.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r6);

        return $r1;
    }

    public org.mozilla.javascript.Node createDotQuery(org.mozilla.javascript.Node, org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node $r1, r2, r3;
        org.mozilla.javascript.IRFactory r0;
        int i0;

        r0 := @this: org.mozilla.javascript.IRFactory;

        r2 := @parameter0: org.mozilla.javascript.Node;

        r3 := @parameter1: org.mozilla.javascript.Node;

        i0 := @parameter2: int;

        specialinvoke r0.<org.mozilla.javascript.IRFactory: void setRequiresActivation()>();

        $r1 = new org.mozilla.javascript.Node;

        specialinvoke $r1.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,int)>(142, r2, r3, i0);

        return $r1;
    }

    org.mozilla.javascript.Node createArrayLiteral(org.mozilla.javascript.ObjArray, int)
    {
        int[] r5;
        org.mozilla.javascript.Node $r1, r3;
        org.mozilla.javascript.ObjArray r0;
        int $i0, i1, i2, i3;
        org.mozilla.javascript.IRFactory r4;
        java.lang.Object $r2;

        r4 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.ObjArray;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.ObjArray: int size()>();

        r5 = null;

        if i1 == 0 goto label1;

        r5 = newarray (int)[i1];

     label1:
        $r1 = new org.mozilla.javascript.Node;

        specialinvoke $r1.<org.mozilla.javascript.Node: void <init>(int)>(63);

        i2 = 0;

        i3 = 0;

     label2:
        if i2 == $i0 goto label5;

        $r2 = virtualinvoke r0.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i2);

        r3 = (org.mozilla.javascript.Node) $r2;

        if r3 == null goto label3;

        virtualinvoke $r1.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>(r3);

        goto label4;

     label3:
        r5[i3] = i2;

        i3 = i3 + 1;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        if i1 == 0 goto label6;

        virtualinvoke $r1.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(11, r5);

     label6:
        return $r1;
    }

    org.mozilla.javascript.Node createObjectLiteral(org.mozilla.javascript.ObjArray)
    {
        java.lang.Object[] r6;
        org.mozilla.javascript.Node $r1, r4;
        org.mozilla.javascript.ObjArray r0;
        int $i0, i1, $i2, $i3, $i4, i5;
        org.mozilla.javascript.IRFactory r5;
        java.lang.Object $r2, $r3;

        r5 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.ObjArray;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.ObjArray: int size()>();

        i1 = $i0 / 2;

        $r1 = new org.mozilla.javascript.Node;

        specialinvoke $r1.<org.mozilla.javascript.Node: void <init>(int)>(64);

        if i1 != 0 goto label1;

        r6 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        goto label3;

     label1:
        r6 = newarray (java.lang.Object)[i1];

        i5 = 0;

     label2:
        if i5 == i1 goto label3;

        $i2 = 2 * i5;

        $r2 = virtualinvoke r0.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>($i2);

        r6[i5] = $r2;

        $i3 = 2 * i5;

        $i4 = $i3 + 1;

        $r3 = virtualinvoke r0.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>($i4);

        r4 = (org.mozilla.javascript.Node) $r3;

        virtualinvoke $r1.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>(r4);

        i5 = i5 + 1;

        goto label2;

     label3:
        virtualinvoke $r1.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(12, r6);

        return $r1;
    }

    org.mozilla.javascript.Node createRegExp(int)
    {
        int i0;
        org.mozilla.javascript.IRFactory r1;
        org.mozilla.javascript.Node $r0;

        r1 := @this: org.mozilla.javascript.IRFactory;

        i0 := @parameter0: int;

        $r0 = new org.mozilla.javascript.Node;

        specialinvoke $r0.<org.mozilla.javascript.Node: void <init>(int)>(47);

        virtualinvoke $r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(4, i0);

        return $r0;
    }

    org.mozilla.javascript.Node createIf(org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r0, $r2, r4, r5, $r6, $r10, $r11;
        int $i0, i1, $i3;
        org.mozilla.javascript.IRFactory r7;
        org.mozilla.javascript.Node$Jump $r8, $r12;

        r7 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r4 := @parameter1: org.mozilla.javascript.Node;

        r5 := @parameter2: org.mozilla.javascript.Node;

        i1 := @parameter3: int;

        $i0 = staticinvoke <org.mozilla.javascript.IRFactory: int isAlwaysDefinedBoolean(org.mozilla.javascript.Node)>(r0);

        if $i0 != 1 goto label1;

        return r4;

     label1:
        $i3 = (int) -1;

        if $i0 != $i3 goto label3;

        if r5 == null goto label2;

        return r5;

     label2:
        $r10 = new org.mozilla.javascript.Node;

        specialinvoke $r10.<org.mozilla.javascript.Node: void <init>(int,int)>(125, i1);

        return $r10;

     label3:
        $r11 = new org.mozilla.javascript.Node;

        specialinvoke $r11.<org.mozilla.javascript.Node: void <init>(int,int)>(125, i1);

        $r2 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        $r12 = new org.mozilla.javascript.Node$Jump;

        specialinvoke $r12.<org.mozilla.javascript.Node$Jump: void <init>(int,org.mozilla.javascript.Node)>(7, r0);

        $r12.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target> = $r2;

        virtualinvoke $r11.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r12);

        virtualinvoke $r11.<org.mozilla.javascript.Node: void addChildrenToBack(org.mozilla.javascript.Node)>(r4);

        if r5 == null goto label4;

        $r6 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newTarget()>();

        $r8 = specialinvoke r7.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node$Jump makeJump(int,org.mozilla.javascript.Node)>(5, $r6);

        virtualinvoke $r11.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r8);

        virtualinvoke $r11.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r2);

        virtualinvoke $r11.<org.mozilla.javascript.Node: void addChildrenToBack(org.mozilla.javascript.Node)>(r5);

        virtualinvoke $r11.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r6);

        goto label5;

     label4:
        virtualinvoke $r11.<org.mozilla.javascript.Node: void addChildToBack(org.mozilla.javascript.Node)>($r2);

     label5:
        return $r11;
    }

    org.mozilla.javascript.Node createCondExpr(org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, r2, r3, $r5;
        int $i0, $i2;
        org.mozilla.javascript.IRFactory r4;

        r4 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r2 := @parameter1: org.mozilla.javascript.Node;

        r3 := @parameter2: org.mozilla.javascript.Node;

        $i0 = staticinvoke <org.mozilla.javascript.IRFactory: int isAlwaysDefinedBoolean(org.mozilla.javascript.Node)>(r0);

        if $i0 != 1 goto label1;

        return r2;

     label1:
        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        return r3;

     label2:
        $r5 = new org.mozilla.javascript.Node;

        specialinvoke $r5.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(98, r0, r2, r3);

        return $r5;
    }

    org.mozilla.javascript.Node createUnary(int, org.mozilla.javascript.Node)
    {
        byte b5, b6, b7;
        org.mozilla.javascript.Node r0, $r1, $r2, $r5, $r8, r12, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i0, i1, $i2, $i3, $i4, $i9;
        java.lang.String $r7;
        double $d0, $d1, $d2, $d3;
        org.mozilla.javascript.IRFactory r11;

        r11 := @this: org.mozilla.javascript.IRFactory;

        i1 := @parameter0: int;

        r0 := @parameter1: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        tableswitch(i1)
        {
            case 26: goto label10;
            case 27: goto label08;
            case 28: goto label15;
            case 29: goto label09;
            case 30: goto label15;
            case 31: goto label01;
            case 32: goto label07;
            default: goto label15;
        };

     label01:
        if $i0 != 38 goto label02;

        virtualinvoke r0.<org.mozilla.javascript.Node: void setType(int)>(48);

        $r7 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $r8 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newString(java.lang.String)>($r7);

        $r14 = new org.mozilla.javascript.Node;

        specialinvoke $r14.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(i1, r0, $r8);

        r12 = $r14;

        goto label06;

     label02:
        if $i0 == 33 goto label03;

        if $i0 != 35 goto label04;

     label03:
        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r2 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getLastChild()>();

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r1);

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r2);

        $r15 = new org.mozilla.javascript.Node;

        specialinvoke $r15.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(i1, $r1, $r2);

        r12 = $r15;

        goto label06;

     label04:
        if $i0 != 65 goto label05;

        $r5 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        virtualinvoke r0.<org.mozilla.javascript.Node: void removeChild(org.mozilla.javascript.Node)>($r5);

        $r16 = new org.mozilla.javascript.Node;

        specialinvoke $r16.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(67, $r5);

        r12 = $r16;

        goto label06;

     label05:
        $r17 = new org.mozilla.javascript.Node;

        specialinvoke $r17.<org.mozilla.javascript.Node: void <init>(int)>(44);

        r12 = $r17;

     label06:
        return r12;

     label07:
        if $i0 != 38 goto label15;

        virtualinvoke r0.<org.mozilla.javascript.Node: void setType(int)>(133);

        return r0;

     label08:
        if $i0 != 39 goto label15;

        $d2 = virtualinvoke r0.<org.mozilla.javascript.Node: double getDouble()>();

        $i2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: int toInt32(double)>($d2);

        $i9 = (int) -1;

        $i3 = $i2 ^ $i9;

        $d3 = (double) $i3;

        virtualinvoke r0.<org.mozilla.javascript.Node: void setDouble(double)>($d3);

        return r0;

     label09:
        if $i0 != 39 goto label15;

        $d0 = virtualinvoke r0.<org.mozilla.javascript.Node: double getDouble()>();

        $d1 = neg $d0;

        virtualinvoke r0.<org.mozilla.javascript.Node: void setDouble(double)>($d1);

        return r0;

     label10:
        $i4 = staticinvoke <org.mozilla.javascript.IRFactory: int isAlwaysDefinedBoolean(org.mozilla.javascript.Node)>(r0);

        if $i4 == 0 goto label15;

        if $i4 != 1 goto label11;

        b5 = 43;

        b7 = 43;

        b6 = 43;

        goto label12;

     label11:
        b5 = 44;

        b7 = 44;

        b6 = 44;

     label12:
        if $i0 == 44 goto label13;

        if $i0 != 43 goto label14;

     label13:
        virtualinvoke r0.<org.mozilla.javascript.Node: void setType(int)>(b6);

        return r0;

     label14:
        $r18 = new org.mozilla.javascript.Node;

        specialinvoke $r18.<org.mozilla.javascript.Node: void <init>(int)>(b7);

        return $r18;

     label15:
        $r19 = new org.mozilla.javascript.Node;

        specialinvoke $r19.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(i1, r0);

        return $r19;
    }

    org.mozilla.javascript.Node createCallOrNew(int, org.mozilla.javascript.Node)
    {
        byte b3, b4, b5;
        org.mozilla.javascript.Node r0, $r2, $r5;
        int $i0, $i1, i2;
        org.mozilla.javascript.IRFactory r1;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;

        r1 := @this: org.mozilla.javascript.IRFactory;

        i2 := @parameter0: int;

        r0 := @parameter1: org.mozilla.javascript.Node;

        b3 = 0;

        b5 = 0;

        b4 = 0;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i0 != 38 goto label2;

        $r4 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("eval");

        if $z1 == 0 goto label1;

        b3 = 1;

        b5 = 1;

        b4 = 1;

        goto label3;

     label1:
        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("With");

        if $z2 == 0 goto label3;

        b3 = 2;

        b5 = 2;

        b4 = 2;

        goto label3;

     label2:
        $i1 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if $i1 != 33 goto label3;

        $r2 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getLastChild()>();

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("eval");

        if $z0 == 0 goto label3;

        b3 = 1;

        b5 = 1;

        b4 = 1;

     label3:
        $r5 = new org.mozilla.javascript.Node;

        specialinvoke $r5.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(i2, r0);

        if b4 == 0 goto label4;

        specialinvoke r1.<org.mozilla.javascript.IRFactory: void setRequiresActivation()>();

        virtualinvoke $r5.<org.mozilla.javascript.Node: void putIntProp(int,int)>(10, b5);

     label4:
        return $r5;
    }

    org.mozilla.javascript.Node createIncDec(int, boolean, org.mozilla.javascript.Node)
    {
        java.lang.RuntimeException $r3;
        byte b2;
        org.mozilla.javascript.Node $r1, $r2, r5;
        org.mozilla.javascript.IRFactory r0;
        int $i0, i1;
        java.lang.String r6;
        org.mozilla.javascript.Parser $r4;
        boolean z0;

        r0 := @this: org.mozilla.javascript.IRFactory;

        i1 := @parameter0: int;

        z0 := @parameter1: boolean;

        r5 := @parameter2: org.mozilla.javascript.Node;

        $r1 = specialinvoke r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node makeReference(org.mozilla.javascript.Node)>(r5);

        if $r1 != null goto label3;

        if i1 != 103 goto label1;

        r6 = "msg.bad.decr";

        goto label2;

     label1:
        r6 = "msg.bad.incr";

     label2:
        $r4 = r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        virtualinvoke $r4.<org.mozilla.javascript.Parser: java.lang.RuntimeException reportError(java.lang.String)>(r6);

        return null;

     label3:
        $i0 = virtualinvoke $r1.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i0)
        {
            case 33: goto label4;
            case 35: goto label4;
            case 38: goto label4;
            case 65: goto label4;
            default: goto label7;
        };

     label4:
        $r2 = new org.mozilla.javascript.Node;

        specialinvoke $r2.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(i1, $r1);

        b2 = 0;

        if i1 != 103 goto label5;

        b2 = 1;

     label5:
        if z0 == 0 goto label6;

        b2 = b2 | 2;

     label6:
        virtualinvoke $r2.<org.mozilla.javascript.Node: void putIntProp(int,int)>(13, b2);

        return $r2;

     label7:
        $r3 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r3;
    }

    org.mozilla.javascript.Node createPropertyGet(org.mozilla.javascript.Node, java.lang.String, java.lang.String, int)
    {
        org.mozilla.javascript.Node $r3, r4, $r5, $r6, $r7, $r8, $r9, $r10;
        org.mozilla.javascript.IRFactory r1;
        int $i0, i1;
        java.lang.String r0, r2;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.IRFactory;

        r4 := @parameter0: org.mozilla.javascript.Node;

        r0 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        if r0 != null goto label3;

        if i1 != 0 goto label3;

        if r4 != null goto label1;

        $r10 = virtualinvoke r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createName(java.lang.String)>(r2);

        return $r10;

     label1:
        specialinvoke r1.<org.mozilla.javascript.IRFactory: void checkActivationName(java.lang.String,int)>(r2, 33);

        $z0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: boolean isSpecialProperty(java.lang.String)>(r2);

        if $z0 == 0 goto label2;

        $r8 = new org.mozilla.javascript.Node;

        specialinvoke $r8.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(69, r4);

        virtualinvoke $r8.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(17, r2);

        $r9 = new org.mozilla.javascript.Node;

        specialinvoke $r9.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(65, $r8);

        return $r9;

     label2:
        $r6 = new org.mozilla.javascript.Node;

        $r7 = virtualinvoke r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createString(java.lang.String)>(r2);

        specialinvoke $r6.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(33, r4, $r7);

        return $r6;

     label3:
        $r3 = virtualinvoke r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createString(java.lang.String)>(r2);

        $i0 = i1 | 1;

        $r5 = specialinvoke r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createMemberRefGet(org.mozilla.javascript.Node,java.lang.String,org.mozilla.javascript.Node,int)>(r4, r0, $r3, $i0);

        return $r5;
    }

    org.mozilla.javascript.Node createElementGet(org.mozilla.javascript.Node, java.lang.String, org.mozilla.javascript.Node, int)
    {
        java.lang.RuntimeException $r6;
        org.mozilla.javascript.Node r2, r3, $r4, $r5;
        org.mozilla.javascript.IRFactory r1;
        int i0;
        java.lang.String r0;

        r1 := @this: org.mozilla.javascript.IRFactory;

        r2 := @parameter0: org.mozilla.javascript.Node;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: org.mozilla.javascript.Node;

        i0 := @parameter3: int;

        if r0 != null goto label2;

        if i0 != 0 goto label2;

        if r2 != null goto label1;

        $r6 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r6;

     label1:
        $r5 = new org.mozilla.javascript.Node;

        specialinvoke $r5.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(35, r2, r3);

        return $r5;

     label2:
        $r4 = specialinvoke r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createMemberRefGet(org.mozilla.javascript.Node,java.lang.String,org.mozilla.javascript.Node,int)>(r2, r0, r3, i0);

        return $r4;
    }

    private org.mozilla.javascript.Node createMemberRefGet(org.mozilla.javascript.Node, java.lang.String, org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r1, $r2, r3, $r4, $r5, $r6, $r7, $r9, r10, r11;
        int i0;
        org.mozilla.javascript.IRFactory r8;
        java.lang.String r0;
        boolean $z0;

        r8 := @this: org.mozilla.javascript.IRFactory;

        r1 := @parameter0: org.mozilla.javascript.Node;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: org.mozilla.javascript.Node;

        i0 := @parameter3: int;

        r10 = null;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 == 0 goto label1;

        $r9 = new org.mozilla.javascript.Node;

        specialinvoke $r9.<org.mozilla.javascript.Node: void <init>(int)>(41);

        r10 = $r9;

        goto label2;

     label1:
        r10 = virtualinvoke r8.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node createName(java.lang.String)>(r0);

     label2:
        if r1 != null goto label4;

        if r0 != null goto label3;

        $r7 = new org.mozilla.javascript.Node;

        specialinvoke $r7.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(75, r3);

        r11 = $r7;

        goto label6;

     label3:
        $r6 = new org.mozilla.javascript.Node;

        specialinvoke $r6.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(76, r10, r3);

        r11 = $r6;

        goto label6;

     label4:
        if r0 != null goto label5;

        $r5 = new org.mozilla.javascript.Node;

        specialinvoke $r5.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(73, r1, r3);

        r11 = $r5;

        goto label6;

     label5:
        $r2 = new org.mozilla.javascript.Node;

        specialinvoke $r2.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(74, r1, r10, r3);

        r11 = $r2;

     label6:
        if i0 == 0 goto label7;

        virtualinvoke r11.<org.mozilla.javascript.Node: void putIntProp(int,int)>(16, i0);

     label7:
        $r4 = new org.mozilla.javascript.Node;

        specialinvoke $r4.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(65, r11);

        return $r4;
    }

    org.mozilla.javascript.Node createBinary(int, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        byte $b5, $b8, $b10, $b13, $b15;
        org.mozilla.javascript.Node r0, r1, $r15, $r16, $r17, $r18, $r19, $r20;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i9, $i11, $i12, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i25;
        java.lang.String $r7, $r8, $r9, $r10, $r11, r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        org.mozilla.javascript.IRFactory r12;

        r12 := @this: org.mozilla.javascript.IRFactory;

        i0 := @parameter0: int;

        r0 := @parameter1: org.mozilla.javascript.Node;

        r1 := @parameter2: org.mozilla.javascript.Node;

        lookupswitch(i0)
        {
            case 21: goto label01;
            case 22: goto label06;
            case 23: goto label09;
            case 24: goto label12;
            case 100: goto label16;
            case 101: goto label14;
            default: goto label18;
        };

     label01:
        $i16 = r0.<org.mozilla.javascript.Node: int type>;

        if $i16 != 40 goto label04;

        $i20 = r1.<org.mozilla.javascript.Node: int type>;

        if $i20 != 40 goto label02;

        r13 = virtualinvoke r1.<org.mozilla.javascript.Node: java.lang.String getString()>();

        goto label03;

     label02:
        $i21 = r1.<org.mozilla.javascript.Node: int type>;

        if $i21 != 39 goto label18;

        $d15 = virtualinvoke r1.<org.mozilla.javascript.Node: double getDouble()>();

        r13 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String numberToString(double,int)>($d15, 10);

     label03:
        $r10 = virtualinvoke r0.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String concat(java.lang.String)>(r13);

        virtualinvoke r0.<org.mozilla.javascript.Node: void setString(java.lang.String)>($r11);

        return r0;

     label04:
        $i17 = r0.<org.mozilla.javascript.Node: int type>;

        if $i17 != 39 goto label18;

        $i18 = r1.<org.mozilla.javascript.Node: int type>;

        if $i18 != 39 goto label05;

        $d12 = virtualinvoke r0.<org.mozilla.javascript.Node: double getDouble()>();

        $d13 = virtualinvoke r1.<org.mozilla.javascript.Node: double getDouble()>();

        $d14 = $d12 + $d13;

        virtualinvoke r0.<org.mozilla.javascript.Node: void setDouble(double)>($d14);

        return r0;

     label05:
        $i19 = r1.<org.mozilla.javascript.Node: int type>;

        if $i19 != 40 goto label18;

        $d11 = virtualinvoke r0.<org.mozilla.javascript.Node: double getDouble()>();

        $r7 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String numberToString(double,int)>($d11, 10);

        $r8 = virtualinvoke r1.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $r9 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>($r8);

        virtualinvoke r1.<org.mozilla.javascript.Node: void setString(java.lang.String)>($r9);

        return r1;

     label06:
        $i11 = r0.<org.mozilla.javascript.Node: int type>;

        if $i11 != 39 goto label08;

        $d8 = virtualinvoke r0.<org.mozilla.javascript.Node: double getDouble()>();

        $i14 = r1.<org.mozilla.javascript.Node: int type>;

        if $i14 != 39 goto label07;

        $d9 = virtualinvoke r1.<org.mozilla.javascript.Node: double getDouble()>();

        $d10 = $d8 - $d9;

        virtualinvoke r0.<org.mozilla.javascript.Node: void setDouble(double)>($d10);

        return r0;

     label07:
        $b15 = $d8 cmpl 0.0;

        if $b15 != 0 goto label18;

        $r15 = new org.mozilla.javascript.Node;

        specialinvoke $r15.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(29, r1);

        return $r15;

     label08:
        $i12 = r1.<org.mozilla.javascript.Node: int type>;

        if $i12 != 39 goto label18;

        $d7 = virtualinvoke r1.<org.mozilla.javascript.Node: double getDouble()>();

        $b13 = $d7 cmpl 0.0;

        if $b13 != 0 goto label18;

        $r16 = new org.mozilla.javascript.Node;

        specialinvoke $r16.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(28, r0);

        return $r16;

     label09:
        $i6 = r0.<org.mozilla.javascript.Node: int type>;

        if $i6 != 39 goto label11;

        $d4 = virtualinvoke r0.<org.mozilla.javascript.Node: double getDouble()>();

        $i9 = r1.<org.mozilla.javascript.Node: int type>;

        if $i9 != 39 goto label10;

        $d5 = virtualinvoke r1.<org.mozilla.javascript.Node: double getDouble()>();

        $d6 = $d4 * $d5;

        virtualinvoke r0.<org.mozilla.javascript.Node: void setDouble(double)>($d6);

        return r0;

     label10:
        $b10 = $d4 cmpl 1.0;

        if $b10 != 0 goto label18;

        $r17 = new org.mozilla.javascript.Node;

        specialinvoke $r17.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(28, r1);

        return $r17;

     label11:
        $i7 = r1.<org.mozilla.javascript.Node: int type>;

        if $i7 != 39 goto label18;

        $d3 = virtualinvoke r1.<org.mozilla.javascript.Node: double getDouble()>();

        $b8 = $d3 cmpl 1.0;

        if $b8 != 0 goto label18;

        $r18 = new org.mozilla.javascript.Node;

        specialinvoke $r18.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(28, r0);

        return $r18;

     label12:
        $i3 = r1.<org.mozilla.javascript.Node: int type>;

        if $i3 != 39 goto label18;

        $d0 = virtualinvoke r1.<org.mozilla.javascript.Node: double getDouble()>();

        $i4 = r0.<org.mozilla.javascript.Node: int type>;

        if $i4 != 39 goto label13;

        $d1 = virtualinvoke r0.<org.mozilla.javascript.Node: double getDouble()>();

        $d2 = $d1 / $d0;

        virtualinvoke r0.<org.mozilla.javascript.Node: void setDouble(double)>($d2);

        return r0;

     label13:
        $b5 = $d0 cmpl 1.0;

        if $b5 != 0 goto label18;

        $r19 = new org.mozilla.javascript.Node;

        specialinvoke $r19.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(28, r0);

        return $r19;

     label14:
        $i1 = staticinvoke <org.mozilla.javascript.IRFactory: int isAlwaysDefinedBoolean(org.mozilla.javascript.Node)>(r0);

        $i23 = (int) -1;

        if $i1 != $i23 goto label15;

        return r0;

     label15:
        if $i1 != 1 goto label18;

        return r1;

     label16:
        $i2 = staticinvoke <org.mozilla.javascript.IRFactory: int isAlwaysDefinedBoolean(org.mozilla.javascript.Node)>(r0);

        if $i2 != 1 goto label17;

        return r0;

     label17:
        $i25 = (int) -1;

        if $i2 != $i25 goto label18;

        return r1;

     label18:
        $r20 = new org.mozilla.javascript.Node;

        specialinvoke $r20.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(i0, r0, r1);

        return $r20;
    }

    private org.mozilla.javascript.Node simpleAssignment(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        java.lang.RuntimeException $r9;
        byte b1;
        org.mozilla.javascript.Node r0, $r1, $r3, r4, $r5, $r6, $r7, $r8;
        int $i0;
        org.mozilla.javascript.IRFactory r2;

        r2 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r4 := @parameter1: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i0)
        {
            case 33: goto label2;
            case 35: goto label2;
            case 38: goto label1;
            case 65: goto label5;
            default: goto label6;
        };

     label1:
        virtualinvoke r0.<org.mozilla.javascript.Node: void setType(int)>(48);

        $r5 = new org.mozilla.javascript.Node;

        specialinvoke $r5.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(8, r0, r4);

        return $r5;

     label2:
        $r6 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r7 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getLastChild()>();

        if $i0 != 33 goto label3;

        b1 = 34;

        goto label4;

     label3:
        b1 = 36;

     label4:
        $r8 = new org.mozilla.javascript.Node;

        specialinvoke $r8.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(b1, $r6, $r7, r4);

        return $r8;

     label5:
        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r2.<org.mozilla.javascript.IRFactory: void checkMutableReference(org.mozilla.javascript.Node)>($r1);

        $r3 = new org.mozilla.javascript.Node;

        specialinvoke $r3.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(66, $r1, r4);

        return $r3;

     label6:
        $r9 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r9;
    }

    private void checkMutableReference(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0;
        int $i0, $i1;
        org.mozilla.javascript.IRFactory r1;
        org.mozilla.javascript.Parser $r2;

        r1 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(16, 0);

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $r2 = r1.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        virtualinvoke $r2.<org.mozilla.javascript.Parser: java.lang.RuntimeException reportError(java.lang.String)>("msg.bad.assign.left");

     label1:
        return;
    }

    org.mozilla.javascript.Node createAssignment(int, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        short $s3;
        byte b1, b4, b5, b6;
        org.mozilla.javascript.Node $r1, $r2, $r3, $r4, r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, r21;
        int i0, $i2;
        java.lang.String $r7;
        java.lang.RuntimeException $r17, $r19;
        org.mozilla.javascript.IRFactory r0;
        org.mozilla.javascript.Parser $r20;

        r0 := @this: org.mozilla.javascript.IRFactory;

        i0 := @parameter0: int;

        r21 := @parameter1: org.mozilla.javascript.Node;

        r5 := @parameter2: org.mozilla.javascript.Node;

        $r1 = specialinvoke r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node makeReference(org.mozilla.javascript.Node)>(r21);

        if $r1 != null goto label01;

        $r20 = r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        virtualinvoke $r20.<org.mozilla.javascript.Parser: java.lang.RuntimeException reportError(java.lang.String)>("msg.bad.assign.left");

        return r5;

     label01:
        tableswitch(i0)
        {
            case 86: goto label02;
            case 87: goto label03;
            case 88: goto label04;
            case 89: goto label05;
            case 90: goto label06;
            case 91: goto label07;
            case 92: goto label08;
            case 93: goto label09;
            case 94: goto label10;
            case 95: goto label11;
            case 96: goto label12;
            case 97: goto label13;
            default: goto label14;
        };

     label02:
        $r18 = specialinvoke r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Node simpleAssignment(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($r1, r5);

        return $r18;

     label03:
        b1 = 9;

        b6 = 9;

        b5 = 9;

        b4 = 9;

        goto label15;

     label04:
        b1 = 10;

        b6 = 10;

        b5 = 10;

        b4 = 10;

        goto label15;

     label05:
        b1 = 11;

        b6 = 11;

        b5 = 11;

        b4 = 11;

        goto label15;

     label06:
        b1 = 18;

        b6 = 18;

        b5 = 18;

        b4 = 18;

        goto label15;

     label07:
        b1 = 19;

        b6 = 19;

        b5 = 19;

        b4 = 19;

        goto label15;

     label08:
        b1 = 20;

        b6 = 20;

        b5 = 20;

        b4 = 20;

        goto label15;

     label09:
        b1 = 21;

        b6 = 21;

        b5 = 21;

        b4 = 21;

        goto label15;

     label10:
        b1 = 22;

        b6 = 22;

        b5 = 22;

        b4 = 22;

        goto label15;

     label11:
        b1 = 23;

        b6 = 23;

        b5 = 23;

        b4 = 23;

        goto label15;

     label12:
        b1 = 24;

        b6 = 24;

        b5 = 24;

        b4 = 24;

        goto label15;

     label13:
        b1 = 25;

        b6 = 25;

        b5 = 25;

        b4 = 25;

        goto label15;

     label14:
        $r19 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r19;

     label15:
        $i2 = virtualinvoke $r1.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i2)
        {
            case 33: goto label17;
            case 35: goto label17;
            case 38: goto label16;
            case 65: goto label20;
            default: goto label21;
        };

     label16:
        $r7 = virtualinvoke $r1.<org.mozilla.javascript.Node: java.lang.String getString()>();

        $r8 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newString(int,java.lang.String)>(38, $r7);

        $r9 = new org.mozilla.javascript.Node;

        specialinvoke $r9.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(b4, $r8, r5);

        $r10 = staticinvoke <org.mozilla.javascript.Node: org.mozilla.javascript.Node newString(int,java.lang.String)>(48, $r7);

        $r11 = new org.mozilla.javascript.Node;

        specialinvoke $r11.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(8, $r10, $r9);

        return $r11;

     label17:
        $r12 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r13 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getLastChild()>();

        if $i2 != 33 goto label18;

        $s3 = 135;

        goto label19;

     label18:
        $s3 = 136;

     label19:
        $r14 = new org.mozilla.javascript.Node;

        specialinvoke $r14.<org.mozilla.javascript.Node: void <init>(int)>(134);

        $r15 = new org.mozilla.javascript.Node;

        specialinvoke $r15.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(b5, $r14, r5);

        $r16 = new org.mozilla.javascript.Node;

        specialinvoke $r16.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>($s3, $r12, $r13, $r15);

        return $r16;

     label20:
        $r2 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        specialinvoke r0.<org.mozilla.javascript.IRFactory: void checkMutableReference(org.mozilla.javascript.Node)>($r2);

        $r3 = new org.mozilla.javascript.Node;

        specialinvoke $r3.<org.mozilla.javascript.Node: void <init>(int)>(134);

        $r4 = new org.mozilla.javascript.Node;

        specialinvoke $r4.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(b6, $r3, r5);

        $r6 = new org.mozilla.javascript.Node;

        specialinvoke $r6.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(138, $r2, $r4);

        return $r6;

     label21:
        $r17 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r17;
    }

    org.mozilla.javascript.Node createUseLocal(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r1;
        int $i0;
        org.mozilla.javascript.IRFactory r3;
        java.lang.RuntimeException $r2;

        r3 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        if 137 == $i0 goto label1;

        $r2 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r2;

     label1:
        $r1 = new org.mozilla.javascript.Node;

        specialinvoke $r1.<org.mozilla.javascript.Node: void <init>(int)>(53);

        virtualinvoke $r1.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(3, r0);

        return $r1;
    }

    private org.mozilla.javascript.Node$Jump makeJump(int, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r1;
        int i0;
        org.mozilla.javascript.IRFactory r2;
        org.mozilla.javascript.Node$Jump $r0;

        r2 := @this: org.mozilla.javascript.IRFactory;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Node;

        $r0 = new org.mozilla.javascript.Node$Jump;

        specialinvoke $r0.<org.mozilla.javascript.Node$Jump: void <init>(int)>(i0);

        $r0.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target> = r1;

        return $r0;
    }

    private org.mozilla.javascript.Node makeReference(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r1;
        int $i0;
        org.mozilla.javascript.IRFactory r2;

        r2 := @this: org.mozilla.javascript.IRFactory;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i0)
        {
            case 33: goto label1;
            case 35: goto label1;
            case 37: goto label2;
            case 38: goto label1;
            case 65: goto label1;
            default: goto label3;
        };

     label1:
        return r0;

     label2:
        virtualinvoke r0.<org.mozilla.javascript.Node: void setType(int)>(68);

        $r1 = new org.mozilla.javascript.Node;

        specialinvoke $r1.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(65, r0);

        return $r1;

     label3:
        return null;
    }

    private static int isAlwaysDefinedBoolean(org.mozilla.javascript.Node)
    {
        byte $b1, $b2;
        org.mozilla.javascript.Node r0;
        int $i0, $i4, $i6;
        double $d0;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        tableswitch($i0)
        {
            case 39: goto label3;
            case 40: goto label5;
            case 41: goto label1;
            case 42: goto label5;
            case 43: goto label1;
            case 44: goto label2;
            default: goto label5;
        };

     label1:
        $i4 = (int) -1;

        return $i4;

     label2:
        return 1;

     label3:
        $d0 = virtualinvoke r0.<org.mozilla.javascript.Node: double getDouble()>();

        $b1 = $d0 cmpl $d0;

        if $b1 != 0 goto label4;

        $b2 = $d0 cmpl 0.0;

        if $b2 == 0 goto label4;

        return 1;

     label4:
        $i6 = (int) -1;

        return $i6;

     label5:
        return 0;
    }

    private void checkActivationName(java.lang.String, int)
    {
        int i0, $i1;
        java.lang.String r2, $r3, $r7;
        java.util.Hashtable $r6, $r12;
        boolean $z0, $z1, $z2, $z3, z4;
        org.mozilla.javascript.CompilerEnvirons $r5, $r9, $r11;
        org.mozilla.javascript.IRFactory r0;
        org.mozilla.javascript.Parser $r1, $r4, $r8, $r10;

        r0 := @this: org.mozilla.javascript.IRFactory;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        $z0 = virtualinvoke $r1.<org.mozilla.javascript.Parser: boolean insideFunction()>();

        if $z0 == 0 goto label4;

        z4 = 0;

        $r3 = "arguments";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 != 0 goto label1;

        $r4 = r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        $r5 = $r4.<org.mozilla.javascript.Parser: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $r6 = $r5.<org.mozilla.javascript.CompilerEnvirons: java.util.Hashtable activationNames>;

        if $r6 == null goto label2;

        $r10 = r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        $r11 = $r10.<org.mozilla.javascript.Parser: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $r12 = $r11.<org.mozilla.javascript.CompilerEnvirons: java.util.Hashtable activationNames>;

        $z3 = virtualinvoke $r12.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r2);

        if $z3 == 0 goto label2;

     label1:
        z4 = 1;

        goto label3;

     label2:
        $r7 = "length";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label3;

        if i0 != 33 goto label3;

        $r8 = r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        $r9 = $r8.<org.mozilla.javascript.Parser: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $i1 = virtualinvoke $r9.<org.mozilla.javascript.CompilerEnvirons: int getLanguageVersion()>();

        if $i1 != 120 goto label3;

        z4 = 1;

     label3:
        if z4 == 0 goto label4;

        specialinvoke r0.<org.mozilla.javascript.IRFactory: void setRequiresActivation()>();

     label4:
        return;
    }

    private void setRequiresActivation()
    {
        org.mozilla.javascript.IRFactory r0;
        org.mozilla.javascript.FunctionNode $r4;
        org.mozilla.javascript.ScriptOrFnNode $r3;
        org.mozilla.javascript.Parser $r1, $r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.IRFactory;

        $r1 = r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        $z0 = virtualinvoke $r1.<org.mozilla.javascript.Parser: boolean insideFunction()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.mozilla.javascript.IRFactory: org.mozilla.javascript.Parser parser>;

        $r3 = $r2.<org.mozilla.javascript.Parser: org.mozilla.javascript.ScriptOrFnNode currentScriptOrFn>;

        $r4 = (org.mozilla.javascript.FunctionNode) $r3;

        $r4.<org.mozilla.javascript.FunctionNode: boolean itsNeedsActivation> = 1;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.IRFactory: int ALWAYS_FALSE_BOOLEAN> = -1;

        <org.mozilla.javascript.IRFactory: int ALWAYS_TRUE_BOOLEAN> = 1;

        <org.mozilla.javascript.IRFactory: int LOOP_FOR> = 2;

        <org.mozilla.javascript.IRFactory: int LOOP_WHILE> = 1;

        <org.mozilla.javascript.IRFactory: int LOOP_DO_WHILE> = 0;

        return;
    }
}
