class org.codehaus.groovy.ast.ClassNode$MapOfLists extends java.lang.Object
{
    private java.util.Map map;

    private void <init>()
    {
        org.codehaus.groovy.ast.ClassNode$MapOfLists r0;
        java.util.HashMap $r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode$MapOfLists;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.ClassNode$MapOfLists: java.util.Map map> = $r1;

        return;
    }

    public java.util.List get(java.lang.Object)
    {
        java.util.List $r4;
        java.util.Map $r2;
        org.codehaus.groovy.ast.ClassNode$MapOfLists r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.codehaus.groovy.ast.ClassNode$MapOfLists;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.codehaus.groovy.ast.ClassNode$MapOfLists: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public java.util.List getNotNull(java.lang.Object)
    {
        java.util.List $r2, r3;
        org.codehaus.groovy.ast.ClassNode$MapOfLists r0;
        java.lang.Object r1;

        r0 := @this: org.codehaus.groovy.ast.ClassNode$MapOfLists;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode$MapOfLists: java.util.List get(java.lang.Object)>(r1);

        r3 = $r2;

        if $r2 != null goto label1;

        r3 = <java.util.Collections: java.util.List EMPTY_LIST>;

     label1:
        return r3;
    }

    public void put(java.lang.Object, java.lang.Object)
    {
        java.util.ArrayList $r3;
        java.util.List $r6;
        java.util.Map $r2, $r5;
        org.codehaus.groovy.ast.ClassNode$MapOfLists r0;
        java.lang.Object r1, r4;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode$MapOfLists;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.codehaus.groovy.ast.ClassNode$MapOfLists: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode$MapOfLists: java.util.List get(java.lang.Object)>(r1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label2;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(2);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        $r5 = r0.<org.codehaus.groovy.ast.ClassNode$MapOfLists: java.util.Map map>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label2:
        return;
    }

    void <init>(org.codehaus.groovy.ast.ClassNode$1)
    {
        org.codehaus.groovy.ast.ClassNode$1 r1;
        org.codehaus.groovy.ast.ClassNode$MapOfLists r0;

        r0 := @this: org.codehaus.groovy.ast.ClassNode$MapOfLists;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode$1;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassNode$MapOfLists: void <init>()>();

        return;
    }
}
