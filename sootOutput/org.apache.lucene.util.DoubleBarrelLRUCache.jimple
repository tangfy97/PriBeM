public final class org.apache.lucene.util.DoubleBarrelLRUCache extends java.lang.Object
{
    private final java.util.Map cache1;
    private final java.util.Map cache2;
    private final java.util.concurrent.atomic.AtomicInteger countdown;
    private volatile boolean swapped;
    private final int maxSize;

    public void <init>(int)
    {
        org.apache.lucene.util.DoubleBarrelLRUCache r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int i0;
        java.util.concurrent.ConcurrentHashMap $r2, $r3;

        r0 := @this: org.apache.lucene.util.DoubleBarrelLRUCache;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.DoubleBarrelLRUCache: int maxSize> = i0;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(i0);

        r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.concurrent.atomic.AtomicInteger countdown> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.Map cache1> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.Map cache2> = $r3;

        return;
    }

    public java.lang.Object get(org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey)
    {
        org.apache.lucene.util.DoubleBarrelLRUCache r0;
        org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey r1, $r4;
        java.util.Map r5, r6;
        java.lang.Object $r2, $r3, r7;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.DoubleBarrelLRUCache;

        r1 := @parameter0: org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey;

        $z0 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: boolean swapped>;

        if $z0 == 0 goto label1;

        r5 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.Map cache2>;

        r6 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.Map cache1>;

        goto label2;

     label1:
        r5 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.Map cache1>;

        r6 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.Map cache2>;

     label2:
        $r2 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = $r2;

        if $r2 != null goto label3;

        $r3 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = $r3;

        if $r3 == null goto label3;

        $r4 = virtualinvoke r1.<org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey: org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey clone()>();

        virtualinvoke r0.<org.apache.lucene.util.DoubleBarrelLRUCache: void put(org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey,java.lang.Object)>($r4, $r3);

     label3:
        return r7;
    }

    public void put(org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey, java.lang.Object)
    {
        org.apache.lucene.util.DoubleBarrelLRUCache r0;
        org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey r1;
        java.util.concurrent.atomic.AtomicInteger $r3, $r4;
        java.util.Map r5, r6;
        int $i0, $i1;
        java.lang.Object r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.util.DoubleBarrelLRUCache;

        r1 := @parameter0: org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: boolean swapped>;

        if $z0 == 0 goto label1;

        r5 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.Map cache2>;

        r6 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.Map cache1>;

        goto label2;

     label1:
        r5 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.Map cache1>;

        r6 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.Map cache2>;

     label2:
        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r3 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.concurrent.atomic.AtomicInteger countdown>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i0 != 0 goto label5;

        interfaceinvoke r6.<java.util.Map: void clear()>();

        $z1 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: boolean swapped>;

        if $z1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        r0.<org.apache.lucene.util.DoubleBarrelLRUCache: boolean swapped> = $z2;

        $r4 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: java.util.concurrent.atomic.AtomicInteger countdown>;

        $i1 = r0.<org.apache.lucene.util.DoubleBarrelLRUCache: int maxSize>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i1);

     label5:
        return;
    }
}
