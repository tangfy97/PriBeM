public final class org.wiztools.restclient.ui.UIUtil extends java.lang.Object
{
    public static final java.awt.Font FONT_DIALOG_12_PLAIN;
    public static final java.awt.Font FONT_DIALOG_12_BOLD;
    public static final java.awt.Font FONT_MONO_12_PLAIN;
    private static final org.wiztools.restclient.ui.RCFileView fileView;

    private void <init>()
    {
        org.wiztools.restclient.ui.UIUtil r0;

        r0 := @this: org.wiztools.restclient.ui.UIUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final javax.swing.JFileChooser getNewJFileChooser()
    {
        javax.swing.JFileChooser $r0;
        org.wiztools.restclient.ui.RCFileView $r1;

        $r0 = new javax.swing.JFileChooser;

        specialinvoke $r0.<javax.swing.JFileChooser: void <init>()>();

        $r1 = <org.wiztools.restclient.ui.UIUtil: org.wiztools.restclient.ui.RCFileView fileView>;

        virtualinvoke $r0.<javax.swing.JFileChooser: void setFileView(javax.swing.filechooser.FileView)>($r1);

        return $r0;
    }

    public static javax.swing.ImageIcon getIconFromClasspath(java.lang.String)
    {
        java.net.URL $r3;
        javax.swing.ImageIcon $r4;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        $r0 = class "Lorg/wiztools/restclient/ui/UIUtil;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2);

        $r4 = new javax.swing.ImageIcon;

        specialinvoke $r4.<javax.swing.ImageIcon: void <init>(java.net.URL)>($r3);

        return $r4;
    }

    public static javax.swing.JPanel getFlowLayoutPanelLeftAligned(java.awt.Component)
    {
        java.awt.Component r0;
        javax.swing.JPanel $r1;

        r0 := @parameter0: java.awt.Component;

        $r1 = staticinvoke <org.wiztools.restclient.ui.UIUtil: javax.swing.JPanel getFlowLayoutPanelLeftAligned(java.lang.String,java.awt.Component)>(null, r0);

        return $r1;
    }

    public static javax.swing.JPanel getFlowLayoutPanelLeftAligned(java.lang.String, java.awt.Component)
    {
        java.awt.FlowLayout $r1;
        javax.swing.border.TitledBorder $r5;
        java.lang.String r2;
        java.awt.Component r3;
        javax.swing.JPanel $r0, r4;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.awt.Component;

        $r0 = new javax.swing.JPanel;

        specialinvoke $r0.<javax.swing.JPanel: void <init>()>();

        $r1 = new java.awt.FlowLayout;

        specialinvoke $r1.<java.awt.FlowLayout: void <init>(int)>(0);

        virtualinvoke $r0.<javax.swing.JPanel: void setLayout(java.awt.LayoutManager)>($r1);

        if r2 == null goto label1;

        $z0 = r3 instanceof javax.swing.JPanel;

        if $z0 == 0 goto label1;

        r4 = (javax.swing.JPanel) r3;

        $r5 = staticinvoke <javax.swing.BorderFactory: javax.swing.border.TitledBorder createTitledBorder(java.lang.String)>(r2);

        virtualinvoke r4.<javax.swing.JPanel: void setBorder(javax.swing.border.Border)>($r5);

     label1:
        virtualinvoke $r0.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>(r3);

        return $r0;
    }

    public static void clipboardCopy(java.lang.String)
    {
        java.awt.datatransfer.Clipboard $r1;
        java.awt.datatransfer.StringSelection $r2;
        java.lang.String r3;
        java.awt.Toolkit $r0;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r1 = virtualinvoke $r0.<java.awt.Toolkit: java.awt.datatransfer.Clipboard getSystemClipboard()>();

        $r2 = new java.awt.datatransfer.StringSelection;

        specialinvoke $r2.<java.awt.datatransfer.StringSelection: void <init>(java.lang.String)>(r3);

        virtualinvoke $r1.<java.awt.datatransfer.Clipboard: void setContents(java.awt.datatransfer.Transferable,java.awt.datatransfer.ClipboardOwner)>($r2, null);

        return;
    }

    static void <clinit>()
    {
        java.awt.Font $r0, $r1, $r2;
        org.wiztools.restclient.ui.RCFileView $r3;

        $r0 = new java.awt.Font;

        specialinvoke $r0.<java.awt.Font: void <init>(java.lang.String,int,int)>("Dialog", 0, 12);

        <org.wiztools.restclient.ui.UIUtil: java.awt.Font FONT_DIALOG_12_PLAIN> = $r0;

        $r1 = new java.awt.Font;

        specialinvoke $r1.<java.awt.Font: void <init>(java.lang.String,int,int)>("Dialog", 1, 12);

        <org.wiztools.restclient.ui.UIUtil: java.awt.Font FONT_DIALOG_12_BOLD> = $r1;

        $r2 = new java.awt.Font;

        specialinvoke $r2.<java.awt.Font: void <init>(java.lang.String,int,int)>("Monospaced", 0, 12);

        <org.wiztools.restclient.ui.UIUtil: java.awt.Font FONT_MONO_12_PLAIN> = $r2;

        $r3 = new org.wiztools.restclient.ui.RCFileView;

        specialinvoke $r3.<org.wiztools.restclient.ui.RCFileView: void <init>()>();

        <org.wiztools.restclient.ui.UIUtil: org.wiztools.restclient.ui.RCFileView fileView> = $r3;

        return;
    }
}
