final class org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip extends java.lang.Object implements org.waveprotocol.wave.model.conversation.ObservableManifestBlip
{
    private static final java.lang.String THREAD_TAG;
    private static final java.lang.String BLIP_ID_ATTR;
    private final org.waveprotocol.wave.model.adt.BasicValue id;
    private final org.waveprotocol.wave.model.adt.ObservableElementList replies;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    static org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip create(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip $r0;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicValue $r6;
        org.waveprotocol.wave.model.adt.docbased.Factory $r3;
        org.waveprotocol.wave.model.util.Serializer $r5;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList $r4;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.adt.docbased.Factory factory()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList: org.waveprotocol.wave.model.adt.docbased.DocumentBasedElementList create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,java.lang.String,org.waveprotocol.wave.model.adt.docbased.Factory)>(r1, r2, "thread", $r3);

        $r5 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer STRING>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicValue: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicValue create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.String)>(r1, r2, $r5, "id");

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: void <init>(org.waveprotocol.wave.model.adt.ObservableElementList,org.waveprotocol.wave.model.adt.BasicValue)>($r4, $r6);

        return $r0;
    }

    static org.waveprotocol.wave.model.adt.docbased.Factory factory()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$1 $r0;

        $r0 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$1: void <init>()>();

        return $r0;
    }

    void <init>(org.waveprotocol.wave.model.adt.ObservableElementList, org.waveprotocol.wave.model.adt.BasicValue)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.adt.ObservableElementList r3, $r4;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$2 $r2;
        org.waveprotocol.wave.model.adt.BasicValue r5;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r3 := @parameter0: org.waveprotocol.wave.model.adt.ObservableElementList;

        r5 := @parameter1: org.waveprotocol.wave.model.adt.BasicValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        $r2 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$2;

        specialinvoke $r2.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$2: void <init>(org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip)>(r0);

        r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.ObservableElementList replies> = r3;

        $r4 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.ObservableElementList replies>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableElementList: void addListener(java.lang.Object)>($r2);

        r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.BasicValue id> = r5;

        return;
    }

    public java.lang.String getId()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        java.lang.Object $r2;
        java.lang.String $r3;
        org.waveprotocol.wave.model.adt.BasicValue $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.BasicValue id>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.BasicValue: java.lang.Object get()>();

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public org.waveprotocol.wave.model.conversation.ObservableManifestThread appendReply(java.lang.String, boolean)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.adt.ObservableElementList $r3;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r5;
        java.lang.String r2;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser $r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.ObservableElementList replies>;

        $r1 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser;

        specialinvoke $r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser: void <init>(java.lang.String,boolean)>(r2, z0);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Object add(java.lang.Object)>($r1);

        $r5 = (org.waveprotocol.wave.model.conversation.ObservableManifestThread) $r4;

        return $r5;
    }

    public org.waveprotocol.wave.model.conversation.ObservableManifestThread insertReply(int, java.lang.String, boolean)
    {
        org.waveprotocol.wave.model.adt.ObservableElementList $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r5;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        int i0;
        java.lang.Object $r4;
        java.lang.String r2;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser $r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.ObservableElementList replies>;

        $r1 = new org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser;

        specialinvoke $r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser: void <init>(java.lang.String,boolean)>(r2, z0);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Object add(int,java.lang.Object)>(i0, $r1);

        $r5 = (org.waveprotocol.wave.model.conversation.ObservableManifestThread) $r4;

        return $r5;
    }

    public org.waveprotocol.wave.model.conversation.ObservableManifestThread getReply(int)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        int i0;
        org.waveprotocol.wave.model.adt.ObservableElementList $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.ObservableElementList replies>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Object get(int)>(i0);

        $r3 = (org.waveprotocol.wave.model.conversation.ObservableManifestThread) $r2;

        return $r3;
    }

    public java.lang.Iterable getReplies()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.adt.ObservableElementList $r1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.ObservableElementList replies>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableElementList: java.lang.Iterable getValues()>();

        return $r2;
    }

    public int indexOf(org.waveprotocol.wave.model.conversation.ManifestThread)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r1;
        org.waveprotocol.wave.model.adt.ObservableElementList $r3;
        int $i0, $i2;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r2;
        org.waveprotocol.wave.model.conversation.ManifestThread r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ManifestThread;

        $z0 = r0 instanceof org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        if $z0 == 0 goto label1;

        $r3 = r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.ObservableElementList replies>;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableManifestThread) r0;

        $i0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableElementList: int indexOf(java.lang.Object)>($r2);

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    public boolean removeReply(org.waveprotocol.wave.model.conversation.ManifestThread)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r1;
        org.waveprotocol.wave.model.adt.ObservableElementList $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r2;
        org.waveprotocol.wave.model.conversation.ManifestThread r0;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ManifestThread;

        $z0 = r0 instanceof org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        if $z0 == 0 goto label1;

        $r3 = r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.ObservableElementList replies>;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableManifestThread) r0;

        $z1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableElementList: boolean remove(java.lang.Object)>($r2);

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int numReplies()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.adt.ObservableElementList $r1;
        int $i0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.ObservableElementList replies>;

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableElementList: int size()>();

        return $i0;
    }

    public void detachListeners()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: void clear()>();

        return;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r9, $r10;
        java.lang.Class $r2;
        java.lang.Object $r7;
        java.lang.String $r3, $r8, $r11;
        org.waveprotocol.wave.model.adt.BasicValue $r6;

        r1 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(id = ");

        $r6 = r1.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.adt.BasicValue id>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.adt.BasicValue: java.lang.Object get()>();

        $r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private void triggerOnManifestThreadAdded(org.waveprotocol.wave.model.conversation.ObservableManifestThread)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r5;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener: void onReplyAdded(org.waveprotocol.wave.model.conversation.ObservableManifestThread)>(r5);

        goto label1;

     label2:
        return;
    }

    private void triggerOnManifestThreadRemoved(org.waveprotocol.wave.model.conversation.ObservableManifestThread)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r5;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r5 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener: void onReplyRemoved(org.waveprotocol.wave.model.conversation.ObservableManifestThread)>(r5);

        goto label1;

     label2:
        return;
    }

    public volatile org.waveprotocol.wave.model.conversation.ManifestThread getReply(int)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        int i0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.conversation.ObservableManifestThread getReply(int)>(i0);

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ManifestThread insertReply(int, java.lang.String, boolean)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        int i0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r2;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.conversation.ObservableManifestThread insertReply(int,java.lang.String,boolean)>(i0, r1, z0);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ManifestThread appendReply(java.lang.String, boolean)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r2;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: org.waveprotocol.wave.model.conversation.ObservableManifestThread appendReply(java.lang.String,boolean)>(r1, z0);

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: void removeListener(org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: void addListener(org.waveprotocol.wave.model.conversation.ObservableManifestBlip$Listener)>($r2);

        return;
    }

    static void access$000(org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip, org.waveprotocol.wave.model.conversation.ObservableManifestThread)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: void triggerOnManifestThreadAdded(org.waveprotocol.wave.model.conversation.ObservableManifestThread)>(r1);

        return;
    }

    static void access$100(org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip, org.waveprotocol.wave.model.conversation.ObservableManifestThread)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip r0;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip;

        r1 := @parameter1: org.waveprotocol.wave.model.conversation.ObservableManifestThread;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: void triggerOnManifestThreadRemoved(org.waveprotocol.wave.model.conversation.ObservableManifestThread)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: java.lang.String BLIP_ID_ATTR> = "id";

        <org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip: java.lang.String THREAD_TAG> = "thread";

        return;
    }
}
