public class ucar.unidata.geoloc.projection.LambertConformal extends ucar.unidata.geoloc.ProjectionImpl
{
    private double n;
    private double F;
    private double rho;
    private double earthRadiusTimesF;
    private double lon0Degrees;
    private double lat0;
    private double lon0;
    private double par1;
    private double par2;
    private double falseEasting;
    private double falseNorthing;
    private double earth_radius;
    private ucar.unidata.geoloc.LatLonPointImpl origin;

    public ucar.unidata.geoloc.ProjectionImpl constructCopy()
    {
        ucar.unidata.geoloc.projection.LambertConformal $r0, r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r1 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $r0 = new ucar.unidata.geoloc.projection.LambertConformal;

        $d0 = virtualinvoke r1.<ucar.unidata.geoloc.projection.LambertConformal: double getOriginLat()>();

        $d1 = virtualinvoke r1.<ucar.unidata.geoloc.projection.LambertConformal: double getOriginLon()>();

        $d2 = virtualinvoke r1.<ucar.unidata.geoloc.projection.LambertConformal: double getParallelOne()>();

        $d3 = virtualinvoke r1.<ucar.unidata.geoloc.projection.LambertConformal: double getParallelTwo()>();

        $d4 = virtualinvoke r1.<ucar.unidata.geoloc.projection.LambertConformal: double getFalseEasting()>();

        $d5 = virtualinvoke r1.<ucar.unidata.geoloc.projection.LambertConformal: double getFalseNorthing()>();

        specialinvoke $r0.<ucar.unidata.geoloc.projection.LambertConformal: void <init>(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        return $r0;
    }

    public void <init>()
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double $d0, $d1;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $d0 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d1 = $d0 * 0.001;

        specialinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void <init>(double,double,double,double,double,double,double)>(40.0, -105.0, 20.0, 60.0, 0.0, 0.0, $d1);

        return;
    }

    public void <init>(double, double, double, double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double d0, d1, d2, d3, $d4, $d5;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d4 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d5 = $d4 * 0.001;

        specialinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void <init>(double,double,double,double,double,double,double)>(d0, d1, d2, d3, 0.0, 0.0, $d5);

        return;
    }

    public void <init>(double, double, double, double, double, double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $d6 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d7 = $d6 * 0.001;

        specialinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void <init>(double,double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5, $d7);

        return;
    }

    public void <init>(double, double, double, double, double, double, double)
    {
        double[] r2;
        byte $b0, $b1, $b2;
        double d0, $d1, d2, $d3, d4, d5, d6, d7, d8;
        ucar.unidata.util.Parameter $r3;
        ucar.unidata.geoloc.projection.LambertConformal r0;
        ucar.unidata.geoloc.LatLonPointImpl $r1;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        d4 := @parameter2: double;

        d5 := @parameter3: double;

        d6 := @parameter4: double;

        d7 := @parameter5: double;

        d8 := @parameter6: double;

        specialinvoke r0.<ucar.unidata.geoloc.ProjectionImpl: void <init>()>();

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d0);

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double lat0> = $d1;

        $d3 = staticinvoke <java.lang.Math: double toRadians(double)>(d2);

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double lon0> = $d3;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double par1> = d4;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double par2> = d5;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double falseEasting> = d6;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double falseNorthing> = d7;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double earth_radius> = d8;

        $r1 = new ucar.unidata.geoloc.LatLonPointImpl;

        specialinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: void <init>(double,double)>(d0, d2);

        r0.<ucar.unidata.geoloc.projection.LambertConformal: ucar.unidata.geoloc.LatLonPointImpl origin> = $r1;

        specialinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void precalculate()>();

        virtualinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void addParameter(java.lang.String,java.lang.String)>("grid_mapping_name", "lambert_conformal_conic");

        virtualinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void addParameter(java.lang.String,double)>("latitude_of_projection_origin", d0);

        virtualinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void addParameter(java.lang.String,double)>("longitude_of_central_meridian", d2);

        $b0 = d5 cmpl d4;

        if $b0 != 0 goto label1;

        virtualinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void addParameter(java.lang.String,double)>("standard_parallel", d4);

        goto label2;

     label1:
        r2 = newarray (double)[2];

        r2[0] = d4;

        r2[1] = d5;

        $r3 = new ucar.unidata.util.Parameter;

        specialinvoke $r3.<ucar.unidata.util.Parameter: void <init>(java.lang.String,double[])>("standard_parallel", r2);

        virtualinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void addParameter(ucar.unidata.util.Parameter)>($r3);

     label2:
        $b1 = d6 cmpl 0.0;

        if $b1 != 0 goto label3;

        $b2 = d7 cmpl 0.0;

        if $b2 == 0 goto label4;

     label3:
        virtualinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void addParameter(java.lang.String,double)>("false_easting", d6);

        virtualinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void addParameter(java.lang.String,double)>("false_northing", d7);

        virtualinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void addParameter(java.lang.String,java.lang.String)>("units", "km");

     label4:
        return;
    }

    private void precalculate()
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6;
        int $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58;
        java.lang.IllegalArgumentException $r7, $r8, $r9, $r10, $r11, $r12;
        ucar.unidata.geoloc.projection.LambertConformal r0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $d0 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double lat0>;

        $d1 = $d0 - 1.5707963267948966;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $b0 = $d2 cmpg 1.0E-6;

        $i7 = (int) $b0;

        if $i7 >= 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("LambertConformal lat0 = 90");

        throw $r7;

     label1:
        $d3 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double lat0>;

        $d4 = $d3 + 1.5707963267948966;

        $d5 = staticinvoke <java.lang.Math: double abs(double)>($d4);

        $b1 = $d5 cmpg 1.0E-6;

        $i8 = (int) $b1;

        if $i8 >= 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("LambertConformal lat0 = -90");

        throw $r8;

     label2:
        $d6 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double par1>;

        $d7 = $d6 - 90.0;

        $d8 = staticinvoke <java.lang.Math: double abs(double)>($d7);

        $b2 = $d8 cmpg 1.0E-6;

        $i9 = (int) $b2;

        if $i9 >= 0 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("LambertConformal par1 = 90");

        throw $r9;

     label3:
        $d9 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double par1>;

        $d10 = $d9 + 90.0;

        $d11 = staticinvoke <java.lang.Math: double abs(double)>($d10);

        $b3 = $d11 cmpg 1.0E-6;

        $i10 = (int) $b3;

        if $i10 >= 0 goto label4;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("LambertConformal par1 = -90");

        throw $r10;

     label4:
        $d12 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double par2>;

        $d13 = $d12 - 90.0;

        $d14 = staticinvoke <java.lang.Math: double abs(double)>($d13);

        $b4 = $d14 cmpg 1.0E-6;

        $i11 = (int) $b4;

        if $i11 >= 0 goto label5;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("LambertConformal par2 = 90");

        throw $r11;

     label5:
        $d15 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double par2>;

        $d16 = $d15 + 90.0;

        $d17 = staticinvoke <java.lang.Math: double abs(double)>($d16);

        $b5 = $d17 cmpg 1.0E-6;

        $i12 = (int) $b5;

        if $i12 >= 0 goto label6;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("LambertConformal par2 = -90");

        throw $r12;

     label6:
        $d18 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double par1>;

        $d19 = staticinvoke <java.lang.Math: double toRadians(double)>($d18);

        $d20 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double par2>;

        $d21 = staticinvoke <java.lang.Math: double toRadians(double)>($d20);

        $d22 = $d19 / 2.0;

        $d23 = 0.7853981633974483 + $d22;

        $d24 = staticinvoke <java.lang.Math: double tan(double)>($d23);

        $d25 = $d21 / 2.0;

        $d26 = 0.7853981633974483 + $d25;

        $d27 = staticinvoke <java.lang.Math: double tan(double)>($d26);

        $d29 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double par2>;

        $d28 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double par1>;

        $d30 = $d29 - $d28;

        $d31 = staticinvoke <java.lang.Math: double abs(double)>($d30);

        $b6 = $d31 cmpg 1.0E-6;

        $i13 = (int) $b6;

        if $i13 >= 0 goto label7;

        $d58 = staticinvoke <java.lang.Math: double sin(double)>($d19);

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double n> = $d58;

        goto label8;

     label7:
        $d32 = staticinvoke <java.lang.Math: double cos(double)>($d19);

        $d33 = staticinvoke <java.lang.Math: double cos(double)>($d21);

        $d34 = $d32 / $d33;

        $d35 = staticinvoke <java.lang.Math: double log(double)>($d34);

        $d36 = $d27 / $d24;

        $d37 = staticinvoke <java.lang.Math: double log(double)>($d36);

        $d38 = $d35 / $d37;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double n> = $d38;

     label8:
        $d39 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d40 = staticinvoke <java.lang.Math: double pow(double,double)>($d24, $d39);

        $d41 = staticinvoke <java.lang.Math: double cos(double)>($d19);

        $d43 = $d41 * $d40;

        $d42 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d44 = $d43 / $d42;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double F> = $d44;

        $d46 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double earth_radius>;

        $d45 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double F>;

        $d47 = $d46 * $d45;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double earthRadiusTimesF> = $d47;

        $d48 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double lat0>;

        $d49 = $d48 / 2.0;

        $d50 = 0.7853981633974483 + $d49;

        $d51 = staticinvoke <java.lang.Math: double tan(double)>($d50);

        $d52 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d53 = staticinvoke <java.lang.Math: double pow(double,double)>($d51, $d52);

        $d54 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double earthRadiusTimesF>;

        $d55 = $d54 / $d53;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double rho> = $d55;

        $d56 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double lon0>;

        $d57 = staticinvoke <java.lang.Math: double toDegrees(double)>($d56);

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double lon0Degrees> = $d57;

        return;
    }

    public java.lang.Object clone()
    {
        ucar.unidata.geoloc.projection.LambertConformal r0, r2;
        java.lang.Object $r1;
        ucar.unidata.geoloc.LatLonPointImpl $r3;
        double $d0, $d1;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $r1 = specialinvoke r0.<ucar.unidata.geoloc.ProjectionImpl: java.lang.Object clone()>();

        r2 = (ucar.unidata.geoloc.projection.LambertConformal) $r1;

        $r3 = new ucar.unidata.geoloc.LatLonPointImpl;

        $d0 = virtualinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: double getOriginLat()>();

        $d1 = virtualinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: double getOriginLon()>();

        specialinvoke $r3.<ucar.unidata.geoloc.LatLonPointImpl: void <init>(double,double)>($d0, $d1);

        r2.<ucar.unidata.geoloc.projection.LambertConformal: ucar.unidata.geoloc.LatLonPointImpl origin> = $r3;

        return r2;
    }

    public boolean equals(java.lang.Object)
    {
        ucar.unidata.geoloc.ProjectionRect $r3, $r4;
        byte $b0, $b1, $b2, $b3;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        ucar.unidata.geoloc.projection.LambertConformal r1, r2;
        java.lang.Object r0;

        r2 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof ucar.unidata.geoloc.projection.LambertConformal;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (ucar.unidata.geoloc.projection.LambertConformal) r0;

        $d0 = virtualinvoke r2.<ucar.unidata.geoloc.projection.LambertConformal: double getParallelOne()>();

        $d1 = virtualinvoke r1.<ucar.unidata.geoloc.projection.LambertConformal: double getParallelOne()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label2;

        $d2 = virtualinvoke r2.<ucar.unidata.geoloc.projection.LambertConformal: double getParallelTwo()>();

        $d3 = virtualinvoke r1.<ucar.unidata.geoloc.projection.LambertConformal: double getParallelTwo()>();

        $b1 = $d2 cmpl $d3;

        if $b1 != 0 goto label2;

        $d4 = virtualinvoke r2.<ucar.unidata.geoloc.projection.LambertConformal: double getOriginLat()>();

        $d5 = virtualinvoke r1.<ucar.unidata.geoloc.projection.LambertConformal: double getOriginLat()>();

        $b2 = $d4 cmpl $d5;

        if $b2 != 0 goto label2;

        $d6 = virtualinvoke r2.<ucar.unidata.geoloc.projection.LambertConformal: double getOriginLon()>();

        $d7 = virtualinvoke r1.<ucar.unidata.geoloc.projection.LambertConformal: double getOriginLon()>();

        $b3 = $d6 cmpl $d7;

        if $b3 != 0 goto label2;

        $r4 = r2.<ucar.unidata.geoloc.projection.LambertConformal: ucar.unidata.geoloc.ProjectionRect defaultMapArea>;

        $r3 = r1.<ucar.unidata.geoloc.projection.LambertConformal: ucar.unidata.geoloc.ProjectionRect defaultMapArea>;

        $z1 = virtualinvoke $r4.<ucar.unidata.geoloc.ProjectionRect: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public double getParallelTwo()
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double $d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $d0 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double par2>;

        return $d0;
    }

    public void setParallelTwo(double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double par2> = d0;

        specialinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void precalculate()>();

        return;
    }

    public void setParellelTwo(double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double par2> = d0;

        specialinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void precalculate()>();

        return;
    }

    public double getParallelOne()
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double $d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $d0 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double par1>;

        return $d0;
    }

    public void setParallelOne(double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double par1> = d0;

        specialinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void precalculate()>();

        return;
    }

    public void setParellelOne(double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double par1> = d0;

        specialinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void precalculate()>();

        return;
    }

    public double getOriginLon()
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        ucar.unidata.geoloc.LatLonPointImpl $r1;
        double $d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $r1 = r0.<ucar.unidata.geoloc.projection.LambertConformal: ucar.unidata.geoloc.LatLonPointImpl origin>;

        $d0 = virtualinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: double getLongitude()>();

        return $d0;
    }

    public void setOriginLon(double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        ucar.unidata.geoloc.LatLonPointImpl $r1;
        double d0, $d1;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.unidata.geoloc.projection.LambertConformal: ucar.unidata.geoloc.LatLonPointImpl origin>;

        virtualinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: void setLongitude(double)>(d0);

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d0);

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double lon0> = $d1;

        specialinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void precalculate()>();

        return;
    }

    public double getOriginLat()
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        ucar.unidata.geoloc.LatLonPointImpl $r1;
        double $d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $r1 = r0.<ucar.unidata.geoloc.projection.LambertConformal: ucar.unidata.geoloc.LatLonPointImpl origin>;

        $d0 = virtualinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: double getLatitude()>();

        return $d0;
    }

    public void setOriginLat(double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        ucar.unidata.geoloc.LatLonPointImpl $r1;
        double d0, $d1;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.unidata.geoloc.projection.LambertConformal: ucar.unidata.geoloc.LatLonPointImpl origin>;

        virtualinvoke $r1.<ucar.unidata.geoloc.LatLonPointImpl: void setLatitude(double)>(d0);

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d0);

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double lat0> = $d1;

        specialinvoke r0.<ucar.unidata.geoloc.projection.LambertConformal: void precalculate()>();

        return;
    }

    public double getFalseEasting()
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double $d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $d0 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double falseEasting>;

        return $d0;
    }

    public void setFalseEasting(double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double falseEasting> = d0;

        return;
    }

    public double getFalseNorthing()
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double $d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $d0 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double falseNorthing>;

        return $d0;
    }

    public void setFalseNorthing(double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double d0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d0 := @parameter0: double;

        r0.<ucar.unidata.geoloc.projection.LambertConformal: double falseNorthing> = d0;

        return;
    }

    public java.lang.String getProjectionTypeLabel()
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        return "Lambert conformal conic";
    }

    public java.lang.String paramsToString()
    {
        ucar.unidata.geoloc.projection.LambertConformal r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r8, $r9, $r11;
        ucar.unidata.geoloc.LatLonPointImpl $r3;
        java.lang.String $r4, $r7, $r10, $r12;
        double $d0, $d1;

        r2 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" origin ");

        $r3 = r2.<ucar.unidata.geoloc.projection.LambertConformal: ucar.unidata.geoloc.LatLonPointImpl origin>;

        $r4 = virtualinvoke $r3.<ucar.unidata.geoloc.LatLonPointImpl: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parallels: ");

        $d0 = r2.<ucar.unidata.geoloc.projection.LambertConformal: double par1>;

        $r7 = staticinvoke <ucar.unidata.util.Format: java.lang.String d(double,int)>($d0, 3);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d1 = r2.<ucar.unidata.geoloc.projection.LambertConformal: double par2>;

        $r10 = staticinvoke <ucar.unidata.util.Format: java.lang.String d(double,int)>($d1, 3);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public java.lang.String toWKS()
    {
        java.lang.String $r3, $r13;
        double $d0, $d1, $d2, $d3;
        ucar.unidata.geoloc.projection.LambertConformal r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r2 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROJCS[\"");

        $r3 = virtualinvoke r2.<ucar.unidata.geoloc.projection.LambertConformal: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GEOGCS[\"Normal Sphere (r=6371007)\",");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DATUM[\"unknown\",");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SPHEROID[\"sphere\",6371007,0]],");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRIMEM[\"Greenwich\",0],");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNIT[\"degree\",0.0174532925199433]],");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROJECTION[\"Lambert_Conformal_Conic_1SP\"],");

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARAMETER[\"latitude_of_origin\",");

        $d0 = virtualinvoke r2.<ucar.unidata.geoloc.projection.LambertConformal: double getOriginLat()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("],");

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARAMETER[\"central_meridian\",");

        $d1 = virtualinvoke r2.<ucar.unidata.geoloc.projection.LambertConformal: double getOriginLon()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("],");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARAMETER[\"scale_factor\",1],");

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARAMETER[\"false_easting\",");

        $d2 = r2.<ucar.unidata.geoloc.projection.LambertConformal: double falseEasting>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("],");

        $r11 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARAMETER[\"false_northing\",");

        $d3 = r2.<ucar.unidata.geoloc.projection.LambertConformal: double falseNorthing>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("],");

        $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public double getScale(double)
    {
        ucar.unidata.geoloc.projection.LambertConformal r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, $d9, d10, $d11, d12;

        r0 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        d12 := @parameter0: double;

        $d0 = staticinvoke <java.lang.Math: double toRadians(double)>(d12);

        $d1 = $d0 / 2.0;

        $d2 = 0.7853981633974483 + $d1;

        $d3 = staticinvoke <java.lang.Math: double tan(double)>($d2);

        $d4 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>($d3, $d4);

        $d7 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d6 = r0.<ucar.unidata.geoloc.projection.LambertConformal: double F>;

        d8 = $d7 * $d6;

        $d9 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        d10 = $d9 * $d5;

        $d11 = d8 / d10;

        return $d11;
    }

    public boolean crossSeam(ucar.unidata.geoloc.ProjectionPoint, ucar.unidata.geoloc.ProjectionPoint)
    {
        byte $b0, $b1;
        int $i2, $i3;
        ucar.unidata.geoloc.ProjectionPoint r0, r1;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        ucar.unidata.geoloc.projection.LambertConformal r2;

        r2 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        r0 := @parameter0: ucar.unidata.geoloc.ProjectionPoint;

        r1 := @parameter1: ucar.unidata.geoloc.ProjectionPoint;

        $z0 = staticinvoke <ucar.unidata.geoloc.ProjectionPointImpl: boolean isInfinite(ucar.unidata.geoloc.ProjectionPoint)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <ucar.unidata.geoloc.ProjectionPointImpl: boolean isInfinite(ucar.unidata.geoloc.ProjectionPoint)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        $d0 = interfaceinvoke r0.<ucar.unidata.geoloc.ProjectionPoint: double getX()>();

        $d1 = interfaceinvoke r1.<ucar.unidata.geoloc.ProjectionPoint: double getX()>();

        $d2 = $d0 * $d1;

        $b0 = $d2 cmpg 0.0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label3;

        $d3 = interfaceinvoke r0.<ucar.unidata.geoloc.ProjectionPoint: double getX()>();

        $d4 = interfaceinvoke r1.<ucar.unidata.geoloc.ProjectionPoint: double getX()>();

        $d5 = $d3 - $d4;

        $d6 = staticinvoke <java.lang.Math: double abs(double)>($d5);

        $b1 = $d6 cmpl 20000.0;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public ucar.unidata.geoloc.ProjectionPoint latLonToProj(ucar.unidata.geoloc.LatLonPoint, ucar.unidata.geoloc.ProjectionPointImpl)
    {
        ucar.unidata.geoloc.ProjectionPointImpl r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, $d16, d17, $d18, $d19, $d20, d21, $d22, $d23, $d24, $d25;
        ucar.unidata.geoloc.LatLonPoint r0;
        ucar.unidata.geoloc.projection.LambertConformal r1;

        r1 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        r0 := @parameter0: ucar.unidata.geoloc.LatLonPoint;

        r2 := @parameter1: ucar.unidata.geoloc.ProjectionPointImpl;

        $d0 = interfaceinvoke r0.<ucar.unidata.geoloc.LatLonPoint: double getLatitude()>();

        $d1 = interfaceinvoke r0.<ucar.unidata.geoloc.LatLonPoint: double getLongitude()>();

        $d2 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d3 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double lon0Degrees>;

        $d4 = $d1 - $d3;

        $d5 = staticinvoke <ucar.unidata.geoloc.LatLonPointImpl: double lonNormal(double)>($d4);

        $d6 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d7 = staticinvoke <java.lang.Math: double toRadians(double)>($d5);

        d8 = $d6 * $d7;

        $d9 = $d2 / 2.0;

        $d10 = 0.7853981633974483 + $d9;

        $d11 = staticinvoke <java.lang.Math: double tan(double)>($d10);

        $d12 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d13 = staticinvoke <java.lang.Math: double pow(double,double)>($d11, $d12);

        $d14 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double earthRadiusTimesF>;

        d15 = $d14 / $d13;

        $d16 = staticinvoke <java.lang.Math: double sin(double)>(d8);

        d17 = d15 * $d16;

        $d18 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double rho>;

        $d19 = staticinvoke <java.lang.Math: double cos(double)>(d8);

        $d20 = d15 * $d19;

        d21 = $d18 - $d20;

        $d22 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double falseEasting>;

        $d25 = d17 + $d22;

        $d23 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double falseNorthing>;

        $d24 = d21 + $d23;

        virtualinvoke r2.<ucar.unidata.geoloc.ProjectionPointImpl: void setLocation(double,double)>($d25, $d24);

        return r2;
    }

    public ucar.unidata.geoloc.LatLonPoint projToLatLon(ucar.unidata.geoloc.ProjectionPoint, ucar.unidata.geoloc.LatLonPointImpl)
    {
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5, $i6, $i7;
        ucar.unidata.geoloc.ProjectionPoint r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, d29, d30, d31, d32, $d33, d34;
        ucar.unidata.geoloc.projection.LambertConformal r1;
        ucar.unidata.geoloc.LatLonPointImpl r2;

        r1 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        r0 := @parameter0: ucar.unidata.geoloc.ProjectionPoint;

        r2 := @parameter1: ucar.unidata.geoloc.LatLonPointImpl;

        $d0 = interfaceinvoke r0.<ucar.unidata.geoloc.ProjectionPoint: double getX()>();

        $d1 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double falseEasting>;

        d29 = $d0 - $d1;

        $d2 = interfaceinvoke r0.<ucar.unidata.geoloc.ProjectionPoint: double getY()>();

        $d3 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double falseNorthing>;

        d30 = $d2 - $d3;

        d31 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double rho>;

        $d4 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $b0 = $d4 cmpg 0.0;

        $i4 = (int) $b0;

        if $i4 >= 0 goto label1;

        d31 = d31 * -1.0;

        d29 = d29 * -1.0;

        d30 = d30 * -1.0;

     label1:
        $d28 = d31 - d30;

        $d5 = staticinvoke <java.lang.Math: double atan2(double,double)>(d29, $d28);

        $d7 = d29 * d29;

        $d6 = $d28 * $d28;

        $d8 = $d7 + $d6;

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        d32 = $d9;

        $d10 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $b1 = $d10 cmpg 0.0;

        $i5 = (int) $b1;

        if $i5 >= 0 goto label2;

        d32 = $d9 * -1.0;

     label2:
        $d11 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d13 = $d5 / $d11;

        $d12 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double lon0>;

        $d14 = $d13 + $d12;

        $d15 = staticinvoke <java.lang.Math: double toDegrees(double)>($d14);

        $d16 = staticinvoke <java.lang.Math: double abs(double)>(d32);

        $b2 = $d16 cmpg 1.0E-6;

        $i6 = (int) $b2;

        if $i6 >= 0 goto label5;

        $d27 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $b3 = $d27 cmpg 0.0;

        $i7 = (int) $b3;

        if $i7 >= 0 goto label3;

        $d33 = -90.0;

        goto label4;

     label3:
        $d33 = 90.0;

     label4:
        d34 = $d33;

        goto label6;

     label5:
        $d18 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double earth_radius>;

        $d17 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double F>;

        $d19 = $d18 * $d17;

        $d22 = $d19 / d32;

        $d20 = r1.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d21 = 1.0 / $d20;

        $d23 = staticinvoke <java.lang.Math: double pow(double,double)>($d22, $d21);

        $d24 = staticinvoke <java.lang.Math: double atan(double)>($d23);

        $d25 = 2.0 * $d24;

        $d26 = $d25 - 1.5707963267948966;

        d34 = staticinvoke <java.lang.Math: double toDegrees(double)>($d26);

     label6:
        virtualinvoke r2.<ucar.unidata.geoloc.LatLonPointImpl: void setLatitude(double)>(d34);

        virtualinvoke r2.<ucar.unidata.geoloc.LatLonPointImpl: void setLongitude(double)>($d15);

        return r2;
    }

    public float[][] latLonToProj(float[][], float[][], int, int)
    {
        float $f0, $f1, $f2, $f3;
        float[] $r1, r2, r3, r5, r6;
        int i0, i1, i2, i3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, d14, $d15, d16, $d17, $d18, $d19, d20, $d21, $d22, $d23, $d24, d25;
        float[][] r0, r4;
        ucar.unidata.geoloc.projection.LambertConformal r7;

        r7 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        r0 := @parameter0: float[][];

        r4 := @parameter1: float[][];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = r0[0];

        i0 = lengthof $r1;

        r2 = r0[i1];

        r3 = r0[i2];

        r5 = r4[0];

        r6 = r4[1];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $f0 = r2[i3];

        d25 = (double) $f0;

        $f1 = r3[i3];

        d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d25);

        $d2 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double lon0Degrees>;

        $d3 = d0 - $d2;

        $d4 = staticinvoke <ucar.unidata.geoloc.LatLonPointImpl: double lonNormal(double)>($d3);

        $d5 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d6 = staticinvoke <java.lang.Math: double toRadians(double)>($d4);

        d7 = $d5 * $d6;

        $d8 = $d1 / 2.0;

        $d9 = 0.7853981633974483 + $d8;

        $d10 = staticinvoke <java.lang.Math: double tan(double)>($d9);

        $d11 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d12 = staticinvoke <java.lang.Math: double pow(double,double)>($d10, $d11);

        $d13 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double earthRadiusTimesF>;

        d14 = $d13 / $d12;

        $d15 = staticinvoke <java.lang.Math: double sin(double)>(d7);

        d16 = d14 * $d15;

        $d17 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double rho>;

        $d18 = staticinvoke <java.lang.Math: double cos(double)>(d7);

        $d19 = d14 * $d18;

        d20 = $d17 - $d19;

        $d21 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double falseEasting>;

        $d22 = d16 + $d21;

        $f2 = (float) $d22;

        r5[i3] = $f2;

        $d23 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double falseNorthing>;

        $d24 = d20 + $d23;

        $f3 = (float) $d24;

        r6[i3] = $f3;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r4;
    }

    public float[][] projToLatLon(float[][], float[][])
    {
        byte $b1, $b2, $b3, $b4;
        float $f0, $f1, $f2, $f3;
        float[] $r1, r2, r3, r5, r6;
        int i0, i5, $i6, $i7, $i8, $i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, d29, d30, d31, d32, $d33, d34;
        float[][] r0, r4;
        ucar.unidata.geoloc.projection.LambertConformal r7;

        r7 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        r0 := @parameter0: float[][];

        r4 := @parameter1: float[][];

        $r1 = r0[0];

        i0 = lengthof $r1;

        r2 = r0[0];

        r3 = r0[1];

        r5 = r4[0];

        r6 = r4[1];

        i5 = 0;

     label1:
        if i5 >= i0 goto label8;

        $f0 = r2[i5];

        $d1 = (double) $f0;

        $d0 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double falseEasting>;

        d29 = $d1 - $d0;

        $f1 = r3[i5];

        $d3 = (double) $f1;

        $d2 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double falseNorthing>;

        d30 = $d3 - $d2;

        d31 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double rho>;

        $d4 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $b1 = $d4 cmpg 0.0;

        $i6 = (int) $b1;

        if $i6 >= 0 goto label2;

        d31 = d31 * -1.0;

        d29 = d29 * -1.0;

        d30 = d30 * -1.0;

     label2:
        $d28 = d31 - d30;

        $d5 = staticinvoke <java.lang.Math: double atan2(double,double)>(d29, $d28);

        $d7 = d29 * d29;

        $d6 = $d28 * $d28;

        $d8 = $d7 + $d6;

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        d32 = $d9;

        $d10 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $b2 = $d10 cmpg 0.0;

        $i7 = (int) $b2;

        if $i7 >= 0 goto label3;

        d32 = $d9 * -1.0;

     label3:
        $d11 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d13 = $d5 / $d11;

        $d12 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double lon0>;

        $d14 = $d13 + $d12;

        $d15 = staticinvoke <java.lang.Math: double toDegrees(double)>($d14);

        $d16 = staticinvoke <java.lang.Math: double abs(double)>(d32);

        $b3 = $d16 cmpg 1.0E-6;

        $i8 = (int) $b3;

        if $i8 >= 0 goto label6;

        $d27 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $b4 = $d27 cmpg 0.0;

        $i9 = (int) $b4;

        if $i9 >= 0 goto label4;

        $d33 = -90.0;

        goto label5;

     label4:
        $d33 = 90.0;

     label5:
        d34 = $d33;

        goto label7;

     label6:
        $d18 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double earth_radius>;

        $d17 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double F>;

        $d19 = $d18 * $d17;

        $d22 = $d19 / d32;

        $d20 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d21 = 1.0 / $d20;

        $d23 = staticinvoke <java.lang.Math: double pow(double,double)>($d22, $d21);

        $d24 = staticinvoke <java.lang.Math: double atan(double)>($d23);

        $d25 = 2.0 * $d24;

        $d26 = $d25 - 1.5707963267948966;

        d34 = staticinvoke <java.lang.Math: double toDegrees(double)>($d26);

     label7:
        $f2 = (float) d34;

        r5[i5] = $f2;

        $f3 = (float) $d15;

        r6[i5] = $f3;

        i5 = i5 + 1;

        goto label1;

     label8:
        return r4;
    }

    public double[][] latLonToProj(double[][], double[][], int, int)
    {
        double[][] r0, r4;
        double[] $r1, r2, r3, r5, r6;
        int i0, i1, i2, i3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, d14, $d15, d16, $d17, $d18, $d19, d20, $d21, $d22, $d23, $d24, d25;
        ucar.unidata.geoloc.projection.LambertConformal r7;

        r7 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        r0 := @parameter0: double[][];

        r4 := @parameter1: double[][];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = r0[0];

        i0 = lengthof $r1;

        r2 = r0[i1];

        r3 = r0[i2];

        r5 = r4[0];

        r6 = r4[1];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        d25 = r2[i3];

        d0 = r3[i3];

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d25);

        $d2 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double lon0Degrees>;

        $d3 = d0 - $d2;

        $d4 = staticinvoke <ucar.unidata.geoloc.LatLonPointImpl: double lonNormal(double)>($d3);

        $d5 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d6 = staticinvoke <java.lang.Math: double toRadians(double)>($d4);

        d7 = $d5 * $d6;

        $d8 = $d1 / 2.0;

        $d9 = 0.7853981633974483 + $d8;

        $d10 = staticinvoke <java.lang.Math: double tan(double)>($d9);

        $d11 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d12 = staticinvoke <java.lang.Math: double pow(double,double)>($d10, $d11);

        $d13 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double earthRadiusTimesF>;

        d14 = $d13 / $d12;

        $d15 = staticinvoke <java.lang.Math: double sin(double)>(d7);

        d16 = d14 * $d15;

        $d17 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double rho>;

        $d18 = staticinvoke <java.lang.Math: double cos(double)>(d7);

        $d19 = d14 * $d18;

        d20 = $d17 - $d19;

        $d21 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double falseEasting>;

        $d22 = d16 + $d21;

        r5[i3] = $d22;

        $d23 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double falseNorthing>;

        $d24 = d20 + $d23;

        r6[i3] = $d24;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r4;
    }

    public double[][] projToLatLon(double[][], double[][])
    {
        byte $b1, $b2, $b3, $b4;
        double[][] r0, r4;
        double[] $r1, r2, r3, r5, r6;
        int i0, i5, $i6, $i7, $i8, $i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, d29, d30, d31, d32, $d33, d34;
        ucar.unidata.geoloc.projection.LambertConformal r7;

        r7 := @this: ucar.unidata.geoloc.projection.LambertConformal;

        r0 := @parameter0: double[][];

        r4 := @parameter1: double[][];

        $r1 = r0[0];

        i0 = lengthof $r1;

        r2 = r0[0];

        r3 = r0[1];

        r5 = r4[0];

        r6 = r4[1];

        i5 = 0;

     label1:
        if i5 >= i0 goto label8;

        $d1 = r2[i5];

        $d0 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double falseEasting>;

        d29 = $d1 - $d0;

        $d3 = r3[i5];

        $d2 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double falseNorthing>;

        d30 = $d3 - $d2;

        d31 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double rho>;

        $d4 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $b1 = $d4 cmpg 0.0;

        $i6 = (int) $b1;

        if $i6 >= 0 goto label2;

        d31 = d31 * -1.0;

        d29 = d29 * -1.0;

        d30 = d30 * -1.0;

     label2:
        $d28 = d31 - d30;

        $d5 = staticinvoke <java.lang.Math: double atan2(double,double)>(d29, $d28);

        $d7 = d29 * d29;

        $d6 = $d28 * $d28;

        $d8 = $d7 + $d6;

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>($d8);

        d32 = $d9;

        $d10 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $b2 = $d10 cmpg 0.0;

        $i7 = (int) $b2;

        if $i7 >= 0 goto label3;

        d32 = $d9 * -1.0;

     label3:
        $d11 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d13 = $d5 / $d11;

        $d12 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double lon0>;

        $d14 = $d13 + $d12;

        $d15 = staticinvoke <java.lang.Math: double toDegrees(double)>($d14);

        $d16 = staticinvoke <java.lang.Math: double abs(double)>(d32);

        $b3 = $d16 cmpg 1.0E-6;

        $i8 = (int) $b3;

        if $i8 >= 0 goto label6;

        $d27 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $b4 = $d27 cmpg 0.0;

        $i9 = (int) $b4;

        if $i9 >= 0 goto label4;

        $d33 = -90.0;

        goto label5;

     label4:
        $d33 = 90.0;

     label5:
        d34 = $d33;

        goto label7;

     label6:
        $d18 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double earth_radius>;

        $d17 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double F>;

        $d19 = $d18 * $d17;

        $d22 = $d19 / d32;

        $d20 = r7.<ucar.unidata.geoloc.projection.LambertConformal: double n>;

        $d21 = 1.0 / $d20;

        $d23 = staticinvoke <java.lang.Math: double pow(double,double)>($d22, $d21);

        $d24 = staticinvoke <java.lang.Math: double atan(double)>($d23);

        $d25 = 2.0 * $d24;

        $d26 = $d25 - 1.5707963267948966;

        d34 = staticinvoke <java.lang.Math: double toDegrees(double)>($d26);

     label7:
        r5[i5] = d34;

        r6[i5] = $d15;

        i5 = i5 + 1;

        goto label1;

     label8:
        return r4;
    }
}
