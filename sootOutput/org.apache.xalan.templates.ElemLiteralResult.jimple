public class org.apache.xalan.templates.ElemLiteralResult extends org.apache.xalan.templates.ElemUse
{
    private boolean isLiteralResultAsStylesheet;
    private java.util.Vector m_avts;
    private java.util.Vector m_xslAttr;
    private java.lang.String m_namespace;
    private java.lang.String m_localName;
    private java.lang.String m_rawName;
    private org.apache.xml.utils.StringVector m_ExtensionElementURIs;
    private java.lang.String m_version;
    private org.apache.xml.utils.StringVector m_excludeResultPrefixes;

    public void <init>()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        specialinvoke r0.<org.apache.xalan.templates.ElemUse: void <init>()>();

        r0.<org.apache.xalan.templates.ElemLiteralResult: boolean isLiteralResultAsStylesheet> = 0;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts> = null;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_xslAttr> = null;

        return;
    }

    public void setIsLiteralResultAsStylesheet(boolean)
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        z0 := @parameter0: boolean;

        r0.<org.apache.xalan.templates.ElemLiteralResult: boolean isLiteralResultAsStylesheet> = z0;

        return;
    }

    public boolean getIsLiteralResultAsStylesheet()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $z0 = r0.<org.apache.xalan.templates.ElemLiteralResult: boolean isLiteralResultAsStylesheet>;

        return $z0;
    }

    public void compose(org.apache.xalan.templates.StylesheetRoot) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.AVT r8;
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xalan.templates.StylesheetRoot r1;
        java.util.Vector $r3, $r4, $r5, $r6;
        org.apache.xalan.templates.StylesheetRoot$ComposeState $r2;
        int $i0, $i1, i2, $i4;
        java.lang.Object $r7;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        $r2 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState getComposeState()>();

        $r3 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: java.util.Vector getVariableNames()>();

        $r4 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        if null == $r4 goto label3;

        $r5 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $i0 = virtualinvoke $r5.<java.util.Vector: int size()>();

        i2 = $i0 - 1;

        goto label2;

     label1:
        $r6 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r8 = (org.apache.xalan.templates.AVT) $r7;

        $i1 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke r8.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>($r3, $i1);

        $i4 = (int) -1;

        i2 = i2 + $i4;

     label2:
        if i2 >= 0 goto label1;

     label3:
        return;
    }

    public void addLiteralResultAttribute(org.apache.xalan.templates.AVT)
    {
        java.util.Vector $r1, $r3, $r4;
        org.apache.xalan.templates.AVT r2;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r2 := @parameter0: org.apache.xalan.templates.AVT;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        if null != $r1 goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts> = $r4;

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        return;
    }

    public void addLiteralResultAttribute(java.lang.String)
    {
        java.util.Vector $r1, $r3, $r4;
        java.lang.String r2;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_xslAttr>;

        if null != $r1 goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_xslAttr> = $r4;

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_xslAttr>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        return;
    }

    public void setXmlSpace(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.AVT r1;
        java.lang.String $r2;
        org.apache.xalan.templates.ElemLiteralResult r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>(r1);

        $r2 = virtualinvoke r1.<org.apache.xalan.templates.AVT: java.lang.String getSimpleString()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("default");

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void setXmlSpace(int)>(2);

        goto label2;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void setXmlSpace(int)>(1);

     label2:
        return;
    }

    public org.apache.xalan.templates.AVT getLiteralResultAttribute(java.lang.String)
    {
        org.apache.xalan.templates.AVT r5;
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.util.Vector $r1, $r2, $r3;
        int $i0, i1, $i3;
        java.lang.Object $r4;
        java.lang.String $r6, r7;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r7 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        if null == $r1 goto label4;

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        i1 = $i0 - 1;

        goto label3;

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r5 = (org.apache.xalan.templates.AVT) $r4;

        $r6 = virtualinvoke r5.<org.apache.xalan.templates.AVT: java.lang.String getRawName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label2;

        return r5;

     label2:
        $i3 = (int) -1;

        i1 = i1 + $i3;

     label3:
        if i1 >= 0 goto label1;

     label4:
        return null;
    }

    public boolean containsExcludeResultPrefix(java.lang.String, java.lang.String)
    {
        int $i0, $i1, i2;
        java.lang.String r0, $r8, $r9, r11;
        org.apache.xml.utils.StringVector $r2, $r3, $r4, $r5, $r6, $r7, $r10;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xalan.templates.ElemLiteralResult r1;

        r1 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r11 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r2 = r1.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        if null != $r2 goto label2;

        $r10 = r1.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if null != $r10 goto label2;

     label1:
        $z0 = specialinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: boolean containsExcludeResultPrefix(java.lang.String,java.lang.String)>(r11, r0);

        return $z0;

     label2:
        $i0 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        r11 = "#default";

     label3:
        $r3 = r1.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        if $r3 == null goto label7;

        i2 = 0;

        goto label6;

     label4:
        $r7 = r1.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        $r8 = virtualinvoke $r7.<org.apache.xml.utils.StringVector: java.lang.String elementAt(int)>(i2);

        $r9 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: java.lang.String getNamespaceForPrefix(java.lang.String)>($r8);

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        i2 = i2 + 1;

     label6:
        $r6 = r1.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        $i1 = virtualinvoke $r6.<org.apache.xml.utils.StringVector: int size()>();

        if i2 < $i1 goto label4;

     label7:
        $r4 = r1.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if $r4 == null goto label8;

        $r5 = r1.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        $z2 = virtualinvoke $r5.<org.apache.xml.utils.StringVector: boolean contains(java.lang.String)>(r0);

        if $z2 == 0 goto label8;

        return 1;

     label8:
        $z1 = specialinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: boolean containsExcludeResultPrefix(java.lang.String,java.lang.String)>(r11, r0);

        return $z1;
    }

    public void resolvePrefixTables() throws javax.xml.transform.TransformerException
    {
        java.util.Vector $r3, $r4, $r29;
        org.apache.xalan.templates.NamespaceAlias $r9, $r19;
        org.apache.xalan.templates.AVT r6;
        java.lang.StringBuffer $r13, $r14, $r15, $r16, $r23, $r24, $r25, $r27;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r2, $r7, $r8, $r10, $r11, $r12, $r17, $r18, $r20, $r21, $r22, $r26, $r28, r30;
        org.apache.xalan.templates.ElemLiteralResult r0;
        org.apache.xalan.templates.StylesheetRoot $r1;
        java.lang.Object $r5;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void resolvePrefixTables()>();

        $r1 = virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.StylesheetRoot getStylesheetRoot()>();

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace>;

        if null == $r2 goto label2;

        $r17 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace>;

        $i3 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i3 <= 0 goto label2;

        $r18 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace>;

        $r19 = virtualinvoke $r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.NamespaceAlias getNamespaceAliasComposed(java.lang.String)>($r18);

        if null == $r19 goto label2;

        $r20 = virtualinvoke $r19.<org.apache.xalan.templates.NamespaceAlias: java.lang.String getResultNamespace()>();

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace> = $r20;

        $r21 = virtualinvoke $r19.<org.apache.xalan.templates.NamespaceAlias: java.lang.String getStylesheetPrefix()>();

        if null == $r21 goto label1;

        $i4 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i4 <= 0 goto label1;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r26 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_localName>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName> = $r28;

        goto label2;

     label1:
        $r22 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_localName>;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName> = $r22;

     label2:
        $r29 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        if null == $r29 goto label7;

        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        i5 = 0;

        goto label6;

     label3:
        $r4 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        r6 = (org.apache.xalan.templates.AVT) $r5;

        $r7 = virtualinvoke r6.<org.apache.xalan.templates.AVT: java.lang.String getURI()>();

        if null == $r7 goto label5;

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i1 <= 0 goto label5;

        $r8 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace>;

        $r9 = virtualinvoke $r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.NamespaceAlias getNamespaceAliasComposed(java.lang.String)>($r8);

        if null == $r9 goto label5;

        $r10 = virtualinvoke $r9.<org.apache.xalan.templates.NamespaceAlias: java.lang.String getResultNamespace()>();

        $r11 = virtualinvoke $r9.<org.apache.xalan.templates.NamespaceAlias: java.lang.String getStylesheetPrefix()>();

        $r12 = virtualinvoke r6.<org.apache.xalan.templates.AVT: java.lang.String getName()>();

        r30 = $r12;

        if null == $r11 goto label4;

        $i2 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i2 <= 0 goto label4;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        r30 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        virtualinvoke r6.<org.apache.xalan.templates.AVT: void setURI(java.lang.String)>($r10);

        virtualinvoke r6.<org.apache.xalan.templates.AVT: void setRawName(java.lang.String)>(r30);

     label5:
        i5 = i5 + 1;

     label6:
        if i5 < $i0 goto label3;

     label7:
        return;
    }

    boolean needToCheckExclude()
    {
        java.util.Vector $r2, $r3, $r5;
        org.apache.xml.utils.StringVector $r1, $r4;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        if null != $r1 goto label1;

        $r3 = r0.<org.apache.xalan.templates.ElemTemplateElement: java.util.Vector m_prefixTable>;

        if null != $r3 goto label1;

        $r4 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if $r4 != null goto label1;

        return 0;

     label1:
        $r5 = r0.<org.apache.xalan.templates.ElemTemplateElement: java.util.Vector m_prefixTable>;

        if null != $r5 goto label2;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.templates.ElemTemplateElement: java.util.Vector m_prefixTable> = $r2;

     label2:
        return 1;
    }

    public void setNamespace(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        if null != r1 goto label1;

        r1 = "";

     label1:
        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace> = r1;

        return;
    }

    public java.lang.String getNamespace()
    {
        java.lang.String $r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_namespace>;

        return $r1;
    }

    public void setLocalName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_localName> = r1;

        return;
    }

    public java.lang.String getLocalName()
    {
        java.lang.String $r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_localName>;

        return $r1;
    }

    public void setRawName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName> = r1;

        return;
    }

    public java.lang.String getRawName()
    {
        java.lang.String $r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName>;

        return $r1;
    }

    public java.lang.String getPrefix()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_localName>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        i3 = $i2 - 1;

        if i3 <= 0 goto label1;

        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        goto label2;

     label1:
        $r4 = "";

     label2:
        return $r4;
    }

    public void setExtensionElementPrefixes(org.apache.xml.utils.StringVector)
    {
        org.apache.xml.utils.StringVector r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xml.utils.StringVector;

        r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs> = r1;

        return;
    }

    public java.lang.String getExtensionElementPrefix(int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        int i0;
        java.lang.String $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        org.apache.xml.utils.StringVector $r1, $r2;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if null != $r1 goto label1;

        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: java.lang.String elementAt(int)>(i0);

        return $r3;
    }

    public int getExtensionElementPrefixCount()
    {
        int $i0;
        org.apache.xml.utils.StringVector $r1, $r2;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        $i0 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: int size()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public boolean containsExtensionElementURI(java.lang.String)
    {
        java.lang.String r2;
        org.apache.xml.utils.StringVector $r1, $r3;
        org.apache.xalan.templates.ElemLiteralResult r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        if null != $r1 goto label1;

        return 0;

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_ExtensionElementURIs>;

        $z0 = virtualinvoke $r3.<org.apache.xml.utils.StringVector: boolean contains(java.lang.String)>(r2);

        return $z0;
    }

    public int getXSLToken()
    {
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        return 77;
    }

    public java.lang.String getNodeName()
    {
        java.lang.String $r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_rawName>;

        return $r1;
    }

    public void setVersion(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_version> = r1;

        return;
    }

    public java.lang.String getVersion()
    {
        java.lang.String $r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String m_version>;

        return $r1;
    }

    public void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)
    {
        org.apache.xml.utils.StringVector r1;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xml.utils.StringVector;

        r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes> = r1;

        return;
    }

    private boolean excludeResultNSDecl(java.lang.String, java.lang.String) throws javax.xml.transform.TransformerException
    {
        java.lang.String r2, r3;
        org.apache.xml.utils.StringVector $r1;
        org.apache.xalan.templates.ElemLiteralResult r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: org.apache.xml.utils.StringVector m_excludeResultPrefixes>;

        if null == $r1 goto label1;

        $z0 = virtualinvoke r0.<org.apache.xalan.templates.ElemLiteralResult: boolean containsExcludeResultPrefix(java.lang.String,java.lang.String)>(r2, r3);

        return $z0;

     label1:
        return 0;
    }

    public void execute(org.apache.xalan.transformer.TransformerImpl) throws javax.xml.transform.TransformerException
    {
        org.apache.xml.serializer.SerializationHandler $r1;
        org.apache.xalan.trace.TraceManager $r13, $r23;
        java.util.Vector $r8, $r14, $r15;
        boolean $z0, $z1;
        org.xml.sax.SAXException $r24, $r26, $r28, $r31;
        javax.xml.transform.TransformerException $r30, r33, $r34, $r35, $r36, $r37;
        org.apache.xalan.templates.AVT r17;
        org.apache.xpath.XPathContext $r18;
        int $i0, $i1, i2, $i4;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r19, $r20, $r21, $r22;
        org.apache.xalan.templates.ElemLiteralResult r2;
        java.lang.Object $r16;
        org.apache.xalan.transformer.TransformerImpl r0;

        r2 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r0 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        $r1 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler getSerializationHandler()>();

     label01:
        $z0 = <org.apache.xalan.transformer.TransformerImpl: boolean S_DEBUG>;

        if $z0 == 0 goto label02;

        interfaceinvoke $r1.<org.apache.xml.serializer.SerializationHandler: void flushPending()>();

        $r23 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.trace.TraceManager getTraceManager()>();

        virtualinvoke $r23.<org.apache.xalan.trace.TraceManager: void fireTraceEvent(org.apache.xalan.templates.ElemTemplateElement)>(r2);

     label02:
        $r3 = virtualinvoke r2.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getPrefix()>();

        $r4 = virtualinvoke r2.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNamespace()>();

        interfaceinvoke $r1.<org.xml.sax.ContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)>($r3, $r4);

        virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: void executeNSDecls(org.apache.xalan.transformer.TransformerImpl)>(r0);

        $r5 = virtualinvoke r2.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNamespace()>();

        $r6 = virtualinvoke r2.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getLocalName()>();

        $r7 = virtualinvoke r2.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getRawName()>();

        interfaceinvoke $r1.<org.apache.xml.serializer.ExtendedContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String)>($r5, $r6, $r7);

     label03:
        goto label05;

     label04:
        $r31 := @caughtexception;

        $r34 = new javax.xml.transform.TransformerException;

        specialinvoke $r34.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r31);

        throw $r34;

     label05:
        r33 = null;

     label06:
        specialinvoke r2.<org.apache.xalan.templates.ElemUse: void execute(org.apache.xalan.transformer.TransformerImpl)>(r0);

        $r8 = r2.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        if null == $r8 goto label10;

        $r14 = r2.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $i0 = virtualinvoke $r14.<java.util.Vector: int size()>();

        i2 = $i0 - 1;

        goto label09;

     label07:
        $r15 = r2.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $r16 = virtualinvoke $r15.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r17 = (org.apache.xalan.templates.AVT) $r16;

        $r18 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $i1 = virtualinvoke $r18.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        $r19 = virtualinvoke r17.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r18, $i1, r2);

        if null == $r19 goto label08;

        $r20 = virtualinvoke r17.<org.apache.xalan.templates.AVT: java.lang.String getURI()>();

        $r21 = virtualinvoke r17.<org.apache.xalan.templates.AVT: java.lang.String getName()>();

        $r22 = virtualinvoke r17.<org.apache.xalan.templates.AVT: java.lang.String getRawName()>();

        interfaceinvoke $r1.<org.apache.xml.serializer.ExtendedContentHandler: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r20, $r21, $r22, "CDATA", $r19);

     label08:
        $i4 = (int) -1;

        i2 = i2 + $i4;

     label09:
        if i2 >= 0 goto label07;

     label10:
        virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,boolean)>(r2, 1);

     label11:
        goto label14;

     label12:
        $r30 := @caughtexception;

        r33 = $r30;

        goto label14;

     label13:
        $r28 := @caughtexception;

        $r35 = new javax.xml.transform.TransformerException;

        specialinvoke $r35.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r28);

        r33 = $r35;

     label14:
        $z1 = <org.apache.xalan.transformer.TransformerImpl: boolean S_DEBUG>;

        if $z1 == 0 goto label15;

        $r13 = virtualinvoke r0.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.trace.TraceManager getTraceManager()>();

        virtualinvoke $r13.<org.apache.xalan.trace.TraceManager: void fireTraceEndEvent(org.apache.xalan.templates.ElemTemplateElement)>(r2);

     label15:
        $r9 = virtualinvoke r2.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNamespace()>();

        $r10 = virtualinvoke r2.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getLocalName()>();

        $r11 = virtualinvoke r2.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getRawName()>();

        interfaceinvoke $r1.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>($r9, $r10, $r11);

     label16:
        goto label19;

     label17:
        $r26 := @caughtexception;

        if r33 == null goto label18;

        throw r33;

     label18:
        $r36 = new javax.xml.transform.TransformerException;

        specialinvoke $r36.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r26);

        throw $r36;

     label19:
        if r33 == null goto label20;

        throw r33;

     label20:
        virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: void unexecuteNSDecls(org.apache.xalan.transformer.TransformerImpl)>(r0);

     label21:
        $r12 = virtualinvoke r2.<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getPrefix()>();

        interfaceinvoke $r1.<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>($r12);

     label22:
        goto label24;

     label23:
        $r24 := @caughtexception;

        $r37 = new javax.xml.transform.TransformerException;

        specialinvoke $r37.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r24);

        throw $r37;

     label24:
        return;

        catch org.xml.sax.SAXException from label01 to label03 with label04;
        catch javax.xml.transform.TransformerException from label06 to label11 with label12;
        catch org.xml.sax.SAXException from label06 to label11 with label13;
        catch org.xml.sax.SAXException from label14 to label16 with label17;
        catch org.xml.sax.SAXException from label21 to label22 with label23;
    }

    public java.util.Enumeration enumerateLiteralResultAttributes()
    {
        java.util.Vector $r1, $r2;
        java.util.Enumeration $r3;
        org.apache.xalan.templates.ElemLiteralResult r0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        $r1 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        if null != $r1 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

     label2:
        return $r3;
    }

    protected boolean accept(org.apache.xalan.templates.XSLTVisitor)
    {
        org.apache.xalan.templates.XSLTVisitor r0;
        org.apache.xalan.templates.ElemLiteralResult r1;
        boolean $z0;

        r1 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r0 := @parameter0: org.apache.xalan.templates.XSLTVisitor;

        $z0 = virtualinvoke r0.<org.apache.xalan.templates.XSLTVisitor: boolean visitLiteralResultElement(org.apache.xalan.templates.ElemLiteralResult)>(r1);

        return $z0;
    }

    protected void callChildVisitors(org.apache.xalan.templates.XSLTVisitor, boolean)
    {
        org.apache.xalan.templates.XSLTVisitor r1;
        org.apache.xalan.templates.AVT r6;
        org.apache.xalan.templates.ElemLiteralResult r0;
        java.util.Vector $r2, $r3, $r4;
        int $i0, i1, $i3;
        java.lang.Object $r5;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.ElemLiteralResult;

        r1 := @parameter0: org.apache.xalan.templates.XSLTVisitor;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label3;

        $r2 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        if null == $r2 goto label3;

        $r3 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        i1 = $i0 - 1;

        goto label2;

     label1:
        $r4 = r0.<org.apache.xalan.templates.ElemLiteralResult: java.util.Vector m_avts>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r6 = (org.apache.xalan.templates.AVT) $r5;

        virtualinvoke r6.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

        $i3 = (int) -1;

        i1 = i1 + $i3;

     label2:
        if i1 >= 0 goto label1;

     label3:
        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>(r1, z0);

        return;
    }
}
