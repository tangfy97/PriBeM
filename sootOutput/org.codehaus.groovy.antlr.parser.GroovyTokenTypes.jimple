public interface  org.codehaus.groovy.antlr.parser.GroovyTokenTypes extends java.lang.Object
{
    public static final int EOF;
    public static final int NULL_TREE_LOOKAHEAD;
    public static final int BLOCK;
    public static final int MODIFIERS;
    public static final int OBJBLOCK;
    public static final int SLIST;
    public static final int METHOD_DEF;
    public static final int VARIABLE_DEF;
    public static final int INSTANCE_INIT;
    public static final int STATIC_INIT;
    public static final int TYPE;
    public static final int CLASS_DEF;
    public static final int INTERFACE_DEF;
    public static final int PACKAGE_DEF;
    public static final int ARRAY_DECLARATOR;
    public static final int EXTENDS_CLAUSE;
    public static final int IMPLEMENTS_CLAUSE;
    public static final int PARAMETERS;
    public static final int PARAMETER_DEF;
    public static final int LABELED_STAT;
    public static final int TYPECAST;
    public static final int INDEX_OP;
    public static final int POST_INC;
    public static final int POST_DEC;
    public static final int METHOD_CALL;
    public static final int EXPR;
    public static final int IMPORT;
    public static final int UNARY_MINUS;
    public static final int UNARY_PLUS;
    public static final int CASE_GROUP;
    public static final int ELIST;
    public static final int FOR_INIT;
    public static final int FOR_CONDITION;
    public static final int FOR_ITERATOR;
    public static final int EMPTY_STAT;
    public static final int FINAL;
    public static final int ABSTRACT;
    public static final int UNUSED_GOTO;
    public static final int UNUSED_CONST;
    public static final int UNUSED_DO;
    public static final int STRICTFP;
    public static final int SUPER_CTOR_CALL;
    public static final int CTOR_CALL;
    public static final int CTOR_IDENT;
    public static final int VARIABLE_PARAMETER_DEF;
    public static final int STRING_CONSTRUCTOR;
    public static final int STRING_CTOR_MIDDLE;
    public static final int CLOSABLE_BLOCK;
    public static final int IMPLICIT_PARAMETERS;
    public static final int SELECT_SLOT;
    public static final int DYNAMIC_MEMBER;
    public static final int LABELED_ARG;
    public static final int SPREAD_ARG;
    public static final int SPREAD_MAP_ARG;
    public static final int LIST_CONSTRUCTOR;
    public static final int MAP_CONSTRUCTOR;
    public static final int FOR_IN_ITERABLE;
    public static final int STATIC_IMPORT;
    public static final int ENUM_DEF;
    public static final int ENUM_CONSTANT_DEF;
    public static final int FOR_EACH_CLAUSE;
    public static final int ANNOTATION_DEF;
    public static final int ANNOTATIONS;
    public static final int ANNOTATION;
    public static final int ANNOTATION_MEMBER_VALUE_PAIR;
    public static final int ANNOTATION_FIELD_DEF;
    public static final int ANNOTATION_ARRAY_INIT;
    public static final int TYPE_ARGUMENTS;
    public static final int TYPE_ARGUMENT;
    public static final int TYPE_PARAMETERS;
    public static final int TYPE_PARAMETER;
    public static final int WILDCARD_TYPE;
    public static final int TYPE_UPPER_BOUNDS;
    public static final int TYPE_LOWER_BOUNDS;
    public static final int CLOSURE_LIST;
    public static final int SH_COMMENT;
    public static final int LITERAL_package;
    public static final int LITERAL_import;
    public static final int LITERAL_static;
    public static final int LITERAL_def;
    public static final int LBRACK;
    public static final int RBRACK;
    public static final int IDENT;
    public static final int STRING_LITERAL;
    public static final int LT;
    public static final int DOT;
    public static final int LPAREN;
    public static final int LITERAL_class;
    public static final int LITERAL_interface;
    public static final int LITERAL_enum;
    public static final int AT;
    public static final int QUESTION;
    public static final int LITERAL_extends;
    public static final int LITERAL_super;
    public static final int COMMA;
    public static final int GT;
    public static final int SR;
    public static final int BSR;
    public static final int LITERAL_void;
    public static final int LITERAL_boolean;
    public static final int LITERAL_byte;
    public static final int LITERAL_char;
    public static final int LITERAL_short;
    public static final int LITERAL_int;
    public static final int LITERAL_float;
    public static final int LITERAL_long;
    public static final int LITERAL_double;
    public static final int STAR;
    public static final int LITERAL_as;
    public static final int LITERAL_private;
    public static final int LITERAL_public;
    public static final int LITERAL_protected;
    public static final int LITERAL_transient;
    public static final int LITERAL_native;
    public static final int LITERAL_threadsafe;
    public static final int LITERAL_synchronized;
    public static final int LITERAL_volatile;
    public static final int RPAREN;
    public static final int ASSIGN;
    public static final int BAND;
    public static final int LCURLY;
    public static final int RCURLY;
    public static final int SEMI;
    public static final int NLS;
    public static final int LITERAL_default;
    public static final int LITERAL_throws;
    public static final int LITERAL_implements;
    public static final int LITERAL_this;
    public static final int TRIPLE_DOT;
    public static final int CLOSABLE_BLOCK_OP;
    public static final int COLON;
    public static final int LITERAL_if;
    public static final int LITERAL_else;
    public static final int LITERAL_while;
    public static final int LITERAL_switch;
    public static final int LITERAL_for;
    public static final int LITERAL_in;
    public static final int LITERAL_return;
    public static final int LITERAL_break;
    public static final int LITERAL_continue;
    public static final int LITERAL_throw;
    public static final int LITERAL_assert;
    public static final int PLUS;
    public static final int MINUS;
    public static final int LITERAL_case;
    public static final int LITERAL_try;
    public static final int LITERAL_finally;
    public static final int LITERAL_catch;
    public static final int SPREAD_DOT;
    public static final int OPTIONAL_DOT;
    public static final int MEMBER_POINTER;
    public static final int PLUS_ASSIGN;
    public static final int MINUS_ASSIGN;
    public static final int STAR_ASSIGN;
    public static final int DIV_ASSIGN;
    public static final int MOD_ASSIGN;
    public static final int SR_ASSIGN;
    public static final int BSR_ASSIGN;
    public static final int SL_ASSIGN;
    public static final int BAND_ASSIGN;
    public static final int BXOR_ASSIGN;
    public static final int BOR_ASSIGN;
    public static final int STAR_STAR_ASSIGN;
    public static final int ELVIS_OPERATOR;
    public static final int LOR;
    public static final int LAND;
    public static final int BOR;
    public static final int BXOR;
    public static final int REGEX_FIND;
    public static final int REGEX_MATCH;
    public static final int NOT_EQUAL;
    public static final int EQUAL;
    public static final int COMPARE_TO;
    public static final int LE;
    public static final int GE;
    public static final int LITERAL_instanceof;
    public static final int SL;
    public static final int RANGE_INCLUSIVE;
    public static final int RANGE_EXCLUSIVE;
    public static final int INC;
    public static final int DIV;
    public static final int MOD;
    public static final int DEC;
    public static final int STAR_STAR;
    public static final int BNOT;
    public static final int LNOT;
    public static final int STRING_CTOR_START;
    public static final int STRING_CTOR_END;
    public static final int LITERAL_new;
    public static final int LITERAL_true;
    public static final int LITERAL_false;
    public static final int LITERAL_null;
    public static final int NUM_INT;
    public static final int NUM_FLOAT;
    public static final int NUM_LONG;
    public static final int NUM_DOUBLE;
    public static final int NUM_BIG_INT;
    public static final int NUM_BIG_DECIMAL;
    public static final int DOLLAR;
    public static final int WS;
    public static final int ONE_NL;
    public static final int SL_COMMENT;
    public static final int ML_COMMENT;
    public static final int STRING_CH;
    public static final int REGEXP_LITERAL;
    public static final int REGEXP_CTOR_END;
    public static final int REGEXP_SYMBOL;
    public static final int ESC;
    public static final int STRING_NL;
    public static final int HEX_DIGIT;
    public static final int VOCAB;
    public static final int LETTER;
    public static final int DIGIT;
    public static final int EXPONENT;
    public static final int FLOAT_SUFFIX;
    public static final int BIG_SUFFIX;

    public static void <clinit>()
    {
        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BIG_SUFFIX> = 217;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int FLOAT_SUFFIX> = 216;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int EXPONENT> = 215;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int DIGIT> = 214;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LETTER> = 213;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int VOCAB> = 212;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int HEX_DIGIT> = 211;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STRING_NL> = 210;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ESC> = 209;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int REGEXP_SYMBOL> = 208;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int REGEXP_CTOR_END> = 207;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int REGEXP_LITERAL> = 206;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STRING_CH> = 205;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ML_COMMENT> = 204;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SL_COMMENT> = 203;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ONE_NL> = 202;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int WS> = 201;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int DOLLAR> = 200;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int NUM_BIG_DECIMAL> = 199;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int NUM_BIG_INT> = 198;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int NUM_DOUBLE> = 197;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int NUM_LONG> = 196;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int NUM_FLOAT> = 195;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int NUM_INT> = 194;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_null> = 193;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_false> = 192;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_true> = 191;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_new> = 190;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STRING_CTOR_END> = 189;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STRING_CTOR_START> = 188;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LNOT> = 187;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BNOT> = 186;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STAR_STAR> = 185;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int DEC> = 184;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int MOD> = 183;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int DIV> = 182;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int INC> = 181;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int RANGE_EXCLUSIVE> = 180;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int RANGE_INCLUSIVE> = 179;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SL> = 178;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_instanceof> = 177;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int GE> = 176;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LE> = 175;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int COMPARE_TO> = 174;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int EQUAL> = 173;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int NOT_EQUAL> = 172;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int REGEX_MATCH> = 171;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int REGEX_FIND> = 170;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BXOR> = 169;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BOR> = 168;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LAND> = 167;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LOR> = 166;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ELVIS_OPERATOR> = 165;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STAR_STAR_ASSIGN> = 164;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BOR_ASSIGN> = 163;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BXOR_ASSIGN> = 162;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BAND_ASSIGN> = 161;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SL_ASSIGN> = 160;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BSR_ASSIGN> = 159;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SR_ASSIGN> = 158;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int MOD_ASSIGN> = 157;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int DIV_ASSIGN> = 156;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STAR_ASSIGN> = 155;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int MINUS_ASSIGN> = 154;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int PLUS_ASSIGN> = 153;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int MEMBER_POINTER> = 152;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int OPTIONAL_DOT> = 151;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SPREAD_DOT> = 150;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_catch> = 149;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_finally> = 148;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_try> = 147;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_case> = 146;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int MINUS> = 145;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int PLUS> = 144;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_assert> = 143;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_throw> = 142;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_continue> = 141;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_break> = 140;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_return> = 139;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_in> = 138;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_for> = 137;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_switch> = 136;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_while> = 135;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_else> = 134;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_if> = 133;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int COLON> = 132;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int CLOSABLE_BLOCK_OP> = 131;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int TRIPLE_DOT> = 130;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_this> = 129;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_implements> = 128;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_throws> = 127;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_default> = 126;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int NLS> = 125;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SEMI> = 124;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int RCURLY> = 123;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LCURLY> = 122;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BAND> = 121;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ASSIGN> = 120;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int RPAREN> = 119;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_volatile> = 118;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_synchronized> = 117;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_threadsafe> = 116;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_native> = 115;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_transient> = 114;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_protected> = 113;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_public> = 112;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_private> = 111;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_as> = 110;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STAR> = 109;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_double> = 108;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_long> = 107;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_float> = 106;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_int> = 105;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_short> = 104;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_char> = 103;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_byte> = 102;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_boolean> = 101;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_void> = 100;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BSR> = 99;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SR> = 98;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int GT> = 97;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int COMMA> = 96;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_super> = 95;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_extends> = 94;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int QUESTION> = 93;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int AT> = 92;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_enum> = 91;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_interface> = 90;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_class> = 89;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LPAREN> = 88;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int DOT> = 87;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LT> = 86;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STRING_LITERAL> = 85;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int IDENT> = 84;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int RBRACK> = 83;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LBRACK> = 82;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_def> = 81;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_static> = 80;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_import> = 79;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LITERAL_package> = 78;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SH_COMMENT> = 77;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int CLOSURE_LIST> = 76;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int TYPE_LOWER_BOUNDS> = 75;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int TYPE_UPPER_BOUNDS> = 74;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int WILDCARD_TYPE> = 73;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int TYPE_PARAMETER> = 72;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int TYPE_PARAMETERS> = 71;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int TYPE_ARGUMENT> = 70;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int TYPE_ARGUMENTS> = 69;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ANNOTATION_ARRAY_INIT> = 68;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ANNOTATION_FIELD_DEF> = 67;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ANNOTATION_MEMBER_VALUE_PAIR> = 66;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ANNOTATION> = 65;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ANNOTATIONS> = 64;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ANNOTATION_DEF> = 63;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int FOR_EACH_CLAUSE> = 62;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ENUM_CONSTANT_DEF> = 61;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ENUM_DEF> = 60;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STATIC_IMPORT> = 59;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int FOR_IN_ITERABLE> = 58;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int MAP_CONSTRUCTOR> = 57;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LIST_CONSTRUCTOR> = 56;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SPREAD_MAP_ARG> = 55;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SPREAD_ARG> = 54;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LABELED_ARG> = 53;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int DYNAMIC_MEMBER> = 52;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SELECT_SLOT> = 51;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int IMPLICIT_PARAMETERS> = 50;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int CLOSABLE_BLOCK> = 49;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STRING_CTOR_MIDDLE> = 48;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STRING_CONSTRUCTOR> = 47;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int VARIABLE_PARAMETER_DEF> = 46;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int CTOR_IDENT> = 45;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int CTOR_CALL> = 44;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SUPER_CTOR_CALL> = 43;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STRICTFP> = 42;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int UNUSED_DO> = 41;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int UNUSED_CONST> = 40;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int UNUSED_GOTO> = 39;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ABSTRACT> = 38;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int FINAL> = 37;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int EMPTY_STAT> = 36;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int FOR_ITERATOR> = 35;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int FOR_CONDITION> = 34;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int FOR_INIT> = 33;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ELIST> = 32;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int CASE_GROUP> = 31;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int UNARY_PLUS> = 30;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int UNARY_MINUS> = 29;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int IMPORT> = 28;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int EXPR> = 27;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int METHOD_CALL> = 26;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int POST_DEC> = 25;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int POST_INC> = 24;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int INDEX_OP> = 23;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int TYPECAST> = 22;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int LABELED_STAT> = 21;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int PARAMETER_DEF> = 20;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int PARAMETERS> = 19;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int IMPLEMENTS_CLAUSE> = 18;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int EXTENDS_CLAUSE> = 17;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int ARRAY_DECLARATOR> = 16;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int PACKAGE_DEF> = 15;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int INTERFACE_DEF> = 14;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int CLASS_DEF> = 13;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int TYPE> = 12;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int STATIC_INIT> = 11;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int INSTANCE_INIT> = 10;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int VARIABLE_DEF> = 9;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int METHOD_DEF> = 8;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int SLIST> = 7;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int OBJBLOCK> = 6;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int MODIFIERS> = 5;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int BLOCK> = 4;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int NULL_TREE_LOOKAHEAD> = 3;

        <org.codehaus.groovy.antlr.parser.GroovyTokenTypes: int EOF> = 1;

        return;
    }
}
