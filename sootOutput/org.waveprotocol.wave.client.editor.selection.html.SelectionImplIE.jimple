class org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE extends org.waveprotocol.wave.client.editor.selection.html.SelectionImpl
{
    private static final com.google.gwt.dom.client.Element setter;
    private org.waveprotocol.wave.model.document.util.Point hint;
    private java.lang.String savedSelection;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: void <init>()>();

        return;
    }

    void clear()
    {
        org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE $r0;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r1;

        r1 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE: org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE get()>();

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE: void empty()>();

        return;
    }

    org.waveprotocol.wave.model.document.util.FocusedPointRange get()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r0;
        org.waveprotocol.wave.model.document.util.PointRange $r1;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r4;
        org.waveprotocol.wave.model.document.util.Point $r2, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.PointRange getOrdered()>();

        if $r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = new org.waveprotocol.wave.model.document.util.FocusedPointRange;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        specialinvoke $r4.<org.waveprotocol.wave.model.document.util.FocusedPointRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r2, $r3);

     label2:
        return $r4;
    }

    boolean isOrdered()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        return 1;
    }

    org.waveprotocol.wave.model.document.util.PointRange getOrdered()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r2;
        org.waveprotocol.wave.model.document.util.PointRange $r9;
        org.waveprotocol.wave.common.logging.Logger $r8;
        org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE $r0;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE $r1, $r3;
        org.waveprotocol.wave.common.logging.LoggerBundle $r7;
        com.google.gwt.core.client.JavaScriptException $r6;
        org.waveprotocol.wave.model.document.util.Point $r4, $r5;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

     label1:
        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE: org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE get()>();

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE createRange()>();

        $z0 = specialinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: boolean checkNoSelection(org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r0, $r1);

        if $z0 == 0 goto label3;

     label2:
        return null;

     label3:
        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE duplicate()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapse(boolean)>(1);

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapse(boolean)>(0);

        $r4 = specialinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.Point pointAtCollapsedRange(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r1);

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: boolean equivalent(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r1, $r3);

        if $z1 == 0 goto label4;

        $r9 = new org.waveprotocol.wave.model.document.util.PointRange;

        specialinvoke $r9.<org.waveprotocol.wave.model.document.util.PointRange: void <init>(org.waveprotocol.wave.model.document.util.Point)>($r4);

        goto label5;

     label4:
        $r9 = new org.waveprotocol.wave.model.document.util.PointRange;

        $r5 = specialinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.Point pointAtCollapsedRange(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r3);

        specialinvoke $r9.<org.waveprotocol.wave.model.document.util.PointRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r4, $r5);

     label5:
        return $r9;

     label6:
        $r6 := @caughtexception;

        $r7 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r8.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Throwable)>("Cannot get selection", $r6);

        return null;

        catch com.google.gwt.core.client.JavaScriptException from label1 to label2 with label6;
        catch com.google.gwt.core.client.JavaScriptException from label3 to label5 with label6;
    }

    private boolean pointMatchesRange(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r0;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode $r4;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE $r2, r3;
        java.lang.Exception $r5;
        int $i0;
        org.waveprotocol.wave.model.document.util.Point r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

     label1:
        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapsedRangeAtPoint(org.waveprotocol.wave.model.document.util.Point)>(r1);

        $r4 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode StartToStart>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: int compareEndPoints(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r4, r3);

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    private org.waveprotocol.wave.model.document.util.Point pointAtCollapsedRange(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r0;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE r2;
        org.waveprotocol.wave.model.document.util.Point $r1, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

        $r1 = r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.Point hint>;

        if $r1 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.Point hint>;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: boolean isValid(org.waveprotocol.wave.model.document.util.Point)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.Point hint>;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: boolean pointMatchesRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r4, r2);

        if $z1 == 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.Point hint>;

        return $r5;

     label1:
        $r6 = specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.Point pointAtCollapsedRangeInner(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>(r2);

        r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.Point hint> = $r6;

        $r7 = r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.Point hint>;

        return $r7;
    }

    private boolean isValid(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r8;
        com.google.gwt.dom.client.Element $r7;
        java.lang.Object $r1, $r3, $r5;
        com.google.gwt.dom.client.Node r2, $r4, $r6;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0, $z1, $z2;

        r8 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        r2 = (com.google.gwt.dom.client.Node) $r1;

        if r2 == null goto label2;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r4 = (com.google.gwt.dom.client.Node) $r3;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r6 = (com.google.gwt.dom.client.Node) $r5;

        $r7 = virtualinvoke $r6.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        $z1 = virtualinvoke $r4.<com.google.gwt.dom.client.Node: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    private org.waveprotocol.wave.model.document.util.Point pointAtCollapsedRangeInner(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r4;
        org.waveprotocol.wave.model.document.util.Point$El $r7;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE r0;
        com.google.gwt.dom.client.Element $r1, r8;
        java.lang.String $r2, $r3;
        com.google.gwt.dom.client.Node $r6;
        org.waveprotocol.wave.model.document.util.Point $r5;
        boolean $z0, $z1;

        r4 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: com.google.gwt.dom.client.Element parentElement()>();

        r8 = $r1;

        $r2 = virtualinvoke $r1.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("INPUT");

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke $r1.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getFirstChild()>();

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r1, $r6);

        return $r7;

     label1:
        $r3 = virtualinvoke r8.<com.google.gwt.dom.client.Element: java.lang.String getAttribute(java.lang.String)>("contentEditable");

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z1 == 0 goto label2;

        r8 = virtualinvoke r8.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        goto label1;

     label2:
        $r5 = specialinvoke r4.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.model.document.util.Point binarySearchForRange(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE,com.google.gwt.dom.client.Element)>(r0, r8);

        return $r5;
    }

    private org.waveprotocol.wave.model.document.util.Point searchForRangeUsingPaste(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE, com.google.gwt.dom.client.Element)
    {
        java.lang.Throwable $r7;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r8;
        org.waveprotocol.wave.model.document.util.Point$El $r5;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE r0;
        org.waveprotocol.wave.model.document.util.Point$Tx $r6;
        com.google.gwt.dom.client.Element $r2, r4, r9;
        com.google.gwt.dom.client.Document $r1;
        com.google.gwt.dom.client.Node $r3;
        boolean $z0;

        r8 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

        r4 := @parameter1: com.google.gwt.dom.client.Element;

        r9 = null;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE pasteHTML(java.lang.String)>("<b id=\'__paste_target__\'>X</b>");

        $r1 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r2 = virtualinvoke $r1.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Element getElementById(java.lang.String)>("__paste_target__");

        r9 = $r2;

        $r3 = virtualinvoke $r2.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getNextSibling()>();

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r3);

        if $z0 == 0 goto label4;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r3, 0);

     label2:
        if $r2 == null goto label3;

        virtualinvoke $r2.<com.google.gwt.dom.client.Element: void removeFromParent()>();

     label3:
        return $r6;

     label4:
        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r4, $r3);

     label5:
        if $r2 == null goto label6;

        virtualinvoke $r2.<com.google.gwt.dom.client.Element: void removeFromParent()>();

     label6:
        return $r5;

     label7:
        $r7 := @caughtexception;

     label8:
        if r9 == null goto label9;

        virtualinvoke r9.<com.google.gwt.dom.client.Element: void removeFromParent()>();

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private org.waveprotocol.wave.model.document.util.Point linearSearchForRange(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE, com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode $r10, $r20, $r22, $r24;
        com.google.gwt.dom.client.Text $r18;
        org.waveprotocol.wave.model.document.util.Point$Tx $r27;
        boolean $z0;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r31;
        org.waveprotocol.wave.model.document.util.Point$El $r4, $r15;
        com.google.gwt.dom.client.Element r0, $r5, $r7, $r12, $r13, $r16, $r28, $r30;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$MoveUnit $r19;
        java.lang.Throwable $r29;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE $r1, $r2, $r3, $r8, r9, $r14, $r21, $r23, $r25;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r26;
        com.google.gwt.core.client.JavaScriptObject $r6, $r17;
        com.google.gwt.dom.client.Node $r11, r32, $r33;

        r31 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r9 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

        r0 := @parameter1: com.google.gwt.dom.client.Element;

     label01:
        r32 = virtualinvoke r0.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getFirstChild()>();

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE create()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE moveToElementText(com.google.gwt.dom.client.Element)>(r0);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapse(boolean)>(1);

     label02:
        if r32 == null goto label09;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r32);

        if $z0 == 0 goto label05;

        $r17 = virtualinvoke r32.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r18 = (com.google.gwt.dom.client.Text) $r17;

        $i1 = virtualinvoke $r18.<com.google.gwt.dom.client.Text: int getLength()>();

        $r19 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$MoveUnit: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$MoveUnit character>;

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: int move(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$MoveUnit,int)>($r19, $i1);

        $r20 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode StartToStart>;

        $i2 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: int compareEndPoints(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r20, r9);

        if $i2 < 0 goto label04;

        $r21 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE duplicate()>();

        $r22 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode StartToStart>;

        $r23 = virtualinvoke $r21.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE setEndPoint(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r22, r9);

        $r24 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode EndToEnd>;

        $r25 = virtualinvoke $r23.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE setEndPoint(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r24, $r3);

        $r26 = virtualinvoke $r25.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: java.lang.String getText()>();

        $i3 = virtualinvoke $r26.<java.lang.String: int length()>();

        $i4 = $i1 - $i3;

        $r27 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r32, $i4);

     label03:
        $r28 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r28.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        return $r27;

     label04:
        goto label08;

     label05:
        $r6 = virtualinvoke r32.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r7 = (com.google.gwt.dom.client.Element) $r6;

        $r8 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE moveToElementText(com.google.gwt.dom.client.Element)>($r7);

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapse(boolean)>(1);

        $r10 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode StartToStart>;

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: int compareEndPoints(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r10, r9);

        if $i0 < 0 goto label07;

        $r15 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r0, r32);

     label06:
        $r16 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r16.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        return $r15;

     label07:
        $r11 = virtualinvoke r32.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getParentNode()>();

        $r12 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        $r33 = (com.google.gwt.dom.client.Node) $r12;

        virtualinvoke $r11.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node insertAfter(com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node)>($r33, r32);

        r32 = virtualinvoke r32.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getNextSibling()>();

        $r13 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        $r14 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE moveToElementText(com.google.gwt.dom.client.Element)>($r13);

        virtualinvoke $r14.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapse(boolean)>(0);

     label08:
        r32 = virtualinvoke r32.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getNextSibling()>();

        goto label02;

     label09:
        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r0);

     label10:
        $r5 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r5.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        return $r4;

     label11:
        $r29 := @caughtexception;

     label12:
        $r30 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r30.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        throw $r29;

        catch java.lang.Throwable from label01 to label03 with label11;
        catch java.lang.Throwable from label04 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private org.waveprotocol.wave.model.document.util.Point binarySearchForRange(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE, com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode $r10, $r14, $r18;
        com.google.gwt.dom.client.Text $r21;
        org.waveprotocol.wave.model.document.util.Point$Tx $r23, $r27;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r31;
        org.waveprotocol.wave.model.document.util.Point$El $r2, $r15, $r25;
        com.google.gwt.dom.client.Element r1, $r3, $r6, $r7, $r12, $r16, $r24, $r26, $r28, $r30, $r32;
        java.lang.Throwable $r29;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE $r0, $r8, r9, $r13, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.String $r19, $r22;
        com.google.gwt.core.client.JavaScriptObject $r11, $r20;
        com.google.gwt.dom.client.Node $r4, $r5, $r33;

        r31 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r9 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

        r1 := @parameter1: com.google.gwt.dom.client.Element;

     label01:
        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE create()>();

        i7 = 0;

        $i0 = virtualinvoke r1.<com.google.gwt.dom.client.Element: int getChildCount()>();

        i8 = $i0 - 1;

     label02:
        if i7 > i8 goto label14;

        $i1 = i7 + i8;

        i9 = $i1 >>> 1;

        $r4 = virtualinvoke r1.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getChild(int)>(i9);

        $r5 = virtualinvoke $r4.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getParentNode()>();

        $r6 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        $r33 = (com.google.gwt.dom.client.Node) $r6;

        virtualinvoke $r5.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node insertBefore(com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node)>($r33, $r4);

        $r7 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        $r8 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE moveToElementText(com.google.gwt.dom.client.Element)>($r7);

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapse(boolean)>(0);

        $r10 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode StartToEnd>;

        $i2 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: int compareEndPoints(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r10, r9);

        if $i2 != 0 goto label06;

        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r4);

        if $z1 == 0 goto label04;

        $r27 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r4, 0);

     label03:
        $r28 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r28.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        return $r27;

     label04:
        $r25 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r1, $r4);

     label05:
        $r26 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r26.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        return $r25;

     label06:
        if $i2 <= 0 goto label07;

        i8 = i9 - 1;

        goto label13;

     label07:
        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r4);

        if $z0 == 0 goto label10;

        $r17 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE duplicate()>();

        $r18 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode EndToEnd>;

        virtualinvoke $r17.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE setEndPoint(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r18, r9);

        $r19 = virtualinvoke $r17.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: java.lang.String getText()>();

        $i4 = virtualinvoke $r19.<java.lang.String: int length()>();

        $r20 = virtualinvoke $r4.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r21 = (com.google.gwt.dom.client.Text) $r20;

        $i5 = virtualinvoke $r21.<com.google.gwt.dom.client.Text: int getLength()>();

        if $i4 > $i5 goto label09;

        $r22 = virtualinvoke $r17.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: java.lang.String getText()>();

        $i6 = virtualinvoke $r22.<java.lang.String: int length()>();

        $r23 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r4, $i6);

     label08:
        $r24 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r24.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        return $r23;

     label09:
        goto label12;

     label10:
        $r11 = virtualinvoke $r4.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r12 = (com.google.gwt.dom.client.Element) $r11;

        $r13 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE moveToElementText(com.google.gwt.dom.client.Element)>($r12);

        virtualinvoke $r13.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapse(boolean)>(0);

        $r14 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode StartToStart>;

        $i3 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: int compareEndPoints(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r14, r9);

        if $i3 < 0 goto label12;

        $r15 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>(r1, $r4);

     label11:
        $r16 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r16.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        return $r15;

     label12:
        i7 = i9 + 1;

     label13:
        $r32 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r32.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        goto label02;

     label14:
        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r1);

     label15:
        $r3 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r3.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        return $r2;

     label16:
        $r29 := @caughtexception;

     label17:
        $r30 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r30.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        throw $r29;

        catch java.lang.Throwable from label01 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label08 with label16;
        catch java.lang.Throwable from label09 to label11 with label16;
        catch java.lang.Throwable from label12 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    void set(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r0;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode $r6, $r8;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE $r2, $r4, $r5, $r7, $r9;
        org.waveprotocol.wave.model.document.util.Point r1, r3;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r3 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapsedRangeAtPoint(org.waveprotocol.wave.model.document.util.Point)>(r1);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapsedRangeAtPoint(org.waveprotocol.wave.model.document.util.Point)>(r3);

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE create()>();

        $r6 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode StartToStart>;

        $r7 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE setEndPoint(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r6, $r2);

        $r8 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode EndToEnd>;

        $r9 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE setEndPoint(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$CompareMode,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r8, $r4);

        virtualinvoke $r9.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE select()>();

        return;
    }

    void set(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r0;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE $r2;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapsedRangeAtPoint(org.waveprotocol.wave.model.document.util.Point)>(r1);

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE select()>();

        return;
    }

    private org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseBeforeSetter(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r4;
        com.google.gwt.dom.client.Element $r1;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE r0, $r2, $r3;

        r4 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

        $r1 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE moveToElementText(com.google.gwt.dom.client.Element)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapse(boolean)>(1);

        return $r3;
    }

    private org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseBeforeNode(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE, com.google.gwt.dom.client.Node)
    {
        java.lang.Throwable $r7;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r3;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE r4, $r5;
        com.google.gwt.dom.client.Element $r2, $r6, $r8;
        com.google.gwt.dom.client.Node r0, $r1, $r9;

        r3 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r4 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

        r0 := @parameter1: com.google.gwt.dom.client.Node;

     label1:
        $r1 = virtualinvoke r0.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getParentNode()>();

        $r2 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        $r9 = (com.google.gwt.dom.client.Node) $r2;

        virtualinvoke $r1.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node insertBefore(com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node)>($r9, r0);

        $r5 = specialinvoke r3.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseBeforeSetter(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>(r4);

     label2:
        $r6 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r6.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        return $r5;

     label3:
        $r7 := @caughtexception;

     label4:
        $r8 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r8.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseAtEnd(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE, com.google.gwt.dom.client.Element)
    {
        java.lang.Throwable $r6;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r2;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE r3, $r4;
        com.google.gwt.dom.client.Element r0, $r1, $r5, $r7;
        com.google.gwt.dom.client.Node $r8;

        r2 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

        r0 := @parameter1: com.google.gwt.dom.client.Element;

     label1:
        $r1 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        $r8 = (com.google.gwt.dom.client.Node) $r1;

        virtualinvoke r0.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r8);

        $r4 = specialinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseBeforeSetter(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>(r3);

     label2:
        $r5 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r5.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        return $r4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r7 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r7.<com.google.gwt.dom.client.Element: void removeFromParent()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseAfterElement(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE, com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r2;
        com.google.gwt.dom.client.Element r0, $r4;
        com.google.gwt.dom.client.Node $r1;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE r3, $r5;

        r2 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

        r0 := @parameter1: com.google.gwt.dom.client.Element;

        $r1 = virtualinvoke r0.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node getNextSibling()>();

        if $r1 == null goto label1;

        $r5 = specialinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseBeforeNode(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE,com.google.gwt.dom.client.Node)>(r3, $r1);

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        $r5 = specialinvoke r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseAtEnd(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE,com.google.gwt.dom.client.Element)>(r3, $r4);

     label2:
        return $r5;
    }

    private org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapsedRangeAtPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$MoveUnit $r11;
        java.lang.AssertionError $r12;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE $r0, $r10, $r15;
        int $i0;
        org.waveprotocol.wave.model.document.util.Point r1;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r7;
        com.google.gwt.core.client.JavaScriptObject $r4;
        com.google.gwt.dom.client.Element r14;
        java.lang.Object $r2, $r5, $r8, $r13;
        com.google.gwt.dom.client.Node $r3, r6, $r9;

        r7 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if r1 == null goto label1;

        $r13 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r13 != null goto label2;

     label1:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label2:
        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE create()>();

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r9 = (com.google.gwt.dom.client.Node) $r8;

        $r10 = specialinvoke r7.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseBeforeNode(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE,com.google.gwt.dom.client.Node)>($r0, $r9);

        $r11 = <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$MoveUnit: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$MoveUnit character>;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        virtualinvoke $r10.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: int move(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE$MoveUnit,int)>($r11, $i0);

        return $r10;

     label3:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r3 = (com.google.gwt.dom.client.Node) $r2;

        $r4 = virtualinvoke $r3.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r14 = (com.google.gwt.dom.client.Element) $r4;

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        r6 = (com.google.gwt.dom.client.Node) $r5;

        if r6 == null goto label4;

        $r15 = specialinvoke r7.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseBeforeNode(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE,com.google.gwt.dom.client.Node)>($r0, r6);

        goto label5;

     label4:
        $r15 = specialinvoke r7.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE collapseAtEnd(org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE,com.google.gwt.dom.client.Element)>($r0, r14);

     label5:
        return $r15;
    }

    boolean selectionExists()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r1;
        org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE $r0;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE $r2;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE: org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE get()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE createRange()>();

        $z0 = specialinvoke r1.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: boolean checkNoSelection(org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE,org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)>($r0, $r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean checkNoSelection(org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE, org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE)
    {
        com.google.gwt.user.client.Element $r3;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r6;
        org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE r0;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE r4;
        org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE$Type $r1, $r2;
        com.google.gwt.dom.client.Element $r5;
        boolean $z0, $z1, $z2;

        r6 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE;

        r4 := @parameter1: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE;

        $r1 = <org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE$Type: org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE$Type None>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE: org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE$Type getType()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE$Type: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.google.gwt.user.client.ui.RootPanel: com.google.gwt.user.client.Element getBodyElement()>();

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: com.google.gwt.dom.client.Element parentElement()>();

        $z1 = virtualinvoke $r3.<com.google.gwt.user.client.Element: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    void saveSelection()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r0;
        org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE $r1;
        java.lang.String $r3;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE: org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE get()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.JsSelectionIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE createRange()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: java.lang.String getBookmark()>();

        r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: java.lang.String savedSelection> = $r3;

        return;
    }

    void restoreSelection()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE r1;
        java.lang.String $r2;
        org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE $r0;

        r1 := @this: org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        $r0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE create()>();

        $r2 = r1.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: java.lang.String savedSelection>;

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: void moveToBookmark(java.lang.String)>($r2);

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE: org.waveprotocol.wave.client.editor.selection.html.JsTextRangeIE select()>();

        return;
    }

    static void <clinit>()
    {
        com.google.gwt.dom.client.Element $r2, $r3;
        java.lang.Class $r0;
        com.google.gwt.dom.client.Document $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/selection/html/SelectionImplIE;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r2 = virtualinvoke $r1.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Element createElement(java.lang.String)>("b");

        <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter> = $r2;

        $r3 = <org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: com.google.gwt.dom.client.Element setter>;

        virtualinvoke $r3.<com.google.gwt.dom.client.Element: void setInnerHTML(java.lang.String)>("x");

        return;
    }
}
