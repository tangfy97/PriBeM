final class org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State BASE_HEAD_STATE;
    private static final org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State BASE_TAIL_STATE;

    void <init>()
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void checkRegularExpression(java.lang.String) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State r1;
        int $i0, i2;
        char $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 = <org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State BASE_HEAD_STATE>;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        r1 = virtualinvoke r1.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State nextState(int,char)>(i2, $c1);

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State: void endOfInput()>();

        return;
    }

    static org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State access$100()
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State $r0;

        $r0 = <org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State BASE_TAIL_STATE>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1 $r0;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$2 $r1;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1: void <init>()>();

        <org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State BASE_HEAD_STATE> = $r0;

        $r1 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$2;

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$2: void <init>()>();

        <org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State BASE_TAIL_STATE> = $r1;

        return;
    }
}
