public abstract class org.apache.batik.gvt.AbstractGraphicsNode extends java.lang.Object implements org.apache.batik.gvt.GraphicsNode
{
    protected javax.swing.event.EventListenerList listeners;
    protected java.awt.geom.AffineTransform transform;
    protected java.awt.geom.AffineTransform inverseTransform;
    protected java.awt.Composite composite;
    protected boolean isVisible;
    protected org.apache.batik.ext.awt.image.renderable.ClipRable clip;
    protected java.awt.RenderingHints hints;
    protected org.apache.batik.gvt.CompositeGraphicsNode parent;
    protected org.apache.batik.gvt.RootGraphicsNode root;
    protected org.apache.batik.gvt.filter.Mask mask;
    protected org.apache.batik.ext.awt.image.renderable.Filter filter;
    protected int pointerEventType;
    protected java.lang.ref.WeakReference graphicsNodeRable;
    protected java.lang.ref.WeakReference enableBackgroundGraphicsNodeRable;
    protected java.lang.ref.WeakReference weakRef;
    private java.awt.geom.Rectangle2D bounds;
    protected org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent;
    protected org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeCompletedEvent;
    static double EPSILON;

    protected void <init>()
    {
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: boolean isVisible> = 1;

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: int pointerEventType> = 0;

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent> = null;

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeCompletedEvent> = null;

        return;
    }

    public java.lang.ref.WeakReference getWeakReference()
    {
        java.lang.ref.WeakReference $r1, $r2, $r3;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.lang.ref.WeakReference weakRef>;

        if $r1 != null goto label1;

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.lang.ref.WeakReference weakRef> = $r3;

     label1:
        $r2 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.lang.ref.WeakReference weakRef>;

        return $r2;
    }

    public int getPointerEventType()
    {
        int $i0;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $i0 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: int pointerEventType>;

        return $i0;
    }

    public void setPointerEventType(int)
    {
        int i0;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        i0 := @parameter0: int;

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: int pointerEventType> = i0;

        return;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        java.lang.Error $r9;
        java.awt.geom.AffineTransform r1, $r2, $r3, $r6, $r7;
        org.apache.batik.gvt.CompositeGraphicsNode $r4, $r5;
        byte $b0;
        java.awt.geom.NoninvertibleTransformException $r8;
        java.lang.String $r10;
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        double $d0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform> = r1;

        $r2 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label5;

     label1:
        $r6 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        $r7 = virtualinvoke $r6.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform inverseTransform> = $r7;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.Error;

        $r10 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r9.<java.lang.Error: void <init>(java.lang.String)>($r10);

        throw $r9;

     label4:
        goto label6;

     label5:
        $r3 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform inverseTransform> = $r3;

     label6:
        $r4 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode parent>;

        if $r4 == null goto label7;

        $r5 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode parent>;

        virtualinvoke $r5.<org.apache.batik.gvt.CompositeGraphicsNode: void invalidateGeometryCache()>();

     label7:
        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label3;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        return $r1;
    }

    public java.awt.geom.AffineTransform getInverseTransform()
    {
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform inverseTransform>;

        return $r1;
    }

    public java.awt.geom.AffineTransform getGlobalTransform()
    {
        java.awt.geom.AffineTransform $r0, $r2, $r3;
        org.apache.batik.gvt.AbstractGraphicsNode r1, r4;

        r1 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r0 = new java.awt.geom.AffineTransform;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();

        r4 = r1;

        goto label3;

     label1:
        $r2 = interfaceinvoke r4.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

        if $r2 == null goto label2;

        $r3 = interfaceinvoke r4.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>($r3);

     label2:
        r4 = interfaceinvoke r4.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode getParent()>();

     label3:
        if r4 != null goto label1;

        return $r0;
    }

    public void setComposite(java.awt.Composite)
    {
        java.awt.Composite r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r1 := @parameter0: java.awt.Composite;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void invalidateGeometryCache()>();

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite> = r1;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public java.awt.Composite getComposite()
    {
        java.awt.Composite $r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite>;

        return $r1;
    }

    public void setVisible(boolean)
    {
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        boolean z0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: boolean isVisible> = z0;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void invalidateGeometryCache()>();

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public boolean isVisible()
    {
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $z0 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: boolean isVisible>;

        return $z0;
    }

    public void setClip(org.apache.batik.ext.awt.image.renderable.ClipRable)
    {
        org.apache.batik.ext.awt.image.renderable.ClipRable r0, $r2;
        org.apache.batik.gvt.AbstractGraphicsNode r1;

        r1 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r0 := @parameter0: org.apache.batik.ext.awt.image.renderable.ClipRable;

        if r0 != null goto label1;

        $r2 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        if $r2 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        virtualinvoke r1.<org.apache.batik.gvt.AbstractGraphicsNode: void invalidateGeometryCache()>();

        r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip> = r0;

        virtualinvoke r1.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.ClipRable getClip()
    {
        org.apache.batik.ext.awt.image.renderable.ClipRable $r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        return $r1;
    }

    public void setRenderingHint(java.awt.RenderingHints$Key, java.lang.Object)
    {
        java.awt.RenderingHints$Key r2;
        java.awt.RenderingHints $r1, $r4, $r5;
        java.lang.Object r3;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r2 := @parameter0: java.awt.RenderingHints$Key;

        r3 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints>;

        if $r1 != null goto label1;

        $r5 = new java.awt.RenderingHints;

        specialinvoke $r5.<java.awt.RenderingHints: void <init>(java.awt.RenderingHints$Key,java.lang.Object)>(r2, r3);

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints> = $r5;

        goto label2;

     label1:
        $r4 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints>;

        virtualinvoke $r4.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label2:
        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public void setRenderingHints(java.util.Map)
    {
        java.util.Map r2;
        java.awt.RenderingHints $r1, $r3, $r4;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r2 := @parameter0: java.util.Map;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints>;

        if $r1 != null goto label1;

        $r4 = new java.awt.RenderingHints;

        specialinvoke $r4.<java.awt.RenderingHints: void <init>(java.util.Map)>(r2);

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints> = $r4;

        goto label2;

     label1:
        $r3 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints>;

        virtualinvoke $r3.<java.awt.RenderingHints: void putAll(java.util.Map)>(r2);

     label2:
        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public void setRenderingHints(java.awt.RenderingHints)
    {
        java.awt.RenderingHints r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r1 := @parameter0: java.awt.RenderingHints;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints> = r1;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        java.awt.RenderingHints $r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints>;

        return $r1;
    }

    public void setMask(org.apache.batik.gvt.filter.Mask)
    {
        org.apache.batik.gvt.filter.Mask r0, $r2;
        org.apache.batik.gvt.AbstractGraphicsNode r1;

        r1 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r0 := @parameter0: org.apache.batik.gvt.filter.Mask;

        if r0 != null goto label1;

        $r2 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

        if $r2 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        virtualinvoke r1.<org.apache.batik.gvt.AbstractGraphicsNode: void invalidateGeometryCache()>();

        r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask> = r0;

        virtualinvoke r1.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public org.apache.batik.gvt.filter.Mask getMask()
    {
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        org.apache.batik.gvt.filter.Mask $r1;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

        return $r1;
    }

    public void setFilter(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.Filter r0, $r2;
        org.apache.batik.gvt.AbstractGraphicsNode r1;

        r1 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r0 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        if r0 != null goto label1;

        $r2 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter filter>;

        if $r2 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted()>();

        virtualinvoke r1.<org.apache.batik.gvt.AbstractGraphicsNode: void invalidateGeometryCache()>();

        r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter filter> = r0;

        virtualinvoke r1.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeCompleted()>();

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getFilter()
    {
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter filter>;

        return $r1;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)
    {
        org.apache.batik.gvt.filter.GraphicsNodeRable8Bit $r2;
        org.apache.batik.gvt.filter.GraphicsNodeRable r6;
        java.lang.Object $r5;
        java.lang.ref.WeakReference $r1, $r3, $r4;
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        boolean z0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        z0 := @parameter0: boolean;

        r6 = null;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.lang.ref.WeakReference graphicsNodeRable>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.lang.ref.WeakReference graphicsNodeRable>;

        $r5 = virtualinvoke $r4.<java.lang.ref.Reference: java.lang.Object get()>();

        r6 = (org.apache.batik.gvt.filter.GraphicsNodeRable) $r5;

        if r6 == null goto label1;

        return r6;

     label1:
        if z0 == 0 goto label2;

        $r2 = new org.apache.batik.gvt.filter.GraphicsNodeRable8Bit;

        specialinvoke $r2.<org.apache.batik.gvt.filter.GraphicsNodeRable8Bit: void <init>(org.apache.batik.gvt.GraphicsNode)>(r0);

        r6 = $r2;

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r2);

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.lang.ref.WeakReference graphicsNodeRable> = $r3;

     label2:
        return r6;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getEnableBackgroundGraphicsNodeRable(boolean)
    {
        org.apache.batik.gvt.filter.GraphicsNodeRable8Bit $r2;
        org.apache.batik.gvt.filter.GraphicsNodeRable r6;
        java.lang.Object $r5;
        java.lang.ref.WeakReference $r1, $r3, $r4;
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        boolean z0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        z0 := @parameter0: boolean;

        r6 = null;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.lang.ref.WeakReference enableBackgroundGraphicsNodeRable>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.lang.ref.WeakReference enableBackgroundGraphicsNodeRable>;

        $r5 = virtualinvoke $r4.<java.lang.ref.Reference: java.lang.Object get()>();

        r6 = (org.apache.batik.gvt.filter.GraphicsNodeRable) $r5;

        if r6 == null goto label1;

        return r6;

     label1:
        if z0 == 0 goto label2;

        $r2 = new org.apache.batik.gvt.filter.GraphicsNodeRable8Bit;

        specialinvoke $r2.<org.apache.batik.gvt.filter.GraphicsNodeRable8Bit: void <init>(org.apache.batik.gvt.GraphicsNode)>(r0);

        r6 = $r2;

        interfaceinvoke $r2.<org.apache.batik.gvt.filter.GraphicsNodeRable: void setUsePrimitivePaint(boolean)>(0);

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r2);

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.lang.ref.WeakReference enableBackgroundGraphicsNodeRable> = $r3;

     label2:
        return r6;
    }

    public void paint(java.awt.Graphics2D)
    {
        java.awt.geom.Rectangle2D $r9, $r21, $r38;
        byte $b0;
        java.awt.geom.AffineTransform $r4, $r17, $r23, $r27, $r32, r40;
        java.awt.AlphaComposite r37;
        java.awt.RenderingHints$Key $r44;
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        java.awt.RenderingHints $r3, $r18, $r24, $r26, $r33, r41;
        org.apache.batik.gvt.filter.Mask $r8, $r13, $r15;
        boolean $z0, $z1, $z2, z3, z4, $z5, $z6;
        java.awt.Shape $r20, $r30, $r43;
        java.awt.Composite $r1, $r5, $r22, $r28, $r31, $r34, $r35, r39;
        org.apache.batik.ext.awt.image.renderable.Filter $r7, $r11, $r14, r45;
        java.awt.Graphics $r25, $r48;
        float $f0;
        java.awt.Graphics2D r36, r42, r47, $r49;
        int $i1;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.batik.ext.awt.image.renderable.ClipRable $r2, $r6, $r10, $r12, $r16, $r19, $r29, $r46;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r36 := @parameter0: java.awt.Graphics2D;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite>;

        if $r1 == null goto label01;

        $r34 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite>;

        $z2 = $r34 instanceof java.awt.AlphaComposite;

        if $z2 == 0 goto label01;

        $r35 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite>;

        r37 = (java.awt.AlphaComposite) $r35;

        $f0 = virtualinvoke r37.<java.awt.AlphaComposite: float getAlpha()>();

        $d4 = (double) $f0;

        $b0 = $d4 cmpg 0.001;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label01;

        return;

     label01:
        $r38 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D getBounds()>();

        if $r38 != null goto label02;

        return;

     label02:
        r39 = null;

        r40 = null;

        r41 = null;

        r42 = null;

        $r2 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        if $r2 == null goto label06;

        r42 = r36;

        $r25 = virtualinvoke r36.<java.awt.Graphics: java.awt.Graphics create()>();

        r36 = (java.awt.Graphics2D) $r25;

        $r26 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints>;

        if $r26 == null goto label03;

        $r33 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints>;

        virtualinvoke r36.<java.awt.Graphics2D: void addRenderingHints(java.util.Map)>($r33);

     label03:
        $r27 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        if $r27 == null goto label04;

        $r32 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        virtualinvoke r36.<java.awt.Graphics2D: void transform(java.awt.geom.AffineTransform)>($r32);

     label04:
        $r28 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite>;

        if $r28 == null goto label05;

        $r31 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite>;

        virtualinvoke r36.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r31);

     label05:
        $r29 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        $r30 = interfaceinvoke $r29.<org.apache.batik.ext.awt.image.renderable.ClipRable: java.awt.Shape getClipPath()>();

        virtualinvoke r36.<java.awt.Graphics2D: void clip(java.awt.Shape)>($r30);

        goto label09;

     label06:
        $r3 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints>;

        if $r3 == null goto label07;

        r41 = virtualinvoke r36.<java.awt.Graphics2D: java.awt.RenderingHints getRenderingHints()>();

        $r24 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints hints>;

        virtualinvoke r36.<java.awt.Graphics2D: void addRenderingHints(java.util.Map)>($r24);

     label07:
        $r4 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        if $r4 == null goto label08;

        r40 = virtualinvoke r36.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r23 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        virtualinvoke r36.<java.awt.Graphics2D: void transform(java.awt.geom.AffineTransform)>($r23);

     label08:
        $r5 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite>;

        if $r5 == null goto label09;

        r39 = virtualinvoke r36.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $r22 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite>;

        virtualinvoke r36.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r22);

     label09:
        $r43 = virtualinvoke r36.<java.awt.Graphics: java.awt.Shape getClip()>();

        $r44 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_AREA_OF_INTEREST>;

        virtualinvoke r36.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r44, $r43);

        z3 = 1;

        if $r43 == null goto label10;

        $r21 = interfaceinvoke $r43.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getY()>();

        $d2 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getWidth()>();

        $d3 = virtualinvoke $r21.<java.awt.geom.RectangularShape: double getHeight()>();

        $z1 = virtualinvoke $r38.<java.awt.geom.Rectangle2D: boolean intersects(double,double,double,double)>($d0, $d1, $d2, $d3);

        if $z1 != 0 goto label10;

        z3 = 0;

     label10:
        if z3 == 0 goto label20;

        z4 = 0;

        $r6 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        if $r6 == null goto label11;

        $r16 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        $z0 = interfaceinvoke $r16.<org.apache.batik.ext.awt.image.renderable.ClipRable: boolean getUseAntialiasedClip()>();

        if $z0 == 0 goto label11;

        $r17 = virtualinvoke r36.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r18 = virtualinvoke r36.<java.awt.Graphics2D: java.awt.RenderingHints getRenderingHints()>();

        $r19 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        $r20 = interfaceinvoke $r19.<org.apache.batik.ext.awt.image.renderable.ClipRable: java.awt.Shape getClipPath()>();

        z4 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: boolean isAntialiasedClip(java.awt.geom.AffineTransform,java.awt.RenderingHints,java.awt.Shape)>($r17, $r18, $r20);

     label11:
        $z5 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: boolean isOffscreenBufferNeeded()>();

        $z6 = $z5 | z4;

        if $z6 != 0 goto label12;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void primitivePaint(java.awt.Graphics2D)>(r36);

        goto label20;

     label12:
        $r7 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter filter>;

        if $r7 != null goto label13;

        r45 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

        goto label14;

     label13:
        r45 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter filter>;

     label14:
        $r8 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

        if $r8 == null goto label16;

        $r13 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

        $r14 = interfaceinvoke $r13.<org.apache.batik.gvt.filter.Mask: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        if $r14 == r45 goto label15;

        $r15 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

        interfaceinvoke $r15.<org.apache.batik.gvt.filter.Mask: void setSource(org.apache.batik.ext.awt.image.renderable.Filter)>(r45);

     label15:
        r45 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

     label16:
        $r46 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        if $r46 == null goto label18;

        if z4 == 0 goto label18;

        $r10 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        $r11 = interfaceinvoke $r10.<org.apache.batik.ext.awt.image.renderable.ClipRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        if $r11 == r45 goto label17;

        $r12 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        interfaceinvoke $r12.<org.apache.batik.ext.awt.image.renderable.ClipRable: void setSource(org.apache.batik.ext.awt.image.renderable.Filter)>(r45);

     label17:
        r45 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

     label18:
        r47 = r36;

        $r48 = virtualinvoke r36.<java.awt.Graphics: java.awt.Graphics create()>();

        $r49 = (java.awt.Graphics2D) $r48;

        if z4 == 0 goto label19;

        virtualinvoke $r49.<java.awt.Graphics: void setClip(java.awt.Shape)>(null);

     label19:
        $r9 = interfaceinvoke r45.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        virtualinvoke $r49.<java.awt.Graphics2D: void clip(java.awt.Shape)>($r9);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,java.awt.image.renderable.RenderableImage)>($r49, r45);

        virtualinvoke $r49.<java.awt.Graphics: void dispose()>();

        r36 = r47;

        r42 = null;

     label20:
        if r42 == null goto label21;

        virtualinvoke r36.<java.awt.Graphics: void dispose()>();

        goto label24;

     label21:
        if r41 == null goto label22;

        virtualinvoke r36.<java.awt.Graphics2D: void setRenderingHints(java.util.Map)>(r41);

     label22:
        if r40 == null goto label23;

        virtualinvoke r36.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>(r40);

     label23:
        if r39 == null goto label24;

        virtualinvoke r36.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>(r39);

     label24:
        return;
    }

    private void traceFilter(org.apache.batik.ext.awt.image.renderable.Filter, java.lang.String)
    {
        java.awt.geom.Rectangle2D $r11;
        java.util.Vector $r14;
        java.lang.StringBuffer $r0, $r2, $r6, $r8, $r10, $r12, $r15, $r16, $r17;
        int i0, $i1, i2;
        java.lang.String $r5, $r7, $r13, $r18, r23;
        java.io.PrintStream $r1, $r9, $r22;
        org.apache.batik.ext.awt.image.renderable.Filter r3, r20;
        java.lang.Class $r4;
        java.lang.Object $r19;
        org.apache.batik.gvt.AbstractGraphicsNode r21;

        r21 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r3 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        r23 := @parameter1: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r23);

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r23);

        $r11 = interfaceinvoke r3.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r14 = interfaceinvoke r3.<java.awt.image.renderable.RenderableImage: java.util.Vector getSources()>();

        if $r14 == null goto label1;

        $i1 = interfaceinvoke $r14.<java.util.List: int size()>();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        i0 = $i1;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r23);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        i2 = 0;

        goto label4;

     label3:
        $r19 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i2);

        r20 = (org.apache.batik.ext.awt.image.renderable.Filter) $r19;

        specialinvoke r21.<org.apache.batik.gvt.AbstractGraphicsNode: void traceFilter(org.apache.batik.ext.awt.image.renderable.Filter,java.lang.String)>(r20, $r18);

        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label3;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r22.<java.io.PrintStream: void flush()>();

        return;
    }

    protected boolean isOffscreenBufferNeeded()
    {
        java.awt.Composite $r3, $r4;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        java.awt.AlphaComposite $r5;
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        org.apache.batik.gvt.filter.Mask $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter filter>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

        if $r2 != null goto label1;

        $r3 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite>;

        if $r3 == null goto label2;

        $r5 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        $r4 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.Composite composite>;

        $z0 = virtualinvoke $r5.<java.awt.AlphaComposite: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected boolean isAntialiasedClip(java.awt.geom.AffineTransform, java.awt.RenderingHints, java.awt.Shape)
    {
        java.awt.Shape r0;
        java.awt.RenderingHints r1;
        java.awt.geom.AffineTransform r4;
        byte $b0, $b1;
        java.awt.RenderingHints$Key $r2;
        java.lang.Object $r3;
        org.apache.batik.gvt.AbstractGraphicsNode r5;
        boolean $z0;
        double $d0, $d1;

        r5 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r4 := @parameter0: java.awt.geom.AffineTransform;

        r1 := @parameter1: java.awt.RenderingHints;

        r0 := @parameter2: java.awt.Shape;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_TRANSCODING>;

        $r3 = virtualinvoke r1.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r2);

        if $r3 == "Printing" goto label2;

        if $r3 != "Vector" goto label3;

     label2:
        return 0;

     label3:
        $z0 = r0 instanceof java.awt.geom.Rectangle2D;

        if $z0 == 0 goto label4;

        $d0 = virtualinvoke r4.<java.awt.geom.AffineTransform: double getShearX()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label4;

        $d1 = virtualinvoke r4.<java.awt.geom.AffineTransform: double getShearY()>();

        $b1 = $d1 cmpl 0.0;

        if $b1 == 0 goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }

    public void fireGraphicsNodeChangeStarted(org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.gvt.event.GraphicsNodeChangeEvent $r1, $r3, $r4, $r5, $r6;
        org.apache.batik.gvt.GraphicsNode r2;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r2 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent>;

        if $r1 != null goto label1;

        $r6 = new org.apache.batik.gvt.event.GraphicsNodeChangeEvent;

        specialinvoke $r6.<org.apache.batik.gvt.event.GraphicsNodeChangeEvent: void <init>(org.apache.batik.gvt.GraphicsNode,int)>(r0, 9800);

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent> = $r6;

     label1:
        $r3 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent>;

        virtualinvoke $r3.<org.apache.batik.gvt.event.GraphicsNodeChangeEvent: void setChangeSrc(org.apache.batik.gvt.GraphicsNode)>(r2);

        $r4 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent>;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted(org.apache.batik.gvt.event.GraphicsNodeChangeEvent)>($r4);

        $r5 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent>;

        virtualinvoke $r5.<org.apache.batik.gvt.event.GraphicsNodeChangeEvent: void setChangeSrc(org.apache.batik.gvt.GraphicsNode)>(null);

        return;
    }

    public void fireGraphicsNodeChangeStarted()
    {
        org.apache.batik.gvt.event.GraphicsNodeChangeEvent $r1, $r2, $r3, $r4;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent>;

        if $r1 != null goto label1;

        $r4 = new org.apache.batik.gvt.event.GraphicsNodeChangeEvent;

        specialinvoke $r4.<org.apache.batik.gvt.event.GraphicsNodeChangeEvent: void <init>(org.apache.batik.gvt.GraphicsNode,int)>(r0, 9800);

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent> = $r4;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent>;

        virtualinvoke $r2.<org.apache.batik.gvt.event.GraphicsNodeChangeEvent: void setChangeSrc(org.apache.batik.gvt.GraphicsNode)>(null);

     label2:
        $r3 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeStartedEvent>;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void fireGraphicsNodeChangeStarted(org.apache.batik.gvt.event.GraphicsNodeChangeEvent)>($r3);

        return;
    }

    public void fireGraphicsNodeChangeStarted(org.apache.batik.gvt.event.GraphicsNodeChangeEvent)
    {
        java.util.Iterator $r3;
        org.apache.batik.gvt.RootGraphicsNode $r1;
        java.util.List $r2;
        org.apache.batik.gvt.event.GraphicsNodeChangeListener r5;
        org.apache.batik.gvt.event.GraphicsNodeChangeEvent r6;
        java.lang.Object $r4;
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r6 := @parameter0: org.apache.batik.gvt.event.GraphicsNodeChangeEvent;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.RootGraphicsNode getRoot()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.RootGraphicsNode: java.util.List getTreeGraphicsNodeChangeListeners()>();

        if $r2 != null goto label2;

        return;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.batik.gvt.event.GraphicsNodeChangeListener) $r4;

        interfaceinvoke r5.<org.apache.batik.gvt.event.GraphicsNodeChangeListener: void changeStarted(org.apache.batik.gvt.event.GraphicsNodeChangeEvent)>(r6);

     label4:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return;
    }

    public void fireGraphicsNodeChangeCompleted()
    {
        java.util.Iterator $r4;
        org.apache.batik.gvt.RootGraphicsNode $r2;
        java.util.List $r3;
        org.apache.batik.gvt.event.GraphicsNodeChangeEvent $r1, $r7, $r8;
        org.apache.batik.gvt.event.GraphicsNodeChangeListener r6;
        java.lang.Object $r5;
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeCompletedEvent>;

        if $r1 != null goto label1;

        $r8 = new org.apache.batik.gvt.event.GraphicsNodeChangeEvent;

        specialinvoke $r8.<org.apache.batik.gvt.event.GraphicsNodeChangeEvent: void <init>(org.apache.batik.gvt.GraphicsNode,int)>(r0, 9801);

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeCompletedEvent> = $r8;

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.RootGraphicsNode getRoot()>();

        if $r2 != null goto label2;

        return;

     label2:
        $r3 = virtualinvoke $r2.<org.apache.batik.gvt.RootGraphicsNode: java.util.List getTreeGraphicsNodeChangeListeners()>();

        if $r3 != null goto label3;

        return;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.batik.gvt.event.GraphicsNodeChangeListener) $r5;

        $r7 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.event.GraphicsNodeChangeEvent changeCompletedEvent>;

        interfaceinvoke r6.<org.apache.batik.gvt.event.GraphicsNodeChangeListener: void changeCompleted(org.apache.batik.gvt.event.GraphicsNodeChangeEvent)>($r7);

     label5:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label4;

        return;
    }

    public org.apache.batik.gvt.CompositeGraphicsNode getParent()
    {
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        org.apache.batik.gvt.CompositeGraphicsNode $r1;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode parent>;

        return $r1;
    }

    public org.apache.batik.gvt.RootGraphicsNode getRoot()
    {
        org.apache.batik.gvt.RootGraphicsNode $r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.RootGraphicsNode root>;

        return $r1;
    }

    protected void setRoot(org.apache.batik.gvt.RootGraphicsNode)
    {
        org.apache.batik.gvt.RootGraphicsNode r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r1 := @parameter0: org.apache.batik.gvt.RootGraphicsNode;

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.RootGraphicsNode root> = r1;

        return;
    }

    protected void setParent(org.apache.batik.gvt.CompositeGraphicsNode)
    {
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        org.apache.batik.gvt.CompositeGraphicsNode r1;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r1 := @parameter0: org.apache.batik.gvt.CompositeGraphicsNode;

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode parent> = r1;

        return;
    }

    protected void invalidateGeometryCache()
    {
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        org.apache.batik.gvt.CompositeGraphicsNode $r1, $r2;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode parent>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode parent>;

        virtualinvoke $r2.<org.apache.batik.gvt.CompositeGraphicsNode: void invalidateGeometryCache()>();

     label1:
        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds> = null;

        return;
    }

    public java.awt.geom.Rectangle2D getBounds()
    {
        java.awt.geom.Rectangle2D $r1, $r4, $r5, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22;
        org.apache.batik.gvt.filter.Mask $r7, $r19;
        boolean $z0, $z1, $z2;
        java.awt.Shape $r13;
        org.apache.batik.ext.awt.image.renderable.ClipRable $r6, $r12;
        org.apache.batik.ext.awt.image.renderable.Filter $r2, $r3;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        $r1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        if $r1 != null goto label5;

        $r2 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter filter>;

        if $r2 != null goto label1;

        $r18 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D getPrimitiveBounds()>();

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds> = $r18;

        goto label2;

     label1:
        $r3 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter filter>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds> = $r4;

     label2:
        $r5 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        if $r5 == null goto label4;

        $r6 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        if $r6 == null goto label3;

        $r12 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        $r13 = interfaceinvoke $r12.<org.apache.batik.ext.awt.image.renderable.ClipRable: java.awt.Shape getClipPath()>();

        $r14 = interfaceinvoke $r13.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r15 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        $z1 = virtualinvoke $r14.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r15);

        if $z1 == 0 goto label3;

        $r17 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        $r16 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r17, $r14, $r16);

     label3:
        $r19 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

        if $r19 == null goto label4;

        $r7 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

        $r8 = interfaceinvoke $r7.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $r9 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        $z0 = virtualinvoke $r8.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r9);

        if $z0 == 0 goto label4;

        $r11 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        $r10 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r11, $r8, $r10);

     label4:
        $r20 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        $r21 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D normalizeRectangle(java.awt.geom.Rectangle2D)>($r20);

        r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds> = $r21;

        $z2 = staticinvoke <org.apache.batik.util.HaltingThread: boolean hasBeenHalted()>();

        if $z2 == 0 goto label5;

        virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: void invalidateGeometryCache()>();

     label5:
        $r22 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D bounds>;

        return $r22;
    }

    public java.awt.geom.Rectangle2D getTransformedBounds(java.awt.geom.AffineTransform)
    {
        java.awt.geom.Rectangle2D $r5, $r10, $r12, $r16, r20;
        org.apache.batik.gvt.filter.Mask $r8, $r9;
        java.awt.Shape $r6, $r11, $r14, $r15;
        org.apache.batik.ext.awt.image.renderable.ClipRable $r7, $r13;
        java.awt.geom.AffineTransform r0, $r2, $r17, $r18, r19;
        org.apache.batik.ext.awt.image.renderable.Filter $r3, $r4;
        org.apache.batik.gvt.AbstractGraphicsNode r1;

        r1 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r0 := @parameter0: java.awt.geom.AffineTransform;

        r19 = r0;

        $r2 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        if $r2 == null goto label1;

        $r17 = new java.awt.geom.AffineTransform;

        specialinvoke $r17.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r0);

        r19 = $r17;

        $r18 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r17.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r18);

     label1:
        $r3 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter filter>;

        if $r3 != null goto label2;

        r20 = virtualinvoke r1.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D getTransformedPrimitiveBounds(java.awt.geom.AffineTransform)>(r0);

        goto label3;

     label2:
        $r4 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter filter>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $r6 = virtualinvoke r19.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r5);

        r20 = interfaceinvoke $r6.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

     label3:
        if r20 == null goto label5;

        $r7 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        if $r7 == null goto label4;

        $r13 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.ClipRable clip>;

        $r14 = interfaceinvoke $r13.<org.apache.batik.ext.awt.image.renderable.ClipRable: java.awt.Shape getClipPath()>();

        $r15 = virtualinvoke r19.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r14);

        $r16 = interfaceinvoke $r15.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(r20, $r16, r20);

     label4:
        $r8 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

        if $r8 == null goto label5;

        $r9 = r1.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.gvt.filter.Mask mask>;

        $r10 = interfaceinvoke $r9.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $r11 = virtualinvoke r19.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r10);

        $r12 = interfaceinvoke $r11.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(r20, $r12, r20);

     label5:
        return r20;
    }

    public java.awt.geom.Rectangle2D getTransformedPrimitiveBounds(java.awt.geom.AffineTransform)
    {
        java.awt.Shape $r4;
        java.awt.geom.Rectangle2D $r1, $r5;
        java.awt.geom.AffineTransform r2, $r3, $r6, $r7, r8;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r2 := @parameter0: java.awt.geom.AffineTransform;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D getPrimitiveBounds()>();

        if $r1 != null goto label1;

        return null;

     label1:
        r8 = r2;

        $r3 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        if $r3 == null goto label2;

        $r6 = new java.awt.geom.AffineTransform;

        specialinvoke $r6.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r2);

        r8 = $r6;

        $r7 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r7);

     label2:
        $r4 = virtualinvoke r8.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        $r5 = interfaceinvoke $r4.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r5;
    }

    public java.awt.geom.Rectangle2D getTransformedGeometryBounds(java.awt.geom.AffineTransform)
    {
        java.awt.Shape $r4;
        java.awt.geom.Rectangle2D $r1, $r5;
        java.awt.geom.AffineTransform r2, $r3, $r6, $r7, r8;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r2 := @parameter0: java.awt.geom.AffineTransform;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D getGeometryBounds()>();

        if $r1 != null goto label1;

        return null;

     label1:
        r8 = r2;

        $r3 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        if $r3 == null goto label2;

        $r6 = new java.awt.geom.AffineTransform;

        specialinvoke $r6.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r2);

        r8 = $r6;

        $r7 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r7);

     label2:
        $r4 = virtualinvoke r8.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        $r5 = interfaceinvoke $r4.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r5;
    }

    public java.awt.geom.Rectangle2D getTransformedSensitiveBounds(java.awt.geom.AffineTransform)
    {
        java.awt.Shape $r4;
        java.awt.geom.Rectangle2D $r1, $r5;
        java.awt.geom.AffineTransform r2, $r3, $r6, $r7, r8;
        org.apache.batik.gvt.AbstractGraphicsNode r0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r2 := @parameter0: java.awt.geom.AffineTransform;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D getSensitiveBounds()>();

        if $r1 != null goto label1;

        return null;

     label1:
        r8 = r2;

        $r3 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        if $r3 == null goto label2;

        $r6 = new java.awt.geom.AffineTransform;

        specialinvoke $r6.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r2);

        r8 = $r6;

        $r7 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r7);

     label2:
        $r4 = virtualinvoke r8.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        $r5 = interfaceinvoke $r4.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r5;
    }

    public boolean contains(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r2;
        java.awt.geom.Rectangle2D $r1;
        int $i0;
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r2 := @parameter0: java.awt.geom.Point2D;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D getSensitiveBounds()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean contains(java.awt.geom.Point2D)>(r2);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: int pointerEventType>;

        tableswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label4;
            case 6: goto label4;
            case 7: goto label4;
            case 8: goto label5;
            default: goto label5;
        };

     label3:
        $z1 = r0.<org.apache.batik.gvt.AbstractGraphicsNode: boolean isVisible>;

        return $z1;

     label4:
        return 1;

     label5:
        return 0;
    }

    public boolean intersects(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D $r1, r2;
        org.apache.batik.gvt.AbstractGraphicsNode r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r2 := @parameter0: java.awt.geom.Rectangle2D;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D getBounds()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>(r2);

        return $z0;
    }

    public org.apache.batik.gvt.GraphicsNode nodeHitAt(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r1;
        org.apache.batik.gvt.AbstractGraphicsNode r0, $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r1 := @parameter0: java.awt.geom.Point2D;

        $z0 = virtualinvoke r0.<org.apache.batik.gvt.AbstractGraphicsNode: boolean contains(java.awt.geom.Point2D)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    protected java.awt.geom.Rectangle2D normalizeRectangle(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D r0;
        byte $b0, $b1, $b2, $b3, $b4;
        java.awt.geom.Rectangle2D$Double $r6, $r7, $r8;
        java.awt.geom.AffineTransform $r4;
        int $i5, $i6, $i7, $i8, $i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27;
        org.apache.batik.gvt.AbstractGraphicsNode r3;

        r3 := @this: org.apache.batik.gvt.AbstractGraphicsNode;

        r0 := @parameter0: java.awt.geom.Rectangle2D;

        if r0 != null goto label1;

        return null;

     label1:
        $d0 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getWidth()>();

        $d1 = <org.apache.batik.gvt.AbstractGraphicsNode: double EPSILON>;

        $b0 = $d0 cmpg $d1;

        $i5 = (int) $b0;

        if $i5 >= 0 goto label4;

        $d10 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getHeight()>();

        $d11 = <org.apache.batik.gvt.AbstractGraphicsNode: double EPSILON>;

        $b3 = $d10 cmpg $d11;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label2;

        $r4 = virtualinvoke r3.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        $d18 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $d19 = staticinvoke <java.lang.Math: double sqrt(double)>($d18);

        $r6 = new java.awt.geom.Rectangle2D$Double;

        $d20 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getX()>();

        $d21 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getY()>();

        $d22 = <org.apache.batik.gvt.AbstractGraphicsNode: double EPSILON>;

        $d25 = $d22 / $d19;

        $d23 = <org.apache.batik.gvt.AbstractGraphicsNode: double EPSILON>;

        $d24 = $d23 / $d19;

        specialinvoke $r6.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d20, $d21, $d25, $d24);

        return $r6;

     label2:
        $d12 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getHeight()>();

        $d13 = <org.apache.batik.gvt.AbstractGraphicsNode: double EPSILON>;

        d26 = $d12 * $d13;

        $d14 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getWidth()>();

        $b4 = d26 cmpg $d14;

        $i7 = (int) $b4;

        if $i7 >= 0 goto label3;

        d26 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getWidth()>();

     label3:
        $r7 = new java.awt.geom.Rectangle2D$Double;

        $d15 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getX()>();

        $d16 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getY()>();

        $d17 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getHeight()>();

        specialinvoke $r7.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d15, $d16, d26, $d17);

        return $r7;

     label4:
        $d2 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getHeight()>();

        $d3 = <org.apache.batik.gvt.AbstractGraphicsNode: double EPSILON>;

        $b1 = $d2 cmpg $d3;

        $i8 = (int) $b1;

        if $i8 >= 0 goto label6;

        $d4 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getWidth()>();

        $d5 = <org.apache.batik.gvt.AbstractGraphicsNode: double EPSILON>;

        d27 = $d4 * $d5;

        $d6 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getHeight()>();

        $b2 = d27 cmpg $d6;

        $i9 = (int) $b2;

        if $i9 >= 0 goto label5;

        d27 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getHeight()>();

     label5:
        $r8 = new java.awt.geom.Rectangle2D$Double;

        $d7 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getX()>();

        $d8 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getY()>();

        $d9 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getWidth()>();

        specialinvoke $r8.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d7, $d8, $d9, d27);

        return $r8;

     label6:
        return r0;
    }

    public abstract java.awt.Shape getOutline();

    public abstract java.awt.geom.Rectangle2D getSensitiveBounds();

    public abstract java.awt.geom.Rectangle2D getGeometryBounds();

    public abstract java.awt.geom.Rectangle2D getPrimitiveBounds();

    public abstract void primitivePaint(java.awt.Graphics2D);

    static void <clinit>()
    {
        <org.apache.batik.gvt.AbstractGraphicsNode: double EPSILON> = 1.0E-6;

        return;
    }
}
