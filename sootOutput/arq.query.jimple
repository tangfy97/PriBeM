public class arq.query extends arq.cmdline.CmdARQ
{
    private arq.cmdline.ArgDecl argRepeat;
    private arq.cmdline.ArgDecl argExplain;
    private arq.cmdline.ArgDecl argOptimize;
    protected int repeatCount;
    protected int warmupCount;
    protected boolean queryOptimization;
    protected arq.cmdline.ModTime modTime;
    protected arq.cmdline.ModQueryIn modQuery;
    protected arq.cmdline.ModDataset modDataset;
    protected arq.cmdline.ModResultsOut modResults;
    protected arq.cmdline.ModEngine modEngine;
    protected long totalTime;

    public static transient void main(java.lang.String[])
    {
        arq.query $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        $r0 = new arq.query;

        specialinvoke $r0.<arq.query: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<arq.query: void mainRun()>();

        return;
    }

    public void <init>(java.lang.String[])
    {
        arq.cmdline.Usage $r18;
        arq.cmdline.ModTime $r8, $r17;
        arq.cmdline.ArgDecl $r2, $r4, $r6, $r19, $r20, $r21;
        java.lang.String[] r1, $r3, $r5, $r7;
        arq.cmdline.ModResultsOut $r10, $r14;
        arq.cmdline.ModDataset $r12, $r15;
        arq.cmdline.ModQueryIn $r9, $r13;
        arq.cmdline.ModEngine $r11, $r16;
        arq.query r0;

        r0 := @this: arq.query;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdARQ: void <init>(java.lang.String[])>(r1);

        $r2 = new arq.cmdline.ArgDecl;

        $r3 = newarray (java.lang.String)[0];

        specialinvoke $r2.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "repeat", $r3);

        r0.<arq.query: arq.cmdline.ArgDecl argRepeat> = $r2;

        $r4 = new arq.cmdline.ArgDecl;

        $r5 = newarray (java.lang.String)[0];

        specialinvoke $r4.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "explain", $r5);

        r0.<arq.query: arq.cmdline.ArgDecl argExplain> = $r4;

        $r6 = new arq.cmdline.ArgDecl;

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "optimize";

        specialinvoke $r6.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "opt", $r7);

        r0.<arq.query: arq.cmdline.ArgDecl argOptimize> = $r6;

        r0.<arq.query: int repeatCount> = 1;

        r0.<arq.query: int warmupCount> = 0;

        r0.<arq.query: boolean queryOptimization> = 1;

        $r8 = new arq.cmdline.ModTime;

        specialinvoke $r8.<arq.cmdline.ModTime: void <init>()>();

        r0.<arq.query: arq.cmdline.ModTime modTime> = $r8;

        $r9 = new arq.cmdline.ModQueryIn;

        specialinvoke $r9.<arq.cmdline.ModQueryIn: void <init>()>();

        r0.<arq.query: arq.cmdline.ModQueryIn modQuery> = $r9;

        r0.<arq.query: arq.cmdline.ModDataset modDataset> = null;

        $r10 = new arq.cmdline.ModResultsOut;

        specialinvoke $r10.<arq.cmdline.ModResultsOut: void <init>()>();

        r0.<arq.query: arq.cmdline.ModResultsOut modResults> = $r10;

        $r11 = new arq.cmdline.ModEngine;

        specialinvoke $r11.<arq.cmdline.ModEngine: void <init>()>();

        r0.<arq.query: arq.cmdline.ModEngine modEngine> = $r11;

        r0.<arq.query: long totalTime> = 0L;

        $r12 = virtualinvoke r0.<arq.query: arq.cmdline.ModDataset setModDataset()>();

        r0.<arq.query: arq.cmdline.ModDataset modDataset> = $r12;

        $r13 = r0.<arq.query: arq.cmdline.ModQueryIn modQuery>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r13);

        $r14 = r0.<arq.query: arq.cmdline.ModResultsOut modResults>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r14);

        $r15 = r0.<arq.query: arq.cmdline.ModDataset modDataset>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r15);

        $r16 = r0.<arq.query: arq.cmdline.ModEngine modEngine>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r16);

        $r17 = r0.<arq.query: arq.cmdline.ModTime modTime>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r17);

        $r18 = specialinvoke r0.<arq.cmdline.CmdARQ: arq.cmdline.Usage getUsage()>();

        virtualinvoke $r18.<arq.cmdline.Usage: void startCategory(java.lang.String)>("Control");

        $r19 = r0.<arq.query: arq.cmdline.ArgDecl argExplain>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r19, "--explain", "Explain and log query execution");

        $r20 = r0.<arq.query: arq.cmdline.ArgDecl argRepeat>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r20, "--repeat=N or N,M", "Do N times or N warmup and then M times (use for timing to overcome start up costs of Java)");

        $r21 = r0.<arq.query: arq.cmdline.ArgDecl argOptimize>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r21, "--optimize=", "Turn the query optimizer on or off (default: on)");

        return;
    }

    protected void processModulesAndArgs()
    {
        arq.cmdline.ArgDecl $r1, $r2, $r3, $r4, $r6, $r7, $r11, $r18, $r24, $r38, $r50, $r62;
        com.hp.hpl.jena.sparql.util.Context $r16;
        arq.cmd.CmdException $r8, $r21, $r32, $r44, $r56;
        java.lang.StringBuilder $r9, $r10, $r13, $r22, $r23, $r26, $r33, $r34, $r36, $r37, $r40, $r41, $r45, $r46, $r48, $r49, $r52, $r53, $r57, $r58, $r60, $r61, $r64, $r65;
        java.lang.String $r5, $r12, $r14, $r19, $r25, $r27, $r28, $r29, $r30, $r35, $r39, $r42, $r47, $r51, $r54, $r59, $r63, $r66;
        java.lang.NumberFormatException $r31, $r43, $r55;
        arq.query r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel $r15;
        java.lang.String[] $r20;
        int $i0, $i1, $i2, $i3, $i4;
        com.hp.hpl.jena.sparql.util.Symbol $r17;

        r0 := @this: arq.query;

        specialinvoke r0.<arq.cmdline.CmdARQ: void processModulesAndArgs()>();

        $r1 = r0.<arq.query: arq.cmdline.ArgDecl argRepeat>;

        $z0 = virtualinvoke r0.<arq.query: boolean contains(arq.cmdline.ArgDecl)>($r1);

        if $z0 == 0 goto label12;

        $r18 = r0.<arq.query: arq.cmdline.ArgDecl argRepeat>;

        $r19 = virtualinvoke r0.<arq.query: java.lang.String getValue(arq.cmdline.ArgDecl)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof $r20;

        if $i0 != 1 goto label04;

     label01:
        $r30 = $r20[0];

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r30);

        r0.<arq.query: int repeatCount> = $i4;

     label02:
        goto label12;

     label03:
        $r55 := @caughtexception;

        $r56 = new arq.cmd.CmdException;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t parse ");

        $r59 = $r20[0];

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in arg ");

        $r62 = r0.<arq.query: arq.cmdline.ArgDecl argRepeat>;

        $r63 = virtualinvoke r0.<arq.query: java.lang.String getValue(arq.cmdline.ArgDecl)>($r62);

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as an integer");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r56.<arq.cmd.CmdException: void <init>(java.lang.String)>($r66);

        throw $r56;

     label04:
        $i1 = lengthof $r20;

        if $i1 != 2 goto label11;

     label05:
        $r28 = $r20[0];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r28);

        r0.<arq.query: int warmupCount> = $i2;

     label06:
        goto label08;

     label07:
        $r43 := @caughtexception;

        $r44 = new arq.cmd.CmdException;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t parse ");

        $r47 = $r20[0];

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in arg ");

        $r50 = r0.<arq.query: arq.cmdline.ArgDecl argRepeat>;

        $r51 = virtualinvoke r0.<arq.query: java.lang.String getValue(arq.cmdline.ArgDecl)>($r50);

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as an integer");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<arq.cmd.CmdException: void <init>(java.lang.String)>($r54);

        throw $r44;

     label08:
        $r29 = $r20[1];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r29);

        r0.<arq.query: int repeatCount> = $i3;

     label09:
        goto label12;

     label10:
        $r31 := @caughtexception;

        $r32 = new arq.cmd.CmdException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t parse ");

        $r35 = $r20[1];

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in arg ");

        $r38 = r0.<arq.query: arq.cmdline.ArgDecl argRepeat>;

        $r39 = virtualinvoke r0.<arq.query: java.lang.String getValue(arq.cmdline.ArgDecl)>($r38);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as an integer");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<arq.cmd.CmdException: void <init>(java.lang.String)>($r42);

        throw $r32;

     label11:
        $r21 = new arq.cmd.CmdException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong format for repeat count: ");

        $r24 = r0.<arq.query: arq.cmdline.ArgDecl argRepeat>;

        $r25 = virtualinvoke r0.<arq.query: java.lang.String getValue(arq.cmdline.ArgDecl)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<arq.cmd.CmdException: void <init>(java.lang.String)>($r27);

        throw $r21;

     label12:
        $z9 = virtualinvoke r0.<arq.query: boolean isVerbose()>();

        if $z9 == 0 goto label13;

        $r16 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r17 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol symLogExec>;

        virtualinvoke $r16.<com.hp.hpl.jena.sparql.util.Context: void setTrue(com.hp.hpl.jena.sparql.util.Symbol)>($r17);

     label13:
        $r2 = r0.<arq.query: arq.cmdline.ArgDecl argExplain>;

        $z1 = virtualinvoke r0.<arq.query: boolean hasArg(arq.cmdline.ArgDecl)>($r2);

        if $z1 == 0 goto label14;

        $r15 = <com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel: com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel ALL>;

        staticinvoke <com.hp.hpl.jena.query.ARQ: void setExecutionLogging(com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel)>($r15);

     label14:
        $r3 = r0.<arq.query: arq.cmdline.ArgDecl argOptimize>;

        $z2 = virtualinvoke r0.<arq.query: boolean hasArg(arq.cmdline.ArgDecl)>($r3);

        if $z2 == 0 goto label19;

        $r4 = r0.<arq.query: arq.cmdline.ArgDecl argOptimize>;

        $r5 = virtualinvoke r0.<arq.query: java.lang.String getValue(arq.cmdline.ArgDecl)>($r4);

        $r6 = r0.<arq.query: arq.cmdline.ArgDecl argOptimize>;

        $z3 = virtualinvoke r0.<arq.query: boolean hasValueOfTrue(arq.cmdline.ArgDecl)>($r6);

        if $z3 != 0 goto label15;

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("on");

        if $z4 != 0 goto label15;

        $z5 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("yes");

        if $z5 == 0 goto label16;

     label15:
        r0.<arq.query: boolean queryOptimization> = 1;

        goto label19;

     label16:
        $r7 = r0.<arq.query: arq.cmdline.ArgDecl argOptimize>;

        $z6 = virtualinvoke r0.<arq.query: boolean hasValueOfFalse(arq.cmdline.ArgDecl)>($r7);

        if $z6 != 0 goto label17;

        $z7 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("off");

        if $z7 != 0 goto label17;

        $z8 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no");

        if $z8 == 0 goto label18;

     label17:
        r0.<arq.query: boolean queryOptimization> = 0;

        goto label19;

     label18:
        $r8 = new arq.cmd.CmdException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Optimization flag must be true/false/on/off/yes/no. Found: ");

        $r11 = r0.<arq.query: arq.cmdline.ArgDecl argOptimize>;

        $r12 = virtualinvoke r0.<arq.query: java.lang.String getValue(arq.cmdline.ArgDecl)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<arq.cmd.CmdException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label19:
        return;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label05 to label06 with label07;
        catch java.lang.NumberFormatException from label08 to label09 with label10;
    }

    protected arq.cmdline.ModDataset setModDataset()
    {
        arq.query r1;
        arq.cmdline.ModDatasetGeneralAssembler $r0;

        r1 := @this: arq.query;

        $r0 = new arq.cmdline.ModDatasetGeneralAssembler;

        specialinvoke $r0.<arq.cmdline.ModDatasetGeneralAssembler: void <init>()>();

        return $r0;
    }

    protected void exec()
    {
        com.hp.hpl.jena.sparql.resultset.ResultsFormat $r17, $r18;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.util.Context $r19, $r21;
        java.lang.StringBuilder $r4, $r6, $r9, $r10, $r11, $r12, $r13;
        arq.cmdline.ModTime $r1, $r2, $r7, $r15;
        long $l3, $l4, $l5, l10;
        arq.cmdline.ModResultsOut $r16;
        int $i0, $i1, $i2, $i6, i7, $i8, i9;
        java.lang.String $r3, $r8, $r14;
        com.hp.hpl.jena.sparql.util.Symbol $r20, $r22;
        java.io.PrintStream $r5;
        arq.query r0;

        r0 := @this: arq.query;

        $z0 = r0.<arq.query: boolean queryOptimization>;

        if $z0 != 0 goto label1;

        $r21 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r22 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optimization>;

        virtualinvoke $r21.<com.hp.hpl.jena.sparql.util.Context: void setFalse(com.hp.hpl.jena.sparql.util.Symbol)>($r22);

     label1:
        $z1 = r0.<arq.query: boolean cmdStrictMode>;

        if $z1 == 0 goto label2;

        $r19 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r20 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol optimization>;

        virtualinvoke $r19.<com.hp.hpl.jena.sparql.util.Context: void setFalse(com.hp.hpl.jena.sparql.util.Symbol)>($r20);

     label2:
        i7 = 0;

     label3:
        $i8 = r0.<arq.query: int warmupCount>;

        if i7 >= $i8 goto label4;

        $r18 = <com.hp.hpl.jena.sparql.resultset.ResultsFormat: com.hp.hpl.jena.sparql.resultset.ResultsFormat FMT_NONE>;

        virtualinvoke r0.<arq.query: void queryExec(boolean,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>(0, $r18);

        i7 = i7 + 1;

        goto label3;

     label4:
        i9 = 0;

     label5:
        $i0 = r0.<arq.query: int repeatCount>;

        if i9 >= $i0 goto label6;

        $r15 = r0.<arq.query: arq.cmdline.ModTime modTime>;

        $z3 = virtualinvoke $r15.<arq.cmdline.ModTime: boolean timingEnabled()>();

        $r16 = r0.<arq.query: arq.cmdline.ModResultsOut modResults>;

        $r17 = virtualinvoke $r16.<arq.cmdline.ModResultsOut: com.hp.hpl.jena.sparql.resultset.ResultsFormat getResultsFormat()>();

        virtualinvoke r0.<arq.query: void queryExec(boolean,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>($z3, $r17);

        i9 = i9 + 1;

        goto label5;

     label6:
        $r1 = r0.<arq.query: arq.cmdline.ModTime modTime>;

        $z2 = virtualinvoke $r1.<arq.cmdline.ModTime: boolean timingEnabled()>();

        if $z2 == 0 goto label7;

        $i1 = r0.<arq.query: int repeatCount>;

        if $i1 <= 1 goto label7;

        $l4 = r0.<arq.query: long totalTime>;

        $i2 = r0.<arq.query: int repeatCount>;

        $l3 = (long) $i2;

        l10 = $l4 / $l3;

        $r2 = r0.<arq.query: arq.cmdline.ModTime modTime>;

        $r3 = virtualinvoke $r2.<arq.cmdline.ModTime: java.lang.String timeStr(long)>(l10);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total time: ");

        $r7 = r0.<arq.query: arq.cmdline.ModTime modTime>;

        $l5 = r0.<arq.query: long totalTime>;

        $r8 = virtualinvoke $r7.<arq.cmdline.ModTime: java.lang.String timeStr(long)>($l5);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sec for repeat count of ");

        $i6 = r0.<arq.query: int repeatCount>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : average: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label7:
        return;
    }

    protected java.lang.String getCommandName()
    {
        arq.query r0;
        java.lang.String $r1;

        r0 := @this: arq.query;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        return $r1;
    }

    protected java.lang.String getSummary()
    {
        arq.query r1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;

        r1 := @this: arq.query;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<arq.query: java.lang.String getCommandName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --data=<file> --query=<query>");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected com.hp.hpl.jena.query.Dataset getDataset()
    {
        java.io.PrintStream $r4;
        org.apache.jena.riot.RiotException $r3;
        arq.query r0;
        com.hp.hpl.jena.query.Dataset $r2;
        arq.cmdline.ModDataset $r1;
        arq.cmd.TerminationException $r5;

        r0 := @this: arq.query;

     label1:
        $r1 = r0.<arq.query: arq.cmdline.ModDataset modDataset>;

        $r2 = virtualinvoke $r1.<arq.cmdline.ModDataset: com.hp.hpl.jena.query.Dataset getDataset()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Failed to load data");

        $r5 = new arq.cmd.TerminationException;

        specialinvoke $r5.<arq.cmd.TerminationException: void <init>(int)>(1);

        throw $r5;

        catch org.apache.jena.riot.RiotException from label1 to label2 with label3;
    }

    protected void queryExec(boolean, com.hp.hpl.jena.sparql.resultset.ResultsFormat)
    {
        com.hp.hpl.jena.sparql.resultset.ResultsFormat r6;
        boolean $z0, $z1, z2, $z3;
        arq.cmd.TerminationException $r17;
        java.lang.Exception $r21;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r31;
        arq.cmd.CmdException $r22, $r23, $r26;
        com.hp.hpl.jena.query.Dataset $r3;
        java.lang.StringBuilder $r8, $r10, $r13, $r14;
        com.hp.hpl.jena.query.QueryExecution $r5;
        java.lang.Throwable $r34, $r37;
        com.hp.hpl.jena.query.Query $r2;
        com.hp.hpl.jena.shared.JenaException $r24;
        arq.cmdline.ModTime $r4, $r7, $r11;
        com.hp.hpl.jena.query.QueryException $r25;
        long $l0, $l1, $l2;
        arq.cmdline.ModQueryIn $r1;
        java.lang.String $r12, $r15, $r29, $r33;
        java.io.PrintStream $r9, $r16, $r19, $r20, $r28, $r30, $r32, $r35, $r36, $r38, $r39, $r41, $r42;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r27;
        com.hp.hpl.jena.query.QueryCancelledException $r40;
        org.apache.jena.atlas.io.IndentedWriter $r18;
        arq.query r0;

        r0 := @this: arq.query;

        z2 := @parameter0: boolean;

        r6 := @parameter1: com.hp.hpl.jena.sparql.resultset.ResultsFormat;

     label01:
        $r1 = r0.<arq.query: arq.cmdline.ModQueryIn modQuery>;

        $r2 = virtualinvoke $r1.<arq.cmdline.ModQueryIn: com.hp.hpl.jena.query.Query getQuery()>();

        $z0 = virtualinvoke r0.<arq.query: boolean isVerbose()>();

        if $z0 == 0 goto label02;

        $r18 = new org.apache.jena.atlas.io.IndentedWriter;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r18.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream,boolean)>($r19, 1);

        virtualinvoke $r2.<com.hp.hpl.jena.query.Query: void serialize(org.apache.jena.atlas.io.IndentedWriter)>($r18);

        virtualinvoke $r18.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        $r20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r20.<java.io.PrintStream: void println()>();

     label02:
        $z1 = virtualinvoke r0.<arq.query: boolean isQuiet()>();

        if $z1 == 0 goto label03;

        staticinvoke <org.apache.jena.atlas.logging.Log: void setError(java.lang.String)>("org.apache.jena.riot");

     label03:
        $r3 = virtualinvoke r0.<arq.query: com.hp.hpl.jena.query.Dataset getDataset()>();

        $r4 = r0.<arq.query: arq.cmdline.ModTime modTime>;

        virtualinvoke $r4.<arq.cmdline.ModTime: void startTimer()>();

        $r5 = staticinvoke <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.Dataset)>($r2, $r3);

        if $r3 != null goto label04;

        $z3 = virtualinvoke $r2.<com.hp.hpl.jena.query.Query: boolean hasDatasetDescription()>();

        if $z3 != 0 goto label04;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>("Dataset not specified in query nor provided on command line.");

        $r17 = new arq.cmd.TerminationException;

        specialinvoke $r17.<arq.cmd.TerminationException: void <init>(int)>(1);

        throw $r17;

     label04:
        staticinvoke <com.hp.hpl.jena.sparql.util.QueryExecUtils: void executeQuery(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.QueryExecution,com.hp.hpl.jena.sparql.resultset.ResultsFormat)>($r2, $r5, r6);

     label05:
        goto label07;

     label06:
        $r40 := @caughtexception;

        $r41 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r41.<java.io.PrintStream: void flush()>();

        $r42 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.String)>("Query timed out");

     label07:
        $r7 = r0.<arq.query: arq.cmdline.ModTime modTime>;

        $l0 = virtualinvoke $r7.<arq.cmdline.ModTime: long endTimer()>();

        if z2 == 0 goto label08;

        $l1 = r0.<arq.query: long totalTime>;

        $l2 = $l1 + $l0;

        r0.<arq.query: long totalTime> = $l2;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time: ");

        $r11 = r0.<arq.query: arq.cmdline.ModTime modTime>;

        $r12 = virtualinvoke $r11.<arq.cmdline.ModTime: java.lang.String timeStr(long)>($l0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sec");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label08:
        interfaceinvoke $r5.<com.hp.hpl.jena.query.QueryExecution: void close()>();

     label09:
        goto label17;

     label10:
        $r31 := @caughtexception;

        $r32 = <java.lang.System: java.io.PrintStream err>;

        $r33 = virtualinvoke $r31.<com.hp.hpl.jena.sparql.ARQInternalErrorException: java.lang.String getMessage()>();

        virtualinvoke $r32.<java.io.PrintStream: void println(java.lang.String)>($r33);

        $r34 = virtualinvoke $r31.<com.hp.hpl.jena.sparql.ARQInternalErrorException: java.lang.Throwable getCause()>();

        if $r34 == null goto label11;

        $r36 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r36.<java.io.PrintStream: void println(java.lang.String)>("Cause:");

        $r37 = virtualinvoke $r31.<com.hp.hpl.jena.sparql.ARQInternalErrorException: java.lang.Throwable getCause()>();

        $r38 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r37.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r38);

        $r39 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r39.<java.io.PrintStream: void println()>();

     label11:
        $r35 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r31.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void printStackTrace(java.io.PrintStream)>($r35);

        goto label17;

     label12:
        $r27 := @caughtexception;

        $r28 = <java.lang.System: java.io.PrintStream err>;

        $r29 = virtualinvoke $r27.<com.hp.hpl.jena.sparql.resultset.ResultSetException: java.lang.String getMessage()>();

        virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>($r29);

        $r30 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r27.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void printStackTrace(java.io.PrintStream)>($r30);

        goto label17;

     label13:
        $r25 := @caughtexception;

        $r26 = new arq.cmd.CmdException;

        specialinvoke $r26.<arq.cmd.CmdException: void <init>(java.lang.String,java.lang.Throwable)>("Query Exeception", $r25);

        throw $r26;

     label14:
        $r24 := @caughtexception;

        throw $r24;

     label15:
        $r23 := @caughtexception;

        throw $r23;

     label16:
        $r21 := @caughtexception;

        $r22 = new arq.cmd.CmdException;

        specialinvoke $r22.<arq.cmd.CmdException: void <init>(java.lang.String,java.lang.Throwable)>("Exception", $r21);

        throw $r22;

     label17:
        return;

        catch com.hp.hpl.jena.query.QueryCancelledException from label04 to label05 with label06;
        catch com.hp.hpl.jena.sparql.ARQInternalErrorException from label01 to label09 with label10;
        catch com.hp.hpl.jena.sparql.resultset.ResultSetException from label01 to label09 with label12;
        catch com.hp.hpl.jena.query.QueryException from label01 to label09 with label13;
        catch com.hp.hpl.jena.shared.JenaException from label01 to label09 with label14;
        catch arq.cmd.CmdException from label01 to label09 with label15;
        catch java.lang.Exception from label01 to label09 with label16;
    }
}
