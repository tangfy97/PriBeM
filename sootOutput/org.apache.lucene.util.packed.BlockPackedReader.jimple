public final class org.apache.lucene.util.packed.BlockPackedReader extends java.lang.Object
{
    private final int blockShift;
    private final int blockMask;
    private final long valueCount;
    private final long[] minValues;
    private final org.apache.lucene.util.packed.PackedInts$Reader[] subReaders;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.store.IndexInput, int, int, long, boolean) throws java.io.IOException
    {
        byte $b8, $b13, $b14;
        boolean z0, $z1;
        org.apache.lucene.util.packed.PackedInts$Reader[] $r1, $r4, $r7, $r11;
        org.apache.lucene.util.packed.PackedInts$Reader $r5, $r8;
        org.apache.lucene.util.packed.PackedInts$NullReader $r17;
        long l1, $l4, $l5, $l6, $l7, $l10, $l11, $l12, $l18, $l19, $l20, $l21, $l22, $l23, $l26, $l27, $l28, $l29, $l30, $l31;
        short s15, $s17, $s35;
        long[] r14;
        int i0, $i2, $i3, $i9, i16, i24, i25, $i32, i33, $i34, $i36;
        org.apache.lucene.store.IndexInput r2;
        org.apache.lucene.util.packed.PackedInts$Format $r3, $r6, $r9;
        java.io.IOException $r16;
        java.lang.IllegalArgumentException $r15;
        org.apache.lucene.util.packed.BlockPackedReader r0;

        r0 := @this: org.apache.lucene.util.packed.BlockPackedReader;

        r2 := @parameter0: org.apache.lucene.store.IndexInput;

        i25 := @parameter1: int;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.lucene.util.packed.BlockPackedWriter: void checkBlockSize(int)>(i0);

        r0.<org.apache.lucene.util.packed.BlockPackedReader: long valueCount> = l1;

        $i2 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i0);

        r0.<org.apache.lucene.util.packed.BlockPackedReader: int blockShift> = $i2;

        $i3 = i0 - 1;

        r0.<org.apache.lucene.util.packed.BlockPackedReader: int blockMask> = $i3;

        $l4 = (long) i0;

        $l5 = l1 / $l4;

        $i9 = (int) $l5;

        $l6 = (long) i0;

        $l7 = l1 % $l6;

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label01;

        $z1 = 0;

        goto label02;

     label01:
        $z1 = 1;

     label02:
        $i32 = $i9 + $z1;

        $l11 = (long) $i32;

        $l10 = (long) i0;

        $l12 = $l11 * $l10;

        $b13 = $l12 cmp l1;

        $i34 = (int) $b13;

        if $i34 >= 0 goto label03;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("valueCount is too large for this block size");

        throw $r15;

     label03:
        r14 = null;

        $r1 = newarray (org.apache.lucene.util.packed.PackedInts$Reader)[$i32];

        r0.<org.apache.lucene.util.packed.BlockPackedReader: org.apache.lucene.util.packed.PackedInts$Reader[] subReaders> = $r1;

        i33 = 0;

     label04:
        if i33 >= $i32 goto label11;

        $b14 = virtualinvoke r2.<org.apache.lucene.store.IndexInput: byte readByte()>();

        $s35 = (short) $b14;

        s15 = $s35 & 255;

        $i36 = (int) s15;

        i16 = $i36 >>> 1;

        if i16 <= 64 goto label05;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("Corrupted");

        throw $r16;

     label05:
        $s17 = s15 & 1;

        if $s17 != 0 goto label07;

        if r14 != null goto label06;

        r14 = newarray (long)[$i32];

     label06:
        $l29 = staticinvoke <org.apache.lucene.util.packed.BlockPackedReaderIterator: long readVLong(org.apache.lucene.store.DataInput)>(r2);

        $l30 = 1L + $l29;

        $l31 = staticinvoke <org.apache.lucene.util.packed.BlockPackedReaderIterator: long zigZagDecode(long)>($l30);

        r14[i33] = $l31;

     label07:
        if i16 != 0 goto label08;

        $r11 = r0.<org.apache.lucene.util.packed.BlockPackedReader: org.apache.lucene.util.packed.PackedInts$Reader[] subReaders>;

        $r17 = new org.apache.lucene.util.packed.PackedInts$NullReader;

        specialinvoke $r17.<org.apache.lucene.util.packed.PackedInts$NullReader: void <init>(int)>(i0);

        $r11[i33] = $r17;

        goto label10;

     label08:
        $l22 = (long) i0;

        $l19 = (long) i33;

        $l18 = (long) i0;

        $l20 = $l19 * $l18;

        $l21 = l1 - $l20;

        $l23 = staticinvoke <java.lang.Math: long min(long,long)>($l22, $l21);

        i24 = (int) $l23;

        if z0 == 0 goto label09;

        $l26 = virtualinvoke r2.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $r7 = r0.<org.apache.lucene.util.packed.BlockPackedReader: org.apache.lucene.util.packed.PackedInts$Reader[] subReaders>;

        $r6 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $r8 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getDirectReaderNoHeader(org.apache.lucene.store.IndexInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>(r2, $r6, i25, i24, i16);

        $r7[i33] = $r8;

        $r9 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $l27 = virtualinvoke $r9.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>(i25, i24, i16);

        $l28 = $l26 + $l27;

        virtualinvoke r2.<org.apache.lucene.store.IndexInput: void seek(long)>($l28);

        goto label10;

     label09:
        $r4 = r0.<org.apache.lucene.util.packed.BlockPackedReader: org.apache.lucene.util.packed.PackedInts$Reader[] subReaders>;

        $r3 = <org.apache.lucene.util.packed.PackedInts$Format: org.apache.lucene.util.packed.PackedInts$Format PACKED>;

        $r5 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput,org.apache.lucene.util.packed.PackedInts$Format,int,int,int)>(r2, $r3, i25, i24, i16);

        $r4[i33] = $r5;

     label10:
        i33 = i33 + 1;

        goto label04;

     label11:
        r0.<org.apache.lucene.util.packed.BlockPackedReader: long[] minValues> = r14;

        return;
    }

    public long get(long)
    {
        long l0, $l2, $l4, $l5, $l6, $l7, $l9, $l13;
        java.lang.AssertionError $r6;
        long[] $r1, $r2;
        byte $b8, $b10;
        int $i1, $i3, $i11, $i12, $i14, $i15;
        boolean $z0;
        org.apache.lucene.util.packed.PackedInts$Reader[] $r3;
        org.apache.lucene.util.packed.BlockPackedReader r0;
        org.apache.lucene.util.packed.PackedInts$Reader $r4;

        r0 := @this: org.apache.lucene.util.packed.BlockPackedReader;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.packed.BlockPackedReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b8 = l0 cmp 0L;

        $i14 = (int) $b8;

        if $i14 < 0 goto label1;

        $l9 = r0.<org.apache.lucene.util.packed.BlockPackedReader: long valueCount>;

        $b10 = l0 cmp $l9;

        $i15 = (int) $b10;

        if $i15 < 0 goto label2;

     label1:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $i1 = r0.<org.apache.lucene.util.packed.BlockPackedReader: int blockShift>;

        $l2 = l0 >>> $i1;

        $i11 = (int) $l2;

        $i3 = r0.<org.apache.lucene.util.packed.BlockPackedReader: int blockMask>;

        $l4 = (long) $i3;

        $l5 = l0 & $l4;

        $i12 = (int) $l5;

        $r1 = r0.<org.apache.lucene.util.packed.BlockPackedReader: long[] minValues>;

        if $r1 != null goto label3;

        $l13 = 0L;

        goto label4;

     label3:
        $r2 = r0.<org.apache.lucene.util.packed.BlockPackedReader: long[] minValues>;

        $l13 = $r2[$i11];

     label4:
        $r3 = r0.<org.apache.lucene.util.packed.BlockPackedReader: org.apache.lucene.util.packed.PackedInts$Reader[] subReaders>;

        $r4 = $r3[$i11];

        $l6 = interfaceinvoke $r4.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i12);

        $l7 = $l13 + $l6;

        return $l7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/BlockPackedReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.BlockPackedReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
