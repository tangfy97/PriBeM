final class kodkod.instance.TupleSet$1 extends java.lang.Object implements java.util.Iterator
{
    kodkod.util.ints.IntIterator indexIter;
    final kodkod.instance.TupleSet this$0;

    void <init>(kodkod.instance.TupleSet)
    {
        kodkod.util.ints.IntSet $r2;
        kodkod.instance.TupleSet$1 r0;
        kodkod.util.ints.IntIterator $r3;
        kodkod.instance.TupleSet r1;

        r0 := @this: kodkod.instance.TupleSet$1;

        r1 := @parameter0: kodkod.instance.TupleSet;

        r0.<kodkod.instance.TupleSet$1: kodkod.instance.TupleSet this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kodkod.instance.TupleSet: kodkod.util.ints.IntSet access$2(kodkod.instance.TupleSet)>(r1);

        $r3 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        r0.<kodkod.instance.TupleSet$1: kodkod.util.ints.IntIterator indexIter> = $r3;

        return;
    }

    public boolean hasNext()
    {
        kodkod.instance.TupleSet$1 r0;
        kodkod.util.ints.IntIterator $r1;
        boolean $z0;

        r0 := @this: kodkod.instance.TupleSet$1;

        $r1 = r0.<kodkod.instance.TupleSet$1: kodkod.util.ints.IntIterator indexIter>;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        return $z0;
    }

    public kodkod.instance.Tuple next()
    {
        kodkod.instance.Tuple $r6;
        kodkod.util.ints.IntIterator $r5;
        int $i0, $i1;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleSet$1 r0;
        kodkod.instance.TupleFactory $r3;
        kodkod.instance.TupleSet $r1, $r4;

        r0 := @this: kodkod.instance.TupleSet$1;

        $r1 = r0.<kodkod.instance.TupleSet$1: kodkod.instance.TupleSet this$0>;

        $r2 = staticinvoke <kodkod.instance.TupleSet: kodkod.instance.Universe access$3(kodkod.instance.TupleSet)>($r1);

        $r3 = virtualinvoke $r2.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r4 = r0.<kodkod.instance.TupleSet$1: kodkod.instance.TupleSet this$0>;

        $i0 = staticinvoke <kodkod.instance.TupleSet: int access$4(kodkod.instance.TupleSet)>($r4);

        $r5 = r0.<kodkod.instance.TupleSet$1: kodkod.util.ints.IntIterator indexIter>;

        $i1 = interfaceinvoke $r5.<kodkod.util.ints.IntIterator: int next()>();

        $r6 = virtualinvoke $r3.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(int,int)>($i0, $i1);

        return $r6;
    }

    public void remove()
    {
        kodkod.instance.TupleSet$1 r0;
        kodkod.util.ints.IntIterator $r1;

        r0 := @this: kodkod.instance.TupleSet$1;

        $r1 = r0.<kodkod.instance.TupleSet$1: kodkod.util.ints.IntIterator indexIter>;

        interfaceinvoke $r1.<kodkod.util.ints.IntIterator: void remove()>();

        return;
    }

    public volatile java.lang.Object next()
    {
        kodkod.instance.Tuple $r1;
        kodkod.instance.TupleSet$1 r0;

        r0 := @this: kodkod.instance.TupleSet$1;

        $r1 = virtualinvoke r0.<kodkod.instance.TupleSet$1: kodkod.instance.Tuple next()>();

        return $r1;
    }
}
