public abstract class org.apache.pdfbox.pdmodel.encryption.SecurityHandler extends java.lang.Object
{
    private static final int DEFAULT_KEY_LENGTH;
    private static final byte[] AES_SALT;
    protected int version;
    protected int keyLength;
    protected byte[] encryptionKey;
    protected org.apache.pdfbox.pdmodel.PDDocument document;
    protected org.apache.pdfbox.encryption.ARCFour rc4;
    private java.util.Set objects;
    private java.util.Set potentialSignatures;
    private boolean aes;
    protected org.apache.pdfbox.pdmodel.encryption.AccessPermission currentAccessPermission;

    public void <init>()
    {
        java.util.HashSet $r2, $r3;
        org.apache.pdfbox.encryption.ARCFour $r1;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: int keyLength> = 40;

        $r1 = new org.apache.pdfbox.encryption.ARCFour;

        specialinvoke $r1.<org.apache.pdfbox.encryption.ARCFour: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: java.util.Set objects> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: java.util.Set potentialSignatures> = $r3;

        r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.pdfbox.pdmodel.encryption.AccessPermission currentAccessPermission> = null;

        return;
    }

    public abstract void prepareDocumentForEncryption(org.apache.pdfbox.pdmodel.PDDocument) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException;

    public abstract void prepareForDecryption(org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary, org.apache.pdfbox.cos.COSArray, org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException;

    public abstract void decryptDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException;

    protected void proceedDecryption() throws java.io.IOException, org.apache.pdfbox.exceptions.CryptographyException
    {
        org.apache.pdfbox.cos.COSArray r5;
        org.apache.pdfbox.cos.COSObject $r12;
        int $i0, i1;
        boolean $z0;
        org.apache.pdfbox.cos.COSDocument $r2, $r7;
        java.util.Iterator $r9;
        org.apache.pdfbox.pdmodel.PDDocument $r1, $r6, $r10;
        java.util.Set $r15;
        java.io.IOException $r14;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;
        org.apache.pdfbox.cos.COSDictionary $r3, r16;
        java.util.List $r8;
        org.apache.pdfbox.cos.COSBase $r4, $r13;
        java.lang.Object $r11;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        $r1 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>();

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getObjectFromPath(java.lang.String)>("Root/AcroForm/Fields");

        r5 = (org.apache.pdfbox.cos.COSArray) $r4;

        if r5 == null goto label4;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r5.<org.apache.pdfbox.cos.COSArray: int size()>();

        if i1 >= $i0 goto label4;

        $r13 = virtualinvoke r5.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i1);

        r16 = (org.apache.pdfbox.cos.COSDictionary) $r13;

        if r16 == null goto label2;

        $r15 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: java.util.Set potentialSignatures>;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void addDictionaryAndSubDictionary(java.util.Set,org.apache.pdfbox.cos.COSDictionary)>($r15, r16);

        goto label3;

     label2:
        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Could not decypt document, object not found.");

        throw $r14;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r6 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        $r7 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r8 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSDocument: java.util.List getObjects()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (org.apache.pdfbox.cos.COSObject) $r11;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decryptObject(org.apache.pdfbox.cos.COSObject)>($r12);

        goto label5;

     label6:
        $r10 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.pdfbox.pdmodel.PDDocument document>;

        virtualinvoke $r10.<org.apache.pdfbox.pdmodel.PDDocument: void setEncryptionDictionary(org.apache.pdfbox.pdmodel.encryption.PDEncryptionDictionary)>(null);

        return;
    }

    private void addDictionaryAndSubDictionary(java.util.Set, org.apache.pdfbox.cos.COSDictionary)
    {
        org.apache.pdfbox.cos.COSName $r2, $r5;
        org.apache.pdfbox.cos.COSArray r4;
        java.util.Set r1;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r7;
        org.apache.pdfbox.cos.COSDictionary r0, $r8, $r10;
        org.apache.pdfbox.cos.COSBase $r3, $r6, $r9;
        int $i0, i1;
        boolean $z0;

        r7 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        r1 := @parameter0: java.util.Set;

        r0 := @parameter1: org.apache.pdfbox.cos.COSDictionary;

        if r0 == null goto label3;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS>;

        $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2);

        r4 = (org.apache.pdfbox.cos.COSArray) $r3;

        i1 = 0;

     label1:
        if r4 == null goto label2;

        $i0 = virtualinvoke r4.<org.apache.pdfbox.cos.COSArray: int size()>();

        if i1 >= $i0 goto label2;

        $r9 = virtualinvoke r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i1);

        $r10 = (org.apache.pdfbox.cos.COSDictionary) $r9;

        specialinvoke r7.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void addDictionaryAndSubDictionary(java.util.Set,org.apache.pdfbox.cos.COSDictionary)>(r1, $r10);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName V>;

        $r6 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5);

        $z0 = $r6 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z0 == 0 goto label3;

        $r8 = (org.apache.pdfbox.cos.COSDictionary) $r6;

        specialinvoke r7.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void addDictionaryAndSubDictionary(java.util.Set,org.apache.pdfbox.cos.COSDictionary)>(r1, $r8);

     label3:
        return;
    }

    public void encryptData(long, long, java.io.InputStream, java.io.OutputStream) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        java.io.OutputStream r2;
        long l0, l1;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: java.io.InputStream;

        r2 := @parameter3: java.io.OutputStream;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void encryptData(long,long,java.io.InputStream,java.io.OutputStream,boolean)>(l0, l1, r1, r2, 0);

        return;
    }

    public void encryptData(long, long, java.io.InputStream, java.io.OutputStream, boolean) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] $r1, $r2, $r3, $r5, r6, r11, $r16, $r17, $r18;
        javax.crypto.spec.SecretKeySpec $r33;
        byte $b7, $b13, $b19, $b25, $b31, $b35;
        java.security.NoSuchAlgorithmException $r22, $r29;
        java.security.InvalidKeyException $r26;
        java.lang.Throwable $r28;
        long l4, $l5, $l10, $l11, $l16, $l17, l22, $l23, $l28, $l29;
        java.security.InvalidAlgorithmParameterException $r24;
        javax.crypto.spec.IvParameterSpec $r34;
        org.apache.pdfbox.exceptions.CryptographyException $r32;
        boolean $z0, $z1, $z2, z3;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;
        java.security.MessageDigest $r4;
        org.apache.pdfbox.encryption.ARCFour $r7, $r10;
        javax.crypto.Cipher $r12;
        javax.crypto.CipherInputStream $r35;
        javax.crypto.NoSuchPaddingException $r20;
        int $i0, $i1, $i2, $i3, $i6, $i8, $i9, $i12, $i14, $i15, $i18, $i20, $i21, $i24, $i26, $i27, $i30, $i32, $i33, $i34, $i36, $i38;
        java.io.OutputStream r9;
        java.lang.IllegalArgumentException $r31;
        org.apache.pdfbox.exceptions.WrappedIOException $r36, $r37, $r38, $r39;
        java.io.InputStream r8;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        l4 := @parameter0: long;

        l22 := @parameter1: long;

        r8 := @parameter2: java.io.InputStream;

        r9 := @parameter3: java.io.OutputStream;

        z3 := @parameter4: boolean;

        $z0 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: boolean aes>;

        if $z0 == 0 goto label01;

        if z3 != 0 goto label01;

        $r31 = new java.lang.IllegalArgumentException;

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("AES encryption is not yet implemented.");

        throw $r31;

     label01:
        $r1 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: byte[] encryptionKey>;

        $i0 = lengthof $r1;

        $i1 = $i0 + 5;

        $r18 = newarray (byte)[$i1];

        $r3 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: byte[] encryptionKey>;

        $r2 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: byte[] encryptionKey>;

        $i2 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r18, 0, $i2);

        $i3 = lengthof $r18;

        $i8 = $i3 - 5;

        $l5 = l4 & 255L;

        $i6 = (int) $l5;

        $b7 = (byte) $i6;

        $r18[$i8] = $b7;

        $i9 = lengthof $r18;

        $i14 = $i9 - 4;

        $l10 = l4 >> 8;

        $l11 = $l10 & 255L;

        $i12 = (int) $l11;

        $b13 = (byte) $i12;

        $r18[$i14] = $b13;

        $i15 = lengthof $r18;

        $i20 = $i15 - 3;

        $l16 = l4 >> 16;

        $l17 = $l16 & 255L;

        $i18 = (int) $l17;

        $b19 = (byte) $i18;

        $r18[$i20] = $b19;

        $i21 = lengthof $r18;

        $i26 = $i21 - 2;

        $l23 = l22 & 255L;

        $i24 = (int) $l23;

        $b25 = (byte) $i24;

        $r18[$i26] = $b25;

        $i27 = lengthof $r18;

        $i32 = $i27 - 1;

        $l28 = l22 >> 8;

        $l29 = $l28 & 255L;

        $i30 = (int) $l29;

        $b31 = (byte) $i30;

        $r18[$i32] = $b31;

     label02:
        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r18);

        $z1 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: boolean aes>;

        if $z1 == 0 goto label03;

        $r17 = <org.apache.pdfbox.pdmodel.encryption.SecurityHandler: byte[] AES_SALT>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r17);

     label03:
        $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

     label04:
        goto label06;

     label05:
        $r29 := @caughtexception;

        $r32 = new org.apache.pdfbox.exceptions.CryptographyException;

        specialinvoke $r32.<org.apache.pdfbox.exceptions.CryptographyException: void <init>(java.lang.Exception)>($r29);

        throw $r32;

     label06:
        $i33 = lengthof $r18;

        $i34 = staticinvoke <java.lang.Math: int min(int,int)>($i33, 16);

        r6 = newarray (byte)[$i34];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r6, 0, $i34);

        $z2 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: boolean aes>;

        if $z2 == 0 goto label21;

        r11 = newarray (byte)[16];

        virtualinvoke r8.<java.io.InputStream: int read(byte[])>(r11);

     label07:
        $r12 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

        $r33 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r33.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r6, "AES");

        $r34 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r34.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r11);

        if z3 == 0 goto label08;

        $b35 = 2;

        goto label09;

     label08:
        $b35 = 1;

     label09:
        virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b35, $r33, $r34);

        $r35 = new javax.crypto.CipherInputStream;

        specialinvoke $r35.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>(r8, $r12);

     label10:
        $r16 = newarray (byte)[4096];

     label11:
        $i36 = virtualinvoke $r35.<javax.crypto.CipherInputStream: int read(byte[])>($r16);

        $i38 = (int) -1;

        if $i38 == $i36 goto label12;

        virtualinvoke r9.<java.io.OutputStream: void write(byte[],int,int)>($r16, 0, $i36);

        goto label11;

     label12:
        virtualinvoke $r35.<javax.crypto.CipherInputStream: void close()>();

        goto label15;

     label13:
        $r28 := @caughtexception;

     label14:
        virtualinvoke $r35.<javax.crypto.CipherInputStream: void close()>();

        throw $r28;

     label15:
        goto label20;

     label16:
        $r26 := @caughtexception;

        $r36 = new org.apache.pdfbox.exceptions.WrappedIOException;

        specialinvoke $r36.<org.apache.pdfbox.exceptions.WrappedIOException: void <init>(java.lang.Throwable)>($r26);

        throw $r36;

     label17:
        $r24 := @caughtexception;

        $r37 = new org.apache.pdfbox.exceptions.WrappedIOException;

        specialinvoke $r37.<org.apache.pdfbox.exceptions.WrappedIOException: void <init>(java.lang.Throwable)>($r24);

        throw $r37;

     label18:
        $r22 := @caughtexception;

        $r38 = new org.apache.pdfbox.exceptions.WrappedIOException;

        specialinvoke $r38.<org.apache.pdfbox.exceptions.WrappedIOException: void <init>(java.lang.Throwable)>($r22);

        throw $r38;

     label19:
        $r20 := @caughtexception;

        $r39 = new org.apache.pdfbox.exceptions.WrappedIOException;

        specialinvoke $r39.<org.apache.pdfbox.exceptions.WrappedIOException: void <init>(java.lang.Throwable)>($r20);

        throw $r39;

     label20:
        goto label22;

     label21:
        $r7 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r7.<org.apache.pdfbox.encryption.ARCFour: void setKey(byte[])>(r6);

        $r10 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.pdfbox.encryption.ARCFour rc4>;

        virtualinvoke $r10.<org.apache.pdfbox.encryption.ARCFour: void write(java.io.InputStream,java.io.OutputStream)>(r8, r9);

     label22:
        virtualinvoke r9.<java.io.OutputStream: void flush()>();

        return;

        catch java.security.NoSuchAlgorithmException from label02 to label04 with label05;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.security.InvalidKeyException from label07 to label15 with label16;
        catch java.security.InvalidAlgorithmParameterException from label07 to label15 with label17;
        catch java.security.NoSuchAlgorithmException from label07 to label15 with label18;
        catch javax.crypto.NoSuchPaddingException from label07 to label15 with label19;
    }

    private void decryptObject(org.apache.pdfbox.cos.COSObject) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        org.apache.pdfbox.cos.COSObject r0;
        long l1, l3;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r4;
        org.apache.pdfbox.cos.COSInteger $r1, $r2;
        org.apache.pdfbox.cos.COSBase $r3;
        int $i0, $i2;

        r4 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        r0 := @parameter0: org.apache.pdfbox.cos.COSObject;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSInteger getObjectNumber()>();

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSInteger: int intValue()>();

        l1 = (long) $i0;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSInteger getGenerationNumber()>();

        $i2 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSInteger: int intValue()>();

        l3 = (long) $i2;

        $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>();

        specialinvoke r4.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decrypt(org.apache.pdfbox.cos.COSBase,long,long)>($r3, l1, l3);

        return;
    }

    private void decrypt(org.apache.pdfbox.cos.COSBase, long, long) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        org.apache.pdfbox.cos.COSArray $r4;
        java.util.Set $r2, $r3;
        long l0, l1;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;
        org.apache.pdfbox.cos.COSString $r7;
        org.apache.pdfbox.cos.COSDictionary $r5;
        org.apache.pdfbox.cos.COSBase r1;
        org.apache.pdfbox.cos.COSStream $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        r1 := @parameter0: org.apache.pdfbox.cos.COSBase;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: java.util.Set objects>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label4;

        $r3 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: java.util.Set objects>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $z1 = r1 instanceof org.apache.pdfbox.cos.COSString;

        if $z1 == 0 goto label1;

        $r7 = (org.apache.pdfbox.cos.COSString) r1;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decryptString(org.apache.pdfbox.cos.COSString,long,long)>($r7, l0, l1);

        goto label4;

     label1:
        $z2 = r1 instanceof org.apache.pdfbox.cos.COSStream;

        if $z2 == 0 goto label2;

        $r6 = (org.apache.pdfbox.cos.COSStream) r1;

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decryptStream(org.apache.pdfbox.cos.COSStream,long,long)>($r6, l0, l1);

        goto label4;

     label2:
        $z3 = r1 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z3 == 0 goto label3;

        $r5 = (org.apache.pdfbox.cos.COSDictionary) r1;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decryptDictionary(org.apache.pdfbox.cos.COSDictionary,long,long)>($r5, l0, l1);

        goto label4;

     label3:
        $z4 = r1 instanceof org.apache.pdfbox.cos.COSArray;

        if $z4 == 0 goto label4;

        $r4 = (org.apache.pdfbox.cos.COSArray) r1;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decryptArray(org.apache.pdfbox.cos.COSArray,long,long)>($r4, l0, l1);

     label4:
        return;
    }

    public void decryptStream(org.apache.pdfbox.cos.COSStream, long, long) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        java.io.OutputStream $r3;
        long l0, l1;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;
        org.apache.pdfbox.cos.COSStream r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        r1 := @parameter0: org.apache.pdfbox.cos.COSStream;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decryptDictionary(org.apache.pdfbox.cos.COSDictionary,long,long)>(r1, l0, l1);

        $r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getFilteredStream()>();

        $r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createFilteredStream()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void encryptData(long,long,java.io.InputStream,java.io.OutputStream,boolean)>(l0, l1, $r2, $r3, 1);

        return;
    }

    public void encryptStream(org.apache.pdfbox.cos.COSStream, long, long) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        java.io.OutputStream $r3;
        long l0, l1;
        org.apache.pdfbox.cos.COSStream r0;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r2;
        java.io.InputStream $r1;

        r2 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        r0 := @parameter0: org.apache.pdfbox.cos.COSStream;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getFilteredStream()>();

        $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createFilteredStream()>();

        virtualinvoke r2.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void encryptData(long,long,java.io.InputStream,java.io.OutputStream,boolean)>(l0, l1, $r1, $r3, 0);

        return;
    }

    private void decryptDictionary(org.apache.pdfbox.cos.COSDictionary, long, long) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        long l0, l1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.pdfbox.cos.COSName $r10, $r11;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1, $r8;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r7;
        org.apache.pdfbox.cos.COSDictionary r0;
        org.apache.pdfbox.cos.COSBase r6;
        java.lang.Object $r3, $r5, $r9;

        r7 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        r0 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (org.apache.pdfbox.cos.COSBase) $r5;

        $z1 = r6 instanceof org.apache.pdfbox.cos.COSString;

        if $z1 != 0 goto label2;

        $z4 = r6 instanceof org.apache.pdfbox.cos.COSStream;

        if $z4 != 0 goto label2;

        $z5 = r6 instanceof org.apache.pdfbox.cos.COSArray;

        if $z5 != 0 goto label2;

        $z6 = r6 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z6 == 0 goto label4;

     label2:
        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (org.apache.pdfbox.cos.COSName) $r9;

        $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CONTENTS>;

        $z7 = virtualinvoke $r10.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r11);

        if $z7 == 0 goto label3;

        $z2 = r6 instanceof org.apache.pdfbox.cos.COSString;

        if $z2 == 0 goto label3;

        $r8 = r7.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: java.util.Set potentialSignatures>;

        $z3 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z3 != 0 goto label4;

     label3:
        specialinvoke r7.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decrypt(org.apache.pdfbox.cos.COSBase,long,long)>(r6, l0, l1);

     label4:
        goto label1;

     label5:
        return;
    }

    public void decryptString(org.apache.pdfbox.cos.COSString, long, long) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        byte[] $r2, $r5;
        java.io.ByteArrayOutputStream $r3;
        long l0, l1;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r4;
        org.apache.pdfbox.cos.COSString r1;
        java.io.ByteArrayInputStream $r0;

        r4 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        r1 := @parameter0: org.apache.pdfbox.cos.COSString;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r0 = new java.io.ByteArrayInputStream;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>();

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke r4.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void encryptData(long,long,java.io.InputStream,java.io.OutputStream,boolean)>(l0, l1, $r0, $r3, 1);

        virtualinvoke r1.<org.apache.pdfbox.cos.COSString: void reset()>();

        $r5 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke r1.<org.apache.pdfbox.cos.COSString: void append(byte[])>($r5);

        return;
    }

    private void decryptArray(org.apache.pdfbox.cos.COSArray, long, long) throws org.apache.pdfbox.exceptions.CryptographyException, java.io.IOException
    {
        org.apache.pdfbox.cos.COSArray r0;
        org.apache.pdfbox.cos.COSBase $r2;
        int $i0, i3;
        long l1, l2;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r1;

        r1 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        r0 := @parameter0: org.apache.pdfbox.cos.COSArray;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: int size()>();

        if i3 >= $i0 goto label2;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>(i3);

        specialinvoke r1.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decrypt(org.apache.pdfbox.cos.COSBase,long,long)>($r2, l1, l2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public int getKeyLength()
    {
        int $i0;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        $i0 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: int keyLength>;

        return $i0;
    }

    public void setKeyLength(int)
    {
        int i0;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        i0 := @parameter0: int;

        r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: int keyLength> = i0;

        return;
    }

    public org.apache.pdfbox.pdmodel.encryption.AccessPermission getCurrentAccessPermission()
    {
        org.apache.pdfbox.pdmodel.encryption.AccessPermission $r1;
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        $r1 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.pdfbox.pdmodel.encryption.AccessPermission currentAccessPermission>;

        return $r1;
    }

    public boolean isAES()
    {
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        $z0 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: boolean aes>;

        return $z0;
    }

    public void setAES(boolean)
    {
        org.apache.pdfbox.pdmodel.encryption.SecurityHandler r0;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdmodel.encryption.SecurityHandler;

        z0 := @parameter0: boolean;

        r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: boolean aes> = z0;

        return;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <org.apache.pdfbox.pdmodel.encryption.SecurityHandler: int DEFAULT_KEY_LENGTH> = 40;

        $r0 = newarray (byte)[4];

        $r0[0] = 115;

        $r0[1] = 65;

        $r0[2] = 108;

        $r0[3] = 84;

        <org.apache.pdfbox.pdmodel.encryption.SecurityHandler: byte[] AES_SALT> = $r0;

        return;
    }
}
