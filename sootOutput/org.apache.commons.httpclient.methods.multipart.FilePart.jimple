public class org.apache.commons.httpclient.methods.multipart.FilePart extends org.apache.commons.httpclient.methods.multipart.PartBase
{
    public static final java.lang.String DEFAULT_CONTENT_TYPE;
    public static final java.lang.String DEFAULT_CHARSET;
    public static final java.lang.String DEFAULT_TRANSFER_ENCODING;
    private static final org.apache.commons.logging.Log LOG;
    protected static final java.lang.String FILE_NAME;
    private static final byte[] FILE_NAME_BYTES;
    private org.apache.commons.httpclient.methods.multipart.PartSource source;
    static java.lang.Class class$org$apache$commons$httpclient$methods$multipart$FilePart;

    public void <init>(java.lang.String, org.apache.commons.httpclient.methods.multipart.PartSource, java.lang.String, java.lang.String)
    {
        org.apache.commons.httpclient.methods.multipart.PartSource r4;
        org.apache.commons.httpclient.methods.multipart.FilePart r0;
        java.lang.IllegalArgumentException $r5;
        java.lang.String r1, r2, r3, $r6, $r7;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.commons.httpclient.methods.multipart.PartSource;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        if r2 != null goto label1;

        $r6 = "application/octet-stream";

        goto label2;

     label1:
        $r6 = r2;

     label2:
        if r3 != null goto label3;

        $r7 = "ISO-8859-1";

        goto label4;

     label3:
        $r7 = r3;

     label4:
        specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.PartBase: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, $r6, $r7, "binary");

        if r4 != null goto label5;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source may not be null");

        throw $r5;

     label5:
        r0.<org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.httpclient.methods.multipart.PartSource source> = r4;

        return;
    }

    public void <init>(java.lang.String, org.apache.commons.httpclient.methods.multipart.PartSource)
    {
        org.apache.commons.httpclient.methods.multipart.FilePart r0;
        java.lang.String r1;
        org.apache.commons.httpclient.methods.multipart.PartSource r2;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.commons.httpclient.methods.multipart.PartSource;

        specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,org.apache.commons.httpclient.methods.multipart.PartSource,java.lang.String,java.lang.String)>(r1, r2, null, null);

        return;
    }

    public void <init>(java.lang.String, java.io.File) throws java.io.FileNotFoundException
    {
        org.apache.commons.httpclient.methods.multipart.FilePartSource $r2;
        org.apache.commons.httpclient.methods.multipart.FilePart r0;
        java.lang.String r1;
        java.io.File r3;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.io.File;

        $r2 = new org.apache.commons.httpclient.methods.multipart.FilePartSource;

        specialinvoke $r2.<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.io.File)>(r3);

        specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,org.apache.commons.httpclient.methods.multipart.PartSource,java.lang.String,java.lang.String)>(r1, $r2, null, null);

        return;
    }

    public void <init>(java.lang.String, java.io.File, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        org.apache.commons.httpclient.methods.multipart.FilePartSource $r2;
        org.apache.commons.httpclient.methods.multipart.FilePart r0;
        java.lang.String r1, r4, r5;
        java.io.File r3;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.io.File;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        $r2 = new org.apache.commons.httpclient.methods.multipart.FilePartSource;

        specialinvoke $r2.<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.io.File)>(r3);

        specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,org.apache.commons.httpclient.methods.multipart.PartSource,java.lang.String,java.lang.String)>(r1, $r2, r4, r5);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.io.File) throws java.io.FileNotFoundException
    {
        org.apache.commons.httpclient.methods.multipart.FilePartSource $r2;
        org.apache.commons.httpclient.methods.multipart.FilePart r0;
        java.lang.String r1, r3;
        java.io.File r4;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.io.File;

        $r2 = new org.apache.commons.httpclient.methods.multipart.FilePartSource;

        specialinvoke $r2.<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.lang.String,java.io.File)>(r3, r4);

        specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,org.apache.commons.httpclient.methods.multipart.PartSource,java.lang.String,java.lang.String)>(r1, $r2, null, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.io.File, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        org.apache.commons.httpclient.methods.multipart.FilePartSource $r2;
        org.apache.commons.httpclient.methods.multipart.FilePart r0;
        java.lang.String r1, r3, r5, r6;
        java.io.File r4;

        r0 := @this: org.apache.commons.httpclient.methods.multipart.FilePart;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.io.File;

        r5 := @parameter3: java.lang.String;

        r6 := @parameter4: java.lang.String;

        $r2 = new org.apache.commons.httpclient.methods.multipart.FilePartSource;

        specialinvoke $r2.<org.apache.commons.httpclient.methods.multipart.FilePartSource: void <init>(java.lang.String,java.io.File)>(r3, r4);

        specialinvoke r0.<org.apache.commons.httpclient.methods.multipart.FilePart: void <init>(java.lang.String,org.apache.commons.httpclient.methods.multipart.PartSource,java.lang.String,java.lang.String)>(r1, $r2, r5, r6);

        return;
    }

    protected void sendDispositionHeader(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] $r5, $r6, $r7, $r8;
        org.apache.commons.httpclient.methods.multipart.PartSource $r3;
        org.apache.commons.httpclient.methods.multipart.FilePart r1;
        org.apache.commons.logging.Log $r0;
        java.lang.String $r4;

        r1 := @this: org.apache.commons.httpclient.methods.multipart.FilePart;

        r2 := @parameter0: java.io.OutputStream;

        $r0 = <org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendDispositionHeader(OutputStream out)");

        specialinvoke r1.<org.apache.commons.httpclient.methods.multipart.PartBase: void sendDispositionHeader(java.io.OutputStream)>(r2);

        $r3 = r1.<org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.httpclient.methods.multipart.PartSource source>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.httpclient.methods.multipart.PartSource: java.lang.String getFileName()>();

        if $r4 == null goto label1;

        $r5 = <org.apache.commons.httpclient.methods.multipart.FilePart: byte[] FILE_NAME_BYTES>;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r5);

        $r6 = <org.apache.commons.httpclient.methods.multipart.FilePart: byte[] QUOTE_BYTES>;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r6);

        $r7 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>($r4);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r7);

        $r8 = <org.apache.commons.httpclient.methods.multipart.FilePart: byte[] QUOTE_BYTES>;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>($r8);

     label1:
        return;
    }

    protected void sendData(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r5;
        java.lang.Throwable $r7;
        byte[] r2;
        org.apache.commons.httpclient.methods.multipart.PartSource $r3;
        org.apache.commons.httpclient.methods.multipart.FilePart r1;
        long $l0;
        byte $b1;
        int $i2;
        org.apache.commons.logging.Log $r0, $r6;
        java.io.InputStream $r4;

        r1 := @this: org.apache.commons.httpclient.methods.multipart.FilePart;

        r5 := @parameter0: java.io.OutputStream;

        $r0 = <org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendData(OutputStream out)");

        $l0 = virtualinvoke r1.<org.apache.commons.httpclient.methods.multipart.FilePart: long lengthOfData()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r6 = <org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("No data to send.");

        return;

     label1:
        r2 = newarray (byte)[4096];

        $r3 = r1.<org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.httpclient.methods.multipart.PartSource source>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.httpclient.methods.multipart.PartSource: java.io.InputStream createInputStream()>();

     label2:
        $i2 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>(r2);

        if $i2 < 0 goto label3;

        virtualinvoke r5.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i2);

        goto label2;

     label3:
        virtualinvoke $r4.<java.io.InputStream: void close()>();

        goto label6;

     label4:
        $r7 := @caughtexception;

     label5:
        virtualinvoke $r4.<java.io.InputStream: void close()>();

        throw $r7;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected org.apache.commons.httpclient.methods.multipart.PartSource getSource()
    {
        org.apache.commons.httpclient.methods.multipart.FilePart r1;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.methods.multipart.PartSource $r2;

        r1 := @this: org.apache.commons.httpclient.methods.multipart.FilePart;

        $r0 = <org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter getSource()");

        $r2 = r1.<org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.httpclient.methods.multipart.PartSource source>;

        return $r2;
    }

    protected long lengthOfData() throws java.io.IOException
    {
        org.apache.commons.httpclient.methods.multipart.PartSource $r2;
        org.apache.commons.httpclient.methods.multipart.FilePart r1;
        org.apache.commons.logging.Log $r0;
        long $l0;

        r1 := @this: org.apache.commons.httpclient.methods.multipart.FilePart;

        $r0 = <org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter lengthOfData()");

        $r2 = r1.<org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.httpclient.methods.multipart.PartSource source>;

        $l0 = interfaceinvoke $r2.<org.apache.commons.httpclient.methods.multipart.PartSource: long getLength()>();

        return $l0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r2;
        java.lang.Class $r0, $r3;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.String FILE_NAME> = "; filename=";

        <org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.String DEFAULT_TRANSFER_ENCODING> = "binary";

        <org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.String DEFAULT_CHARSET> = "ISO-8859-1";

        <org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.String DEFAULT_CONTENT_TYPE> = "application/octet-stream";

        $r0 = <org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$FilePart>;

        if $r0 != null goto label1;

        $r3 = staticinvoke <org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.multipart.FilePart");

        <org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$FilePart> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.commons.httpclient.methods.multipart.FilePart: java.lang.Class class$org$apache$commons$httpclient$methods$multipart$FilePart>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r3);

        <org.apache.commons.httpclient.methods.multipart.FilePart: org.apache.commons.logging.Log LOG> = $r1;

        $r2 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: byte[] getAsciiBytes(java.lang.String)>("; filename=");

        <org.apache.commons.httpclient.methods.multipart.FilePart: byte[] FILE_NAME_BYTES> = $r2;

        return;
    }
}
