public class org.apache.lucene.store.ByteArrayDataOutput extends org.apache.lucene.store.DataOutput
{
    private byte[] bytes;
    private int pos;
    private int limit;
    static final boolean $assertionsDisabled;

    public void <init>(byte[])
    {
        byte[] r1;
        org.apache.lucene.store.ByteArrayDataOutput r0;

        r0 := @this: org.apache.lucene.store.ByteArrayDataOutput;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.lucene.store.DataOutput: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.store.ByteArrayDataOutput: void reset(byte[])>(r1);

        return;
    }

    public void <init>(byte[], int, int)
    {
        byte[] r1;
        org.apache.lucene.store.ByteArrayDataOutput r0;
        int i0, i1;

        r0 := @this: org.apache.lucene.store.ByteArrayDataOutput;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.store.DataOutput: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.store.ByteArrayDataOutput: void reset(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void <init>()
    {
        byte[] $r1;
        org.apache.lucene.store.ByteArrayDataOutput r0;

        r0 := @this: org.apache.lucene.store.ByteArrayDataOutput;

        specialinvoke r0.<org.apache.lucene.store.DataOutput: void <init>()>();

        $r1 = <org.apache.lucene.util.BytesRef: byte[] EMPTY_BYTES>;

        virtualinvoke r0.<org.apache.lucene.store.ByteArrayDataOutput: void reset(byte[])>($r1);

        return;
    }

    public void reset(byte[])
    {
        int $i0;
        byte[] r1;
        org.apache.lucene.store.ByteArrayDataOutput r0;

        r0 := @this: org.apache.lucene.store.ByteArrayDataOutput;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.lucene.store.ByteArrayDataOutput: void reset(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void reset(byte[], int, int)
    {
        byte[] r1;
        org.apache.lucene.store.ByteArrayDataOutput r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.lucene.store.ByteArrayDataOutput;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<org.apache.lucene.store.ByteArrayDataOutput: byte[] bytes> = r1;

        r0.<org.apache.lucene.store.ByteArrayDataOutput: int pos> = i0;

        $i2 = i0 + i1;

        r0.<org.apache.lucene.store.ByteArrayDataOutput: int limit> = $i2;

        return;
    }

    public int getPosition()
    {
        int $i0;
        org.apache.lucene.store.ByteArrayDataOutput r0;

        r0 := @this: org.apache.lucene.store.ByteArrayDataOutput;

        $i0 = r0.<org.apache.lucene.store.ByteArrayDataOutput: int pos>;

        return $i0;
    }

    public void writeByte(byte)
    {
        byte[] $r1;
        org.apache.lucene.store.ByteArrayDataOutput r0;
        java.lang.AssertionError $r2;
        byte b2;
        int $i0, $i1, $i3, $i4;
        boolean $z0;

        r0 := @this: org.apache.lucene.store.ByteArrayDataOutput;

        b2 := @parameter0: byte;

        $z0 = <org.apache.lucene.store.ByteArrayDataOutput: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i4 = r0.<org.apache.lucene.store.ByteArrayDataOutput: int pos>;

        $i3 = r0.<org.apache.lucene.store.ByteArrayDataOutput: int limit>;

        if $i4 < $i3 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<org.apache.lucene.store.ByteArrayDataOutput: byte[] bytes>;

        $i0 = r0.<org.apache.lucene.store.ByteArrayDataOutput: int pos>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.store.ByteArrayDataOutput: int pos> = $i1;

        $r1[$i0] = b2;

        return;
    }

    public void writeBytes(byte[], int, int)
    {
        byte[] r0, $r2;
        org.apache.lucene.store.ByteArrayDataOutput r1;
        java.lang.AssertionError $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        r1 := @this: org.apache.lucene.store.ByteArrayDataOutput;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = <org.apache.lucene.store.ByteArrayDataOutput: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i5 = r1.<org.apache.lucene.store.ByteArrayDataOutput: int pos>;

        $i7 = $i5 + i1;

        $i6 = r1.<org.apache.lucene.store.ByteArrayDataOutput: int limit>;

        if $i7 <= $i6 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r2 = r1.<org.apache.lucene.store.ByteArrayDataOutput: byte[] bytes>;

        $i2 = r1.<org.apache.lucene.store.ByteArrayDataOutput: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, $r2, $i2, i1);

        $i3 = r1.<org.apache.lucene.store.ByteArrayDataOutput: int pos>;

        $i4 = $i3 + i1;

        r1.<org.apache.lucene.store.ByteArrayDataOutput: int pos> = $i4;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/store/ByteArrayDataOutput;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.store.ByteArrayDataOutput: boolean $assertionsDisabled> = $z1;

        return;
    }
}
