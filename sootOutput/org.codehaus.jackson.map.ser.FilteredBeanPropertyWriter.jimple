public abstract class org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter extends java.lang.Object
{

    public void <init>()
    {
        org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter r0;

        r0 := @this: org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.codehaus.jackson.map.ser.BeanPropertyWriter constructViewBased(org.codehaus.jackson.map.ser.BeanPropertyWriter, java.lang.Class[])
    {
        org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$SingleView $r3;
        int $i0;
        java.lang.Class[] r0;
        org.codehaus.jackson.map.ser.BeanPropertyWriter r2;
        java.lang.Class $r4;
        org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView $r1;

        r2 := @parameter0: org.codehaus.jackson.map.ser.BeanPropertyWriter;

        r0 := @parameter1: java.lang.Class[];

        $i0 = lengthof r0;

        if $i0 != 1 goto label1;

        $r3 = new org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$SingleView;

        $r4 = r0[0];

        specialinvoke $r3.<org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$SingleView: void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter,java.lang.Class)>(r2, $r4);

        return $r3;

     label1:
        $r1 = new org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView;

        specialinvoke $r1.<org.codehaus.jackson.map.ser.FilteredBeanPropertyWriter$MultiView: void <init>(org.codehaus.jackson.map.ser.BeanPropertyWriter,java.lang.Class[])>(r2, r0);

        return $r1;
    }
}
