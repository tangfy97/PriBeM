public final class org.apache.poi.hssf.record.WriteAccessRecord extends org.apache.poi.hssf.record.StandardRecord
{
    public static final short sid;
    private static final byte PAD_CHAR;
    private static final int DATA_SIZE;
    private java.lang.String field_1_username;
    private static final byte[] PADDING;

    public void <init>()
    {
        org.apache.poi.hssf.record.WriteAccessRecord r0;

        r0 := @this: org.apache.poi.hssf.record.WriteAccessRecord;

        specialinvoke r0.<org.apache.poi.hssf.record.StandardRecord: void <init>()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.WriteAccessRecord: void setUsername(java.lang.String)>("");

        return;
    }

    public void <init>(org.apache.poi.hssf.record.RecordInputStream)
    {
        byte[] $r5;
        org.apache.poi.hssf.record.RecordInputStream r1;
        org.apache.poi.hssf.record.RecordFormatException $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i12;
        java.lang.String $r3, $r4, $r11, r12, $r15;
        java.lang.StringBuilder $r8, $r9, $r10, $r13;
        org.apache.poi.hssf.record.WriteAccessRecord r0;

        r0 := @this: org.apache.poi.hssf.record.WriteAccessRecord;

        r1 := @parameter0: org.apache.poi.hssf.record.RecordInputStream;

        specialinvoke r0.<org.apache.poi.hssf.record.StandardRecord: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        if $i0 <= 112 goto label1;

        $r14 = new org.apache.poi.hssf.record.RecordFormatException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected data size (112) but got (");

        $i9 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.poi.hssf.record.RecordFormatException: void <init>(java.lang.String)>($r11);

        throw $r14;

     label1:
        $i1 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int readUShort()>();

        $i2 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int readUByte()>();

        if $i1 > 112 goto label2;

        $i7 = $i2 & 254;

        if $i7 == 0 goto label3;

     label2:
        $i3 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

        $i4 = 3 + $i3;

        $r5 = newarray (byte)[$i4];

        staticinvoke <org.apache.poi.util.LittleEndian: void putUShort(byte[],int,int)>($r5, 0, $i1);

        staticinvoke <org.apache.poi.util.LittleEndian: void putByte(byte[],int,int)>($r5, 2, $i2);

        $i5 = lengthof $r5;

        $i6 = $i5 - 3;

        virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: void readFully(byte[],int,int)>($r5, 3, $i6);

        $r15 = new java.lang.String;

        specialinvoke $r15.<java.lang.String: void <init>(byte[])>($r5);

        $r3 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r0.<org.apache.poi.hssf.record.WriteAccessRecord: void setUsername(java.lang.String)>($r3);

        return;

     label3:
        $i8 = $i2 & 1;

        if $i8 != 0 goto label4;

        r12 = staticinvoke <org.apache.poi.util.StringUtil: java.lang.String readCompressedUnicode(org.apache.poi.util.LittleEndianInput,int)>(r1, $i1);

        goto label5;

     label4:
        r12 = staticinvoke <org.apache.poi.util.StringUtil: java.lang.String readUnicodeLE(org.apache.poi.util.LittleEndianInput,int)>(r1, $i1);

     label5:
        $r4 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>();

        r0.<org.apache.poi.hssf.record.WriteAccessRecord: java.lang.String field_1_username> = $r4;

        i10 = virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int remaining()>();

     label6:
        if i10 <= 0 goto label7;

        virtualinvoke r1.<org.apache.poi.hssf.record.RecordInputStream: int readUByte()>();

        $i12 = (int) -1;

        i10 = i10 + $i12;

        goto label6;

     label7:
        return;
    }

    public void setUsername(java.lang.String)
    {
        java.lang.IllegalArgumentException $r2;
        byte $b4;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String r0, $r6;
        boolean $z0;
        org.apache.poi.hssf.record.WriteAccessRecord r1;

        r1 := @this: org.apache.poi.hssf.record.WriteAccessRecord;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.poi.util.StringUtil: boolean hasMultibyte(java.lang.String)>(r0);

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $z0 == 0 goto label1;

        $b4 = 2;

        goto label2;

     label1:
        $b4 = 1;

     label2:
        $i1 = $i0 * $b4;

        $i2 = 3 + $i1;

        $i3 = 112 - $i2;

        if $i3 >= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Name is too long: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        r1.<org.apache.poi.hssf.record.WriteAccessRecord: java.lang.String field_1_username> = r0;

        return;
    }

    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        org.apache.poi.hssf.record.WriteAccessRecord r0;

        r0 := @this: org.apache.poi.hssf.record.WriteAccessRecord;

        $r1 = r0.<org.apache.poi.hssf.record.WriteAccessRecord: java.lang.String field_1_username>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r4;
        java.lang.String $r3, $r5;
        org.apache.poi.hssf.record.WriteAccessRecord r2;

        r2 := @this: org.apache.poi.hssf.record.WriteAccessRecord;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[WRITEACCESS]\n");

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    .name = ");

        $r3 = r2.<org.apache.poi.hssf.record.WriteAccessRecord: java.lang.String field_1_username>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[/WRITEACCESS]\n");

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public void serialize(org.apache.poi.util.LittleEndianOutput)
    {
        byte[] $r3;
        byte $b5, $b6;
        org.apache.poi.util.LittleEndianOutput r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1;
        org.apache.poi.hssf.record.WriteAccessRecord r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.WriteAccessRecord;

        r2 := @parameter0: org.apache.poi.util.LittleEndianOutput;

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.record.WriteAccessRecord: java.lang.String getUsername()>();

        $z0 = staticinvoke <org.apache.poi.util.StringUtil: boolean hasMultibyte(java.lang.String)>($r1);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        interfaceinvoke r2.<org.apache.poi.util.LittleEndianOutput: void writeShort(int)>($i0);

        if $z0 == 0 goto label1;

        $b5 = 1;

        goto label2;

     label1:
        $b5 = 0;

     label2:
        interfaceinvoke r2.<org.apache.poi.util.LittleEndianOutput: void writeByte(int)>($b5);

        if $z0 == 0 goto label3;

        staticinvoke <org.apache.poi.util.StringUtil: void putUnicodeLE(java.lang.String,org.apache.poi.util.LittleEndianOutput)>($r1, r2);

        goto label4;

     label3:
        staticinvoke <org.apache.poi.util.StringUtil: void putCompressedUnicode(java.lang.String,org.apache.poi.util.LittleEndianOutput)>($r1, r2);

     label4:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $z0 == 0 goto label5;

        $b6 = 2;

        goto label6;

     label5:
        $b6 = 1;

     label6:
        $i2 = $i1 * $b6;

        $i3 = 3 + $i2;

        $i4 = 112 - $i3;

        $r3 = <org.apache.poi.hssf.record.WriteAccessRecord: byte[] PADDING>;

        interfaceinvoke r2.<org.apache.poi.util.LittleEndianOutput: void write(byte[],int,int)>($r3, 0, $i4);

        return;
    }

    protected int getDataSize()
    {
        org.apache.poi.hssf.record.WriteAccessRecord r0;

        r0 := @this: org.apache.poi.hssf.record.WriteAccessRecord;

        return 112;
    }

    public short getSid()
    {
        org.apache.poi.hssf.record.WriteAccessRecord r0;

        r0 := @this: org.apache.poi.hssf.record.WriteAccessRecord;

        return 92;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1;

        <org.apache.poi.hssf.record.WriteAccessRecord: int DATA_SIZE> = 112;

        <org.apache.poi.hssf.record.WriteAccessRecord: byte PAD_CHAR> = 32;

        <org.apache.poi.hssf.record.WriteAccessRecord: short sid> = 92;

        $r0 = newarray (byte)[112];

        <org.apache.poi.hssf.record.WriteAccessRecord: byte[] PADDING> = $r0;

        $r1 = <org.apache.poi.hssf.record.WriteAccessRecord: byte[] PADDING>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r1, 32);

        return;
    }
}
