public class com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter extends java.lang.Object implements com.mycila.inject.internal.asm.Opcodes, com.mycila.inject.internal.asm.tree.analysis.Interpreter
{

    public void <init>()
    {
        com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0;
        java.lang.Error $r6;
        com.mycila.inject.internal.asm.tree.analysis.Value $r1, $r2, $r3, $r4, $r5, $r7;
        int $i0;
        com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter r8;

        r8 := @this: com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        if r0 != null goto label1;

        $r7 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value UNINITIALIZED_VALUE>;

        return $r7;

     label1:
        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label4;
            case 7: goto label5;
            case 8: goto label6;
            case 9: goto label7;
            case 10: goto label7;
            default: goto label8;
        };

     label2:
        return null;

     label3:
        $r5 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value INT_VALUE>;

        return $r5;

     label4:
        $r4 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value FLOAT_VALUE>;

        return $r4;

     label5:
        $r3 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value LONG_VALUE>;

        return $r3;

     label6:
        $r2 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value DOUBLE_VALUE>;

        return $r2;

     label7:
        $r1 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value REFERENCE_VALUE>;

        return $r1;

     label8:
        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>("Internal error");

        throw $r6;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value newOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode) throws com.mycila.inject.internal.asm.tree.analysis.AnalyzerException
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r0;
        com.mycila.inject.internal.asm.Type $r4, $r8, $r14, $r16, $r27;
        java.lang.Error $r29;
        int $i0;
        java.lang.String $r3, $r7;
        com.mycila.inject.internal.asm.tree.LdcInsnNode $r11;
        com.mycila.inject.internal.asm.tree.TypeInsnNode $r2;
        com.mycila.inject.internal.asm.tree.analysis.Value $r5, $r9, $r10, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r28;
        com.mycila.inject.internal.asm.tree.FieldInsnNode $r6;
        java.lang.Object r12;
        java.lang.Class $r13;
        com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter r1;

        r1 := @this: com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        lookupswitch($i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label02;
            case 5: goto label02;
            case 6: goto label02;
            case 7: goto label02;
            case 8: goto label02;
            case 9: goto label03;
            case 10: goto label03;
            case 11: goto label04;
            case 12: goto label04;
            case 13: goto label04;
            case 14: goto label05;
            case 15: goto label05;
            case 16: goto label06;
            case 17: goto label06;
            case 18: goto label07;
            case 168: goto label13;
            case 178: goto label14;
            case 187: goto label15;
            default: goto label16;
        };

     label01:
        $r27 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getObjectType(java.lang.String)>("null");

        $r28 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r27);

        return $r28;

     label02:
        $r26 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value INT_VALUE>;

        return $r26;

     label03:
        $r25 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value LONG_VALUE>;

        return $r25;

     label04:
        $r24 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value FLOAT_VALUE>;

        return $r24;

     label05:
        $r23 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value DOUBLE_VALUE>;

        return $r23;

     label06:
        $r22 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value INT_VALUE>;

        return $r22;

     label07:
        $r11 = (com.mycila.inject.internal.asm.tree.LdcInsnNode) r0;

        r12 = $r11.<com.mycila.inject.internal.asm.tree.LdcInsnNode: java.lang.Object cst>;

        $z0 = r12 instanceof java.lang.Integer;

        if $z0 == 0 goto label08;

        $r21 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value INT_VALUE>;

        return $r21;

     label08:
        $z1 = r12 instanceof java.lang.Float;

        if $z1 == 0 goto label09;

        $r20 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value FLOAT_VALUE>;

        return $r20;

     label09:
        $z2 = r12 instanceof java.lang.Long;

        if $z2 == 0 goto label10;

        $r19 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value LONG_VALUE>;

        return $r19;

     label10:
        $z3 = r12 instanceof java.lang.Double;

        if $z3 == 0 goto label11;

        $r18 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value DOUBLE_VALUE>;

        return $r18;

     label11:
        $z4 = r12 instanceof com.mycila.inject.internal.asm.Type;

        if $z4 == 0 goto label12;

        $r16 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getObjectType(java.lang.String)>("java/lang/Class");

        $r17 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r16);

        return $r17;

     label12:
        $r13 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r13);

        $r15 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r14);

        return $r15;

     label13:
        $r10 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value RETURNADDRESS_VALUE>;

        return $r10;

     label14:
        $r6 = (com.mycila.inject.internal.asm.tree.FieldInsnNode) r0;

        $r7 = $r6.<com.mycila.inject.internal.asm.tree.FieldInsnNode: java.lang.String desc>;

        $r8 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r7);

        $r9 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r8);

        return $r9;

     label15:
        $r2 = (com.mycila.inject.internal.asm.tree.TypeInsnNode) r0;

        $r3 = $r2.<com.mycila.inject.internal.asm.tree.TypeInsnNode: java.lang.String desc>;

        $r4 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getObjectType(java.lang.String)>($r3);

        $r5 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r4);

        return $r5;

     label16:
        $r29 = new java.lang.Error;

        specialinvoke $r29.<java.lang.Error: void <init>(java.lang.String)>("Internal error.");

        throw $r29;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value copyOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.analysis.Value) throws com.mycila.inject.internal.asm.tree.analysis.AnalyzerException
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r2;
        com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter r1;
        com.mycila.inject.internal.asm.tree.analysis.Value r0;

        r1 := @this: com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter;

        r2 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r0 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        return r0;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value unaryOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.analysis.Value) throws com.mycila.inject.internal.asm.tree.analysis.AnalyzerException
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r0;
        com.mycila.inject.internal.asm.tree.analysis.AnalyzerException $r32;
        com.mycila.inject.internal.asm.Type $r4, $r10, $r13, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r35;
        java.lang.Error $r41;
        java.lang.StringBuffer $r8, $r9, $r11;
        int $i0, $i1;
        java.lang.String $r12, $r34, r43, r44;
        com.mycila.inject.internal.asm.tree.IntInsnNode $r15;
        com.mycila.inject.internal.asm.tree.TypeInsnNode $r2, $r7;
        com.mycila.inject.internal.asm.tree.analysis.Value $r1, $r5, $r6, $r14, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r36, $r37, $r38, $r39, $r40, r42;
        com.mycila.inject.internal.asm.tree.FieldInsnNode $r33;
        com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter r3;

        r3 := @this: com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r42 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        tableswitch($i0)
        {
            case 116: goto label01;
            case 117: goto label03;
            case 118: goto label02;
            case 119: goto label04;
            case 120: goto label23;
            case 121: goto label23;
            case 122: goto label23;
            case 123: goto label23;
            case 124: goto label23;
            case 125: goto label23;
            case 126: goto label23;
            case 127: goto label23;
            case 128: goto label23;
            case 129: goto label23;
            case 130: goto label23;
            case 131: goto label23;
            case 132: goto label01;
            case 133: goto label03;
            case 134: goto label02;
            case 135: goto label04;
            case 136: goto label01;
            case 137: goto label02;
            case 138: goto label04;
            case 139: goto label01;
            case 140: goto label03;
            case 141: goto label04;
            case 142: goto label01;
            case 143: goto label03;
            case 144: goto label02;
            case 145: goto label01;
            case 146: goto label01;
            case 147: goto label01;
            case 148: goto label23;
            case 149: goto label23;
            case 150: goto label23;
            case 151: goto label23;
            case 152: goto label23;
            case 153: goto label05;
            case 154: goto label05;
            case 155: goto label05;
            case 156: goto label05;
            case 157: goto label05;
            case 158: goto label05;
            case 159: goto label23;
            case 160: goto label23;
            case 161: goto label23;
            case 162: goto label23;
            case 163: goto label23;
            case 164: goto label23;
            case 165: goto label23;
            case 166: goto label23;
            case 167: goto label23;
            case 168: goto label23;
            case 169: goto label23;
            case 170: goto label05;
            case 171: goto label05;
            case 172: goto label05;
            case 173: goto label05;
            case 174: goto label05;
            case 175: goto label05;
            case 176: goto label05;
            case 177: goto label23;
            case 178: goto label23;
            case 179: goto label05;
            case 180: goto label06;
            case 181: goto label23;
            case 182: goto label23;
            case 183: goto label23;
            case 184: goto label23;
            case 185: goto label23;
            case 186: goto label23;
            case 187: goto label23;
            case 188: goto label07;
            case 189: goto label17;
            case 190: goto label18;
            case 191: goto label19;
            case 192: goto label20;
            case 193: goto label21;
            case 194: goto label22;
            case 195: goto label22;
            case 196: goto label23;
            case 197: goto label23;
            case 198: goto label22;
            case 199: goto label22;
            default: goto label23;
        };

     label01:
        $r40 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value INT_VALUE>;

        return $r40;

     label02:
        $r38 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value FLOAT_VALUE>;

        return $r38;

     label03:
        $r39 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value LONG_VALUE>;

        return $r39;

     label04:
        $r37 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value DOUBLE_VALUE>;

        return $r37;

     label05:
        return null;

     label06:
        $r33 = (com.mycila.inject.internal.asm.tree.FieldInsnNode) r0;

        $r34 = $r33.<com.mycila.inject.internal.asm.tree.FieldInsnNode: java.lang.String desc>;

        $r35 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r34);

        $r36 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r35);

        return $r36;

     label07:
        $r15 = (com.mycila.inject.internal.asm.tree.IntInsnNode) r0;

        $i1 = $r15.<com.mycila.inject.internal.asm.tree.IntInsnNode: int operand>;

        tableswitch($i1)
        {
            case 4: goto label08;
            case 5: goto label09;
            case 6: goto label13;
            case 7: goto label14;
            case 8: goto label10;
            case 9: goto label11;
            case 10: goto label12;
            case 11: goto label15;
            default: goto label16;
        };

     label08:
        $r30 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>("[Z");

        $r31 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r30);

        return $r31;

     label09:
        $r28 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>("[C");

        $r29 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r28);

        return $r29;

     label10:
        $r22 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>("[B");

        $r23 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r22);

        return $r23;

     label11:
        $r20 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>("[S");

        $r21 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r20);

        return $r21;

     label12:
        $r18 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>("[I");

        $r19 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r18);

        return $r19;

     label13:
        $r26 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>("[F");

        $r27 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r26);

        return $r27;

     label14:
        $r24 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>("[D");

        $r25 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r24);

        return $r25;

     label15:
        $r16 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>("[J");

        $r17 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r16);

        return $r17;

     label16:
        $r32 = new com.mycila.inject.internal.asm.tree.analysis.AnalyzerException;

        specialinvoke $r32.<com.mycila.inject.internal.asm.tree.analysis.AnalyzerException: void <init>(com.mycila.inject.internal.asm.tree.AbstractInsnNode,java.lang.String)>(r0, "Invalid array type");

        throw $r32;

     label17:
        $r7 = (com.mycila.inject.internal.asm.tree.TypeInsnNode) r0;

        r43 = $r7.<com.mycila.inject.internal.asm.tree.TypeInsnNode: java.lang.String desc>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r10 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getObjectType(java.lang.String)>(r43);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r12);

        $r14 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r13);

        return $r14;

     label18:
        $r6 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value INT_VALUE>;

        return $r6;

     label19:
        return null;

     label20:
        $r2 = (com.mycila.inject.internal.asm.tree.TypeInsnNode) r0;

        r44 = $r2.<com.mycila.inject.internal.asm.tree.TypeInsnNode: java.lang.String desc>;

        $r4 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getObjectType(java.lang.String)>(r44);

        $r5 = virtualinvoke r3.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r4);

        return $r5;

     label21:
        $r1 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value INT_VALUE>;

        return $r1;

     label22:
        return null;

     label23:
        $r41 = new java.lang.Error;

        specialinvoke $r41.<java.lang.Error: void <init>(java.lang.String)>("Internal error.");

        throw $r41;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value binaryOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value) throws com.mycila.inject.internal.asm.tree.analysis.AnalyzerException
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r0;
        java.lang.Error $r7;
        com.mycila.inject.internal.asm.tree.analysis.Value $r1, $r2, $r3, $r4, $r5, $r6, r9, r10;
        int $i0;
        com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter r8;

        r8 := @this: com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r9 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        r10 := @parameter2: com.mycila.inject.internal.asm.tree.analysis.Value;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        tableswitch($i0)
        {
            case 46: goto label1;
            case 47: goto label3;
            case 48: goto label2;
            case 49: goto label4;
            case 50: goto label5;
            case 51: goto label1;
            case 52: goto label1;
            case 53: goto label1;
            case 54: goto label8;
            case 55: goto label8;
            case 56: goto label8;
            case 57: goto label8;
            case 58: goto label8;
            case 59: goto label8;
            case 60: goto label8;
            case 61: goto label8;
            case 62: goto label8;
            case 63: goto label8;
            case 64: goto label8;
            case 65: goto label8;
            case 66: goto label8;
            case 67: goto label8;
            case 68: goto label8;
            case 69: goto label8;
            case 70: goto label8;
            case 71: goto label8;
            case 72: goto label8;
            case 73: goto label8;
            case 74: goto label8;
            case 75: goto label8;
            case 76: goto label8;
            case 77: goto label8;
            case 78: goto label8;
            case 79: goto label8;
            case 80: goto label8;
            case 81: goto label8;
            case 82: goto label8;
            case 83: goto label8;
            case 84: goto label8;
            case 85: goto label8;
            case 86: goto label8;
            case 87: goto label8;
            case 88: goto label8;
            case 89: goto label8;
            case 90: goto label8;
            case 91: goto label8;
            case 92: goto label8;
            case 93: goto label8;
            case 94: goto label8;
            case 95: goto label8;
            case 96: goto label1;
            case 97: goto label3;
            case 98: goto label2;
            case 99: goto label4;
            case 100: goto label1;
            case 101: goto label3;
            case 102: goto label2;
            case 103: goto label4;
            case 104: goto label1;
            case 105: goto label3;
            case 106: goto label2;
            case 107: goto label4;
            case 108: goto label1;
            case 109: goto label3;
            case 110: goto label2;
            case 111: goto label4;
            case 112: goto label1;
            case 113: goto label3;
            case 114: goto label2;
            case 115: goto label4;
            case 116: goto label8;
            case 117: goto label8;
            case 118: goto label8;
            case 119: goto label8;
            case 120: goto label1;
            case 121: goto label3;
            case 122: goto label1;
            case 123: goto label3;
            case 124: goto label1;
            case 125: goto label3;
            case 126: goto label1;
            case 127: goto label3;
            case 128: goto label1;
            case 129: goto label3;
            case 130: goto label1;
            case 131: goto label3;
            case 132: goto label8;
            case 133: goto label8;
            case 134: goto label8;
            case 135: goto label8;
            case 136: goto label8;
            case 137: goto label8;
            case 138: goto label8;
            case 139: goto label8;
            case 140: goto label8;
            case 141: goto label8;
            case 142: goto label8;
            case 143: goto label8;
            case 144: goto label8;
            case 145: goto label8;
            case 146: goto label8;
            case 147: goto label8;
            case 148: goto label6;
            case 149: goto label6;
            case 150: goto label6;
            case 151: goto label6;
            case 152: goto label6;
            case 153: goto label8;
            case 154: goto label8;
            case 155: goto label8;
            case 156: goto label8;
            case 157: goto label8;
            case 158: goto label8;
            case 159: goto label7;
            case 160: goto label7;
            case 161: goto label7;
            case 162: goto label7;
            case 163: goto label7;
            case 164: goto label7;
            case 165: goto label7;
            case 166: goto label7;
            case 167: goto label8;
            case 168: goto label8;
            case 169: goto label8;
            case 170: goto label8;
            case 171: goto label8;
            case 172: goto label8;
            case 173: goto label8;
            case 174: goto label8;
            case 175: goto label8;
            case 176: goto label8;
            case 177: goto label8;
            case 178: goto label8;
            case 179: goto label8;
            case 180: goto label8;
            case 181: goto label7;
            default: goto label8;
        };

     label1:
        $r6 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value INT_VALUE>;

        return $r6;

     label2:
        $r4 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value FLOAT_VALUE>;

        return $r4;

     label3:
        $r5 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value LONG_VALUE>;

        return $r5;

     label4:
        $r3 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value DOUBLE_VALUE>;

        return $r3;

     label5:
        $r2 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value REFERENCE_VALUE>;

        return $r2;

     label6:
        $r1 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value INT_VALUE>;

        return $r1;

     label7:
        return null;

     label8:
        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String)>("Internal error.");

        throw $r7;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value ternaryOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value) throws com.mycila.inject.internal.asm.tree.analysis.AnalyzerException
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r1;
        com.mycila.inject.internal.asm.tree.analysis.Value r2, r3, r4;
        com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter;

        r1 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r2 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        r3 := @parameter2: com.mycila.inject.internal.asm.tree.analysis.Value;

        r4 := @parameter3: com.mycila.inject.internal.asm.tree.analysis.Value;

        return null;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value naryOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, java.util.List) throws com.mycila.inject.internal.asm.tree.analysis.AnalyzerException
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r0;
        com.mycila.inject.internal.asm.Type $r4, $r8;
        com.mycila.inject.internal.asm.tree.MultiANewArrayInsnNode $r6;
        java.util.List r10;
        com.mycila.inject.internal.asm.tree.MethodInsnNode $r2;
        com.mycila.inject.internal.asm.tree.analysis.Value $r5, $r9;
        int $i0;
        com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter r1;
        java.lang.String $r3, $r7;

        r1 := @this: com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r10 := @parameter1: java.util.List;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.AbstractInsnNode: int getOpcode()>();

        if $i0 != 197 goto label1;

        $r6 = (com.mycila.inject.internal.asm.tree.MultiANewArrayInsnNode) r0;

        $r7 = $r6.<com.mycila.inject.internal.asm.tree.MultiANewArrayInsnNode: java.lang.String desc>;

        $r8 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r7);

        $r9 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r8);

        return $r9;

     label1:
        $r2 = (com.mycila.inject.internal.asm.tree.MethodInsnNode) r0;

        $r3 = $r2.<com.mycila.inject.internal.asm.tree.MethodInsnNode: java.lang.String desc>;

        $r4 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getReturnType(java.lang.String)>($r3);

        $r5 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r4);

        return $r5;
    }

    public void returnOperation(com.mycila.inject.internal.asm.tree.AbstractInsnNode, com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value) throws com.mycila.inject.internal.asm.tree.analysis.AnalyzerException
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r1;
        com.mycila.inject.internal.asm.tree.analysis.Value r2, r3;
        com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter;

        r1 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r2 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        r3 := @parameter2: com.mycila.inject.internal.asm.tree.analysis.Value;

        return;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value merge(com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        com.mycila.inject.internal.asm.tree.analysis.Value r0, r1, $r2;
        com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter r3;
        boolean $z0;

        r3 := @this: com.mycila.inject.internal.asm.tree.analysis.BasicInterpreter;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.analysis.Value;

        r1 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r2 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value UNINITIALIZED_VALUE>;

        return $r2;

     label1:
        return r0;
    }
}
