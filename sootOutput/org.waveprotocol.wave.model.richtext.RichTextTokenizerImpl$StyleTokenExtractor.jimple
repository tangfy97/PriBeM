class org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor extends java.lang.Object
{
    final org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type tokenStartType;
    final org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type tokenEndType;
    final org.waveprotocol.wave.model.util.StringMap tagToValue;
    final java.lang.String stylePropertyName;

    private void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type, org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type, org.waveprotocol.wave.model.util.StringMap, java.lang.String)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor r0;
        org.waveprotocol.wave.model.util.StringMap r3;
        java.lang.String r4;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r1, r2;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        r2 := @parameter1: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        r3 := @parameter2: org.waveprotocol.wave.model.util.StringMap;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type tokenStartType> = r1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type tokenEndType> = r2;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: org.waveprotocol.wave.model.util.StringMap tagToValue> = r3;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: java.lang.String stylePropertyName> = r4;

        return;
    }

    void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type, org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type, org.waveprotocol.wave.model.util.StringMap, java.lang.String, org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$1)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$1 r5;
        org.waveprotocol.wave.model.util.StringMap r3;
        java.lang.String r4;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r1, r2;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        r2 := @parameter1: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        r3 := @parameter2: org.waveprotocol.wave.model.util.StringMap;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizerImpl$StyleTokenExtractor: void <init>(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type,org.waveprotocol.wave.model.util.StringMap,java.lang.String)>(r1, r2, r3, r4);

        return;
    }
}
