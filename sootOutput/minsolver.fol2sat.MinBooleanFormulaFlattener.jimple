final class minsolver.fol2sat.MinBooleanFormulaFlattener extends java.lang.Object implements kodkod.engine.bool.BooleanVisitor
{
    private final kodkod.engine.bool.BooleanFactory factory;
    private final kodkod.util.ints.IntSet flattenable;
    private final java.util.Map cache;

    static final kodkod.engine.bool.BooleanValue flatten(kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFactory)
    {
        kodkod.engine.bool.BooleanValue r4;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.BooleanFormula r2;
        int $i0;
        minsolver.fol2sat.MinBooleanFormulaFlattener $r1;
        java.lang.Object $r3;

        r2 := @parameter0: kodkod.engine.bool.BooleanFormula;

        r0 := @parameter1: kodkod.engine.bool.BooleanFactory;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: int comparisonDepth()>();

        virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: void setComparisonDepth(int)>(1);

        virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: void clear()>();

        $r1 = new minsolver.fol2sat.MinBooleanFormulaFlattener;

        specialinvoke $r1.<minsolver.fol2sat.MinBooleanFormulaFlattener: void <init>(kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFactory)>(r2, r0);

        $r3 = virtualinvoke r2.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>($r1, null);

        r4 = (kodkod.engine.bool.BooleanValue) $r3;

        virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: void setComparisonDepth(int)>($i0);

        return r4;
    }

    private void <init>(kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFactory)
    {
        java.util.IdentityHashMap $r7;
        kodkod.engine.bool.BooleanFactory r1;
        kodkod.engine.bool.BooleanFormula r3;
        kodkod.util.ints.IntSet $r4, $r5, $r6, $r8;
        int $i0;
        minsolver.fol2sat.MinBooleanFormulaFlattener r0;
        minsolver.fol2sat.MinBooleanFormulaFlattener$FlatteningDataGatherer $r2;

        r0 := @this: minsolver.fol2sat.MinBooleanFormulaFlattener;

        r3 := @parameter0: kodkod.engine.bool.BooleanFormula;

        r1 := @parameter1: kodkod.engine.bool.BooleanFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanFactory factory> = r1;

        $r2 = new minsolver.fol2sat.MinBooleanFormulaFlattener$FlatteningDataGatherer;

        specialinvoke $r2.<minsolver.fol2sat.MinBooleanFormulaFlattener$FlatteningDataGatherer: void <init>(kodkod.engine.bool.BooleanFormula,minsolver.fol2sat.MinBooleanFormulaFlattener$FlatteningDataGatherer)>(r3, null);

        virtualinvoke r3.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>($r2, null);

        $r4 = $r2.<minsolver.fol2sat.MinBooleanFormulaFlattener$FlatteningDataGatherer: kodkod.util.ints.IntSet flattenable>;

        r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.util.ints.IntSet flattenable> = $r4;

        $r6 = $r2.<minsolver.fol2sat.MinBooleanFormulaFlattener$FlatteningDataGatherer: kodkod.util.ints.IntSet visited>;

        $r5 = r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.util.ints.IntSet flattenable>;

        interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean removeAll(kodkod.util.ints.IntCollection)>($r5);

        $r7 = new java.util.IdentityHashMap;

        $r8 = $r2.<minsolver.fol2sat.MinBooleanFormulaFlattener$FlatteningDataGatherer: kodkod.util.ints.IntSet visited>;

        $i0 = interfaceinvoke $r8.<kodkod.util.ints.IntSet: int size()>();

        specialinvoke $r7.<java.util.IdentityHashMap: void <init>(int)>($i0);

        r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: java.util.Map cache> = $r7;

        return;
    }

    private final kodkod.engine.bool.BooleanValue addToParent(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.BooleanValue r1, $r3;
        kodkod.engine.bool.BooleanAccumulator r0;
        minsolver.fol2sat.MinBooleanFormulaFlattener r2;

        r2 := @this: minsolver.fol2sat.MinBooleanFormulaFlattener;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        r0 := @parameter1: kodkod.engine.bool.BooleanAccumulator;

        if r0 != null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>(r1);

     label2:
        return $r3;
    }

    public kodkod.engine.bool.BooleanValue visit(kodkod.engine.bool.MultiGate, kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.Operator$Nary $r1;
        kodkod.engine.bool.BooleanValue $r7, $r16, r24;
        kodkod.engine.bool.BooleanConstant $r13, $r14, $r22, $r23;
        kodkod.engine.bool.BooleanAccumulator r6, $r8;
        kodkod.engine.bool.BooleanFormula $r11, $r20;
        java.util.Map $r4, $r17;
        int $i0;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r9, $r18;
        kodkod.engine.bool.BooleanFactory $r15;
        kodkod.util.ints.IntSet $r3;
        kodkod.engine.bool.MultiGate r0;
        minsolver.fol2sat.MinBooleanFormulaFlattener r2;
        java.lang.Object $r5, $r10, $r12, $r19, $r21;

        r2 := @this: minsolver.fol2sat.MinBooleanFormulaFlattener;

        r0 := @parameter0: kodkod.engine.bool.MultiGate;

        r6 := @parameter1: kodkod.engine.bool.BooleanAccumulator;

        $r1 = virtualinvoke r0.<kodkod.engine.bool.MultiGate: kodkod.engine.bool.Operator$Nary op()>();

        $r3 = r2.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.util.ints.IntSet flattenable>;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.MultiGate: int label()>();

        $z0 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean contains(int)>($i0);

        if $z0 == 0 goto label3;

        $r18 = virtualinvoke r0.<kodkod.engine.bool.MultiGate: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (kodkod.engine.bool.BooleanFormula) $r19;

        $r21 = virtualinvoke $r20.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r2, r6);

        $r22 = virtualinvoke $r1.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        if $r21 != $r22 goto label2;

        $r23 = virtualinvoke $r1.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        return $r23;

     label2:
        $z2 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        return r6;

     label3:
        $r4 = r2.<minsolver.fol2sat.MinBooleanFormulaFlattener: java.util.Map cache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r24 = (kodkod.engine.bool.BooleanValue) $r5;

        if r24 != null goto label6;

        $r8 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r1);

        $r9 = virtualinvoke r0.<kodkod.engine.bool.MultiGate: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (kodkod.engine.bool.BooleanFormula) $r10;

        $r12 = virtualinvoke $r11.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r2, $r8);

        $r13 = virtualinvoke $r1.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        if $r12 != $r13 goto label5;

        $r14 = virtualinvoke $r1.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        return $r14;

     label5:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        $r15 = r2.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanFactory factory>;

        $r16 = virtualinvoke $r15.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r8);

        r24 = $r16;

        $r17 = r2.<minsolver.fol2sat.MinBooleanFormulaFlattener: java.util.Map cache>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r16);

     label6:
        $r7 = specialinvoke r2.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanValue addToParent(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanAccumulator)>(r24, r6);

        return $r7;
    }

    public kodkod.engine.bool.BooleanValue visit(kodkod.engine.bool.ITEGate, kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.BooleanValue $r5, $r8, $r11, $r12, $r14;
        kodkod.engine.bool.BooleanFactory $r2;
        kodkod.engine.bool.BooleanFormula $r3, $r6, $r9;
        kodkod.engine.bool.BooleanAccumulator r13;
        kodkod.engine.bool.ITEGate r1;
        minsolver.fol2sat.MinBooleanFormulaFlattener r0;
        java.lang.Object $r4, $r7, $r10;

        r0 := @this: minsolver.fol2sat.MinBooleanFormulaFlattener;

        r1 := @parameter0: kodkod.engine.bool.ITEGate;

        r13 := @parameter1: kodkod.engine.bool.BooleanAccumulator;

        $r2 = r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanFactory factory>;

        $r3 = virtualinvoke r1.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula input(int)>(0);

        $r4 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r0, null);

        $r5 = (kodkod.engine.bool.BooleanValue) $r4;

        $r6 = virtualinvoke r1.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula input(int)>(1);

        $r7 = virtualinvoke $r6.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r0, null);

        $r8 = (kodkod.engine.bool.BooleanValue) $r7;

        $r9 = virtualinvoke r1.<kodkod.engine.bool.ITEGate: kodkod.engine.bool.BooleanFormula input(int)>(2);

        $r10 = virtualinvoke $r9.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r0, null);

        $r11 = (kodkod.engine.bool.BooleanValue) $r10;

        $r12 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue ite(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r5, $r8, $r11);

        $r14 = specialinvoke r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanValue addToParent(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanAccumulator)>($r12, r13);

        return $r14;
    }

    public kodkod.engine.bool.BooleanValue visit(kodkod.engine.bool.NotGate, kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.BooleanValue $r5, $r6, $r8;
        kodkod.engine.bool.BooleanFactory $r2;
        kodkod.engine.bool.BooleanFormula $r3;
        kodkod.engine.bool.BooleanAccumulator r7;
        minsolver.fol2sat.MinBooleanFormulaFlattener r0;
        kodkod.engine.bool.NotGate r1;
        java.lang.Object $r4;

        r0 := @this: minsolver.fol2sat.MinBooleanFormulaFlattener;

        r1 := @parameter0: kodkod.engine.bool.NotGate;

        r7 := @parameter1: kodkod.engine.bool.BooleanAccumulator;

        $r2 = r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanFactory factory>;

        $r3 = virtualinvoke r1.<kodkod.engine.bool.NotGate: kodkod.engine.bool.BooleanFormula input(int)>(0);

        $r4 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFormula: java.lang.Object accept(kodkod.engine.bool.BooleanVisitor,java.lang.Object)>(r0, null);

        $r5 = (kodkod.engine.bool.BooleanValue) $r4;

        $r6 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue not(kodkod.engine.bool.BooleanValue)>($r5);

        $r8 = specialinvoke r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanValue addToParent(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanAccumulator)>($r6, r7);

        return $r8;
    }

    public kodkod.engine.bool.BooleanValue visit(kodkod.engine.bool.BooleanVariable, kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.BooleanVariable r1;
        kodkod.engine.bool.BooleanValue $r3;
        kodkod.engine.bool.BooleanAccumulator r2;
        minsolver.fol2sat.MinBooleanFormulaFlattener r0;

        r0 := @this: minsolver.fol2sat.MinBooleanFormulaFlattener;

        r1 := @parameter0: kodkod.engine.bool.BooleanVariable;

        r2 := @parameter1: kodkod.engine.bool.BooleanAccumulator;

        $r3 = specialinvoke r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanValue addToParent(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanAccumulator)>(r1, r2);

        return $r3;
    }

    public volatile java.lang.Object visit(kodkod.engine.bool.BooleanVariable, java.lang.Object)
    {
        kodkod.engine.bool.BooleanVariable r1;
        kodkod.engine.bool.BooleanValue $r4;
        kodkod.engine.bool.BooleanAccumulator $r3;
        minsolver.fol2sat.MinBooleanFormulaFlattener r0;
        java.lang.Object r2;

        r0 := @this: minsolver.fol2sat.MinBooleanFormulaFlattener;

        r1 := @parameter0: kodkod.engine.bool.BooleanVariable;

        r2 := @parameter1: java.lang.Object;

        $r3 = (kodkod.engine.bool.BooleanAccumulator) r2;

        $r4 = virtualinvoke r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanValue visit(kodkod.engine.bool.BooleanVariable,kodkod.engine.bool.BooleanAccumulator)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object visit(kodkod.engine.bool.NotGate, java.lang.Object)
    {
        kodkod.engine.bool.BooleanValue $r4;
        kodkod.engine.bool.BooleanAccumulator $r3;
        minsolver.fol2sat.MinBooleanFormulaFlattener r0;
        kodkod.engine.bool.NotGate r1;
        java.lang.Object r2;

        r0 := @this: minsolver.fol2sat.MinBooleanFormulaFlattener;

        r1 := @parameter0: kodkod.engine.bool.NotGate;

        r2 := @parameter1: java.lang.Object;

        $r3 = (kodkod.engine.bool.BooleanAccumulator) r2;

        $r4 = virtualinvoke r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanValue visit(kodkod.engine.bool.NotGate,kodkod.engine.bool.BooleanAccumulator)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object visit(kodkod.engine.bool.ITEGate, java.lang.Object)
    {
        kodkod.engine.bool.BooleanValue $r4;
        kodkod.engine.bool.BooleanAccumulator $r3;
        kodkod.engine.bool.ITEGate r1;
        minsolver.fol2sat.MinBooleanFormulaFlattener r0;
        java.lang.Object r2;

        r0 := @this: minsolver.fol2sat.MinBooleanFormulaFlattener;

        r1 := @parameter0: kodkod.engine.bool.ITEGate;

        r2 := @parameter1: java.lang.Object;

        $r3 = (kodkod.engine.bool.BooleanAccumulator) r2;

        $r4 = virtualinvoke r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanValue visit(kodkod.engine.bool.ITEGate,kodkod.engine.bool.BooleanAccumulator)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object visit(kodkod.engine.bool.MultiGate, java.lang.Object)
    {
        kodkod.engine.bool.BooleanValue $r4;
        kodkod.engine.bool.BooleanAccumulator $r3;
        minsolver.fol2sat.MinBooleanFormulaFlattener r0;
        java.lang.Object r2;
        kodkod.engine.bool.MultiGate r1;

        r0 := @this: minsolver.fol2sat.MinBooleanFormulaFlattener;

        r1 := @parameter0: kodkod.engine.bool.MultiGate;

        r2 := @parameter1: java.lang.Object;

        $r3 = (kodkod.engine.bool.BooleanAccumulator) r2;

        $r4 = virtualinvoke r0.<minsolver.fol2sat.MinBooleanFormulaFlattener: kodkod.engine.bool.BooleanValue visit(kodkod.engine.bool.MultiGate,kodkod.engine.bool.BooleanAccumulator)>(r1, $r3);

        return $r4;
    }
}
