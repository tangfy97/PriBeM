public class org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport extends java.lang.Object implements org.xmpp.component.Component, org.waveprotocol.wave.federation.xmpp.OutgoingPacketTransport
{
    private static final java.util.logging.Logger LOG;
    private final org.waveprotocol.wave.federation.xmpp.IncomingPacketHandler handler;
    private final java.lang.String componentName;
    private final java.lang.String serverDomain;
    private final java.lang.String serverSecret;
    private final java.lang.String serverAddress;
    private final int serverPort;
    private final java.util.Queue queuedPackets;
    private final java.lang.Object connectionLock;
    private org.jivesoftware.whack.ExternalComponentManager componentManager;
    private boolean connected;

    public void <init>(org.waveprotocol.wave.federation.xmpp.IncomingPacketHandler, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)
    {
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport r0;
        org.waveprotocol.wave.federation.xmpp.IncomingPacketHandler r2;
        int i0;
        java.lang.Object $r1;
        java.lang.String r3, r4, r5, r6;
        java.util.LinkedList $r7;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport;

        r2 := @parameter0: org.waveprotocol.wave.federation.xmpp.IncomingPacketHandler;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r6 := @parameter4: java.lang.String;

        i0 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.Object connectionLock> = $r1;

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: org.jivesoftware.whack.ExternalComponentManager componentManager> = null;

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: boolean connected> = 0;

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: org.waveprotocol.wave.federation.xmpp.IncomingPacketHandler handler> = r2;

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String componentName> = r3;

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String serverDomain> = r4;

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String serverSecret> = r5;

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String serverAddress> = r6;

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: int serverPort> = i0;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.util.Queue queuedPackets> = $r7;

        return;
    }

    public void run() throws org.xmpp.component.ComponentException
    {
        org.jivesoftware.whack.ExternalComponentManager $r1, $r4, $r6, $r8;
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport r0;
        int $i0;
        java.lang.String $r2, $r3, $r5, $r7;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport;

        $r1 = new org.jivesoftware.whack.ExternalComponentManager;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String serverAddress>;

        $i0 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: int serverPort>;

        specialinvoke $r1.<org.jivesoftware.whack.ExternalComponentManager: void <init>(java.lang.String,int)>($r2, $i0);

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: org.jivesoftware.whack.ExternalComponentManager componentManager> = $r1;

        $r4 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: org.jivesoftware.whack.ExternalComponentManager componentManager>;

        $r3 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String serverSecret>;

        virtualinvoke $r4.<org.jivesoftware.whack.ExternalComponentManager: void setDefaultSecretKey(java.lang.String)>($r3);

        $r6 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: org.jivesoftware.whack.ExternalComponentManager componentManager>;

        $r5 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String serverDomain>;

        virtualinvoke $r6.<org.jivesoftware.whack.ExternalComponentManager: void setServerName(java.lang.String)>($r5);

        $r8 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: org.jivesoftware.whack.ExternalComponentManager componentManager>;

        $r7 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String componentName>;

        virtualinvoke $r8.<org.jivesoftware.whack.ExternalComponentManager: void addComponent(java.lang.String,org.xmpp.component.Component)>($r7, r0);

        return;
    }

    public void sendPacket(org.xmpp.packet.Packet)
    {
        org.jivesoftware.whack.ExternalComponentManager $r4;
        java.lang.Throwable $r5;
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport r0;
        org.xmpp.packet.Packet r2;
        java.lang.Object $r1;
        java.util.Queue $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport;

        r2 := @parameter0: org.xmpp.packet.Packet;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.Object connectionLock>;

        entermonitor $r1;

     label1:
        $z0 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: boolean connected>;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: org.jivesoftware.whack.ExternalComponentManager componentManager>;

        virtualinvoke $r4.<org.jivesoftware.whack.ExternalComponentManager: void sendPacket(org.xmpp.component.Component,org.xmpp.packet.Packet)>(r0, r2);

        goto label3;

     label2:
        $r3 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.util.Queue queuedPackets>;

        interfaceinvoke $r3.<java.util.Queue: boolean add(java.lang.Object)>(r2);

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.String getDescription()
    {
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport;

        return "Wave in a Box Server";
    }

    public java.lang.String getName()
    {
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String componentName>;

        return $r1;
    }

    public void initialize(org.xmpp.packet.JID, org.xmpp.component.ComponentManager)
    {
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport r6;
        org.xmpp.component.ComponentManager r7;
        java.util.logging.Logger $r1;
        org.xmpp.packet.JID r3;
        java.lang.StringBuilder $r0, $r2, $r4;
        java.lang.String $r5;

        r6 := @this: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport;

        r3 := @parameter0: org.xmpp.packet.JID;

        r7 := @parameter1: org.xmpp.component.ComponentManager;

        $r1 = <org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.util.logging.Logger LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Initializing with JID: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.util.logging.Logger: void info(java.lang.String)>($r5);

        return;
    }

    public void processPacket(org.xmpp.packet.Packet)
    {
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport r0;
        org.xmpp.packet.Packet r1;
        org.waveprotocol.wave.federation.xmpp.IncomingPacketHandler $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport;

        r1 := @parameter0: org.xmpp.packet.Packet;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: org.waveprotocol.wave.federation.xmpp.IncomingPacketHandler handler>;

        interfaceinvoke $r2.<org.waveprotocol.wave.federation.xmpp.IncomingPacketHandler: void receivePacket(org.xmpp.packet.Packet)>(r1);

        return;
    }

    public void shutdown()
    {
        java.lang.Throwable $r3;
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport r0;
        java.lang.Object $r1;
        java.util.logging.Logger $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.Object connectionLock>;

        entermonitor $r1;

     label1:
        $r2 = <org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.util.logging.Logger LOG>;

        virtualinvoke $r2.<java.util.logging.Logger: void info(java.lang.String)>("Disconnected from XMPP server.");

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: org.jivesoftware.whack.ExternalComponentManager componentManager> = null;

        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: boolean connected> = 0;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void start()
    {
        org.jivesoftware.whack.ExternalComponentManager $r13;
        java.lang.Throwable $r16;
        org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport r0;
        java.lang.String $r5, $r8, $r10;
        boolean $z0;
        java.util.logging.Logger $r3;
        org.xmpp.packet.Packet $r15;
        java.lang.Object $r1, $r14;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r9;
        java.util.Queue $r11, $r12;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.Object connectionLock>;

        entermonitor $r1;

     label1:
        r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: boolean connected> = 1;

        $r3 = <org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.util.logging.Logger LOG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connected to XMPP server with JID: ");

        $r5 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String componentName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.lang.String serverDomain>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void info(java.lang.String)>($r10);

     label2:
        $r11 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.util.Queue queuedPackets>;

        $z0 = interfaceinvoke $r11.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r13 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: org.jivesoftware.whack.ExternalComponentManager componentManager>;

        $r12 = r0.<org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.util.Queue queuedPackets>;

        $r14 = interfaceinvoke $r12.<java.util.Queue: java.lang.Object poll()>();

        $r15 = (org.xmpp.packet.Packet) $r14;

        virtualinvoke $r13.<org.jivesoftware.whack.ExternalComponentManager: void sendPacket(org.xmpp.component.Component,org.xmpp.packet.Packet)>(r0, $r15);

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r16 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r16;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/waveprotocol/wave/federation/xmpp/ComponentPacketTransport;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.wave.federation.xmpp.ComponentPacketTransport: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
