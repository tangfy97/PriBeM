public final class kodkod.ast.BinaryExpression extends kodkod.ast.Expression
{
    private final kodkod.ast.operator.ExprOperator op;
    private final kodkod.ast.Expression left;
    private final kodkod.ast.Expression right;
    private final int arity;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator;

    void <init>(kodkod.ast.Expression, kodkod.ast.operator.ExprOperator, kodkod.ast.Expression)
    {
        int[] $r1;
        kodkod.ast.Expression r3, r4;
        kodkod.ast.operator.ExprOperator r2;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r18, $r19;
        kodkod.ast.BinaryExpression r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r10, $r16, $r20;
        java.lang.IllegalArgumentException $r5, $r11, $r17;

        r0 := @this: kodkod.ast.BinaryExpression;

        r3 := @parameter0: kodkod.ast.Expression;

        r2 := @parameter1: kodkod.ast.operator.ExprOperator;

        r4 := @parameter2: kodkod.ast.Expression;

        specialinvoke r0.<kodkod.ast.Expression: void <init>()>();

        $r1 = staticinvoke <kodkod.ast.BinaryExpression: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator()>();

        $i0 = virtualinvoke r2.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label3;
            case 4: goto label1;
            case 5: goto label2;
            default: goto label4;
        };

     label1:
        $i10 = virtualinvoke r3.<kodkod.ast.Expression: int arity()>();

        r0.<kodkod.ast.BinaryExpression: int arity> = $i10;

        $i11 = r0.<kodkod.ast.BinaryExpression: int arity>;

        $i12 = virtualinvoke r4.<kodkod.ast.Expression: int arity()>();

        if $i11 == $i12 goto label5;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Incompatible arities: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label2:
        $i2 = virtualinvoke r3.<kodkod.ast.Expression: int arity()>();

        $i3 = virtualinvoke r4.<kodkod.ast.Expression: int arity()>();

        $i4 = $i2 + $i3;

        $i5 = $i4 - 2;

        r0.<kodkod.ast.BinaryExpression: int arity> = $i5;

        $i6 = r0.<kodkod.ast.BinaryExpression: int arity>;

        if $i6 >= 1 goto label5;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Incompatible arities: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label3:
        $i7 = virtualinvoke r3.<kodkod.ast.Expression: int arity()>();

        $i8 = virtualinvoke r4.<kodkod.ast.Expression: int arity()>();

        $i9 = $i7 + $i8;

        r0.<kodkod.ast.BinaryExpression: int arity> = $i9;

        goto label5;

     label4:
        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Not a binary operator: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label5:
        r0.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op> = r2;

        r0.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left> = r3;

        r0.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right> = r4;

        return;
    }

    public int arity()
    {
        int $i0;
        kodkod.ast.BinaryExpression r0;

        r0 := @this: kodkod.ast.BinaryExpression;

        $i0 = r0.<kodkod.ast.BinaryExpression: int arity>;

        return $i0;
    }

    public kodkod.ast.operator.ExprOperator op()
    {
        kodkod.ast.operator.ExprOperator $r1;
        kodkod.ast.BinaryExpression r0;

        r0 := @this: kodkod.ast.BinaryExpression;

        $r1 = r0.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op>;

        return $r1;
    }

    public kodkod.ast.Expression left()
    {
        kodkod.ast.Expression $r1;
        kodkod.ast.BinaryExpression r0;

        r0 := @this: kodkod.ast.BinaryExpression;

        $r1 = r0.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left>;

        return $r1;
    }

    public kodkod.ast.Expression right()
    {
        kodkod.ast.Expression $r1;
        kodkod.ast.BinaryExpression r0;

        r0 := @this: kodkod.ast.BinaryExpression;

        $r1 = r0.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right>;

        return $r1;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        java.lang.Object $r2;
        kodkod.ast.BinaryExpression r1;
        kodkod.ast.visitor.ReturnVisitor r0;

        r1 := @this: kodkod.ast.BinaryExpression;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.BinaryExpression)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.visitor.VoidVisitor r0;
        kodkod.ast.BinaryExpression r1;

        r1 := @this: kodkod.ast.BinaryExpression;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.BinaryExpression)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        kodkod.ast.Expression $r2, $r8;
        kodkod.ast.operator.ExprOperator $r5;
        kodkod.ast.BinaryExpression r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9, $r10;
        java.lang.String $r11;

        r1 := @this: kodkod.ast.BinaryExpression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r2 = r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r1.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator()
    {
        java.lang.NoSuchFieldError $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        kodkod.ast.operator.ExprOperator[] $r1;
        kodkod.ast.operator.ExprOperator $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        $r0 = <kodkod.ast.BinaryExpression: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator CLOSURE>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i1] = 7;

     label03:
        goto label05;

     label04:
        $r20 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator DIFFERENCE>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i2] = 4;

     label06:
        goto label08;

     label07:
        $r19 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator INTERSECTION>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i3] = 1;

     label09:
        goto label11;

     label10:
        $r18 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator JOIN>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i4] = 5;

     label12:
        goto label14;

     label13:
        $r17 := @caughtexception;

     label14:
        $r7 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator OVERRIDE>;

        $i5 = virtualinvoke $r7.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i5] = 2;

     label15:
        goto label17;

     label16:
        $r16 := @caughtexception;

     label17:
        $r8 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT>;

        $i6 = virtualinvoke $r8.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i6] = 3;

     label18:
        goto label20;

     label19:
        $r15 := @caughtexception;

     label20:
        $r9 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator REFLEXIVE_CLOSURE>;

        $i7 = virtualinvoke $r9.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i7] = 8;

     label21:
        goto label23;

     label22:
        $r14 := @caughtexception;

     label23:
        $r10 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator TRANSPOSE>;

        $i8 = virtualinvoke $r10.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i8] = 6;

     label24:
        goto label26;

     label25:
        $r13 := @caughtexception;

     label26:
        $r11 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION>;

        $i9 = virtualinvoke $r11.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i9] = 0;

     label27:
        goto label29;

     label28:
        $r12 := @caughtexception;

     label29:
        <kodkod.ast.BinaryExpression: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
        catch java.lang.NoSuchFieldError from label23 to label24 with label25;
        catch java.lang.NoSuchFieldError from label26 to label27 with label28;
    }
}
