public class org.springframework.core.io.support.ResourceArrayPropertyEditor extends java.beans.PropertyEditorSupport
{
    private static final org.apache.commons.logging.Log logger;
    private final org.springframework.core.io.support.ResourcePatternResolver resourcePatternResolver;
    private final boolean ignoreUnresolvablePlaceholders;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/core/io/support/ResourceArrayPropertyEditor;");

        <org.springframework.core.io.support.ResourceArrayPropertyEditor: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.core.io.support.PathMatchingResourcePatternResolver $r1;
        org.springframework.core.io.support.ResourceArrayPropertyEditor r0;

        r0 := @this: org.springframework.core.io.support.ResourceArrayPropertyEditor;

        $r1 = new org.springframework.core.io.support.PathMatchingResourcePatternResolver;

        specialinvoke $r1.<org.springframework.core.io.support.PathMatchingResourcePatternResolver: void <init>()>();

        specialinvoke r0.<org.springframework.core.io.support.ResourceArrayPropertyEditor: void <init>(org.springframework.core.io.support.ResourcePatternResolver)>($r1);

        return;
    }

    public void <init>(org.springframework.core.io.support.ResourcePatternResolver)
    {
        org.springframework.core.io.support.ResourceArrayPropertyEditor r0;
        org.springframework.core.io.support.ResourcePatternResolver r1;

        r0 := @this: org.springframework.core.io.support.ResourceArrayPropertyEditor;

        r1 := @parameter0: org.springframework.core.io.support.ResourcePatternResolver;

        specialinvoke r0.<org.springframework.core.io.support.ResourceArrayPropertyEditor: void <init>(org.springframework.core.io.support.ResourcePatternResolver,boolean)>(r1, 1);

        return;
    }

    public void <init>(org.springframework.core.io.support.ResourcePatternResolver, boolean)
    {
        org.springframework.core.io.support.ResourceArrayPropertyEditor r0;
        org.springframework.core.io.support.ResourcePatternResolver r1;
        boolean z0;

        r0 := @this: org.springframework.core.io.support.ResourceArrayPropertyEditor;

        r1 := @parameter0: org.springframework.core.io.support.ResourcePatternResolver;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.beans.PropertyEditorSupport: void <init>()>();

        r0.<org.springframework.core.io.support.ResourceArrayPropertyEditor: org.springframework.core.io.support.ResourcePatternResolver resourcePatternResolver> = r1;

        r0.<org.springframework.core.io.support.ResourceArrayPropertyEditor: boolean ignoreUnresolvablePlaceholders> = z0;

        return;
    }

    public void setAsText(java.lang.String)
    {
        org.springframework.core.io.support.ResourceArrayPropertyEditor r0;
        java.io.IOException $r6;
        java.lang.IllegalArgumentException $r7;
        org.springframework.core.io.Resource[] $r5;
        java.lang.StringBuilder $r8, $r9, $r10, $r12;
        java.lang.String r1, $r2, $r3, $r11, $r13;
        org.springframework.core.io.support.ResourcePatternResolver $r4;

        r0 := @this: org.springframework.core.io.support.ResourceArrayPropertyEditor;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.core.io.support.ResourceArrayPropertyEditor: java.lang.String resolvePath(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

     label1:
        $r4 = r0.<org.springframework.core.io.support.ResourceArrayPropertyEditor: org.springframework.core.io.support.ResourcePatternResolver resourcePatternResolver>;

        $r5 = interfaceinvoke $r4.<org.springframework.core.io.support.ResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>($r3);

        virtualinvoke r0.<org.springframework.core.io.support.ResourceArrayPropertyEditor: void setValue(java.lang.Object)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not resolve resource location pattern [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r11 = virtualinvoke $r6.<java.io.IOException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void setValue(java.lang.Object) throws java.lang.IllegalArgumentException
    {
        org.springframework.core.io.support.ResourceArrayPropertyEditor r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.springframework.core.io.Resource r21, r33;
        java.util.Collection $r32;
        org.springframework.core.io.Resource[] $r20, $r22;
        java.util.List $r2;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r26, $r28, $r29, $r30;
        java.lang.Object[] $r1, $r23;
        java.util.ArrayList $r3;
        int i0, $i1, i2;
        java.lang.String $r11, $r14, $r16, $r17, $r18, $r31;
        java.util.Iterator $r4;
        java.io.IOException $r24;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object r0, $r5;
        java.lang.Class $r10;
        org.apache.commons.logging.Log $r25, $r27;
        org.springframework.core.io.support.ResourcePatternResolver $r19;

        r15 := @this: org.springframework.core.io.support.ResourceArrayPropertyEditor;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 != 0 goto label01;

        $z6 = r0 instanceof java.lang.Object[];

        if $z6 == 0 goto label14;

        $z7 = r0 instanceof org.springframework.core.io.Resource[];

        if $z7 != 0 goto label14;

     label01:
        $z1 = r0 instanceof java.util.Collection;

        if $z1 == 0 goto label02;

        $r32 = (java.util.Collection) r0;

        goto label03;

     label02:
        $r1 = (java.lang.Object[]) r0;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r32 = (java.util.Collection) $r2;

     label03:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r32.<java.util.Collection: java.util.Iterator iterator()>();

        goto label13;

     label04:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $z2 = $r5 instanceof java.lang.String;

        if $z2 == 0 goto label11;

        $r16 = (java.lang.String) $r5;

        $r17 = virtualinvoke r15.<org.springframework.core.io.support.ResourceArrayPropertyEditor: java.lang.String resolvePath(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String trim()>();

     label05:
        $r19 = r15.<org.springframework.core.io.support.ResourceArrayPropertyEditor: org.springframework.core.io.support.ResourcePatternResolver resourcePatternResolver>;

        $r20 = interfaceinvoke $r19.<org.springframework.core.io.support.ResourcePatternResolver: org.springframework.core.io.Resource[] getResources(java.lang.String)>($r18);

        i0 = lengthof $r20;

        i2 = 0;

        goto label08;

     label06:
        r21 = $r20[i2];

        $z5 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r21);

        if $z5 != 0 goto label07;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r21);

     label07:
        i2 = i2 + 1;

     label08:
        if i2 < i0 goto label06;

     label09:
        goto label13;

     label10:
        $r24 := @caughtexception;

        $r25 = <org.springframework.core.io.support.ResourceArrayPropertyEditor: org.apache.commons.logging.Log logger>;

        $z8 = interfaceinvoke $r25.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z8 == 0 goto label13;

        $r27 = <org.springframework.core.io.support.ResourceArrayPropertyEditor: org.apache.commons.logging.Log logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not retrieve resources for pattern \'");

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r31);

        goto label13;

     label11:
        $z3 = $r5 instanceof org.springframework.core.io.Resource;

        if $z3 == 0 goto label12;

        r33 = (org.springframework.core.io.Resource) $r5;

        $z4 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r33);

        if $z4 != 0 goto label13;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r33);

        goto label13;

     label12:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot convert element [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to [");

        $r10 = class "Lorg/springframework/core/io/Resource;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: only location String and Resource object supported");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r6;

     label13:
        $z9 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z9 != 0 goto label04;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r22 = newarray (org.springframework.core.io.Resource)[$i1];

        $r23 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r22);

        specialinvoke r15.<java.beans.PropertyEditorSupport: void setValue(java.lang.Object)>($r23);

        goto label15;

     label14:
        specialinvoke r15.<java.beans.PropertyEditorSupport: void setValue(java.lang.Object)>(r0);

     label15:
        return;

        catch java.io.IOException from label05 to label09 with label10;
    }

    protected java.lang.String resolvePath(java.lang.String)
    {
        org.springframework.core.io.support.ResourceArrayPropertyEditor r1;
        java.lang.String r0, $r2;
        boolean $z0;

        r1 := @this: org.springframework.core.io.support.ResourceArrayPropertyEditor;

        r0 := @parameter0: java.lang.String;

        $z0 = r1.<org.springframework.core.io.support.ResourceArrayPropertyEditor: boolean ignoreUnresolvablePlaceholders>;

        $r2 = staticinvoke <org.springframework.util.SystemPropertyUtils: java.lang.String resolvePlaceholders(java.lang.String,boolean)>(r0, $z0);

        return $r2;
    }
}
