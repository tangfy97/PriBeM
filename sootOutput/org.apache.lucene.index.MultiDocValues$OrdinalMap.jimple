public class org.apache.lucene.index.MultiDocValues$OrdinalMap extends java.lang.Object
{
    final java.lang.Object owner;
    final org.apache.lucene.util.packed.MonotonicAppendingLongBuffer globalOrdDeltas;
    final org.apache.lucene.util.packed.AppendingLongBuffer subIndexes;
    final org.apache.lucene.util.packed.MonotonicAppendingLongBuffer[] ordDeltas;

    public void <init>(java.lang.Object, org.apache.lucene.index.TermsEnum[]) throws java.io.IOException
    {
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer[] $r5, $r6, $r15, $r23;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice $r12, $r13;
        byte $b18;
        org.apache.lucene.index.TermsEnum $r14, $r21;
        org.apache.lucene.index.MultiTermsEnum $r30;
        org.apache.lucene.index.ReaderSlice[] r7;
        org.apache.lucene.util.BytesRef $r10;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[] r8;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer $r16, $r18, $r25, $r27;
        org.apache.lucene.index.MultiDocValues$OrdinalMap r0;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex $r29;
        org.apache.lucene.index.TermsEnum[] r4;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] $r11;
        long $l8, l9, $l10, $l11, $l12, l15, $l17;
        org.apache.lucene.index.ReaderSlice $r28;
        long[] r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i13, i14, i16, $i19;
        org.apache.lucene.util.packed.AppendingLongBuffer $r17, $r26;
        java.lang.Object r1;

        r0 := @this: org.apache.lucene.index.MultiDocValues$OrdinalMap;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: org.apache.lucene.index.TermsEnum[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: java.lang.Object owner> = r1;

        $r25 = new org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        specialinvoke $r25.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: void <init>()>();

        r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer globalOrdDeltas> = $r25;

        $r26 = new org.apache.lucene.util.packed.AppendingLongBuffer;

        specialinvoke $r26.<org.apache.lucene.util.packed.AppendingLongBuffer: void <init>()>();

        r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.AppendingLongBuffer subIndexes> = $r26;

        $i0 = lengthof r4;

        $r5 = newarray (org.apache.lucene.util.packed.MonotonicAppendingLongBuffer)[$i0];

        r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer[] ordDeltas> = $r5;

        i13 = 0;

     label01:
        $r6 = r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer[] ordDeltas>;

        $i1 = lengthof $r6;

        if i13 >= $i1 goto label02;

        $r23 = r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer[] ordDeltas>;

        $r27 = new org.apache.lucene.util.packed.MonotonicAppendingLongBuffer;

        specialinvoke $r27.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: void <init>()>();

        $r23[i13] = $r27;

        i13 = i13 + 1;

        goto label01;

     label02:
        $i2 = lengthof r4;

        r24 = newarray (long)[$i2];

        $i3 = lengthof r4;

        r7 = newarray (org.apache.lucene.index.ReaderSlice)[$i3];

        $i4 = lengthof r7;

        r8 = newarray (org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex)[$i4];

        i14 = 0;

     label03:
        $i5 = lengthof r7;

        if i14 >= $i5 goto label04;

        $r28 = new org.apache.lucene.index.ReaderSlice;

        specialinvoke $r28.<org.apache.lucene.index.ReaderSlice: void <init>(int,int,int)>(0, 0, i14);

        r7[i14] = $r28;

        $r29 = new org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex;

        $r21 = r4[i14];

        specialinvoke $r29.<org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex: void <init>(org.apache.lucene.index.TermsEnum,int)>($r21, i14);

        r8[i14] = $r29;

        i14 = i14 + 1;

        goto label03;

     label04:
        $r30 = new org.apache.lucene.index.MultiTermsEnum;

        specialinvoke $r30.<org.apache.lucene.index.MultiTermsEnum: void <init>(org.apache.lucene.index.ReaderSlice[])>(r7);

        virtualinvoke $r30.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.TermsEnum reset(org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[])>(r8);

        l15 = 0L;

     label05:
        $r10 = virtualinvoke $r30.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.util.BytesRef next()>();

        if $r10 == null goto label10;

        $r11 = virtualinvoke $r30.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] getMatchArray()>();

        i16 = 0;

     label06:
        $i6 = virtualinvoke $r30.<org.apache.lucene.index.MultiTermsEnum: int getMatchCount()>();

        if i16 >= $i6 goto label09;

        $r12 = $r11[i16];

        i7 = $r12.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: int index>;

        $r13 = $r11[i16];

        $r14 = $r13.<org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice: org.apache.lucene.index.TermsEnum terms>;

        $l8 = virtualinvoke $r14.<org.apache.lucene.index.TermsEnum: long ord()>();

        l9 = l15 - $l8;

        if i16 != 0 goto label07;

        $r17 = r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.AppendingLongBuffer subIndexes>;

        $l12 = (long) i7;

        virtualinvoke $r17.<org.apache.lucene.util.packed.AppendingLongBuffer: void add(long)>($l12);

        $r18 = r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer globalOrdDeltas>;

        virtualinvoke $r18.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: void add(long)>(l9);

     label07:
        $l17 = r24[i7];

        $b18 = $l17 cmp $l8;

        $i19 = (int) $b18;

        if $i19 > 0 goto label08;

        $r15 = r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer[] ordDeltas>;

        $r16 = $r15[i7];

        virtualinvoke $r16.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: void add(long)>(l9);

        $l10 = r24[i7];

        $l11 = $l10 + 1L;

        r24[i7] = $l11;

        goto label07;

     label08:
        i16 = i16 + 1;

        goto label06;

     label09:
        l15 = l15 + 1L;

        goto label05;

     label10:
        return;
    }

    public long getGlobalOrd(int, long)
    {
        org.apache.lucene.index.MultiDocValues$OrdinalMap r0;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer[] $r1;
        int i1;
        long l0, $l2, $l3;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer $r2;

        r0 := @this: org.apache.lucene.index.MultiDocValues$OrdinalMap;

        i1 := @parameter0: int;

        l0 := @parameter1: long;

        $r1 = r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer[] ordDeltas>;

        $r2 = $r1[i1];

        $l2 = virtualinvoke $r2.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long get(long)>(l0);

        $l3 = l0 + $l2;

        return $l3;
    }

    public long getSegmentOrd(int, long)
    {
        org.apache.lucene.index.MultiDocValues$OrdinalMap r0;
        int i3;
        long l0, $l1, $l2;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer $r1;

        r0 := @this: org.apache.lucene.index.MultiDocValues$OrdinalMap;

        i3 := @parameter0: int;

        l0 := @parameter1: long;

        $r1 = r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer globalOrdDeltas>;

        $l1 = virtualinvoke $r1.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long get(long)>(l0);

        $l2 = l0 - $l1;

        return $l2;
    }

    public int getSegmentNumber(long)
    {
        org.apache.lucene.index.MultiDocValues$OrdinalMap r0;
        org.apache.lucene.util.packed.AppendingLongBuffer $r1;
        int $i2;
        long l0, $l1;

        r0 := @this: org.apache.lucene.index.MultiDocValues$OrdinalMap;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.AppendingLongBuffer subIndexes>;

        $l1 = virtualinvoke $r1.<org.apache.lucene.util.packed.AppendingLongBuffer: long get(long)>(l0);

        $i2 = (int) $l1;

        return $i2;
    }

    public long getValueCount()
    {
        org.apache.lucene.index.MultiDocValues$OrdinalMap r0;
        org.apache.lucene.util.packed.MonotonicAppendingLongBuffer $r1;
        long $l0;

        r0 := @this: org.apache.lucene.index.MultiDocValues$OrdinalMap;

        $r1 = r0.<org.apache.lucene.index.MultiDocValues$OrdinalMap: org.apache.lucene.util.packed.MonotonicAppendingLongBuffer globalOrdDeltas>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.util.packed.MonotonicAppendingLongBuffer: long size()>();

        return $l0;
    }
}
