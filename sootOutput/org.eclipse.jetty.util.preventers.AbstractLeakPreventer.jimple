public abstract class org.eclipse.jetty.util.preventers.AbstractLeakPreventer extends org.eclipse.jetty.util.component.AbstractLifeCycle
{
    protected static final org.eclipse.jetty.util.log.Logger LOG;

    public void <init>()
    {
        org.eclipse.jetty.util.preventers.AbstractLeakPreventer r0;

        r0 := @this: org.eclipse.jetty.util.preventers.AbstractLeakPreventer;

        specialinvoke r0.<org.eclipse.jetty.util.component.AbstractLifeCycle: void <init>()>();

        return;
    }

    public abstract void prevent(java.lang.ClassLoader);

    protected void doStart() throws java.lang.Exception
    {
        java.lang.Throwable $r9;
        org.eclipse.jetty.util.preventers.AbstractLeakPreventer r3;
        java.lang.Thread $r0, $r2, $r8, $r10;
        java.lang.Class $r4, $r6;
        java.lang.ClassLoader $r1, $r5, $r7;

        r3 := @this: org.eclipse.jetty.util.preventers.AbstractLeakPreventer;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label1:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r2.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r5);

        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke r3.<org.eclipse.jetty.util.preventers.AbstractLeakPreventer: void prevent(java.lang.ClassLoader)>($r7);

        specialinvoke r3.<org.eclipse.jetty.util.component.AbstractLifeCycle: void doStart()>();

     label2:
        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r1);

        goto label5;

     label3:
        $r9 := @caughtexception;

     label4:
        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r10.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r1);

        throw $r9;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/util/preventers/AbstractLeakPreventer;");

        <org.eclipse.jetty.util.preventers.AbstractLeakPreventer: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
