public class org.apache.cxf.interceptor.ClientFaultConverter extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    public static final java.lang.String DISABLE_FAULT_MAPPING;
    private static final java.util.logging.Logger LOG;

    public void <init>()
    {
        org.apache.cxf.interceptor.ClientFaultConverter r0;

        r0 := @this: org.apache.cxf.interceptor.ClientFaultConverter;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>("unmarshal");

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.interceptor.ClientFaultConverter r0;

        r0 := @this: org.apache.cxf.interceptor.ClientFaultConverter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>(r1);

        return;
    }

    public void handleMessage(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.FaultMode r9;
        org.apache.cxf.interceptor.Fault r2;
        int i0, i1;
        org.apache.cxf.interceptor.ClientFaultConverter r8;
        java.lang.reflect.Method $r12;
        boolean $z0, $z1;
        org.apache.cxf.message.Message r0;
        java.lang.Class[] $r6;
        org.apache.cxf.message.Exchange $r10, $r13;
        java.lang.Exception r5;
        org.w3c.dom.Element $r3;
        java.lang.Object $r1, $r4, $r11;
        java.lang.Class r7;

        r8 := @this: org.apache.cxf.interceptor.ClientFaultConverter;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/lang/Exception;");

        r2 = (org.apache.cxf.interceptor.Fault) $r1;

        $r3 = virtualinvoke r2.<org.apache.cxf.interceptor.Fault: org.w3c.dom.Element getDetail()>();

        if $r3 == null goto label1;

        $z1 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean getContextualBoolean(org.apache.cxf.message.Message,java.lang.String,boolean)>(r0, "disable-fault-mapping", 0);

        if $z1 != 0 goto label1;

        virtualinvoke r8.<org.apache.cxf.interceptor.ClientFaultConverter: void processFaultDetail(org.apache.cxf.interceptor.Fault,org.apache.cxf.message.Message)>(r2, r0);

        specialinvoke r8.<org.apache.cxf.interceptor.ClientFaultConverter: void setStackTrace(org.apache.cxf.interceptor.Fault,org.apache.cxf.message.Message)>(r2, r0);

     label1:
        r9 = <org.apache.cxf.message.FaultMode: org.apache.cxf.message.FaultMode UNCHECKED_APPLICATION_FAULT>;

        $r10 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r11 = interfaceinvoke $r10.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/reflect/Method;");

        $r12 = (java.lang.reflect.Method) $r11;

        if $r12 == null goto label4;

        $r4 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/lang/Exception;");

        r5 = (java.lang.Exception) $r4;

        $r6 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        i0 = lengthof $r6;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r7 = $r6[i1];

        $z0 = virtualinvoke r7.<java.lang.Class: boolean isInstance(java.lang.Object)>(r5);

        if $z0 == 0 goto label3;

        r9 = <org.apache.cxf.message.FaultMode: org.apache.cxf.message.FaultMode CHECKED_APPLICATION_FAULT>;

        goto label4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r13 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        interfaceinvoke $r13.<org.apache.cxf.message.Exchange: void put(java.lang.Class,java.lang.Object)>(class "Lorg/apache/cxf/message/FaultMode;", r9);

        return;
    }

    protected void processFaultDetail(org.apache.cxf.interceptor.Fault, org.apache.cxf.message.Message)
    {
        org.apache.cxf.staxutils.W3CDOMStreamReader $r18;
        org.apache.cxf.service.Service r66;
        javax.xml.stream.XMLStreamException $r57;
        org.apache.cxf.databinding.DataBinding $r15;
        java.lang.Exception $r51, $r52;
        javax.xml.namespace.QName $r4, $r44, $r50;
        java.lang.Object[] $r28, $r32;
        org.apache.cxf.service.model.BindingOperationInfo r61;
        java.lang.reflect.Constructor $r27, $r31;
        java.lang.String $r5, $r6, $r19, $r20, $r23, $r25, $r29, $r33, $r35, $r43, $r45, $r55;
        org.apache.cxf.service.model.MessagePartInfo r60, r63, r65;
        java.lang.Class[] $r30;
        java.lang.reflect.Field $r22;
        org.apache.cxf.message.Exchange $r8, $r13;
        java.lang.NoSuchMethodException $r56;
        org.apache.cxf.interceptor.ClientFaultConverter r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Collection $r11, $r37;
        org.apache.cxf.service.model.OperationInfo $r10, $r36;
        java.util.logging.Logger $r53;
        java.util.List $r40, $r47;
        java.util.logging.Level $r54;
        org.apache.cxf.interceptor.Fault r0, $r58;
        org.w3c.dom.Node $r2;
        org.apache.cxf.service.model.FaultInfo r59, r62, r64;
        org.apache.cxf.databinding.DataReader $r17, $r34;
        java.util.Iterator $r12, $r38, $r41, $r48;
        org.apache.cxf.message.Message r7;
        org.w3c.dom.Element $r1, r3;
        java.lang.Object $r9, $r14, $r26, $r39, $r42, $r46, $r49, r67, r69;
        java.lang.Class $r21, $r24, r68;

        r16 := @this: org.apache.cxf.interceptor.ClientFaultConverter;

        r0 := @parameter0: org.apache.cxf.interceptor.Fault;

        r7 := @parameter1: org.apache.cxf.message.Message;

        $r1 = virtualinvoke r0.<org.apache.cxf.interceptor.Fault: org.w3c.dom.Element getDetail()>();

        $r2 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Node getChild(org.w3c.dom.Node,int)>($r1, 1);

        r3 = (org.w3c.dom.Element) $r2;

        if r3 != null goto label01;

        return;

     label01:
        $r4 = new javax.xml.namespace.QName;

        $r5 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getNamespaceURI()>();

        $r6 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        specialinvoke $r4.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r5, $r6);

        r59 = null;

        r60 = null;

        $r8 = interfaceinvoke r7.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r9 = interfaceinvoke $r8.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/service/model/BindingOperationInfo;");

        r61 = (org.apache.cxf.service.model.BindingOperationInfo) $r9;

        if r61 != null goto label02;

        return;

     label02:
        $z0 = virtualinvoke r61.<org.apache.cxf.service.model.BindingOperationInfo: boolean isUnwrapped()>();

        if $z0 == 0 goto label03;

        r61 = virtualinvoke r61.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.BindingOperationInfo getWrappedOperation()>();

     label03:
        $r10 = virtualinvoke r61.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.OperationInfo getOperationInfo()>();

        $r11 = virtualinvoke $r10.<org.apache.cxf.service.model.OperationInfo: java.util.Collection getFaults()>();

        $r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z8 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label09;

        $r46 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r62 = (org.apache.cxf.service.model.FaultInfo) $r46;

        $r47 = virtualinvoke r62.<org.apache.cxf.service.model.FaultInfo: java.util.List getMessageParts()>();

        $r48 = interfaceinvoke $r47.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z6 = interfaceinvoke $r48.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label07;

        $r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>();

        r63 = (org.apache.cxf.service.model.MessagePartInfo) $r49;

        $r50 = virtualinvoke r63.<org.apache.cxf.service.model.MessagePartInfo: javax.xml.namespace.QName getConcreteName()>();

        $z7 = virtualinvoke $r4.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r50);

        if $z7 == 0 goto label06;

        r59 = r62;

        r60 = r63;

        goto label07;

     label06:
        goto label05;

     label07:
        if r59 == null goto label08;

        goto label09;

     label08:
        goto label04;

     label09:
        if r59 != null goto label15;

        $r36 = virtualinvoke r61.<org.apache.cxf.service.model.BindingOperationInfo: org.apache.cxf.service.model.OperationInfo getOperationInfo()>();

        $r37 = virtualinvoke $r36.<org.apache.cxf.service.model.OperationInfo: java.util.Collection getFaults()>();

        $r38 = interfaceinvoke $r37.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke $r38.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label15;

        $r39 = interfaceinvoke $r38.<java.util.Iterator: java.lang.Object next()>();

        r64 = (org.apache.cxf.service.model.FaultInfo) $r39;

        $r40 = virtualinvoke r64.<org.apache.cxf.service.model.FaultInfo: java.util.List getMessageParts()>();

        $r41 = interfaceinvoke $r40.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke $r41.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label13;

        $r42 = interfaceinvoke $r41.<java.util.Iterator: java.lang.Object next()>();

        r65 = (org.apache.cxf.service.model.MessagePartInfo) $r42;

        $r43 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r44 = virtualinvoke r65.<org.apache.cxf.service.model.MessagePartInfo: javax.xml.namespace.QName getConcreteName()>();

        $r45 = virtualinvoke $r44.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z5 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>($r45);

        if $z5 == 0 goto label12;

        r59 = r64;

        r60 = r65;

        goto label13;

     label12:
        goto label11;

     label13:
        if r59 == null goto label14;

        goto label15;

     label14:
        goto label10;

     label15:
        if r59 != null goto label16;

        return;

     label16:
        $r13 = interfaceinvoke r7.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r14 = interfaceinvoke $r13.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/service/Service;");

        r66 = (org.apache.cxf.service.Service) $r14;

        $r15 = interfaceinvoke r66.<org.apache.cxf.service.Service: org.apache.cxf.databinding.DataBinding getDataBinding()>();

        $z1 = specialinvoke r16.<org.apache.cxf.interceptor.ClientFaultConverter: boolean isDOMSupported(org.apache.cxf.databinding.DataBinding)>($r15);

        if $z1 == 0 goto label17;

        $r34 = interfaceinvoke $r15.<org.apache.cxf.databinding.DataBinding: org.apache.cxf.databinding.DataReader createReader(java.lang.Class)>(class "Lorg/w3c/dom/Node;");

        $r35 = <org.apache.cxf.databinding.DataReader: java.lang.String FAULT>;

        interfaceinvoke $r34.<org.apache.cxf.databinding.DataReader: void setProperty(java.lang.String,java.lang.Object)>($r35, r0);

        r67 = interfaceinvoke $r34.<org.apache.cxf.databinding.DataReader: java.lang.Object read(org.apache.cxf.service.model.MessagePartInfo,java.lang.Object)>(r60, r3);

        goto label22;

     label17:
        $r17 = interfaceinvoke $r15.<org.apache.cxf.databinding.DataBinding: org.apache.cxf.databinding.DataReader createReader(java.lang.Class)>(class "Ljavax/xml/stream/XMLStreamReader;");

        $r18 = new org.apache.cxf.staxutils.W3CDOMStreamReader;

        specialinvoke $r18.<org.apache.cxf.staxutils.W3CDOMStreamReader: void <init>(org.w3c.dom.Element)>(r3);

     label18:
        interfaceinvoke $r18.<javax.xml.stream.XMLStreamReader: int nextTag()>();

     label19:
        goto label21;

     label20:
        $r57 := @caughtexception;

        $r58 = new org.apache.cxf.interceptor.Fault;

        specialinvoke $r58.<org.apache.cxf.interceptor.Fault: void <init>(java.lang.Throwable)>($r57);

        throw $r58;

     label21:
        $r19 = <org.apache.cxf.databinding.DataReader: java.lang.String FAULT>;

        interfaceinvoke $r17.<org.apache.cxf.databinding.DataReader: void setProperty(java.lang.String,java.lang.Object)>($r19, r0);

        r67 = interfaceinvoke $r17.<org.apache.cxf.databinding.DataReader: java.lang.Object read(org.apache.cxf.service.model.MessagePartInfo,java.lang.Object)>(r60, $r18);

     label22:
        $z2 = r67 instanceof java.lang.Exception;

        if $z2 != 0 goto label30;

     label23:
        $r24 = class "Ljava/lang/Class;";

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r26 = virtualinvoke r59.<org.apache.cxf.service.model.FaultInfo: java.lang.Object getProperty(java.lang.String,java.lang.Class)>($r25, class "Ljava/lang/Class;");

        r68 = (java.lang.Class) $r26;

        if r67 != null goto label24;

        $r30 = newarray (java.lang.Class)[1];

        $r30[0] = class "Ljava/lang/String;";

        $r31 = virtualinvoke r68.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r30);

        $r32 = newarray (java.lang.Object)[1];

        $r33 = virtualinvoke r0.<org.apache.cxf.interceptor.Fault: java.lang.String getMessage()>();

        $r32[0] = $r33;

        r69 = virtualinvoke $r31.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r32);

        goto label27;

     label24:
        $r27 = specialinvoke r16.<org.apache.cxf.interceptor.ClientFaultConverter: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Object)>(r68, r67);

        $r28 = newarray (java.lang.Object)[2];

        $r29 = virtualinvoke r0.<org.apache.cxf.interceptor.Fault: java.lang.String getMessage()>();

        $r28[0] = $r29;

        $r28[1] = r67;

        r69 = virtualinvoke $r27.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r28);

     label25:
        goto label27;

     label26:
        $r56 := @caughtexception;

        r69 = specialinvoke r16.<org.apache.cxf.interceptor.ClientFaultConverter: java.lang.Exception convertFaultBean(java.lang.Class,java.lang.Object,org.apache.cxf.interceptor.Fault)>(r68, r67, r0);

     label27:
        interfaceinvoke r7.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Exception;", r69);

     label28:
        goto label35;

     label29:
        $r52 := @caughtexception;

        $r53 = <org.apache.cxf.interceptor.ClientFaultConverter: java.util.logging.Logger LOG>;

        $r54 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r55 = virtualinvoke $r52.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable,java.lang.Object)>($r53, $r54, "EXCEPTION_WHILE_CREATING_EXCEPTION", $r52, $r55);

        goto label35;

     label30:
        $r20 = virtualinvoke r0.<org.apache.cxf.interceptor.Fault: java.lang.String getMessage()>();

        if $r20 == null goto label34;

     label31:
        $r21 = class "Ljava/lang/Throwable;";

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("detailMessage");

        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>($r22);

        $r23 = virtualinvoke r0.<org.apache.cxf.interceptor.Fault: java.lang.String getMessage()>();

        virtualinvoke $r22.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r67, $r23);

     label32:
        goto label34;

     label33:
        $r51 := @caughtexception;

     label34:
        interfaceinvoke r7.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Exception;", r67);

     label35:
        return;

        catch javax.xml.stream.XMLStreamException from label18 to label19 with label20;
        catch java.lang.NoSuchMethodException from label24 to label25 with label26;
        catch java.lang.Exception from label23 to label28 with label29;
        catch java.lang.Exception from label31 to label32 with label33;
    }

    private java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.Object) throws java.lang.NoSuchMethodException
    {
        java.lang.NoSuchMethodException $r13;
        java.lang.reflect.Constructor $r5, r6, $r17;
        java.lang.reflect.Constructor[] $r3;
        int $i0, i1, i2;
        org.apache.cxf.interceptor.ClientFaultConverter r14;
        boolean $z0, $z1;
        java.lang.Class[] $r4, $r7, $r9, $r11, $r16;
        java.lang.Object r0;
        java.lang.Class $r1, r2, $r8, $r10, $r12, $r15;

        r14 := @this: org.apache.cxf.interceptor.ClientFaultConverter;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        i1 = lengthof $r3;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r6 = $r3[i2];

        $r7 = virtualinvoke r6.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r7;

        if $i0 != 2 goto label2;

        $r8 = class "Ljava/lang/String;";

        $r9 = virtualinvoke r6.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r10 = $r9[0];

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke r6.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r12 = $r11[1];

        $z1 = virtualinvoke $r12.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return r6;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r4 = newarray (java.lang.Class)[2];

        $r4[0] = class "Ljava/lang/String;";

        $r4[1] = $r1;

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r4);

     label4:
        return $r5;

     label5:
        $r13 := @caughtexception;

        $r15 = specialinvoke r14.<org.apache.cxf.interceptor.ClientFaultConverter: java.lang.Class getPrimitiveClass(java.lang.Class)>($r1);

        if $r15 == null goto label6;

        $r16 = newarray (java.lang.Class)[2];

        $r16[0] = class "Ljava/lang/String;";

        $r16[1] = $r15;

        $r17 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r16);

        return $r17;

     label6:
        throw $r13;

        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
    }

    private boolean isDOMSupported(org.apache.cxf.databinding.DataBinding)
    {
        org.apache.cxf.databinding.DataBinding r0;
        java.lang.Class[] $r1;
        int i0, i1;
        java.lang.Class r2;
        org.apache.cxf.interceptor.ClientFaultConverter r3;
        boolean $z0, z1;

        r3 := @this: org.apache.cxf.interceptor.ClientFaultConverter;

        r0 := @parameter0: org.apache.cxf.databinding.DataBinding;

        z1 = 0;

        $r1 = interfaceinvoke r0.<org.apache.cxf.databinding.DataBinding: java.lang.Class[] getSupportedReaderFormats()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/w3c/dom/Node;");

        if $z0 == 0 goto label2;

        z1 = 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z1;
    }

    private void setStackTrace(org.apache.cxf.interceptor.Fault, org.apache.cxf.message.Message)
    {
        java.lang.Throwable r18;
        java.lang.Object[] $r12;
        java.util.HashMap $r0;
        java.util.ArrayList $r7;
        org.apache.cxf.interceptor.Fault r2;
        java.util.StringTokenizer $r8;
        int $i0, $i1;
        java.lang.StackTraceElement $r16;
        java.lang.String r6, $r15;
        org.apache.cxf.interceptor.ClientFaultConverter r17;
        boolean $z0, $z1, $z2, $z3;
        org.apache.cxf.message.Message r9;
        java.lang.Exception $r14;
        org.w3c.dom.Element $r3;
        java.lang.StackTraceElement[] r11, $r13;
        java.lang.Object $r5, $r10;
        javax.xml.namespace.QName $r4;
        org.apache.cxf.helpers.XPathUtils $r1;

        r17 := @this: org.apache.cxf.interceptor.ClientFaultConverter;

        r2 := @parameter0: org.apache.cxf.interceptor.Fault;

        r9 := @parameter1: org.apache.cxf.message.Message;

        r18 = null;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new org.apache.cxf.helpers.XPathUtils;

        specialinvoke $r1.<org.apache.cxf.helpers.XPathUtils: void <init>(java.util.Map)>($r0);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("s", "http://cxf.apache.org/fault");

        $r3 = virtualinvoke r2.<org.apache.cxf.interceptor.Fault: org.w3c.dom.Element getDetail()>();

        $r4 = <javax.xml.xpath.XPathConstants: javax.xml.namespace.QName STRING>;

        $r5 = virtualinvoke $r1.<org.apache.cxf.helpers.XPathUtils: java.lang.Object getValue(java.lang.String,org.w3c.dom.Node,javax.xml.namespace.QName)>("//s:stackTrace/text()", $r3, $r4);

        r6 = (java.lang.String) $r5;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r6);

        if $z0 != 0 goto label6;

        $r8 = new java.util.StringTokenizer;

        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r6, "#*#");

     label1:
        $z1 = virtualinvoke $r8.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label3;

        $r15 = virtualinvoke $r8.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z3 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("Caused by:");

        if $z3 == 0 goto label2;

        r18 = specialinvoke r17.<org.apache.cxf.interceptor.ClientFaultConverter: java.lang.Throwable getCause(java.util.StringTokenizer,java.lang.String)>($r8, $r15);

        goto label3;

     label2:
        $r16 = staticinvoke <org.apache.cxf.interceptor.ClientFaultConverter: java.lang.StackTraceElement parseStackTrackLine(java.lang.String)>($r15);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label1;

     label3:
        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 > 0 goto label4;

        if r18 == null goto label6;

     label4:
        $r10 = interfaceinvoke r9.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/lang/Exception;");

        $r14 = (java.lang.Exception) $r10;

        $z2 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        r11 = newarray (java.lang.StackTraceElement)[$i1];

        $r12 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r11);

        $r13 = (java.lang.StackTraceElement[]) $r12;

        virtualinvoke $r14.<java.lang.Exception: void setStackTrace(java.lang.StackTraceElement[])>($r13);

     label5:
        if r18 == null goto label6;

        virtualinvoke $r14.<java.lang.Exception: java.lang.Throwable initCause(java.lang.Throwable)>(r18);

     label6:
        return;
    }

    private java.lang.Throwable getCause(java.util.StringTokenizer, java.lang.String)
    {
        java.lang.Throwable $r0, $r10;
        java.lang.Object[] $r5;
        java.util.ArrayList $r3;
        java.util.StringTokenizer r4;
        int $i0, $i1, $i2;
        java.lang.StackTraceElement $r8;
        java.lang.String r1, $r2, $r7;
        org.apache.cxf.interceptor.ClientFaultConverter r9;
        boolean $z0, $z1;
        java.lang.StackTraceElement[] $r6, $r11;

        r9 := @this: org.apache.cxf.interceptor.ClientFaultConverter;

        r4 := @parameter0: java.util.StringTokenizer;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.lang.Throwable;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(":");

        $i1 = $i0 + 2;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        specialinvoke $r0.<java.lang.Throwable: void <init>(java.lang.String)>($r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("Caused by:");

        if $z1 == 0 goto label2;

        $r10 = specialinvoke r9.<org.apache.cxf.interceptor.ClientFaultConverter: java.lang.Throwable getCause(java.util.StringTokenizer,java.lang.String)>(r4, $r7);

        virtualinvoke $r0.<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>($r10);

        goto label3;

     label2:
        $r8 = staticinvoke <org.apache.cxf.interceptor.ClientFaultConverter: java.lang.StackTraceElement parseStackTrackLine(java.lang.String)>($r7);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label3:
        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r11 = newarray (java.lang.StackTraceElement)[$i2];

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r6 = (java.lang.StackTraceElement[]) $r5;

        virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r6);

        return $r0;
    }

    private static java.lang.StackTraceElement parseStackTrackLine(java.lang.String)
    {
        java.util.StringTokenizer $r0;
        int $i0;
        java.lang.StackTraceElement $r2;
        java.lang.String r1, $r3, $r4, $r5, $r6;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, "!");

        $r2 = new java.lang.StackTraceElement;

        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r5 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r6 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        specialinvoke $r2.<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>($r3, $r4, $r5, $i0);

        return $r2;
    }

    private java.lang.Class getPrimitiveClass(java.lang.Class)
    {
        java.lang.reflect.Field $r1;
        java.lang.Exception $r4;
        java.lang.Class r0, $r3;
        java.lang.Object $r2;
        org.apache.cxf.interceptor.ClientFaultConverter r5;
        boolean $z0, $z1;

        r5 := @this: org.apache.cxf.interceptor.ClientFaultConverter;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("TYPE");

        $r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $z1 = $r2 instanceof java.lang.Class;

        if $z1 == 0 goto label3;

        $r3 = (java.lang.Class) $r2;

     label2:
        return $r3;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        return null;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    private java.lang.Exception convertFaultBean(java.lang.Class, java.lang.Object, org.apache.cxf.interceptor.Fault) throws java.lang.Exception
    {
        java.lang.reflect.Method[] $r10;
        java.lang.NoSuchFieldException $r37;
        java.lang.reflect.Method $r21, r41;
        org.apache.cxf.interceptor.ClientFaultConverter r38;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception r7, $r36;
        java.lang.StringBuilder $r14, $r15, $r18, $r25, $r26, $r29;
        java.lang.Object[] $r3, $r22, $r23;
        java.lang.reflect.Constructor $r2;
        org.apache.cxf.interceptor.Fault r4;
        int $i0, i1, i2, i3, i4;
        java.lang.String $r5, $r12, $r13, $r16, $r17, $r27, $r28, $r30, $r33, r42;
        java.lang.Class[] $r1, $r11, $r19;
        java.lang.reflect.Field $r34, r40;
        java.lang.reflect.Field[] $r31;
        java.lang.Class r0, $r9, $r20, $r32, r39;
        java.lang.Object $r6, r8, $r24, $r35;

        r38 := @this: org.apache.cxf.interceptor.ClientFaultConverter;

        r0 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.Object;

        r4 := @parameter2: org.apache.cxf.interceptor.Fault;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/String;";

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

        $r3 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r4.<org.apache.cxf.interceptor.Fault: java.lang.String getMessage()>();

        $r3[0] = $r5;

        $r6 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        r7 = (java.lang.Exception) $r6;

        r39 = r0;

     label01:
        $z0 = virtualinvoke r39.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");

        if $z0 != 0 goto label08;

        $r31 = virtualinvoke r39.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i1 = lengthof $r31;

        i2 = 0;

     label02:
        if i2 >= i1 goto label07;

        r40 = $r31[i2];

     label03:
        $r32 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>();

        $r33 = virtualinvoke r40.<java.lang.reflect.Field: java.lang.String getName()>();

        $r34 = virtualinvoke $r32.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r33);

        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>($r34);

        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>(r40);

        $r35 = virtualinvoke $r34.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r8);

        virtualinvoke r40.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r7, $r35);

     label04:
        goto label06;

     label05:
        $r37 := @caughtexception;

     label06:
        i2 = i2 + 1;

        goto label02;

     label07:
        r39 = virtualinvoke r39.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label01;

     label08:
        $r9 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i3 = lengthof $r10;

        i4 = 0;

     label09:
        if i4 >= i3 goto label16;

        r41 = $r10[i4];

        $r11 = virtualinvoke r41.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r11;

        if $i0 != 0 goto label15;

        $r12 = virtualinvoke r41.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z1 != 0 goto label10;

        $r30 = virtualinvoke r41.<java.lang.reflect.Method: java.lang.String getName()>();

        $z3 = virtualinvoke $r30.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z3 == 0 goto label15;

     label10:
        $r13 = virtualinvoke r41.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z2 == 0 goto label11;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        $r27 = virtualinvoke r41.<java.lang.reflect.Method: java.lang.String getName()>();

        $r28 = virtualinvoke $r27.<java.lang.String: java.lang.String substring(int)>(3);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        r42 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label12;

     label11:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        $r16 = virtualinvoke r41.<java.lang.reflect.Method: java.lang.String getName()>();

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String substring(int)>(2);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r42 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label12:
        $r19 = newarray (java.lang.Class)[1];

        $r20 = virtualinvoke r41.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r19[0] = $r20;

        $r21 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r42, $r19);

        $r22 = newarray (java.lang.Object)[1];

        $r23 = newarray (java.lang.Object)[0];

        $r24 = virtualinvoke r41.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r8, $r23);

        $r22[0] = $r24;

        virtualinvoke $r21.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r22);

     label13:
        goto label15;

     label14:
        $r36 := @caughtexception;

     label15:
        i4 = i4 + 1;

        goto label09;

     label16:
        return r7;

        catch java.lang.NoSuchFieldException from label03 to label04 with label05;
        catch java.lang.Exception from label10 to label13 with label14;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        <org.apache.cxf.interceptor.ClientFaultConverter: java.lang.String DISABLE_FAULT_MAPPING> = "disable-fault-mapping";

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getLogger(java.lang.Class)>(class "Lorg/apache/cxf/interceptor/ClientFaultConverter;");

        <org.apache.cxf.interceptor.ClientFaultConverter: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
