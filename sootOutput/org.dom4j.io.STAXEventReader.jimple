public class org.dom4j.io.STAXEventReader extends java.lang.Object
{
    private org.dom4j.DocumentFactory factory;
    private javax.xml.stream.XMLInputFactory inputFactory;

    public void <init>()
    {
        org.dom4j.io.STAXEventReader r0;
        javax.xml.stream.XMLInputFactory $r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventReader: javax.xml.stream.XMLInputFactory inputFactory> = $r1;

        $r2 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory> = $r2;

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.STAXEventReader r0;
        javax.xml.stream.XMLInputFactory $r1;
        org.dom4j.DocumentFactory r2, $r3;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r2 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventReader: javax.xml.stream.XMLInputFactory inputFactory> = $r1;

        if r2 == null goto label1;

        r0.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory> = r2;

        goto label2;

     label1:
        $r3 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory> = $r3;

     label2:
        return;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.STAXEventReader r1;
        org.dom4j.DocumentFactory r0, $r2;

        r1 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: org.dom4j.DocumentFactory;

        if r0 == null goto label1;

        r1.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory> = r0;

        goto label2;

     label1:
        $r2 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r1.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory> = $r2;

     label2:
        return;
    }

    public org.dom4j.Document readDocument(java.io.InputStream) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.Document $r2;
        org.dom4j.io.STAXEventReader r0;
        java.io.InputStream r1;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r1 := @parameter0: java.io.InputStream;

        $r2 = virtualinvoke r0.<org.dom4j.io.STAXEventReader: org.dom4j.Document readDocument(java.io.InputStream,java.lang.String)>(r1, null);

        return $r2;
    }

    public org.dom4j.Document readDocument(java.io.Reader) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.Document $r2;
        java.io.Reader r1;
        org.dom4j.io.STAXEventReader r0;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r1 := @parameter0: java.io.Reader;

        $r2 = virtualinvoke r0.<org.dom4j.io.STAXEventReader: org.dom4j.Document readDocument(java.io.Reader,java.lang.String)>(r1, null);

        return $r2;
    }

    public org.dom4j.Document readDocument(java.io.InputStream, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r6;
        javax.xml.stream.XMLEventReader $r4;
        org.dom4j.Document $r5;
        org.dom4j.io.STAXEventReader r0;
        javax.xml.stream.XMLInputFactory $r3;
        java.lang.String r1;
        java.io.InputStream r2;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r2 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<org.dom4j.io.STAXEventReader: javax.xml.stream.XMLInputFactory inputFactory>;

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLEventReader createXMLEventReader(java.lang.String,java.io.InputStream)>(r1, r2);

     label1:
        $r5 = virtualinvoke r0.<org.dom4j.io.STAXEventReader: org.dom4j.Document readDocument(javax.xml.stream.XMLEventReader)>($r4);

     label2:
        interfaceinvoke $r4.<javax.xml.stream.XMLEventReader: void close()>();

        return $r5;

     label3:
        $r6 := @caughtexception;

     label4:
        interfaceinvoke $r4.<javax.xml.stream.XMLEventReader: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.dom4j.Document readDocument(java.io.Reader, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r6;
        javax.xml.stream.XMLEventReader $r4;
        org.dom4j.Document $r5;
        org.dom4j.io.STAXEventReader r0;
        javax.xml.stream.XMLInputFactory $r3;
        java.lang.String r1;
        java.io.Reader r2;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r2 := @parameter0: java.io.Reader;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<org.dom4j.io.STAXEventReader: javax.xml.stream.XMLInputFactory inputFactory>;

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLEventReader createXMLEventReader(java.lang.String,java.io.Reader)>(r1, r2);

     label1:
        $r5 = virtualinvoke r0.<org.dom4j.io.STAXEventReader: org.dom4j.Document readDocument(javax.xml.stream.XMLEventReader)>($r4);

     label2:
        interfaceinvoke $r4.<javax.xml.stream.XMLEventReader: void close()>();

        return $r5;

     label3:
        $r6 := @caughtexception;

     label4:
        interfaceinvoke $r4.<javax.xml.stream.XMLEventReader: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.dom4j.Node readNode(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.Document $r12;
        org.dom4j.Entity $r10;
        javax.xml.stream.events.XMLEvent $r1;
        java.lang.StringBuffer $r3, $r4, $r5;
        javax.xml.stream.XMLStreamException $r2;
        java.lang.String $r6;
        org.dom4j.ProcessingInstruction $r11;
        org.dom4j.CharacterData $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        javax.xml.stream.XMLEventReader r0;
        org.dom4j.Namespace $r8;
        org.dom4j.io.STAXEventReader r7;
        org.dom4j.Element $r14;
        org.dom4j.Attribute $r9;

        r7 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r7.<org.dom4j.io.STAXEventReader: org.dom4j.Element readElement(javax.xml.stream.XMLEventReader)>(r0);

        return $r14;

     label1:
        $z1 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isCharacters()>();

        if $z1 == 0 goto label2;

        $r13 = virtualinvoke r7.<org.dom4j.io.STAXEventReader: org.dom4j.CharacterData readCharacters(javax.xml.stream.XMLEventReader)>(r0);

        return $r13;

     label2:
        $z2 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartDocument()>();

        if $z2 == 0 goto label3;

        $r12 = virtualinvoke r7.<org.dom4j.io.STAXEventReader: org.dom4j.Document readDocument(javax.xml.stream.XMLEventReader)>(r0);

        return $r12;

     label3:
        $z3 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isProcessingInstruction()>();

        if $z3 == 0 goto label4;

        $r11 = virtualinvoke r7.<org.dom4j.io.STAXEventReader: org.dom4j.ProcessingInstruction readProcessingInstruction(javax.xml.stream.XMLEventReader)>(r0);

        return $r11;

     label4:
        $z4 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isEntityReference()>();

        if $z4 == 0 goto label5;

        $r10 = virtualinvoke r7.<org.dom4j.io.STAXEventReader: org.dom4j.Entity readEntityReference(javax.xml.stream.XMLEventReader)>(r0);

        return $r10;

     label5:
        $z5 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isAttribute()>();

        if $z5 == 0 goto label6;

        $r9 = virtualinvoke r7.<org.dom4j.io.STAXEventReader: org.dom4j.Attribute readAttribute(javax.xml.stream.XMLEventReader)>(r0);

        return $r9;

     label6:
        $z6 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isNamespace()>();

        if $z6 == 0 goto label7;

        $r8 = virtualinvoke r7.<org.dom4j.io.STAXEventReader: org.dom4j.Namespace readNamespace(javax.xml.stream.XMLEventReader)>(r0);

        return $r8;

     label7:
        $r2 = new javax.xml.stream.XMLStreamException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported event: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public org.dom4j.Document readDocument(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.Document r12;
        org.dom4j.Node $r10;
        org.dom4j.DocumentFactory $r7, $r9, $r11;
        javax.xml.stream.events.XMLEvent $r1, $r2;
        javax.xml.stream.XMLStreamException $r4;
        int $i0;
        java.lang.String $r8;
        boolean $z0, $z1;
        javax.xml.stream.XMLEventReader r0;
        javax.xml.stream.events.StartDocument r3;
        org.dom4j.io.STAXEventReader r6;
        javax.xml.stream.Location $r5;

        r6 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        r12 = null;

     label1:
        $z0 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $i0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: int getEventType()>();

        tableswitch($i0)
        {
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label5;
            case 7: goto label2;
            case 8: goto label5;
            default: goto label6;
        };

     label2:
        $r2 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        r3 = (javax.xml.stream.events.StartDocument) $r2;

        if r12 != null goto label4;

        $z1 = interfaceinvoke r3.<javax.xml.stream.events.StartDocument: boolean encodingSet()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r3.<javax.xml.stream.events.StartDocument: java.lang.String getCharacterEncodingScheme()>();

        $r9 = r6.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        r12 = virtualinvoke $r9.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument(java.lang.String)>($r8);

        goto label8;

     label3:
        $r7 = r6.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        r12 = virtualinvoke $r7.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        goto label8;

     label4:
        $r4 = new javax.xml.stream.XMLStreamException;

        $r5 = interfaceinvoke r3.<javax.xml.stream.events.StartDocument: javax.xml.stream.Location getLocation()>();

        specialinvoke $r4.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>("Unexpected StartDocument event", $r5);

        throw $r4;

     label5:
        interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        goto label8;

     label6:
        if r12 != null goto label7;

        $r11 = r6.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        r12 = virtualinvoke $r11.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

     label7:
        $r10 = virtualinvoke r6.<org.dom4j.io.STAXEventReader: org.dom4j.Node readNode(javax.xml.stream.XMLEventReader)>(r0);

        interfaceinvoke r12.<org.dom4j.Document: void add(org.dom4j.Node)>($r10);

     label8:
        goto label1;

     label9:
        return r12;
    }

    public org.dom4j.Element readElement(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.Node $r12;
        javax.xml.stream.events.XMLEvent $r1, $r7, $r11, $r13;
        java.lang.StringBuffer $r3, $r4, $r5, $r18, $r19, $r21, $r22, $r24;
        javax.xml.stream.XMLStreamException $r2, $r17, $r26;
        javax.xml.stream.events.EndElement $r14;
        java.lang.String $r6, $r25;
        javax.xml.stream.events.StartElement $r8;
        boolean $z0, $z1, $z2, $z3;
        javax.xml.stream.XMLEventReader r0;
        org.dom4j.io.STAXEventReader r9;
        org.dom4j.Element $r10;
        javax.xml.namespace.QName $r15, $r16, $r20, $r23;

        r9 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        $r8 = interfaceinvoke $r7.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        $r10 = virtualinvoke r9.<org.dom4j.io.STAXEventReader: org.dom4j.Element createElement(javax.xml.stream.events.StartElement)>($r8);

     label1:
        $z1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $r26 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r26.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>("Unexpected end of stream while reading element content");

        throw $r26;

     label2:
        $r11 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z2 = interfaceinvoke $r11.<javax.xml.stream.events.XMLEvent: boolean isEndElement()>();

        if $z2 == 0 goto label3;

        $r13 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        $r14 = interfaceinvoke $r13.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.EndElement asEndElement()>();

        $r15 = interfaceinvoke $r14.<javax.xml.stream.events.EndElement: javax.xml.namespace.QName getName()>();

        $r16 = interfaceinvoke $r8.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        $z3 = virtualinvoke $r15.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>($r16);

        if $z3 != 0 goto label4;

        $r17 = new javax.xml.stream.XMLStreamException;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected ");

        $r20 = interfaceinvoke $r8.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" end-tag, but found");

        $r23 = interfaceinvoke $r14.<javax.xml.stream.events.EndElement: javax.xml.namespace.QName getName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r25);

        throw $r17;

     label3:
        $r12 = virtualinvoke r9.<org.dom4j.io.STAXEventReader: org.dom4j.Node readNode(javax.xml.stream.XMLEventReader)>(r0);

        interfaceinvoke $r10.<org.dom4j.Element: void add(org.dom4j.Node)>($r12);

        goto label1;

     label4:
        return $r10;

     label5:
        $r2 = new javax.xml.stream.XMLStreamException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected Element event, found: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public org.dom4j.Attribute readAttribute(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r0;
        javax.xml.stream.events.Attribute r8;
        javax.xml.stream.events.XMLEvent $r1, $r7;
        org.dom4j.io.STAXEventReader r9;
        java.lang.StringBuffer $r3, $r4, $r5;
        javax.xml.stream.XMLStreamException $r2;
        java.lang.String $r6;
        org.dom4j.Attribute $r10;
        boolean $z0;

        r9 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isAttribute()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        r8 = (javax.xml.stream.events.Attribute) $r7;

        $r10 = virtualinvoke r9.<org.dom4j.io.STAXEventReader: org.dom4j.Attribute createAttribute(org.dom4j.Element,javax.xml.stream.events.Attribute)>(null, r8);

        return $r10;

     label1:
        $r2 = new javax.xml.stream.XMLStreamException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected Attribute event, found: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public org.dom4j.Namespace readNamespace(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r0;
        org.dom4j.Namespace $r10;
        javax.xml.stream.events.XMLEvent $r1, $r7;
        javax.xml.stream.events.Namespace r8;
        org.dom4j.io.STAXEventReader r9;
        java.lang.StringBuffer $r3, $r4, $r5;
        javax.xml.stream.XMLStreamException $r2;
        java.lang.String $r6;
        boolean $z0;

        r9 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isNamespace()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        r8 = (javax.xml.stream.events.Namespace) $r7;

        $r10 = virtualinvoke r9.<org.dom4j.io.STAXEventReader: org.dom4j.Namespace createNamespace(javax.xml.stream.events.Namespace)>(r8);

        return $r10;

     label1:
        $r2 = new javax.xml.stream.XMLStreamException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected Namespace event, found: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public org.dom4j.CharacterData readCharacters(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r0;
        javax.xml.stream.events.XMLEvent $r1, $r7;
        org.dom4j.io.STAXEventReader r9;
        java.lang.StringBuffer $r3, $r4, $r5;
        javax.xml.stream.events.Characters $r8;
        javax.xml.stream.XMLStreamException $r2;
        java.lang.String $r6;
        org.dom4j.CharacterData $r10;
        boolean $z0;

        r9 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isCharacters()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        $r8 = interfaceinvoke $r7.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.Characters asCharacters()>();

        $r10 = virtualinvoke r9.<org.dom4j.io.STAXEventReader: org.dom4j.CharacterData createCharacterData(javax.xml.stream.events.Characters)>($r8);

        return $r10;

     label1:
        $r2 = new javax.xml.stream.XMLStreamException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected Characters event, found: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public org.dom4j.Comment readComment(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r0;
        javax.xml.stream.events.XMLEvent $r1, $r8;
        org.dom4j.io.STAXEventReader r7;
        java.lang.StringBuffer $r3, $r4, $r5;
        javax.xml.stream.events.Comment $r9;
        javax.xml.stream.XMLStreamException $r2;
        org.dom4j.Comment $r10;
        java.lang.String $r6;
        boolean $z0;

        r7 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z0 = $r1 instanceof javax.xml.stream.events.Comment;

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        $r9 = (javax.xml.stream.events.Comment) $r8;

        $r10 = virtualinvoke r7.<org.dom4j.io.STAXEventReader: org.dom4j.Comment createComment(javax.xml.stream.events.Comment)>($r9);

        return $r10;

     label1:
        $r2 = new javax.xml.stream.XMLStreamException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected Comment event, found: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public org.dom4j.Entity readEntityReference(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r0;
        org.dom4j.Entity $r10;
        javax.xml.stream.events.XMLEvent $r1, $r7;
        org.dom4j.io.STAXEventReader r9;
        java.lang.StringBuffer $r3, $r4, $r5;
        javax.xml.stream.XMLStreamException $r2;
        java.lang.String $r6;
        javax.xml.stream.events.EntityReference r8;
        boolean $z0;

        r9 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isEntityReference()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        r8 = (javax.xml.stream.events.EntityReference) $r7;

        $r10 = virtualinvoke r9.<org.dom4j.io.STAXEventReader: org.dom4j.Entity createEntity(javax.xml.stream.events.EntityReference)>(r8);

        return $r10;

     label1:
        $r2 = new javax.xml.stream.XMLStreamException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected EntityRef event, found: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public org.dom4j.ProcessingInstruction readProcessingInstruction(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r0;
        javax.xml.stream.events.ProcessingInstruction r8;
        javax.xml.stream.events.XMLEvent $r1, $r7;
        org.dom4j.io.STAXEventReader r9;
        java.lang.StringBuffer $r3, $r4, $r5;
        javax.xml.stream.XMLStreamException $r2;
        java.lang.String $r6;
        org.dom4j.ProcessingInstruction $r10;
        boolean $z0;

        r9 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: boolean isProcessingInstruction()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent nextEvent()>();

        r8 = (javax.xml.stream.events.ProcessingInstruction) $r7;

        $r10 = virtualinvoke r9.<org.dom4j.io.STAXEventReader: org.dom4j.ProcessingInstruction createProcessingInstruction(javax.xml.stream.events.ProcessingInstruction)>(r8);

        return $r10;

     label1:
        $r2 = new javax.xml.stream.XMLStreamException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected PI event, found: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public org.dom4j.Element createElement(javax.xml.stream.events.StartElement)
    {
        org.dom4j.DocumentFactory $r4;
        javax.xml.stream.events.Attribute r15;
        javax.xml.stream.events.StartElement r0;
        java.lang.String $r9, $r10, $r14;
        boolean $z0, $z1;
        java.util.Iterator $r6, $r7;
        javax.xml.stream.events.Namespace r16;
        org.dom4j.io.STAXEventReader r2;
        org.dom4j.QName $r3, $r13;
        org.dom4j.Element $r5;
        java.lang.Object $r8, $r11;
        javax.xml.namespace.QName $r1, $r12;

        r2 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.events.StartElement;

        $r1 = interfaceinvoke r0.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        $r3 = virtualinvoke r2.<org.dom4j.io.STAXEventReader: org.dom4j.QName createQName(javax.xml.namespace.QName)>($r1);

        $r4 = r2.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        $r5 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r3);

        $r6 = interfaceinvoke r0.<javax.xml.stream.events.StartElement: java.util.Iterator getAttributes()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r15 = (javax.xml.stream.events.Attribute) $r11;

        $r12 = interfaceinvoke r15.<javax.xml.stream.events.Attribute: javax.xml.namespace.QName getName()>();

        $r13 = virtualinvoke r2.<org.dom4j.io.STAXEventReader: org.dom4j.QName createQName(javax.xml.namespace.QName)>($r12);

        $r14 = interfaceinvoke r15.<javax.xml.stream.events.Attribute: java.lang.String getValue()>();

        interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r13, $r14);

        goto label1;

     label2:
        $r7 = interfaceinvoke r0.<javax.xml.stream.events.StartElement: java.util.Iterator getNamespaces()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r16 = (javax.xml.stream.events.Namespace) $r8;

        $r9 = interfaceinvoke r16.<javax.xml.stream.events.Namespace: java.lang.String getPrefix()>();

        $r10 = interfaceinvoke r16.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element addNamespace(java.lang.String,java.lang.String)>($r9, $r10);

        goto label3;

     label4:
        return $r5;
    }

    public org.dom4j.Attribute createAttribute(org.dom4j.Element, javax.xml.stream.events.Attribute)
    {
        org.dom4j.DocumentFactory $r3;
        javax.xml.stream.events.Attribute r2;
        org.dom4j.io.STAXEventReader r0;
        org.dom4j.Element r1;
        org.dom4j.QName $r5;
        javax.xml.namespace.QName $r4;
        java.lang.String $r6;
        org.dom4j.Attribute $r7;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r1 := @parameter0: org.dom4j.Element;

        r2 := @parameter1: javax.xml.stream.events.Attribute;

        $r3 = r0.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        $r4 = interfaceinvoke r2.<javax.xml.stream.events.Attribute: javax.xml.namespace.QName getName()>();

        $r5 = virtualinvoke r0.<org.dom4j.io.STAXEventReader: org.dom4j.QName createQName(javax.xml.namespace.QName)>($r4);

        $r6 = interfaceinvoke r2.<javax.xml.stream.events.Attribute: java.lang.String getValue()>();

        $r7 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)>(r1, $r5, $r6);

        return $r7;
    }

    public org.dom4j.Namespace createNamespace(javax.xml.stream.events.Namespace)
    {
        javax.xml.stream.events.Namespace r1;
        org.dom4j.io.STAXEventReader r0;
        org.dom4j.Namespace $r5;
        java.lang.String $r3, $r4;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r1 := @parameter0: javax.xml.stream.events.Namespace;

        $r2 = r0.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        $r3 = interfaceinvoke r1.<javax.xml.stream.events.Namespace: java.lang.String getPrefix()>();

        $r4 = interfaceinvoke r1.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        $r5 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r3, $r4);

        return $r5;
    }

    public org.dom4j.CharacterData createCharacterData(javax.xml.stream.events.Characters)
    {
        org.dom4j.Text $r4;
        org.dom4j.DocumentFactory $r3, $r5;
        org.dom4j.io.STAXEventReader r2;
        javax.xml.stream.events.Characters r0;
        org.dom4j.CDATA $r6;
        java.lang.String $r1;
        boolean $z0;

        r2 := @this: org.dom4j.io.STAXEventReader;

        r0 := @parameter0: javax.xml.stream.events.Characters;

        $r1 = interfaceinvoke r0.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        $z0 = interfaceinvoke r0.<javax.xml.stream.events.Characters: boolean isCData()>();

        if $z0 == 0 goto label1;

        $r5 = r2.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        $r6 = virtualinvoke $r5.<org.dom4j.DocumentFactory: org.dom4j.CDATA createCDATA(java.lang.String)>($r1);

        return $r6;

     label1:
        $r3 = r2.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Text createText(java.lang.String)>($r1);

        return $r4;
    }

    public org.dom4j.Comment createComment(javax.xml.stream.events.Comment)
    {
        org.dom4j.io.STAXEventReader r0;
        javax.xml.stream.events.Comment r1;
        org.dom4j.Comment $r4;
        java.lang.String $r3;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r1 := @parameter0: javax.xml.stream.events.Comment;

        $r2 = r0.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        $r3 = interfaceinvoke r1.<javax.xml.stream.events.Comment: java.lang.String getText()>();

        $r4 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Comment createComment(java.lang.String)>($r3);

        return $r4;
    }

    public org.dom4j.Entity createEntity(javax.xml.stream.events.EntityReference)
    {
        org.dom4j.Entity $r6;
        javax.xml.stream.events.EntityDeclaration $r4;
        org.dom4j.io.STAXEventReader r0;
        java.lang.String $r3, $r5;
        javax.xml.stream.events.EntityReference r1;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r1 := @parameter0: javax.xml.stream.events.EntityReference;

        $r2 = r0.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        $r3 = interfaceinvoke r1.<javax.xml.stream.events.EntityReference: java.lang.String getName()>();

        $r4 = interfaceinvoke r1.<javax.xml.stream.events.EntityReference: javax.xml.stream.events.EntityDeclaration getDeclaration()>();

        $r5 = interfaceinvoke $r4.<javax.xml.stream.events.EntityDeclaration: java.lang.String getReplacementText()>();

        $r6 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Entity createEntity(java.lang.String,java.lang.String)>($r3, $r5);

        return $r6;
    }

    public org.dom4j.ProcessingInstruction createProcessingInstruction(javax.xml.stream.events.ProcessingInstruction)
    {
        javax.xml.stream.events.ProcessingInstruction r1;
        org.dom4j.io.STAXEventReader r0;
        java.lang.String $r3, $r4;
        org.dom4j.ProcessingInstruction $r5;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r1 := @parameter0: javax.xml.stream.events.ProcessingInstruction;

        $r2 = r0.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        $r3 = interfaceinvoke r1.<javax.xml.stream.events.ProcessingInstruction: java.lang.String getTarget()>();

        $r4 = interfaceinvoke r1.<javax.xml.stream.events.ProcessingInstruction: java.lang.String getData()>();

        $r5 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r3, $r4);

        return $r5;
    }

    public org.dom4j.QName createQName(javax.xml.namespace.QName)
    {
        org.dom4j.io.STAXEventReader r0;
        org.dom4j.QName $r6;
        javax.xml.namespace.QName r1;
        java.lang.String $r3, $r4, $r5;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventReader;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = r0.<org.dom4j.io.STAXEventReader: org.dom4j.DocumentFactory factory>;

        $r3 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r4 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $r5 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r6 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r5);

        return $r6;
    }
}
