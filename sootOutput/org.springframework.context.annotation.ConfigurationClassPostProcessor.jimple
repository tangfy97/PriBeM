public class org.springframework.context.'annotation'.ConfigurationClassPostProcessor extends java.lang.Object implements org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware
{
    private static final boolean cglibAvailable;
    private final org.apache.commons.logging.Log logger;
    private org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor;
    private org.springframework.beans.factory.parsing.ProblemReporter problemReporter;
    private java.lang.ClassLoader beanClassLoader;
    private org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory;
    private boolean setMetadataReaderFactoryCalled;
    private final java.util.Set registriesPostProcessed;
    private final java.util.Set factoriesPostProcessed;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        boolean $z0;

        $r0 = class "Lorg/springframework/context/annotation/ConfigurationClassPostProcessor;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("net.sf.cglib.proxy.Enhancer", $r1);

        <org.springframework.context.'annotation'.ConfigurationClassPostProcessor: boolean cglibAvailable> = $z0;

        return;
    }

    public void <init>()
    {
        org.springframework.beans.factory.parsing.PassThroughSourceExtractor $r3;
        org.springframework.core.type.classreading.CachingMetadataReaderFactory $r6;
        java.util.HashSet $r7, $r8;
        org.springframework.beans.factory.parsing.FailFastProblemReporter $r4;
        org.springframework.context.'annotation'.ConfigurationClassPostProcessor r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.ClassLoader $r5;

        r0 := @this: org.springframework.context.'annotation'.ConfigurationClassPostProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new org.springframework.beans.factory.parsing.PassThroughSourceExtractor;

        specialinvoke $r3.<org.springframework.beans.factory.parsing.PassThroughSourceExtractor: void <init>()>();

        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor> = $r3;

        $r4 = new org.springframework.beans.factory.parsing.FailFastProblemReporter;

        specialinvoke $r4.<org.springframework.beans.factory.parsing.FailFastProblemReporter: void <init>()>();

        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.beans.factory.parsing.ProblemReporter problemReporter> = $r4;

        $r5 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.lang.ClassLoader beanClassLoader> = $r5;

        $r6 = new org.springframework.core.type.classreading.CachingMetadataReaderFactory;

        specialinvoke $r6.<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void <init>()>();

        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory> = $r6;

        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: boolean setMetadataReaderFactoryCalled> = 0;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.util.Set registriesPostProcessed> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.util.Set factoriesPostProcessed> = $r8;

        return;
    }

    public void setSourceExtractor(org.springframework.beans.factory.parsing.SourceExtractor)
    {
        org.springframework.context.'annotation'.ConfigurationClassPostProcessor r0;
        org.springframework.beans.factory.parsing.SourceExtractor r1, $r2;
        org.springframework.beans.factory.parsing.PassThroughSourceExtractor $r3;

        r0 := @this: org.springframework.context.'annotation'.ConfigurationClassPostProcessor;

        r1 := @parameter0: org.springframework.beans.factory.parsing.SourceExtractor;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.beans.factory.parsing.PassThroughSourceExtractor;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.beans.factory.parsing.PassThroughSourceExtractor: void <init>()>();

     label2:
        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor> = $r2;

        return;
    }

    public void setProblemReporter(org.springframework.beans.factory.parsing.ProblemReporter)
    {
        org.springframework.beans.factory.parsing.FailFastProblemReporter $r3;
        org.springframework.context.'annotation'.ConfigurationClassPostProcessor r0;
        org.springframework.beans.factory.parsing.ProblemReporter r1, $r2;

        r0 := @this: org.springframework.context.'annotation'.ConfigurationClassPostProcessor;

        r1 := @parameter0: org.springframework.beans.factory.parsing.ProblemReporter;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.beans.factory.parsing.FailFastProblemReporter;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.beans.factory.parsing.FailFastProblemReporter: void <init>()>();

     label2:
        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.beans.factory.parsing.ProblemReporter problemReporter> = $r2;

        return;
    }

    public void setMetadataReaderFactory(org.springframework.core.type.classreading.MetadataReaderFactory)
    {
        org.springframework.context.'annotation'.ConfigurationClassPostProcessor r1;
        org.springframework.core.type.classreading.MetadataReaderFactory r0;

        r1 := @this: org.springframework.context.'annotation'.ConfigurationClassPostProcessor;

        r0 := @parameter0: org.springframework.core.type.classreading.MetadataReaderFactory;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "MetadataReaderFactory must not be null");

        r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory> = r0;

        r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: boolean setMetadataReaderFactoryCalled> = 1;

        return;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        org.springframework.context.'annotation'.ConfigurationClassPostProcessor r0;
        org.springframework.core.type.classreading.CachingMetadataReaderFactory $r2;
        java.lang.ClassLoader r1;
        boolean $z0;

        r0 := @this: org.springframework.context.'annotation'.ConfigurationClassPostProcessor;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.lang.ClassLoader beanClassLoader> = r1;

        $z0 = r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: boolean setMetadataReaderFactoryCalled>;

        if $z0 != 0 goto label1;

        $r2 = new org.springframework.core.type.classreading.CachingMetadataReaderFactory;

        specialinvoke $r2.<org.springframework.core.type.classreading.CachingMetadataReaderFactory: void <init>(java.lang.ClassLoader)>(r1);

        r0.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory> = $r2;

     label1:
        return;
    }

    public int getOrder()
    {
        org.springframework.context.'annotation'.ConfigurationClassPostProcessor r0;

        r0 := @this: org.springframework.context.'annotation'.ConfigurationClassPostProcessor;

        return -2147483648;
    }

    public void postProcessBeanDefinitionRegistry(org.springframework.beans.factory.support.BeanDefinitionRegistry)
    {
        java.lang.IllegalStateException $r8, $r12;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r0;
        java.lang.Integer $r3, $r5, $r7;
        int $i0;
        java.lang.String $r11, $r15;
        boolean $z0, $z1;
        java.util.Set $r2, $r4, $r6;
        org.springframework.context.'annotation'.ConfigurationClassPostProcessor r1;
        java.lang.StringBuilder $r9, $r10, $r13, $r14;

        r1 := @this: org.springframework.context.'annotation'.ConfigurationClassPostProcessor;

        r0 := @parameter0: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r2 = r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.util.Set registriesPostProcessed>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("postProcessBeanDefinitionRegistry already called for this post-processor against ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r12;

     label1:
        $r4 = r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.util.Set factoriesPostProcessed>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("postProcessBeanFactory already called for this post-processor against ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label2:
        $r6 = r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.util.Set registriesPostProcessed>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r7);

        virtualinvoke r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: void processConfigBeanDefinitions(org.springframework.beans.factory.support.BeanDefinitionRegistry)>(r0);

        return;
    }

    public void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    {
        java.lang.IllegalStateException $r9;
        java.lang.Integer $r3, $r5, $r7;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r8;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r0;
        int $i0;
        java.lang.String $r12;
        boolean $z0, $z1;
        java.util.Set $r2, $r4, $r6;
        org.springframework.context.'annotation'.ConfigurationClassPostProcessor r1;
        java.lang.StringBuilder $r10, $r11;

        r1 := @this: org.springframework.context.'annotation'.ConfigurationClassPostProcessor;

        r0 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r2 = r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.util.Set factoriesPostProcessed>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("postProcessBeanFactory already called for this post-processor against ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label1:
        $r4 = r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.util.Set factoriesPostProcessed>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $r6 = r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.util.Set registriesPostProcessed>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z1 != 0 goto label2;

        $r8 = (org.springframework.beans.factory.support.BeanDefinitionRegistry) r0;

        virtualinvoke r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: void processConfigBeanDefinitions(org.springframework.beans.factory.support.BeanDefinitionRegistry)>($r8);

     label2:
        virtualinvoke r1.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: void enhanceConfigurationClasses(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)>(r0);

        return;
    }

    public void processConfigBeanDefinitions(org.springframework.beans.factory.support.BeanDefinitionRegistry)
    {
        org.springframework.beans.factory.parsing.SourceExtractor $r22;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r15, $r16;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r23;
        java.lang.StringBuilder $r26, $r28;
        java.lang.String[] $r2;
        org.springframework.beans.factory.parsing.ProblemReporter $r8, $r21;
        org.springframework.beans.factory.config.BeanDefinitionHolder $r6, r31;
        org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader $r19;
        int i0, i1;
        org.springframework.beans.factory.config.BeanDefinition $r3, $r12;
        java.lang.String $r13, $r14, $r18, $r27, $r29, r30;
        java.util.LinkedHashSet $r0;
        org.springframework.context.'annotation'.ConfigurationClassParser $r7;
        java.util.Iterator $r10;
        java.io.IOException $r24;
        org.springframework.beans.factory.BeanDefinitionStoreException $r25;
        org.springframework.context.'annotation'.ConfigurationClassPostProcessor r4;
        org.springframework.core.type.classreading.MetadataReaderFactory $r5, $r9, $r20;
        java.lang.Object $r11;
        java.lang.Class $r17;

        r4 := @this: org.springframework.context.'annotation'.ConfigurationClassPostProcessor;

        r1 := @parameter0: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionRegistry: java.lang.String[] getBeanDefinitionNames()>();

        i0 = lengthof $r2;

        i1 = 0;

        goto label03;

     label01:
        r30 = $r2[i1];

        $r3 = interfaceinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionRegistry: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>(r30);

        $r5 = r4.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory>;

        $z0 = staticinvoke <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: boolean checkConfigurationClassCandidate(org.springframework.beans.factory.config.BeanDefinition,org.springframework.core.type.classreading.MetadataReaderFactory)>($r3, $r5);

        if $z0 == 0 goto label02;

        $r6 = new org.springframework.beans.factory.config.BeanDefinitionHolder;

        specialinvoke $r6.<org.springframework.beans.factory.config.BeanDefinitionHolder: void <init>(org.springframework.beans.factory.config.BeanDefinition,java.lang.String)>($r3, r30);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label02:
        i1 = i1 + 1;

     label03:
        if i1 < i0 goto label01;

        $z1 = interfaceinvoke $r0.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label04;

        return;

     label04:
        $r7 = new org.springframework.context.'annotation'.ConfigurationClassParser;

        $r9 = r4.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory>;

        $r8 = r4.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.beans.factory.parsing.ProblemReporter problemReporter>;

        specialinvoke $r7.<org.springframework.context.'annotation'.ConfigurationClassParser: void <init>(org.springframework.core.type.classreading.MetadataReaderFactory,org.springframework.beans.factory.parsing.ProblemReporter)>($r9, $r8);

        $r10 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

        goto label10;

     label05:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.springframework.beans.factory.config.BeanDefinitionHolder) $r11;

        $r12 = virtualinvoke r31.<org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>();

     label06:
        $z2 = $r12 instanceof org.springframework.beans.factory.support.AbstractBeanDefinition;

        if $z2 == 0 goto label07;

        $r15 = (org.springframework.beans.factory.support.AbstractBeanDefinition) $r12;

        $z3 = virtualinvoke $r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean hasBeanClass()>();

        if $z3 == 0 goto label07;

        $r16 = (org.springframework.beans.factory.support.AbstractBeanDefinition) $r12;

        $r17 = virtualinvoke $r16.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class getBeanClass()>();

        $r18 = virtualinvoke r31.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>();

        virtualinvoke $r7.<org.springframework.context.'annotation'.ConfigurationClassParser: void parse(java.lang.Class,java.lang.String)>($r17, $r18);

        goto label10;

     label07:
        $r13 = interfaceinvoke $r12.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        $r14 = virtualinvoke r31.<org.springframework.beans.factory.config.BeanDefinitionHolder: java.lang.String getBeanName()>();

        virtualinvoke $r7.<org.springframework.context.'annotation'.ConfigurationClassParser: void parse(java.lang.String,java.lang.String)>($r13, $r14);

     label08:
        goto label10;

     label09:
        $r24 := @caughtexception;

        $r25 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to load bean class: ");

        $r27 = interfaceinvoke $r12.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r24);

        throw $r25;

     label10:
        $z4 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label05;

        virtualinvoke $r7.<org.springframework.context.'annotation'.ConfigurationClassParser: void validate()>();

        $r19 = new org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader;

        $r22 = r4.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor>;

        $r21 = r4.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.beans.factory.parsing.ProblemReporter problemReporter>;

        $r20 = r4.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory>;

        specialinvoke $r19.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,org.springframework.beans.factory.parsing.SourceExtractor,org.springframework.beans.factory.parsing.ProblemReporter,org.springframework.core.type.classreading.MetadataReaderFactory)>(r1, $r22, $r21, $r20);

        $r23 = virtualinvoke $r7.<org.springframework.context.'annotation'.ConfigurationClassParser: java.util.Set getConfigurationClasses()>();

        virtualinvoke $r19.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: void loadBeanDefinitions(java.util.Set)>($r23);

        return;

        catch java.io.IOException from label06 to label08 with label09;
    }

    public void enhanceConfigurationClasses(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    {
        java.lang.IllegalStateException $r26, $r32;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r4, r39;
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory r1;
        org.springframework.context.'annotation'.ConfigurationClassEnhancer $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r11, $r28;
        java.lang.StringBuilder $r6, $r7, $r8, $r27, $r29, $r33, $r35;
        java.lang.ClassLoader $r16;
        java.lang.Throwable $r31;
        java.lang.Object[] $r20;
        java.lang.String[] $r2;
        java.util.LinkedHashMap $r0;
        int i0, i1;
        org.springframework.beans.factory.config.BeanDefinition $r3;
        java.lang.String $r9, $r23, $r24, $r25, $r30, $r34, $r36, r37;
        java.util.Map$Entry r38;
        java.util.Iterator $r12;
        org.springframework.beans.factory.BeanDefinitionStoreException $r5;
        org.springframework.context.'annotation'.ConfigurationClassPostProcessor r15;
        java.lang.Object $r13, $r14, $r22;
        java.lang.Class $r17, $r18;
        org.apache.commons.logging.Log $r19, $r21;

        r15 := @this: org.springframework.context.'annotation'.ConfigurationClassPostProcessor;

        r1 := @parameter0: org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: java.lang.String[] getBeanDefinitionNames()>();

        i0 = lengthof $r2;

        i1 = 0;

        goto label04;

     label01:
        r37 = $r2[i1];

        $r3 = interfaceinvoke r1.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>(r37);

        $z0 = staticinvoke <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: boolean isFullConfigurationClass(org.springframework.beans.factory.config.BeanDefinition)>($r3);

        if $z0 == 0 goto label03;

        $z1 = $r3 instanceof org.springframework.beans.factory.support.AbstractBeanDefinition;

        if $z1 != 0 goto label02;

        $r5 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot enhance @Configuration bean definition \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' since it is not stored in an AbstractBeanDefinition subclass");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label02:
        $r4 = (org.springframework.beans.factory.support.AbstractBeanDefinition) $r3;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r37, $r4);

     label03:
        i1 = i1 + 1;

     label04:
        if i1 < i0 goto label01;

        $z2 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        if $z2 == 0 goto label05;

        return;

     label05:
        $z3 = <org.springframework.context.'annotation'.ConfigurationClassPostProcessor: boolean cglibAvailable>;

        if $z3 != 0 goto label06;

        $r26 = new java.lang.IllegalStateException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("CGLIB is required to process @Configuration classes. Either add CGLIB to the classpath or remove the following @Configuration bean definitions: ");

        $r28 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r30);

        throw $r26;

     label06:
        $r10 = new org.springframework.context.'annotation'.ConfigurationClassEnhancer;

        specialinvoke $r10.<org.springframework.context.'annotation'.ConfigurationClassEnhancer: void <init>(org.springframework.beans.factory.config.ConfigurableBeanFactory)>(r1);

        $r11 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

        goto label12;

     label07:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.util.Map$Entry) $r13;

        $r14 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getValue()>();

        r39 = (org.springframework.beans.factory.support.AbstractBeanDefinition) $r14;

     label08:
        $r16 = r15.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: java.lang.ClassLoader beanClassLoader>;

        $r17 = virtualinvoke r39.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class resolveBeanClass(java.lang.ClassLoader)>($r16);

        $r18 = virtualinvoke $r10.<org.springframework.context.'annotation'.ConfigurationClassEnhancer: java.lang.Class enhance(java.lang.Class)>($r17);

        $r19 = r15.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.apache.commons.logging.Log logger>;

        $z5 = interfaceinvoke $r19.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z5 == 0 goto label09;

        $r21 = r15.<org.springframework.context.'annotation'.ConfigurationClassPostProcessor: org.apache.commons.logging.Log logger>;

        $r20 = newarray (java.lang.Object)[3];

        $r22 = interfaceinvoke r38.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20[0] = $r22;

        $r23 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r20[1] = $r23;

        $r24 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20[2] = $r24;

        $r25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Replacing bean definition \'%s\' existing class name \'%s\' with enhanced class name \'%s\'", $r20);

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25);

     label09:
        virtualinvoke r39.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setBeanClass(java.lang.Class)>($r18);

     label10:
        goto label12;

     label11:
        $r31 := @caughtexception;

        $r32 = new java.lang.IllegalStateException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot load configuration class: ");

        $r34 = virtualinvoke r39.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getBeanClassName()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r36, $r31);

        throw $r32;

     label12:
        $z4 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label07;

        return;

        catch java.lang.Throwable from label08 to label10 with label11;
    }
}
