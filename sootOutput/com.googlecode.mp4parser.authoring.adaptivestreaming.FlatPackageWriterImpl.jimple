public class com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl extends java.lang.Object implements com.googlecode.mp4parser.authoring.adaptivestreaming.PackageWriter
{
    private static java.util.logging.Logger LOG;
    long timeScale;
    private java.io.File outputDirectory;
    private boolean debugOutput;
    private com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder ismvBuilder;
    com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter manifestWriter;
    com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder intersectionFinder;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        java.lang.String $r2;
        java.util.logging.Logger $r3;
        boolean $z0, $z1;

        $r0 = class "Lcom/googlecode/mp4parser/authoring/adaptivestreaming/FlatPackageWriterImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: boolean $assertionsDisabled> = $z1;

        $r1 = class "Lcom/googlecode/mp4parser/authoring/adaptivestreaming/FlatPackageWriterImpl;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        <com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.util.logging.Logger LOG> = $r3;

        return;
    }

    public void setIntersectionFinder(com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder)
    {
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl r0;
        com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder r1;

        r0 := @this: com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder;

        r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder intersectionFinder> = r1;

        return;
    }

    public void <init>(int)
    {
        int i0;
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl r0;

        r0 := @this: com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: long timeScale> = 10000000L;

        return;
    }

    public void setOutputDirectory(java.io.File)
    {
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl r0;
        java.lang.AssertionError $r2;
        java.io.File r1;
        boolean $z0, $z1;

        r0 := @this: com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl;

        r1 := @parameter0: java.io.File;

        $z0 = <com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.io.File outputDirectory> = r1;

        return;
    }

    public void setDebugOutput(boolean)
    {
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl r0;
        boolean z0;

        r0 := @this: com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl;

        z0 := @parameter0: boolean;

        r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: boolean debugOutput> = z0;

        return;
    }

    public void setIsmvBuilder(com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder)
    {
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatManifestWriterImpl $r2;
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl r0;
        com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder $r3;
        com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder r1;

        r0 := @this: com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder;

        r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder ismvBuilder> = r1;

        $r2 = new com.googlecode.mp4parser.authoring.adaptivestreaming.FlatManifestWriterImpl;

        $r3 = virtualinvoke r1.<com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder: com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder getFragmentIntersectionFinder()>();

        specialinvoke $r2.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatManifestWriterImpl: void <init>(com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder)>($r3);

        r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter manifestWriter> = $r2;

        return;
    }

    public void setManifestWriter(com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter)
    {
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl r0;
        com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter r1;

        r0 := @this: com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter;

        r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter manifestWriter> = r1;

        return;
    }

    public void write(com.googlecode.mp4parser.authoring.Movie) throws java.io.IOException
    {
        byte $b3;
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl r0;
        com.coremedia.iso.boxes.fragment.MovieFragmentBox $r43, $r53;
        java.lang.StringBuilder $r24, $r25, $r29, $r37, $r103, $r105;
        com.googlecode.mp4parser.authoring.Track r85, r86, r88;
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatManifestWriterImpl $r92;
        com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter $r14, $r39, $r60;
        long $l0, $l1, $l2, $l5, $l6, l8;
        java.lang.AssertionError $r106, $r109;
        com.googlecode.mp4parser.authoring.builder.SyncSampleIntersectFinderImpl $r90;
        java.lang.String $r15, $r23, $r28, $r30, $r36, $r38, $r47, $r51, $r61, $r83;
        java.io.FileOutputStream $r95, $r98, $r100, $r108;
        java.io.File $r32, $r56, $r59, $r63, $r69, $r72, $r76, r89, $r94, $r97, $r99, $r101, $r102, $r104, $r107, $r110;
        com.googlecode.mp4parser.authoring.TrackMetaData $r16;
        com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder $r1, $r2, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        com.coremedia.iso.boxes.Container $r10, $r67, $r74;
        java.util.logging.Logger $r35;
        java.util.List $r11, $r17, $r80;
        com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder $r3, $r9, $r87, $r91;
        long[] $r40, $r44;
        int $i4, $i7, i9, $i11;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder $r93, $r96;
        java.io.PrintStream $r22;
        java.util.Iterator $r12, $r18, $r81;
        com.coremedia.iso.boxes.Box $r19, $r20, $r26, r42, r50;
        java.io.FileWriter $r111;
        com.googlecode.mp4parser.authoring.Movie r6, $r7, $r8;
        java.lang.Object $r13, $r41, $r49, $r82;
        java.lang.Class $r27;
        java.nio.channels.FileChannel $r48, $r65, $r71, $r78;

        r0 := @this: com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl;

        r6 := @parameter0: com.googlecode.mp4parser.authoring.Movie;

        $r1 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder intersectionFinder>;

        if $r1 != null goto label04;

        r85 = null;

        $r80 = virtualinvoke r6.<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>();

        $r81 = interfaceinvoke $r80.<java.util.List: java.util.Iterator iterator()>();

        goto label02;

     label01:
        $r82 = interfaceinvoke $r81.<java.util.Iterator: java.lang.Object next()>();

        r86 = (com.googlecode.mp4parser.authoring.Track) $r82;

        $r83 = interfaceinvoke r86.<com.googlecode.mp4parser.authoring.Track: java.lang.String getHandler()>();

        $z10 = virtualinvoke $r83.<java.lang.String: boolean equals(java.lang.Object)>("vide");

        if $z10 == 0 goto label02;

        r85 = r86;

        goto label03;

     label02:
        $z9 = interfaceinvoke $r81.<java.util.Iterator: boolean hasNext()>();

        if $z9 != 0 goto label01;

     label03:
        $r90 = new com.googlecode.mp4parser.authoring.builder.SyncSampleIntersectFinderImpl;

        $i11 = (int) -1;

        specialinvoke $r90.<com.googlecode.mp4parser.authoring.builder.SyncSampleIntersectFinderImpl: void <init>(com.googlecode.mp4parser.authoring.Movie,com.googlecode.mp4parser.authoring.Track,int)>(r6, r85, $i11);

        r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder intersectionFinder> = $r90;

     label04:
        $r87 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder ismvBuilder>;

        if $r87 != null goto label05;

        $r91 = new com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder;

        specialinvoke $r91.<com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder ismvBuilder> = $r91;

     label05:
        $r3 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder ismvBuilder>;

        $r2 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder intersectionFinder>;

        virtualinvoke $r3.<com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder: void setIntersectionFinder(com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder)>($r2);

        $r92 = new com.googlecode.mp4parser.authoring.adaptivestreaming.FlatManifestWriterImpl;

        $r5 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder intersectionFinder>;

        specialinvoke $r92.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatManifestWriterImpl: void <init>(com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder)>($r5);

        r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter manifestWriter> = $r92;

        $z0 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: boolean debugOutput>;

        if $z0 == 0 goto label06;

        $r72 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.io.File outputDirectory>;

        virtualinvoke $r72.<java.io.File: boolean mkdirs()>();

        $r93 = new com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;

        specialinvoke $r93.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <init>()>();

        $r74 = virtualinvoke $r93.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.Container build(com.googlecode.mp4parser.authoring.Movie)>(r6);

        $r94 = new java.io.File;

        $r76 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.io.File outputDirectory>;

        specialinvoke $r94.<java.io.File: void <init>(java.io.File,java.lang.String)>($r76, "debug_1_muxed.mp4");

        $r95 = new java.io.FileOutputStream;

        specialinvoke $r95.<java.io.FileOutputStream: void <init>(java.io.File)>($r94);

        $r78 = virtualinvoke $r95.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        interfaceinvoke $r74.<com.coremedia.iso.boxes.Container: void writeContainer(java.nio.channels.WritableByteChannel)>($r78);

        virtualinvoke $r95.<java.io.FileOutputStream: void close()>();

     label06:
        $r7 = specialinvoke r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.Movie removeUnknownTracks(com.googlecode.mp4parser.authoring.Movie)>(r6);

        $r8 = virtualinvoke r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.Movie correctTimescale(com.googlecode.mp4parser.authoring.Movie)>($r7);

        $z1 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: boolean debugOutput>;

        if $z1 == 0 goto label07;

        $r96 = new com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;

        specialinvoke $r96.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <init>()>();

        $r67 = virtualinvoke $r96.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.boxes.Container build(com.googlecode.mp4parser.authoring.Movie)>($r8);

        $r97 = new java.io.File;

        $r69 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.io.File outputDirectory>;

        specialinvoke $r97.<java.io.File: void <init>(java.io.File,java.lang.String)>($r69, "debug_2_timescale.mp4");

        $r98 = new java.io.FileOutputStream;

        specialinvoke $r98.<java.io.FileOutputStream: void <init>(java.io.File)>($r97);

        $r71 = virtualinvoke $r98.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        interfaceinvoke $r67.<com.coremedia.iso.boxes.Container: void writeContainer(java.nio.channels.WritableByteChannel)>($r71);

        virtualinvoke $r98.<java.io.FileOutputStream: void close()>();

     label07:
        $r9 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder ismvBuilder>;

        $r10 = virtualinvoke $r9.<com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder: com.coremedia.iso.boxes.Container build(com.googlecode.mp4parser.authoring.Movie)>($r8);

        $z2 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: boolean debugOutput>;

        if $z2 == 0 goto label08;

        $r99 = new java.io.File;

        $r63 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.io.File outputDirectory>;

        specialinvoke $r99.<java.io.File: void <init>(java.io.File,java.lang.String)>($r63, "debug_3_fragmented.mp4");

        $r100 = new java.io.FileOutputStream;

        specialinvoke $r100.<java.io.FileOutputStream: void <init>(java.io.File)>($r99);

        $r65 = virtualinvoke $r100.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        interfaceinvoke $r10.<com.coremedia.iso.boxes.Container: void writeContainer(java.nio.channels.WritableByteChannel)>($r65);

        virtualinvoke $r100.<java.io.FileOutputStream: void close()>();

     label08:
        $r11 = virtualinvoke $r8.<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

        goto label17;

     label09:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r88 = (com.googlecode.mp4parser.authoring.Track) $r13;

        $r14 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter manifestWriter>;

        $l0 = interfaceinvoke $r14.<com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter: long getBitrate(com.googlecode.mp4parser.authoring.Track)>(r88);

        $r15 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r16 = interfaceinvoke r88.<com.googlecode.mp4parser.authoring.Track: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()>();

        $l1 = virtualinvoke $r16.<com.googlecode.mp4parser.authoring.TrackMetaData: long getTrackId()>();

        $r17 = interfaceinvoke $r10.<com.coremedia.iso.boxes.Container: java.util.List getBoxes()>();

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

        $r19 = interfaceinvoke r88.<com.googlecode.mp4parser.authoring.Track: com.coremedia.iso.boxes.Box getMediaHeaderBox()>();

        $z3 = $r19 instanceof com.coremedia.iso.boxes.SoundMediaHeaderBox;

        if $z3 == 0 goto label10;

        $r101 = new java.io.File;

        $r56 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.io.File outputDirectory>;

        specialinvoke $r101.<java.io.File: void <init>(java.io.File,java.lang.String)>($r56, "audio");

        r89 = $r101;

        goto label12;

     label10:
        $r20 = interfaceinvoke r88.<com.googlecode.mp4parser.authoring.Track: com.coremedia.iso.boxes.Box getMediaHeaderBox()>();

        $z4 = $r20 instanceof com.coremedia.iso.boxes.VideoMediaHeaderBox;

        if $z4 == 0 goto label11;

        $r102 = new java.io.File;

        $r32 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.io.File outputDirectory>;

        specialinvoke $r102.<java.io.File: void <init>(java.io.File,java.lang.String)>($r32, "video");

        r89 = $r102;

        goto label12;

     label11:
        $r22 = <java.lang.System: java.io.PrintStream err>;

        $r103 = new java.lang.StringBuilder;

        specialinvoke $r103.<java.lang.StringBuilder: void <init>(java.lang.String)>("Skipping Track with handler ");

        $r23 = interfaceinvoke r88.<com.googlecode.mp4parser.authoring.Track: java.lang.String getHandler()>();

        $r24 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r26 = interfaceinvoke r88.<com.googlecode.mp4parser.authoring.Track: com.coremedia.iso.boxes.Box getMediaHeaderBox()>();

        $r27 = virtualinvoke $r26.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getSimpleName()>();

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r30);

        goto label17;

     label12:
        $r104 = new java.io.File;

        specialinvoke $r104.<java.io.File: void <init>(java.io.File,java.lang.String)>(r89, $r15);

        virtualinvoke $r104.<java.io.File: boolean mkdirs()>();

        $r35 = <com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.util.logging.Logger LOG>;

        $r105 = new java.lang.StringBuilder;

        specialinvoke $r105.<java.lang.StringBuilder: void <init>(java.lang.String)>("Created : ");

        $r36 = virtualinvoke $r104.<java.io.File: java.lang.String getCanonicalPath()>();

        $r37 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<java.util.logging.Logger: void finer(java.lang.String)>($r38);

        $r39 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter manifestWriter>;

        $r40 = interfaceinvoke $r39.<com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter: long[] calculateFragmentDurations(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>(r88, $r8);

        l8 = 0L;

        i9 = 0;

        goto label16;

     label13:
        $r41 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r42 = (com.coremedia.iso.boxes.Box) $r41;

        $z5 = r42 instanceof com.coremedia.iso.boxes.fragment.MovieFragmentBox;

        if $z5 == 0 goto label16;

        $z6 = <com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: boolean $assertionsDisabled>;

        if $z6 != 0 goto label14;

        $r53 = (com.coremedia.iso.boxes.fragment.MovieFragmentBox) r42;

        $i7 = virtualinvoke $r53.<com.coremedia.iso.boxes.fragment.MovieFragmentBox: int getTrackCount()>();

        if $i7 == 1 goto label14;

        $r106 = new java.lang.AssertionError;

        specialinvoke $r106.<java.lang.AssertionError: void <init>()>();

        throw $r106;

     label14:
        $r43 = (com.coremedia.iso.boxes.fragment.MovieFragmentBox) r42;

        $r44 = virtualinvoke $r43.<com.coremedia.iso.boxes.fragment.MovieFragmentBox: long[] getTrackNumbers()>();

        $l2 = $r44[0];

        $b3 = $l2 cmp $l1;

        if $b3 != 0 goto label16;

        $r108 = new java.io.FileOutputStream;

        $r107 = new java.io.File;

        $r47 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l8);

        specialinvoke $r107.<java.io.File: void <init>(java.io.File,java.lang.String)>($r104, $r47);

        specialinvoke $r108.<java.io.FileOutputStream: void <init>(java.io.File)>($r107);

        $i4 = i9;

        i9 = i9 + 1;

        $l5 = $r40[$i4];

        l8 = l8 + $l5;

        $r48 = virtualinvoke $r108.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $r49 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r50 = (com.coremedia.iso.boxes.Box) $r49;

        $z7 = <com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: boolean $assertionsDisabled>;

        if $z7 != 0 goto label15;

        $r51 = interfaceinvoke r50.<com.coremedia.iso.boxes.Box: java.lang.String getType()>();

        $z8 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>("mdat");

        if $z8 != 0 goto label15;

        $r109 = new java.lang.AssertionError;

        specialinvoke $r109.<java.lang.AssertionError: void <init>()>();

        throw $r109;

     label15:
        interfaceinvoke r42.<com.coremedia.iso.boxes.Box: void getBox(java.nio.channels.WritableByteChannel)>($r48);

        interfaceinvoke r50.<com.coremedia.iso.boxes.Box: void getBox(java.nio.channels.WritableByteChannel)>($r48);

        $l6 = virtualinvoke $r48.<java.nio.channels.FileChannel: long position()>();

        virtualinvoke $r48.<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>($l6);

        virtualinvoke $r48.<java.nio.channels.FileChannel: void close()>();

     label16:
        $z11 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z11 != 0 goto label13;

     label17:
        $z12 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z12 != 0 goto label09;

        $r111 = new java.io.FileWriter;

        $r110 = new java.io.File;

        $r59 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.io.File outputDirectory>;

        specialinvoke $r110.<java.io.File: void <init>(java.io.File,java.lang.String)>($r59, "Manifest");

        specialinvoke $r111.<java.io.FileWriter: void <init>(java.io.File)>($r110);

        $r60 = r0.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter manifestWriter>;

        $r61 = interfaceinvoke $r60.<com.googlecode.mp4parser.authoring.adaptivestreaming.ManifestWriter: java.lang.String getManifest(com.googlecode.mp4parser.authoring.Movie)>($r8);

        virtualinvoke $r111.<java.io.FileWriter: void write(java.lang.String)>($r61);

        virtualinvoke $r111.<java.io.FileWriter: void close()>();

        return;
    }

    private com.googlecode.mp4parser.authoring.Movie removeUnknownTracks(com.googlecode.mp4parser.authoring.Movie)
    {
        com.googlecode.mp4parser.authoring.Track r5;
        java.lang.String $r6, $r7, $r8, $r9, $r13;
        java.util.LinkedList $r0;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl r14;
        java.util.logging.Logger $r11;
        java.util.List $r2;
        com.googlecode.mp4parser.authoring.Movie r1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r10, $r12;

        r14 := @this: com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.Movie;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r2 = virtualinvoke r1.<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.googlecode.mp4parser.authoring.Track) $r4;

        $r6 = "vide";

        $r7 = interfaceinvoke r5.<com.googlecode.mp4parser.authoring.Track: java.lang.String getHandler()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        $r8 = "soun";

        $r9 = interfaceinvoke r5.<com.googlecode.mp4parser.authoring.Track: java.lang.String getHandler()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label3;

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label4;

     label3:
        $r11 = <com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: java.util.logging.Logger LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Removed track ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void fine(java.lang.String)>($r13);

     label4:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        virtualinvoke r1.<com.googlecode.mp4parser.authoring.Movie: void setTracks(java.util.List)>($r0);

        return r1;
    }

    public com.googlecode.mp4parser.authoring.Movie correctTimescale(com.googlecode.mp4parser.authoring.Movie)
    {
        com.googlecode.mp4parser.authoring.Track r5;
        java.util.Iterator $r3;
        com.googlecode.mp4parser.authoring.tracks.ChangeTimeScaleTrack $r6;
        com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl r7;
        com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder $r8;
        long $l0;
        java.util.List $r2;
        long[] $r10;
        com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder $r9;
        com.googlecode.mp4parser.authoring.Movie r1;
        java.lang.Object $r4;
        java.util.LinkedList $r0;
        boolean $z0;

        r7 := @this: com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.Movie;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r2 = virtualinvoke r1.<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.googlecode.mp4parser.authoring.Track) $r4;

        $r6 = new com.googlecode.mp4parser.authoring.tracks.ChangeTimeScaleTrack;

        $l0 = r7.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: long timeScale>;

        $r8 = r7.<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder ismvBuilder>;

        $r9 = virtualinvoke $r8.<com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder: com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder getFragmentIntersectionFinder()>();

        $r10 = interfaceinvoke $r9.<com.googlecode.mp4parser.authoring.builder.FragmentIntersectionFinder: long[] sampleNumbers(com.googlecode.mp4parser.authoring.Track)>(r5);

        specialinvoke $r6.<com.googlecode.mp4parser.authoring.tracks.ChangeTimeScaleTrack: void <init>(com.googlecode.mp4parser.authoring.Track,long,long[])>(r5, $l0, $r10);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<com.googlecode.mp4parser.authoring.Movie: void setTracks(java.util.List)>($r0);

        return r1;
    }
}
