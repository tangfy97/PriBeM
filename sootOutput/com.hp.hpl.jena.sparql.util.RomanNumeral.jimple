public class com.hp.hpl.jena.sparql.util.RomanNumeral extends java.lang.Object
{
    int intValue;
    static java.lang.String numeralPattern;
    static java.util.regex.Pattern pattern;

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>("I");

        staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>("IV");

        staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>("IIII");

        staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>("IIIII");

        staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>("IIIIV");

        staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>("XL");

        staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>("XD");

        staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>("XMIX");

        staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>("MIM");

        staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: void roman(java.lang.String)>("MCMXCIX");

        return;
    }

    public static void roman(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r7, $r10, $r12, $r17;
        boolean $z0;
        java.io.PrintStream $r2, $r14, $r18;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r8, $r9, $r11, $r13, $r15, $r16;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: int r2i(java.lang.String)>(r0);

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ==> ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ==> ");

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: java.lang.String i2r(int)>($i0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ==> ");

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: java.lang.String i2r(int)>($i0);

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: int r2i(java.lang.String)>($r10);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r12);

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Valid: ");

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: boolean isValid(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void print(java.lang.String)>($r17);

        $r18 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r18.<java.io.PrintStream: void println()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.NumberFormatException $r2;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.util.RomanNumeral r0;
        java.lang.String r1, $r6;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.util.RomanNumeral;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: boolean isValid(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.NumberFormatException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Roman Numeral: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: int r2i(java.lang.String)>(r1);

        r0.<com.hp.hpl.jena.sparql.util.RomanNumeral: int intValue> = $i0;

        return;
    }

    public void <init>(int)
    {
        java.lang.NumberFormatException $r1, $r7;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11;
        com.hp.hpl.jena.sparql.util.RomanNumeral r0;
        java.lang.String $r6, $r12;

        r0 := @this: com.hp.hpl.jena.sparql.util.RomanNumeral;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 > 0 goto label1;

        $r7 = new java.lang.NumberFormatException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Roman numerals are 1-3999 (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        if i0 <= 3999 goto label2;

        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Roman numerals are 1-3999 (");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        r0.<com.hp.hpl.jena.sparql.util.RomanNumeral: int intValue> = i0;

        return;
    }

    public java.lang.String toString()
    {
        int $i0;
        com.hp.hpl.jena.sparql.util.RomanNumeral r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.RomanNumeral;

        $i0 = r0.<com.hp.hpl.jena.sparql.util.RomanNumeral: int intValue>;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: java.lang.String i2r(int)>($i0);

        return $r1;
    }

    public int intValue()
    {
        int $i0;
        com.hp.hpl.jena.sparql.util.RomanNumeral r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.RomanNumeral;

        $i0 = r0.<com.hp.hpl.jena.sparql.util.RomanNumeral: int intValue>;

        return $i0;
    }

    public static boolean isValid(java.lang.String)
    {
        java.util.regex.Matcher $r3;
        java.util.Locale $r0;
        java.lang.String $r1, r4;
        java.util.regex.Pattern $r2;
        boolean $z0;

        r4 := @parameter0: java.lang.String;

        $r0 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r1 = virtualinvoke r4.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r0);

        $r2 = <com.hp.hpl.jena.sparql.util.RomanNumeral: java.util.regex.Pattern pattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public static int parse(java.lang.String)
    {
        int $i0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: int r2i(java.lang.String)>(r0);

        return $i0;
    }

    public static int r2i(java.lang.String)
    {
        char $c1;
        java.util.Locale $r0;
        int $i0, $i2, i3, i4, i5, $i7;
        java.lang.String $r1, r2;

        r2 := @parameter0: java.lang.String;

        $r0 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r1 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r0);

        i3 = 0;

        i4 = 0;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i5 = $i0 - 1;

     label1:
        if i5 < 0 goto label4;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i5);

        $i2 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: int charToNum(char)>($c1);

        if $i2 >= i3 goto label2;

        i4 = i4 - $i2;

        goto label3;

     label2:
        i4 = i4 + $i2;

        i3 = $i2;

     label3:
        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label1;

     label4:
        return i4;
    }

    public static java.lang.String asRomanNumerals(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: java.lang.String i2r(int)>(i0);

        return $r0;
    }

    public static java.lang.String i2r(int)
    {
        java.lang.StringBuffer $r18;
        int $i0, $i1, i2, i3, $i5;
        java.lang.String $r1, $r7, $r13;
        java.lang.NumberFormatException $r15, $r17;
        java.lang.StringBuilder $r4, $r5, $r6, $r10, $r11, $r12, $r14, $r16;

        i2 := @parameter0: int;

        if i2 > 0 goto label1;

        $r15 = new java.lang.NumberFormatException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Roman numerals are 1-3999 (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r13);

        throw $r15;

     label1:
        if i2 <= 3999 goto label2;

        $r17 = new java.lang.NumberFormatException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Roman numerals are 1-3999 (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);

        throw $r17;

     label2:
        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: int i2r(java.lang.StringBuffer,int,java.lang.String,int,java.lang.String,int,java.lang.String,int,java.lang.String,int)>($r18, i2, "M", 1000, "CM", 900, "D", 500, "CD", 400);

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: int i2r(java.lang.StringBuffer,int,java.lang.String,int,java.lang.String,int,java.lang.String,int,java.lang.String,int)>($r18, $i0, "C", 100, "XC", 90, "L", 50, "XL", 40);

        i3 = staticinvoke <com.hp.hpl.jena.sparql.util.RomanNumeral: int i2r(java.lang.StringBuffer,int,java.lang.String,int,java.lang.String,int,java.lang.String,int,java.lang.String,int)>($r18, $i1, "X", 10, "IX", 9, "V", 5, "IV", 4);

     label3:
        if i3 < 1 goto label4;

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("I");

        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label3;

     label4:
        $r1 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    private static int i2r(java.lang.StringBuffer, int, java.lang.String, int, java.lang.String, int, java.lang.String, int, java.lang.String, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2, i3, i4;
        java.lang.String r1, r2, r3, r4;

        r0 := @parameter0: java.lang.StringBuffer;

        i4 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        i1 := @parameter5: int;

        r2 := @parameter6: java.lang.String;

        i2 := @parameter7: int;

        r1 := @parameter8: java.lang.String;

        i3 := @parameter9: int;

     label1:
        if i4 < i0 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        i4 = i4 - i0;

        goto label1;

     label2:
        if i4 < i1 goto label3;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        i4 = i4 - i1;

     label3:
        if i4 < i2 goto label4;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        i4 = i4 - i2;

     label4:
        if i4 < i3 goto label5;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        i4 = i4 - i3;

     label5:
        return i4;
    }

    private static int charToNum(char)
    {
        char c0, $c2;
        com.hp.hpl.jena.sparql.util.RValue[] $r0, $r1, $r3;
        int $i1, $i3, i4, $i5, $i6;
        com.hp.hpl.jena.sparql.util.RValue $r2, $r4;

        c0 := @parameter0: char;

        if c0 != 0 goto label1;

        return 0;

     label1:
        i4 = 0;

     label2:
        $r0 = <com.hp.hpl.jena.sparql.util.RValue: com.hp.hpl.jena.sparql.util.RValue[] table>;

        $i1 = lengthof $r0;

        if i4 >= $i1 goto label4;

        $r1 = <com.hp.hpl.jena.sparql.util.RValue: com.hp.hpl.jena.sparql.util.RValue[] table>;

        $r2 = $r1[i4];

        $c2 = $r2.<com.hp.hpl.jena.sparql.util.RValue: char lex>;

        $i5 = (int) $c2;

        $i6 = (int) c0;

        if $i5 != $i6 goto label3;

        $r3 = <com.hp.hpl.jena.sparql.util.RValue: com.hp.hpl.jena.sparql.util.RValue[] table>;

        $r4 = $r3[i4];

        $i3 = $r4.<com.hp.hpl.jena.sparql.util.RValue: int val>;

        return $i3;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        java.util.regex.Pattern $r1;

        <com.hp.hpl.jena.sparql.util.RomanNumeral: java.lang.String numeralPattern> = "M*(CM|DC{0,3}|CD|C{0,3})(XC|LX{0,3}|XL|X{0,3})(IX|VI{0,3}|IV|I{0,4})";

        $r0 = <com.hp.hpl.jena.sparql.util.RomanNumeral: java.lang.String numeralPattern>;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r0);

        <com.hp.hpl.jena.sparql.util.RomanNumeral: java.util.regex.Pattern pattern> = $r1;

        return;
    }
}
