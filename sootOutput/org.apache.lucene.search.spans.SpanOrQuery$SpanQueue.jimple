class org.apache.lucene.search.spans.SpanOrQuery$SpanQueue extends org.apache.lucene.util.PriorityQueue
{
    final org.apache.lucene.search.spans.SpanOrQuery this$0;

    public void <init>(org.apache.lucene.search.spans.SpanOrQuery, int)
    {
        int i0;
        org.apache.lucene.search.spans.SpanOrQuery$SpanQueue r0;
        org.apache.lucene.search.spans.SpanOrQuery r1;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue;

        r1 := @parameter0: org.apache.lucene.search.spans.SpanOrQuery;

        i0 := @parameter1: int;

        r0.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: org.apache.lucene.search.spans.SpanOrQuery this$0> = r1;

        specialinvoke r0.<org.apache.lucene.util.PriorityQueue: void <init>(int)>(i0);

        return;
    }

    protected final boolean lessThan(org.apache.lucene.search.spans.Spans, org.apache.lucene.search.spans.Spans)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2;
        org.apache.lucene.search.spans.SpanOrQuery$SpanQueue r2;
        org.apache.lucene.search.spans.Spans r0, r1;

        r2 := @this: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue;

        r0 := @parameter0: org.apache.lucene.search.spans.Spans;

        r1 := @parameter1: org.apache.lucene.search.spans.Spans;

        $i0 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int doc()>();

        $i1 = virtualinvoke r1.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i0 != $i1 goto label6;

        $i4 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int start()>();

        $i5 = virtualinvoke r1.<org.apache.lucene.search.spans.Spans: int start()>();

        if $i4 != $i5 goto label3;

        $i8 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int end()>();

        $i9 = virtualinvoke r1.<org.apache.lucene.search.spans.Spans: int end()>();

        if $i8 >= $i9 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $i6 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int start()>();

        $i7 = virtualinvoke r1.<org.apache.lucene.search.spans.Spans: int start()>();

        if $i6 >= $i7 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        $i2 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int doc()>();

        $i3 = virtualinvoke r1.<org.apache.lucene.search.spans.Spans: int doc()>();

        if $i2 >= $i3 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        return $z2;
    }

    protected volatile boolean lessThan(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.search.spans.SpanOrQuery$SpanQueue r0;
        java.lang.Object r1, r2;
        org.apache.lucene.search.spans.Spans $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanOrQuery$SpanQueue;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.lucene.search.spans.Spans) r1;

        $r3 = (org.apache.lucene.search.spans.Spans) r2;

        $z0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanOrQuery$SpanQueue: boolean lessThan(org.apache.lucene.search.spans.Spans,org.apache.lucene.search.spans.Spans)>($r4, $r3);

        return $z0;
    }
}
