public abstract class org.apache.batik.anim.timing.TimeContainer extends org.apache.batik.anim.timing.TimedElement
{
    protected java.util.List children;

    public void <init>()
    {
        org.apache.batik.anim.timing.TimeContainer r0;
        java.util.LinkedList $r1;

        r0 := @this: org.apache.batik.anim.timing.TimeContainer;

        specialinvoke r0.<org.apache.batik.anim.timing.TimedElement: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.batik.anim.timing.TimeContainer: java.util.List children> = $r1;

        return;
    }

    public void addChild(org.apache.batik.anim.timing.TimedElement)
    {
        java.util.List $r2;
        org.apache.batik.anim.timing.TimedElement r0;
        org.apache.batik.anim.timing.TimeContainer r1;
        java.lang.IllegalArgumentException $r6;
        org.apache.batik.anim.timing.TimedDocumentRoot $r3, $r4, $r5;

        r1 := @this: org.apache.batik.anim.timing.TimeContainer;

        r0 := @parameter0: org.apache.batik.anim.timing.TimedElement;

        if r0 != r1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("recursive datastructure not allowed here!");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.batik.anim.timing.TimeContainer: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        r0.<org.apache.batik.anim.timing.TimedElement: org.apache.batik.anim.timing.TimeContainer parent> = r1;

        $r3 = r1.<org.apache.batik.anim.timing.TimedElement: org.apache.batik.anim.timing.TimedDocumentRoot root>;

        virtualinvoke r1.<org.apache.batik.anim.timing.TimeContainer: void setRoot(org.apache.batik.anim.timing.TimedElement,org.apache.batik.anim.timing.TimedDocumentRoot)>(r0, $r3);

        $r4 = r1.<org.apache.batik.anim.timing.TimedElement: org.apache.batik.anim.timing.TimedDocumentRoot root>;

        virtualinvoke $r4.<org.apache.batik.anim.timing.TimedDocumentRoot: void fireElementAdded(org.apache.batik.anim.timing.TimedElement)>(r0);

        $r5 = r1.<org.apache.batik.anim.timing.TimedElement: org.apache.batik.anim.timing.TimedDocumentRoot root>;

        virtualinvoke $r5.<org.apache.batik.anim.timing.TimedDocumentRoot: void currentIntervalWillUpdate()>();

        return;
    }

    protected void setRoot(org.apache.batik.anim.timing.TimedElement, org.apache.batik.anim.timing.TimedDocumentRoot)
    {
        java.util.Iterator $r4;
        org.apache.batik.anim.timing.TimedDocumentRoot r1;
        java.util.List $r3;
        org.apache.batik.anim.timing.TimedElement r0, r6;
        java.lang.Object $r5;
        org.apache.batik.anim.timing.TimeContainer r2, r7;
        boolean $z0, $z1;

        r7 := @this: org.apache.batik.anim.timing.TimeContainer;

        r0 := @parameter0: org.apache.batik.anim.timing.TimedElement;

        r1 := @parameter1: org.apache.batik.anim.timing.TimedDocumentRoot;

        r0.<org.apache.batik.anim.timing.TimedElement: org.apache.batik.anim.timing.TimedDocumentRoot root> = r1;

        $z0 = r0 instanceof org.apache.batik.anim.timing.TimeContainer;

        if $z0 == 0 goto label3;

        r2 = (org.apache.batik.anim.timing.TimeContainer) r0;

        $r3 = r2.<org.apache.batik.anim.timing.TimeContainer: java.util.List children>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.batik.anim.timing.TimedElement) $r5;

        virtualinvoke r7.<org.apache.batik.anim.timing.TimeContainer: void setRoot(org.apache.batik.anim.timing.TimedElement,org.apache.batik.anim.timing.TimedDocumentRoot)>(r6, r1);

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

     label3:
        return;
    }

    public void removeChild(org.apache.batik.anim.timing.TimedElement)
    {
        java.util.List $r2;
        org.apache.batik.anim.timing.TimedElement r1;
        org.apache.batik.anim.timing.TimeContainer r0;
        org.apache.batik.anim.timing.TimedDocumentRoot $r3, $r4;

        r0 := @this: org.apache.batik.anim.timing.TimeContainer;

        r1 := @parameter0: org.apache.batik.anim.timing.TimedElement;

        $r2 = r0.<org.apache.batik.anim.timing.TimeContainer: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        r1.<org.apache.batik.anim.timing.TimedElement: org.apache.batik.anim.timing.TimeContainer parent> = null;

        virtualinvoke r0.<org.apache.batik.anim.timing.TimeContainer: void setRoot(org.apache.batik.anim.timing.TimedElement,org.apache.batik.anim.timing.TimedDocumentRoot)>(r1, null);

        $r3 = r0.<org.apache.batik.anim.timing.TimedElement: org.apache.batik.anim.timing.TimedDocumentRoot root>;

        virtualinvoke $r3.<org.apache.batik.anim.timing.TimedDocumentRoot: void fireElementRemoved(org.apache.batik.anim.timing.TimedElement)>(r1);

        $r4 = r0.<org.apache.batik.anim.timing.TimedElement: org.apache.batik.anim.timing.TimedDocumentRoot root>;

        virtualinvoke $r4.<org.apache.batik.anim.timing.TimedDocumentRoot: void currentIntervalWillUpdate()>();

        return;
    }

    public org.apache.batik.anim.timing.TimedElement[] getChildren()
    {
        org.apache.batik.anim.timing.TimedElement[] $r1, $r4;
        java.util.List $r2;
        java.lang.Object[] $r3;
        org.apache.batik.anim.timing.TimeContainer r0;

        r0 := @this: org.apache.batik.anim.timing.TimeContainer;

        $r2 = r0.<org.apache.batik.anim.timing.TimeContainer: java.util.List children>;

        $r1 = newarray (org.apache.batik.anim.timing.TimedElement)[0];

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r4 = (org.apache.batik.anim.timing.TimedElement[]) $r3;

        return $r4;
    }

    protected float sampleAt(float, boolean)
    {
        float f0, $f1;
        org.apache.batik.anim.timing.TimeContainer r0;
        boolean z0;

        r0 := @this: org.apache.batik.anim.timing.TimeContainer;

        f0 := @parameter0: float;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.batik.anim.timing.TimedElement: float sampleAt(float,boolean)>(f0, z0);

        $f1 = virtualinvoke r0.<org.apache.batik.anim.timing.TimeContainer: float sampleChildren(float,boolean)>(f0, z0);

        return $f1;
    }

    protected float sampleChildren(float, boolean)
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        byte $b0;
        org.apache.batik.anim.timing.TimedElement r4;
        int $i1;
        float f0, $f1, f2;
        java.lang.Object $r3;
        org.apache.batik.anim.timing.TimeContainer r0;
        boolean z0, $z1;

        r0 := @this: org.apache.batik.anim.timing.TimeContainer;

        f0 := @parameter0: float;

        z0 := @parameter1: boolean;

        f2 = #InfinityF;

        $r1 = r0.<org.apache.batik.anim.timing.TimeContainer: java.util.List children>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.batik.anim.timing.TimedElement) $r3;

        $f1 = virtualinvoke r4.<org.apache.batik.anim.timing.TimedElement: float sampleAt(float,boolean)>(f0, z0);

        $b0 = $f1 cmpg f2;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label2;

        f2 = $f1;

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return f2;
    }

    protected void reset(boolean)
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        org.apache.batik.anim.timing.TimedElement r4;
        java.lang.Object $r3;
        org.apache.batik.anim.timing.TimeContainer r0;
        boolean z0, $z1;

        r0 := @this: org.apache.batik.anim.timing.TimeContainer;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.batik.anim.timing.TimedElement: void reset(boolean)>(z0);

        $r1 = r0.<org.apache.batik.anim.timing.TimeContainer: java.util.List children>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.batik.anim.timing.TimedElement) $r3;

        virtualinvoke r4.<org.apache.batik.anim.timing.TimedElement: void reset(boolean)>(z0);

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return;
    }

    protected boolean isConstantAnimation()
    {
        org.apache.batik.anim.timing.TimeContainer r0;

        r0 := @this: org.apache.batik.anim.timing.TimeContainer;

        return 0;
    }

    public abstract float getDefaultBegin(org.apache.batik.anim.timing.TimedElement);
}
